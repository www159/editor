(()=>{var e={552:(e,t,r)=>{"use strict";r.r(t)},661:(e,t,r)=>{"use strict";r.r(t)},295:(e,t,r)=>{"use strict";r.r(t)},517:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.commonExtensions=void 0;var n=r(778);t.commonExtensions=[{type:"NODE",node:{paragraph:{content:"inline*",group:"block",parseDOM:[{tag:"p"}],toDOM:function(){return["p",0]}}},priority:300},{type:"NODE",node:{doc:{content:"block+"}},priority:1e3},{type:"NODE",node:{text:{group:"inline"}}},{type:"NODE",node:{hard_break:{group:"inline",inline:!0,selectable:!1,parseDOM:[{tag:"br"}],toDOM:function(){return["br"]}}}},{type:"PLUGIN",priority:100,shortcutKey:function(){return n.baseKeymap}}]},684:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ModA=t.ModDelete=t.Delete=t.ModBackspace=t.Backspace=t.ModEnter=t.Enter=void 0;var n=r(778);t.Enter=n.pcBaseKeymap.Enter,t.ModEnter=n.pcBaseKeymap["Mod-Enter"],t.Backspace=n.pcBaseKeymap.Backspace,t.ModBackspace=n.pcBaseKeymap["Mod-Backspace"],t.Delete=n.pcBaseKeymap.Delete,t.ModDelete=n.pcBaseKeymap["Mod-Delete"],t.ModA=n.pcBaseKeymap["Mod-a"]},302:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getClipboardTextSerializer=void 0;var n=r(922);t.getClipboardTextSerializer=function(e){return new n.Plugin({key:new n.PluginKey("customClipboardTextSerializer"),props:{clipboardTextSerializer:function(t){var r="",n=!0,o=t.content,i=o.size;return o.nodesBetween(0,i,(function(t,o){var a,s=function(t){var r;return(r=e.nodes[t.type.name].spec.toText)?r(t,0):null}(t);if(null!==s)return r+=s,!1;t.isText?(r+=(null===(a=t.text)||void 0===a?void 0:a.slice(Math.max(0,o)-o,i-o))||"",n=!1):(t.isLeaf,!n&&t.isBlock&&(r+="\n\n",n=!0))}),0),r}}})}},863:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getImmTransaction=void 0,t.getImmTransaction=function(e){return{tr:e.state.tr,dispatch:e.dispatch}}},829:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.serialCommands=void 0,t.serialCommands=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return function(t,r,n){for(var o=0;o<e.length;o++){var i=e[o](t,r,n);if(t=n.state,o+1===e.length)return i}return!0}}},499:function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__assign||function(){return i=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.Editor=void 0;var a=r(638),s=r(922),l=r(780),c=r(667),h=r(302),p=r(335),u=r(696),d=function(e){function t(t){var r=e.call(this)||this;return r.options={dom:document.createElement("div"),content:"",extensions:new Array,onCreate:function(){return null},onUpdate:function(){return null},onSelectionUpdate:function(){return null},onDestroy:function(){return null}},r.setOptions(t),r.createView(),r.on("create",r.options.onCreate),r.on("update",r.options.onUpdate),r.on("selection update",r.options.onSelectionUpdate),r.on("destroy",r.options.onDestroy),r}return o(t,e),t.prototype.setOptions=function(e){var t=this;this.options=i(i({},this.options),e);var r=this.options.dom;r.spellcheck=!1,r.setAttribute("data-weditor-container","true"),r.tabIndex=-1,r.onfocus=function(){t.view.focus()}},t.prototype.createView=function(){var e=new p.ExtensionResolver(this.options.extensions,this),t=e.schema;this.schema=t,console.log((0,u.elementFromString)(this.options.content)),this.view=new l.EditorView(this.options.dom,{state:s.EditorState.create({doc:a.DOMParser.fromSchema(this.schema).parse((0,u.elementFromString)(this.options.content))}),dispatchTransaction:this.dispatchInner.bind(this)});var r=this.state.reconfigure({plugins:e.plugins.concat([(0,h.getClipboardTextSerializer)(t)])});this.view.updateState(r),this.emit("create",{editor:this})},t.prototype.dispatchInner=function(e){var t=this.state.apply(e),r=!this.state.selection.eq(t.selection);this.view.updateState(t),r&&this.emit("selection change",{editor:this,tr:e}),this.emit("update",{editor:this,tr:e})},Object.defineProperty(t.prototype,"state",{get:function(){return this.view.state},enumerable:!1,configurable:!0}),t.prototype.destroy=function(){this.emit("destroy"),this.view&&this.view.destroy(),this.destoryAllListeners()},t}(c.EventEmitter);t.Editor=d},667:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EventEmitter=void 0;var r=function(){function e(){this.handlers={}}return e.prototype.on=function(e,t){return this.handlers[e]||(this.handlers[e]=[]),this.handlers[e].push(t),this},e.prototype.emitAsync=function(e){for(var t=this,r=[],n=1;n<arguments.length;n++)r[n-1]=arguments[n];var o=this.handlers[e],i=new Array;return o&&o.forEach((function(e){i.push(new Promise((function(n){e.apply(t,r),n()})))})),Promise.all(i),this},e.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];var n=this.handlers[e];return n&&n.forEach((function(r){r.apply(e,t)})),this},e.prototype.off=function(e,t){var r=this.handlers[e];return r&&(t?this.handlers[e]=r.filter((function(e){return e!==t})):delete this.handlers[e]),this},e.prototype.destoryAllListeners=function(){this.handlers={}},e}();t.EventEmitter=r},335:function(e,t,r){"use strict";var n=this&&this.__assign||function(){return n=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0}),t.ExtensionResolver=void 0;var o=r(638),i=r(460),a=r(738),s=function(){function e(e,t){this.extensions=e,this.editor=t;var r={},i={};this.extensions=e.map((function(e){return e.priority=e.priority||200,e})).sort((function(e,t){return t.priority-e.priority})),this.extensions.forEach((function(e){switch(e.type){case"MARK":r=n(n({},r),e.mark);break;case"NODE":i=n(n({},i),e.node)}})),this.schema=new o.Schema({nodes:i,marks:r})}return Object.defineProperty(e.prototype,"plugins",{get:function(){var e=this;return this.extensions.map((function(t){var r=new Array;return(r=r.concat((0,a.bindFunc)(t,{editor:e.editor,type:(0,i.getType)("MARK"===t.type?t.mark:t.node,e.schema)}))).concat(t.plugins)})).flat().filter((function(e){return void 0!==e}))},enumerable:!1,configurable:!0}),e}();t.ExtensionResolver=s},709:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EventEmitter=t.Editor=void 0;var n=r(499);Object.defineProperty(t,"Editor",{enumerable:!0,get:function(){return n.Editor}});var o=r(667);Object.defineProperty(t,"EventEmitter",{enumerable:!0,get:function(){return o.EventEmitter}})},738:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.bindFunc=void 0;var n=r(896),o=r(629);t.bindFunc=function(e,t){var r=new Array;return e.inputRules&&r.push((0,n.inputRules)({rules:e.inputRules.apply(t)})),e.shortcutKey&&r.push((0,o.keymap)(e.shortcutKey.apply(t))),r}},696:function(e,t,r){"use strict";var n=this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e};Object.defineProperty(t,"__esModule",{value:!0}),t.elementFromString=void 0;var o,i=r(942);t.elementFromString=function(e){console.log(e);var t=(0,i.html)(o||(o=n(["<body>","</body>"],["<body>","</body>"])),e);return(new window.DOMParser).parseFromString(t,"text/html").body}},460:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getType=void 0,t.getType=function(e,t){return e?t.nodes[Object.keys(e)[0]]:null}},893:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.recursiveTextSerializer=void 0,t.recursiveTextSerializer=function(e,t,r,n){void 0===r&&(r=""),void 0===n&&(n="");var o=e.type.spec.toText;return""+r+(o instanceof Function?o(e,t):e.textContent)+n}},942:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.css=t.html=void 0,t.html=String.raw,t.css=String.raw},483:function(e,t,r){"use strict";var n=this&&this.__makeTemplateObject||function(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e};Object.defineProperty(t,"__esModule",{value:!0});var o=r(658);r(661),r(295),r(552);var i,a=r(942);window.editor=new o.Editor({content:(0,a.html)(i||(i=n(['\n    <p>list test</p>\n    <ul type="disc">\n        <li><p>这是1</p></li>\n        <li><p>这是2</p></li>\n        <li>\n            <p>内部</p>\n            <ul type= "circle">\n                <li><p>内部1</p></li>\n            </ul>\n        </li>\n    </ul>\n    '],['\n    <p>list test</p>\n    <ul type="disc">\n        <li><p>这是1</p></li>\n        <li><p>这是2</p></li>\n        <li>\n            <p>内部</p>\n            <ul type= "circle">\n                <li><p>内部1</p></li>\n            </ul>\n        </li>\n    </ul>\n    ']))),dom:document.querySelector(".editor"),extensions:o.extensions,onCreate:function(){return null},onDestroy:function(){return null},onSelectionUpdate:function(){return null},onUpdate:function(){return null}}),document.addEventListener("keydown",(function(e){"Tab"===e.key&&e.preventDefault()}))},203:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.headingExtension=void 0;var n=r(896);t.headingExtension={type:"NODE",node:{heading:{group:"block",content:"inline*",defining:!0,attrs:{level:{default:1}},parseDOM:[{tag:"h1",attrs:{level:1}},{tag:"h2",attrs:{level:2}},{tag:"h3",attrs:{level:3}},{tag:"h4",attrs:{level:4}},{tag:"h5",attrs:{level:5}},{tag:"h6",attrs:{level:6}}],toDOM:function(e){return["h"+e.attrs.level,0]},toText:function(e){return function(e){var t="";console.log(e.attrs.level);for(var r=0;r<e.attrs.level;r++)t+="#";return t}(e)+" "+e.textContent}}},inputRules:function(){for(var e=new Array,t=1;t<=6;t++)e.push((0,n.textblockTypeInputRule)(new RegExp("^(#{1,"+t+"})\\s$"),this.type,(function(e){return{level:e[1].length}})));return e}}},658:function(e,t,r){"use strict";var n=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var n,o=0,i=t.length;o<i;o++)!n&&o in t||(n||(n=Array.prototype.slice.call(t,0,o)),n[o]=t[o]);return e.concat(n||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0}),t.extensions=t.Editor=void 0;var o=r(528),i=r(517),a=r(203),s=r(12),l=r(709);Object.defineProperty(t,"Editor",{enumerable:!0,get:function(){return l.Editor}});var c=Array();t.extensions=c,c.push.apply(c,n(n(n(n([],i.commonExtensions,!1),o.mathExtensions,!1),[a.headingExtension],!1),s.listExtensions,!1))},127:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.deleteListItem=void 0;var n=r(684),o=r(829),i=r(92);t.deleteListItem=function(e,t){return function(r,a){var s,l=r.selection,c=l.$from,h=l.$to,p=c.node(-1);return!(c.depth<2||p.type!==e||c.parent.type!==e&&0!==c.index(-1)||!c.sameParent(h)||c.parentOffset)&&((p.type===e&&c.parent.childCount||c.node(-5)&&c.node(-5).type===e)&&!c.index(-2)&&(null===(s=c.node(-2).firstChild)||void 0===s?void 0:s.type)===e?(0,i.liftListItem)(e)(r,a):(0,o.serialCommands)(n.Backspace,n.Backspace)(r,a,t))}}},92:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.liftListItem=void 0;var n=r(638),o=r(81);t.liftListItem=function(e){return function(t,r){var i=t.selection,a=i.$from,s=i.$to,l=a.blockRange(s,(function(t){var r;return!!t.childCount&&(null===(r=t.firstChild)||void 0===r?void 0:r.type)===e}));return!!l&&(!r||(a.node(l.depth-1).type===e?function(e,t,r,i){var a=e.tr,s=i.end,l=i.$to.end(i.depth);return s<l&&(a.step(new o.ReplaceAroundStep(s-1,l,s,l,new n.Slice(n.Fragment.from(r.create(null,i.parent.copy())),1,0),1,!0)),i=new n.NodeRange(a.doc.resolve(i.$from.pos),a.doc.resolve(l),i.depth)),t&&t(a.lift(i,(0,o.liftTarget)(i)).scrollIntoView()),!0}(t,r,e,l):function(e,t,r){for(var i=e.tr,a=r.parent,s=r.end,l=r.endIndex-1,c=r.startIndex;l>c;l--)s-=a.child(l).nodeSize,i.delete(s-1,s+1);var h=i.doc.resolve(r.start),p=h.nodeAfter;if(i.mapping.map(r.end)!==r.start+p.nodeSize)return!1;var u=0===r.startIndex,d=r.endIndex===a.childCount,f=h.node(-1),m=h.index(-1);if(!f.canReplace(m+(u?0:1),m+1,p.content.append(d?n.Fragment.empty:n.Fragment.from(a))))return!1;var g=h.pos,v=g+p.nodeSize;return i.step(new o.ReplaceAroundStep(g-(u?1:0),v+(d?1:0),g+1,v-1,new n.Slice((u?n.Fragment.empty:n.Fragment.from(a.copy(n.Fragment.empty))).append(d?n.Fragment.empty:n.Fragment.from(a.copy(n.Fragment.empty))),u?0:1,d?0:1),u?0:1,!0)),t&&t(i.scrollIntoView()),!0}(t,r,l)))}}},126:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.newLineInList=void 0;var n=r(684);t.newLineInList=function(e){return function(t,r){var o=t.selection,i=o.$from,a=o.$to,s=(i.parent,i.node(-1));return i.parent.type,!(i.depth<2||s.type!==e||!i.sameParent(a))&&(0,n.Enter)(t,r)}}},30:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.sinkListItem=void 0;var n=r(638),o=r(81),i=r(397);t.sinkListItem=function(e){return function(t,r){var a=t.selection,s=a.$from,l=a.$to,c=s.blockRange(l,(function(t){var r;return 0!==t.childCount&&(null===(r=t.firstChild)||void 0===r?void 0:r.type)==e}));if(!c)return!1;var h=c.startIndex,p=c.parent;if(0===h)return!1;var u=p.child(h-1);if(u.type!==e)return!1;if(console.log((0,i.getNextAttr)(p)),r){var d=u.lastChild&&u.lastChild.type==p.type,f=n.Fragment.from(d?e.create():void 0),m=new n.Slice(n.Fragment.from(e.create(null,n.Fragment.from(p.type.create((0,i.getNextAttr)(p),f)))),d?3:1,0),g=c.start,v=c.end;r(t.tr.step(new o.ReplaceAroundStep(g-(d?3:1),v,g,v,m,1,!0)).scrollIntoView())}return!0}}},729:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.splitListItem=void 0;var n=r(638),o=r(922),i=r(81);t.splitListItem=function(e){return function(t,r){var a=t.selection,s=a.$from,l=a.$to,c=a.node;if(c&&c.isBlock||s.depth<2||!s.sameParent(l))return!1;var h=s.node(-1);if(h.type!==e)return!1;if(0===s.parent.content.size&&h.childCount==s.indexAfter(-1)){if(2==s.depth||s.node(-3).type!==e||s.index(-2)!==s.node(-2).childCount-1)return!1;if(r){for(var p=n.Fragment.empty,u=s.index(-1)?1:s.index(-2)?2:3,d=s.indexAfter(-1)<s.node(-2).childCount?1:s.indexAfter(-2)<s.node(-3).childCount?2:3,f=s.before(s.depth-u+1),m=s.depth-u;m>=s.depth-3;m--)p=n.Fragment.from(s.node(m).copy(p));p=p.append(n.Fragment.from(e.createAndFill())),console.log(p);var g=t.tr.replace(f,s.after(-d),new n.Slice(p,4-u,0)),v=-1;g.doc.nodesBetween(f,g.doc.content.size,(function(e,t){if(v>-1)return!1;e.isTextblock&&0===e.content.size&&(v=t+1)})),v>-1&&g.setSelection(o.Selection.near(g.doc.resolve(v))),r(g.scrollIntoView())}return!0}var y=l.pos===s.end()?h.contentMatchAt(0).defaultType:null,b=t.tr.delete(s.pos,l.pos),w=y&&[null,{type:y}];if(!(0,i.canSplit)(b.doc,s.pos,2,w))return!1;b.split(s.pos,2,w);var x=b.selection.$to;return x=b.doc.resolve(x.end()),r&&r(b.scrollIntoView()),!0}}},27:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.wrapInList=void 0;var n=r(638),o=r(81);t.wrapInList=function(e,t){return function(r,i){var a=r.selection,s=a.$from,l=a.$to,c=s.blockRange(l),h=!1,p=c;if(!c)return!1;if(c.depth>=2&&s.node(c.depth-1).type.compatibleContent(e)&&0===c.startIndex){if(0==s.index(c.depth-1))return!1;var u=r.doc.resolve(c.$from.before());p=new n.NodeRange(u,u,c.depth),c.endIndex<c.parent.childCount&&(c=new n.NodeRange(s,r.doc.resolve(l.end(c.depth)),c.depth)),h=!0}var d=(0,o.findWrapping)(p,e,t,c);return!!d&&(i&&i(function(e,t,r,i,a){for(var s=n.Fragment.empty,l=(null==r?void 0:r.length)-1;l>=0;l--)s=n.Fragment.from(r[l].type.create(r[l].attrs,s));e.step(new o.ReplaceAroundStep(t.start-(i?2:0),t.end,t.start,t.end,new n.Slice(s,0,0),r.length,!0));var c=0;for(l=0;l<r.length;l++)r[l].type==a&&(c=l+1);for(var h=r.length-c,p=t.start+r.length-(i?2:0),u=t.parent,d=(l=t.startIndex,t.endIndex),f=!0;l<d;l++,f=!1)!f&&(0,o.canSplit)(e.doc,p,h)&&(e.split(p,h),p+=2*h),p+=u.child(l).nodeSize;var m=e.doc.resolve(t.start).nodeBefore;return(null==m?void 0:m.type)===a&&(0,o.canJoin)(e.doc,t.start)&&e.join(t.start,1),e}(r.tr,c,d,h,e).scrollIntoView()),!0)}}},12:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.listExtensions=void 0;var n=r(893),o=r(896),i=r(127),a=r(92),s=r(126),l=r(30),c=r(729),h=r(27),p=r(268);t.listExtensions=[{type:"NODE",node:{ordered_list:{group:"block list",content:"list_item*",attrs:{start:{default:1},type:{default:"1"}},parseDOM:[{tag:"ol",getAttrs:function(e){console.log("attr");var t=e;return{start:t.hasAttribute("start")?t.getAttribute("start"):1,type:t.hasAttribute("type")?t.getAttribute("type"):"1"}}}],toDOM:function(e){return["ol",{start:e.attrs.start,type:e.attrs.type},0]},toText:function(e,t){var r="",o=e.attrs,i=o.start,a=o.type,s=(0,p.getTable)(a);t+=2;for(var l=0;l<e.childCount;l++)r+=(0,n.recursiveTextSerializer)(e.child(l),t,""+" ".repeat(t)+s(i+0)+". ","\n");return"\n  "+r+"\n"}}},shortcutKey:function(){return{"Ctrl-Shift-8":(0,h.wrapInList)(this.type)}},inputRules:function(){return[(0,o.wrappingInputRule)(/^(\d+)\.\s$/,this.type,(function(e){e[1]}),(function(e,t){return t.childCount+t.attrs.start===Number.parseInt(e[1])}))]}},{type:"NODE",node:{bullet_list:{group:"block list",content:"list_item*",attrs:{type:{default:"disc"}},parseDOM:[{tag:"ul",getAttrs:function(e){var t=e;return{type:t.hasAttribute("type")?t.getAttribute("type"):"disc"}}}],toDOM:function(e){return["ul",{style:"list-style-type:"+e.attrs.type+";"},0]},toText:function(e,t){var r="";t+=2;for(var o=0;o<e.childCount;o++)r+=(0,n.recursiveTextSerializer)(e.child(o),t," ".repeat(t)+"- ","\n");return"\n"+r+"\n"}}},shortcutKey:function(){return{"Ctrl-Shift-9":(0,h.wrapInList)(this.type)}},inputRules:function(){return[(0,o.wrappingInputRule)(/^\s*[-,\+,\*]\s$/,this.type)]}},{type:"NODE",node:{list_item:{content:"paragraph block*",parseDOM:[{tag:"li"}],toDOM:function(){return["li",0]},defining:!0,toText:function(e,t){return(0,n.recursiveTextSerializer)(e.child(0),t)}}},shortcutKey:function(){return{Enter:(0,c.splitListItem)(this.type),Tab:(0,l.sinkListItem)(this.type),"Shift-Tab":(0,a.liftListItem)(this.type),"Ctrl-Enter":(0,s.newLineInList)(this.type),Backspace:(0,i.deleteListItem)(this.type,this.editor.view)}}}]},917:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BulletListOptions=t.OrderedListOptions=void 0,t.OrderedListOptions=["1","i","a","A"],t.BulletListOptions=["disc","circle","square"]},397:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getNextAttr=void 0;var n=r(917);t.getNextAttr=function(e){var t=e.type.name,r=e.attrs,o="bullet_list"===t?n.BulletListOptions:n.OrderedListOptions,i=o.findIndex((function(e){return e===r.type}));return{type:o[(i+1)%o.length]}}},268:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getTable=void 0;var r=[1e3,900,500,400,100,90,50,40,10,9,5,4,1],n=["M","CM","D","CD","C","XC","L","XL","X","IX","V","IV","I"];t.getTable=function(e){switch(e){case"1":return function(e){return e};case"a":return function(e){return String.fromCharCode(65+e-1)};case"A":return function(e){return String.fromCharCode(97+e-1)};case"i":return function(e){for(var t="",o=0;o<r.length;o++)for(;e>=r[o];)e-=r[o],t+=n[o];return t}}}},680:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.collaspeMathCmd=void 0;var n=r(778),o=r(922),i=r(953);t.collaspeMathCmd=function(e,t,r,a,s){return void 0===s&&(s=!0),function(l,c){var h=e.state,p=h.selection,u=p.to,d=p.from,f=l.selection,m=f.to,g=f.from;if(s&&m!==g)return!1;var v=t>0?m:g;if(r){var y=l.doc.nodeSize-2;if(t>0&&v<y)return!1;if(t<0&&v>0)return!1}if(c){var b=t>0?u:d;if(!h.doc.nodeAt(b)&&a===i.displayMode.display){var w=(0,n.createParagraphNear)(h,e.dispatch);return w&&t>0&&e.focus(),w}e.dispatch(h.tr.setSelection(o.Selection.near(h.doc.resolve(b),t))),e.focus()}return!0}}},528:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mathExtensions=void 0;var n=r(614),o=r(953),i=r(155),a=r(720);t.mathExtensions=[{type:"NODE",node:{math_inline:{group:"inline math",content:"inline*",inline:!0,atom:!0,toDOM:function(){return["math-inline",{class:"math-node"},0]},parseDOM:[{tag:"math-inline"}],toText:function(e){return"$"+e.textContent+"$"}}},inputRules:function(){return[(0,n.makeInlineMathInputRule)(n.REGEX_INLINE_MATH_DOLLARS_ESCAPED,this.type),(0,n.makeInlineMathInputRule)(n.REGEX_INLINE_MATH_DOLLARS_LITE,this.type)]}},{type:"NODE",node:{math_display:{group:"block math",content:"inline*",atom:!0,code:!0,toDOM:function(){return["math-display",{class:"math-node"},0]},parseDOM:[{tag:"math-display"}],toText:function(e){return"\n\n$$\n"+e.textContent+"}\n$$"}}},inputRules:function(){return[(0,n.makeBlockMathInputrule)(n.REGEX_BLOCK_MATH_DOLLARS,this.type)]}},{type:"PLUGIN",plugins:[a.mathPreviewPlugin,i.mathSelectPlugin,o.mathPlugin]}]},47:function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),s=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&i(t,e,r);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.MathView=void 0;var l=s(r(527)),c=r(778),h=r(629),p=r(922),u=r(780),d=r(81),f=r(709),m=r(680),g=r(953),v=r(720),y=r(863),b=function(e){function t(t,r,n,o,i,a,s){void 0===i&&(i={});var l=e.call(this)||this;return l.doc=t,l.outerView=r,l.getPos=n,l.displayMode=o,s&&l.on("destroy",s),l.mathPluginKey=a,l.cursorSide="start",l.isEditing=!1,l.katexOptions=Object.assign({globalGroup:!0,throwOnError:!1,displayMode:o},i.katexOptions),l.tagname=i.tagName||l.doc.type.name.replace("_","-"),l.dom=document.createElement(l.tagname),l.dom.classList.add("math-node"),l.mathRenderElt=document.createElement("span"),l.mathRenderElt.textContent="",l.mathRenderElt.classList.add("math-render"),l.dom.appendChild(l.mathRenderElt),l.mathSrcElt=document.createElement("span"),l.mathSrcElt.classList.add("math-src"),l.dom.appendChild(l.mathSrcElt),l.dom.addEventListener("click",(function(){return l.ensureFocus()})),l.renderMath(),l}return o(t,e),t.prototype.ensureFocus=function(){this.innerView&&this.outerView.hasFocus()&&this.innerView.focus()},t.prototype.renderMath=function(){this.mathRenderElt&&this.renderKatex(this.dom)},t.prototype.renderKatex=function(e,t,r){var n,o,i;void 0===t&&(t=!0);var a=this.doc.content.content,s="";if(t?a.length>0&&null!==a[0].textContent&&(s=a[0].textContent.trim()):s=null==r?void 0:r.textContent,s.length<1){if(e.classList.add("empty-math"),t){for(;null===(n=this.mathRenderElt)||void 0===n?void 0:n.firstChild;)this.mathRenderElt.firstChild.remove();return}}else e.classList.remove("empty-math");try{t?(l.default.render(s,this.mathRenderElt,this.katexOptions),null===(o=this.mathRenderElt)||void 0===o||o.classList.remove("parse-error")):l.default.render(s,e,this.katexOptions)}catch(r){if(!(r instanceof l.ParseError))throw r;console.error(r),t&&(null===(i=this.mathRenderElt)||void 0===i||i.classList.add("parse-error")),e.setAttribute("title",r.toString())}return e},t.prototype.update=function(e,t){if(!e.sameMarkup(this.doc))return!1;if(this.doc=e,this.innerView){var r=this.innerView.state,n=e.content.findDiffStart(r.doc.content);if(null!=n){var o=e.content.findDiffEnd(r.doc.content);if(o){var i=o.a,a=o.b,s=n-Math.min(i,a);s>0&&(i+=s,a+=s),this.innerView.dispatch(r.tr.replace(n,a,e.slice(n,i)).setMeta(g.MATH_PLUGIN_KEY,!0))}}}return this.isEditing||this.renderMath(),!0},t.prototype.destroy=function(){this.emit("destroy"),this.closeEditor(!1),this.mathRenderElt&&(this.mathRenderElt.remove(),delete this.mathRenderElt),this.mathSrcElt&&(this.mathSrcElt.remove(),delete this.mathSrcElt),this.dom.remove()},t.prototype.updateCursorPos=function(e){var t=this.getPos(),r=this.doc.nodeSize;e.selection.from<t+r&&t<e.selection.to||(this.cursorSide=t<e.selection.from?"end":"start")},t.prototype.selectNode=function(){if(this.outerView.editable&&(this.dom.classList.add("ProseMirror-selectednode"),!this.isEditing)){this.openEditor(),this.katexDiv=document.createElement("div"),this.katexDiv.className="math-preview";var e=(0,y.getImmTransaction)(this.outerView),t=e.tr,r=e.dispatch,n=(0,y.getImmTransaction)(this.innerView).tr;r(t.setMeta(v.MATH_PREVIEW_KEY,{type:"ADD",pos:this.getPos(),katexDOM:this.renderKatex(this.katexDiv,!1,n.doc)}))}},t.prototype.deselectNode=function(){this.dom.classList.remove("ProseMirror-selectednode"),this.isEditing&&this.closeEditor()},t.prototype.stopEvent=function(e){return void 0!==this.innerView&&void 0!==e.target&&this.innerView.dom.contains(e.target)},t.prototype.ignoreMutation=function(){return!0},t.prototype.openEditor=function(){var e,t=this;if(this.innerView)throw Error("inner view should not exist!");this.innerView=new u.EditorView(this.mathSrcElt,{state:p.EditorState.create({doc:this.doc,plugins:[(0,h.keymap)({Tab:function(e,t){return t&&t(e.tr.insertText("\t")),!0},Backspace:(0,c.chainCommands)(c.deleteSelection,(function(e,r){return!(!e.selection.empty||t.doc.textContent.length>0||(t.outerView.dispatch(t.outerView.state.tr.insertText("")),t.outerView.focus(),0))})),"Ctrl-Backspace":function(e,r){return t.outerView.dispatch(t.outerView.state.tr.insertText("")),t.outerView.focus(),!0},Enter:(0,c.chainCommands)(c.newlineInCode,(0,m.collaspeMathCmd)(this.outerView,1,!1,this.displayMode)),"Ctrl-Enter":(0,m.collaspeMathCmd)(this.outerView,1,!1,this.displayMode),ArrowLeft:(0,m.collaspeMathCmd)(this.outerView,-1,!0,this.displayMode),ArrowUp:(0,m.collaspeMathCmd)(this.outerView,-1,!0,this.displayMode),ArrowRight:(0,m.collaspeMathCmd)(this.outerView,1,!0,this.displayMode),ArrowDown:(0,m.collaspeMathCmd)(this.outerView,1,!0,this.displayMode),Space:function(e,t){return t&&t(e.tr.insertText(" ")),!0}})]}),dispatchTransaction:this.dispatchInner.bind(this)});var r=this.innerView.state;this.innerView.focus();var n=null===(e=this.mathPluginKey.getState(this.outerView.state))||void 0===e?void 0:e.prevCursorPos;null==n&&console.error("[prosemirror-math] Error:  Unable to fetch math plugin state from key.");var o=(null!=n?n:0)<=this.getPos()?0:this.doc.nodeSize-2;this.innerView.dispatch(r.tr.setSelection(p.TextSelection.create(r.doc,o))),this.isEditing=!0},t.prototype.closeEditor=function(e){void 0===e&&(e=!0),this.innerView&&(this.innerView.destroy(),this.innerView=void 0),e&&this.renderMath();var t=(0,y.getImmTransaction)(this.outerView),r=t.tr;(0,t.dispatch)(r.setMeta(v.MATH_PREVIEW_KEY,{type:"REMOVE",pos:this.getPos(),katexDOM:this.katexDiv})),this.isEditing=!1},t.prototype.dispatchInner=function(e){if(this.innerView){if(e.docChanged){var t=(0,y.getImmTransaction)(this.outerView),r=t.tr,n=t.dispatch;this.renderKatex(this.katexDiv,!1,e.doc),n(r.setMeta(v.MATH_PREVIEW_KEY,{type:"MODIFY"}))}var o=this.innerView.state.applyTransaction(e),i=o.state,a=o.transactions;if(this.innerView.updateState(i),!e.getMeta(g.MATH_PLUGIN_KEY)){r=this.outerView.state.tr;for(var s=d.StepMap.offset(this.getPos()+1),l=0;l<a.length;l++)for(var c=a[l].steps,h=0;h<c.length;h++){var p=c[h].map(s);if(!p)throw Error("step discarded");r.step(p)}r.docChanged&&this.outerView.dispatch(r)}}},t}(f.EventEmitter);t.MathView=b},953:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mathPlugin=t.createMathView=t.displayMode=t.MATH_PLUGIN_KEY=void 0;var n=r(922),o=r(47);function i(e){return function(r,n,i){var a=t.MATH_PLUGIN_KEY.getState(n.state);if(!a)throw new Error("no math plugin!");var s=a.activeNodeViews,l=new o.MathView(r,n,i,e,{katexOptions:{macros:a.macros}},t.MATH_PLUGIN_KEY,(function(){return s.splice(s.indexOf(l))}));return s.push(l),l}}t.MATH_PLUGIN_KEY=new n.PluginKey("prosemirror-math"),t.displayMode={inline:!1,display:!0},t.createMathView=i,t.mathPlugin=new n.Plugin({key:t.MATH_PLUGIN_KEY,state:{init:function(e,t){return{macros:{},activeNodeViews:[],prevCursorPos:0}},apply:function(e,t,r,n){return{activeNodeViews:t.activeNodeViews,macros:t.macros,prevCursorPos:r.selection.from}}},props:{nodeViews:{math_inline:i(t.displayMode.inline),math_display:i(t.displayMode.display)}}})},614:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.makeInlineMathInputRule=t.makeBlockMathInputrule=t.REGEX_BLOCK_MATH_DOLLARS=t.REGEX_INLINE_MATH_DOLLARS_LITE=t.REGEX_INLINE_MATH_DOLLARS_ESCAPED=t.REGEX_INLINE_MATH_DOLLARS=void 0;var n=r(896),o=r(922);t.REGEX_INLINE_MATH_DOLLARS=/\$(.+)\$/,t.REGEX_INLINE_MATH_DOLLARS_ESCAPED=function(){try{return/(?<!\\\\)\$(.+)(?<!\\\\)\$/}catch(e){return t.REGEX_INLINE_MATH_DOLLARS}}(),t.REGEX_INLINE_MATH_DOLLARS_LITE=/(?<!\$)\$\s+$/,t.REGEX_BLOCK_MATH_DOLLARS=/\$\$\s+$/,t.makeBlockMathInputrule=function(e,t,r){return new n.InputRule(e,(function(e,n,i,a){var s=e.doc.resolve(i),l=r instanceof Function?r(n):r;if(!s.node(-1).canReplaceWith(s.index(-1),s.indexAfter(-1),t))return null;if("math_display"===t.name&&0!==s.parentOffset)return null;var c=e.tr.delete(i,a).setBlockType(i,i,t,l);return c.setSelection(o.NodeSelection.create(c.doc,c.mapping.map(s.pos-1)))}))},t.makeInlineMathInputRule=function(e,r,i){return new n.InputRule(e,(function(e,n,a,s){var l=e.doc.resolve(a),c=e.doc.resolve(s),h=l.index(),p=i instanceof Function?i(n):i;if(!l.parent.canReplaceWith(h,c.index(),r))return null;var u=t.REGEX_INLINE_MATH_DOLLARS_LITE.test(n[0]),d=e.tr.replaceRangeWith(a,s,u?r.create(p):r.create(p,r.schema.text(n[1])));return d.setSelection(o.NodeSelection.create(d.doc,l.pos))}))}},720:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mathPreviewPlugin=t.PREVIEW_WIDGET_KEY=t.MATH_PREVIEW_KEY=void 0;var n=r(922),o=r(780);t.MATH_PREVIEW_KEY=new n.PluginKey("prosemirror math preview"),t.PREVIEW_WIDGET_KEY="prosemirror math preview",t.mathPreviewPlugin=new n.Plugin({key:t.MATH_PREVIEW_KEY,state:{init:function(e,t){return o.DecorationSet.empty},apply:function(e,r){r.map(e.mapping,e.doc);var n=e.getMeta(t.MATH_PREVIEW_KEY);if(!n)return r;var i=n.pos,a=n.type,s=n.katexDOM;switch(a){case"ADD":return r.add(e.doc,[o.Decoration.widget(i,s,{key:t.PREVIEW_WIDGET_KEY})]);default:return r;case"REMOVE":var l=r.find(void 0,void 0,(function(e){return e.key===t.PREVIEW_WIDGET_KEY}));return r.remove(l)}}},props:{decorations:function(e){return this.getState(e)}}})},155:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mathSelectPlugin=void 0;var n=r(922),o=r(780),i=function(e){var t=e.selection,r=t.from,n=(t.to,e.selection.content().content),i=new Array;return n.descendants((function(e,t,n){return!("text"===e.type.name||e.type.name.startsWith("math_")&&(i.push({start:Math.max(r+t-1,0),end:r+t+e.nodeSize-1}),1))})),o.DecorationSet.create(e.doc,i.map((function(e){var t=e.start,r=e.end;return o.Decoration.node(t,r,{class:"math-select"})})))};t.mathSelectPlugin=new n.Plugin({state:{init:function(e,t){return i(t)},apply:function(e,t){return e.selection&&e.selectionSet?i(e):t}},props:{decorations:function(e){return t.mathSelectPlugin.getState(e)}}})},527:function(e){var t;"undefined"!=typeof self&&self,t=function(){return function(){"use strict";var e={d:function(t,r){for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}},t={};e.d(t,{default:function(){return Xn}});var r=function e(t,r){this.position=void 0;var n,o="KaTeX parse error: "+t,i=r&&r.loc;if(i&&i.start<=i.end){var a=i.lexer.input;n=i.start;var s=i.end;n===a.length?o+=" at end of input: ":o+=" at position "+(n+1)+": ";var l=a.slice(n,s).replace(/[^]/g,"$&̲");o+=(n>15?"…"+a.slice(n-15,n):a.slice(0,n))+l+(s+15<a.length?a.slice(s,s+15)+"…":a.slice(s))}var c=new Error(o);return c.name="ParseError",c.__proto__=e.prototype,c.position=n,c};r.prototype.__proto__=Error.prototype;var n=r,o=/([A-Z])/g,i={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"},a=/[&><"']/g,s=function e(t){return"ordgroup"===t.type||"color"===t.type?1===t.body.length?e(t.body[0]):t:"font"===t.type?e(t.body):t},l=function(e,t){return-1!==e.indexOf(t)},c=function(e,t){return void 0===e?t:e},h=function(e){return String(e).replace(a,(function(e){return i[e]}))},p=function(e){return e.replace(o,"-$1").toLowerCase()},u=s,d=function(e){var t=s(e);return"mathord"===t.type||"textord"===t.type||"atom"===t.type},f=function(e){var t=/^\s*([^\\/#]*?)(?::|&#0*58|&#x0*3a)/i.exec(e);return null!=t?t[1]:"_relative"},m=function(){function e(e){this.displayMode=void 0,this.output=void 0,this.leqno=void 0,this.fleqn=void 0,this.throwOnError=void 0,this.errorColor=void 0,this.macros=void 0,this.minRuleThickness=void 0,this.colorIsTextColor=void 0,this.strict=void 0,this.trust=void 0,this.maxSize=void 0,this.maxExpand=void 0,this.globalGroup=void 0,e=e||{},this.displayMode=c(e.displayMode,!1),this.output=c(e.output,"htmlAndMathml"),this.leqno=c(e.leqno,!1),this.fleqn=c(e.fleqn,!1),this.throwOnError=c(e.throwOnError,!0),this.errorColor=c(e.errorColor,"#cc0000"),this.macros=e.macros||{},this.minRuleThickness=Math.max(0,c(e.minRuleThickness,0)),this.colorIsTextColor=c(e.colorIsTextColor,!1),this.strict=c(e.strict,"warn"),this.trust=c(e.trust,!1),this.maxSize=Math.max(0,c(e.maxSize,1/0)),this.maxExpand=Math.max(0,c(e.maxExpand,1e3)),this.globalGroup=c(e.globalGroup,!1)}var t=e.prototype;return t.reportNonstrict=function(e,t,r){var o=this.strict;if("function"==typeof o&&(o=o(e,t,r)),o&&"ignore"!==o){if(!0===o||"error"===o)throw new n("LaTeX-incompatible input and strict mode is set to 'error': "+t+" ["+e+"]",r);"warn"===o?"undefined"!=typeof console&&console.warn("LaTeX-incompatible input and strict mode is set to 'warn': "+t+" ["+e+"]"):"undefined"!=typeof console&&console.warn("LaTeX-incompatible input and strict mode is set to unrecognized '"+o+"': "+t+" ["+e+"]")}},t.useStrictBehavior=function(e,t,r){var n=this.strict;if("function"==typeof n)try{n=n(e,t,r)}catch(e){n="error"}return!(!n||"ignore"===n||!0!==n&&"error"!==n&&("warn"===n?("undefined"!=typeof console&&console.warn("LaTeX-incompatible input and strict mode is set to 'warn': "+t+" ["+e+"]"),1):("undefined"!=typeof console&&console.warn("LaTeX-incompatible input and strict mode is set to unrecognized '"+n+"': "+t+" ["+e+"]"),1)))},t.isTrusted=function(e){e.url&&!e.protocol&&(e.protocol=f(e.url));var t="function"==typeof this.trust?this.trust(e):this.trust;return Boolean(t)},e}(),g=function(){function e(e,t,r){this.id=void 0,this.size=void 0,this.cramped=void 0,this.id=e,this.size=t,this.cramped=r}var t=e.prototype;return t.sup=function(){return v[y[this.id]]},t.sub=function(){return v[b[this.id]]},t.fracNum=function(){return v[w[this.id]]},t.fracDen=function(){return v[x[this.id]]},t.cramp=function(){return v[S[this.id]]},t.text=function(){return v[k[this.id]]},t.isTight=function(){return this.size>=2},e}(),v=[new g(0,0,!1),new g(1,0,!0),new g(2,1,!1),new g(3,1,!0),new g(4,2,!1),new g(5,2,!0),new g(6,3,!1),new g(7,3,!0)],y=[4,5,4,5,6,7,6,7],b=[5,5,5,5,7,7,7,7],w=[2,3,4,5,6,7,6,7],x=[3,3,5,5,7,7,7,7],S=[1,1,3,3,5,5,7,7],k=[0,1,2,3,2,3,2,3],M={DISPLAY:v[0],TEXT:v[2],SCRIPT:v[4],SCRIPTSCRIPT:v[6]},T=[{name:"latin",blocks:[[256,591],[768,879]]},{name:"cyrillic",blocks:[[1024,1279]]},{name:"armenian",blocks:[[1328,1423]]},{name:"brahmic",blocks:[[2304,4255]]},{name:"georgian",blocks:[[4256,4351]]},{name:"cjk",blocks:[[12288,12543],[19968,40879],[65280,65376]]},{name:"hangul",blocks:[[44032,55215]]}],A=[];function O(e){for(var t=0;t<A.length;t+=2)if(e>=A[t]&&e<=A[t+1])return!0;return!1}T.forEach((function(e){return e.blocks.forEach((function(e){return A.push.apply(A,e)}))}));var C={doubleleftarrow:"M262 157\nl10-10c34-36 62.7-77 86-123 3.3-8 5-13.3 5-16 0-5.3-6.7-8-20-8-7.3\n 0-12.2.5-14.5 1.5-2.3 1-4.8 4.5-7.5 10.5-49.3 97.3-121.7 169.3-217 216-28\n 14-57.3 25-88 33-6.7 2-11 3.8-13 5.5-2 1.7-3 4.2-3 7.5s1 5.8 3 7.5\nc2 1.7 6.3 3.5 13 5.5 68 17.3 128.2 47.8 180.5 91.5 52.3 43.7 93.8 96.2 124.5\n 157.5 9.3 8 15.3 12.3 18 13h6c12-.7 18-4 18-10 0-2-1.7-7-5-15-23.3-46-52-87\n-86-123l-10-10h399738v-40H218c328 0 0 0 0 0l-10-8c-26.7-20-65.7-43-117-69 2.7\n-2 6-3.7 10-5 36.7-16 72.3-37.3 107-64l10-8h399782v-40z\nm8 0v40h399730v-40zm0 194v40h399730v-40z",doublerightarrow:"M399738 392l\n-10 10c-34 36-62.7 77-86 123-3.3 8-5 13.3-5 16 0 5.3 6.7 8 20 8 7.3 0 12.2-.5\n 14.5-1.5 2.3-1 4.8-4.5 7.5-10.5 49.3-97.3 121.7-169.3 217-216 28-14 57.3-25 88\n-33 6.7-2 11-3.8 13-5.5 2-1.7 3-4.2 3-7.5s-1-5.8-3-7.5c-2-1.7-6.3-3.5-13-5.5-68\n-17.3-128.2-47.8-180.5-91.5-52.3-43.7-93.8-96.2-124.5-157.5-9.3-8-15.3-12.3-18\n-13h-6c-12 .7-18 4-18 10 0 2 1.7 7 5 15 23.3 46 52 87 86 123l10 10H0v40h399782\nc-328 0 0 0 0 0l10 8c26.7 20 65.7 43 117 69-2.7 2-6 3.7-10 5-36.7 16-72.3 37.3\n-107 64l-10 8H0v40zM0 157v40h399730v-40zm0 194v40h399730v-40z",leftarrow:"M400000 241H110l3-3c68.7-52.7 113.7-120\n 135-202 4-14.7 6-23 6-25 0-7.3-7-11-21-11-8 0-13.2.8-15.5 2.5-2.3 1.7-4.2 5.8\n-5.5 12.5-1.3 4.7-2.7 10.3-4 17-12 48.7-34.8 92-68.5 130S65.3 228.3 18 247\nc-10 4-16 7.7-18 11 0 8.7 6 14.3 18 17 47.3 18.7 87.8 47 121.5 85S196 441.3 208\n 490c.7 2 1.3 5 2 9s1.2 6.7 1.5 8c.3 1.3 1 3.3 2 6s2.2 4.5 3.5 5.5c1.3 1 3.3\n 1.8 6 2.5s6 1 10 1c14 0 21-3.7 21-11 0-2-2-10.3-6-25-20-79.3-65-146.7-135-202\n l-3-3h399890zM100 241v40h399900v-40z",leftbrace:"M6 548l-6-6v-35l6-11c56-104 135.3-181.3 238-232 57.3-28.7 117\n-45 179-50h399577v120H403c-43.3 7-81 15-113 26-100.7 33-179.7 91-237 174-2.7\n 5-6 9-10 13-.7 1-7.3 1-20 1H6z",leftbraceunder:"M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13\n 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688\n 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7\n-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z",leftgroup:"M400000 80\nH435C64 80 168.3 229.4 21 260c-5.9 1.2-18 0-18 0-2 0-3-1-3-3v-38C76 61 257 0\n 435 0h399565z",leftgroupunder:"M400000 262\nH435C64 262 168.3 112.6 21 82c-5.9-1.2-18 0-18 0-2 0-3 1-3 3v38c76 158 257 219\n 435 219h399565z",leftharpoon:"M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3\n-3.3 10.2-9.5 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5\n-18.3 3-21-1.3-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7\n-196 228-6.7 4.7-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40z",leftharpoonplus:"M0 267c.7 5.3 3 10 7 14h399993v-40H93c3.3-3.3 10.2-9.5\n 20.5-18.5s17.8-15.8 22.5-20.5c50.7-52 88-110.3 112-175 4-11.3 5-18.3 3-21-1.3\n-4-7.3-6-18-6-8 0-13 .7-15 2s-4.7 6.7-8 16c-42 98.7-107.3 174.7-196 228-6.7 4.7\n-10.7 8-12 10-1.3 2-2 5.7-2 11zm100-26v40h399900v-40zM0 435v40h400000v-40z\nm0 0v40h400000v-40z",leftharpoondown:"M7 241c-4 4-6.333 8.667-7 14 0 5.333.667 9 2 11s5.333\n 5.333 12 10c90.667 54 156 130 196 228 3.333 10.667 6.333 16.333 9 17 2 .667 5\n 1 9 1h5c10.667 0 16.667-2 18-6 2-2.667 1-9.667-3-21-32-87.333-82.667-157.667\n-152-211l-3-3h399907v-40zM93 281 H400000 v-40L7 241z",leftharpoondownplus:"M7 435c-4 4-6.3 8.7-7 14 0 5.3.7 9 2 11s5.3 5.3 12\n 10c90.7 54 156 130 196 228 3.3 10.7 6.3 16.3 9 17 2 .7 5 1 9 1h5c10.7 0 16.7\n-2 18-6 2-2.7 1-9.7-3-21-32-87.3-82.7-157.7-152-211l-3-3h399907v-40H7zm93 0\nv40h399900v-40zM0 241v40h399900v-40zm0 0v40h399900v-40z",lefthook:"M400000 281 H103s-33-11.2-61-33.5S0 197.3 0 164s14.2-61.2 42.5\n-83.5C70.8 58.2 104 47 142 47 c16.7 0 25 6.7 25 20 0 12-8.7 18.7-26 20-40 3.3\n-68.7 15.7-86 37-10 12-15 25.3-15 40 0 22.7 9.8 40.7 29.5 54 19.7 13.3 43.5 21\n 71.5 23h399859zM103 281v-40h399897v40z",leftlinesegment:"M40 281 V428 H0 V94 H40 V241 H400000 v40z\nM40 281 V428 H0 V94 H40 V241 H400000 v40z",leftmapsto:"M40 281 V448H0V74H40V241H400000v40z\nM40 281 V448H0V74H40V241H400000v40z",leftToFrom:"M0 147h400000v40H0zm0 214c68 40 115.7 95.7 143 167h22c15.3 0 23\n-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69-70-101l-7-8h399905v-40H95l7-8\nc28.7-32 52-65.7 70-101 10.7-23.3 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 265.3\n 68 321 0 361zm0-174v-40h399900v40zm100 154v40h399900v-40z",longequal:"M0 50 h400000 v40H0z m0 194h40000v40H0z\nM0 50 h400000 v40H0z m0 194h40000v40H0z",midbrace:"M200428 334\nc-100.7-8.3-195.3-44-280-108-55.3-42-101.7-93-139-153l-9-14c-2.7 4-5.7 8.7-9 14\n-53.3 86.7-123.7 153-211 199-66.7 36-137.3 56.3-212 62H0V214h199568c178.3-11.7\n 311.7-78.3 403-201 6-8 9.7-12 11-12 .7-.7 6.7-1 18-1s17.3.3 18 1c1.3 0 5 4 11\n 12 44.7 59.3 101.3 106.3 170 141s145.3 54.3 229 60h199572v120z",midbraceunder:"M199572 214\nc100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14\n 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3\n 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0\n-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z",oiintSize1:"M512.6 71.6c272.6 0 320.3 106.8 320.3 178.2 0 70.8-47.7 177.6\n-320.3 177.6S193.1 320.6 193.1 249.8c0-71.4 46.9-178.2 319.5-178.2z\nm368.1 178.2c0-86.4-60.9-215.4-368.1-215.4-306.4 0-367.3 129-367.3 215.4 0 85.8\n60.9 214.8 367.3 214.8 307.2 0 368.1-129 368.1-214.8z",oiintSize2:"M757.8 100.1c384.7 0 451.1 137.6 451.1 230 0 91.3-66.4 228.8\n-451.1 228.8-386.3 0-452.7-137.5-452.7-228.8 0-92.4 66.4-230 452.7-230z\nm502.4 230c0-111.2-82.4-277.2-502.4-277.2s-504 166-504 277.2\nc0 110 84 276 504 276s502.4-166 502.4-276z",oiiintSize1:"M681.4 71.6c408.9 0 480.5 106.8 480.5 178.2 0 70.8-71.6 177.6\n-480.5 177.6S202.1 320.6 202.1 249.8c0-71.4 70.5-178.2 479.3-178.2z\nm525.8 178.2c0-86.4-86.8-215.4-525.7-215.4-437.9 0-524.7 129-524.7 215.4 0\n85.8 86.8 214.8 524.7 214.8 438.9 0 525.7-129 525.7-214.8z",oiiintSize2:"M1021.2 53c603.6 0 707.8 165.8 707.8 277.2 0 110-104.2 275.8\n-707.8 275.8-606 0-710.2-165.8-710.2-275.8C311 218.8 415.2 53 1021.2 53z\nm770.4 277.1c0-131.2-126.4-327.6-770.5-327.6S248.4 198.9 248.4 330.1\nc0 130 128.8 326.4 772.7 326.4s770.5-196.4 770.5-326.4z",rightarrow:"M0 241v40h399891c-47.3 35.3-84 78-110 128\n-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20\n 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7\n 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85\n-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n 151.7 139 205zm0 0v40h399900v-40z",rightbrace:"M400000 542l\n-6 6h-17c-12.7 0-19.3-.3-20-1-4-4-7.3-8.3-10-13-35.3-51.3-80.8-93.8-136.5-127.5\ns-117.2-55.8-184.5-66.5c-.7 0-2-.3-4-1-18.7-2.7-76-4.3-172-5H0V214h399571l6 1\nc124.7 8 235 61.7 331 161 31.3 33.3 59.7 72.7 85 118l7 13v35z",rightbraceunder:"M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3\n 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237\n-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z",rightgroup:"M0 80h399565c371 0 266.7 149.4 414 180 5.9 1.2 18 0 18 0 2 0\n 3-1 3-3v-38c-76-158-257-219-435-219H0z",rightgroupunder:"M0 262h399565c371 0 266.7-149.4 414-180 5.9-1.2 18 0 18\n 0 2 0 3 1 3 3v38c-76 158-257 219-435 219H0z",rightharpoon:"M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3\n-3.7-15.3-11-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2\n-10.7 0-16.7 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58\n 69.2 92 94.5zm0 0v40h399900v-40z",rightharpoonplus:"M0 241v40h399993c4.7-4.7 7-9.3 7-14 0-9.3-3.7-15.3-11\n-18-92.7-56.7-159-133.7-199-231-3.3-9.3-6-14.7-8-16-2-1.3-7-2-15-2-10.7 0-16.7\n 2-18 6-2 2.7-1 9.7 3 21 15.3 42 36.7 81.8 64 119.5 27.3 37.7 58 69.2 92 94.5z\nm0 0v40h399900v-40z m100 194v40h399900v-40zm0 0v40h399900v-40z",rightharpoondown:"M399747 511c0 7.3 6.7 11 20 11 8 0 13-.8 15-2.5s4.7-6.8\n 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3 8.5-5.8 9.5\n-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3-64.7 57-92 95\n-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 241v40h399900v-40z",rightharpoondownplus:"M399747 705c0 7.3 6.7 11 20 11 8 0 13-.8\n 15-2.5s4.7-6.8 8-15.5c40-94 99.3-166.3 178-217 13.3-8 20.3-12.3 21-13 5.3-3.3\n 8.5-5.8 9.5-7.5 1-1.7 1.5-5.2 1.5-10.5s-2.3-10.3-7-15H0v40h399908c-34 25.3\n-64.7 57-92 95-27.3 38-48.7 77.7-64 119-3.3 8.7-5 14-5 16zM0 435v40h399900v-40z\nm0-194v40h400000v-40zm0 0v40h400000v-40z",righthook:"M399859 241c-764 0 0 0 0 0 40-3.3 68.7-15.7 86-37 10-12 15-25.3\n 15-40 0-22.7-9.8-40.7-29.5-54-19.7-13.3-43.5-21-71.5-23-17.3-1.3-26-8-26-20 0\n-13.3 8.7-20 26-20 38 0 71 11.2 99 33.5 0 0 7 5.6 21 16.7 14 11.2 21 33.5 21\n 66.8s-14 61.2-42 83.5c-28 22.3-61 33.5-99 33.5L0 241z M0 281v-40h399859v40z",rightlinesegment:"M399960 241 V94 h40 V428 h-40 V281 H0 v-40z\nM399960 241 V94 h40 V428 h-40 V281 H0 v-40z",rightToFrom:"M400000 167c-70.7-42-118-97.7-142-167h-23c-15.3 0-23 .3-23\n 1 0 1.3 5.3 13.7 16 37 18 35.3 41.3 69 70 101l7 8H0v40h399905l-7 8c-28.7 32\n-52 65.7-70 101-10.7 23.3-16 35.7-16 37 0 .7 7.7 1 23 1h23c24-69.3 71.3-125 142\n-167z M100 147v40h399900v-40zM0 341v40h399900v-40z",twoheadleftarrow:"M0 167c68 40\n 115.7 95.7 143 167h22c15.3 0 23-.3 23-1 0-1.3-5.3-13.7-16-37-18-35.3-41.3-69\n-70-101l-7-8h125l9 7c50.7 39.3 85 86 103 140h46c0-4.7-6.3-18.7-19-42-18-35.3\n-40-67.3-66-96l-9-9h399716v-40H284l9-9c26-28.7 48-60.7 66-96 12.7-23.333 19\n-37.333 19-42h-46c-18 54-52.3 100.7-103 140l-9 7H95l7-8c28.7-32 52-65.7 70-101\n 10.7-23.333 16-35.7 16-37 0-.7-7.7-1-23-1h-22C115.7 71.3 68 127 0 167z",twoheadrightarrow:"M400000 167\nc-68-40-115.7-95.7-143-167h-22c-15.3 0-23 .3-23 1 0 1.3 5.3 13.7 16 37 18 35.3\n 41.3 69 70 101l7 8h-125l-9-7c-50.7-39.3-85-86-103-140h-46c0 4.7 6.3 18.7 19 42\n 18 35.3 40 67.3 66 96l9 9H0v40h399716l-9 9c-26 28.7-48 60.7-66 96-12.7 23.333\n-19 37.333-19 42h46c18-54 52.3-100.7 103-140l9-7h125l-7 8c-28.7 32-52 65.7-70\n 101-10.7 23.333-16 35.7-16 37 0 .7 7.7 1 23 1h22c27.3-71.3 75-127 143-167z",tilde1:"M200 55.538c-77 0-168 73.953-177 73.953-3 0-7\n-2.175-9-5.437L2 97c-1-2-2-4-2-6 0-4 2-7 5-9l20-12C116 12 171 0 207 0c86 0\n 114 68 191 68 78 0 168-68 177-68 4 0 7 2 9 5l12 19c1 2.175 2 4.35 2 6.525 0\n 4.35-2 7.613-5 9.788l-19 13.05c-92 63.077-116.937 75.308-183 76.128\n-68.267.847-113-73.952-191-73.952z",tilde2:"M344 55.266c-142 0-300.638 81.316-311.5 86.418\n-8.01 3.762-22.5 10.91-23.5 5.562L1 120c-1-2-1-3-1-4 0-5 3-9 8-10l18.4-9C160.9\n 31.9 283 0 358 0c148 0 188 122 331 122s314-97 326-97c4 0 8 2 10 7l7 21.114\nc1 2.14 1 3.21 1 4.28 0 5.347-3 9.626-7 10.696l-22.3 12.622C852.6 158.372 751\n 181.476 676 181.476c-149 0-189-126.21-332-126.21z",tilde3:"M786 59C457 59 32 175.242 13 175.242c-6 0-10-3.457\n-11-10.37L.15 138c-1-7 3-12 10-13l19.2-6.4C378.4 40.7 634.3 0 804.3 0c337 0\n 411.8 157 746.8 157 328 0 754-112 773-112 5 0 10 3 11 9l1 14.075c1 8.066-.697\n 16.595-6.697 17.492l-21.052 7.31c-367.9 98.146-609.15 122.696-778.15 122.696\n -338 0-409-156.573-744-156.573z",tilde4:"M786 58C457 58 32 177.487 13 177.487c-6 0-10-3.345\n-11-10.035L.15 143c-1-7 3-12 10-13l22-6.7C381.2 35 637.15 0 807.15 0c337 0 409\n 177 744 177 328 0 754-127 773-127 5 0 10 3 11 9l1 14.794c1 7.805-3 13.38-9\n 14.495l-20.7 5.574c-366.85 99.79-607.3 139.372-776.3 139.372-338 0-409\n -175.236-744-175.236z",vec:"M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5\n3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11\n10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63\n-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1\n-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59\nH213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359\nc-16-25.333-24-45-24-59z",widehat1:"M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z",widehat2:"M1181 0h2l1171 176c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 220h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",widehat3:"M1181 0h2l1171 236c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 280h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",widehat4:"M1181 0h2l1171 296c6 0 10 5 10 11l-2 23c-1 6-5 10\n-11 10h-1L1182 67 15 340h-1c-6 0-10-4-11-10l-2-23c-1-6 4-11 10-11z",widecheck1:"M529,159h5l519,-115c5,-1,9,-5,9,-10c0,-1,-1,-2,-1,-3l-4,-22c-1,\n-5,-5,-9,-11,-9h-2l-512,92l-513,-92h-2c-5,0,-9,4,-11,9l-5,22c-1,6,2,12,8,13z",widecheck2:"M1181,220h2l1171,-176c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,153l-1167,-153h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",widecheck3:"M1181,280h2l1171,-236c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,213l-1167,-213h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",widecheck4:"M1181,340h2l1171,-296c6,0,10,-5,10,-11l-2,-23c-1,-6,-5,-10,\n-11,-10h-1l-1168,273l-1167,-273h-1c-6,0,-10,4,-11,10l-2,23c-1,6,4,11,10,11z",baraboveleftarrow:"M400000 620h-399890l3 -3c68.7 -52.7 113.7 -120 135 -202\nc4 -14.7 6 -23 6 -25c0 -7.3 -7 -11 -21 -11c-8 0 -13.2 0.8 -15.5 2.5\nc-2.3 1.7 -4.2 5.8 -5.5 12.5c-1.3 4.7 -2.7 10.3 -4 17c-12 48.7 -34.8 92 -68.5 130\ns-74.2 66.3 -121.5 85c-10 4 -16 7.7 -18 11c0 8.7 6 14.3 18 17c47.3 18.7 87.8 47\n121.5 85s56.5 81.3 68.5 130c0.7 2 1.3 5 2 9s1.2 6.7 1.5 8c0.3 1.3 1 3.3 2 6\ns2.2 4.5 3.5 5.5c1.3 1 3.3 1.8 6 2.5s6 1 10 1c14 0 21 -3.7 21 -11\nc0 -2 -2 -10.3 -6 -25c-20 -79.3 -65 -146.7 -135 -202l-3 -3h399890z\nM100 620v40h399900v-40z M0 241v40h399900v-40zM0 241v40h399900v-40z",rightarrowabovebar:"M0 241v40h399891c-47.3 35.3-84 78-110 128-16.7 32\n-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20 11 8 0\n13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7 39\n-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85-40.5\n-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5\n-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67\n151.7 139 205zm96 379h399894v40H0zm0 0h399904v40H0z",baraboveshortleftharpoon:"M507,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17\nc2,0.7,5,1,9,1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21\nc-32,-87.3,-82.7,-157.7,-152,-211c0,0,-3,-3,-3,-3l399351,0l0,-40\nc-398570,0,-399437,0,-399437,0z M593 435 v40 H399500 v-40z\nM0 281 v-40 H399908 v40z M0 281 v-40 H399908 v40z",rightharpoonaboveshortbar:"M0,241 l0,40c399126,0,399993,0,399993,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM0 241 v40 H399908 v-40z M0 475 v-40 H399500 v40z M0 475 v-40 H399500 v40z",shortbaraboveleftharpoon:"M7,435c-4,4,-6.3,8.7,-7,14c0,5.3,0.7,9,2,11\nc1.3,2,5.3,5.3,12,10c90.7,54,156,130,196,228c3.3,10.7,6.3,16.3,9,17c2,0.7,5,1,9,\n1c0,0,5,0,5,0c10.7,0,16.7,-2,18,-6c2,-2.7,1,-9.7,-3,-21c-32,-87.3,-82.7,-157.7,\n-152,-211c0,0,-3,-3,-3,-3l399907,0l0,-40c-399126,0,-399993,0,-399993,0z\nM93 435 v40 H400000 v-40z M500 241 v40 H400000 v-40z M500 241 v40 H400000 v-40z",shortrightharpoonabovebar:"M53,241l0,40c398570,0,399437,0,399437,0\nc4.7,-4.7,7,-9.3,7,-14c0,-9.3,-3.7,-15.3,-11,-18c-92.7,-56.7,-159,-133.7,-199,\n-231c-3.3,-9.3,-6,-14.7,-8,-16c-2,-1.3,-7,-2,-15,-2c-10.7,0,-16.7,2,-18,6\nc-2,2.7,-1,9.7,3,21c15.3,42,36.7,81.8,64,119.5c27.3,37.7,58,69.2,92,94.5z\nM500 241 v40 H399408 v-40z M500 435 v40 H400000 v-40z"},N=function(){function e(e){this.children=void 0,this.classes=void 0,this.height=void 0,this.depth=void 0,this.maxFontSize=void 0,this.style=void 0,this.children=e,this.classes=[],this.height=0,this.depth=0,this.maxFontSize=0,this.style={}}var t=e.prototype;return t.hasClass=function(e){return l(this.classes,e)},t.toNode=function(){for(var e=document.createDocumentFragment(),t=0;t<this.children.length;t++)e.appendChild(this.children[t].toNode());return e},t.toMarkup=function(){for(var e="",t=0;t<this.children.length;t++)e+=this.children[t].toMarkup();return e},t.toText=function(){return this.children.map((function(e){return e.toText()})).join("")},e}(),z=function(e){return e.filter((function(e){return e})).join(" ")},E=function(e,t,r){if(this.classes=e||[],this.attributes={},this.height=0,this.depth=0,this.maxFontSize=0,this.style=r||{},t){t.style.isTight()&&this.classes.push("mtight");var n=t.getColor();n&&(this.style.color=n)}},D=function(e){var t=document.createElement(e);for(var r in t.className=z(this.classes),this.style)this.style.hasOwnProperty(r)&&(t.style[r]=this.style[r]);for(var n in this.attributes)this.attributes.hasOwnProperty(n)&&t.setAttribute(n,this.attributes[n]);for(var o=0;o<this.children.length;o++)t.appendChild(this.children[o].toNode());return t},I=function(e){var t="<"+e;this.classes.length&&(t+=' class="'+h(z(this.classes))+'"');var r="";for(var n in this.style)this.style.hasOwnProperty(n)&&(r+=p(n)+":"+this.style[n]+";");for(var o in r&&(t+=' style="'+h(r)+'"'),this.attributes)this.attributes.hasOwnProperty(o)&&(t+=" "+o+'="'+h(this.attributes[o])+'"');t+=">";for(var i=0;i<this.children.length;i++)t+=this.children[i].toMarkup();return t+"</"+e+">"},R=function(){function e(e,t,r,n){this.children=void 0,this.attributes=void 0,this.classes=void 0,this.height=void 0,this.depth=void 0,this.width=void 0,this.maxFontSize=void 0,this.style=void 0,E.call(this,e,r,n),this.children=t||[]}var t=e.prototype;return t.setAttribute=function(e,t){this.attributes[e]=t},t.hasClass=function(e){return l(this.classes,e)},t.toNode=function(){return D.call(this,"span")},t.toMarkup=function(){return I.call(this,"span")},e}(),B=function(){function e(e,t,r,n){this.children=void 0,this.attributes=void 0,this.classes=void 0,this.height=void 0,this.depth=void 0,this.maxFontSize=void 0,this.style=void 0,E.call(this,t,n),this.children=r||[],this.setAttribute("href",e)}var t=e.prototype;return t.setAttribute=function(e,t){this.attributes[e]=t},t.hasClass=function(e){return l(this.classes,e)},t.toNode=function(){return D.call(this,"a")},t.toMarkup=function(){return I.call(this,"a")},e}(),P=function(){function e(e,t,r){this.src=void 0,this.alt=void 0,this.classes=void 0,this.height=void 0,this.depth=void 0,this.maxFontSize=void 0,this.style=void 0,this.alt=t,this.src=e,this.classes=["mord"],this.style=r}var t=e.prototype;return t.hasClass=function(e){return l(this.classes,e)},t.toNode=function(){var e=document.createElement("img");for(var t in e.src=this.src,e.alt=this.alt,e.className="mord",this.style)this.style.hasOwnProperty(t)&&(e.style[t]=this.style[t]);return e},t.toMarkup=function(){var e="<img  src='"+this.src+" 'alt='"+this.alt+"' ",t="";for(var r in this.style)this.style.hasOwnProperty(r)&&(t+=p(r)+":"+this.style[r]+";");return t&&(e+=' style="'+h(t)+'"'),e+"'/>"},e}(),_={î:"ı̂",ï:"ı̈",í:"ı́",ì:"ı̀"},q=function(){function e(e,t,r,n,o,i,a,s){this.text=void 0,this.height=void 0,this.depth=void 0,this.italic=void 0,this.skew=void 0,this.width=void 0,this.maxFontSize=void 0,this.classes=void 0,this.style=void 0,this.text=e,this.height=t||0,this.depth=r||0,this.italic=n||0,this.skew=o||0,this.width=i||0,this.classes=a||[],this.style=s||{},this.maxFontSize=0;var l=function(e){for(var t=0;t<T.length;t++)for(var r=T[t],n=0;n<r.blocks.length;n++){var o=r.blocks[n];if(e>=o[0]&&e<=o[1])return r.name}return null}(this.text.charCodeAt(0));l&&this.classes.push(l+"_fallback"),/[îïíì]/.test(this.text)&&(this.text=_[this.text])}var t=e.prototype;return t.hasClass=function(e){return l(this.classes,e)},t.toNode=function(){var e=document.createTextNode(this.text),t=null;for(var r in this.italic>0&&((t=document.createElement("span")).style.marginRight=this.italic+"em"),this.classes.length>0&&((t=t||document.createElement("span")).className=z(this.classes)),this.style)this.style.hasOwnProperty(r)&&((t=t||document.createElement("span")).style[r]=this.style[r]);return t?(t.appendChild(e),t):e},t.toMarkup=function(){var e=!1,t="<span";this.classes.length&&(e=!0,t+=' class="',t+=h(z(this.classes)),t+='"');var r="";for(var n in this.italic>0&&(r+="margin-right:"+this.italic+"em;"),this.style)this.style.hasOwnProperty(n)&&(r+=p(n)+":"+this.style[n]+";");r&&(e=!0,t+=' style="'+h(r)+'"');var o=h(this.text);return e?(t+=">",t+=o,t+="</span>"):o},e}(),L=function(){function e(e,t){this.children=void 0,this.attributes=void 0,this.children=e||[],this.attributes=t||{}}var t=e.prototype;return t.toNode=function(){var e=document.createElementNS("http://www.w3.org/2000/svg","svg");for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&e.setAttribute(t,this.attributes[t]);for(var r=0;r<this.children.length;r++)e.appendChild(this.children[r].toNode());return e},t.toMarkup=function(){var e='<svg xmlns="http://www.w3.org/2000/svg"';for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&(e+=" "+t+"='"+this.attributes[t]+"'");e+=">";for(var r=0;r<this.children.length;r++)e+=this.children[r].toMarkup();return e+"</svg>"},e}(),F=function(){function e(e,t){this.pathName=void 0,this.alternate=void 0,this.pathName=e,this.alternate=t}var t=e.prototype;return t.toNode=function(){var e=document.createElementNS("http://www.w3.org/2000/svg","path");return this.alternate?e.setAttribute("d",this.alternate):e.setAttribute("d",C[this.pathName]),e},t.toMarkup=function(){return this.alternate?"<path d='"+this.alternate+"'/>":"<path d='"+C[this.pathName]+"'/>"},e}(),V=function(){function e(e){this.attributes=void 0,this.attributes=e||{}}var t=e.prototype;return t.toNode=function(){var e=document.createElementNS("http://www.w3.org/2000/svg","line");for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&e.setAttribute(t,this.attributes[t]);return e},t.toMarkup=function(){var e="<line";for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&(e+=" "+t+"='"+this.attributes[t]+"'");return e+"/>"},e}();function H(e){if(e instanceof q)return e;throw new Error("Expected symbolNode but got "+String(e)+".")}var $={"AMS-Regular":{32:[0,0,0,0,.25],65:[0,.68889,0,0,.72222],66:[0,.68889,0,0,.66667],67:[0,.68889,0,0,.72222],68:[0,.68889,0,0,.72222],69:[0,.68889,0,0,.66667],70:[0,.68889,0,0,.61111],71:[0,.68889,0,0,.77778],72:[0,.68889,0,0,.77778],73:[0,.68889,0,0,.38889],74:[.16667,.68889,0,0,.5],75:[0,.68889,0,0,.77778],76:[0,.68889,0,0,.66667],77:[0,.68889,0,0,.94445],78:[0,.68889,0,0,.72222],79:[.16667,.68889,0,0,.77778],80:[0,.68889,0,0,.61111],81:[.16667,.68889,0,0,.77778],82:[0,.68889,0,0,.72222],83:[0,.68889,0,0,.55556],84:[0,.68889,0,0,.66667],85:[0,.68889,0,0,.72222],86:[0,.68889,0,0,.72222],87:[0,.68889,0,0,1],88:[0,.68889,0,0,.72222],89:[0,.68889,0,0,.72222],90:[0,.68889,0,0,.66667],107:[0,.68889,0,0,.55556],160:[0,0,0,0,.25],165:[0,.675,.025,0,.75],174:[.15559,.69224,0,0,.94666],240:[0,.68889,0,0,.55556],295:[0,.68889,0,0,.54028],710:[0,.825,0,0,2.33334],732:[0,.9,0,0,2.33334],770:[0,.825,0,0,2.33334],771:[0,.9,0,0,2.33334],989:[.08167,.58167,0,0,.77778],1008:[0,.43056,.04028,0,.66667],8245:[0,.54986,0,0,.275],8463:[0,.68889,0,0,.54028],8487:[0,.68889,0,0,.72222],8498:[0,.68889,0,0,.55556],8502:[0,.68889,0,0,.66667],8503:[0,.68889,0,0,.44445],8504:[0,.68889,0,0,.66667],8513:[0,.68889,0,0,.63889],8592:[-.03598,.46402,0,0,.5],8594:[-.03598,.46402,0,0,.5],8602:[-.13313,.36687,0,0,1],8603:[-.13313,.36687,0,0,1],8606:[.01354,.52239,0,0,1],8608:[.01354,.52239,0,0,1],8610:[.01354,.52239,0,0,1.11111],8611:[.01354,.52239,0,0,1.11111],8619:[0,.54986,0,0,1],8620:[0,.54986,0,0,1],8621:[-.13313,.37788,0,0,1.38889],8622:[-.13313,.36687,0,0,1],8624:[0,.69224,0,0,.5],8625:[0,.69224,0,0,.5],8630:[0,.43056,0,0,1],8631:[0,.43056,0,0,1],8634:[.08198,.58198,0,0,.77778],8635:[.08198,.58198,0,0,.77778],8638:[.19444,.69224,0,0,.41667],8639:[.19444,.69224,0,0,.41667],8642:[.19444,.69224,0,0,.41667],8643:[.19444,.69224,0,0,.41667],8644:[.1808,.675,0,0,1],8646:[.1808,.675,0,0,1],8647:[.1808,.675,0,0,1],8648:[.19444,.69224,0,0,.83334],8649:[.1808,.675,0,0,1],8650:[.19444,.69224,0,0,.83334],8651:[.01354,.52239,0,0,1],8652:[.01354,.52239,0,0,1],8653:[-.13313,.36687,0,0,1],8654:[-.13313,.36687,0,0,1],8655:[-.13313,.36687,0,0,1],8666:[.13667,.63667,0,0,1],8667:[.13667,.63667,0,0,1],8669:[-.13313,.37788,0,0,1],8672:[-.064,.437,0,0,1.334],8674:[-.064,.437,0,0,1.334],8705:[0,.825,0,0,.5],8708:[0,.68889,0,0,.55556],8709:[.08167,.58167,0,0,.77778],8717:[0,.43056,0,0,.42917],8722:[-.03598,.46402,0,0,.5],8724:[.08198,.69224,0,0,.77778],8726:[.08167,.58167,0,0,.77778],8733:[0,.69224,0,0,.77778],8736:[0,.69224,0,0,.72222],8737:[0,.69224,0,0,.72222],8738:[.03517,.52239,0,0,.72222],8739:[.08167,.58167,0,0,.22222],8740:[.25142,.74111,0,0,.27778],8741:[.08167,.58167,0,0,.38889],8742:[.25142,.74111,0,0,.5],8756:[0,.69224,0,0,.66667],8757:[0,.69224,0,0,.66667],8764:[-.13313,.36687,0,0,.77778],8765:[-.13313,.37788,0,0,.77778],8769:[-.13313,.36687,0,0,.77778],8770:[-.03625,.46375,0,0,.77778],8774:[.30274,.79383,0,0,.77778],8776:[-.01688,.48312,0,0,.77778],8778:[.08167,.58167,0,0,.77778],8782:[.06062,.54986,0,0,.77778],8783:[.06062,.54986,0,0,.77778],8785:[.08198,.58198,0,0,.77778],8786:[.08198,.58198,0,0,.77778],8787:[.08198,.58198,0,0,.77778],8790:[0,.69224,0,0,.77778],8791:[.22958,.72958,0,0,.77778],8796:[.08198,.91667,0,0,.77778],8806:[.25583,.75583,0,0,.77778],8807:[.25583,.75583,0,0,.77778],8808:[.25142,.75726,0,0,.77778],8809:[.25142,.75726,0,0,.77778],8812:[.25583,.75583,0,0,.5],8814:[.20576,.70576,0,0,.77778],8815:[.20576,.70576,0,0,.77778],8816:[.30274,.79383,0,0,.77778],8817:[.30274,.79383,0,0,.77778],8818:[.22958,.72958,0,0,.77778],8819:[.22958,.72958,0,0,.77778],8822:[.1808,.675,0,0,.77778],8823:[.1808,.675,0,0,.77778],8828:[.13667,.63667,0,0,.77778],8829:[.13667,.63667,0,0,.77778],8830:[.22958,.72958,0,0,.77778],8831:[.22958,.72958,0,0,.77778],8832:[.20576,.70576,0,0,.77778],8833:[.20576,.70576,0,0,.77778],8840:[.30274,.79383,0,0,.77778],8841:[.30274,.79383,0,0,.77778],8842:[.13597,.63597,0,0,.77778],8843:[.13597,.63597,0,0,.77778],8847:[.03517,.54986,0,0,.77778],8848:[.03517,.54986,0,0,.77778],8858:[.08198,.58198,0,0,.77778],8859:[.08198,.58198,0,0,.77778],8861:[.08198,.58198,0,0,.77778],8862:[0,.675,0,0,.77778],8863:[0,.675,0,0,.77778],8864:[0,.675,0,0,.77778],8865:[0,.675,0,0,.77778],8872:[0,.69224,0,0,.61111],8873:[0,.69224,0,0,.72222],8874:[0,.69224,0,0,.88889],8876:[0,.68889,0,0,.61111],8877:[0,.68889,0,0,.61111],8878:[0,.68889,0,0,.72222],8879:[0,.68889,0,0,.72222],8882:[.03517,.54986,0,0,.77778],8883:[.03517,.54986,0,0,.77778],8884:[.13667,.63667,0,0,.77778],8885:[.13667,.63667,0,0,.77778],8888:[0,.54986,0,0,1.11111],8890:[.19444,.43056,0,0,.55556],8891:[.19444,.69224,0,0,.61111],8892:[.19444,.69224,0,0,.61111],8901:[0,.54986,0,0,.27778],8903:[.08167,.58167,0,0,.77778],8905:[.08167,.58167,0,0,.77778],8906:[.08167,.58167,0,0,.77778],8907:[0,.69224,0,0,.77778],8908:[0,.69224,0,0,.77778],8909:[-.03598,.46402,0,0,.77778],8910:[0,.54986,0,0,.76042],8911:[0,.54986,0,0,.76042],8912:[.03517,.54986,0,0,.77778],8913:[.03517,.54986,0,0,.77778],8914:[0,.54986,0,0,.66667],8915:[0,.54986,0,0,.66667],8916:[0,.69224,0,0,.66667],8918:[.0391,.5391,0,0,.77778],8919:[.0391,.5391,0,0,.77778],8920:[.03517,.54986,0,0,1.33334],8921:[.03517,.54986,0,0,1.33334],8922:[.38569,.88569,0,0,.77778],8923:[.38569,.88569,0,0,.77778],8926:[.13667,.63667,0,0,.77778],8927:[.13667,.63667,0,0,.77778],8928:[.30274,.79383,0,0,.77778],8929:[.30274,.79383,0,0,.77778],8934:[.23222,.74111,0,0,.77778],8935:[.23222,.74111,0,0,.77778],8936:[.23222,.74111,0,0,.77778],8937:[.23222,.74111,0,0,.77778],8938:[.20576,.70576,0,0,.77778],8939:[.20576,.70576,0,0,.77778],8940:[.30274,.79383,0,0,.77778],8941:[.30274,.79383,0,0,.77778],8994:[.19444,.69224,0,0,.77778],8995:[.19444,.69224,0,0,.77778],9416:[.15559,.69224,0,0,.90222],9484:[0,.69224,0,0,.5],9488:[0,.69224,0,0,.5],9492:[0,.37788,0,0,.5],9496:[0,.37788,0,0,.5],9585:[.19444,.68889,0,0,.88889],9586:[.19444,.74111,0,0,.88889],9632:[0,.675,0,0,.77778],9633:[0,.675,0,0,.77778],9650:[0,.54986,0,0,.72222],9651:[0,.54986,0,0,.72222],9654:[.03517,.54986,0,0,.77778],9660:[0,.54986,0,0,.72222],9661:[0,.54986,0,0,.72222],9664:[.03517,.54986,0,0,.77778],9674:[.11111,.69224,0,0,.66667],9733:[.19444,.69224,0,0,.94445],10003:[0,.69224,0,0,.83334],10016:[0,.69224,0,0,.83334],10731:[.11111,.69224,0,0,.66667],10846:[.19444,.75583,0,0,.61111],10877:[.13667,.63667,0,0,.77778],10878:[.13667,.63667,0,0,.77778],10885:[.25583,.75583,0,0,.77778],10886:[.25583,.75583,0,0,.77778],10887:[.13597,.63597,0,0,.77778],10888:[.13597,.63597,0,0,.77778],10889:[.26167,.75726,0,0,.77778],10890:[.26167,.75726,0,0,.77778],10891:[.48256,.98256,0,0,.77778],10892:[.48256,.98256,0,0,.77778],10901:[.13667,.63667,0,0,.77778],10902:[.13667,.63667,0,0,.77778],10933:[.25142,.75726,0,0,.77778],10934:[.25142,.75726,0,0,.77778],10935:[.26167,.75726,0,0,.77778],10936:[.26167,.75726,0,0,.77778],10937:[.26167,.75726,0,0,.77778],10938:[.26167,.75726,0,0,.77778],10949:[.25583,.75583,0,0,.77778],10950:[.25583,.75583,0,0,.77778],10955:[.28481,.79383,0,0,.77778],10956:[.28481,.79383,0,0,.77778],57350:[.08167,.58167,0,0,.22222],57351:[.08167,.58167,0,0,.38889],57352:[.08167,.58167,0,0,.77778],57353:[0,.43056,.04028,0,.66667],57356:[.25142,.75726,0,0,.77778],57357:[.25142,.75726,0,0,.77778],57358:[.41951,.91951,0,0,.77778],57359:[.30274,.79383,0,0,.77778],57360:[.30274,.79383,0,0,.77778],57361:[.41951,.91951,0,0,.77778],57366:[.25142,.75726,0,0,.77778],57367:[.25142,.75726,0,0,.77778],57368:[.25142,.75726,0,0,.77778],57369:[.25142,.75726,0,0,.77778],57370:[.13597,.63597,0,0,.77778],57371:[.13597,.63597,0,0,.77778]},"Caligraphic-Regular":{32:[0,0,0,0,.25],65:[0,.68333,0,.19445,.79847],66:[0,.68333,.03041,.13889,.65681],67:[0,.68333,.05834,.13889,.52653],68:[0,.68333,.02778,.08334,.77139],69:[0,.68333,.08944,.11111,.52778],70:[0,.68333,.09931,.11111,.71875],71:[.09722,.68333,.0593,.11111,.59487],72:[0,.68333,.00965,.11111,.84452],73:[0,.68333,.07382,0,.54452],74:[.09722,.68333,.18472,.16667,.67778],75:[0,.68333,.01445,.05556,.76195],76:[0,.68333,0,.13889,.68972],77:[0,.68333,0,.13889,1.2009],78:[0,.68333,.14736,.08334,.82049],79:[0,.68333,.02778,.11111,.79611],80:[0,.68333,.08222,.08334,.69556],81:[.09722,.68333,0,.11111,.81667],82:[0,.68333,0,.08334,.8475],83:[0,.68333,.075,.13889,.60556],84:[0,.68333,.25417,0,.54464],85:[0,.68333,.09931,.08334,.62583],86:[0,.68333,.08222,0,.61278],87:[0,.68333,.08222,.08334,.98778],88:[0,.68333,.14643,.13889,.7133],89:[.09722,.68333,.08222,.08334,.66834],90:[0,.68333,.07944,.13889,.72473],160:[0,0,0,0,.25]},"Fraktur-Regular":{32:[0,0,0,0,.25],33:[0,.69141,0,0,.29574],34:[0,.69141,0,0,.21471],38:[0,.69141,0,0,.73786],39:[0,.69141,0,0,.21201],40:[.24982,.74947,0,0,.38865],41:[.24982,.74947,0,0,.38865],42:[0,.62119,0,0,.27764],43:[.08319,.58283,0,0,.75623],44:[0,.10803,0,0,.27764],45:[.08319,.58283,0,0,.75623],46:[0,.10803,0,0,.27764],47:[.24982,.74947,0,0,.50181],48:[0,.47534,0,0,.50181],49:[0,.47534,0,0,.50181],50:[0,.47534,0,0,.50181],51:[.18906,.47534,0,0,.50181],52:[.18906,.47534,0,0,.50181],53:[.18906,.47534,0,0,.50181],54:[0,.69141,0,0,.50181],55:[.18906,.47534,0,0,.50181],56:[0,.69141,0,0,.50181],57:[.18906,.47534,0,0,.50181],58:[0,.47534,0,0,.21606],59:[.12604,.47534,0,0,.21606],61:[-.13099,.36866,0,0,.75623],63:[0,.69141,0,0,.36245],65:[0,.69141,0,0,.7176],66:[0,.69141,0,0,.88397],67:[0,.69141,0,0,.61254],68:[0,.69141,0,0,.83158],69:[0,.69141,0,0,.66278],70:[.12604,.69141,0,0,.61119],71:[0,.69141,0,0,.78539],72:[.06302,.69141,0,0,.7203],73:[0,.69141,0,0,.55448],74:[.12604,.69141,0,0,.55231],75:[0,.69141,0,0,.66845],76:[0,.69141,0,0,.66602],77:[0,.69141,0,0,1.04953],78:[0,.69141,0,0,.83212],79:[0,.69141,0,0,.82699],80:[.18906,.69141,0,0,.82753],81:[.03781,.69141,0,0,.82699],82:[0,.69141,0,0,.82807],83:[0,.69141,0,0,.82861],84:[0,.69141,0,0,.66899],85:[0,.69141,0,0,.64576],86:[0,.69141,0,0,.83131],87:[0,.69141,0,0,1.04602],88:[0,.69141,0,0,.71922],89:[.18906,.69141,0,0,.83293],90:[.12604,.69141,0,0,.60201],91:[.24982,.74947,0,0,.27764],93:[.24982,.74947,0,0,.27764],94:[0,.69141,0,0,.49965],97:[0,.47534,0,0,.50046],98:[0,.69141,0,0,.51315],99:[0,.47534,0,0,.38946],100:[0,.62119,0,0,.49857],101:[0,.47534,0,0,.40053],102:[.18906,.69141,0,0,.32626],103:[.18906,.47534,0,0,.5037],104:[.18906,.69141,0,0,.52126],105:[0,.69141,0,0,.27899],106:[0,.69141,0,0,.28088],107:[0,.69141,0,0,.38946],108:[0,.69141,0,0,.27953],109:[0,.47534,0,0,.76676],110:[0,.47534,0,0,.52666],111:[0,.47534,0,0,.48885],112:[.18906,.52396,0,0,.50046],113:[.18906,.47534,0,0,.48912],114:[0,.47534,0,0,.38919],115:[0,.47534,0,0,.44266],116:[0,.62119,0,0,.33301],117:[0,.47534,0,0,.5172],118:[0,.52396,0,0,.5118],119:[0,.52396,0,0,.77351],120:[.18906,.47534,0,0,.38865],121:[.18906,.47534,0,0,.49884],122:[.18906,.47534,0,0,.39054],160:[0,0,0,0,.25],8216:[0,.69141,0,0,.21471],8217:[0,.69141,0,0,.21471],58112:[0,.62119,0,0,.49749],58113:[0,.62119,0,0,.4983],58114:[.18906,.69141,0,0,.33328],58115:[.18906,.69141,0,0,.32923],58116:[.18906,.47534,0,0,.50343],58117:[0,.69141,0,0,.33301],58118:[0,.62119,0,0,.33409],58119:[0,.47534,0,0,.50073]},"Main-Bold":{32:[0,0,0,0,.25],33:[0,.69444,0,0,.35],34:[0,.69444,0,0,.60278],35:[.19444,.69444,0,0,.95833],36:[.05556,.75,0,0,.575],37:[.05556,.75,0,0,.95833],38:[0,.69444,0,0,.89444],39:[0,.69444,0,0,.31944],40:[.25,.75,0,0,.44722],41:[.25,.75,0,0,.44722],42:[0,.75,0,0,.575],43:[.13333,.63333,0,0,.89444],44:[.19444,.15556,0,0,.31944],45:[0,.44444,0,0,.38333],46:[0,.15556,0,0,.31944],47:[.25,.75,0,0,.575],48:[0,.64444,0,0,.575],49:[0,.64444,0,0,.575],50:[0,.64444,0,0,.575],51:[0,.64444,0,0,.575],52:[0,.64444,0,0,.575],53:[0,.64444,0,0,.575],54:[0,.64444,0,0,.575],55:[0,.64444,0,0,.575],56:[0,.64444,0,0,.575],57:[0,.64444,0,0,.575],58:[0,.44444,0,0,.31944],59:[.19444,.44444,0,0,.31944],60:[.08556,.58556,0,0,.89444],61:[-.10889,.39111,0,0,.89444],62:[.08556,.58556,0,0,.89444],63:[0,.69444,0,0,.54305],64:[0,.69444,0,0,.89444],65:[0,.68611,0,0,.86944],66:[0,.68611,0,0,.81805],67:[0,.68611,0,0,.83055],68:[0,.68611,0,0,.88194],69:[0,.68611,0,0,.75555],70:[0,.68611,0,0,.72361],71:[0,.68611,0,0,.90416],72:[0,.68611,0,0,.9],73:[0,.68611,0,0,.43611],74:[0,.68611,0,0,.59444],75:[0,.68611,0,0,.90138],76:[0,.68611,0,0,.69166],77:[0,.68611,0,0,1.09166],78:[0,.68611,0,0,.9],79:[0,.68611,0,0,.86388],80:[0,.68611,0,0,.78611],81:[.19444,.68611,0,0,.86388],82:[0,.68611,0,0,.8625],83:[0,.68611,0,0,.63889],84:[0,.68611,0,0,.8],85:[0,.68611,0,0,.88472],86:[0,.68611,.01597,0,.86944],87:[0,.68611,.01597,0,1.18888],88:[0,.68611,0,0,.86944],89:[0,.68611,.02875,0,.86944],90:[0,.68611,0,0,.70277],91:[.25,.75,0,0,.31944],92:[.25,.75,0,0,.575],93:[.25,.75,0,0,.31944],94:[0,.69444,0,0,.575],95:[.31,.13444,.03194,0,.575],97:[0,.44444,0,0,.55902],98:[0,.69444,0,0,.63889],99:[0,.44444,0,0,.51111],100:[0,.69444,0,0,.63889],101:[0,.44444,0,0,.52708],102:[0,.69444,.10903,0,.35139],103:[.19444,.44444,.01597,0,.575],104:[0,.69444,0,0,.63889],105:[0,.69444,0,0,.31944],106:[.19444,.69444,0,0,.35139],107:[0,.69444,0,0,.60694],108:[0,.69444,0,0,.31944],109:[0,.44444,0,0,.95833],110:[0,.44444,0,0,.63889],111:[0,.44444,0,0,.575],112:[.19444,.44444,0,0,.63889],113:[.19444,.44444,0,0,.60694],114:[0,.44444,0,0,.47361],115:[0,.44444,0,0,.45361],116:[0,.63492,0,0,.44722],117:[0,.44444,0,0,.63889],118:[0,.44444,.01597,0,.60694],119:[0,.44444,.01597,0,.83055],120:[0,.44444,0,0,.60694],121:[.19444,.44444,.01597,0,.60694],122:[0,.44444,0,0,.51111],123:[.25,.75,0,0,.575],124:[.25,.75,0,0,.31944],125:[.25,.75,0,0,.575],126:[.35,.34444,0,0,.575],160:[0,0,0,0,.25],163:[0,.69444,0,0,.86853],168:[0,.69444,0,0,.575],172:[0,.44444,0,0,.76666],176:[0,.69444,0,0,.86944],177:[.13333,.63333,0,0,.89444],184:[.17014,0,0,0,.51111],198:[0,.68611,0,0,1.04166],215:[.13333,.63333,0,0,.89444],216:[.04861,.73472,0,0,.89444],223:[0,.69444,0,0,.59722],230:[0,.44444,0,0,.83055],247:[.13333,.63333,0,0,.89444],248:[.09722,.54167,0,0,.575],305:[0,.44444,0,0,.31944],338:[0,.68611,0,0,1.16944],339:[0,.44444,0,0,.89444],567:[.19444,.44444,0,0,.35139],710:[0,.69444,0,0,.575],711:[0,.63194,0,0,.575],713:[0,.59611,0,0,.575],714:[0,.69444,0,0,.575],715:[0,.69444,0,0,.575],728:[0,.69444,0,0,.575],729:[0,.69444,0,0,.31944],730:[0,.69444,0,0,.86944],732:[0,.69444,0,0,.575],733:[0,.69444,0,0,.575],915:[0,.68611,0,0,.69166],916:[0,.68611,0,0,.95833],920:[0,.68611,0,0,.89444],923:[0,.68611,0,0,.80555],926:[0,.68611,0,0,.76666],928:[0,.68611,0,0,.9],931:[0,.68611,0,0,.83055],933:[0,.68611,0,0,.89444],934:[0,.68611,0,0,.83055],936:[0,.68611,0,0,.89444],937:[0,.68611,0,0,.83055],8211:[0,.44444,.03194,0,.575],8212:[0,.44444,.03194,0,1.14999],8216:[0,.69444,0,0,.31944],8217:[0,.69444,0,0,.31944],8220:[0,.69444,0,0,.60278],8221:[0,.69444,0,0,.60278],8224:[.19444,.69444,0,0,.51111],8225:[.19444,.69444,0,0,.51111],8242:[0,.55556,0,0,.34444],8407:[0,.72444,.15486,0,.575],8463:[0,.69444,0,0,.66759],8465:[0,.69444,0,0,.83055],8467:[0,.69444,0,0,.47361],8472:[.19444,.44444,0,0,.74027],8476:[0,.69444,0,0,.83055],8501:[0,.69444,0,0,.70277],8592:[-.10889,.39111,0,0,1.14999],8593:[.19444,.69444,0,0,.575],8594:[-.10889,.39111,0,0,1.14999],8595:[.19444,.69444,0,0,.575],8596:[-.10889,.39111,0,0,1.14999],8597:[.25,.75,0,0,.575],8598:[.19444,.69444,0,0,1.14999],8599:[.19444,.69444,0,0,1.14999],8600:[.19444,.69444,0,0,1.14999],8601:[.19444,.69444,0,0,1.14999],8636:[-.10889,.39111,0,0,1.14999],8637:[-.10889,.39111,0,0,1.14999],8640:[-.10889,.39111,0,0,1.14999],8641:[-.10889,.39111,0,0,1.14999],8656:[-.10889,.39111,0,0,1.14999],8657:[.19444,.69444,0,0,.70277],8658:[-.10889,.39111,0,0,1.14999],8659:[.19444,.69444,0,0,.70277],8660:[-.10889,.39111,0,0,1.14999],8661:[.25,.75,0,0,.70277],8704:[0,.69444,0,0,.63889],8706:[0,.69444,.06389,0,.62847],8707:[0,.69444,0,0,.63889],8709:[.05556,.75,0,0,.575],8711:[0,.68611,0,0,.95833],8712:[.08556,.58556,0,0,.76666],8715:[.08556,.58556,0,0,.76666],8722:[.13333,.63333,0,0,.89444],8723:[.13333,.63333,0,0,.89444],8725:[.25,.75,0,0,.575],8726:[.25,.75,0,0,.575],8727:[-.02778,.47222,0,0,.575],8728:[-.02639,.47361,0,0,.575],8729:[-.02639,.47361,0,0,.575],8730:[.18,.82,0,0,.95833],8733:[0,.44444,0,0,.89444],8734:[0,.44444,0,0,1.14999],8736:[0,.69224,0,0,.72222],8739:[.25,.75,0,0,.31944],8741:[.25,.75,0,0,.575],8743:[0,.55556,0,0,.76666],8744:[0,.55556,0,0,.76666],8745:[0,.55556,0,0,.76666],8746:[0,.55556,0,0,.76666],8747:[.19444,.69444,.12778,0,.56875],8764:[-.10889,.39111,0,0,.89444],8768:[.19444,.69444,0,0,.31944],8771:[.00222,.50222,0,0,.89444],8776:[.02444,.52444,0,0,.89444],8781:[.00222,.50222,0,0,.89444],8801:[.00222,.50222,0,0,.89444],8804:[.19667,.69667,0,0,.89444],8805:[.19667,.69667,0,0,.89444],8810:[.08556,.58556,0,0,1.14999],8811:[.08556,.58556,0,0,1.14999],8826:[.08556,.58556,0,0,.89444],8827:[.08556,.58556,0,0,.89444],8834:[.08556,.58556,0,0,.89444],8835:[.08556,.58556,0,0,.89444],8838:[.19667,.69667,0,0,.89444],8839:[.19667,.69667,0,0,.89444],8846:[0,.55556,0,0,.76666],8849:[.19667,.69667,0,0,.89444],8850:[.19667,.69667,0,0,.89444],8851:[0,.55556,0,0,.76666],8852:[0,.55556,0,0,.76666],8853:[.13333,.63333,0,0,.89444],8854:[.13333,.63333,0,0,.89444],8855:[.13333,.63333,0,0,.89444],8856:[.13333,.63333,0,0,.89444],8857:[.13333,.63333,0,0,.89444],8866:[0,.69444,0,0,.70277],8867:[0,.69444,0,0,.70277],8868:[0,.69444,0,0,.89444],8869:[0,.69444,0,0,.89444],8900:[-.02639,.47361,0,0,.575],8901:[-.02639,.47361,0,0,.31944],8902:[-.02778,.47222,0,0,.575],8968:[.25,.75,0,0,.51111],8969:[.25,.75,0,0,.51111],8970:[.25,.75,0,0,.51111],8971:[.25,.75,0,0,.51111],8994:[-.13889,.36111,0,0,1.14999],8995:[-.13889,.36111,0,0,1.14999],9651:[.19444,.69444,0,0,1.02222],9657:[-.02778,.47222,0,0,.575],9661:[.19444,.69444,0,0,1.02222],9667:[-.02778,.47222,0,0,.575],9711:[.19444,.69444,0,0,1.14999],9824:[.12963,.69444,0,0,.89444],9825:[.12963,.69444,0,0,.89444],9826:[.12963,.69444,0,0,.89444],9827:[.12963,.69444,0,0,.89444],9837:[0,.75,0,0,.44722],9838:[.19444,.69444,0,0,.44722],9839:[.19444,.69444,0,0,.44722],10216:[.25,.75,0,0,.44722],10217:[.25,.75,0,0,.44722],10815:[0,.68611,0,0,.9],10927:[.19667,.69667,0,0,.89444],10928:[.19667,.69667,0,0,.89444],57376:[.19444,.69444,0,0,0]},"Main-BoldItalic":{32:[0,0,0,0,.25],33:[0,.69444,.11417,0,.38611],34:[0,.69444,.07939,0,.62055],35:[.19444,.69444,.06833,0,.94444],37:[.05556,.75,.12861,0,.94444],38:[0,.69444,.08528,0,.88555],39:[0,.69444,.12945,0,.35555],40:[.25,.75,.15806,0,.47333],41:[.25,.75,.03306,0,.47333],42:[0,.75,.14333,0,.59111],43:[.10333,.60333,.03306,0,.88555],44:[.19444,.14722,0,0,.35555],45:[0,.44444,.02611,0,.41444],46:[0,.14722,0,0,.35555],47:[.25,.75,.15806,0,.59111],48:[0,.64444,.13167,0,.59111],49:[0,.64444,.13167,0,.59111],50:[0,.64444,.13167,0,.59111],51:[0,.64444,.13167,0,.59111],52:[.19444,.64444,.13167,0,.59111],53:[0,.64444,.13167,0,.59111],54:[0,.64444,.13167,0,.59111],55:[.19444,.64444,.13167,0,.59111],56:[0,.64444,.13167,0,.59111],57:[0,.64444,.13167,0,.59111],58:[0,.44444,.06695,0,.35555],59:[.19444,.44444,.06695,0,.35555],61:[-.10889,.39111,.06833,0,.88555],63:[0,.69444,.11472,0,.59111],64:[0,.69444,.09208,0,.88555],65:[0,.68611,0,0,.86555],66:[0,.68611,.0992,0,.81666],67:[0,.68611,.14208,0,.82666],68:[0,.68611,.09062,0,.87555],69:[0,.68611,.11431,0,.75666],70:[0,.68611,.12903,0,.72722],71:[0,.68611,.07347,0,.89527],72:[0,.68611,.17208,0,.8961],73:[0,.68611,.15681,0,.47166],74:[0,.68611,.145,0,.61055],75:[0,.68611,.14208,0,.89499],76:[0,.68611,0,0,.69777],77:[0,.68611,.17208,0,1.07277],78:[0,.68611,.17208,0,.8961],79:[0,.68611,.09062,0,.85499],80:[0,.68611,.0992,0,.78721],81:[.19444,.68611,.09062,0,.85499],82:[0,.68611,.02559,0,.85944],83:[0,.68611,.11264,0,.64999],84:[0,.68611,.12903,0,.7961],85:[0,.68611,.17208,0,.88083],86:[0,.68611,.18625,0,.86555],87:[0,.68611,.18625,0,1.15999],88:[0,.68611,.15681,0,.86555],89:[0,.68611,.19803,0,.86555],90:[0,.68611,.14208,0,.70888],91:[.25,.75,.1875,0,.35611],93:[.25,.75,.09972,0,.35611],94:[0,.69444,.06709,0,.59111],95:[.31,.13444,.09811,0,.59111],97:[0,.44444,.09426,0,.59111],98:[0,.69444,.07861,0,.53222],99:[0,.44444,.05222,0,.53222],100:[0,.69444,.10861,0,.59111],101:[0,.44444,.085,0,.53222],102:[.19444,.69444,.21778,0,.4],103:[.19444,.44444,.105,0,.53222],104:[0,.69444,.09426,0,.59111],105:[0,.69326,.11387,0,.35555],106:[.19444,.69326,.1672,0,.35555],107:[0,.69444,.11111,0,.53222],108:[0,.69444,.10861,0,.29666],109:[0,.44444,.09426,0,.94444],110:[0,.44444,.09426,0,.64999],111:[0,.44444,.07861,0,.59111],112:[.19444,.44444,.07861,0,.59111],113:[.19444,.44444,.105,0,.53222],114:[0,.44444,.11111,0,.50167],115:[0,.44444,.08167,0,.48694],116:[0,.63492,.09639,0,.385],117:[0,.44444,.09426,0,.62055],118:[0,.44444,.11111,0,.53222],119:[0,.44444,.11111,0,.76777],120:[0,.44444,.12583,0,.56055],121:[.19444,.44444,.105,0,.56166],122:[0,.44444,.13889,0,.49055],126:[.35,.34444,.11472,0,.59111],160:[0,0,0,0,.25],168:[0,.69444,.11473,0,.59111],176:[0,.69444,0,0,.94888],184:[.17014,0,0,0,.53222],198:[0,.68611,.11431,0,1.02277],216:[.04861,.73472,.09062,0,.88555],223:[.19444,.69444,.09736,0,.665],230:[0,.44444,.085,0,.82666],248:[.09722,.54167,.09458,0,.59111],305:[0,.44444,.09426,0,.35555],338:[0,.68611,.11431,0,1.14054],339:[0,.44444,.085,0,.82666],567:[.19444,.44444,.04611,0,.385],710:[0,.69444,.06709,0,.59111],711:[0,.63194,.08271,0,.59111],713:[0,.59444,.10444,0,.59111],714:[0,.69444,.08528,0,.59111],715:[0,.69444,0,0,.59111],728:[0,.69444,.10333,0,.59111],729:[0,.69444,.12945,0,.35555],730:[0,.69444,0,0,.94888],732:[0,.69444,.11472,0,.59111],733:[0,.69444,.11472,0,.59111],915:[0,.68611,.12903,0,.69777],916:[0,.68611,0,0,.94444],920:[0,.68611,.09062,0,.88555],923:[0,.68611,0,0,.80666],926:[0,.68611,.15092,0,.76777],928:[0,.68611,.17208,0,.8961],931:[0,.68611,.11431,0,.82666],933:[0,.68611,.10778,0,.88555],934:[0,.68611,.05632,0,.82666],936:[0,.68611,.10778,0,.88555],937:[0,.68611,.0992,0,.82666],8211:[0,.44444,.09811,0,.59111],8212:[0,.44444,.09811,0,1.18221],8216:[0,.69444,.12945,0,.35555],8217:[0,.69444,.12945,0,.35555],8220:[0,.69444,.16772,0,.62055],8221:[0,.69444,.07939,0,.62055]},"Main-Italic":{32:[0,0,0,0,.25],33:[0,.69444,.12417,0,.30667],34:[0,.69444,.06961,0,.51444],35:[.19444,.69444,.06616,0,.81777],37:[.05556,.75,.13639,0,.81777],38:[0,.69444,.09694,0,.76666],39:[0,.69444,.12417,0,.30667],40:[.25,.75,.16194,0,.40889],41:[.25,.75,.03694,0,.40889],42:[0,.75,.14917,0,.51111],43:[.05667,.56167,.03694,0,.76666],44:[.19444,.10556,0,0,.30667],45:[0,.43056,.02826,0,.35778],46:[0,.10556,0,0,.30667],47:[.25,.75,.16194,0,.51111],48:[0,.64444,.13556,0,.51111],49:[0,.64444,.13556,0,.51111],50:[0,.64444,.13556,0,.51111],51:[0,.64444,.13556,0,.51111],52:[.19444,.64444,.13556,0,.51111],53:[0,.64444,.13556,0,.51111],54:[0,.64444,.13556,0,.51111],55:[.19444,.64444,.13556,0,.51111],56:[0,.64444,.13556,0,.51111],57:[0,.64444,.13556,0,.51111],58:[0,.43056,.0582,0,.30667],59:[.19444,.43056,.0582,0,.30667],61:[-.13313,.36687,.06616,0,.76666],63:[0,.69444,.1225,0,.51111],64:[0,.69444,.09597,0,.76666],65:[0,.68333,0,0,.74333],66:[0,.68333,.10257,0,.70389],67:[0,.68333,.14528,0,.71555],68:[0,.68333,.09403,0,.755],69:[0,.68333,.12028,0,.67833],70:[0,.68333,.13305,0,.65277],71:[0,.68333,.08722,0,.77361],72:[0,.68333,.16389,0,.74333],73:[0,.68333,.15806,0,.38555],74:[0,.68333,.14028,0,.525],75:[0,.68333,.14528,0,.76888],76:[0,.68333,0,0,.62722],77:[0,.68333,.16389,0,.89666],78:[0,.68333,.16389,0,.74333],79:[0,.68333,.09403,0,.76666],80:[0,.68333,.10257,0,.67833],81:[.19444,.68333,.09403,0,.76666],82:[0,.68333,.03868,0,.72944],83:[0,.68333,.11972,0,.56222],84:[0,.68333,.13305,0,.71555],85:[0,.68333,.16389,0,.74333],86:[0,.68333,.18361,0,.74333],87:[0,.68333,.18361,0,.99888],88:[0,.68333,.15806,0,.74333],89:[0,.68333,.19383,0,.74333],90:[0,.68333,.14528,0,.61333],91:[.25,.75,.1875,0,.30667],93:[.25,.75,.10528,0,.30667],94:[0,.69444,.06646,0,.51111],95:[.31,.12056,.09208,0,.51111],97:[0,.43056,.07671,0,.51111],98:[0,.69444,.06312,0,.46],99:[0,.43056,.05653,0,.46],100:[0,.69444,.10333,0,.51111],101:[0,.43056,.07514,0,.46],102:[.19444,.69444,.21194,0,.30667],103:[.19444,.43056,.08847,0,.46],104:[0,.69444,.07671,0,.51111],105:[0,.65536,.1019,0,.30667],106:[.19444,.65536,.14467,0,.30667],107:[0,.69444,.10764,0,.46],108:[0,.69444,.10333,0,.25555],109:[0,.43056,.07671,0,.81777],110:[0,.43056,.07671,0,.56222],111:[0,.43056,.06312,0,.51111],112:[.19444,.43056,.06312,0,.51111],113:[.19444,.43056,.08847,0,.46],114:[0,.43056,.10764,0,.42166],115:[0,.43056,.08208,0,.40889],116:[0,.61508,.09486,0,.33222],117:[0,.43056,.07671,0,.53666],118:[0,.43056,.10764,0,.46],119:[0,.43056,.10764,0,.66444],120:[0,.43056,.12042,0,.46389],121:[.19444,.43056,.08847,0,.48555],122:[0,.43056,.12292,0,.40889],126:[.35,.31786,.11585,0,.51111],160:[0,0,0,0,.25],168:[0,.66786,.10474,0,.51111],176:[0,.69444,0,0,.83129],184:[.17014,0,0,0,.46],198:[0,.68333,.12028,0,.88277],216:[.04861,.73194,.09403,0,.76666],223:[.19444,.69444,.10514,0,.53666],230:[0,.43056,.07514,0,.71555],248:[.09722,.52778,.09194,0,.51111],338:[0,.68333,.12028,0,.98499],339:[0,.43056,.07514,0,.71555],710:[0,.69444,.06646,0,.51111],711:[0,.62847,.08295,0,.51111],713:[0,.56167,.10333,0,.51111],714:[0,.69444,.09694,0,.51111],715:[0,.69444,0,0,.51111],728:[0,.69444,.10806,0,.51111],729:[0,.66786,.11752,0,.30667],730:[0,.69444,0,0,.83129],732:[0,.66786,.11585,0,.51111],733:[0,.69444,.1225,0,.51111],915:[0,.68333,.13305,0,.62722],916:[0,.68333,0,0,.81777],920:[0,.68333,.09403,0,.76666],923:[0,.68333,0,0,.69222],926:[0,.68333,.15294,0,.66444],928:[0,.68333,.16389,0,.74333],931:[0,.68333,.12028,0,.71555],933:[0,.68333,.11111,0,.76666],934:[0,.68333,.05986,0,.71555],936:[0,.68333,.11111,0,.76666],937:[0,.68333,.10257,0,.71555],8211:[0,.43056,.09208,0,.51111],8212:[0,.43056,.09208,0,1.02222],8216:[0,.69444,.12417,0,.30667],8217:[0,.69444,.12417,0,.30667],8220:[0,.69444,.1685,0,.51444],8221:[0,.69444,.06961,0,.51444],8463:[0,.68889,0,0,.54028]},"Main-Regular":{32:[0,0,0,0,.25],33:[0,.69444,0,0,.27778],34:[0,.69444,0,0,.5],35:[.19444,.69444,0,0,.83334],36:[.05556,.75,0,0,.5],37:[.05556,.75,0,0,.83334],38:[0,.69444,0,0,.77778],39:[0,.69444,0,0,.27778],40:[.25,.75,0,0,.38889],41:[.25,.75,0,0,.38889],42:[0,.75,0,0,.5],43:[.08333,.58333,0,0,.77778],44:[.19444,.10556,0,0,.27778],45:[0,.43056,0,0,.33333],46:[0,.10556,0,0,.27778],47:[.25,.75,0,0,.5],48:[0,.64444,0,0,.5],49:[0,.64444,0,0,.5],50:[0,.64444,0,0,.5],51:[0,.64444,0,0,.5],52:[0,.64444,0,0,.5],53:[0,.64444,0,0,.5],54:[0,.64444,0,0,.5],55:[0,.64444,0,0,.5],56:[0,.64444,0,0,.5],57:[0,.64444,0,0,.5],58:[0,.43056,0,0,.27778],59:[.19444,.43056,0,0,.27778],60:[.0391,.5391,0,0,.77778],61:[-.13313,.36687,0,0,.77778],62:[.0391,.5391,0,0,.77778],63:[0,.69444,0,0,.47222],64:[0,.69444,0,0,.77778],65:[0,.68333,0,0,.75],66:[0,.68333,0,0,.70834],67:[0,.68333,0,0,.72222],68:[0,.68333,0,0,.76389],69:[0,.68333,0,0,.68056],70:[0,.68333,0,0,.65278],71:[0,.68333,0,0,.78472],72:[0,.68333,0,0,.75],73:[0,.68333,0,0,.36111],74:[0,.68333,0,0,.51389],75:[0,.68333,0,0,.77778],76:[0,.68333,0,0,.625],77:[0,.68333,0,0,.91667],78:[0,.68333,0,0,.75],79:[0,.68333,0,0,.77778],80:[0,.68333,0,0,.68056],81:[.19444,.68333,0,0,.77778],82:[0,.68333,0,0,.73611],83:[0,.68333,0,0,.55556],84:[0,.68333,0,0,.72222],85:[0,.68333,0,0,.75],86:[0,.68333,.01389,0,.75],87:[0,.68333,.01389,0,1.02778],88:[0,.68333,0,0,.75],89:[0,.68333,.025,0,.75],90:[0,.68333,0,0,.61111],91:[.25,.75,0,0,.27778],92:[.25,.75,0,0,.5],93:[.25,.75,0,0,.27778],94:[0,.69444,0,0,.5],95:[.31,.12056,.02778,0,.5],97:[0,.43056,0,0,.5],98:[0,.69444,0,0,.55556],99:[0,.43056,0,0,.44445],100:[0,.69444,0,0,.55556],101:[0,.43056,0,0,.44445],102:[0,.69444,.07778,0,.30556],103:[.19444,.43056,.01389,0,.5],104:[0,.69444,0,0,.55556],105:[0,.66786,0,0,.27778],106:[.19444,.66786,0,0,.30556],107:[0,.69444,0,0,.52778],108:[0,.69444,0,0,.27778],109:[0,.43056,0,0,.83334],110:[0,.43056,0,0,.55556],111:[0,.43056,0,0,.5],112:[.19444,.43056,0,0,.55556],113:[.19444,.43056,0,0,.52778],114:[0,.43056,0,0,.39167],115:[0,.43056,0,0,.39445],116:[0,.61508,0,0,.38889],117:[0,.43056,0,0,.55556],118:[0,.43056,.01389,0,.52778],119:[0,.43056,.01389,0,.72222],120:[0,.43056,0,0,.52778],121:[.19444,.43056,.01389,0,.52778],122:[0,.43056,0,0,.44445],123:[.25,.75,0,0,.5],124:[.25,.75,0,0,.27778],125:[.25,.75,0,0,.5],126:[.35,.31786,0,0,.5],160:[0,0,0,0,.25],163:[0,.69444,0,0,.76909],167:[.19444,.69444,0,0,.44445],168:[0,.66786,0,0,.5],172:[0,.43056,0,0,.66667],176:[0,.69444,0,0,.75],177:[.08333,.58333,0,0,.77778],182:[.19444,.69444,0,0,.61111],184:[.17014,0,0,0,.44445],198:[0,.68333,0,0,.90278],215:[.08333,.58333,0,0,.77778],216:[.04861,.73194,0,0,.77778],223:[0,.69444,0,0,.5],230:[0,.43056,0,0,.72222],247:[.08333,.58333,0,0,.77778],248:[.09722,.52778,0,0,.5],305:[0,.43056,0,0,.27778],338:[0,.68333,0,0,1.01389],339:[0,.43056,0,0,.77778],567:[.19444,.43056,0,0,.30556],710:[0,.69444,0,0,.5],711:[0,.62847,0,0,.5],713:[0,.56778,0,0,.5],714:[0,.69444,0,0,.5],715:[0,.69444,0,0,.5],728:[0,.69444,0,0,.5],729:[0,.66786,0,0,.27778],730:[0,.69444,0,0,.75],732:[0,.66786,0,0,.5],733:[0,.69444,0,0,.5],915:[0,.68333,0,0,.625],916:[0,.68333,0,0,.83334],920:[0,.68333,0,0,.77778],923:[0,.68333,0,0,.69445],926:[0,.68333,0,0,.66667],928:[0,.68333,0,0,.75],931:[0,.68333,0,0,.72222],933:[0,.68333,0,0,.77778],934:[0,.68333,0,0,.72222],936:[0,.68333,0,0,.77778],937:[0,.68333,0,0,.72222],8211:[0,.43056,.02778,0,.5],8212:[0,.43056,.02778,0,1],8216:[0,.69444,0,0,.27778],8217:[0,.69444,0,0,.27778],8220:[0,.69444,0,0,.5],8221:[0,.69444,0,0,.5],8224:[.19444,.69444,0,0,.44445],8225:[.19444,.69444,0,0,.44445],8230:[0,.123,0,0,1.172],8242:[0,.55556,0,0,.275],8407:[0,.71444,.15382,0,.5],8463:[0,.68889,0,0,.54028],8465:[0,.69444,0,0,.72222],8467:[0,.69444,0,.11111,.41667],8472:[.19444,.43056,0,.11111,.63646],8476:[0,.69444,0,0,.72222],8501:[0,.69444,0,0,.61111],8592:[-.13313,.36687,0,0,1],8593:[.19444,.69444,0,0,.5],8594:[-.13313,.36687,0,0,1],8595:[.19444,.69444,0,0,.5],8596:[-.13313,.36687,0,0,1],8597:[.25,.75,0,0,.5],8598:[.19444,.69444,0,0,1],8599:[.19444,.69444,0,0,1],8600:[.19444,.69444,0,0,1],8601:[.19444,.69444,0,0,1],8614:[.011,.511,0,0,1],8617:[.011,.511,0,0,1.126],8618:[.011,.511,0,0,1.126],8636:[-.13313,.36687,0,0,1],8637:[-.13313,.36687,0,0,1],8640:[-.13313,.36687,0,0,1],8641:[-.13313,.36687,0,0,1],8652:[.011,.671,0,0,1],8656:[-.13313,.36687,0,0,1],8657:[.19444,.69444,0,0,.61111],8658:[-.13313,.36687,0,0,1],8659:[.19444,.69444,0,0,.61111],8660:[-.13313,.36687,0,0,1],8661:[.25,.75,0,0,.61111],8704:[0,.69444,0,0,.55556],8706:[0,.69444,.05556,.08334,.5309],8707:[0,.69444,0,0,.55556],8709:[.05556,.75,0,0,.5],8711:[0,.68333,0,0,.83334],8712:[.0391,.5391,0,0,.66667],8715:[.0391,.5391,0,0,.66667],8722:[.08333,.58333,0,0,.77778],8723:[.08333,.58333,0,0,.77778],8725:[.25,.75,0,0,.5],8726:[.25,.75,0,0,.5],8727:[-.03472,.46528,0,0,.5],8728:[-.05555,.44445,0,0,.5],8729:[-.05555,.44445,0,0,.5],8730:[.2,.8,0,0,.83334],8733:[0,.43056,0,0,.77778],8734:[0,.43056,0,0,1],8736:[0,.69224,0,0,.72222],8739:[.25,.75,0,0,.27778],8741:[.25,.75,0,0,.5],8743:[0,.55556,0,0,.66667],8744:[0,.55556,0,0,.66667],8745:[0,.55556,0,0,.66667],8746:[0,.55556,0,0,.66667],8747:[.19444,.69444,.11111,0,.41667],8764:[-.13313,.36687,0,0,.77778],8768:[.19444,.69444,0,0,.27778],8771:[-.03625,.46375,0,0,.77778],8773:[-.022,.589,0,0,1],8776:[-.01688,.48312,0,0,.77778],8781:[-.03625,.46375,0,0,.77778],8784:[-.133,.673,0,0,.778],8801:[-.03625,.46375,0,0,.77778],8804:[.13597,.63597,0,0,.77778],8805:[.13597,.63597,0,0,.77778],8810:[.0391,.5391,0,0,1],8811:[.0391,.5391,0,0,1],8826:[.0391,.5391,0,0,.77778],8827:[.0391,.5391,0,0,.77778],8834:[.0391,.5391,0,0,.77778],8835:[.0391,.5391,0,0,.77778],8838:[.13597,.63597,0,0,.77778],8839:[.13597,.63597,0,0,.77778],8846:[0,.55556,0,0,.66667],8849:[.13597,.63597,0,0,.77778],8850:[.13597,.63597,0,0,.77778],8851:[0,.55556,0,0,.66667],8852:[0,.55556,0,0,.66667],8853:[.08333,.58333,0,0,.77778],8854:[.08333,.58333,0,0,.77778],8855:[.08333,.58333,0,0,.77778],8856:[.08333,.58333,0,0,.77778],8857:[.08333,.58333,0,0,.77778],8866:[0,.69444,0,0,.61111],8867:[0,.69444,0,0,.61111],8868:[0,.69444,0,0,.77778],8869:[0,.69444,0,0,.77778],8872:[.249,.75,0,0,.867],8900:[-.05555,.44445,0,0,.5],8901:[-.05555,.44445,0,0,.27778],8902:[-.03472,.46528,0,0,.5],8904:[.005,.505,0,0,.9],8942:[.03,.903,0,0,.278],8943:[-.19,.313,0,0,1.172],8945:[-.1,.823,0,0,1.282],8968:[.25,.75,0,0,.44445],8969:[.25,.75,0,0,.44445],8970:[.25,.75,0,0,.44445],8971:[.25,.75,0,0,.44445],8994:[-.14236,.35764,0,0,1],8995:[-.14236,.35764,0,0,1],9136:[.244,.744,0,0,.412],9137:[.244,.745,0,0,.412],9651:[.19444,.69444,0,0,.88889],9657:[-.03472,.46528,0,0,.5],9661:[.19444,.69444,0,0,.88889],9667:[-.03472,.46528,0,0,.5],9711:[.19444,.69444,0,0,1],9824:[.12963,.69444,0,0,.77778],9825:[.12963,.69444,0,0,.77778],9826:[.12963,.69444,0,0,.77778],9827:[.12963,.69444,0,0,.77778],9837:[0,.75,0,0,.38889],9838:[.19444,.69444,0,0,.38889],9839:[.19444,.69444,0,0,.38889],10216:[.25,.75,0,0,.38889],10217:[.25,.75,0,0,.38889],10222:[.244,.744,0,0,.412],10223:[.244,.745,0,0,.412],10229:[.011,.511,0,0,1.609],10230:[.011,.511,0,0,1.638],10231:[.011,.511,0,0,1.859],10232:[.024,.525,0,0,1.609],10233:[.024,.525,0,0,1.638],10234:[.024,.525,0,0,1.858],10236:[.011,.511,0,0,1.638],10815:[0,.68333,0,0,.75],10927:[.13597,.63597,0,0,.77778],10928:[.13597,.63597,0,0,.77778],57376:[.19444,.69444,0,0,0]},"Math-BoldItalic":{32:[0,0,0,0,.25],48:[0,.44444,0,0,.575],49:[0,.44444,0,0,.575],50:[0,.44444,0,0,.575],51:[.19444,.44444,0,0,.575],52:[.19444,.44444,0,0,.575],53:[.19444,.44444,0,0,.575],54:[0,.64444,0,0,.575],55:[.19444,.44444,0,0,.575],56:[0,.64444,0,0,.575],57:[.19444,.44444,0,0,.575],65:[0,.68611,0,0,.86944],66:[0,.68611,.04835,0,.8664],67:[0,.68611,.06979,0,.81694],68:[0,.68611,.03194,0,.93812],69:[0,.68611,.05451,0,.81007],70:[0,.68611,.15972,0,.68889],71:[0,.68611,0,0,.88673],72:[0,.68611,.08229,0,.98229],73:[0,.68611,.07778,0,.51111],74:[0,.68611,.10069,0,.63125],75:[0,.68611,.06979,0,.97118],76:[0,.68611,0,0,.75555],77:[0,.68611,.11424,0,1.14201],78:[0,.68611,.11424,0,.95034],79:[0,.68611,.03194,0,.83666],80:[0,.68611,.15972,0,.72309],81:[.19444,.68611,0,0,.86861],82:[0,.68611,.00421,0,.87235],83:[0,.68611,.05382,0,.69271],84:[0,.68611,.15972,0,.63663],85:[0,.68611,.11424,0,.80027],86:[0,.68611,.25555,0,.67778],87:[0,.68611,.15972,0,1.09305],88:[0,.68611,.07778,0,.94722],89:[0,.68611,.25555,0,.67458],90:[0,.68611,.06979,0,.77257],97:[0,.44444,0,0,.63287],98:[0,.69444,0,0,.52083],99:[0,.44444,0,0,.51342],100:[0,.69444,0,0,.60972],101:[0,.44444,0,0,.55361],102:[.19444,.69444,.11042,0,.56806],103:[.19444,.44444,.03704,0,.5449],104:[0,.69444,0,0,.66759],105:[0,.69326,0,0,.4048],106:[.19444,.69326,.0622,0,.47083],107:[0,.69444,.01852,0,.6037],108:[0,.69444,.0088,0,.34815],109:[0,.44444,0,0,1.0324],110:[0,.44444,0,0,.71296],111:[0,.44444,0,0,.58472],112:[.19444,.44444,0,0,.60092],113:[.19444,.44444,.03704,0,.54213],114:[0,.44444,.03194,0,.5287],115:[0,.44444,0,0,.53125],116:[0,.63492,0,0,.41528],117:[0,.44444,0,0,.68102],118:[0,.44444,.03704,0,.56666],119:[0,.44444,.02778,0,.83148],120:[0,.44444,0,0,.65903],121:[.19444,.44444,.03704,0,.59028],122:[0,.44444,.04213,0,.55509],160:[0,0,0,0,.25],915:[0,.68611,.15972,0,.65694],916:[0,.68611,0,0,.95833],920:[0,.68611,.03194,0,.86722],923:[0,.68611,0,0,.80555],926:[0,.68611,.07458,0,.84125],928:[0,.68611,.08229,0,.98229],931:[0,.68611,.05451,0,.88507],933:[0,.68611,.15972,0,.67083],934:[0,.68611,0,0,.76666],936:[0,.68611,.11653,0,.71402],937:[0,.68611,.04835,0,.8789],945:[0,.44444,0,0,.76064],946:[.19444,.69444,.03403,0,.65972],947:[.19444,.44444,.06389,0,.59003],948:[0,.69444,.03819,0,.52222],949:[0,.44444,0,0,.52882],950:[.19444,.69444,.06215,0,.50833],951:[.19444,.44444,.03704,0,.6],952:[0,.69444,.03194,0,.5618],953:[0,.44444,0,0,.41204],954:[0,.44444,0,0,.66759],955:[0,.69444,0,0,.67083],956:[.19444,.44444,0,0,.70787],957:[0,.44444,.06898,0,.57685],958:[.19444,.69444,.03021,0,.50833],959:[0,.44444,0,0,.58472],960:[0,.44444,.03704,0,.68241],961:[.19444,.44444,0,0,.6118],962:[.09722,.44444,.07917,0,.42361],963:[0,.44444,.03704,0,.68588],964:[0,.44444,.13472,0,.52083],965:[0,.44444,.03704,0,.63055],966:[.19444,.44444,0,0,.74722],967:[.19444,.44444,0,0,.71805],968:[.19444,.69444,.03704,0,.75833],969:[0,.44444,.03704,0,.71782],977:[0,.69444,0,0,.69155],981:[.19444,.69444,0,0,.7125],982:[0,.44444,.03194,0,.975],1009:[.19444,.44444,0,0,.6118],1013:[0,.44444,0,0,.48333],57649:[0,.44444,0,0,.39352],57911:[.19444,.44444,0,0,.43889]},"Math-Italic":{32:[0,0,0,0,.25],48:[0,.43056,0,0,.5],49:[0,.43056,0,0,.5],50:[0,.43056,0,0,.5],51:[.19444,.43056,0,0,.5],52:[.19444,.43056,0,0,.5],53:[.19444,.43056,0,0,.5],54:[0,.64444,0,0,.5],55:[.19444,.43056,0,0,.5],56:[0,.64444,0,0,.5],57:[.19444,.43056,0,0,.5],65:[0,.68333,0,.13889,.75],66:[0,.68333,.05017,.08334,.75851],67:[0,.68333,.07153,.08334,.71472],68:[0,.68333,.02778,.05556,.82792],69:[0,.68333,.05764,.08334,.7382],70:[0,.68333,.13889,.08334,.64306],71:[0,.68333,0,.08334,.78625],72:[0,.68333,.08125,.05556,.83125],73:[0,.68333,.07847,.11111,.43958],74:[0,.68333,.09618,.16667,.55451],75:[0,.68333,.07153,.05556,.84931],76:[0,.68333,0,.02778,.68056],77:[0,.68333,.10903,.08334,.97014],78:[0,.68333,.10903,.08334,.80347],79:[0,.68333,.02778,.08334,.76278],80:[0,.68333,.13889,.08334,.64201],81:[.19444,.68333,0,.08334,.79056],82:[0,.68333,.00773,.08334,.75929],83:[0,.68333,.05764,.08334,.6132],84:[0,.68333,.13889,.08334,.58438],85:[0,.68333,.10903,.02778,.68278],86:[0,.68333,.22222,0,.58333],87:[0,.68333,.13889,0,.94445],88:[0,.68333,.07847,.08334,.82847],89:[0,.68333,.22222,0,.58056],90:[0,.68333,.07153,.08334,.68264],97:[0,.43056,0,0,.52859],98:[0,.69444,0,0,.42917],99:[0,.43056,0,.05556,.43276],100:[0,.69444,0,.16667,.52049],101:[0,.43056,0,.05556,.46563],102:[.19444,.69444,.10764,.16667,.48959],103:[.19444,.43056,.03588,.02778,.47697],104:[0,.69444,0,0,.57616],105:[0,.65952,0,0,.34451],106:[.19444,.65952,.05724,0,.41181],107:[0,.69444,.03148,0,.5206],108:[0,.69444,.01968,.08334,.29838],109:[0,.43056,0,0,.87801],110:[0,.43056,0,0,.60023],111:[0,.43056,0,.05556,.48472],112:[.19444,.43056,0,.08334,.50313],113:[.19444,.43056,.03588,.08334,.44641],114:[0,.43056,.02778,.05556,.45116],115:[0,.43056,0,.05556,.46875],116:[0,.61508,0,.08334,.36111],117:[0,.43056,0,.02778,.57246],118:[0,.43056,.03588,.02778,.48472],119:[0,.43056,.02691,.08334,.71592],120:[0,.43056,0,.02778,.57153],121:[.19444,.43056,.03588,.05556,.49028],122:[0,.43056,.04398,.05556,.46505],160:[0,0,0,0,.25],915:[0,.68333,.13889,.08334,.61528],916:[0,.68333,0,.16667,.83334],920:[0,.68333,.02778,.08334,.76278],923:[0,.68333,0,.16667,.69445],926:[0,.68333,.07569,.08334,.74236],928:[0,.68333,.08125,.05556,.83125],931:[0,.68333,.05764,.08334,.77986],933:[0,.68333,.13889,.05556,.58333],934:[0,.68333,0,.08334,.66667],936:[0,.68333,.11,.05556,.61222],937:[0,.68333,.05017,.08334,.7724],945:[0,.43056,.0037,.02778,.6397],946:[.19444,.69444,.05278,.08334,.56563],947:[.19444,.43056,.05556,0,.51773],948:[0,.69444,.03785,.05556,.44444],949:[0,.43056,0,.08334,.46632],950:[.19444,.69444,.07378,.08334,.4375],951:[.19444,.43056,.03588,.05556,.49653],952:[0,.69444,.02778,.08334,.46944],953:[0,.43056,0,.05556,.35394],954:[0,.43056,0,0,.57616],955:[0,.69444,0,0,.58334],956:[.19444,.43056,0,.02778,.60255],957:[0,.43056,.06366,.02778,.49398],958:[.19444,.69444,.04601,.11111,.4375],959:[0,.43056,0,.05556,.48472],960:[0,.43056,.03588,0,.57003],961:[.19444,.43056,0,.08334,.51702],962:[.09722,.43056,.07986,.08334,.36285],963:[0,.43056,.03588,0,.57141],964:[0,.43056,.1132,.02778,.43715],965:[0,.43056,.03588,.02778,.54028],966:[.19444,.43056,0,.08334,.65417],967:[.19444,.43056,0,.05556,.62569],968:[.19444,.69444,.03588,.11111,.65139],969:[0,.43056,.03588,0,.62245],977:[0,.69444,0,.08334,.59144],981:[.19444,.69444,0,.08334,.59583],982:[0,.43056,.02778,0,.82813],1009:[.19444,.43056,0,.08334,.51702],1013:[0,.43056,0,.05556,.4059],57649:[0,.43056,0,.02778,.32246],57911:[.19444,.43056,0,.08334,.38403]},"SansSerif-Bold":{32:[0,0,0,0,.25],33:[0,.69444,0,0,.36667],34:[0,.69444,0,0,.55834],35:[.19444,.69444,0,0,.91667],36:[.05556,.75,0,0,.55],37:[.05556,.75,0,0,1.02912],38:[0,.69444,0,0,.83056],39:[0,.69444,0,0,.30556],40:[.25,.75,0,0,.42778],41:[.25,.75,0,0,.42778],42:[0,.75,0,0,.55],43:[.11667,.61667,0,0,.85556],44:[.10556,.13056,0,0,.30556],45:[0,.45833,0,0,.36667],46:[0,.13056,0,0,.30556],47:[.25,.75,0,0,.55],48:[0,.69444,0,0,.55],49:[0,.69444,0,0,.55],50:[0,.69444,0,0,.55],51:[0,.69444,0,0,.55],52:[0,.69444,0,0,.55],53:[0,.69444,0,0,.55],54:[0,.69444,0,0,.55],55:[0,.69444,0,0,.55],56:[0,.69444,0,0,.55],57:[0,.69444,0,0,.55],58:[0,.45833,0,0,.30556],59:[.10556,.45833,0,0,.30556],61:[-.09375,.40625,0,0,.85556],63:[0,.69444,0,0,.51945],64:[0,.69444,0,0,.73334],65:[0,.69444,0,0,.73334],66:[0,.69444,0,0,.73334],67:[0,.69444,0,0,.70278],68:[0,.69444,0,0,.79445],69:[0,.69444,0,0,.64167],70:[0,.69444,0,0,.61111],71:[0,.69444,0,0,.73334],72:[0,.69444,0,0,.79445],73:[0,.69444,0,0,.33056],74:[0,.69444,0,0,.51945],75:[0,.69444,0,0,.76389],76:[0,.69444,0,0,.58056],77:[0,.69444,0,0,.97778],78:[0,.69444,0,0,.79445],79:[0,.69444,0,0,.79445],80:[0,.69444,0,0,.70278],81:[.10556,.69444,0,0,.79445],82:[0,.69444,0,0,.70278],83:[0,.69444,0,0,.61111],84:[0,.69444,0,0,.73334],85:[0,.69444,0,0,.76389],86:[0,.69444,.01528,0,.73334],87:[0,.69444,.01528,0,1.03889],88:[0,.69444,0,0,.73334],89:[0,.69444,.0275,0,.73334],90:[0,.69444,0,0,.67223],91:[.25,.75,0,0,.34306],93:[.25,.75,0,0,.34306],94:[0,.69444,0,0,.55],95:[.35,.10833,.03056,0,.55],97:[0,.45833,0,0,.525],98:[0,.69444,0,0,.56111],99:[0,.45833,0,0,.48889],100:[0,.69444,0,0,.56111],101:[0,.45833,0,0,.51111],102:[0,.69444,.07639,0,.33611],103:[.19444,.45833,.01528,0,.55],104:[0,.69444,0,0,.56111],105:[0,.69444,0,0,.25556],106:[.19444,.69444,0,0,.28611],107:[0,.69444,0,0,.53056],108:[0,.69444,0,0,.25556],109:[0,.45833,0,0,.86667],110:[0,.45833,0,0,.56111],111:[0,.45833,0,0,.55],112:[.19444,.45833,0,0,.56111],113:[.19444,.45833,0,0,.56111],114:[0,.45833,.01528,0,.37222],115:[0,.45833,0,0,.42167],116:[0,.58929,0,0,.40417],117:[0,.45833,0,0,.56111],118:[0,.45833,.01528,0,.5],119:[0,.45833,.01528,0,.74445],120:[0,.45833,0,0,.5],121:[.19444,.45833,.01528,0,.5],122:[0,.45833,0,0,.47639],126:[.35,.34444,0,0,.55],160:[0,0,0,0,.25],168:[0,.69444,0,0,.55],176:[0,.69444,0,0,.73334],180:[0,.69444,0,0,.55],184:[.17014,0,0,0,.48889],305:[0,.45833,0,0,.25556],567:[.19444,.45833,0,0,.28611],710:[0,.69444,0,0,.55],711:[0,.63542,0,0,.55],713:[0,.63778,0,0,.55],728:[0,.69444,0,0,.55],729:[0,.69444,0,0,.30556],730:[0,.69444,0,0,.73334],732:[0,.69444,0,0,.55],733:[0,.69444,0,0,.55],915:[0,.69444,0,0,.58056],916:[0,.69444,0,0,.91667],920:[0,.69444,0,0,.85556],923:[0,.69444,0,0,.67223],926:[0,.69444,0,0,.73334],928:[0,.69444,0,0,.79445],931:[0,.69444,0,0,.79445],933:[0,.69444,0,0,.85556],934:[0,.69444,0,0,.79445],936:[0,.69444,0,0,.85556],937:[0,.69444,0,0,.79445],8211:[0,.45833,.03056,0,.55],8212:[0,.45833,.03056,0,1.10001],8216:[0,.69444,0,0,.30556],8217:[0,.69444,0,0,.30556],8220:[0,.69444,0,0,.55834],8221:[0,.69444,0,0,.55834]},"SansSerif-Italic":{32:[0,0,0,0,.25],33:[0,.69444,.05733,0,.31945],34:[0,.69444,.00316,0,.5],35:[.19444,.69444,.05087,0,.83334],36:[.05556,.75,.11156,0,.5],37:[.05556,.75,.03126,0,.83334],38:[0,.69444,.03058,0,.75834],39:[0,.69444,.07816,0,.27778],40:[.25,.75,.13164,0,.38889],41:[.25,.75,.02536,0,.38889],42:[0,.75,.11775,0,.5],43:[.08333,.58333,.02536,0,.77778],44:[.125,.08333,0,0,.27778],45:[0,.44444,.01946,0,.33333],46:[0,.08333,0,0,.27778],47:[.25,.75,.13164,0,.5],48:[0,.65556,.11156,0,.5],49:[0,.65556,.11156,0,.5],50:[0,.65556,.11156,0,.5],51:[0,.65556,.11156,0,.5],52:[0,.65556,.11156,0,.5],53:[0,.65556,.11156,0,.5],54:[0,.65556,.11156,0,.5],55:[0,.65556,.11156,0,.5],56:[0,.65556,.11156,0,.5],57:[0,.65556,.11156,0,.5],58:[0,.44444,.02502,0,.27778],59:[.125,.44444,.02502,0,.27778],61:[-.13,.37,.05087,0,.77778],63:[0,.69444,.11809,0,.47222],64:[0,.69444,.07555,0,.66667],65:[0,.69444,0,0,.66667],66:[0,.69444,.08293,0,.66667],67:[0,.69444,.11983,0,.63889],68:[0,.69444,.07555,0,.72223],69:[0,.69444,.11983,0,.59722],70:[0,.69444,.13372,0,.56945],71:[0,.69444,.11983,0,.66667],72:[0,.69444,.08094,0,.70834],73:[0,.69444,.13372,0,.27778],74:[0,.69444,.08094,0,.47222],75:[0,.69444,.11983,0,.69445],76:[0,.69444,0,0,.54167],77:[0,.69444,.08094,0,.875],78:[0,.69444,.08094,0,.70834],79:[0,.69444,.07555,0,.73611],80:[0,.69444,.08293,0,.63889],81:[.125,.69444,.07555,0,.73611],82:[0,.69444,.08293,0,.64584],83:[0,.69444,.09205,0,.55556],84:[0,.69444,.13372,0,.68056],85:[0,.69444,.08094,0,.6875],86:[0,.69444,.1615,0,.66667],87:[0,.69444,.1615,0,.94445],88:[0,.69444,.13372,0,.66667],89:[0,.69444,.17261,0,.66667],90:[0,.69444,.11983,0,.61111],91:[.25,.75,.15942,0,.28889],93:[.25,.75,.08719,0,.28889],94:[0,.69444,.0799,0,.5],95:[.35,.09444,.08616,0,.5],97:[0,.44444,.00981,0,.48056],98:[0,.69444,.03057,0,.51667],99:[0,.44444,.08336,0,.44445],100:[0,.69444,.09483,0,.51667],101:[0,.44444,.06778,0,.44445],102:[0,.69444,.21705,0,.30556],103:[.19444,.44444,.10836,0,.5],104:[0,.69444,.01778,0,.51667],105:[0,.67937,.09718,0,.23889],106:[.19444,.67937,.09162,0,.26667],107:[0,.69444,.08336,0,.48889],108:[0,.69444,.09483,0,.23889],109:[0,.44444,.01778,0,.79445],110:[0,.44444,.01778,0,.51667],111:[0,.44444,.06613,0,.5],112:[.19444,.44444,.0389,0,.51667],113:[.19444,.44444,.04169,0,.51667],114:[0,.44444,.10836,0,.34167],115:[0,.44444,.0778,0,.38333],116:[0,.57143,.07225,0,.36111],117:[0,.44444,.04169,0,.51667],118:[0,.44444,.10836,0,.46111],119:[0,.44444,.10836,0,.68334],120:[0,.44444,.09169,0,.46111],121:[.19444,.44444,.10836,0,.46111],122:[0,.44444,.08752,0,.43472],126:[.35,.32659,.08826,0,.5],160:[0,0,0,0,.25],168:[0,.67937,.06385,0,.5],176:[0,.69444,0,0,.73752],184:[.17014,0,0,0,.44445],305:[0,.44444,.04169,0,.23889],567:[.19444,.44444,.04169,0,.26667],710:[0,.69444,.0799,0,.5],711:[0,.63194,.08432,0,.5],713:[0,.60889,.08776,0,.5],714:[0,.69444,.09205,0,.5],715:[0,.69444,0,0,.5],728:[0,.69444,.09483,0,.5],729:[0,.67937,.07774,0,.27778],730:[0,.69444,0,0,.73752],732:[0,.67659,.08826,0,.5],733:[0,.69444,.09205,0,.5],915:[0,.69444,.13372,0,.54167],916:[0,.69444,0,0,.83334],920:[0,.69444,.07555,0,.77778],923:[0,.69444,0,0,.61111],926:[0,.69444,.12816,0,.66667],928:[0,.69444,.08094,0,.70834],931:[0,.69444,.11983,0,.72222],933:[0,.69444,.09031,0,.77778],934:[0,.69444,.04603,0,.72222],936:[0,.69444,.09031,0,.77778],937:[0,.69444,.08293,0,.72222],8211:[0,.44444,.08616,0,.5],8212:[0,.44444,.08616,0,1],8216:[0,.69444,.07816,0,.27778],8217:[0,.69444,.07816,0,.27778],8220:[0,.69444,.14205,0,.5],8221:[0,.69444,.00316,0,.5]},"SansSerif-Regular":{32:[0,0,0,0,.25],33:[0,.69444,0,0,.31945],34:[0,.69444,0,0,.5],35:[.19444,.69444,0,0,.83334],36:[.05556,.75,0,0,.5],37:[.05556,.75,0,0,.83334],38:[0,.69444,0,0,.75834],39:[0,.69444,0,0,.27778],40:[.25,.75,0,0,.38889],41:[.25,.75,0,0,.38889],42:[0,.75,0,0,.5],43:[.08333,.58333,0,0,.77778],44:[.125,.08333,0,0,.27778],45:[0,.44444,0,0,.33333],46:[0,.08333,0,0,.27778],47:[.25,.75,0,0,.5],48:[0,.65556,0,0,.5],49:[0,.65556,0,0,.5],50:[0,.65556,0,0,.5],51:[0,.65556,0,0,.5],52:[0,.65556,0,0,.5],53:[0,.65556,0,0,.5],54:[0,.65556,0,0,.5],55:[0,.65556,0,0,.5],56:[0,.65556,0,0,.5],57:[0,.65556,0,0,.5],58:[0,.44444,0,0,.27778],59:[.125,.44444,0,0,.27778],61:[-.13,.37,0,0,.77778],63:[0,.69444,0,0,.47222],64:[0,.69444,0,0,.66667],65:[0,.69444,0,0,.66667],66:[0,.69444,0,0,.66667],67:[0,.69444,0,0,.63889],68:[0,.69444,0,0,.72223],69:[0,.69444,0,0,.59722],70:[0,.69444,0,0,.56945],71:[0,.69444,0,0,.66667],72:[0,.69444,0,0,.70834],73:[0,.69444,0,0,.27778],74:[0,.69444,0,0,.47222],75:[0,.69444,0,0,.69445],76:[0,.69444,0,0,.54167],77:[0,.69444,0,0,.875],78:[0,.69444,0,0,.70834],79:[0,.69444,0,0,.73611],80:[0,.69444,0,0,.63889],81:[.125,.69444,0,0,.73611],82:[0,.69444,0,0,.64584],83:[0,.69444,0,0,.55556],84:[0,.69444,0,0,.68056],85:[0,.69444,0,0,.6875],86:[0,.69444,.01389,0,.66667],87:[0,.69444,.01389,0,.94445],88:[0,.69444,0,0,.66667],89:[0,.69444,.025,0,.66667],90:[0,.69444,0,0,.61111],91:[.25,.75,0,0,.28889],93:[.25,.75,0,0,.28889],94:[0,.69444,0,0,.5],95:[.35,.09444,.02778,0,.5],97:[0,.44444,0,0,.48056],98:[0,.69444,0,0,.51667],99:[0,.44444,0,0,.44445],100:[0,.69444,0,0,.51667],101:[0,.44444,0,0,.44445],102:[0,.69444,.06944,0,.30556],103:[.19444,.44444,.01389,0,.5],104:[0,.69444,0,0,.51667],105:[0,.67937,0,0,.23889],106:[.19444,.67937,0,0,.26667],107:[0,.69444,0,0,.48889],108:[0,.69444,0,0,.23889],109:[0,.44444,0,0,.79445],110:[0,.44444,0,0,.51667],111:[0,.44444,0,0,.5],112:[.19444,.44444,0,0,.51667],113:[.19444,.44444,0,0,.51667],114:[0,.44444,.01389,0,.34167],115:[0,.44444,0,0,.38333],116:[0,.57143,0,0,.36111],117:[0,.44444,0,0,.51667],118:[0,.44444,.01389,0,.46111],119:[0,.44444,.01389,0,.68334],120:[0,.44444,0,0,.46111],121:[.19444,.44444,.01389,0,.46111],122:[0,.44444,0,0,.43472],126:[.35,.32659,0,0,.5],160:[0,0,0,0,.25],168:[0,.67937,0,0,.5],176:[0,.69444,0,0,.66667],184:[.17014,0,0,0,.44445],305:[0,.44444,0,0,.23889],567:[.19444,.44444,0,0,.26667],710:[0,.69444,0,0,.5],711:[0,.63194,0,0,.5],713:[0,.60889,0,0,.5],714:[0,.69444,0,0,.5],715:[0,.69444,0,0,.5],728:[0,.69444,0,0,.5],729:[0,.67937,0,0,.27778],730:[0,.69444,0,0,.66667],732:[0,.67659,0,0,.5],733:[0,.69444,0,0,.5],915:[0,.69444,0,0,.54167],916:[0,.69444,0,0,.83334],920:[0,.69444,0,0,.77778],923:[0,.69444,0,0,.61111],926:[0,.69444,0,0,.66667],928:[0,.69444,0,0,.70834],931:[0,.69444,0,0,.72222],933:[0,.69444,0,0,.77778],934:[0,.69444,0,0,.72222],936:[0,.69444,0,0,.77778],937:[0,.69444,0,0,.72222],8211:[0,.44444,.02778,0,.5],8212:[0,.44444,.02778,0,1],8216:[0,.69444,0,0,.27778],8217:[0,.69444,0,0,.27778],8220:[0,.69444,0,0,.5],8221:[0,.69444,0,0,.5]},"Script-Regular":{32:[0,0,0,0,.25],65:[0,.7,.22925,0,.80253],66:[0,.7,.04087,0,.90757],67:[0,.7,.1689,0,.66619],68:[0,.7,.09371,0,.77443],69:[0,.7,.18583,0,.56162],70:[0,.7,.13634,0,.89544],71:[0,.7,.17322,0,.60961],72:[0,.7,.29694,0,.96919],73:[0,.7,.19189,0,.80907],74:[.27778,.7,.19189,0,1.05159],75:[0,.7,.31259,0,.91364],76:[0,.7,.19189,0,.87373],77:[0,.7,.15981,0,1.08031],78:[0,.7,.3525,0,.9015],79:[0,.7,.08078,0,.73787],80:[0,.7,.08078,0,1.01262],81:[0,.7,.03305,0,.88282],82:[0,.7,.06259,0,.85],83:[0,.7,.19189,0,.86767],84:[0,.7,.29087,0,.74697],85:[0,.7,.25815,0,.79996],86:[0,.7,.27523,0,.62204],87:[0,.7,.27523,0,.80532],88:[0,.7,.26006,0,.94445],89:[0,.7,.2939,0,.70961],90:[0,.7,.24037,0,.8212],160:[0,0,0,0,.25]},"Size1-Regular":{32:[0,0,0,0,.25],40:[.35001,.85,0,0,.45834],41:[.35001,.85,0,0,.45834],47:[.35001,.85,0,0,.57778],91:[.35001,.85,0,0,.41667],92:[.35001,.85,0,0,.57778],93:[.35001,.85,0,0,.41667],123:[.35001,.85,0,0,.58334],125:[.35001,.85,0,0,.58334],160:[0,0,0,0,.25],710:[0,.72222,0,0,.55556],732:[0,.72222,0,0,.55556],770:[0,.72222,0,0,.55556],771:[0,.72222,0,0,.55556],8214:[-99e-5,.601,0,0,.77778],8593:[1e-5,.6,0,0,.66667],8595:[1e-5,.6,0,0,.66667],8657:[1e-5,.6,0,0,.77778],8659:[1e-5,.6,0,0,.77778],8719:[.25001,.75,0,0,.94445],8720:[.25001,.75,0,0,.94445],8721:[.25001,.75,0,0,1.05556],8730:[.35001,.85,0,0,1],8739:[-.00599,.606,0,0,.33333],8741:[-.00599,.606,0,0,.55556],8747:[.30612,.805,.19445,0,.47222],8748:[.306,.805,.19445,0,.47222],8749:[.306,.805,.19445,0,.47222],8750:[.30612,.805,.19445,0,.47222],8896:[.25001,.75,0,0,.83334],8897:[.25001,.75,0,0,.83334],8898:[.25001,.75,0,0,.83334],8899:[.25001,.75,0,0,.83334],8968:[.35001,.85,0,0,.47222],8969:[.35001,.85,0,0,.47222],8970:[.35001,.85,0,0,.47222],8971:[.35001,.85,0,0,.47222],9168:[-99e-5,.601,0,0,.66667],10216:[.35001,.85,0,0,.47222],10217:[.35001,.85,0,0,.47222],10752:[.25001,.75,0,0,1.11111],10753:[.25001,.75,0,0,1.11111],10754:[.25001,.75,0,0,1.11111],10756:[.25001,.75,0,0,.83334],10758:[.25001,.75,0,0,.83334]},"Size2-Regular":{32:[0,0,0,0,.25],40:[.65002,1.15,0,0,.59722],41:[.65002,1.15,0,0,.59722],47:[.65002,1.15,0,0,.81111],91:[.65002,1.15,0,0,.47222],92:[.65002,1.15,0,0,.81111],93:[.65002,1.15,0,0,.47222],123:[.65002,1.15,0,0,.66667],125:[.65002,1.15,0,0,.66667],160:[0,0,0,0,.25],710:[0,.75,0,0,1],732:[0,.75,0,0,1],770:[0,.75,0,0,1],771:[0,.75,0,0,1],8719:[.55001,1.05,0,0,1.27778],8720:[.55001,1.05,0,0,1.27778],8721:[.55001,1.05,0,0,1.44445],8730:[.65002,1.15,0,0,1],8747:[.86225,1.36,.44445,0,.55556],8748:[.862,1.36,.44445,0,.55556],8749:[.862,1.36,.44445,0,.55556],8750:[.86225,1.36,.44445,0,.55556],8896:[.55001,1.05,0,0,1.11111],8897:[.55001,1.05,0,0,1.11111],8898:[.55001,1.05,0,0,1.11111],8899:[.55001,1.05,0,0,1.11111],8968:[.65002,1.15,0,0,.52778],8969:[.65002,1.15,0,0,.52778],8970:[.65002,1.15,0,0,.52778],8971:[.65002,1.15,0,0,.52778],10216:[.65002,1.15,0,0,.61111],10217:[.65002,1.15,0,0,.61111],10752:[.55001,1.05,0,0,1.51112],10753:[.55001,1.05,0,0,1.51112],10754:[.55001,1.05,0,0,1.51112],10756:[.55001,1.05,0,0,1.11111],10758:[.55001,1.05,0,0,1.11111]},"Size3-Regular":{32:[0,0,0,0,.25],40:[.95003,1.45,0,0,.73611],41:[.95003,1.45,0,0,.73611],47:[.95003,1.45,0,0,1.04445],91:[.95003,1.45,0,0,.52778],92:[.95003,1.45,0,0,1.04445],93:[.95003,1.45,0,0,.52778],123:[.95003,1.45,0,0,.75],125:[.95003,1.45,0,0,.75],160:[0,0,0,0,.25],710:[0,.75,0,0,1.44445],732:[0,.75,0,0,1.44445],770:[0,.75,0,0,1.44445],771:[0,.75,0,0,1.44445],8730:[.95003,1.45,0,0,1],8968:[.95003,1.45,0,0,.58334],8969:[.95003,1.45,0,0,.58334],8970:[.95003,1.45,0,0,.58334],8971:[.95003,1.45,0,0,.58334],10216:[.95003,1.45,0,0,.75],10217:[.95003,1.45,0,0,.75]},"Size4-Regular":{32:[0,0,0,0,.25],40:[1.25003,1.75,0,0,.79167],41:[1.25003,1.75,0,0,.79167],47:[1.25003,1.75,0,0,1.27778],91:[1.25003,1.75,0,0,.58334],92:[1.25003,1.75,0,0,1.27778],93:[1.25003,1.75,0,0,.58334],123:[1.25003,1.75,0,0,.80556],125:[1.25003,1.75,0,0,.80556],160:[0,0,0,0,.25],710:[0,.825,0,0,1.8889],732:[0,.825,0,0,1.8889],770:[0,.825,0,0,1.8889],771:[0,.825,0,0,1.8889],8730:[1.25003,1.75,0,0,1],8968:[1.25003,1.75,0,0,.63889],8969:[1.25003,1.75,0,0,.63889],8970:[1.25003,1.75,0,0,.63889],8971:[1.25003,1.75,0,0,.63889],9115:[.64502,1.155,0,0,.875],9116:[1e-5,.6,0,0,.875],9117:[.64502,1.155,0,0,.875],9118:[.64502,1.155,0,0,.875],9119:[1e-5,.6,0,0,.875],9120:[.64502,1.155,0,0,.875],9121:[.64502,1.155,0,0,.66667],9122:[-99e-5,.601,0,0,.66667],9123:[.64502,1.155,0,0,.66667],9124:[.64502,1.155,0,0,.66667],9125:[-99e-5,.601,0,0,.66667],9126:[.64502,1.155,0,0,.66667],9127:[1e-5,.9,0,0,.88889],9128:[.65002,1.15,0,0,.88889],9129:[.90001,0,0,0,.88889],9130:[0,.3,0,0,.88889],9131:[1e-5,.9,0,0,.88889],9132:[.65002,1.15,0,0,.88889],9133:[.90001,0,0,0,.88889],9143:[.88502,.915,0,0,1.05556],10216:[1.25003,1.75,0,0,.80556],10217:[1.25003,1.75,0,0,.80556],57344:[-.00499,.605,0,0,1.05556],57345:[-.00499,.605,0,0,1.05556],57680:[0,.12,0,0,.45],57681:[0,.12,0,0,.45],57682:[0,.12,0,0,.45],57683:[0,.12,0,0,.45]},"Typewriter-Regular":{32:[0,0,0,0,.525],33:[0,.61111,0,0,.525],34:[0,.61111,0,0,.525],35:[0,.61111,0,0,.525],36:[.08333,.69444,0,0,.525],37:[.08333,.69444,0,0,.525],38:[0,.61111,0,0,.525],39:[0,.61111,0,0,.525],40:[.08333,.69444,0,0,.525],41:[.08333,.69444,0,0,.525],42:[0,.52083,0,0,.525],43:[-.08056,.53055,0,0,.525],44:[.13889,.125,0,0,.525],45:[-.08056,.53055,0,0,.525],46:[0,.125,0,0,.525],47:[.08333,.69444,0,0,.525],48:[0,.61111,0,0,.525],49:[0,.61111,0,0,.525],50:[0,.61111,0,0,.525],51:[0,.61111,0,0,.525],52:[0,.61111,0,0,.525],53:[0,.61111,0,0,.525],54:[0,.61111,0,0,.525],55:[0,.61111,0,0,.525],56:[0,.61111,0,0,.525],57:[0,.61111,0,0,.525],58:[0,.43056,0,0,.525],59:[.13889,.43056,0,0,.525],60:[-.05556,.55556,0,0,.525],61:[-.19549,.41562,0,0,.525],62:[-.05556,.55556,0,0,.525],63:[0,.61111,0,0,.525],64:[0,.61111,0,0,.525],65:[0,.61111,0,0,.525],66:[0,.61111,0,0,.525],67:[0,.61111,0,0,.525],68:[0,.61111,0,0,.525],69:[0,.61111,0,0,.525],70:[0,.61111,0,0,.525],71:[0,.61111,0,0,.525],72:[0,.61111,0,0,.525],73:[0,.61111,0,0,.525],74:[0,.61111,0,0,.525],75:[0,.61111,0,0,.525],76:[0,.61111,0,0,.525],77:[0,.61111,0,0,.525],78:[0,.61111,0,0,.525],79:[0,.61111,0,0,.525],80:[0,.61111,0,0,.525],81:[.13889,.61111,0,0,.525],82:[0,.61111,0,0,.525],83:[0,.61111,0,0,.525],84:[0,.61111,0,0,.525],85:[0,.61111,0,0,.525],86:[0,.61111,0,0,.525],87:[0,.61111,0,0,.525],88:[0,.61111,0,0,.525],89:[0,.61111,0,0,.525],90:[0,.61111,0,0,.525],91:[.08333,.69444,0,0,.525],92:[.08333,.69444,0,0,.525],93:[.08333,.69444,0,0,.525],94:[0,.61111,0,0,.525],95:[.09514,0,0,0,.525],96:[0,.61111,0,0,.525],97:[0,.43056,0,0,.525],98:[0,.61111,0,0,.525],99:[0,.43056,0,0,.525],100:[0,.61111,0,0,.525],101:[0,.43056,0,0,.525],102:[0,.61111,0,0,.525],103:[.22222,.43056,0,0,.525],104:[0,.61111,0,0,.525],105:[0,.61111,0,0,.525],106:[.22222,.61111,0,0,.525],107:[0,.61111,0,0,.525],108:[0,.61111,0,0,.525],109:[0,.43056,0,0,.525],110:[0,.43056,0,0,.525],111:[0,.43056,0,0,.525],112:[.22222,.43056,0,0,.525],113:[.22222,.43056,0,0,.525],114:[0,.43056,0,0,.525],115:[0,.43056,0,0,.525],116:[0,.55358,0,0,.525],117:[0,.43056,0,0,.525],118:[0,.43056,0,0,.525],119:[0,.43056,0,0,.525],120:[0,.43056,0,0,.525],121:[.22222,.43056,0,0,.525],122:[0,.43056,0,0,.525],123:[.08333,.69444,0,0,.525],124:[.08333,.69444,0,0,.525],125:[.08333,.69444,0,0,.525],126:[0,.61111,0,0,.525],127:[0,.61111,0,0,.525],160:[0,0,0,0,.525],176:[0,.61111,0,0,.525],184:[.19445,0,0,0,.525],305:[0,.43056,0,0,.525],567:[.22222,.43056,0,0,.525],711:[0,.56597,0,0,.525],713:[0,.56555,0,0,.525],714:[0,.61111,0,0,.525],715:[0,.61111,0,0,.525],728:[0,.61111,0,0,.525],730:[0,.61111,0,0,.525],770:[0,.61111,0,0,.525],771:[0,.61111,0,0,.525],776:[0,.61111,0,0,.525],915:[0,.61111,0,0,.525],916:[0,.61111,0,0,.525],920:[0,.61111,0,0,.525],923:[0,.61111,0,0,.525],926:[0,.61111,0,0,.525],928:[0,.61111,0,0,.525],931:[0,.61111,0,0,.525],933:[0,.61111,0,0,.525],934:[0,.61111,0,0,.525],936:[0,.61111,0,0,.525],937:[0,.61111,0,0,.525],8216:[0,.61111,0,0,.525],8217:[0,.61111,0,0,.525],8242:[0,.61111,0,0,.525],9251:[.11111,.21944,0,0,.525]}},j={slant:[.25,.25,.25],space:[0,0,0],stretch:[0,0,0],shrink:[0,0,0],xHeight:[.431,.431,.431],quad:[1,1.171,1.472],extraSpace:[0,0,0],num1:[.677,.732,.925],num2:[.394,.384,.387],num3:[.444,.471,.504],denom1:[.686,.752,1.025],denom2:[.345,.344,.532],sup1:[.413,.503,.504],sup2:[.363,.431,.404],sup3:[.289,.286,.294],sub1:[.15,.143,.2],sub2:[.247,.286,.4],supDrop:[.386,.353,.494],subDrop:[.05,.071,.1],delim1:[2.39,1.7,1.98],delim2:[1.01,1.157,1.42],axisHeight:[.25,.25,.25],defaultRuleThickness:[.04,.049,.049],bigOpSpacing1:[.111,.111,.111],bigOpSpacing2:[.166,.166,.166],bigOpSpacing3:[.2,.2,.2],bigOpSpacing4:[.6,.611,.611],bigOpSpacing5:[.1,.143,.143],sqrtRuleThickness:[.04,.04,.04],ptPerEm:[10,10,10],doubleRuleSep:[.2,.2,.2],arrayRuleWidth:[.04,.04,.04],fboxsep:[.3,.3,.3],fboxrule:[.04,.04,.04]},W={Å:"A",Ð:"D",Þ:"o",å:"a",ð:"d",þ:"o",А:"A",Б:"B",В:"B",Г:"F",Д:"A",Е:"E",Ж:"K",З:"3",И:"N",Й:"N",К:"K",Л:"N",М:"M",Н:"H",О:"O",П:"N",Р:"P",С:"C",Т:"T",У:"y",Ф:"O",Х:"X",Ц:"U",Ч:"h",Ш:"W",Щ:"W",Ъ:"B",Ы:"X",Ь:"B",Э:"3",Ю:"X",Я:"R",а:"a",б:"b",в:"a",г:"r",д:"y",е:"e",ж:"m",з:"e",и:"n",й:"n",к:"n",л:"n",м:"m",н:"n",о:"o",п:"n",р:"p",с:"c",т:"o",у:"y",ф:"b",х:"x",ц:"n",ч:"n",ш:"w",щ:"w",ъ:"a",ы:"m",ь:"a",э:"e",ю:"m",я:"r"};function K(e,t,r){if(!$[t])throw new Error("Font metrics not found for font: "+t+".");var n=e.charCodeAt(0),o=$[t][n];if(!o&&e[0]in W&&(n=W[e[0]].charCodeAt(0),o=$[t][n]),o||"text"!==r||O(n)&&(o=$[t][77]),o)return{depth:o[0],height:o[1],italic:o[2],skew:o[3],width:o[4]}}var G={},U={bin:1,close:1,inner:1,open:1,punct:1,rel:1},J={"accent-token":1,mathord:1,"op-token":1,spacing:1,textord:1},Y={math:{},text:{}},X=Y;function Z(e,t,r,n,o,i){Y[e][o]={font:t,group:r,replace:n},i&&n&&(Y[e][n]=Y[e][o])}var Q="math",ee="text",te="main",re="ams",ne="accent-token",oe="bin",ie="close",ae="inner",se="mathord",le="op-token",ce="open",he="punct",pe="rel",ue="spacing",de="textord";Z(Q,te,pe,"≡","\\equiv",!0),Z(Q,te,pe,"≺","\\prec",!0),Z(Q,te,pe,"≻","\\succ",!0),Z(Q,te,pe,"∼","\\sim",!0),Z(Q,te,pe,"⊥","\\perp"),Z(Q,te,pe,"⪯","\\preceq",!0),Z(Q,te,pe,"⪰","\\succeq",!0),Z(Q,te,pe,"≃","\\simeq",!0),Z(Q,te,pe,"∣","\\mid",!0),Z(Q,te,pe,"≪","\\ll",!0),Z(Q,te,pe,"≫","\\gg",!0),Z(Q,te,pe,"≍","\\asymp",!0),Z(Q,te,pe,"∥","\\parallel"),Z(Q,te,pe,"⋈","\\bowtie",!0),Z(Q,te,pe,"⌣","\\smile",!0),Z(Q,te,pe,"⊑","\\sqsubseteq",!0),Z(Q,te,pe,"⊒","\\sqsupseteq",!0),Z(Q,te,pe,"≐","\\doteq",!0),Z(Q,te,pe,"⌢","\\frown",!0),Z(Q,te,pe,"∋","\\ni",!0),Z(Q,te,pe,"∝","\\propto",!0),Z(Q,te,pe,"⊢","\\vdash",!0),Z(Q,te,pe,"⊣","\\dashv",!0),Z(Q,te,pe,"∋","\\owns"),Z(Q,te,he,".","\\ldotp"),Z(Q,te,he,"⋅","\\cdotp"),Z(Q,te,de,"#","\\#"),Z(ee,te,de,"#","\\#"),Z(Q,te,de,"&","\\&"),Z(ee,te,de,"&","\\&"),Z(Q,te,de,"ℵ","\\aleph",!0),Z(Q,te,de,"∀","\\forall",!0),Z(Q,te,de,"ℏ","\\hbar",!0),Z(Q,te,de,"∃","\\exists",!0),Z(Q,te,de,"∇","\\nabla",!0),Z(Q,te,de,"♭","\\flat",!0),Z(Q,te,de,"ℓ","\\ell",!0),Z(Q,te,de,"♮","\\natural",!0),Z(Q,te,de,"♣","\\clubsuit",!0),Z(Q,te,de,"℘","\\wp",!0),Z(Q,te,de,"♯","\\sharp",!0),Z(Q,te,de,"♢","\\diamondsuit",!0),Z(Q,te,de,"ℜ","\\Re",!0),Z(Q,te,de,"♡","\\heartsuit",!0),Z(Q,te,de,"ℑ","\\Im",!0),Z(Q,te,de,"♠","\\spadesuit",!0),Z(Q,te,de,"§","\\S",!0),Z(ee,te,de,"§","\\S"),Z(Q,te,de,"¶","\\P",!0),Z(ee,te,de,"¶","\\P"),Z(Q,te,de,"†","\\dag"),Z(ee,te,de,"†","\\dag"),Z(ee,te,de,"†","\\textdagger"),Z(Q,te,de,"‡","\\ddag"),Z(ee,te,de,"‡","\\ddag"),Z(ee,te,de,"‡","\\textdaggerdbl"),Z(Q,te,ie,"⎱","\\rmoustache",!0),Z(Q,te,ce,"⎰","\\lmoustache",!0),Z(Q,te,ie,"⟯","\\rgroup",!0),Z(Q,te,ce,"⟮","\\lgroup",!0),Z(Q,te,oe,"∓","\\mp",!0),Z(Q,te,oe,"⊖","\\ominus",!0),Z(Q,te,oe,"⊎","\\uplus",!0),Z(Q,te,oe,"⊓","\\sqcap",!0),Z(Q,te,oe,"∗","\\ast"),Z(Q,te,oe,"⊔","\\sqcup",!0),Z(Q,te,oe,"◯","\\bigcirc",!0),Z(Q,te,oe,"∙","\\bullet"),Z(Q,te,oe,"‡","\\ddagger"),Z(Q,te,oe,"≀","\\wr",!0),Z(Q,te,oe,"⨿","\\amalg"),Z(Q,te,oe,"&","\\And"),Z(Q,te,pe,"⟵","\\longleftarrow",!0),Z(Q,te,pe,"⇐","\\Leftarrow",!0),Z(Q,te,pe,"⟸","\\Longleftarrow",!0),Z(Q,te,pe,"⟶","\\longrightarrow",!0),Z(Q,te,pe,"⇒","\\Rightarrow",!0),Z(Q,te,pe,"⟹","\\Longrightarrow",!0),Z(Q,te,pe,"↔","\\leftrightarrow",!0),Z(Q,te,pe,"⟷","\\longleftrightarrow",!0),Z(Q,te,pe,"⇔","\\Leftrightarrow",!0),Z(Q,te,pe,"⟺","\\Longleftrightarrow",!0),Z(Q,te,pe,"↦","\\mapsto",!0),Z(Q,te,pe,"⟼","\\longmapsto",!0),Z(Q,te,pe,"↗","\\nearrow",!0),Z(Q,te,pe,"↩","\\hookleftarrow",!0),Z(Q,te,pe,"↪","\\hookrightarrow",!0),Z(Q,te,pe,"↘","\\searrow",!0),Z(Q,te,pe,"↼","\\leftharpoonup",!0),Z(Q,te,pe,"⇀","\\rightharpoonup",!0),Z(Q,te,pe,"↙","\\swarrow",!0),Z(Q,te,pe,"↽","\\leftharpoondown",!0),Z(Q,te,pe,"⇁","\\rightharpoondown",!0),Z(Q,te,pe,"↖","\\nwarrow",!0),Z(Q,te,pe,"⇌","\\rightleftharpoons",!0),Z(Q,re,pe,"≮","\\nless",!0),Z(Q,re,pe,"","\\@nleqslant"),Z(Q,re,pe,"","\\@nleqq"),Z(Q,re,pe,"⪇","\\lneq",!0),Z(Q,re,pe,"≨","\\lneqq",!0),Z(Q,re,pe,"","\\@lvertneqq"),Z(Q,re,pe,"⋦","\\lnsim",!0),Z(Q,re,pe,"⪉","\\lnapprox",!0),Z(Q,re,pe,"⊀","\\nprec",!0),Z(Q,re,pe,"⋠","\\npreceq",!0),Z(Q,re,pe,"⋨","\\precnsim",!0),Z(Q,re,pe,"⪹","\\precnapprox",!0),Z(Q,re,pe,"≁","\\nsim",!0),Z(Q,re,pe,"","\\@nshortmid"),Z(Q,re,pe,"∤","\\nmid",!0),Z(Q,re,pe,"⊬","\\nvdash",!0),Z(Q,re,pe,"⊭","\\nvDash",!0),Z(Q,re,pe,"⋪","\\ntriangleleft"),Z(Q,re,pe,"⋬","\\ntrianglelefteq",!0),Z(Q,re,pe,"⊊","\\subsetneq",!0),Z(Q,re,pe,"","\\@varsubsetneq"),Z(Q,re,pe,"⫋","\\subsetneqq",!0),Z(Q,re,pe,"","\\@varsubsetneqq"),Z(Q,re,pe,"≯","\\ngtr",!0),Z(Q,re,pe,"","\\@ngeqslant"),Z(Q,re,pe,"","\\@ngeqq"),Z(Q,re,pe,"⪈","\\gneq",!0),Z(Q,re,pe,"≩","\\gneqq",!0),Z(Q,re,pe,"","\\@gvertneqq"),Z(Q,re,pe,"⋧","\\gnsim",!0),Z(Q,re,pe,"⪊","\\gnapprox",!0),Z(Q,re,pe,"⊁","\\nsucc",!0),Z(Q,re,pe,"⋡","\\nsucceq",!0),Z(Q,re,pe,"⋩","\\succnsim",!0),Z(Q,re,pe,"⪺","\\succnapprox",!0),Z(Q,re,pe,"≆","\\ncong",!0),Z(Q,re,pe,"","\\@nshortparallel"),Z(Q,re,pe,"∦","\\nparallel",!0),Z(Q,re,pe,"⊯","\\nVDash",!0),Z(Q,re,pe,"⋫","\\ntriangleright"),Z(Q,re,pe,"⋭","\\ntrianglerighteq",!0),Z(Q,re,pe,"","\\@nsupseteqq"),Z(Q,re,pe,"⊋","\\supsetneq",!0),Z(Q,re,pe,"","\\@varsupsetneq"),Z(Q,re,pe,"⫌","\\supsetneqq",!0),Z(Q,re,pe,"","\\@varsupsetneqq"),Z(Q,re,pe,"⊮","\\nVdash",!0),Z(Q,re,pe,"⪵","\\precneqq",!0),Z(Q,re,pe,"⪶","\\succneqq",!0),Z(Q,re,pe,"","\\@nsubseteqq"),Z(Q,re,oe,"⊴","\\unlhd"),Z(Q,re,oe,"⊵","\\unrhd"),Z(Q,re,pe,"↚","\\nleftarrow",!0),Z(Q,re,pe,"↛","\\nrightarrow",!0),Z(Q,re,pe,"⇍","\\nLeftarrow",!0),Z(Q,re,pe,"⇏","\\nRightarrow",!0),Z(Q,re,pe,"↮","\\nleftrightarrow",!0),Z(Q,re,pe,"⇎","\\nLeftrightarrow",!0),Z(Q,re,pe,"△","\\vartriangle"),Z(Q,re,de,"ℏ","\\hslash"),Z(Q,re,de,"▽","\\triangledown"),Z(Q,re,de,"◊","\\lozenge"),Z(Q,re,de,"Ⓢ","\\circledS"),Z(Q,re,de,"®","\\circledR"),Z(ee,re,de,"®","\\circledR"),Z(Q,re,de,"∡","\\measuredangle",!0),Z(Q,re,de,"∄","\\nexists"),Z(Q,re,de,"℧","\\mho"),Z(Q,re,de,"Ⅎ","\\Finv",!0),Z(Q,re,de,"⅁","\\Game",!0),Z(Q,re,de,"‵","\\backprime"),Z(Q,re,de,"▲","\\blacktriangle"),Z(Q,re,de,"▼","\\blacktriangledown"),Z(Q,re,de,"■","\\blacksquare"),Z(Q,re,de,"⧫","\\blacklozenge"),Z(Q,re,de,"★","\\bigstar"),Z(Q,re,de,"∢","\\sphericalangle",!0),Z(Q,re,de,"∁","\\complement",!0),Z(Q,re,de,"ð","\\eth",!0),Z(ee,te,de,"ð","ð"),Z(Q,re,de,"╱","\\diagup"),Z(Q,re,de,"╲","\\diagdown"),Z(Q,re,de,"□","\\square"),Z(Q,re,de,"□","\\Box"),Z(Q,re,de,"◊","\\Diamond"),Z(Q,re,de,"¥","\\yen",!0),Z(ee,re,de,"¥","\\yen",!0),Z(Q,re,de,"✓","\\checkmark",!0),Z(ee,re,de,"✓","\\checkmark"),Z(Q,re,de,"ℶ","\\beth",!0),Z(Q,re,de,"ℸ","\\daleth",!0),Z(Q,re,de,"ℷ","\\gimel",!0),Z(Q,re,de,"ϝ","\\digamma",!0),Z(Q,re,de,"ϰ","\\varkappa"),Z(Q,re,ce,"┌","\\@ulcorner",!0),Z(Q,re,ie,"┐","\\@urcorner",!0),Z(Q,re,ce,"└","\\@llcorner",!0),Z(Q,re,ie,"┘","\\@lrcorner",!0),Z(Q,re,pe,"≦","\\leqq",!0),Z(Q,re,pe,"⩽","\\leqslant",!0),Z(Q,re,pe,"⪕","\\eqslantless",!0),Z(Q,re,pe,"≲","\\lesssim",!0),Z(Q,re,pe,"⪅","\\lessapprox",!0),Z(Q,re,pe,"≊","\\approxeq",!0),Z(Q,re,oe,"⋖","\\lessdot"),Z(Q,re,pe,"⋘","\\lll",!0),Z(Q,re,pe,"≶","\\lessgtr",!0),Z(Q,re,pe,"⋚","\\lesseqgtr",!0),Z(Q,re,pe,"⪋","\\lesseqqgtr",!0),Z(Q,re,pe,"≑","\\doteqdot"),Z(Q,re,pe,"≓","\\risingdotseq",!0),Z(Q,re,pe,"≒","\\fallingdotseq",!0),Z(Q,re,pe,"∽","\\backsim",!0),Z(Q,re,pe,"⋍","\\backsimeq",!0),Z(Q,re,pe,"⫅","\\subseteqq",!0),Z(Q,re,pe,"⋐","\\Subset",!0),Z(Q,re,pe,"⊏","\\sqsubset",!0),Z(Q,re,pe,"≼","\\preccurlyeq",!0),Z(Q,re,pe,"⋞","\\curlyeqprec",!0),Z(Q,re,pe,"≾","\\precsim",!0),Z(Q,re,pe,"⪷","\\precapprox",!0),Z(Q,re,pe,"⊲","\\vartriangleleft"),Z(Q,re,pe,"⊴","\\trianglelefteq"),Z(Q,re,pe,"⊨","\\vDash",!0),Z(Q,re,pe,"⊪","\\Vvdash",!0),Z(Q,re,pe,"⌣","\\smallsmile"),Z(Q,re,pe,"⌢","\\smallfrown"),Z(Q,re,pe,"≏","\\bumpeq",!0),Z(Q,re,pe,"≎","\\Bumpeq",!0),Z(Q,re,pe,"≧","\\geqq",!0),Z(Q,re,pe,"⩾","\\geqslant",!0),Z(Q,re,pe,"⪖","\\eqslantgtr",!0),Z(Q,re,pe,"≳","\\gtrsim",!0),Z(Q,re,pe,"⪆","\\gtrapprox",!0),Z(Q,re,oe,"⋗","\\gtrdot"),Z(Q,re,pe,"⋙","\\ggg",!0),Z(Q,re,pe,"≷","\\gtrless",!0),Z(Q,re,pe,"⋛","\\gtreqless",!0),Z(Q,re,pe,"⪌","\\gtreqqless",!0),Z(Q,re,pe,"≖","\\eqcirc",!0),Z(Q,re,pe,"≗","\\circeq",!0),Z(Q,re,pe,"≜","\\triangleq",!0),Z(Q,re,pe,"∼","\\thicksim"),Z(Q,re,pe,"≈","\\thickapprox"),Z(Q,re,pe,"⫆","\\supseteqq",!0),Z(Q,re,pe,"⋑","\\Supset",!0),Z(Q,re,pe,"⊐","\\sqsupset",!0),Z(Q,re,pe,"≽","\\succcurlyeq",!0),Z(Q,re,pe,"⋟","\\curlyeqsucc",!0),Z(Q,re,pe,"≿","\\succsim",!0),Z(Q,re,pe,"⪸","\\succapprox",!0),Z(Q,re,pe,"⊳","\\vartriangleright"),Z(Q,re,pe,"⊵","\\trianglerighteq"),Z(Q,re,pe,"⊩","\\Vdash",!0),Z(Q,re,pe,"∣","\\shortmid"),Z(Q,re,pe,"∥","\\shortparallel"),Z(Q,re,pe,"≬","\\between",!0),Z(Q,re,pe,"⋔","\\pitchfork",!0),Z(Q,re,pe,"∝","\\varpropto"),Z(Q,re,pe,"◀","\\blacktriangleleft"),Z(Q,re,pe,"∴","\\therefore",!0),Z(Q,re,pe,"∍","\\backepsilon"),Z(Q,re,pe,"▶","\\blacktriangleright"),Z(Q,re,pe,"∵","\\because",!0),Z(Q,re,pe,"⋘","\\llless"),Z(Q,re,pe,"⋙","\\gggtr"),Z(Q,re,oe,"⊲","\\lhd"),Z(Q,re,oe,"⊳","\\rhd"),Z(Q,re,pe,"≂","\\eqsim",!0),Z(Q,te,pe,"⋈","\\Join"),Z(Q,re,pe,"≑","\\Doteq",!0),Z(Q,re,oe,"∔","\\dotplus",!0),Z(Q,re,oe,"∖","\\smallsetminus"),Z(Q,re,oe,"⋒","\\Cap",!0),Z(Q,re,oe,"⋓","\\Cup",!0),Z(Q,re,oe,"⩞","\\doublebarwedge",!0),Z(Q,re,oe,"⊟","\\boxminus",!0),Z(Q,re,oe,"⊞","\\boxplus",!0),Z(Q,re,oe,"⋇","\\divideontimes",!0),Z(Q,re,oe,"⋉","\\ltimes",!0),Z(Q,re,oe,"⋊","\\rtimes",!0),Z(Q,re,oe,"⋋","\\leftthreetimes",!0),Z(Q,re,oe,"⋌","\\rightthreetimes",!0),Z(Q,re,oe,"⋏","\\curlywedge",!0),Z(Q,re,oe,"⋎","\\curlyvee",!0),Z(Q,re,oe,"⊝","\\circleddash",!0),Z(Q,re,oe,"⊛","\\circledast",!0),Z(Q,re,oe,"⋅","\\centerdot"),Z(Q,re,oe,"⊺","\\intercal",!0),Z(Q,re,oe,"⋒","\\doublecap"),Z(Q,re,oe,"⋓","\\doublecup"),Z(Q,re,oe,"⊠","\\boxtimes",!0),Z(Q,re,pe,"⇢","\\dashrightarrow",!0),Z(Q,re,pe,"⇠","\\dashleftarrow",!0),Z(Q,re,pe,"⇇","\\leftleftarrows",!0),Z(Q,re,pe,"⇆","\\leftrightarrows",!0),Z(Q,re,pe,"⇚","\\Lleftarrow",!0),Z(Q,re,pe,"↞","\\twoheadleftarrow",!0),Z(Q,re,pe,"↢","\\leftarrowtail",!0),Z(Q,re,pe,"↫","\\looparrowleft",!0),Z(Q,re,pe,"⇋","\\leftrightharpoons",!0),Z(Q,re,pe,"↶","\\curvearrowleft",!0),Z(Q,re,pe,"↺","\\circlearrowleft",!0),Z(Q,re,pe,"↰","\\Lsh",!0),Z(Q,re,pe,"⇈","\\upuparrows",!0),Z(Q,re,pe,"↿","\\upharpoonleft",!0),Z(Q,re,pe,"⇃","\\downharpoonleft",!0),Z(Q,te,pe,"⊶","\\origof",!0),Z(Q,te,pe,"⊷","\\imageof",!0),Z(Q,re,pe,"⊸","\\multimap",!0),Z(Q,re,pe,"↭","\\leftrightsquigarrow",!0),Z(Q,re,pe,"⇉","\\rightrightarrows",!0),Z(Q,re,pe,"⇄","\\rightleftarrows",!0),Z(Q,re,pe,"↠","\\twoheadrightarrow",!0),Z(Q,re,pe,"↣","\\rightarrowtail",!0),Z(Q,re,pe,"↬","\\looparrowright",!0),Z(Q,re,pe,"↷","\\curvearrowright",!0),Z(Q,re,pe,"↻","\\circlearrowright",!0),Z(Q,re,pe,"↱","\\Rsh",!0),Z(Q,re,pe,"⇊","\\downdownarrows",!0),Z(Q,re,pe,"↾","\\upharpoonright",!0),Z(Q,re,pe,"⇂","\\downharpoonright",!0),Z(Q,re,pe,"⇝","\\rightsquigarrow",!0),Z(Q,re,pe,"⇝","\\leadsto"),Z(Q,re,pe,"⇛","\\Rrightarrow",!0),Z(Q,re,pe,"↾","\\restriction"),Z(Q,te,de,"‘","`"),Z(Q,te,de,"$","\\$"),Z(ee,te,de,"$","\\$"),Z(ee,te,de,"$","\\textdollar"),Z(Q,te,de,"%","\\%"),Z(ee,te,de,"%","\\%"),Z(Q,te,de,"_","\\_"),Z(ee,te,de,"_","\\_"),Z(ee,te,de,"_","\\textunderscore"),Z(Q,te,de,"∠","\\angle",!0),Z(Q,te,de,"∞","\\infty",!0),Z(Q,te,de,"′","\\prime"),Z(Q,te,de,"△","\\triangle"),Z(Q,te,de,"Γ","\\Gamma",!0),Z(Q,te,de,"Δ","\\Delta",!0),Z(Q,te,de,"Θ","\\Theta",!0),Z(Q,te,de,"Λ","\\Lambda",!0),Z(Q,te,de,"Ξ","\\Xi",!0),Z(Q,te,de,"Π","\\Pi",!0),Z(Q,te,de,"Σ","\\Sigma",!0),Z(Q,te,de,"Υ","\\Upsilon",!0),Z(Q,te,de,"Φ","\\Phi",!0),Z(Q,te,de,"Ψ","\\Psi",!0),Z(Q,te,de,"Ω","\\Omega",!0),Z(Q,te,de,"A","Α"),Z(Q,te,de,"B","Β"),Z(Q,te,de,"E","Ε"),Z(Q,te,de,"Z","Ζ"),Z(Q,te,de,"H","Η"),Z(Q,te,de,"I","Ι"),Z(Q,te,de,"K","Κ"),Z(Q,te,de,"M","Μ"),Z(Q,te,de,"N","Ν"),Z(Q,te,de,"O","Ο"),Z(Q,te,de,"P","Ρ"),Z(Q,te,de,"T","Τ"),Z(Q,te,de,"X","Χ"),Z(Q,te,de,"¬","\\neg",!0),Z(Q,te,de,"¬","\\lnot"),Z(Q,te,de,"⊤","\\top"),Z(Q,te,de,"⊥","\\bot"),Z(Q,te,de,"∅","\\emptyset"),Z(Q,re,de,"∅","\\varnothing"),Z(Q,te,se,"α","\\alpha",!0),Z(Q,te,se,"β","\\beta",!0),Z(Q,te,se,"γ","\\gamma",!0),Z(Q,te,se,"δ","\\delta",!0),Z(Q,te,se,"ϵ","\\epsilon",!0),Z(Q,te,se,"ζ","\\zeta",!0),Z(Q,te,se,"η","\\eta",!0),Z(Q,te,se,"θ","\\theta",!0),Z(Q,te,se,"ι","\\iota",!0),Z(Q,te,se,"κ","\\kappa",!0),Z(Q,te,se,"λ","\\lambda",!0),Z(Q,te,se,"μ","\\mu",!0),Z(Q,te,se,"ν","\\nu",!0),Z(Q,te,se,"ξ","\\xi",!0),Z(Q,te,se,"ο","\\omicron",!0),Z(Q,te,se,"π","\\pi",!0),Z(Q,te,se,"ρ","\\rho",!0),Z(Q,te,se,"σ","\\sigma",!0),Z(Q,te,se,"τ","\\tau",!0),Z(Q,te,se,"υ","\\upsilon",!0),Z(Q,te,se,"ϕ","\\phi",!0),Z(Q,te,se,"χ","\\chi",!0),Z(Q,te,se,"ψ","\\psi",!0),Z(Q,te,se,"ω","\\omega",!0),Z(Q,te,se,"ε","\\varepsilon",!0),Z(Q,te,se,"ϑ","\\vartheta",!0),Z(Q,te,se,"ϖ","\\varpi",!0),Z(Q,te,se,"ϱ","\\varrho",!0),Z(Q,te,se,"ς","\\varsigma",!0),Z(Q,te,se,"φ","\\varphi",!0),Z(Q,te,oe,"∗","*",!0),Z(Q,te,oe,"+","+"),Z(Q,te,oe,"−","-",!0),Z(Q,te,oe,"⋅","\\cdot",!0),Z(Q,te,oe,"∘","\\circ"),Z(Q,te,oe,"÷","\\div",!0),Z(Q,te,oe,"±","\\pm",!0),Z(Q,te,oe,"×","\\times",!0),Z(Q,te,oe,"∩","\\cap",!0),Z(Q,te,oe,"∪","\\cup",!0),Z(Q,te,oe,"∖","\\setminus"),Z(Q,te,oe,"∧","\\land"),Z(Q,te,oe,"∨","\\lor"),Z(Q,te,oe,"∧","\\wedge",!0),Z(Q,te,oe,"∨","\\vee",!0),Z(Q,te,de,"√","\\surd"),Z(Q,te,ce,"⟨","\\langle",!0),Z(Q,te,ce,"∣","\\lvert"),Z(Q,te,ce,"∥","\\lVert"),Z(Q,te,ie,"?","?"),Z(Q,te,ie,"!","!"),Z(Q,te,ie,"⟩","\\rangle",!0),Z(Q,te,ie,"∣","\\rvert"),Z(Q,te,ie,"∥","\\rVert"),Z(Q,te,pe,"=","="),Z(Q,te,pe,":",":"),Z(Q,te,pe,"≈","\\approx",!0),Z(Q,te,pe,"≅","\\cong",!0),Z(Q,te,pe,"≥","\\ge"),Z(Q,te,pe,"≥","\\geq",!0),Z(Q,te,pe,"←","\\gets"),Z(Q,te,pe,">","\\gt",!0),Z(Q,te,pe,"∈","\\in",!0),Z(Q,te,pe,"","\\@not"),Z(Q,te,pe,"⊂","\\subset",!0),Z(Q,te,pe,"⊃","\\supset",!0),Z(Q,te,pe,"⊆","\\subseteq",!0),Z(Q,te,pe,"⊇","\\supseteq",!0),Z(Q,re,pe,"⊈","\\nsubseteq",!0),Z(Q,re,pe,"⊉","\\nsupseteq",!0),Z(Q,te,pe,"⊨","\\models"),Z(Q,te,pe,"←","\\leftarrow",!0),Z(Q,te,pe,"≤","\\le"),Z(Q,te,pe,"≤","\\leq",!0),Z(Q,te,pe,"<","\\lt",!0),Z(Q,te,pe,"→","\\rightarrow",!0),Z(Q,te,pe,"→","\\to"),Z(Q,re,pe,"≱","\\ngeq",!0),Z(Q,re,pe,"≰","\\nleq",!0),Z(Q,te,ue," ","\\ "),Z(Q,te,ue," ","\\space"),Z(Q,te,ue," ","\\nobreakspace"),Z(ee,te,ue," ","\\ "),Z(ee,te,ue," "," "),Z(ee,te,ue," ","\\space"),Z(ee,te,ue," ","\\nobreakspace"),Z(Q,te,ue,null,"\\nobreak"),Z(Q,te,ue,null,"\\allowbreak"),Z(Q,te,he,",",","),Z(Q,te,he,";",";"),Z(Q,re,oe,"⊼","\\barwedge",!0),Z(Q,re,oe,"⊻","\\veebar",!0),Z(Q,te,oe,"⊙","\\odot",!0),Z(Q,te,oe,"⊕","\\oplus",!0),Z(Q,te,oe,"⊗","\\otimes",!0),Z(Q,te,de,"∂","\\partial",!0),Z(Q,te,oe,"⊘","\\oslash",!0),Z(Q,re,oe,"⊚","\\circledcirc",!0),Z(Q,re,oe,"⊡","\\boxdot",!0),Z(Q,te,oe,"△","\\bigtriangleup"),Z(Q,te,oe,"▽","\\bigtriangledown"),Z(Q,te,oe,"†","\\dagger"),Z(Q,te,oe,"⋄","\\diamond"),Z(Q,te,oe,"⋆","\\star"),Z(Q,te,oe,"◃","\\triangleleft"),Z(Q,te,oe,"▹","\\triangleright"),Z(Q,te,ce,"{","\\{"),Z(ee,te,de,"{","\\{"),Z(ee,te,de,"{","\\textbraceleft"),Z(Q,te,ie,"}","\\}"),Z(ee,te,de,"}","\\}"),Z(ee,te,de,"}","\\textbraceright"),Z(Q,te,ce,"{","\\lbrace"),Z(Q,te,ie,"}","\\rbrace"),Z(Q,te,ce,"[","\\lbrack",!0),Z(ee,te,de,"[","\\lbrack",!0),Z(Q,te,ie,"]","\\rbrack",!0),Z(ee,te,de,"]","\\rbrack",!0),Z(Q,te,ce,"(","\\lparen",!0),Z(Q,te,ie,")","\\rparen",!0),Z(ee,te,de,"<","\\textless",!0),Z(ee,te,de,">","\\textgreater",!0),Z(Q,te,ce,"⌊","\\lfloor",!0),Z(Q,te,ie,"⌋","\\rfloor",!0),Z(Q,te,ce,"⌈","\\lceil",!0),Z(Q,te,ie,"⌉","\\rceil",!0),Z(Q,te,de,"\\","\\backslash"),Z(Q,te,de,"∣","|"),Z(Q,te,de,"∣","\\vert"),Z(ee,te,de,"|","\\textbar",!0),Z(Q,te,de,"∥","\\|"),Z(Q,te,de,"∥","\\Vert"),Z(ee,te,de,"∥","\\textbardbl"),Z(ee,te,de,"~","\\textasciitilde"),Z(ee,te,de,"\\","\\textbackslash"),Z(ee,te,de,"^","\\textasciicircum"),Z(Q,te,pe,"↑","\\uparrow",!0),Z(Q,te,pe,"⇑","\\Uparrow",!0),Z(Q,te,pe,"↓","\\downarrow",!0),Z(Q,te,pe,"⇓","\\Downarrow",!0),Z(Q,te,pe,"↕","\\updownarrow",!0),Z(Q,te,pe,"⇕","\\Updownarrow",!0),Z(Q,te,le,"∐","\\coprod"),Z(Q,te,le,"⋁","\\bigvee"),Z(Q,te,le,"⋀","\\bigwedge"),Z(Q,te,le,"⨄","\\biguplus"),Z(Q,te,le,"⋂","\\bigcap"),Z(Q,te,le,"⋃","\\bigcup"),Z(Q,te,le,"∫","\\int"),Z(Q,te,le,"∫","\\intop"),Z(Q,te,le,"∬","\\iint"),Z(Q,te,le,"∭","\\iiint"),Z(Q,te,le,"∏","\\prod"),Z(Q,te,le,"∑","\\sum"),Z(Q,te,le,"⨂","\\bigotimes"),Z(Q,te,le,"⨁","\\bigoplus"),Z(Q,te,le,"⨀","\\bigodot"),Z(Q,te,le,"∮","\\oint"),Z(Q,te,le,"∯","\\oiint"),Z(Q,te,le,"∰","\\oiiint"),Z(Q,te,le,"⨆","\\bigsqcup"),Z(Q,te,le,"∫","\\smallint"),Z(ee,te,ae,"…","\\textellipsis"),Z(Q,te,ae,"…","\\mathellipsis"),Z(ee,te,ae,"…","\\ldots",!0),Z(Q,te,ae,"…","\\ldots",!0),Z(Q,te,ae,"⋯","\\@cdots",!0),Z(Q,te,ae,"⋱","\\ddots",!0),Z(Q,te,de,"⋮","\\varvdots"),Z(Q,te,ne,"ˊ","\\acute"),Z(Q,te,ne,"ˋ","\\grave"),Z(Q,te,ne,"¨","\\ddot"),Z(Q,te,ne,"~","\\tilde"),Z(Q,te,ne,"ˉ","\\bar"),Z(Q,te,ne,"˘","\\breve"),Z(Q,te,ne,"ˇ","\\check"),Z(Q,te,ne,"^","\\hat"),Z(Q,te,ne,"⃗","\\vec"),Z(Q,te,ne,"˙","\\dot"),Z(Q,te,ne,"˚","\\mathring"),Z(Q,te,se,"","\\@imath"),Z(Q,te,se,"","\\@jmath"),Z(Q,te,de,"ı","ı"),Z(Q,te,de,"ȷ","ȷ"),Z(ee,te,de,"ı","\\i",!0),Z(ee,te,de,"ȷ","\\j",!0),Z(ee,te,de,"ß","\\ss",!0),Z(ee,te,de,"æ","\\ae",!0),Z(ee,te,de,"œ","\\oe",!0),Z(ee,te,de,"ø","\\o",!0),Z(ee,te,de,"Æ","\\AE",!0),Z(ee,te,de,"Œ","\\OE",!0),Z(ee,te,de,"Ø","\\O",!0),Z(ee,te,ne,"ˊ","\\'"),Z(ee,te,ne,"ˋ","\\`"),Z(ee,te,ne,"ˆ","\\^"),Z(ee,te,ne,"˜","\\~"),Z(ee,te,ne,"ˉ","\\="),Z(ee,te,ne,"˘","\\u"),Z(ee,te,ne,"˙","\\."),Z(ee,te,ne,"¸","\\c"),Z(ee,te,ne,"˚","\\r"),Z(ee,te,ne,"ˇ","\\v"),Z(ee,te,ne,"¨",'\\"'),Z(ee,te,ne,"˝","\\H"),Z(ee,te,ne,"◯","\\textcircled");var fe={"--":!0,"---":!0,"``":!0,"''":!0};Z(ee,te,de,"–","--",!0),Z(ee,te,de,"–","\\textendash"),Z(ee,te,de,"—","---",!0),Z(ee,te,de,"—","\\textemdash"),Z(ee,te,de,"‘","`",!0),Z(ee,te,de,"‘","\\textquoteleft"),Z(ee,te,de,"’","'",!0),Z(ee,te,de,"’","\\textquoteright"),Z(ee,te,de,"“","``",!0),Z(ee,te,de,"“","\\textquotedblleft"),Z(ee,te,de,"”","''",!0),Z(ee,te,de,"”","\\textquotedblright"),Z(Q,te,de,"°","\\degree",!0),Z(ee,te,de,"°","\\degree"),Z(ee,te,de,"°","\\textdegree",!0),Z(Q,te,de,"£","\\pounds"),Z(Q,te,de,"£","\\mathsterling",!0),Z(ee,te,de,"£","\\pounds"),Z(ee,te,de,"£","\\textsterling",!0),Z(Q,re,de,"✠","\\maltese"),Z(ee,re,de,"✠","\\maltese");for(var me='0123456789/@."',ge=0;ge<me.length;ge++){var ve=me.charAt(ge);Z(Q,te,de,ve,ve)}for(var ye='0123456789!@*()-=+";:?/.,',be=0;be<ye.length;be++){var we=ye.charAt(be);Z(ee,te,de,we,we)}for(var xe="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",Se=0;Se<xe.length;Se++){var ke=xe.charAt(Se);Z(Q,te,se,ke,ke),Z(ee,te,de,ke,ke)}Z(Q,re,de,"C","ℂ"),Z(ee,re,de,"C","ℂ"),Z(Q,re,de,"H","ℍ"),Z(ee,re,de,"H","ℍ"),Z(Q,re,de,"N","ℕ"),Z(ee,re,de,"N","ℕ"),Z(Q,re,de,"P","ℙ"),Z(ee,re,de,"P","ℙ"),Z(Q,re,de,"Q","ℚ"),Z(ee,re,de,"Q","ℚ"),Z(Q,re,de,"R","ℝ"),Z(ee,re,de,"R","ℝ"),Z(Q,re,de,"Z","ℤ"),Z(ee,re,de,"Z","ℤ"),Z(Q,te,se,"h","ℎ"),Z(ee,te,se,"h","ℎ");for(var Me="",Te=0;Te<xe.length;Te++){var Ae=xe.charAt(Te);Z(Q,te,se,Ae,Me=String.fromCharCode(55349,56320+Te)),Z(ee,te,de,Ae,Me),Z(Q,te,se,Ae,Me=String.fromCharCode(55349,56372+Te)),Z(ee,te,de,Ae,Me),Z(Q,te,se,Ae,Me=String.fromCharCode(55349,56424+Te)),Z(ee,te,de,Ae,Me),Z(Q,te,se,Ae,Me=String.fromCharCode(55349,56580+Te)),Z(ee,te,de,Ae,Me),Z(Q,te,se,Ae,Me=String.fromCharCode(55349,56736+Te)),Z(ee,te,de,Ae,Me),Z(Q,te,se,Ae,Me=String.fromCharCode(55349,56788+Te)),Z(ee,te,de,Ae,Me),Z(Q,te,se,Ae,Me=String.fromCharCode(55349,56840+Te)),Z(ee,te,de,Ae,Me),Z(Q,te,se,Ae,Me=String.fromCharCode(55349,56944+Te)),Z(ee,te,de,Ae,Me),Te<26&&(Z(Q,te,se,Ae,Me=String.fromCharCode(55349,56632+Te)),Z(ee,te,de,Ae,Me),Z(Q,te,se,Ae,Me=String.fromCharCode(55349,56476+Te)),Z(ee,te,de,Ae,Me))}Z(Q,te,se,"k",Me=String.fromCharCode(55349,56668)),Z(ee,te,de,"k",Me);for(var Oe=0;Oe<10;Oe++){var Ce=Oe.toString();Z(Q,te,se,Ce,Me=String.fromCharCode(55349,57294+Oe)),Z(ee,te,de,Ce,Me),Z(Q,te,se,Ce,Me=String.fromCharCode(55349,57314+Oe)),Z(ee,te,de,Ce,Me),Z(Q,te,se,Ce,Me=String.fromCharCode(55349,57324+Oe)),Z(ee,te,de,Ce,Me),Z(Q,te,se,Ce,Me=String.fromCharCode(55349,57334+Oe)),Z(ee,te,de,Ce,Me)}for(var Ne="ÐÞþ",ze=0;ze<Ne.length;ze++){var Ee=Ne.charAt(ze);Z(Q,te,se,Ee,Ee),Z(ee,te,de,Ee,Ee)}var De=[["mathbf","textbf","Main-Bold"],["mathbf","textbf","Main-Bold"],["mathnormal","textit","Math-Italic"],["mathnormal","textit","Math-Italic"],["boldsymbol","boldsymbol","Main-BoldItalic"],["boldsymbol","boldsymbol","Main-BoldItalic"],["mathscr","textscr","Script-Regular"],["","",""],["","",""],["","",""],["mathfrak","textfrak","Fraktur-Regular"],["mathfrak","textfrak","Fraktur-Regular"],["mathbb","textbb","AMS-Regular"],["mathbb","textbb","AMS-Regular"],["","",""],["","",""],["mathsf","textsf","SansSerif-Regular"],["mathsf","textsf","SansSerif-Regular"],["mathboldsf","textboldsf","SansSerif-Bold"],["mathboldsf","textboldsf","SansSerif-Bold"],["mathitsf","textitsf","SansSerif-Italic"],["mathitsf","textitsf","SansSerif-Italic"],["","",""],["","",""],["mathtt","texttt","Typewriter-Regular"],["mathtt","texttt","Typewriter-Regular"]],Ie=[["mathbf","textbf","Main-Bold"],["","",""],["mathsf","textsf","SansSerif-Regular"],["mathboldsf","textboldsf","SansSerif-Bold"],["mathtt","texttt","Typewriter-Regular"]],Re=[[1,1,1],[2,1,1],[3,1,1],[4,2,1],[5,2,1],[6,3,1],[7,4,2],[8,6,3],[9,7,6],[10,8,7],[11,10,9]],Be=[.5,.6,.7,.8,.9,1,1.2,1.44,1.728,2.074,2.488],Pe=function(e,t){return t.size<2?e:Re[e-1][t.size-1]},_e=function(){function e(t){this.style=void 0,this.color=void 0,this.size=void 0,this.textSize=void 0,this.phantom=void 0,this.font=void 0,this.fontFamily=void 0,this.fontWeight=void 0,this.fontShape=void 0,this.sizeMultiplier=void 0,this.maxSize=void 0,this.minRuleThickness=void 0,this._fontMetrics=void 0,this.style=t.style,this.color=t.color,this.size=t.size||e.BASESIZE,this.textSize=t.textSize||this.size,this.phantom=!!t.phantom,this.font=t.font||"",this.fontFamily=t.fontFamily||"",this.fontWeight=t.fontWeight||"",this.fontShape=t.fontShape||"",this.sizeMultiplier=Be[this.size-1],this.maxSize=t.maxSize,this.minRuleThickness=t.minRuleThickness,this._fontMetrics=void 0}var t=e.prototype;return t.extend=function(t){var r={style:this.style,size:this.size,textSize:this.textSize,color:this.color,phantom:this.phantom,font:this.font,fontFamily:this.fontFamily,fontWeight:this.fontWeight,fontShape:this.fontShape,maxSize:this.maxSize,minRuleThickness:this.minRuleThickness};for(var n in t)t.hasOwnProperty(n)&&(r[n]=t[n]);return new e(r)},t.havingStyle=function(e){return this.style===e?this:this.extend({style:e,size:Pe(this.textSize,e)})},t.havingCrampedStyle=function(){return this.havingStyle(this.style.cramp())},t.havingSize=function(e){return this.size===e&&this.textSize===e?this:this.extend({style:this.style.text(),size:e,textSize:e,sizeMultiplier:Be[e-1]})},t.havingBaseStyle=function(t){t=t||this.style.text();var r=Pe(e.BASESIZE,t);return this.size===r&&this.textSize===e.BASESIZE&&this.style===t?this:this.extend({style:t,size:r})},t.havingBaseSizing=function(){var e;switch(this.style.id){case 4:case 5:e=3;break;case 6:case 7:e=1;break;default:e=6}return this.extend({style:this.style.text(),size:e})},t.withColor=function(e){return this.extend({color:e})},t.withPhantom=function(){return this.extend({phantom:!0})},t.withFont=function(e){return this.extend({font:e})},t.withTextFontFamily=function(e){return this.extend({fontFamily:e,font:""})},t.withTextFontWeight=function(e){return this.extend({fontWeight:e,font:""})},t.withTextFontShape=function(e){return this.extend({fontShape:e,font:""})},t.sizingClasses=function(e){return e.size!==this.size?["sizing","reset-size"+e.size,"size"+this.size]:[]},t.baseSizingClasses=function(){return this.size!==e.BASESIZE?["sizing","reset-size"+this.size,"size"+e.BASESIZE]:[]},t.fontMetrics=function(){return this._fontMetrics||(this._fontMetrics=function(e){var t;if(!G[t=e>=5?0:e>=3?1:2]){var r=G[t]={cssEmPerMu:j.quad[t]/18};for(var n in j)j.hasOwnProperty(n)&&(r[n]=j[n][t])}return G[t]}(this.size)),this._fontMetrics},t.getColor=function(){return this.phantom?"transparent":this.color},e}();_e.BASESIZE=6;var qe=_e,Le={pt:1,mm:7227/2540,cm:7227/254,in:72.27,bp:1.00375,pc:12,dd:1238/1157,cc:14856/1157,nd:685/642,nc:1370/107,sp:1/65536,px:1.00375},Fe={ex:!0,em:!0,mu:!0},Ve=function(e){return"string"!=typeof e&&(e=e.unit),e in Le||e in Fe||"ex"===e},He=function(e,t){var r;if(e.unit in Le)r=Le[e.unit]/t.fontMetrics().ptPerEm/t.sizeMultiplier;else if("mu"===e.unit)r=t.fontMetrics().cssEmPerMu;else{var o;if(o=t.style.isTight()?t.havingStyle(t.style.text()):t,"ex"===e.unit)r=o.fontMetrics().xHeight;else{if("em"!==e.unit)throw new n("Invalid unit: '"+e.unit+"'");r=o.fontMetrics().quad}o!==t&&(r*=o.sizeMultiplier/t.sizeMultiplier)}return Math.min(e.number*r,t.maxSize)},$e=function(e,t,r){return X[r][e]&&X[r][e].replace&&(e=X[r][e].replace),{value:e,metrics:K(e,t,r)}},je=function(e,t,r,n,o){var i,a=$e(e,t,r),s=a.metrics;if(e=a.value,s){var l=s.italic;("text"===r||n&&"mathit"===n.font)&&(l=0),i=new q(e,s.height,s.depth,l,s.skew,s.width,o)}else"undefined"!=typeof console&&console.warn("No character metrics for '"+e+"' in style '"+t+"' and mode '"+r+"'"),i=new q(e,0,0,0,0,0,o);if(n){i.maxFontSize=n.sizeMultiplier,n.style.isTight()&&i.classes.push("mtight");var c=n.getColor();c&&(i.style.color=c)}return i},We=function(e,t){if(z(e.classes)!==z(t.classes)||e.skew!==t.skew||e.maxFontSize!==t.maxFontSize)return!1;if(1===e.classes.length){var r=e.classes[0];if("mbin"===r||"mord"===r)return!1}for(var n in e.style)if(e.style.hasOwnProperty(n)&&e.style[n]!==t.style[n])return!1;for(var o in t.style)if(t.style.hasOwnProperty(o)&&e.style[o]!==t.style[o])return!1;return!0},Ke=function(e){for(var t=0,r=0,n=0,o=0;o<e.children.length;o++){var i=e.children[o];i.height>t&&(t=i.height),i.depth>r&&(r=i.depth),i.maxFontSize>n&&(n=i.maxFontSize)}e.height=t,e.depth=r,e.maxFontSize=n},Ge=function(e,t,r,n){var o=new R(e,t,r,n);return Ke(o),o},Ue=function(e,t,r,n){return new R(e,t,r,n)},Je=function(e){var t=new N(e);return Ke(t),t},Ye=function(e,t,r){var n="";switch(e){case"amsrm":n="AMS";break;case"textrm":n="Main";break;case"textsf":n="SansSerif";break;case"texttt":n="Typewriter";break;default:n=e}return n+"-"+("textbf"===t&&"textit"===r?"BoldItalic":"textbf"===t?"Bold":"textit"===t?"Italic":"Regular")},Xe={mathbf:{variant:"bold",fontName:"Main-Bold"},mathrm:{variant:"normal",fontName:"Main-Regular"},textit:{variant:"italic",fontName:"Main-Italic"},mathit:{variant:"italic",fontName:"Main-Italic"},mathnormal:{variant:"italic",fontName:"Math-Italic"},mathbb:{variant:"double-struck",fontName:"AMS-Regular"},mathcal:{variant:"script",fontName:"Caligraphic-Regular"},mathfrak:{variant:"fraktur",fontName:"Fraktur-Regular"},mathscr:{variant:"script",fontName:"Script-Regular"},mathsf:{variant:"sans-serif",fontName:"SansSerif-Regular"},mathtt:{variant:"monospace",fontName:"Typewriter-Regular"}},Ze={vec:["vec",.471,.714],oiintSize1:["oiintSize1",.957,.499],oiintSize2:["oiintSize2",1.472,.659],oiiintSize1:["oiiintSize1",1.304,.499],oiiintSize2:["oiiintSize2",1.98,.659]},Qe={fontMap:Xe,makeSymbol:je,mathsym:function(e,t,r,n){return void 0===n&&(n=[]),"boldsymbol"===r.font&&$e(e,"Main-Bold",t).metrics?je(e,"Main-Bold",t,r,n.concat(["mathbf"])):"\\"===e||"main"===X[t][e].font?je(e,"Main-Regular",t,r,n):je(e,"AMS-Regular",t,r,n.concat(["amsrm"]))},makeSpan:Ge,makeSvgSpan:Ue,makeLineSpan:function(e,t,r){var n=Ge([e],[],t);return n.height=Math.max(r||t.fontMetrics().defaultRuleThickness,t.minRuleThickness),n.style.borderBottomWidth=n.height+"em",n.maxFontSize=1,n},makeAnchor:function(e,t,r,n){var o=new B(e,t,r,n);return Ke(o),o},makeFragment:Je,wrapFragment:function(e,t){return e instanceof N?Ge([],[e],t):e},makeVList:function(e,t){for(var r=function(e){if("individualShift"===e.positionType){for(var t=e.children,r=[t[0]],n=-t[0].shift-t[0].elem.depth,o=n,i=1;i<t.length;i++){var a=-t[i].shift-o-t[i].elem.depth,s=a-(t[i-1].elem.height+t[i-1].elem.depth);o+=a,r.push({type:"kern",size:s}),r.push(t[i])}return{children:r,depth:n}}var l;if("top"===e.positionType){for(var c=e.positionData,h=0;h<e.children.length;h++){var p=e.children[h];c-="kern"===p.type?p.size:p.elem.height+p.elem.depth}l=c}else if("bottom"===e.positionType)l=-e.positionData;else{var u=e.children[0];if("elem"!==u.type)throw new Error('First child must have type "elem".');if("shift"===e.positionType)l=-u.elem.depth-e.positionData;else{if("firstBaseline"!==e.positionType)throw new Error("Invalid positionType "+e.positionType+".");l=-u.elem.depth}}return{children:e.children,depth:l}}(e),n=r.children,o=r.depth,i=0,a=0;a<n.length;a++){var s=n[a];if("elem"===s.type){var l=s.elem;i=Math.max(i,l.maxFontSize,l.height)}}i+=2;var c=Ge(["pstrut"],[]);c.style.height=i+"em";for(var h=[],p=o,u=o,d=o,f=0;f<n.length;f++){var m=n[f];if("kern"===m.type)d+=m.size;else{var g=m.elem,v=m.wrapperClasses||[],y=m.wrapperStyle||{},b=Ge(v,[c,g],void 0,y);b.style.top=-i-d-g.depth+"em",m.marginLeft&&(b.style.marginLeft=m.marginLeft),m.marginRight&&(b.style.marginRight=m.marginRight),h.push(b),d+=g.height+g.depth}p=Math.min(p,d),u=Math.max(u,d)}var w,x=Ge(["vlist"],h);if(x.style.height=u+"em",p<0){var S=Ge([],[]),k=Ge(["vlist"],[S]);k.style.height=-p+"em";var M=Ge(["vlist-s"],[new q("​")]);w=[Ge(["vlist-r"],[x,M]),Ge(["vlist-r"],[k])]}else w=[Ge(["vlist-r"],[x])];var T=Ge(["vlist-t"],w);return 2===w.length&&T.classes.push("vlist-t2"),T.height=u,T.depth=-p,T},makeOrd:function(e,t,r){var o=e.mode,i=e.text,a=["mord"],s="math"===o||"text"===o&&t.font,l=s?t.font:t.fontFamily;if(55349===i.charCodeAt(0)){var c=function(e,t){var r=1024*(e.charCodeAt(0)-55296)+(e.charCodeAt(1)-56320)+65536,o="math"===t?0:1;if(119808<=r&&r<120484){var i=Math.floor((r-119808)/26);return[De[i][2],De[i][o]]}if(120782<=r&&r<=120831){var a=Math.floor((r-120782)/10);return[Ie[a][2],Ie[a][o]]}if(120485===r||120486===r)return[De[0][2],De[0][o]];if(120486<r&&r<120782)return["",""];throw new n("Unsupported character: "+e)}(i,o),h=c[0],p=c[1];return je(i,h,o,t,a.concat(p))}if(l){var u,d;if("boldsymbol"===l){var f=function(e,t,r,n,o){return"textord"!==o&&$e(e,"Math-BoldItalic",t).metrics?{fontName:"Math-BoldItalic",fontClass:"boldsymbol"}:{fontName:"Main-Bold",fontClass:"mathbf"}}(i,o,0,0,r);u=f.fontName,d=[f.fontClass]}else s?(u=Xe[l].fontName,d=[l]):(u=Ye(l,t.fontWeight,t.fontShape),d=[l,t.fontWeight,t.fontShape]);if($e(i,u,o).metrics)return je(i,u,o,t,a.concat(d));if(fe.hasOwnProperty(i)&&"Typewriter"===u.substr(0,10)){for(var m=[],g=0;g<i.length;g++)m.push(je(i[g],u,o,t,a.concat(d)));return Je(m)}}if("mathord"===r)return je(i,"Math-Italic",o,t,a.concat(["mathnormal"]));if("textord"===r){var v=X[o][i]&&X[o][i].font;if("ams"===v){var y=Ye("amsrm",t.fontWeight,t.fontShape);return je(i,y,o,t,a.concat("amsrm",t.fontWeight,t.fontShape))}if("main"!==v&&v){var b=Ye(v,t.fontWeight,t.fontShape);return je(i,b,o,t,a.concat(b,t.fontWeight,t.fontShape))}var w=Ye("textrm",t.fontWeight,t.fontShape);return je(i,w,o,t,a.concat(t.fontWeight,t.fontShape))}throw new Error("unexpected type: "+r+" in makeOrd")},makeGlue:function(e,t){var r=Ge(["mspace"],[],t),n=He(e,t);return r.style.marginRight=n+"em",r},staticSvg:function(e,t){var r=Ze[e],n=r[0],o=r[1],i=r[2],a=new F(n),s=new L([a],{width:o+"em",height:i+"em",style:"width:"+o+"em",viewBox:"0 0 "+1e3*o+" "+1e3*i,preserveAspectRatio:"xMinYMin"}),l=Ue(["overlay"],[s],t);return l.height=i,l.style.height=i+"em",l.style.width=o+"em",l},svgData:Ze,tryCombineChars:function(e){for(var t=0;t<e.length-1;t++){var r=e[t],n=e[t+1];r instanceof q&&n instanceof q&&We(r,n)&&(r.text+=n.text,r.height=Math.max(r.height,n.height),r.depth=Math.max(r.depth,n.depth),r.italic=n.italic,e.splice(t+1,1),t--)}return e}},et={number:3,unit:"mu"},tt={number:4,unit:"mu"},rt={number:5,unit:"mu"},nt={mord:{mop:et,mbin:tt,mrel:rt,minner:et},mop:{mord:et,mop:et,mrel:rt,minner:et},mbin:{mord:tt,mop:tt,mopen:tt,minner:tt},mrel:{mord:rt,mop:rt,mopen:rt,minner:rt},mopen:{},mclose:{mop:et,mbin:tt,mrel:rt,minner:et},mpunct:{mord:et,mop:et,mrel:rt,mopen:et,mclose:et,mpunct:et,minner:et},minner:{mord:et,mop:et,mbin:tt,mrel:rt,mopen:et,mpunct:et,minner:et}},ot={mord:{mop:et},mop:{mord:et,mop:et},mbin:{},mrel:{},mopen:{},mclose:{mop:et},mpunct:{},minner:{mop:et}},it={},at={},st={};function lt(e){for(var t=e.type,r=e.names,n=e.props,o=e.handler,i=e.htmlBuilder,a=e.mathmlBuilder,s={type:t,numArgs:n.numArgs,argTypes:n.argTypes,allowedInArgument:!!n.allowedInArgument,allowedInText:!!n.allowedInText,allowedInMath:void 0===n.allowedInMath||n.allowedInMath,numOptionalArgs:n.numOptionalArgs||0,infix:!!n.infix,primitive:!!n.primitive,handler:o},l=0;l<r.length;++l)it[r[l]]=s;t&&(i&&(at[t]=i),a&&(st[t]=a))}function ct(e){lt({type:e.type,names:[],props:{numArgs:0},handler:function(){throw new Error("Should never be called.")},htmlBuilder:e.htmlBuilder,mathmlBuilder:e.mathmlBuilder})}var ht=function(e){return"ordgroup"===e.type&&1===e.body.length?e.body[0]:e},pt=function(e){return"ordgroup"===e.type?e.body:[e]},ut=Qe.makeSpan,dt=["leftmost","mbin","mopen","mrel","mop","mpunct"],ft=["rightmost","mrel","mclose","mpunct"],mt={display:M.DISPLAY,text:M.TEXT,script:M.SCRIPT,scriptscript:M.SCRIPTSCRIPT},gt={mord:"mord",mop:"mop",mbin:"mbin",mrel:"mrel",mopen:"mopen",mclose:"mclose",mpunct:"mpunct",minner:"minner"},vt=function(e,t,r,n){void 0===n&&(n=[null,null]);for(var o=[],i=0;i<e.length;i++){var a=kt(e[i],t);if(a instanceof N){var s=a.children;o.push.apply(o,s)}else o.push(a)}if(Qe.tryCombineChars(o),!r)return o;var c=t;if(1===e.length){var h=e[0];"sizing"===h.type?c=t.havingSize(h.size):"styling"===h.type&&(c=t.havingStyle(mt[h.style]))}var p=ut([n[0]||"leftmost"],[],t),u=ut([n[1]||"rightmost"],[],t),d="root"===r;return yt(o,(function(e,t){var r=t.classes[0],n=e.classes[0];"mbin"===r&&l(ft,n)?t.classes[0]="mord":"mbin"===n&&l(dt,r)&&(e.classes[0]="mord")}),{node:p},u,d),yt(o,(function(e,t){var r=xt(t),n=xt(e),o=r&&n?e.hasClass("mtight")?ot[r][n]:nt[r][n]:null;if(o)return Qe.makeGlue(o,c)}),{node:p},u,d),o},yt=function e(t,r,n,o,i){o&&t.push(o);for(var a=0;a<t.length;a++){var s=t[a],l=bt(s);if(l)e(l.children,r,n,null,i);else{var c=!s.hasClass("mspace");if(c){var h=r(s,n.node);h&&(n.insertAfter?n.insertAfter(h):(t.unshift(h),a++))}c?n.node=s:i&&s.hasClass("newline")&&(n.node=ut(["leftmost"])),n.insertAfter=function(e){return function(r){t.splice(e+1,0,r),a++}}(a)}}o&&t.pop()},bt=function(e){return e instanceof N||e instanceof B||e instanceof R&&e.hasClass("enclosing")?e:null},wt=function e(t,r){var n=bt(t);if(n){var o=n.children;if(o.length){if("right"===r)return e(o[o.length-1],"right");if("left"===r)return e(o[0],"left")}}return t},xt=function(e,t){return e?(t&&(e=wt(e,t)),gt[e.classes[0]]||null):null},St=function(e,t){var r=["nulldelimiter"].concat(e.baseSizingClasses());return ut(t.concat(r))},kt=function(e,t,r){if(!e)return ut();if(at[e.type]){var o=at[e.type](e,t);if(r&&t.size!==r.size){o=ut(t.sizingClasses(r),[o],t);var i=t.sizeMultiplier/r.sizeMultiplier;o.height*=i,o.depth*=i}return o}throw new n("Got group of unknown type: '"+e.type+"'")};function Mt(e,t){var r=ut(["base"],e,t),n=ut(["strut"]);return n.style.height=r.height+r.depth+"em",n.style.verticalAlign=-r.depth+"em",r.children.unshift(n),r}function Tt(e,t){var r=null;1===e.length&&"tag"===e[0].type&&(r=e[0].tag,e=e[0].body);var n,o=vt(e,t,"root");2===o.length&&o[1].hasClass("tag")&&(n=o.pop());for(var i,a=[],s=[],l=0;l<o.length;l++)if(s.push(o[l]),o[l].hasClass("mbin")||o[l].hasClass("mrel")||o[l].hasClass("allowbreak")){for(var c=!1;l<o.length-1&&o[l+1].hasClass("mspace")&&!o[l+1].hasClass("newline");)l++,s.push(o[l]),o[l].hasClass("nobreak")&&(c=!0);c||(a.push(Mt(s,t)),s=[])}else o[l].hasClass("newline")&&(s.pop(),s.length>0&&(a.push(Mt(s,t)),s=[]),a.push(o[l]));s.length>0&&a.push(Mt(s,t)),r?((i=Mt(vt(r,t,!0))).classes=["tag"],a.push(i)):n&&a.push(n);var h=ut(["katex-html"],a);if(h.setAttribute("aria-hidden","true"),i){var p=i.children[0];p.style.height=h.height+h.depth+"em",p.style.verticalAlign=-h.depth+"em"}return h}function At(e){return new N(e)}var Ot=function(){function e(e,t,r){this.type=void 0,this.attributes=void 0,this.children=void 0,this.classes=void 0,this.type=e,this.attributes={},this.children=t||[],this.classes=r||[]}var t=e.prototype;return t.setAttribute=function(e,t){this.attributes[e]=t},t.getAttribute=function(e){return this.attributes[e]},t.toNode=function(){var e=document.createElementNS("http://www.w3.org/1998/Math/MathML",this.type);for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&e.setAttribute(t,this.attributes[t]);this.classes.length>0&&(e.className=z(this.classes));for(var r=0;r<this.children.length;r++)e.appendChild(this.children[r].toNode());return e},t.toMarkup=function(){var e="<"+this.type;for(var t in this.attributes)Object.prototype.hasOwnProperty.call(this.attributes,t)&&(e+=" "+t+'="',e+=h(this.attributes[t]),e+='"');this.classes.length>0&&(e+=' class ="'+h(z(this.classes))+'"'),e+=">";for(var r=0;r<this.children.length;r++)e+=this.children[r].toMarkup();return e+"</"+this.type+">"},t.toText=function(){return this.children.map((function(e){return e.toText()})).join("")},e}(),Ct=function(){function e(e){this.text=void 0,this.text=e}var t=e.prototype;return t.toNode=function(){return document.createTextNode(this.text)},t.toMarkup=function(){return h(this.toText())},t.toText=function(){return this.text},e}(),Nt={MathNode:Ot,TextNode:Ct,SpaceNode:function(){function e(e){this.width=void 0,this.character=void 0,this.width=e,this.character=e>=.05555&&e<=.05556?" ":e>=.1666&&e<=.1667?" ":e>=.2222&&e<=.2223?" ":e>=.2777&&e<=.2778?"  ":e>=-.05556&&e<=-.05555?" ⁣":e>=-.1667&&e<=-.1666?" ⁣":e>=-.2223&&e<=-.2222?" ⁣":e>=-.2778&&e<=-.2777?" ⁣":null}var t=e.prototype;return t.toNode=function(){if(this.character)return document.createTextNode(this.character);var e=document.createElementNS("http://www.w3.org/1998/Math/MathML","mspace");return e.setAttribute("width",this.width+"em"),e},t.toMarkup=function(){return this.character?"<mtext>"+this.character+"</mtext>":'<mspace width="'+this.width+'em"/>'},t.toText=function(){return this.character?this.character:" "},e}(),newDocumentFragment:At},zt=function(e,t,r){return!X[t][e]||!X[t][e].replace||55349===e.charCodeAt(0)||fe.hasOwnProperty(e)&&r&&(r.fontFamily&&"tt"===r.fontFamily.substr(4,2)||r.font&&"tt"===r.font.substr(4,2))||(e=X[t][e].replace),new Nt.TextNode(e)},Et=function(e){return 1===e.length?e[0]:new Nt.MathNode("mrow",e)},Dt=function(e,t){if("texttt"===t.fontFamily)return"monospace";if("textsf"===t.fontFamily)return"textit"===t.fontShape&&"textbf"===t.fontWeight?"sans-serif-bold-italic":"textit"===t.fontShape?"sans-serif-italic":"textbf"===t.fontWeight?"bold-sans-serif":"sans-serif";if("textit"===t.fontShape&&"textbf"===t.fontWeight)return"bold-italic";if("textit"===t.fontShape)return"italic";if("textbf"===t.fontWeight)return"bold";var r=t.font;if(!r||"mathnormal"===r)return null;var n=e.mode;if("mathit"===r)return"italic";if("boldsymbol"===r)return"textord"===e.type?"bold":"bold-italic";if("mathbf"===r)return"bold";if("mathbb"===r)return"double-struck";if("mathfrak"===r)return"fraktur";if("mathscr"===r||"mathcal"===r)return"script";if("mathsf"===r)return"sans-serif";if("mathtt"===r)return"monospace";var o=e.text;return l(["\\imath","\\jmath"],o)?null:(X[n][o]&&X[n][o].replace&&(o=X[n][o].replace),K(o,Qe.fontMap[r].fontName,n)?Qe.fontMap[r].variant:null)},It=function(e,t,r){if(1===e.length){var n=Bt(e[0],t);return r&&n instanceof Ot&&"mo"===n.type&&(n.setAttribute("lspace","0em"),n.setAttribute("rspace","0em")),[n]}for(var o,i=[],a=0;a<e.length;a++){var s=Bt(e[a],t);if(s instanceof Ot&&o instanceof Ot){if("mtext"===s.type&&"mtext"===o.type&&s.getAttribute("mathvariant")===o.getAttribute("mathvariant")){var l;(l=o.children).push.apply(l,s.children);continue}if("mn"===s.type&&"mn"===o.type){var c;(c=o.children).push.apply(c,s.children);continue}if("mi"===s.type&&1===s.children.length&&"mn"===o.type){var h=s.children[0];if(h instanceof Ct&&"."===h.text){var p;(p=o.children).push.apply(p,s.children);continue}}else if("mi"===o.type&&1===o.children.length){var u=o.children[0];if(u instanceof Ct&&"̸"===u.text&&("mo"===s.type||"mi"===s.type||"mn"===s.type)){var d=s.children[0];d instanceof Ct&&d.text.length>0&&(d.text=d.text.slice(0,1)+"̸"+d.text.slice(1),i.pop())}}}i.push(s),o=s}return i},Rt=function(e,t,r){return Et(It(e,t,r))},Bt=function(e,t){if(!e)return new Nt.MathNode("mrow");if(st[e.type])return st[e.type](e,t);throw new n("Got group of unknown type: '"+e.type+"'")};function Pt(e,t,r,n,o){var i,a=It(e,r);i=1===a.length&&a[0]instanceof Ot&&l(["mrow","mtable"],a[0].type)?a[0]:new Nt.MathNode("mrow",a);var s=new Nt.MathNode("annotation",[new Nt.TextNode(t)]);s.setAttribute("encoding","application/x-tex");var c=new Nt.MathNode("semantics",[i,s]),h=new Nt.MathNode("math",[c]);return h.setAttribute("xmlns","http://www.w3.org/1998/Math/MathML"),n&&h.setAttribute("display","block"),Qe.makeSpan([o?"katex":"katex-mathml"],[h])}var _t=function(e){return new qe({style:e.displayMode?M.DISPLAY:M.TEXT,maxSize:e.maxSize,minRuleThickness:e.minRuleThickness})},qt=function(e,t){if(t.displayMode){var r=["katex-display"];t.leqno&&r.push("leqno"),t.fleqn&&r.push("fleqn"),e=Qe.makeSpan(r,[e])}return e},Lt={widehat:"^",widecheck:"ˇ",widetilde:"~",utilde:"~",overleftarrow:"←",underleftarrow:"←",xleftarrow:"←",overrightarrow:"→",underrightarrow:"→",xrightarrow:"→",underbrace:"⏟",overbrace:"⏞",overgroup:"⏠",undergroup:"⏡",overleftrightarrow:"↔",underleftrightarrow:"↔",xleftrightarrow:"↔",Overrightarrow:"⇒",xRightarrow:"⇒",overleftharpoon:"↼",xleftharpoonup:"↼",overrightharpoon:"⇀",xrightharpoonup:"⇀",xLeftarrow:"⇐",xLeftrightarrow:"⇔",xhookleftarrow:"↩",xhookrightarrow:"↪",xmapsto:"↦",xrightharpoondown:"⇁",xleftharpoondown:"↽",xrightleftharpoons:"⇌",xleftrightharpoons:"⇋",xtwoheadleftarrow:"↞",xtwoheadrightarrow:"↠",xlongequal:"=",xtofrom:"⇄",xrightleftarrows:"⇄",xrightequilibrium:"⇌",xleftequilibrium:"⇋","\\cdrightarrow":"→","\\cdleftarrow":"←","\\cdlongequal":"="},Ft={overrightarrow:[["rightarrow"],.888,522,"xMaxYMin"],overleftarrow:[["leftarrow"],.888,522,"xMinYMin"],underrightarrow:[["rightarrow"],.888,522,"xMaxYMin"],underleftarrow:[["leftarrow"],.888,522,"xMinYMin"],xrightarrow:[["rightarrow"],1.469,522,"xMaxYMin"],"\\cdrightarrow":[["rightarrow"],3,522,"xMaxYMin"],xleftarrow:[["leftarrow"],1.469,522,"xMinYMin"],"\\cdleftarrow":[["leftarrow"],3,522,"xMinYMin"],Overrightarrow:[["doublerightarrow"],.888,560,"xMaxYMin"],xRightarrow:[["doublerightarrow"],1.526,560,"xMaxYMin"],xLeftarrow:[["doubleleftarrow"],1.526,560,"xMinYMin"],overleftharpoon:[["leftharpoon"],.888,522,"xMinYMin"],xleftharpoonup:[["leftharpoon"],.888,522,"xMinYMin"],xleftharpoondown:[["leftharpoondown"],.888,522,"xMinYMin"],overrightharpoon:[["rightharpoon"],.888,522,"xMaxYMin"],xrightharpoonup:[["rightharpoon"],.888,522,"xMaxYMin"],xrightharpoondown:[["rightharpoondown"],.888,522,"xMaxYMin"],xlongequal:[["longequal"],.888,334,"xMinYMin"],"\\cdlongequal":[["longequal"],3,334,"xMinYMin"],xtwoheadleftarrow:[["twoheadleftarrow"],.888,334,"xMinYMin"],xtwoheadrightarrow:[["twoheadrightarrow"],.888,334,"xMaxYMin"],overleftrightarrow:[["leftarrow","rightarrow"],.888,522],overbrace:[["leftbrace","midbrace","rightbrace"],1.6,548],underbrace:[["leftbraceunder","midbraceunder","rightbraceunder"],1.6,548],underleftrightarrow:[["leftarrow","rightarrow"],.888,522],xleftrightarrow:[["leftarrow","rightarrow"],1.75,522],xLeftrightarrow:[["doubleleftarrow","doublerightarrow"],1.75,560],xrightleftharpoons:[["leftharpoondownplus","rightharpoonplus"],1.75,716],xleftrightharpoons:[["leftharpoonplus","rightharpoondownplus"],1.75,716],xhookleftarrow:[["leftarrow","righthook"],1.08,522],xhookrightarrow:[["lefthook","rightarrow"],1.08,522],overlinesegment:[["leftlinesegment","rightlinesegment"],.888,522],underlinesegment:[["leftlinesegment","rightlinesegment"],.888,522],overgroup:[["leftgroup","rightgroup"],.888,342],undergroup:[["leftgroupunder","rightgroupunder"],.888,342],xmapsto:[["leftmapsto","rightarrow"],1.5,522],xtofrom:[["leftToFrom","rightToFrom"],1.75,528],xrightleftarrows:[["baraboveleftarrow","rightarrowabovebar"],1.75,901],xrightequilibrium:[["baraboveshortleftharpoon","rightharpoonaboveshortbar"],1.75,716],xleftequilibrium:[["shortbaraboveleftharpoon","shortrightharpoonabovebar"],1.75,716]},Vt=function(e){var t=new Nt.MathNode("mo",[new Nt.TextNode(Lt[e.replace(/^\\/,"")])]);return t.setAttribute("stretchy","true"),t},Ht=function(e,t){var r=function(){var r=4e5,n=e.label.substr(1);if(l(["widehat","widecheck","widetilde","utilde"],n)){var o,i,a,s="ordgroup"===(f=e.base).type?f.body.length:1;if(s>5)"widehat"===n||"widecheck"===n?(o=420,r=2364,a=.42,i=n+"4"):(o=312,r=2340,a=.34,i="tilde4");else{var c=[1,1,2,2,3,3][s];"widehat"===n||"widecheck"===n?(r=[0,1062,2364,2364,2364][c],o=[0,239,300,360,420][c],a=[0,.24,.3,.3,.36,.42][c],i=n+c):(r=[0,600,1033,2339,2340][c],o=[0,260,286,306,312][c],a=[0,.26,.286,.3,.306,.34][c],i="tilde"+c)}var h=new F(i),p=new L([h],{width:"100%",height:a+"em",viewBox:"0 0 "+r+" "+o,preserveAspectRatio:"none"});return{span:Qe.makeSvgSpan([],[p],t),minWidth:0,height:a}}var u,d,f,m=[],g=Ft[n],v=g[0],y=g[1],b=g[2],w=b/1e3,x=v.length;if(1===x)u=["hide-tail"],d=[g[3]];else if(2===x)u=["halfarrow-left","halfarrow-right"],d=["xMinYMin","xMaxYMin"];else{if(3!==x)throw new Error("Correct katexImagesData or update code here to support\n                    "+x+" children.");u=["brace-left","brace-center","brace-right"],d=["xMinYMin","xMidYMin","xMaxYMin"]}for(var S=0;S<x;S++){var k=new F(v[S]),M=new L([k],{width:"400em",height:w+"em",viewBox:"0 0 "+r+" "+b,preserveAspectRatio:d[S]+" slice"}),T=Qe.makeSvgSpan([u[S]],[M],t);if(1===x)return{span:T,minWidth:y,height:w};T.style.height=w+"em",m.push(T)}return{span:Qe.makeSpan(["stretchy"],m,t),minWidth:y,height:w}}(),n=r.span,o=r.minWidth,i=r.height;return n.height=i,n.style.height=i+"em",o>0&&(n.style.minWidth=o+"em"),n};function $t(e,t){if(!e||e.type!==t)throw new Error("Expected node of type "+t+", but got "+(e?"node of type "+e.type:String(e)));return e}function jt(e){var t=Wt(e);if(!t)throw new Error("Expected node of symbol group type, but got "+(e?"node of type "+e.type:String(e)));return t}function Wt(e){return e&&("atom"===e.type||J.hasOwnProperty(e.type))?e:null}var Kt=function(e,t){var r,n,o;e&&"supsub"===e.type?(r=(n=$t(e.base,"accent")).base,e.base=r,o=function(e){if(e instanceof R)return e;throw new Error("Expected span<HtmlDomNode> but got "+String(e)+".")}(kt(e,t)),e.base=n):r=(n=$t(e,"accent")).base;var i=kt(r,t.havingCrampedStyle()),a=0;if(n.isShifty&&d(r)){var s=u(r);a=H(kt(s,t.havingCrampedStyle())).skew}var l,c="\\c"===n.label,h=c?i.height+i.depth:Math.min(i.height,t.fontMetrics().xHeight);if(n.isStretchy)l=Ht(n,t),l=Qe.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:i},{type:"elem",elem:l,wrapperClasses:["svg-align"],wrapperStyle:a>0?{width:"calc(100% - "+2*a+"em)",marginLeft:2*a+"em"}:void 0}]},t);else{var p,f;"\\vec"===n.label?(p=Qe.staticSvg("vec",t),f=Qe.svgData.vec[1]):((p=H(p=Qe.makeOrd({mode:n.mode,text:n.label},t,"textord"))).italic=0,f=p.width,c&&(h+=p.depth)),l=Qe.makeSpan(["accent-body"],[p]);var m="\\textcircled"===n.label;m&&(l.classes.push("accent-full"),h=i.height);var g=a;m||(g-=f/2),l.style.left=g+"em","\\textcircled"===n.label&&(l.style.top=".2em"),l=Qe.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:i},{type:"kern",size:-h},{type:"elem",elem:l}]},t)}var v=Qe.makeSpan(["mord","accent"],[l],t);return o?(o.children[0]=v,o.height=Math.max(v.height,o.height),o.classes[0]="mord",o):v},Gt=function(e,t){var r=e.isStretchy?Vt(e.label):new Nt.MathNode("mo",[zt(e.label,e.mode)]),n=new Nt.MathNode("mover",[Bt(e.base,t),r]);return n.setAttribute("accent","true"),n},Ut=new RegExp(["\\acute","\\grave","\\ddot","\\tilde","\\bar","\\breve","\\check","\\hat","\\vec","\\dot","\\mathring"].map((function(e){return"\\"+e})).join("|"));lt({type:"accent",names:["\\acute","\\grave","\\ddot","\\tilde","\\bar","\\breve","\\check","\\hat","\\vec","\\dot","\\mathring","\\widecheck","\\widehat","\\widetilde","\\overrightarrow","\\overleftarrow","\\Overrightarrow","\\overleftrightarrow","\\overgroup","\\overlinesegment","\\overleftharpoon","\\overrightharpoon"],props:{numArgs:1},handler:function(e,t){var r=ht(t[0]),n=!Ut.test(e.funcName),o=!n||"\\widehat"===e.funcName||"\\widetilde"===e.funcName||"\\widecheck"===e.funcName;return{type:"accent",mode:e.parser.mode,label:e.funcName,isStretchy:n,isShifty:o,base:r}},htmlBuilder:Kt,mathmlBuilder:Gt}),lt({type:"accent",names:["\\'","\\`","\\^","\\~","\\=","\\u","\\.",'\\"',"\\c","\\r","\\H","\\v","\\textcircled"],props:{numArgs:1,allowedInText:!0,allowedInMath:!0,argTypes:["primitive"]},handler:function(e,t){var r=t[0],n=e.parser.mode;return"math"===n&&(e.parser.settings.reportNonstrict("mathVsTextAccents","LaTeX's accent "+e.funcName+" works only in text mode"),n="text"),{type:"accent",mode:n,label:e.funcName,isStretchy:!1,isShifty:!0,base:r}},htmlBuilder:Kt,mathmlBuilder:Gt}),lt({type:"accentUnder",names:["\\underleftarrow","\\underrightarrow","\\underleftrightarrow","\\undergroup","\\underlinesegment","\\utilde"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName,o=t[0];return{type:"accentUnder",mode:r.mode,label:n,base:o}},htmlBuilder:function(e,t){var r=kt(e.base,t),n=Ht(e,t),o="\\utilde"===e.label?.12:0,i=Qe.makeVList({positionType:"top",positionData:r.height,children:[{type:"elem",elem:n,wrapperClasses:["svg-align"]},{type:"kern",size:o},{type:"elem",elem:r}]},t);return Qe.makeSpan(["mord","accentunder"],[i],t)},mathmlBuilder:function(e,t){var r=Vt(e.label),n=new Nt.MathNode("munder",[Bt(e.base,t),r]);return n.setAttribute("accentunder","true"),n}});var Jt=function(e){var t=new Nt.MathNode("mpadded",e?[e]:[]);return t.setAttribute("width","+0.6em"),t.setAttribute("lspace","0.3em"),t};lt({type:"xArrow",names:["\\xleftarrow","\\xrightarrow","\\xLeftarrow","\\xRightarrow","\\xleftrightarrow","\\xLeftrightarrow","\\xhookleftarrow","\\xhookrightarrow","\\xmapsto","\\xrightharpoondown","\\xrightharpoonup","\\xleftharpoondown","\\xleftharpoonup","\\xrightleftharpoons","\\xleftrightharpoons","\\xlongequal","\\xtwoheadrightarrow","\\xtwoheadleftarrow","\\xtofrom","\\xrightleftarrows","\\xrightequilibrium","\\xleftequilibrium","\\\\cdrightarrow","\\\\cdleftarrow","\\\\cdlongequal"],props:{numArgs:1,numOptionalArgs:1},handler:function(e,t,r){var n=e.parser,o=e.funcName;return{type:"xArrow",mode:n.mode,label:o,body:t[0],below:r[0]}},htmlBuilder:function(e,t){var r,n=t.style,o=t.havingStyle(n.sup()),i=Qe.wrapFragment(kt(e.body,o,t),t),a="\\x"===e.label.slice(0,2)?"x":"cd";i.classes.push(a+"-arrow-pad"),e.below&&(o=t.havingStyle(n.sub()),(r=Qe.wrapFragment(kt(e.below,o,t),t)).classes.push(a+"-arrow-pad"));var s,l=Ht(e,t),c=-t.fontMetrics().axisHeight+.5*l.height,h=-t.fontMetrics().axisHeight-.5*l.height-.111;if((i.depth>.25||"\\xleftequilibrium"===e.label)&&(h-=i.depth),r){var p=-t.fontMetrics().axisHeight+r.height+.5*l.height+.111;s=Qe.makeVList({positionType:"individualShift",children:[{type:"elem",elem:i,shift:h},{type:"elem",elem:l,shift:c},{type:"elem",elem:r,shift:p}]},t)}else s=Qe.makeVList({positionType:"individualShift",children:[{type:"elem",elem:i,shift:h},{type:"elem",elem:l,shift:c}]},t);return s.children[0].children[0].children[1].classes.push("svg-align"),Qe.makeSpan(["mrel","x-arrow"],[s],t)},mathmlBuilder:function(e,t){var r,n=Vt(e.label);if(n.setAttribute("minsize","x"===e.label.charAt(0)?"1.75em":"3.0em"),e.body){var o=Jt(Bt(e.body,t));if(e.below){var i=Jt(Bt(e.below,t));r=new Nt.MathNode("munderover",[n,i,o])}else r=new Nt.MathNode("mover",[n,o])}else if(e.below){var a=Jt(Bt(e.below,t));r=new Nt.MathNode("munder",[n,a])}else r=Jt(),r=new Nt.MathNode("mover",[n,r]);return r}});var Yt={">":"\\\\cdrightarrow","<":"\\\\cdleftarrow","=":"\\\\cdlongequal",A:"\\uparrow",V:"\\downarrow","|":"\\Vert",".":"no arrow"},Xt=function(e){return"textord"===e.type&&"@"===e.text};function Zt(e,t,r){var n=Yt[e];switch(n){case"\\\\cdrightarrow":case"\\\\cdleftarrow":return r.callFunction(n,[t[0]],[t[1]]);case"\\uparrow":case"\\downarrow":var o={type:"atom",text:n,mode:"math",family:"rel"},i={type:"ordgroup",mode:"math",body:[r.callFunction("\\\\cdleft",[t[0]],[]),r.callFunction("\\Big",[o],[]),r.callFunction("\\\\cdright",[t[1]],[])]};return r.callFunction("\\\\cdparent",[i],[]);case"\\\\cdlongequal":return r.callFunction("\\\\cdlongequal",[],[]);case"\\Vert":return r.callFunction("\\Big",[{type:"textord",text:"\\Vert",mode:"math"}],[]);default:return{type:"textord",text:" ",mode:"math"}}}lt({type:"cdlabel",names:["\\\\cdleft","\\\\cdright"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName;return{type:"cdlabel",mode:r.mode,side:n.slice(4),label:t[0]}},htmlBuilder:function(e,t){var r=t.havingStyle(t.style.sup()),n=Qe.wrapFragment(kt(e.label,r,t),t);return n.classes.push("cd-label-"+e.side),n.style.bottom=.8-n.depth+"em",n.height=0,n.depth=0,n},mathmlBuilder:function(e,t){var r=new Nt.MathNode("mrow",[Bt(e.label,t)]);return(r=new Nt.MathNode("mpadded",[r])).setAttribute("width","0"),"left"===e.side&&r.setAttribute("lspace","-1width"),r.setAttribute("voffset","0.7em"),(r=new Nt.MathNode("mstyle",[r])).setAttribute("displaystyle","false"),r.setAttribute("scriptlevel","1"),r}}),lt({type:"cdlabelparent",names:["\\\\cdparent"],props:{numArgs:1},handler:function(e,t){return{type:"cdlabelparent",mode:e.parser.mode,fragment:t[0]}},htmlBuilder:function(e,t){var r=Qe.wrapFragment(kt(e.fragment,t),t);return r.classes.push("cd-vert-arrow"),r},mathmlBuilder:function(e,t){return new Nt.MathNode("mrow",[Bt(e.fragment,t)])}}),lt({type:"textord",names:["\\@char"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){for(var r=e.parser,o=$t(t[0],"ordgroup").body,i="",a=0;a<o.length;a++)i+=$t(o[a],"textord").text;var s,l=parseInt(i);if(isNaN(l))throw new n("\\@char has non-numeric argument "+i);if(l<0||l>=1114111)throw new n("\\@char with invalid code point "+i);return l<=65535?s=String.fromCharCode(l):(l-=65536,s=String.fromCharCode(55296+(l>>10),56320+(1023&l))),{type:"textord",mode:r.mode,text:s}}});var Qt=function(e,t){var r=vt(e.body,t.withColor(e.color),!1);return Qe.makeFragment(r)},er=function(e,t){var r=It(e.body,t.withColor(e.color)),n=new Nt.MathNode("mstyle",r);return n.setAttribute("mathcolor",e.color),n};lt({type:"color",names:["\\textcolor"],props:{numArgs:2,allowedInText:!0,argTypes:["color","original"]},handler:function(e,t){var r=e.parser,n=$t(t[0],"color-token").color,o=t[1];return{type:"color",mode:r.mode,color:n,body:pt(o)}},htmlBuilder:Qt,mathmlBuilder:er}),lt({type:"color",names:["\\color"],props:{numArgs:1,allowedInText:!0,argTypes:["color"]},handler:function(e,t){var r=e.parser,n=e.breakOnTokenText,o=$t(t[0],"color-token").color;r.gullet.macros.set("\\current@color",o);var i=r.parseExpression(!0,n);return{type:"color",mode:r.mode,color:o,body:i}},htmlBuilder:Qt,mathmlBuilder:er}),lt({type:"cr",names:["\\\\"],props:{numArgs:0,numOptionalArgs:1,argTypes:["size"],allowedInText:!0},handler:function(e,t,r){var n=e.parser,o=r[0],i=!n.settings.displayMode||!n.settings.useStrictBehavior("newLineInDisplayMode","In LaTeX, \\\\ or \\newline does nothing in display mode");return{type:"cr",mode:n.mode,newLine:i,size:o&&$t(o,"size").value}},htmlBuilder:function(e,t){var r=Qe.makeSpan(["mspace"],[],t);return e.newLine&&(r.classes.push("newline"),e.size&&(r.style.marginTop=He(e.size,t)+"em")),r},mathmlBuilder:function(e,t){var r=new Nt.MathNode("mspace");return e.newLine&&(r.setAttribute("linebreak","newline"),e.size&&r.setAttribute("height",He(e.size,t)+"em")),r}});var tr={"\\global":"\\global","\\long":"\\\\globallong","\\\\globallong":"\\\\globallong","\\def":"\\gdef","\\gdef":"\\gdef","\\edef":"\\xdef","\\xdef":"\\xdef","\\let":"\\\\globallet","\\futurelet":"\\\\globalfuture"},rr=function(e){var t=e.text;if(/^(?:[\\{}$&#^_]|EOF)$/.test(t))throw new n("Expected a control sequence",e);return t},nr=function(e,t,r,n){var o=e.gullet.macros.get(r.text);null==o&&(r.noexpand=!0,o={tokens:[r],numArgs:0,unexpandable:!e.gullet.isExpandable(r.text)}),e.gullet.macros.set(t,o,n)};lt({type:"internal",names:["\\global","\\long","\\\\globallong"],props:{numArgs:0,allowedInText:!0},handler:function(e){var t=e.parser,r=e.funcName;t.consumeSpaces();var o=t.fetch();if(tr[o.text])return"\\global"!==r&&"\\\\globallong"!==r||(o.text=tr[o.text]),$t(t.parseFunction(),"internal");throw new n("Invalid token after macro prefix",o)}}),lt({type:"internal",names:["\\def","\\gdef","\\edef","\\xdef"],props:{numArgs:0,allowedInText:!0,primitive:!0},handler:function(e){var t=e.parser,r=e.funcName,o=t.gullet.popToken(),i=o.text;if(/^(?:[\\{}$&#^_]|EOF)$/.test(i))throw new n("Expected a control sequence",o);for(var a,s=0,l=[[]];"{"!==t.gullet.future().text;)if("#"===(o=t.gullet.popToken()).text){if("{"===t.gullet.future().text){a=t.gullet.future(),l[s].push("{");break}if(o=t.gullet.popToken(),!/^[1-9]$/.test(o.text))throw new n('Invalid argument number "'+o.text+'"');if(parseInt(o.text)!==s+1)throw new n('Argument number "'+o.text+'" out of order');s++,l.push([])}else{if("EOF"===o.text)throw new n("Expected a macro definition");l[s].push(o.text)}var c=t.gullet.consumeArg().tokens;return a&&c.unshift(a),"\\edef"!==r&&"\\xdef"!==r||(c=t.gullet.expandTokens(c)).reverse(),t.gullet.macros.set(i,{tokens:c,numArgs:s,delimiters:l},r===tr[r]),{type:"internal",mode:t.mode}}}),lt({type:"internal",names:["\\let","\\\\globallet"],props:{numArgs:0,allowedInText:!0,primitive:!0},handler:function(e){var t=e.parser,r=e.funcName,n=rr(t.gullet.popToken());t.gullet.consumeSpaces();var o=function(e){var t=e.gullet.popToken();return"="===t.text&&" "===(t=e.gullet.popToken()).text&&(t=e.gullet.popToken()),t}(t);return nr(t,n,o,"\\\\globallet"===r),{type:"internal",mode:t.mode}}}),lt({type:"internal",names:["\\futurelet","\\\\globalfuture"],props:{numArgs:0,allowedInText:!0,primitive:!0},handler:function(e){var t=e.parser,r=e.funcName,n=rr(t.gullet.popToken()),o=t.gullet.popToken(),i=t.gullet.popToken();return nr(t,n,i,"\\\\globalfuture"===r),t.gullet.pushToken(i),t.gullet.pushToken(o),{type:"internal",mode:t.mode}}});var or=function(e,t,r){var n=K(X.math[e]&&X.math[e].replace||e,t,r);if(!n)throw new Error("Unsupported symbol "+e+" and font size "+t+".");return n},ir=function(e,t,r,n){var o=r.havingBaseStyle(t),i=Qe.makeSpan(n.concat(o.sizingClasses(r)),[e],r),a=o.sizeMultiplier/r.sizeMultiplier;return i.height*=a,i.depth*=a,i.maxFontSize=o.sizeMultiplier,i},ar=function(e,t,r){var n=t.havingBaseStyle(r),o=(1-t.sizeMultiplier/n.sizeMultiplier)*t.fontMetrics().axisHeight;e.classes.push("delimcenter"),e.style.top=o+"em",e.height-=o,e.depth+=o},sr=function(e,t,r,n,o,i){var a=function(e,t,r,n){return Qe.makeSymbol(e,"Size"+t+"-Regular",r,n)}(e,t,o,n),s=ir(Qe.makeSpan(["delimsizing","size"+t],[a],n),M.TEXT,n,i);return r&&ar(s,n,M.TEXT),s},lr=function(e,t,r){return{type:"elem",elem:Qe.makeSpan(["delimsizinginner","Size1-Regular"===t?"delim-size1":"delim-size4"],[Qe.makeSpan([],[Qe.makeSymbol(e,t,r)])])}},cr=function(e,t,r){var n=$["Size4-Regular"][e.charCodeAt(0)]?$["Size4-Regular"][e.charCodeAt(0)][4].toFixed(3):$["Size1-Regular"][e.charCodeAt(0)][4].toFixed(3),o=new F("inner",function(e,t){switch(e){case"⎜":return"M291 0 H417 V"+t+" H291z M291 0 H417 V"+t+" H291z";case"∣":return"M145 0 H188 V"+t+" H145z M145 0 H188 V"+t+" H145z";case"∥":return"M145 0 H188 V"+t+" H145z M145 0 H188 V"+t+" H145zM367 0 H410 V"+t+" H367z M367 0 H410 V"+t+" H367z";case"⎟":return"M457 0 H583 V"+t+" H457z M457 0 H583 V"+t+" H457z";case"⎢":return"M319 0 H403 V"+t+" H319z M319 0 H403 V"+t+" H319z";case"⎥":return"M263 0 H347 V"+t+" H263z M263 0 H347 V"+t+" H263z";case"⎪":return"M384 0 H504 V"+t+" H384z M384 0 H504 V"+t+" H384z";case"⏐":return"M312 0 H355 V"+t+" H312z M312 0 H355 V"+t+" H312z";case"‖":return"M257 0 H300 V"+t+" H257z M257 0 H300 V"+t+" H257zM478 0 H521 V"+t+" H478z M478 0 H521 V"+t+" H478z";default:return""}}(e,Math.round(1e3*t))),i=new L([o],{width:n+"em",height:t+"em",style:"width:"+n+"em",viewBox:"0 0 "+1e3*n+" "+Math.round(1e3*t),preserveAspectRatio:"xMinYMin"}),a=Qe.makeSvgSpan([],[i],r);return a.height=t,a.style.height=t+"em",a.style.width=n+"em",{type:"elem",elem:a}},hr={type:"kern",size:-.008},pr=["|","\\lvert","\\rvert","\\vert"],ur=["\\|","\\lVert","\\rVert","\\Vert"],dr=function(e,t,r,n,o,i){var a,s,c,h;a=c=h=e,s=null;var p="Size1-Regular";"\\uparrow"===e?c=h="⏐":"\\Uparrow"===e?c=h="‖":"\\downarrow"===e?a=c="⏐":"\\Downarrow"===e?a=c="‖":"\\updownarrow"===e?(a="\\uparrow",c="⏐",h="\\downarrow"):"\\Updownarrow"===e?(a="\\Uparrow",c="‖",h="\\Downarrow"):l(pr,e)?c="∣":l(ur,e)?c="∥":"["===e||"\\lbrack"===e?(a="⎡",c="⎢",h="⎣",p="Size4-Regular"):"]"===e||"\\rbrack"===e?(a="⎤",c="⎥",h="⎦",p="Size4-Regular"):"\\lfloor"===e||"⌊"===e?(c=a="⎢",h="⎣",p="Size4-Regular"):"\\lceil"===e||"⌈"===e?(a="⎡",c=h="⎢",p="Size4-Regular"):"\\rfloor"===e||"⌋"===e?(c=a="⎥",h="⎦",p="Size4-Regular"):"\\rceil"===e||"⌉"===e?(a="⎤",c=h="⎥",p="Size4-Regular"):"("===e||"\\lparen"===e?(a="⎛",c="⎜",h="⎝",p="Size4-Regular"):")"===e||"\\rparen"===e?(a="⎞",c="⎟",h="⎠",p="Size4-Regular"):"\\{"===e||"\\lbrace"===e?(a="⎧",s="⎨",h="⎩",c="⎪",p="Size4-Regular"):"\\}"===e||"\\rbrace"===e?(a="⎫",s="⎬",h="⎭",c="⎪",p="Size4-Regular"):"\\lgroup"===e||"⟮"===e?(a="⎧",h="⎩",c="⎪",p="Size4-Regular"):"\\rgroup"===e||"⟯"===e?(a="⎫",h="⎭",c="⎪",p="Size4-Regular"):"\\lmoustache"===e||"⎰"===e?(a="⎧",h="⎭",c="⎪",p="Size4-Regular"):"\\rmoustache"!==e&&"⎱"!==e||(a="⎫",h="⎩",c="⎪",p="Size4-Regular");var u=or(a,p,o),d=u.height+u.depth,f=or(c,p,o),m=f.height+f.depth,g=or(h,p,o),v=g.height+g.depth,y=0,b=1;if(null!==s){var w=or(s,p,o);y=w.height+w.depth,b=2}var x=d+v+y,S=x+Math.max(0,Math.ceil((t-x)/(b*m)))*b*m,k=n.fontMetrics().axisHeight;r&&(k*=n.sizeMultiplier);var T=S/2-k,A=[];if(A.push(lr(h,p,o)),A.push(hr),null===s){var O=S-d-v+.016;A.push(cr(c,O,n))}else{var C=(S-d-v-y)/2+.016;A.push(cr(c,C,n)),A.push(hr),A.push(lr(s,p,o)),A.push(hr),A.push(cr(c,C,n))}A.push(hr),A.push(lr(a,p,o));var N=n.havingBaseStyle(M.TEXT),z=Qe.makeVList({positionType:"bottom",positionData:T,children:A},N);return ir(Qe.makeSpan(["delimsizing","mult"],[z],N),M.TEXT,n,i)},fr=.08,mr=function(e,t,r,n,o){var i=function(e,t,r){t*=1e3;var n="";switch(e){case"sqrtMain":n=function(e,t){return"M95,"+(622+e+80)+"\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl"+e/2.075+" -"+e+"\nc5.3,-9.3,12,-14,20,-14\nH400000v"+(40+e)+"H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM"+(834+e)+" 80h400000v"+(40+e)+"h-400000z"}(t);break;case"sqrtSize1":n=function(e,t){return"M263,"+(601+e+80)+"c0.7,0,18,39.7,52,119\nc34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120\nc340,-704.7,510.7,-1060.3,512,-1067\nl"+e/2.084+" -"+e+"\nc4.7,-7.3,11,-11,19,-11\nH40000v"+(40+e)+"H1012.3\ns-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232\nc-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1\ns-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26\nc-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60z\nM"+(1001+e)+" 80h400000v"+(40+e)+"h-400000z"}(t);break;case"sqrtSize2":n=function(e,t){return"M983 "+(10+e+80)+"\nl"+e/3.13+" -"+e+"\nc4,-6.7,10,-10,18,-10 H400000v"+(40+e)+"\nH1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7\ns-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744\nc-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30\nc26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722\nc56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5\nc53.7,-170.3,84.5,-266.8,92.5,-289.5z\nM"+(1001+e)+" 80h400000v"+(40+e)+"h-400000z"}(t);break;case"sqrtSize3":n=function(e,t){return"M424,"+(2398+e+80)+"\nc-1.3,-0.7,-38.5,-172,-111.5,-514c-73,-342,-109.8,-513.3,-110.5,-514\nc0,-2,-10.7,14.3,-32,49c-4.7,7.3,-9.8,15.7,-15.5,25c-5.7,9.3,-9.8,16,-12.5,20\ns-5,7,-5,7c-4,-3.3,-8.3,-7.7,-13,-13s-13,-13,-13,-13s76,-122,76,-122s77,-121,77,-121\ns209,968,209,968c0,-2,84.7,-361.7,254,-1079c169.3,-717.3,254.7,-1077.7,256,-1081\nl"+e/4.223+" -"+e+"c4,-6.7,10,-10,18,-10 H400000\nv"+(40+e)+"H1014.6\ns-87.3,378.7,-272.6,1166c-185.3,787.3,-279.3,1182.3,-282,1185\nc-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2z M"+(1001+e)+" 80\nh400000v"+(40+e)+"h-400000z"}(t);break;case"sqrtSize4":n=function(e,t){return"M473,"+(2713+e+80)+"\nc339.3,-1799.3,509.3,-2700,510,-2702 l"+e/5.298+" -"+e+"\nc3.3,-7.3,9.3,-11,18,-11 H400000v"+(40+e)+"H1017.7\ns-90.5,478,-276.2,1466c-185.7,988,-279.5,1483,-281.5,1485c-2,6,-10,9,-24,9\nc-8,0,-12,-0.7,-12,-2c0,-1.3,-5.3,-32,-16,-92c-50.7,-293.3,-119.7,-693.3,-207,-1200\nc0,-1.3,-5.3,8.7,-16,30c-10.7,21.3,-21.3,42.7,-32,64s-16,33,-16,33s-26,-26,-26,-26\ns76,-153,76,-153s77,-151,77,-151c0.7,0.7,35.7,202,105,604c67.3,400.7,102,602.7,104,\n606zM"+(1001+e)+" 80h400000v"+(40+e)+"H1017.7z"}(t);break;case"sqrtTall":n=function(e,t,r){return"M702 "+(e+80)+"H400000"+(40+e)+"\nH742v"+(r-54-80-e)+"l-4 4-4 4c-.667.7 -2 1.5-4 2.5s-4.167 1.833-6.5 2.5-5.5 1-9.5 1\nh-12l-28-84c-16.667-52-96.667 -294.333-240-727l-212 -643 -85 170\nc-4-3.333-8.333-7.667-13 -13l-13-13l77-155 77-156c66 199.333 139 419.667\n219 661 l218 661zM702 80H400000v"+(40+e)+"H742z"}(t,0,r)}return n}(e,n,r),a=new F(e,i),s=new L([a],{width:"400em",height:t+"em",viewBox:"0 0 400000 "+r,preserveAspectRatio:"xMinYMin slice"});return Qe.makeSvgSpan(["hide-tail"],[s],o)},gr=["(","\\lparen",")","\\rparen","[","\\lbrack","]","\\rbrack","\\{","\\lbrace","\\}","\\rbrace","\\lfloor","\\rfloor","⌊","⌋","\\lceil","\\rceil","⌈","⌉","\\surd"],vr=["\\uparrow","\\downarrow","\\updownarrow","\\Uparrow","\\Downarrow","\\Updownarrow","|","\\|","\\vert","\\Vert","\\lvert","\\rvert","\\lVert","\\rVert","\\lgroup","\\rgroup","⟮","⟯","\\lmoustache","\\rmoustache","⎰","⎱"],yr=["<",">","\\langle","\\rangle","/","\\backslash","\\lt","\\gt"],br=[0,1.2,1.8,2.4,3],wr=[{type:"small",style:M.SCRIPTSCRIPT},{type:"small",style:M.SCRIPT},{type:"small",style:M.TEXT},{type:"large",size:1},{type:"large",size:2},{type:"large",size:3},{type:"large",size:4}],xr=[{type:"small",style:M.SCRIPTSCRIPT},{type:"small",style:M.SCRIPT},{type:"small",style:M.TEXT},{type:"stack"}],Sr=[{type:"small",style:M.SCRIPTSCRIPT},{type:"small",style:M.SCRIPT},{type:"small",style:M.TEXT},{type:"large",size:1},{type:"large",size:2},{type:"large",size:3},{type:"large",size:4},{type:"stack"}],kr=function(e){if("small"===e.type)return"Main-Regular";if("large"===e.type)return"Size"+e.size+"-Regular";if("stack"===e.type)return"Size4-Regular";throw new Error("Add support for delim type '"+e.type+"' here.")},Mr=function(e,t,r,n){for(var o=Math.min(2,3-n.style.size);o<r.length&&"stack"!==r[o].type;o++){var i=or(e,kr(r[o]),"math"),a=i.height+i.depth;if("small"===r[o].type&&(a*=n.havingBaseStyle(r[o].style).sizeMultiplier),a>t)return r[o]}return r[r.length-1]},Tr=function(e,t,r,n,o,i){var a;"<"===e||"\\lt"===e||"⟨"===e?e="\\langle":">"!==e&&"\\gt"!==e&&"⟩"!==e||(e="\\rangle"),a=l(yr,e)?wr:l(gr,e)?Sr:xr;var s=Mr(e,t,a,n);return"small"===s.type?function(e,t,r,n,o,i){var a=Qe.makeSymbol(e,"Main-Regular",o,n),s=ir(a,t,n,i);return r&&ar(s,n,t),s}(e,s.style,r,n,o,i):"large"===s.type?sr(e,s.size,r,n,o,i):dr(e,t,r,n,o,i)},Ar=function(e,t,r,o,i){if("<"===e||"\\lt"===e||"⟨"===e?e="\\langle":">"!==e&&"\\gt"!==e&&"⟩"!==e||(e="\\rangle"),l(gr,e)||l(yr,e))return sr(e,t,!1,r,o,i);if(l(vr,e))return dr(e,br[t],!1,r,o,i);throw new n("Illegal delimiter: '"+e+"'")},Or=br,Cr=Tr,Nr=function(e,t,r,n,o,i){var a=n.fontMetrics().axisHeight*n.sizeMultiplier,s=5/n.fontMetrics().ptPerEm,l=Math.max(t-a,r+a),c=Math.max(l/500*901,2*l-s);return Tr(e,c,!0,n,o,i)},zr={"\\bigl":{mclass:"mopen",size:1},"\\Bigl":{mclass:"mopen",size:2},"\\biggl":{mclass:"mopen",size:3},"\\Biggl":{mclass:"mopen",size:4},"\\bigr":{mclass:"mclose",size:1},"\\Bigr":{mclass:"mclose",size:2},"\\biggr":{mclass:"mclose",size:3},"\\Biggr":{mclass:"mclose",size:4},"\\bigm":{mclass:"mrel",size:1},"\\Bigm":{mclass:"mrel",size:2},"\\biggm":{mclass:"mrel",size:3},"\\Biggm":{mclass:"mrel",size:4},"\\big":{mclass:"mord",size:1},"\\Big":{mclass:"mord",size:2},"\\bigg":{mclass:"mord",size:3},"\\Bigg":{mclass:"mord",size:4}},Er=["(","\\lparen",")","\\rparen","[","\\lbrack","]","\\rbrack","\\{","\\lbrace","\\}","\\rbrace","\\lfloor","\\rfloor","⌊","⌋","\\lceil","\\rceil","⌈","⌉","<",">","\\langle","⟨","\\rangle","⟩","\\lt","\\gt","\\lvert","\\rvert","\\lVert","\\rVert","\\lgroup","\\rgroup","⟮","⟯","\\lmoustache","\\rmoustache","⎰","⎱","/","\\backslash","|","\\vert","\\|","\\Vert","\\uparrow","\\Uparrow","\\downarrow","\\Downarrow","\\updownarrow","\\Updownarrow","."];function Dr(e,t){var r=Wt(e);if(r&&l(Er,r.text))return r;throw new n(r?"Invalid delimiter '"+r.text+"' after '"+t.funcName+"'":"Invalid delimiter type '"+e.type+"'",e)}function Ir(e){if(!e.body)throw new Error("Bug: The leftright ParseNode wasn't fully parsed.")}lt({type:"delimsizing",names:["\\bigl","\\Bigl","\\biggl","\\Biggl","\\bigr","\\Bigr","\\biggr","\\Biggr","\\bigm","\\Bigm","\\biggm","\\Biggm","\\big","\\Big","\\bigg","\\Bigg"],props:{numArgs:1,argTypes:["primitive"]},handler:function(e,t){var r=Dr(t[0],e);return{type:"delimsizing",mode:e.parser.mode,size:zr[e.funcName].size,mclass:zr[e.funcName].mclass,delim:r.text}},htmlBuilder:function(e,t){return"."===e.delim?Qe.makeSpan([e.mclass]):Ar(e.delim,e.size,t,e.mode,[e.mclass])},mathmlBuilder:function(e){var t=[];"."!==e.delim&&t.push(zt(e.delim,e.mode));var r=new Nt.MathNode("mo",t);return"mopen"===e.mclass||"mclose"===e.mclass?r.setAttribute("fence","true"):r.setAttribute("fence","false"),r.setAttribute("stretchy","true"),r.setAttribute("minsize",Or[e.size]+"em"),r.setAttribute("maxsize",Or[e.size]+"em"),r}}),lt({type:"leftright-right",names:["\\right"],props:{numArgs:1,primitive:!0},handler:function(e,t){var r=e.parser.gullet.macros.get("\\current@color");if(r&&"string"!=typeof r)throw new n("\\current@color set to non-string in \\right");return{type:"leftright-right",mode:e.parser.mode,delim:Dr(t[0],e).text,color:r}}}),lt({type:"leftright",names:["\\left"],props:{numArgs:1,primitive:!0},handler:function(e,t){var r=Dr(t[0],e),n=e.parser;++n.leftrightDepth;var o=n.parseExpression(!1);--n.leftrightDepth,n.expect("\\right",!1);var i=$t(n.parseFunction(),"leftright-right");return{type:"leftright",mode:n.mode,body:o,left:r.text,right:i.delim,rightColor:i.color}},htmlBuilder:function(e,t){Ir(e);for(var r,n,o=vt(e.body,t,!0,["mopen","mclose"]),i=0,a=0,s=!1,l=0;l<o.length;l++)o[l].isMiddle?s=!0:(i=Math.max(o[l].height,i),a=Math.max(o[l].depth,a));if(i*=t.sizeMultiplier,a*=t.sizeMultiplier,r="."===e.left?St(t,["mopen"]):Nr(e.left,i,a,t,e.mode,["mopen"]),o.unshift(r),s)for(var c=1;c<o.length;c++){var h=o[c].isMiddle;h&&(o[c]=Nr(h.delim,i,a,h.options,e.mode,[]))}if("."===e.right)n=St(t,["mclose"]);else{var p=e.rightColor?t.withColor(e.rightColor):t;n=Nr(e.right,i,a,p,e.mode,["mclose"])}return o.push(n),Qe.makeSpan(["minner"],o,t)},mathmlBuilder:function(e,t){Ir(e);var r=It(e.body,t);if("."!==e.left){var n=new Nt.MathNode("mo",[zt(e.left,e.mode)]);n.setAttribute("fence","true"),r.unshift(n)}if("."!==e.right){var o=new Nt.MathNode("mo",[zt(e.right,e.mode)]);o.setAttribute("fence","true"),e.rightColor&&o.setAttribute("mathcolor",e.rightColor),r.push(o)}return Et(r)}}),lt({type:"middle",names:["\\middle"],props:{numArgs:1,primitive:!0},handler:function(e,t){var r=Dr(t[0],e);if(!e.parser.leftrightDepth)throw new n("\\middle without preceding \\left",r);return{type:"middle",mode:e.parser.mode,delim:r.text}},htmlBuilder:function(e,t){var r;if("."===e.delim)r=St(t,[]);else{r=Ar(e.delim,1,t,e.mode,[]);var n={delim:e.delim,options:t};r.isMiddle=n}return r},mathmlBuilder:function(e,t){var r="\\vert"===e.delim||"|"===e.delim?zt("|","text"):zt(e.delim,e.mode),n=new Nt.MathNode("mo",[r]);return n.setAttribute("fence","true"),n.setAttribute("lspace","0.05em"),n.setAttribute("rspace","0.05em"),n}});var Rr=function(e,t){var r,n,o,i=Qe.wrapFragment(kt(e.body,t),t),a=e.label.substr(1),s=t.sizeMultiplier,l=0,c=d(e.body);if("sout"===a)(r=Qe.makeSpan(["stretchy","sout"])).height=t.fontMetrics().defaultRuleThickness/s,l=-.5*t.fontMetrics().xHeight;else if("phase"===a){var h=He({number:.6,unit:"pt"},t),p=He({number:.35,unit:"ex"},t);s/=t.havingBaseSizing().sizeMultiplier;var u=i.height+i.depth+h+p;i.style.paddingLeft=u/2+h+"em";var f=Math.floor(1e3*u*s),m="M400000 "+(n=f)+" H0 L"+n/2+" 0 l65 45 L145 "+(n-80)+" H400000z",g=new L([new F("phase",m)],{width:"400em",height:f/1e3+"em",viewBox:"0 0 400000 "+f,preserveAspectRatio:"xMinYMin slice"});(r=Qe.makeSvgSpan(["hide-tail"],[g],t)).style.height=u+"em",l=i.depth+h+p}else{/cancel/.test(a)?c||i.classes.push("cancel-pad"):"angl"===a?i.classes.push("anglpad"):i.classes.push("boxpad");var v=0,y=0,b=0;/box/.test(a)?(b=Math.max(t.fontMetrics().fboxrule,t.minRuleThickness),y=v=t.fontMetrics().fboxsep+("colorbox"===a?0:b)):"angl"===a?(v=4*(b=Math.max(t.fontMetrics().defaultRuleThickness,t.minRuleThickness)),y=Math.max(0,.25-i.depth)):y=v=c?.2:0,r=function(e,t,r,n,o){var i,a=e.height+e.depth+r+n;if(/fbox|color|angl/.test(t)){if(i=Qe.makeSpan(["stretchy",t],[],o),"fbox"===t){var s=o.color&&o.getColor();s&&(i.style.borderColor=s)}}else{var l=[];/^[bx]cancel$/.test(t)&&l.push(new V({x1:"0",y1:"0",x2:"100%",y2:"100%","stroke-width":"0.046em"})),/^x?cancel$/.test(t)&&l.push(new V({x1:"0",y1:"100%",x2:"100%",y2:"0","stroke-width":"0.046em"}));var c=new L(l,{width:"100%",height:a+"em"});i=Qe.makeSvgSpan([],[c],o)}return i.height=a,i.style.height=a+"em",i}(i,a,v,y,t),/fbox|boxed|fcolorbox/.test(a)?(r.style.borderStyle="solid",r.style.borderWidth=b+"em"):"angl"===a&&.049!==b&&(r.style.borderTopWidth=b+"em",r.style.borderRightWidth=b+"em"),l=i.depth+y,e.backgroundColor&&(r.style.backgroundColor=e.backgroundColor,e.borderColor&&(r.style.borderColor=e.borderColor))}if(e.backgroundColor)o=Qe.makeVList({positionType:"individualShift",children:[{type:"elem",elem:r,shift:l},{type:"elem",elem:i,shift:0}]},t);else{var w=/cancel|phase/.test(a)?["svg-align"]:[];o=Qe.makeVList({positionType:"individualShift",children:[{type:"elem",elem:i,shift:0},{type:"elem",elem:r,shift:l,wrapperClasses:w}]},t)}return/cancel/.test(a)&&(o.height=i.height,o.depth=i.depth),/cancel/.test(a)&&!c?Qe.makeSpan(["mord","cancel-lap"],[o],t):Qe.makeSpan(["mord"],[o],t)},Br=function(e,t){var r=0,n=new Nt.MathNode(e.label.indexOf("colorbox")>-1?"mpadded":"menclose",[Bt(e.body,t)]);switch(e.label){case"\\cancel":n.setAttribute("notation","updiagonalstrike");break;case"\\bcancel":n.setAttribute("notation","downdiagonalstrike");break;case"\\phase":n.setAttribute("notation","phasorangle");break;case"\\sout":n.setAttribute("notation","horizontalstrike");break;case"\\fbox":n.setAttribute("notation","box");break;case"\\angl":n.setAttribute("notation","actuarial");break;case"\\fcolorbox":case"\\colorbox":if(r=t.fontMetrics().fboxsep*t.fontMetrics().ptPerEm,n.setAttribute("width","+"+2*r+"pt"),n.setAttribute("height","+"+2*r+"pt"),n.setAttribute("lspace",r+"pt"),n.setAttribute("voffset",r+"pt"),"\\fcolorbox"===e.label){var o=Math.max(t.fontMetrics().fboxrule,t.minRuleThickness);n.setAttribute("style","border: "+o+"em solid "+String(e.borderColor))}break;case"\\xcancel":n.setAttribute("notation","updiagonalstrike downdiagonalstrike")}return e.backgroundColor&&n.setAttribute("mathbackground",e.backgroundColor),n};lt({type:"enclose",names:["\\colorbox"],props:{numArgs:2,allowedInText:!0,argTypes:["color","text"]},handler:function(e,t,r){var n=e.parser,o=e.funcName,i=$t(t[0],"color-token").color,a=t[1];return{type:"enclose",mode:n.mode,label:o,backgroundColor:i,body:a}},htmlBuilder:Rr,mathmlBuilder:Br}),lt({type:"enclose",names:["\\fcolorbox"],props:{numArgs:3,allowedInText:!0,argTypes:["color","color","text"]},handler:function(e,t,r){var n=e.parser,o=e.funcName,i=$t(t[0],"color-token").color,a=$t(t[1],"color-token").color,s=t[2];return{type:"enclose",mode:n.mode,label:o,backgroundColor:a,borderColor:i,body:s}},htmlBuilder:Rr,mathmlBuilder:Br}),lt({type:"enclose",names:["\\fbox"],props:{numArgs:1,argTypes:["hbox"],allowedInText:!0},handler:function(e,t){return{type:"enclose",mode:e.parser.mode,label:"\\fbox",body:t[0]}}}),lt({type:"enclose",names:["\\cancel","\\bcancel","\\xcancel","\\sout","\\phase"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName,o=t[0];return{type:"enclose",mode:r.mode,label:n,body:o}},htmlBuilder:Rr,mathmlBuilder:Br}),lt({type:"enclose",names:["\\angl"],props:{numArgs:1,argTypes:["hbox"],allowedInText:!1},handler:function(e,t){return{type:"enclose",mode:e.parser.mode,label:"\\angl",body:t[0]}}});var Pr={};function _r(e){for(var t=e.type,r=e.names,n=e.props,o=e.handler,i=e.htmlBuilder,a=e.mathmlBuilder,s={type:t,numArgs:n.numArgs||0,allowedInText:!1,numOptionalArgs:0,handler:o},l=0;l<r.length;++l)Pr[r[l]]=s;i&&(at[t]=i),a&&(st[t]=a)}function qr(e){var t=[];e.consumeSpaces();for(var r=e.fetch().text;"\\hline"===r||"\\hdashline"===r;)e.consume(),t.push("\\hdashline"===r),e.consumeSpaces(),r=e.fetch().text;return t}var Lr=function(e){if(!e.parser.settings.displayMode)throw new n("{"+e.envName+"} can be used only in display mode.")};function Fr(e,t,r){var o=t.hskipBeforeAndAfter,i=t.addJot,a=t.cols,s=t.arraystretch,l=t.colSeparationType,c=t.addEqnNum,h=t.singleRow,p=t.emptySingleRow,u=t.maxNumCols,d=t.leqno;if(e.gullet.beginGroup(),h||e.gullet.macros.set("\\cr","\\\\\\relax"),!s){var f=e.gullet.expandMacroAsText("\\arraystretch");if(null==f)s=1;else if(!(s=parseFloat(f))||s<0)throw new n("Invalid \\arraystretch: "+f)}e.gullet.beginGroup();var m=[],g=[m],v=[],y=[];for(y.push(qr(e));;){var b=e.parseExpression(!1,h?"\\end":"\\\\");e.gullet.endGroup(),e.gullet.beginGroup(),b={type:"ordgroup",mode:e.mode,body:b},r&&(b={type:"styling",mode:e.mode,style:r,body:[b]}),m.push(b);var w=e.fetch().text;if("&"===w){if(u&&m.length===u){if(h||l)throw new n("Too many tab characters: &",e.nextToken);e.settings.reportNonstrict("textEnv","Too few columns specified in the {array} column argument.")}e.consume()}else{if("\\end"===w){1===m.length&&"styling"===b.type&&0===b.body[0].body.length&&(g.length>1||!p)&&g.pop(),y.length<g.length+1&&y.push([]);break}if("\\\\"!==w)throw new n("Expected & or \\\\ or \\cr or \\end",e.nextToken);e.consume();var x=void 0;" "!==e.gullet.future().text&&(x=e.parseSizeGroup(!0)),v.push(x?x.value:null),y.push(qr(e)),m=[],g.push(m)}}return e.gullet.endGroup(),e.gullet.endGroup(),{type:"array",mode:e.mode,addJot:i,arraystretch:s,body:g,cols:a,rowGaps:v,hskipBeforeAndAfter:o,hLinesBeforeRow:y,colSeparationType:l,addEqnNum:c,leqno:d}}function Vr(e){return"d"===e.substr(0,1)?"display":"text"}var Hr=function(e,t){var r,o,i=e.body.length,a=e.hLinesBeforeRow,s=0,l=new Array(i),h=[],p=Math.max(t.fontMetrics().arrayRuleWidth,t.minRuleThickness),u=1/t.fontMetrics().ptPerEm,d=5*u;e.colSeparationType&&"small"===e.colSeparationType&&(d=t.havingStyle(M.SCRIPT).sizeMultiplier/t.sizeMultiplier*.2778);var f="CD"===e.colSeparationType?He({number:3,unit:"ex"},t):12*u,m=3*u,g=e.arraystretch*f,v=.7*g,y=.3*g,b=0;function w(e){for(var t=0;t<e.length;++t)t>0&&(b+=.25),h.push({pos:b,isDashed:e[t]})}for(w(a[0]),r=0;r<e.body.length;++r){var x=e.body[r],S=v,k=y;s<x.length&&(s=x.length);var T=new Array(x.length);for(o=0;o<x.length;++o){var A=kt(x[o],t);k<A.depth&&(k=A.depth),S<A.height&&(S=A.height),T[o]=A}var O=e.rowGaps[r],C=0;O&&(C=He(O,t))>0&&(k<(C+=y)&&(k=C),C=0),e.addJot&&(k+=m),T.height=S,T.depth=k,b+=S,T.pos=b,b+=k+C,l[r]=T,w(a[r+1])}var N,z,E=b/2+t.fontMetrics().axisHeight,D=e.cols||[],I=[],R=[];if(e.addEqnNum)for(r=0;r<i;++r){var B=l[r],P=B.pos-E,_=Qe.makeSpan(["eqn-num"],[],t);_.depth=B.depth,_.height=B.height,R.push({type:"elem",elem:_,shift:P})}for(o=0,z=0;o<s||z<D.length;++o,++z){for(var q=D[z]||{},L=!0;"separator"===q.type;){if(L||((N=Qe.makeSpan(["arraycolsep"],[])).style.width=t.fontMetrics().doubleRuleSep+"em",I.push(N)),"|"!==q.separator&&":"!==q.separator)throw new n("Invalid separator type: "+q.separator);var F="|"===q.separator?"solid":"dashed",V=Qe.makeSpan(["vertical-separator"],[],t);V.style.height=b+"em",V.style.borderRightWidth=p+"em",V.style.borderRightStyle=F,V.style.margin="0 -"+p/2+"em",V.style.verticalAlign=-(b-E)+"em",I.push(V),q=D[++z]||{},L=!1}if(!(o>=s)){var H=void 0;(o>0||e.hskipBeforeAndAfter)&&0!==(H=c(q.pregap,d))&&((N=Qe.makeSpan(["arraycolsep"],[])).style.width=H+"em",I.push(N));var $=[];for(r=0;r<i;++r){var j=l[r],W=j[o];if(W){var K=j.pos-E;W.depth=j.depth,W.height=j.height,$.push({type:"elem",elem:W,shift:K})}}$=Qe.makeVList({positionType:"individualShift",children:$},t),$=Qe.makeSpan(["col-align-"+(q.align||"c")],[$]),I.push($),(o<s-1||e.hskipBeforeAndAfter)&&0!==(H=c(q.postgap,d))&&((N=Qe.makeSpan(["arraycolsep"],[])).style.width=H+"em",I.push(N))}}if(l=Qe.makeSpan(["mtable"],I),h.length>0){for(var G=Qe.makeLineSpan("hline",t,p),U=Qe.makeLineSpan("hdashline",t,p),J=[{type:"elem",elem:l,shift:0}];h.length>0;){var Y=h.pop(),X=Y.pos-E;Y.isDashed?J.push({type:"elem",elem:U,shift:X}):J.push({type:"elem",elem:G,shift:X})}l=Qe.makeVList({positionType:"individualShift",children:J},t)}if(e.addEqnNum){var Z=Qe.makeVList({positionType:"individualShift",children:R},t);return Z=Qe.makeSpan(["tag"],[Z],t),Qe.makeFragment([l,Z])}return Qe.makeSpan(["mord"],[l],t)},$r={c:"center ",l:"left ",r:"right "},jr=function(e,t){for(var r=[],n=new Nt.MathNode("mtd",[],["mtr-glue"]),o=new Nt.MathNode("mtd",[],["mml-eqn-num"]),i=0;i<e.body.length;i++){for(var a=e.body[i],s=[],l=0;l<a.length;l++)s.push(new Nt.MathNode("mtd",[Bt(a[l],t)]));e.addEqnNum&&(s.unshift(n),s.push(n),e.leqno?s.unshift(o):s.push(o)),r.push(new Nt.MathNode("mtr",s))}var c=new Nt.MathNode("mtable",r),h=.5===e.arraystretch?.1:.16+e.arraystretch-1+(e.addJot?.09:0);c.setAttribute("rowspacing",h.toFixed(4)+"em");var p="",u="";if(e.cols&&e.cols.length>0){var d=e.cols,f="",m=!1,g=0,v=d.length;"separator"===d[0].type&&(p+="top ",g=1),"separator"===d[d.length-1].type&&(p+="bottom ",v-=1);for(var y=g;y<v;y++)"align"===d[y].type?(u+=$r[d[y].align],m&&(f+="none "),m=!0):"separator"===d[y].type&&m&&(f+="|"===d[y].separator?"solid ":"dashed ",m=!1);c.setAttribute("columnalign",u.trim()),/[sd]/.test(f)&&c.setAttribute("columnlines",f.trim())}if("align"===e.colSeparationType){for(var b=e.cols||[],w="",x=1;x<b.length;x++)w+=x%2?"0em ":"1em ";c.setAttribute("columnspacing",w.trim())}else"alignat"===e.colSeparationType||"gather"===e.colSeparationType?c.setAttribute("columnspacing","0em"):"small"===e.colSeparationType?c.setAttribute("columnspacing","0.2778em"):"CD"===e.colSeparationType?c.setAttribute("columnspacing","0.5em"):c.setAttribute("columnspacing","1em");var S="",k=e.hLinesBeforeRow;p+=k[0].length>0?"left ":"",p+=k[k.length-1].length>0?"right ":"";for(var M=1;M<k.length-1;M++)S+=0===k[M].length?"none ":k[M][0]?"dashed ":"solid ";return/[sd]/.test(S)&&c.setAttribute("rowlines",S.trim()),""!==p&&(c=new Nt.MathNode("menclose",[c])).setAttribute("notation",p.trim()),e.arraystretch&&e.arraystretch<1&&(c=new Nt.MathNode("mstyle",[c])).setAttribute("scriptlevel","1"),c},Wr=function(e,t){-1===e.envName.indexOf("ed")&&Lr(e);var r,o=[],i=e.envName.indexOf("at")>-1?"alignat":"align",a=Fr(e.parser,{cols:o,addJot:!0,addEqnNum:"align"===e.envName||"alignat"===e.envName,emptySingleRow:!0,colSeparationType:i,maxNumCols:"split"===e.envName?2:void 0,leqno:e.parser.settings.leqno},"display"),s=0,l={type:"ordgroup",mode:e.mode,body:[]};if(t[0]&&"ordgroup"===t[0].type){for(var c="",h=0;h<t[0].body.length;h++)c+=$t(t[0].body[h],"textord").text;r=Number(c),s=2*r}var p=!s;a.body.forEach((function(e){for(var t=1;t<e.length;t+=2){var o=$t(e[t],"styling");$t(o.body[0],"ordgroup").body.unshift(l)}if(p)s<e.length&&(s=e.length);else{var i=e.length/2;if(r<i)throw new n("Too many math in a row: expected "+r+", but got "+i,e[0])}}));for(var u=0;u<s;++u){var d="r",f=0;u%2==1?d="l":u>0&&p&&(f=1),o[u]={type:"align",align:d,pregap:f,postgap:0}}return a.colSeparationType=p?"align":"alignat",a};_r({type:"array",names:["array","darray"],props:{numArgs:1},handler:function(e,t){var r=(Wt(t[0])?[t[0]]:$t(t[0],"ordgroup").body).map((function(e){var t=jt(e).text;if(-1!=="lcr".indexOf(t))return{type:"align",align:t};if("|"===t)return{type:"separator",separator:"|"};if(":"===t)return{type:"separator",separator:":"};throw new n("Unknown column alignment: "+t,e)})),o={cols:r,hskipBeforeAndAfter:!0,maxNumCols:r.length};return Fr(e.parser,o,Vr(e.envName))},htmlBuilder:Hr,mathmlBuilder:jr}),_r({type:"array",names:["matrix","pmatrix","bmatrix","Bmatrix","vmatrix","Vmatrix","matrix*","pmatrix*","bmatrix*","Bmatrix*","vmatrix*","Vmatrix*"],props:{numArgs:0},handler:function(e){var t={matrix:null,pmatrix:["(",")"],bmatrix:["[","]"],Bmatrix:["\\{","\\}"],vmatrix:["|","|"],Vmatrix:["\\Vert","\\Vert"]}[e.envName.replace("*","")],r="c",o={hskipBeforeAndAfter:!1,cols:[{type:"align",align:r}]};if("*"===e.envName.charAt(e.envName.length-1)){var i=e.parser;if(i.consumeSpaces(),"["===i.fetch().text){if(i.consume(),i.consumeSpaces(),r=i.fetch().text,-1==="lcr".indexOf(r))throw new n("Expected l or c or r",i.nextToken);i.consume(),i.consumeSpaces(),i.expect("]"),i.consume(),o.cols=[{type:"align",align:r}]}}var a=Fr(e.parser,o,Vr(e.envName)),s=Math.max.apply(Math,[0].concat(a.body.map((function(e){return e.length}))));return a.cols=new Array(s).fill({type:"align",align:r}),t?{type:"leftright",mode:e.mode,body:[a],left:t[0],right:t[1],rightColor:void 0}:a},htmlBuilder:Hr,mathmlBuilder:jr}),_r({type:"array",names:["smallmatrix"],props:{numArgs:0},handler:function(e){var t=Fr(e.parser,{arraystretch:.5},"script");return t.colSeparationType="small",t},htmlBuilder:Hr,mathmlBuilder:jr}),_r({type:"array",names:["subarray"],props:{numArgs:1},handler:function(e,t){var r=(Wt(t[0])?[t[0]]:$t(t[0],"ordgroup").body).map((function(e){var t=jt(e).text;if(-1!=="lc".indexOf(t))return{type:"align",align:t};throw new n("Unknown column alignment: "+t,e)}));if(r.length>1)throw new n("{subarray} can contain only one column");var o={cols:r,hskipBeforeAndAfter:!1,arraystretch:.5};if((o=Fr(e.parser,o,"script")).body.length>0&&o.body[0].length>1)throw new n("{subarray} can contain only one column");return o},htmlBuilder:Hr,mathmlBuilder:jr}),_r({type:"array",names:["cases","dcases","rcases","drcases"],props:{numArgs:0},handler:function(e){var t=Fr(e.parser,{arraystretch:1.2,cols:[{type:"align",align:"l",pregap:0,postgap:1},{type:"align",align:"l",pregap:0,postgap:0}]},Vr(e.envName));return{type:"leftright",mode:e.mode,body:[t],left:e.envName.indexOf("r")>-1?".":"\\{",right:e.envName.indexOf("r")>-1?"\\}":".",rightColor:void 0}},htmlBuilder:Hr,mathmlBuilder:jr}),_r({type:"array",names:["align","align*","aligned","split"],props:{numArgs:0},handler:Wr,htmlBuilder:Hr,mathmlBuilder:jr}),_r({type:"array",names:["gathered","gather","gather*"],props:{numArgs:0},handler:function(e){l(["gather","gather*"],e.envName)&&Lr(e);var t={cols:[{type:"align",align:"c"}],addJot:!0,colSeparationType:"gather",addEqnNum:"gather"===e.envName,emptySingleRow:!0,leqno:e.parser.settings.leqno};return Fr(e.parser,t,"display")},htmlBuilder:Hr,mathmlBuilder:jr}),_r({type:"array",names:["alignat","alignat*","alignedat"],props:{numArgs:1},handler:Wr,htmlBuilder:Hr,mathmlBuilder:jr}),_r({type:"array",names:["equation","equation*"],props:{numArgs:0},handler:function(e){Lr(e);var t={addEqnNum:"equation"===e.envName,emptySingleRow:!0,singleRow:!0,maxNumCols:1,leqno:e.parser.settings.leqno};return Fr(e.parser,t,"display")},htmlBuilder:Hr,mathmlBuilder:jr}),_r({type:"array",names:["CD"],props:{numArgs:0},handler:function(e){return Lr(e),function(e){var t=[];for(e.gullet.beginGroup(),e.gullet.macros.set("\\cr","\\\\\\relax"),e.gullet.beginGroup();;){t.push(e.parseExpression(!1,"\\\\")),e.gullet.endGroup(),e.gullet.beginGroup();var r=e.fetch().text;if("&"!==r&&"\\\\"!==r){if("\\end"===r){0===t[t.length-1].length&&t.pop();break}throw new n("Expected \\\\ or \\cr or \\end",e.nextToken)}e.consume()}for(var o,i,a=[],s=[a],l=0;l<t.length;l++){for(var c=t[l],h={type:"styling",body:[],mode:"math",style:"display"},p=0;p<c.length;p++)if(Xt(c[p])){a.push(h);var u=jt(c[p+=1]).text,d=new Array(2);if(d[0]={type:"ordgroup",mode:"math",body:[]},d[1]={type:"ordgroup",mode:"math",body:[]},"=|.".indexOf(u)>-1);else{if(!("<>AV".indexOf(u)>-1))throw new n('Expected one of "<>AV=|." after @',c[p]);for(var f=0;f<2;f++){for(var m=!0,g=p+1;g<c.length;g++){if(i=u,("mathord"===(o=c[g]).type||"atom"===o.type)&&o.text===i){m=!1,p=g;break}if(Xt(c[g]))throw new n("Missing a "+u+" character to complete a CD arrow.",c[g]);d[f].body.push(c[g])}if(m)throw new n("Missing a "+u+" character to complete a CD arrow.",c[p])}}var v={type:"styling",body:[Zt(u,d,e)],mode:"math",style:"display"};a.push(v),h={type:"styling",body:[],mode:"math",style:"display"}}else h.body.push(c[p]);l%2==0?a.push(h):a.shift(),a=[],s.push(a)}return e.gullet.endGroup(),e.gullet.endGroup(),{type:"array",mode:"math",body:s,arraystretch:1,addJot:!0,rowGaps:[null],cols:new Array(s[0].length).fill({type:"align",align:"c",pregap:.25,postgap:.25}),colSeparationType:"CD",hLinesBeforeRow:new Array(s.length+1).fill([])}}(e.parser)},htmlBuilder:Hr,mathmlBuilder:jr}),lt({type:"text",names:["\\hline","\\hdashline"],props:{numArgs:0,allowedInText:!0,allowedInMath:!0},handler:function(e,t){throw new n(e.funcName+" valid only within array environment")}});var Kr=Pr;lt({type:"environment",names:["\\begin","\\end"],props:{numArgs:1,argTypes:["text"]},handler:function(e,t){var r=e.parser,o=e.funcName,i=t[0];if("ordgroup"!==i.type)throw new n("Invalid environment name",i);for(var a="",s=0;s<i.body.length;++s)a+=$t(i.body[s],"textord").text;if("\\begin"===o){if(!Kr.hasOwnProperty(a))throw new n("No such environment: "+a,i);var l=Kr[a],c=r.parseArguments("\\begin{"+a+"}",l),h=c.args,p=c.optArgs,u={mode:r.mode,envName:a,parser:r},d=l.handler(u,h,p);r.expect("\\end",!1);var f=r.nextToken,m=$t(r.parseFunction(),"environment");if(m.name!==a)throw new n("Mismatch: \\begin{"+a+"} matched by \\end{"+m.name+"}",f);return d}return{type:"environment",mode:r.mode,name:a,nameGroup:i}}});var Gr=Qe.makeSpan;function Ur(e,t){var r=vt(e.body,t,!0);return Gr([e.mclass],r,t)}function Jr(e,t){var r,n=It(e.body,t);return"minner"===e.mclass?Nt.newDocumentFragment(n):("mord"===e.mclass?e.isCharacterBox?(r=n[0]).type="mi":r=new Nt.MathNode("mi",n):(e.isCharacterBox?(r=n[0]).type="mo":r=new Nt.MathNode("mo",n),"mbin"===e.mclass?(r.attributes.lspace="0.22em",r.attributes.rspace="0.22em"):"mpunct"===e.mclass?(r.attributes.lspace="0em",r.attributes.rspace="0.17em"):"mopen"!==e.mclass&&"mclose"!==e.mclass||(r.attributes.lspace="0em",r.attributes.rspace="0em")),r)}lt({type:"mclass",names:["\\mathord","\\mathbin","\\mathrel","\\mathopen","\\mathclose","\\mathpunct","\\mathinner"],props:{numArgs:1,primitive:!0},handler:function(e,t){var r=e.parser,n=e.funcName,o=t[0];return{type:"mclass",mode:r.mode,mclass:"m"+n.substr(5),body:pt(o),isCharacterBox:d(o)}},htmlBuilder:Ur,mathmlBuilder:Jr});var Yr=function(e){var t="ordgroup"===e.type&&e.body.length?e.body[0]:e;return"atom"!==t.type||"bin"!==t.family&&"rel"!==t.family?"mord":"m"+t.family};lt({type:"mclass",names:["\\@binrel"],props:{numArgs:2},handler:function(e,t){return{type:"mclass",mode:e.parser.mode,mclass:Yr(t[0]),body:pt(t[1]),isCharacterBox:d(t[1])}}}),lt({type:"mclass",names:["\\stackrel","\\overset","\\underset"],props:{numArgs:2},handler:function(e,t){var r,n=e.parser,o=e.funcName,i=t[1],a=t[0];r="\\stackrel"!==o?Yr(i):"mrel";var s={type:"op",mode:i.mode,limits:!0,alwaysHandleSupSub:!0,parentIsSupSub:!1,symbol:!1,suppressBaseShift:"\\stackrel"!==o,body:pt(i)},l={type:"supsub",mode:a.mode,base:s,sup:"\\underset"===o?null:a,sub:"\\underset"===o?a:null};return{type:"mclass",mode:n.mode,mclass:r,body:[l],isCharacterBox:d(l)}},htmlBuilder:Ur,mathmlBuilder:Jr});var Xr=function(e,t){var r=e.font,n=t.withFont(r);return kt(e.body,n)},Zr=function(e,t){var r=e.font,n=t.withFont(r);return Bt(e.body,n)},Qr={"\\Bbb":"\\mathbb","\\bold":"\\mathbf","\\frak":"\\mathfrak","\\bm":"\\boldsymbol"};lt({type:"font",names:["\\mathrm","\\mathit","\\mathbf","\\mathnormal","\\mathbb","\\mathcal","\\mathfrak","\\mathscr","\\mathsf","\\mathtt","\\Bbb","\\bold","\\frak"],props:{numArgs:1,allowedInArgument:!0},handler:function(e,t){var r=e.parser,n=e.funcName,o=ht(t[0]),i=n;return i in Qr&&(i=Qr[i]),{type:"font",mode:r.mode,font:i.slice(1),body:o}},htmlBuilder:Xr,mathmlBuilder:Zr}),lt({type:"mclass",names:["\\boldsymbol","\\bm"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=t[0],o=d(n);return{type:"mclass",mode:r.mode,mclass:Yr(n),body:[{type:"font",mode:r.mode,font:"boldsymbol",body:n}],isCharacterBox:o}}}),lt({type:"font",names:["\\rm","\\sf","\\tt","\\bf","\\it","\\cal"],props:{numArgs:0,allowedInText:!0},handler:function(e,t){var r=e.parser,n=e.funcName,o=e.breakOnTokenText,i=r.mode,a=r.parseExpression(!0,o);return{type:"font",mode:i,font:"math"+n.slice(1),body:{type:"ordgroup",mode:r.mode,body:a}}},htmlBuilder:Xr,mathmlBuilder:Zr});var en=function(e,t){var r=t;return"display"===e?r=r.id>=M.SCRIPT.id?r.text():M.DISPLAY:"text"===e&&r.size===M.DISPLAY.size?r=M.TEXT:"script"===e?r=M.SCRIPT:"scriptscript"===e&&(r=M.SCRIPTSCRIPT),r},tn=function(e,t){var r,n=en(e.size,t.style),o=n.fracNum(),i=n.fracDen();r=t.havingStyle(o);var a=kt(e.numer,r,t);if(e.continued){var s=8.5/t.fontMetrics().ptPerEm,l=3.5/t.fontMetrics().ptPerEm;a.height=a.height<s?s:a.height,a.depth=a.depth<l?l:a.depth}r=t.havingStyle(i);var c,h,p,u,d,f,m,g,v,y,b=kt(e.denom,r,t);if(e.hasBarLine?(e.barSize?(h=He(e.barSize,t),c=Qe.makeLineSpan("frac-line",t,h)):c=Qe.makeLineSpan("frac-line",t),h=c.height,p=c.height):(c=null,h=0,p=t.fontMetrics().defaultRuleThickness),n.size===M.DISPLAY.size||"display"===e.size?(u=t.fontMetrics().num1,d=h>0?3*p:7*p,f=t.fontMetrics().denom1):(h>0?(u=t.fontMetrics().num2,d=p):(u=t.fontMetrics().num3,d=3*p),f=t.fontMetrics().denom2),c){var w=t.fontMetrics().axisHeight;u-a.depth-(w+.5*h)<d&&(u+=d-(u-a.depth-(w+.5*h))),w-.5*h-(b.height-f)<d&&(f+=d-(w-.5*h-(b.height-f))),m=Qe.makeVList({positionType:"individualShift",children:[{type:"elem",elem:b,shift:f},{type:"elem",elem:c,shift:-(w-.5*h)},{type:"elem",elem:a,shift:-u}]},t)}else{var x=u-a.depth-(b.height-f);x<d&&(u+=.5*(d-x),f+=.5*(d-x)),m=Qe.makeVList({positionType:"individualShift",children:[{type:"elem",elem:b,shift:f},{type:"elem",elem:a,shift:-u}]},t)}return r=t.havingStyle(n),m.height*=r.sizeMultiplier/t.sizeMultiplier,m.depth*=r.sizeMultiplier/t.sizeMultiplier,g=n.size===M.DISPLAY.size?t.fontMetrics().delim1:n.size===M.SCRIPTSCRIPT.size?t.havingStyle(M.SCRIPT).fontMetrics().delim2:t.fontMetrics().delim2,v=null==e.leftDelim?St(t,["mopen"]):Cr(e.leftDelim,g,!0,t.havingStyle(n),e.mode,["mopen"]),y=e.continued?Qe.makeSpan([]):null==e.rightDelim?St(t,["mclose"]):Cr(e.rightDelim,g,!0,t.havingStyle(n),e.mode,["mclose"]),Qe.makeSpan(["mord"].concat(r.sizingClasses(t)),[v,Qe.makeSpan(["mfrac"],[m]),y],t)},rn=function(e,t){var r=new Nt.MathNode("mfrac",[Bt(e.numer,t),Bt(e.denom,t)]);if(e.hasBarLine){if(e.barSize){var n=He(e.barSize,t);r.setAttribute("linethickness",n+"em")}}else r.setAttribute("linethickness","0px");var o=en(e.size,t.style);if(o.size!==t.style.size){r=new Nt.MathNode("mstyle",[r]);var i=o.size===M.DISPLAY.size?"true":"false";r.setAttribute("displaystyle",i),r.setAttribute("scriptlevel","0")}if(null!=e.leftDelim||null!=e.rightDelim){var a=[];if(null!=e.leftDelim){var s=new Nt.MathNode("mo",[new Nt.TextNode(e.leftDelim.replace("\\",""))]);s.setAttribute("fence","true"),a.push(s)}if(a.push(r),null!=e.rightDelim){var l=new Nt.MathNode("mo",[new Nt.TextNode(e.rightDelim.replace("\\",""))]);l.setAttribute("fence","true"),a.push(l)}return Et(a)}return r};lt({type:"genfrac",names:["\\dfrac","\\frac","\\tfrac","\\dbinom","\\binom","\\tbinom","\\\\atopfrac","\\\\bracefrac","\\\\brackfrac"],props:{numArgs:2,allowedInArgument:!0},handler:function(e,t){var r,n=e.parser,o=e.funcName,i=t[0],a=t[1],s=null,l=null,c="auto";switch(o){case"\\dfrac":case"\\frac":case"\\tfrac":r=!0;break;case"\\\\atopfrac":r=!1;break;case"\\dbinom":case"\\binom":case"\\tbinom":r=!1,s="(",l=")";break;case"\\\\bracefrac":r=!1,s="\\{",l="\\}";break;case"\\\\brackfrac":r=!1,s="[",l="]";break;default:throw new Error("Unrecognized genfrac command")}switch(o){case"\\dfrac":case"\\dbinom":c="display";break;case"\\tfrac":case"\\tbinom":c="text"}return{type:"genfrac",mode:n.mode,continued:!1,numer:i,denom:a,hasBarLine:r,leftDelim:s,rightDelim:l,size:c,barSize:null}},htmlBuilder:tn,mathmlBuilder:rn}),lt({type:"genfrac",names:["\\cfrac"],props:{numArgs:2},handler:function(e,t){var r=e.parser,n=(e.funcName,t[0]),o=t[1];return{type:"genfrac",mode:r.mode,continued:!0,numer:n,denom:o,hasBarLine:!0,leftDelim:null,rightDelim:null,size:"display",barSize:null}}}),lt({type:"infix",names:["\\over","\\choose","\\atop","\\brace","\\brack"],props:{numArgs:0,infix:!0},handler:function(e){var t,r=e.parser,n=e.funcName,o=e.token;switch(n){case"\\over":t="\\frac";break;case"\\choose":t="\\binom";break;case"\\atop":t="\\\\atopfrac";break;case"\\brace":t="\\\\bracefrac";break;case"\\brack":t="\\\\brackfrac";break;default:throw new Error("Unrecognized infix genfrac command")}return{type:"infix",mode:r.mode,replaceWith:t,token:o}}});var nn=["display","text","script","scriptscript"],on=function(e){var t=null;return e.length>0&&(t="."===(t=e)?null:t),t};lt({type:"genfrac",names:["\\genfrac"],props:{numArgs:6,allowedInArgument:!0,argTypes:["math","math","size","text","math","math"]},handler:function(e,t){var r,n=e.parser,o=t[4],i=t[5],a=ht(t[0]),s="atom"===a.type&&"open"===a.family?on(a.text):null,l=ht(t[1]),c="atom"===l.type&&"close"===l.family?on(l.text):null,h=$t(t[2],"size"),p=null;r=!!h.isBlank||(p=h.value).number>0;var u="auto",d=t[3];if("ordgroup"===d.type){if(d.body.length>0){var f=$t(d.body[0],"textord");u=nn[Number(f.text)]}}else d=$t(d,"textord"),u=nn[Number(d.text)];return{type:"genfrac",mode:n.mode,numer:o,denom:i,continued:!1,hasBarLine:r,barSize:p,leftDelim:s,rightDelim:c,size:u}},htmlBuilder:tn,mathmlBuilder:rn}),lt({type:"infix",names:["\\above"],props:{numArgs:1,argTypes:["size"],infix:!0},handler:function(e,t){var r=e.parser,n=(e.funcName,e.token);return{type:"infix",mode:r.mode,replaceWith:"\\\\abovefrac",size:$t(t[0],"size").value,token:n}}}),lt({type:"genfrac",names:["\\\\abovefrac"],props:{numArgs:3,argTypes:["math","size","math"]},handler:function(e,t){var r=e.parser,n=(e.funcName,t[0]),o=function(e){if(!e)throw new Error("Expected non-null, but got "+String(e));return e}($t(t[1],"infix").size),i=t[2],a=o.number>0;return{type:"genfrac",mode:r.mode,numer:n,denom:i,continued:!1,hasBarLine:a,barSize:o,leftDelim:null,rightDelim:null,size:"auto"}},htmlBuilder:tn,mathmlBuilder:rn});var an=function(e,t){var r,n,o=t.style;"supsub"===e.type?(r=e.sup?kt(e.sup,t.havingStyle(o.sup()),t):kt(e.sub,t.havingStyle(o.sub()),t),n=$t(e.base,"horizBrace")):n=$t(e,"horizBrace");var i,a=kt(n.base,t.havingBaseStyle(M.DISPLAY)),s=Ht(n,t);if(n.isOver?(i=Qe.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:a},{type:"kern",size:.1},{type:"elem",elem:s}]},t)).children[0].children[0].children[1].classes.push("svg-align"):(i=Qe.makeVList({positionType:"bottom",positionData:a.depth+.1+s.height,children:[{type:"elem",elem:s},{type:"kern",size:.1},{type:"elem",elem:a}]},t)).children[0].children[0].children[0].classes.push("svg-align"),r){var l=Qe.makeSpan(["mord",n.isOver?"mover":"munder"],[i],t);i=n.isOver?Qe.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:l},{type:"kern",size:.2},{type:"elem",elem:r}]},t):Qe.makeVList({positionType:"bottom",positionData:l.depth+.2+r.height+r.depth,children:[{type:"elem",elem:r},{type:"kern",size:.2},{type:"elem",elem:l}]},t)}return Qe.makeSpan(["mord",n.isOver?"mover":"munder"],[i],t)};lt({type:"horizBrace",names:["\\overbrace","\\underbrace"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName;return{type:"horizBrace",mode:r.mode,label:n,isOver:/^\\over/.test(n),base:t[0]}},htmlBuilder:an,mathmlBuilder:function(e,t){var r=Vt(e.label);return new Nt.MathNode(e.isOver?"mover":"munder",[Bt(e.base,t),r])}}),lt({type:"href",names:["\\href"],props:{numArgs:2,argTypes:["url","original"],allowedInText:!0},handler:function(e,t){var r=e.parser,n=t[1],o=$t(t[0],"url").url;return r.settings.isTrusted({command:"\\href",url:o})?{type:"href",mode:r.mode,href:o,body:pt(n)}:r.formatUnsupportedCmd("\\href")},htmlBuilder:function(e,t){var r=vt(e.body,t,!1);return Qe.makeAnchor(e.href,[],r,t)},mathmlBuilder:function(e,t){var r=Rt(e.body,t);return r instanceof Ot||(r=new Ot("mrow",[r])),r.setAttribute("href",e.href),r}}),lt({type:"href",names:["\\url"],props:{numArgs:1,argTypes:["url"],allowedInText:!0},handler:function(e,t){var r=e.parser,n=$t(t[0],"url").url;if(!r.settings.isTrusted({command:"\\url",url:n}))return r.formatUnsupportedCmd("\\url");for(var o=[],i=0;i<n.length;i++){var a=n[i];"~"===a&&(a="\\textasciitilde"),o.push({type:"textord",mode:"text",text:a})}var s={type:"text",mode:r.mode,font:"\\texttt",body:o};return{type:"href",mode:r.mode,href:n,body:pt(s)}}}),lt({type:"hbox",names:["\\hbox"],props:{numArgs:1,argTypes:["text"],allowedInText:!0,primitive:!0},handler:function(e,t){return{type:"hbox",mode:e.parser.mode,body:pt(t[0])}},htmlBuilder:function(e,t){var r=vt(e.body,t,!1);return Qe.makeFragment(r)},mathmlBuilder:function(e,t){return new Nt.MathNode("mrow",It(e.body,t))}}),lt({type:"html",names:["\\htmlClass","\\htmlId","\\htmlStyle","\\htmlData"],props:{numArgs:2,argTypes:["raw","original"],allowedInText:!0},handler:function(e,t){var r,o=e.parser,i=e.funcName,a=(e.token,$t(t[0],"raw").string),s=t[1];o.settings.strict&&o.settings.reportNonstrict("htmlExtension","HTML extension is disabled on strict mode");var l={};switch(i){case"\\htmlClass":l.class=a,r={command:"\\htmlClass",class:a};break;case"\\htmlId":l.id=a,r={command:"\\htmlId",id:a};break;case"\\htmlStyle":l.style=a,r={command:"\\htmlStyle",style:a};break;case"\\htmlData":for(var c=a.split(","),h=0;h<c.length;h++){var p=c[h].split("=");if(2!==p.length)throw new n("Error parsing key-value for \\htmlData");l["data-"+p[0].trim()]=p[1].trim()}r={command:"\\htmlData",attributes:l};break;default:throw new Error("Unrecognized html command")}return o.settings.isTrusted(r)?{type:"html",mode:o.mode,attributes:l,body:pt(s)}:o.formatUnsupportedCmd(i)},htmlBuilder:function(e,t){var r=vt(e.body,t,!1),n=["enclosing"];e.attributes.class&&n.push.apply(n,e.attributes.class.trim().split(/\s+/));var o=Qe.makeSpan(n,r,t);for(var i in e.attributes)"class"!==i&&e.attributes.hasOwnProperty(i)&&o.setAttribute(i,e.attributes[i]);return o},mathmlBuilder:function(e,t){return Rt(e.body,t)}}),lt({type:"htmlmathml",names:["\\html@mathml"],props:{numArgs:2,allowedInText:!0},handler:function(e,t){return{type:"htmlmathml",mode:e.parser.mode,html:pt(t[0]),mathml:pt(t[1])}},htmlBuilder:function(e,t){var r=vt(e.html,t,!1);return Qe.makeFragment(r)},mathmlBuilder:function(e,t){return Rt(e.mathml,t)}});var sn=function(e){if(/^[-+]? *(\d+(\.\d*)?|\.\d+)$/.test(e))return{number:+e,unit:"bp"};var t=/([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(e);if(!t)throw new n("Invalid size: '"+e+"' in \\includegraphics");var r={number:+(t[1]+t[2]),unit:t[3]};if(!Ve(r))throw new n("Invalid unit: '"+r.unit+"' in \\includegraphics.");return r};lt({type:"includegraphics",names:["\\includegraphics"],props:{numArgs:1,numOptionalArgs:1,argTypes:["raw","url"],allowedInText:!1},handler:function(e,t,r){var o=e.parser,i={number:0,unit:"em"},a={number:.9,unit:"em"},s={number:0,unit:"em"},l="";if(r[0])for(var c=$t(r[0],"raw").string.split(","),h=0;h<c.length;h++){var p=c[h].split("=");if(2===p.length){var u=p[1].trim();switch(p[0].trim()){case"alt":l=u;break;case"width":i=sn(u);break;case"height":a=sn(u);break;case"totalheight":s=sn(u);break;default:throw new n("Invalid key: '"+p[0]+"' in \\includegraphics.")}}}var d=$t(t[0],"url").url;return""===l&&(l=(l=(l=d).replace(/^.*[\\/]/,"")).substring(0,l.lastIndexOf("."))),o.settings.isTrusted({command:"\\includegraphics",url:d})?{type:"includegraphics",mode:o.mode,alt:l,width:i,height:a,totalheight:s,src:d}:o.formatUnsupportedCmd("\\includegraphics")},htmlBuilder:function(e,t){var r=He(e.height,t),n=0;e.totalheight.number>0&&(n=He(e.totalheight,t)-r,n=Number(n.toFixed(2)));var o=0;e.width.number>0&&(o=He(e.width,t));var i={height:r+n+"em"};o>0&&(i.width=o+"em"),n>0&&(i.verticalAlign=-n+"em");var a=new P(e.src,e.alt,i);return a.height=r,a.depth=n,a},mathmlBuilder:function(e,t){var r=new Nt.MathNode("mglyph",[]);r.setAttribute("alt",e.alt);var n=He(e.height,t),o=0;if(e.totalheight.number>0&&(o=(o=He(e.totalheight,t)-n).toFixed(2),r.setAttribute("valign","-"+o+"em")),r.setAttribute("height",n+o+"em"),e.width.number>0){var i=He(e.width,t);r.setAttribute("width",i+"em")}return r.setAttribute("src",e.src),r}}),lt({type:"kern",names:["\\kern","\\mkern","\\hskip","\\mskip"],props:{numArgs:1,argTypes:["size"],primitive:!0,allowedInText:!0},handler:function(e,t){var r=e.parser,n=e.funcName,o=$t(t[0],"size");if(r.settings.strict){var i="m"===n[1],a="mu"===o.value.unit;i?(a||r.settings.reportNonstrict("mathVsTextUnits","LaTeX's "+n+" supports only mu units, not "+o.value.unit+" units"),"math"!==r.mode&&r.settings.reportNonstrict("mathVsTextUnits","LaTeX's "+n+" works only in math mode")):a&&r.settings.reportNonstrict("mathVsTextUnits","LaTeX's "+n+" doesn't support mu units")}return{type:"kern",mode:r.mode,dimension:o.value}},htmlBuilder:function(e,t){return Qe.makeGlue(e.dimension,t)},mathmlBuilder:function(e,t){var r=He(e.dimension,t);return new Nt.SpaceNode(r)}}),lt({type:"lap",names:["\\mathllap","\\mathrlap","\\mathclap"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){var r=e.parser,n=e.funcName,o=t[0];return{type:"lap",mode:r.mode,alignment:n.slice(5),body:o}},htmlBuilder:function(e,t){var r;"clap"===e.alignment?(r=Qe.makeSpan([],[kt(e.body,t)]),r=Qe.makeSpan(["inner"],[r],t)):r=Qe.makeSpan(["inner"],[kt(e.body,t)]);var n=Qe.makeSpan(["fix"],[]),o=Qe.makeSpan([e.alignment],[r,n],t),i=Qe.makeSpan(["strut"]);return i.style.height=o.height+o.depth+"em",i.style.verticalAlign=-o.depth+"em",o.children.unshift(i),o=Qe.makeSpan(["thinbox"],[o],t),Qe.makeSpan(["mord","vbox"],[o],t)},mathmlBuilder:function(e,t){var r=new Nt.MathNode("mpadded",[Bt(e.body,t)]);if("rlap"!==e.alignment){var n="llap"===e.alignment?"-1":"-0.5";r.setAttribute("lspace",n+"width")}return r.setAttribute("width","0px"),r}}),lt({type:"styling",names:["\\(","$"],props:{numArgs:0,allowedInText:!0,allowedInMath:!1},handler:function(e,t){var r=e.funcName,n=e.parser,o=n.mode;n.switchMode("math");var i="\\("===r?"\\)":"$",a=n.parseExpression(!1,i);return n.expect(i),n.switchMode(o),{type:"styling",mode:n.mode,style:"text",body:a}}}),lt({type:"text",names:["\\)","\\]"],props:{numArgs:0,allowedInText:!0,allowedInMath:!1},handler:function(e,t){throw new n("Mismatched "+e.funcName)}});var ln=function(e,t){switch(t.style.size){case M.DISPLAY.size:return e.display;case M.TEXT.size:return e.text;case M.SCRIPT.size:return e.script;case M.SCRIPTSCRIPT.size:return e.scriptscript;default:return e.text}};lt({type:"mathchoice",names:["\\mathchoice"],props:{numArgs:4,primitive:!0},handler:function(e,t){return{type:"mathchoice",mode:e.parser.mode,display:pt(t[0]),text:pt(t[1]),script:pt(t[2]),scriptscript:pt(t[3])}},htmlBuilder:function(e,t){var r=ln(e,t),n=vt(r,t,!1);return Qe.makeFragment(n)},mathmlBuilder:function(e,t){var r=ln(e,t);return Rt(r,t)}});var cn=function(e,t,r,n,o,i,a){e=Qe.makeSpan([],[e]);var s,l,c,h=r&&d(r);if(t){var p=kt(t,n.havingStyle(o.sup()),n);l={elem:p,kern:Math.max(n.fontMetrics().bigOpSpacing1,n.fontMetrics().bigOpSpacing3-p.depth)}}if(r){var u=kt(r,n.havingStyle(o.sub()),n);s={elem:u,kern:Math.max(n.fontMetrics().bigOpSpacing2,n.fontMetrics().bigOpSpacing4-u.height)}}if(l&&s){var f=n.fontMetrics().bigOpSpacing5+s.elem.height+s.elem.depth+s.kern+e.depth+a;c=Qe.makeVList({positionType:"bottom",positionData:f,children:[{type:"kern",size:n.fontMetrics().bigOpSpacing5},{type:"elem",elem:s.elem,marginLeft:-i+"em"},{type:"kern",size:s.kern},{type:"elem",elem:e},{type:"kern",size:l.kern},{type:"elem",elem:l.elem,marginLeft:i+"em"},{type:"kern",size:n.fontMetrics().bigOpSpacing5}]},n)}else if(s){var m=e.height-a;c=Qe.makeVList({positionType:"top",positionData:m,children:[{type:"kern",size:n.fontMetrics().bigOpSpacing5},{type:"elem",elem:s.elem,marginLeft:-i+"em"},{type:"kern",size:s.kern},{type:"elem",elem:e}]},n)}else{if(!l)return e;var g=e.depth+a;c=Qe.makeVList({positionType:"bottom",positionData:g,children:[{type:"elem",elem:e},{type:"kern",size:l.kern},{type:"elem",elem:l.elem,marginLeft:i+"em"},{type:"kern",size:n.fontMetrics().bigOpSpacing5}]},n)}var v=[c];if(s&&0!==i&&!h){var y=Qe.makeSpan(["mspace"],[],n);y.style.marginRight=i+"em",v.unshift(y)}return Qe.makeSpan(["mop","op-limits"],v,n)},hn=["\\smallint"],pn=function(e,t){var r,n,o,i=!1;"supsub"===e.type?(r=e.sup,n=e.sub,o=$t(e.base,"op"),i=!0):o=$t(e,"op");var a,s=t.style,c=!1;if(s.size===M.DISPLAY.size&&o.symbol&&!l(hn,o.name)&&(c=!0),o.symbol){var h=c?"Size2-Regular":"Size1-Regular",p="";if("\\oiint"!==o.name&&"\\oiiint"!==o.name||(p=o.name.substr(1),o.name="oiint"===p?"\\iint":"\\iiint"),a=Qe.makeSymbol(o.name,h,"math",t,["mop","op-symbol",c?"large-op":"small-op"]),p.length>0){var u=a.italic,d=Qe.staticSvg(p+"Size"+(c?"2":"1"),t);a=Qe.makeVList({positionType:"individualShift",children:[{type:"elem",elem:a,shift:0},{type:"elem",elem:d,shift:c?.08:0}]},t),o.name="\\"+p,a.classes.unshift("mop"),a.italic=u}}else if(o.body){var f=vt(o.body,t,!0);1===f.length&&f[0]instanceof q?(a=f[0]).classes[0]="mop":a=Qe.makeSpan(["mop"],f,t)}else{for(var m=[],g=1;g<o.name.length;g++)m.push(Qe.mathsym(o.name[g],o.mode,t));a=Qe.makeSpan(["mop"],m,t)}var v=0,y=0;return(a instanceof q||"\\oiint"===o.name||"\\oiiint"===o.name)&&!o.suppressBaseShift&&(v=(a.height-a.depth)/2-t.fontMetrics().axisHeight,y=a.italic),i?cn(a,r,n,t,s,y,v):(v&&(a.style.position="relative",a.style.top=v+"em"),a)},un=function(e,t){var r;if(e.symbol)r=new Ot("mo",[zt(e.name,e.mode)]),l(hn,e.name)&&r.setAttribute("largeop","false");else if(e.body)r=new Ot("mo",It(e.body,t));else{r=new Ot("mi",[new Ct(e.name.slice(1))]);var n=new Ot("mo",[zt("⁡","text")]);r=e.parentIsSupSub?new Ot("mrow",[r,n]):At([r,n])}return r},dn={"∏":"\\prod","∐":"\\coprod","∑":"\\sum","⋀":"\\bigwedge","⋁":"\\bigvee","⋂":"\\bigcap","⋃":"\\bigcup","⨀":"\\bigodot","⨁":"\\bigoplus","⨂":"\\bigotimes","⨄":"\\biguplus","⨆":"\\bigsqcup"};lt({type:"op",names:["\\coprod","\\bigvee","\\bigwedge","\\biguplus","\\bigcap","\\bigcup","\\intop","\\prod","\\sum","\\bigotimes","\\bigoplus","\\bigodot","\\bigsqcup","\\smallint","∏","∐","∑","⋀","⋁","⋂","⋃","⨀","⨁","⨂","⨄","⨆"],props:{numArgs:0},handler:function(e,t){var r=e.parser,n=e.funcName;return 1===n.length&&(n=dn[n]),{type:"op",mode:r.mode,limits:!0,parentIsSupSub:!1,symbol:!0,name:n}},htmlBuilder:pn,mathmlBuilder:un}),lt({type:"op",names:["\\mathop"],props:{numArgs:1,primitive:!0},handler:function(e,t){var r=e.parser,n=t[0];return{type:"op",mode:r.mode,limits:!1,parentIsSupSub:!1,symbol:!1,body:pt(n)}},htmlBuilder:pn,mathmlBuilder:un});var fn={"∫":"\\int","∬":"\\iint","∭":"\\iiint","∮":"\\oint","∯":"\\oiint","∰":"\\oiiint"};lt({type:"op",names:["\\arcsin","\\arccos","\\arctan","\\arctg","\\arcctg","\\arg","\\ch","\\cos","\\cosec","\\cosh","\\cot","\\cotg","\\coth","\\csc","\\ctg","\\cth","\\deg","\\dim","\\exp","\\hom","\\ker","\\lg","\\ln","\\log","\\sec","\\sin","\\sinh","\\sh","\\tan","\\tanh","\\tg","\\th"],props:{numArgs:0},handler:function(e){var t=e.parser,r=e.funcName;return{type:"op",mode:t.mode,limits:!1,parentIsSupSub:!1,symbol:!1,name:r}},htmlBuilder:pn,mathmlBuilder:un}),lt({type:"op",names:["\\det","\\gcd","\\inf","\\lim","\\max","\\min","\\Pr","\\sup"],props:{numArgs:0},handler:function(e){var t=e.parser,r=e.funcName;return{type:"op",mode:t.mode,limits:!0,parentIsSupSub:!1,symbol:!1,name:r}},htmlBuilder:pn,mathmlBuilder:un}),lt({type:"op",names:["\\int","\\iint","\\iiint","\\oint","\\oiint","\\oiiint","∫","∬","∭","∮","∯","∰"],props:{numArgs:0},handler:function(e){var t=e.parser,r=e.funcName;return 1===r.length&&(r=fn[r]),{type:"op",mode:t.mode,limits:!1,parentIsSupSub:!1,symbol:!0,name:r}},htmlBuilder:pn,mathmlBuilder:un});var mn={};function gn(e,t){mn[e]=t}var vn=function(e,t){var r,n,o,i,a=!1;if("supsub"===e.type?(r=e.sup,n=e.sub,o=$t(e.base,"operatorname"),a=!0):o=$t(e,"operatorname"),o.body.length>0){for(var s=o.body.map((function(e){var t=e.text;return"string"==typeof t?{type:"textord",mode:e.mode,text:t}:e})),l=vt(s,t.withFont("mathrm"),!0),c=0;c<l.length;c++){var h=l[c];h instanceof q&&(h.text=h.text.replace(/\u2212/,"-").replace(/\u2217/,"*"))}i=Qe.makeSpan(["mop"],l,t)}else i=Qe.makeSpan(["mop"],[],t);return a?cn(i,r,n,t,t.style,0,0):i};function yn(e,t,r){for(var n=vt(e,t,!1),o=t.sizeMultiplier/r.sizeMultiplier,i=0;i<n.length;i++){var a=n[i].classes.indexOf("sizing");a<0?Array.prototype.push.apply(n[i].classes,t.sizingClasses(r)):n[i].classes[a+1]==="reset-size"+t.size&&(n[i].classes[a+1]="reset-size"+r.size),n[i].height*=o,n[i].depth*=o}return Qe.makeFragment(n)}lt({type:"operatorname",names:["\\operatorname@","\\operatornamewithlimits"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=e.funcName,o=t[0];return{type:"operatorname",mode:r.mode,body:pt(o),alwaysHandleSupSub:"\\operatornamewithlimits"===n,limits:!1,parentIsSupSub:!1}},htmlBuilder:vn,mathmlBuilder:function(e,t){for(var r=It(e.body,t.withFont("mathrm")),n=!0,o=0;o<r.length;o++){var i=r[o];if(i instanceof Nt.SpaceNode);else if(i instanceof Nt.MathNode)switch(i.type){case"mi":case"mn":case"ms":case"mspace":case"mtext":break;case"mo":var a=i.children[0];1===i.children.length&&a instanceof Nt.TextNode?a.text=a.text.replace(/\u2212/,"-").replace(/\u2217/,"*"):n=!1;break;default:n=!1}else n=!1}if(n){var s=r.map((function(e){return e.toText()})).join("");r=[new Nt.TextNode(s)]}var l=new Nt.MathNode("mi",r);l.setAttribute("mathvariant","normal");var c=new Nt.MathNode("mo",[zt("⁡","text")]);return e.parentIsSupSub?new Nt.MathNode("mrow",[l,c]):Nt.newDocumentFragment([l,c])}}),gn("\\operatorname","\\@ifstar\\operatornamewithlimits\\operatorname@"),ct({type:"ordgroup",htmlBuilder:function(e,t){return e.semisimple?Qe.makeFragment(vt(e.body,t,!1)):Qe.makeSpan(["mord"],vt(e.body,t,!0),t)},mathmlBuilder:function(e,t){return Rt(e.body,t,!0)}}),lt({type:"overline",names:["\\overline"],props:{numArgs:1},handler:function(e,t){var r=e.parser,n=t[0];return{type:"overline",mode:r.mode,body:n}},htmlBuilder:function(e,t){var r=kt(e.body,t.havingCrampedStyle()),n=Qe.makeLineSpan("overline-line",t),o=t.fontMetrics().defaultRuleThickness,i=Qe.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:r},{type:"kern",size:3*o},{type:"elem",elem:n},{type:"kern",size:o}]},t);return Qe.makeSpan(["mord","overline"],[i],t)},mathmlBuilder:function(e,t){var r=new Nt.MathNode("mo",[new Nt.TextNode("‾")]);r.setAttribute("stretchy","true");var n=new Nt.MathNode("mover",[Bt(e.body,t),r]);return n.setAttribute("accent","true"),n}}),lt({type:"phantom",names:["\\phantom"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){var r=e.parser,n=t[0];return{type:"phantom",mode:r.mode,body:pt(n)}},htmlBuilder:function(e,t){var r=vt(e.body,t.withPhantom(),!1);return Qe.makeFragment(r)},mathmlBuilder:function(e,t){var r=It(e.body,t);return new Nt.MathNode("mphantom",r)}}),lt({type:"hphantom",names:["\\hphantom"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){var r=e.parser,n=t[0];return{type:"hphantom",mode:r.mode,body:n}},htmlBuilder:function(e,t){var r=Qe.makeSpan([],[kt(e.body,t.withPhantom())]);if(r.height=0,r.depth=0,r.children)for(var n=0;n<r.children.length;n++)r.children[n].height=0,r.children[n].depth=0;return r=Qe.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:r}]},t),Qe.makeSpan(["mord"],[r],t)},mathmlBuilder:function(e,t){var r=It(pt(e.body),t),n=new Nt.MathNode("mphantom",r),o=new Nt.MathNode("mpadded",[n]);return o.setAttribute("height","0px"),o.setAttribute("depth","0px"),o}}),lt({type:"vphantom",names:["\\vphantom"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){var r=e.parser,n=t[0];return{type:"vphantom",mode:r.mode,body:n}},htmlBuilder:function(e,t){var r=Qe.makeSpan(["inner"],[kt(e.body,t.withPhantom())]),n=Qe.makeSpan(["fix"],[]);return Qe.makeSpan(["mord","rlap"],[r,n],t)},mathmlBuilder:function(e,t){var r=It(pt(e.body),t),n=new Nt.MathNode("mphantom",r),o=new Nt.MathNode("mpadded",[n]);return o.setAttribute("width","0px"),o}}),lt({type:"raisebox",names:["\\raisebox"],props:{numArgs:2,argTypes:["size","hbox"],allowedInText:!0},handler:function(e,t){var r=e.parser,n=$t(t[0],"size").value,o=t[1];return{type:"raisebox",mode:r.mode,dy:n,body:o}},htmlBuilder:function(e,t){var r=kt(e.body,t),n=He(e.dy,t);return Qe.makeVList({positionType:"shift",positionData:-n,children:[{type:"elem",elem:r}]},t)},mathmlBuilder:function(e,t){var r=new Nt.MathNode("mpadded",[Bt(e.body,t)]),n=e.dy.number+e.dy.unit;return r.setAttribute("voffset",n),r}}),lt({type:"rule",names:["\\rule"],props:{numArgs:2,numOptionalArgs:1,argTypes:["size","size","size"]},handler:function(e,t,r){var n=e.parser,o=r[0],i=$t(t[0],"size"),a=$t(t[1],"size");return{type:"rule",mode:n.mode,shift:o&&$t(o,"size").value,width:i.value,height:a.value}},htmlBuilder:function(e,t){var r=Qe.makeSpan(["mord","rule"],[],t),n=He(e.width,t),o=He(e.height,t),i=e.shift?He(e.shift,t):0;return r.style.borderRightWidth=n+"em",r.style.borderTopWidth=o+"em",r.style.bottom=i+"em",r.width=n,r.height=o+i,r.depth=-i,r.maxFontSize=1.125*o*t.sizeMultiplier,r},mathmlBuilder:function(e,t){var r=He(e.width,t),n=He(e.height,t),o=e.shift?He(e.shift,t):0,i=t.color&&t.getColor()||"black",a=new Nt.MathNode("mspace");a.setAttribute("mathbackground",i),a.setAttribute("width",r+"em"),a.setAttribute("height",n+"em");var s=new Nt.MathNode("mpadded",[a]);return o>=0?s.setAttribute("height","+"+o+"em"):(s.setAttribute("height",o+"em"),s.setAttribute("depth","+"+-o+"em")),s.setAttribute("voffset",o+"em"),s}});var bn=["\\tiny","\\sixptsize","\\scriptsize","\\footnotesize","\\small","\\normalsize","\\large","\\Large","\\LARGE","\\huge","\\Huge"];lt({type:"sizing",names:bn,props:{numArgs:0,allowedInText:!0},handler:function(e,t){var r=e.breakOnTokenText,n=e.funcName,o=e.parser,i=o.parseExpression(!1,r);return{type:"sizing",mode:o.mode,size:bn.indexOf(n)+1,body:i}},htmlBuilder:function(e,t){var r=t.havingSize(e.size);return yn(e.body,r,t)},mathmlBuilder:function(e,t){var r=t.havingSize(e.size),n=It(e.body,r),o=new Nt.MathNode("mstyle",n);return o.setAttribute("mathsize",r.sizeMultiplier+"em"),o}}),lt({type:"smash",names:["\\smash"],props:{numArgs:1,numOptionalArgs:1,allowedInText:!0},handler:function(e,t,r){var n=e.parser,o=!1,i=!1,a=r[0]&&$t(r[0],"ordgroup");if(a)for(var s="",l=0;l<a.body.length;++l)if("t"===(s=a.body[l].text))o=!0;else{if("b"!==s){o=!1,i=!1;break}i=!0}else o=!0,i=!0;var c=t[0];return{type:"smash",mode:n.mode,body:c,smashHeight:o,smashDepth:i}},htmlBuilder:function(e,t){var r=Qe.makeSpan([],[kt(e.body,t)]);if(!e.smashHeight&&!e.smashDepth)return r;if(e.smashHeight&&(r.height=0,r.children))for(var n=0;n<r.children.length;n++)r.children[n].height=0;if(e.smashDepth&&(r.depth=0,r.children))for(var o=0;o<r.children.length;o++)r.children[o].depth=0;var i=Qe.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:r}]},t);return Qe.makeSpan(["mord"],[i],t)},mathmlBuilder:function(e,t){var r=new Nt.MathNode("mpadded",[Bt(e.body,t)]);return e.smashHeight&&r.setAttribute("height","0px"),e.smashDepth&&r.setAttribute("depth","0px"),r}}),lt({type:"sqrt",names:["\\sqrt"],props:{numArgs:1,numOptionalArgs:1},handler:function(e,t,r){var n=e.parser,o=r[0],i=t[0];return{type:"sqrt",mode:n.mode,body:i,index:o}},htmlBuilder:function(e,t){var r=kt(e.body,t.havingCrampedStyle());0===r.height&&(r.height=t.fontMetrics().xHeight),r=Qe.wrapFragment(r,t);var n=t.fontMetrics().defaultRuleThickness,o=n;t.style.id<M.TEXT.id&&(o=t.fontMetrics().xHeight);var i=n+o/4,a=function(e,t){var r,n,o=t.havingBaseSizing(),i=Mr("\\surd",e*o.sizeMultiplier,Sr,o),a=o.sizeMultiplier,s=Math.max(0,t.minRuleThickness-t.fontMetrics().sqrtRuleThickness),l=0,c=0,h=0;return"small"===i.type?(e<1?a=1:e<1.4&&(a=.7),c=(1+s)/a,(r=mr("sqrtMain",l=(1+s+fr)/a,h=1e3+1e3*s+80,s,t)).style.minWidth="0.853em",n=.833/a):"large"===i.type?(h=1080*br[i.size],c=(br[i.size]+s)/a,l=(br[i.size]+s+fr)/a,(r=mr("sqrtSize"+i.size,l,h,s,t)).style.minWidth="1.02em",n=1/a):(l=e+s+fr,c=e+s,h=Math.floor(1e3*e+s)+80,(r=mr("sqrtTall",l,h,s,t)).style.minWidth="0.742em",n=1.056),r.height=c,r.style.height=l+"em",{span:r,advanceWidth:n,ruleWidth:(t.fontMetrics().sqrtRuleThickness+s)*a}}(r.height+r.depth+i+n,t),s=a.span,l=a.ruleWidth,c=a.advanceWidth,h=s.height-l;h>r.height+r.depth+i&&(i=(i+h-r.height-r.depth)/2);var p=s.height-r.height-i-l;r.style.paddingLeft=c+"em";var u=Qe.makeVList({positionType:"firstBaseline",children:[{type:"elem",elem:r,wrapperClasses:["svg-align"]},{type:"kern",size:-(r.height+p)},{type:"elem",elem:s},{type:"kern",size:l}]},t);if(e.index){var d=t.havingStyle(M.SCRIPTSCRIPT),f=kt(e.index,d,t),m=.6*(u.height-u.depth),g=Qe.makeVList({positionType:"shift",positionData:-m,children:[{type:"elem",elem:f}]},t),v=Qe.makeSpan(["root"],[g]);return Qe.makeSpan(["mord","sqrt"],[v,u],t)}return Qe.makeSpan(["mord","sqrt"],[u],t)},mathmlBuilder:function(e,t){var r=e.body,n=e.index;return n?new Nt.MathNode("mroot",[Bt(r,t),Bt(n,t)]):new Nt.MathNode("msqrt",[Bt(r,t)])}});var wn={display:M.DISPLAY,text:M.TEXT,script:M.SCRIPT,scriptscript:M.SCRIPTSCRIPT};lt({type:"styling",names:["\\displaystyle","\\textstyle","\\scriptstyle","\\scriptscriptstyle"],props:{numArgs:0,allowedInText:!0,primitive:!0},handler:function(e,t){var r=e.breakOnTokenText,n=e.funcName,o=e.parser,i=o.parseExpression(!0,r),a=n.slice(1,n.length-5);return{type:"styling",mode:o.mode,style:a,body:i}},htmlBuilder:function(e,t){var r=wn[e.style],n=t.havingStyle(r).withFont("");return yn(e.body,n,t)},mathmlBuilder:function(e,t){var r=wn[e.style],n=t.havingStyle(r),o=It(e.body,n),i=new Nt.MathNode("mstyle",o),a={display:["0","true"],text:["0","false"],script:["1","false"],scriptscript:["2","false"]}[e.style];return i.setAttribute("scriptlevel",a[0]),i.setAttribute("displaystyle",a[1]),i}});ct({type:"supsub",htmlBuilder:function(e,t){var r=function(e,t){var r=e.base;return r?"op"===r.type?r.limits&&(t.style.size===M.DISPLAY.size||r.alwaysHandleSupSub)?pn:null:"operatorname"===r.type?r.alwaysHandleSupSub&&(t.style.size===M.DISPLAY.size||r.limits)?vn:null:"accent"===r.type?d(r.base)?Kt:null:"horizBrace"===r.type&&!e.sub===r.isOver?an:null:null}(e,t);if(r)return r(e,t);var n,o,i,a=e.base,s=e.sup,l=e.sub,c=kt(a,t),h=t.fontMetrics(),p=0,u=0,f=a&&d(a);if(s){var m=t.havingStyle(t.style.sup());n=kt(s,m,t),f||(p=c.height-m.fontMetrics().supDrop*m.sizeMultiplier/t.sizeMultiplier)}if(l){var g=t.havingStyle(t.style.sub());o=kt(l,g,t),f||(u=c.depth+g.fontMetrics().subDrop*g.sizeMultiplier/t.sizeMultiplier)}i=t.style===M.DISPLAY?h.sup1:t.style.cramped?h.sup3:h.sup2;var v,y=t.sizeMultiplier,b=.5/h.ptPerEm/y+"em",w=null;if(o){var x=e.base&&"op"===e.base.type&&e.base.name&&("\\oiint"===e.base.name||"\\oiiint"===e.base.name);(c instanceof q||x)&&(w=-c.italic+"em")}if(n&&o){p=Math.max(p,i,n.depth+.25*h.xHeight),u=Math.max(u,h.sub2);var S=4*h.defaultRuleThickness;if(p-n.depth-(o.height-u)<S){u=S-(p-n.depth)+o.height;var k=.8*h.xHeight-(p-n.depth);k>0&&(p+=k,u-=k)}v=Qe.makeVList({positionType:"individualShift",children:[{type:"elem",elem:o,shift:u,marginRight:b,marginLeft:w},{type:"elem",elem:n,shift:-p,marginRight:b}]},t)}else if(o){u=Math.max(u,h.sub1,o.height-.8*h.xHeight),v=Qe.makeVList({positionType:"shift",positionData:u,children:[{type:"elem",elem:o,marginLeft:w,marginRight:b}]},t)}else{if(!n)throw new Error("supsub must have either sup or sub.");p=Math.max(p,i,n.depth+.25*h.xHeight),v=Qe.makeVList({positionType:"shift",positionData:-p,children:[{type:"elem",elem:n,marginRight:b}]},t)}var T=xt(c,"right")||"mord";return Qe.makeSpan([T],[c,Qe.makeSpan(["msupsub"],[v])],t)},mathmlBuilder:function(e,t){var r,n=!1;e.base&&"horizBrace"===e.base.type&&!!e.sup===e.base.isOver&&(n=!0,r=e.base.isOver),!e.base||"op"!==e.base.type&&"operatorname"!==e.base.type||(e.base.parentIsSupSub=!0);var o,i=[Bt(e.base,t)];if(e.sub&&i.push(Bt(e.sub,t)),e.sup&&i.push(Bt(e.sup,t)),n)o=r?"mover":"munder";else if(e.sub)if(e.sup){var a=e.base;o=a&&"op"===a.type&&a.limits&&t.style===M.DISPLAY||a&&"operatorname"===a.type&&a.alwaysHandleSupSub&&(t.style===M.DISPLAY||a.limits)?"munderover":"msubsup"}else{var s=e.base;o=s&&"op"===s.type&&s.limits&&(t.style===M.DISPLAY||s.alwaysHandleSupSub)||s&&"operatorname"===s.type&&s.alwaysHandleSupSub&&(s.limits||t.style===M.DISPLAY)?"munder":"msub"}else{var l=e.base;o=l&&"op"===l.type&&l.limits&&(t.style===M.DISPLAY||l.alwaysHandleSupSub)||l&&"operatorname"===l.type&&l.alwaysHandleSupSub&&(l.limits||t.style===M.DISPLAY)?"mover":"msup"}return new Nt.MathNode(o,i)}}),ct({type:"atom",htmlBuilder:function(e,t){return Qe.mathsym(e.text,e.mode,t,["m"+e.family])},mathmlBuilder:function(e,t){var r=new Nt.MathNode("mo",[zt(e.text,e.mode)]);if("bin"===e.family){var n=Dt(e,t);"bold-italic"===n&&r.setAttribute("mathvariant",n)}else"punct"===e.family?r.setAttribute("separator","true"):"open"!==e.family&&"close"!==e.family||r.setAttribute("stretchy","false");return r}});var xn={mi:"italic",mn:"normal",mtext:"normal"};ct({type:"mathord",htmlBuilder:function(e,t){return Qe.makeOrd(e,t,"mathord")},mathmlBuilder:function(e,t){var r=new Nt.MathNode("mi",[zt(e.text,e.mode,t)]),n=Dt(e,t)||"italic";return n!==xn[r.type]&&r.setAttribute("mathvariant",n),r}}),ct({type:"textord",htmlBuilder:function(e,t){return Qe.makeOrd(e,t,"textord")},mathmlBuilder:function(e,t){var r,n=zt(e.text,e.mode,t),o=Dt(e,t)||"normal";return r="text"===e.mode?new Nt.MathNode("mtext",[n]):/[0-9]/.test(e.text)?new Nt.MathNode("mn",[n]):"\\prime"===e.text?new Nt.MathNode("mo",[n]):new Nt.MathNode("mi",[n]),o!==xn[r.type]&&r.setAttribute("mathvariant",o),r}});var Sn={"\\nobreak":"nobreak","\\allowbreak":"allowbreak"},kn={" ":{},"\\ ":{},"~":{className:"nobreak"},"\\space":{},"\\nobreakspace":{className:"nobreak"}};ct({type:"spacing",htmlBuilder:function(e,t){if(kn.hasOwnProperty(e.text)){var r=kn[e.text].className||"";if("text"===e.mode){var o=Qe.makeOrd(e,t,"textord");return o.classes.push(r),o}return Qe.makeSpan(["mspace",r],[Qe.mathsym(e.text,e.mode,t)],t)}if(Sn.hasOwnProperty(e.text))return Qe.makeSpan(["mspace",Sn[e.text]],[],t);throw new n('Unknown type of space "'+e.text+'"')},mathmlBuilder:function(e,t){if(!kn.hasOwnProperty(e.text)){if(Sn.hasOwnProperty(e.text))return new Nt.MathNode("mspace");throw new n('Unknown type of space "'+e.text+'"')}return new Nt.MathNode("mtext",[new Nt.TextNode(" ")])}});var Mn=function(){var e=new Nt.MathNode("mtd",[]);return e.setAttribute("width","50%"),e};ct({type:"tag",mathmlBuilder:function(e,t){var r=new Nt.MathNode("mtable",[new Nt.MathNode("mtr",[Mn(),new Nt.MathNode("mtd",[Rt(e.body,t)]),Mn(),new Nt.MathNode("mtd",[Rt(e.tag,t)])])]);return r.setAttribute("width","100%"),r}});var Tn={"\\text":void 0,"\\textrm":"textrm","\\textsf":"textsf","\\texttt":"texttt","\\textnormal":"textrm"},An={"\\textbf":"textbf","\\textmd":"textmd"},On={"\\textit":"textit","\\textup":"textup"},Cn=function(e,t){var r=e.font;return r?Tn[r]?t.withTextFontFamily(Tn[r]):An[r]?t.withTextFontWeight(An[r]):t.withTextFontShape(On[r]):t};lt({type:"text",names:["\\text","\\textrm","\\textsf","\\texttt","\\textnormal","\\textbf","\\textmd","\\textit","\\textup"],props:{numArgs:1,argTypes:["text"],allowedInArgument:!0,allowedInText:!0},handler:function(e,t){var r=e.parser,n=e.funcName,o=t[0];return{type:"text",mode:r.mode,body:pt(o),font:n}},htmlBuilder:function(e,t){var r=Cn(e,t),n=vt(e.body,r,!0);return Qe.makeSpan(["mord","text"],n,r)},mathmlBuilder:function(e,t){var r=Cn(e,t);return Rt(e.body,r)}}),lt({type:"underline",names:["\\underline"],props:{numArgs:1,allowedInText:!0},handler:function(e,t){return{type:"underline",mode:e.parser.mode,body:t[0]}},htmlBuilder:function(e,t){var r=kt(e.body,t),n=Qe.makeLineSpan("underline-line",t),o=t.fontMetrics().defaultRuleThickness,i=Qe.makeVList({positionType:"top",positionData:r.height,children:[{type:"kern",size:o},{type:"elem",elem:n},{type:"kern",size:3*o},{type:"elem",elem:r}]},t);return Qe.makeSpan(["mord","underline"],[i],t)},mathmlBuilder:function(e,t){var r=new Nt.MathNode("mo",[new Nt.TextNode("‾")]);r.setAttribute("stretchy","true");var n=new Nt.MathNode("munder",[Bt(e.body,t),r]);return n.setAttribute("accentunder","true"),n}}),lt({type:"vcenter",names:["\\vcenter"],props:{numArgs:1,argTypes:["original"],allowedInText:!1},handler:function(e,t){return{type:"vcenter",mode:e.parser.mode,body:t[0]}},htmlBuilder:function(e,t){var r=kt(e.body,t),n=t.fontMetrics().axisHeight,o=.5*(r.height-n-(r.depth+n));return Qe.makeVList({positionType:"shift",positionData:o,children:[{type:"elem",elem:r}]},t)},mathmlBuilder:function(e,t){return new Nt.MathNode("mpadded",[Bt(e.body,t)],["vcenter"])}}),lt({type:"verb",names:["\\verb"],props:{numArgs:0,allowedInText:!0},handler:function(e,t,r){throw new n("\\verb ended by end of line instead of matching delimiter")},htmlBuilder:function(e,t){for(var r=Nn(e),n=[],o=t.havingStyle(t.style.text()),i=0;i<r.length;i++){var a=r[i];"~"===a&&(a="\\textasciitilde"),n.push(Qe.makeSymbol(a,"Typewriter-Regular",e.mode,o,["mord","texttt"]))}return Qe.makeSpan(["mord","text"].concat(o.sizingClasses(t)),Qe.tryCombineChars(n),o)},mathmlBuilder:function(e,t){var r=new Nt.TextNode(Nn(e)),n=new Nt.MathNode("mtext",[r]);return n.setAttribute("mathvariant","monospace"),n}});var Nn=function(e){return e.body.replace(/ /g,e.star?"␣":" ")},zn=it,En=function(){function e(e,t,r){this.lexer=void 0,this.start=void 0,this.end=void 0,this.lexer=e,this.start=t,this.end=r}return e.range=function(t,r){return r?t&&t.loc&&r.loc&&t.loc.lexer===r.loc.lexer?new e(t.loc.lexer,t.loc.start,r.loc.end):null:t&&t.loc},e}(),Dn=function(){function e(e,t){this.text=void 0,this.loc=void 0,this.noexpand=void 0,this.treatAsRelax=void 0,this.text=e,this.loc=t}return e.prototype.range=function(t,r){return new e(r,En.range(this,t))},e}(),In=new RegExp("[̀-ͯ]+$"),Rn=function(){function e(e,t){this.input=void 0,this.settings=void 0,this.tokenRegex=void 0,this.catcodes=void 0,this.input=e,this.settings=t,this.tokenRegex=new RegExp("([ \r\n\t]+)|\\\\(\n|[ \r\t]+\n?)[ \r\t]*|([!-\\[\\]-‧‪-퟿豈-￿][̀-ͯ]*|[\ud800-\udbff][\udc00-\udfff][̀-ͯ]*|\\\\verb\\*([^]).*?\\4|\\\\verb([^*a-zA-Z]).*?\\5|(\\\\[a-zA-Z@]+)[ \r\n\t]*|\\\\[^\ud800-\udfff])","g"),this.catcodes={"%":14,"~":13}}var t=e.prototype;return t.setCatcode=function(e,t){this.catcodes[e]=t},t.lex=function(){var e=this.input,t=this.tokenRegex.lastIndex;if(t===e.length)return new Dn("EOF",new En(this,t,t));var r=this.tokenRegex.exec(e);if(null===r||r.index!==t)throw new n("Unexpected character: '"+e[t]+"'",new Dn(e[t],new En(this,t,t+1)));var o=r[6]||r[3]||(r[2]?"\\ ":" ");if(14===this.catcodes[o]){var i=e.indexOf("\n",this.tokenRegex.lastIndex);return-1===i?(this.tokenRegex.lastIndex=e.length,this.settings.reportNonstrict("commentAtEnd","% comment has no terminating newline; LaTeX would fail because of commenting the end of math mode (e.g. $)")):this.tokenRegex.lastIndex=i+1,this.lex()}return new Dn(o,new En(this,t,this.tokenRegex.lastIndex))},e}(),Bn=function(){function e(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.current=void 0,this.builtins=void 0,this.undefStack=void 0,this.current=t,this.builtins=e,this.undefStack=[]}var t=e.prototype;return t.beginGroup=function(){this.undefStack.push({})},t.endGroup=function(){if(0===this.undefStack.length)throw new n("Unbalanced namespace destruction: attempt to pop global namespace; please report this as a bug");var e=this.undefStack.pop();for(var t in e)e.hasOwnProperty(t)&&(void 0===e[t]?delete this.current[t]:this.current[t]=e[t])},t.endGroups=function(){for(;this.undefStack.length>0;)this.endGroup()},t.has=function(e){return this.current.hasOwnProperty(e)||this.builtins.hasOwnProperty(e)},t.get=function(e){return this.current.hasOwnProperty(e)?this.current[e]:this.builtins[e]},t.set=function(e,t,r){if(void 0===r&&(r=!1),r){for(var n=0;n<this.undefStack.length;n++)delete this.undefStack[n][e];this.undefStack.length>0&&(this.undefStack[this.undefStack.length-1][e]=t)}else{var o=this.undefStack[this.undefStack.length-1];o&&!o.hasOwnProperty(e)&&(o[e]=this.current[e])}this.current[e]=t},e}(),Pn=mn;gn("\\noexpand",(function(e){var t=e.popToken();return e.isExpandable(t.text)&&(t.noexpand=!0,t.treatAsRelax=!0),{tokens:[t],numArgs:0}})),gn("\\expandafter",(function(e){var t=e.popToken();return e.expandOnce(!0),{tokens:[t],numArgs:0}})),gn("\\@firstoftwo",(function(e){return{tokens:e.consumeArgs(2)[0],numArgs:0}})),gn("\\@secondoftwo",(function(e){return{tokens:e.consumeArgs(2)[1],numArgs:0}})),gn("\\@ifnextchar",(function(e){var t=e.consumeArgs(3);e.consumeSpaces();var r=e.future();return 1===t[0].length&&t[0][0].text===r.text?{tokens:t[1],numArgs:0}:{tokens:t[2],numArgs:0}})),gn("\\@ifstar","\\@ifnextchar *{\\@firstoftwo{#1}}"),gn("\\TextOrMath",(function(e){var t=e.consumeArgs(2);return"text"===e.mode?{tokens:t[0],numArgs:0}:{tokens:t[1],numArgs:0}}));var _n={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,a:10,A:10,b:11,B:11,c:12,C:12,d:13,D:13,e:14,E:14,f:15,F:15};gn("\\char",(function(e){var t,r=e.popToken(),o="";if("'"===r.text)t=8,r=e.popToken();else if('"'===r.text)t=16,r=e.popToken();else if("`"===r.text)if("\\"===(r=e.popToken()).text[0])o=r.text.charCodeAt(1);else{if("EOF"===r.text)throw new n("\\char` missing argument");o=r.text.charCodeAt(0)}else t=10;if(t){if(null==(o=_n[r.text])||o>=t)throw new n("Invalid base-"+t+" digit "+r.text);for(var i;null!=(i=_n[e.future().text])&&i<t;)o*=t,o+=i,e.popToken()}return"\\@char{"+o+"}"}));var qn=function(e,t,r){var o=e.consumeArg().tokens;if(1!==o.length)throw new n("\\newcommand's first argument must be a macro name");var i=o[0].text,a=e.isDefined(i);if(a&&!t)throw new n("\\newcommand{"+i+"} attempting to redefine "+i+"; use \\renewcommand");if(!a&&!r)throw new n("\\renewcommand{"+i+"} when command "+i+" does not yet exist; use \\newcommand");var s=0;if(1===(o=e.consumeArg().tokens).length&&"["===o[0].text){for(var l="",c=e.expandNextToken();"]"!==c.text&&"EOF"!==c.text;)l+=c.text,c=e.expandNextToken();if(!l.match(/^\s*[0-9]+\s*$/))throw new n("Invalid number of arguments: "+l);s=parseInt(l),o=e.consumeArg().tokens}return e.macros.set(i,{tokens:o,numArgs:s}),""};gn("\\newcommand",(function(e){return qn(e,!1,!0)})),gn("\\renewcommand",(function(e){return qn(e,!0,!1)})),gn("\\providecommand",(function(e){return qn(e,!0,!0)})),gn("\\message",(function(e){var t=e.consumeArgs(1)[0];return console.log(t.reverse().map((function(e){return e.text})).join("")),""})),gn("\\errmessage",(function(e){var t=e.consumeArgs(1)[0];return console.error(t.reverse().map((function(e){return e.text})).join("")),""})),gn("\\show",(function(e){var t=e.popToken(),r=t.text;return console.log(t,e.macros.get(r),zn[r],X.math[r],X.text[r]),""})),gn("\\bgroup","{"),gn("\\egroup","}"),gn("~","\\nobreakspace"),gn("\\lq","`"),gn("\\rq","'"),gn("\\aa","\\r a"),gn("\\AA","\\r A"),gn("\\textcopyright","\\html@mathml{\\textcircled{c}}{\\char`©}"),gn("\\copyright","\\TextOrMath{\\textcopyright}{\\text{\\textcopyright}}"),gn("\\textregistered","\\html@mathml{\\textcircled{\\scriptsize R}}{\\char`®}"),gn("ℬ","\\mathscr{B}"),gn("ℰ","\\mathscr{E}"),gn("ℱ","\\mathscr{F}"),gn("ℋ","\\mathscr{H}"),gn("ℐ","\\mathscr{I}"),gn("ℒ","\\mathscr{L}"),gn("ℳ","\\mathscr{M}"),gn("ℛ","\\mathscr{R}"),gn("ℭ","\\mathfrak{C}"),gn("ℌ","\\mathfrak{H}"),gn("ℨ","\\mathfrak{Z}"),gn("\\Bbbk","\\Bbb{k}"),gn("·","\\cdotp"),gn("\\llap","\\mathllap{\\textrm{#1}}"),gn("\\rlap","\\mathrlap{\\textrm{#1}}"),gn("\\clap","\\mathclap{\\textrm{#1}}"),gn("\\mathstrut","\\vphantom{(}"),gn("\\underbar","\\underline{\\text{#1}}"),gn("\\not",'\\html@mathml{\\mathrel{\\mathrlap\\@not}}{\\char"338}'),gn("\\neq","\\html@mathml{\\mathrel{\\not=}}{\\mathrel{\\char`≠}}"),gn("\\ne","\\neq"),gn("≠","\\neq"),gn("\\notin","\\html@mathml{\\mathrel{{\\in}\\mathllap{/\\mskip1mu}}}{\\mathrel{\\char`∉}}"),gn("∉","\\notin"),gn("≘","\\html@mathml{\\mathrel{=\\kern{-1em}\\raisebox{0.4em}{$\\scriptsize\\frown$}}}{\\mathrel{\\char`≘}}"),gn("≙","\\html@mathml{\\stackrel{\\tiny\\wedge}{=}}{\\mathrel{\\char`≘}}"),gn("≚","\\html@mathml{\\stackrel{\\tiny\\vee}{=}}{\\mathrel{\\char`≚}}"),gn("≛","\\html@mathml{\\stackrel{\\scriptsize\\star}{=}}{\\mathrel{\\char`≛}}"),gn("≝","\\html@mathml{\\stackrel{\\tiny\\mathrm{def}}{=}}{\\mathrel{\\char`≝}}"),gn("≞","\\html@mathml{\\stackrel{\\tiny\\mathrm{m}}{=}}{\\mathrel{\\char`≞}}"),gn("≟","\\html@mathml{\\stackrel{\\tiny?}{=}}{\\mathrel{\\char`≟}}"),gn("⟂","\\perp"),gn("‼","\\mathclose{!\\mkern-0.8mu!}"),gn("∌","\\notni"),gn("⌜","\\ulcorner"),gn("⌝","\\urcorner"),gn("⌞","\\llcorner"),gn("⌟","\\lrcorner"),gn("©","\\copyright"),gn("®","\\textregistered"),gn("️","\\textregistered"),gn("\\ulcorner",'\\html@mathml{\\@ulcorner}{\\mathop{\\char"231c}}'),gn("\\urcorner",'\\html@mathml{\\@urcorner}{\\mathop{\\char"231d}}'),gn("\\llcorner",'\\html@mathml{\\@llcorner}{\\mathop{\\char"231e}}'),gn("\\lrcorner",'\\html@mathml{\\@lrcorner}{\\mathop{\\char"231f}}'),gn("\\vdots","\\mathord{\\varvdots\\rule{0pt}{15pt}}"),gn("⋮","\\vdots"),gn("\\varGamma","\\mathit{\\Gamma}"),gn("\\varDelta","\\mathit{\\Delta}"),gn("\\varTheta","\\mathit{\\Theta}"),gn("\\varLambda","\\mathit{\\Lambda}"),gn("\\varXi","\\mathit{\\Xi}"),gn("\\varPi","\\mathit{\\Pi}"),gn("\\varSigma","\\mathit{\\Sigma}"),gn("\\varUpsilon","\\mathit{\\Upsilon}"),gn("\\varPhi","\\mathit{\\Phi}"),gn("\\varPsi","\\mathit{\\Psi}"),gn("\\varOmega","\\mathit{\\Omega}"),gn("\\substack","\\begin{subarray}{c}#1\\end{subarray}"),gn("\\colon","\\nobreak\\mskip2mu\\mathpunct{}\\mathchoice{\\mkern-3mu}{\\mkern-3mu}{}{}{:}\\mskip6mu"),gn("\\boxed","\\fbox{$\\displaystyle{#1}$}"),gn("\\iff","\\DOTSB\\;\\Longleftrightarrow\\;"),gn("\\implies","\\DOTSB\\;\\Longrightarrow\\;"),gn("\\impliedby","\\DOTSB\\;\\Longleftarrow\\;");var Ln={",":"\\dotsc","\\not":"\\dotsb","+":"\\dotsb","=":"\\dotsb","<":"\\dotsb",">":"\\dotsb","-":"\\dotsb","*":"\\dotsb",":":"\\dotsb","\\DOTSB":"\\dotsb","\\coprod":"\\dotsb","\\bigvee":"\\dotsb","\\bigwedge":"\\dotsb","\\biguplus":"\\dotsb","\\bigcap":"\\dotsb","\\bigcup":"\\dotsb","\\prod":"\\dotsb","\\sum":"\\dotsb","\\bigotimes":"\\dotsb","\\bigoplus":"\\dotsb","\\bigodot":"\\dotsb","\\bigsqcup":"\\dotsb","\\And":"\\dotsb","\\longrightarrow":"\\dotsb","\\Longrightarrow":"\\dotsb","\\longleftarrow":"\\dotsb","\\Longleftarrow":"\\dotsb","\\longleftrightarrow":"\\dotsb","\\Longleftrightarrow":"\\dotsb","\\mapsto":"\\dotsb","\\longmapsto":"\\dotsb","\\hookrightarrow":"\\dotsb","\\doteq":"\\dotsb","\\mathbin":"\\dotsb","\\mathrel":"\\dotsb","\\relbar":"\\dotsb","\\Relbar":"\\dotsb","\\xrightarrow":"\\dotsb","\\xleftarrow":"\\dotsb","\\DOTSI":"\\dotsi","\\int":"\\dotsi","\\oint":"\\dotsi","\\iint":"\\dotsi","\\iiint":"\\dotsi","\\iiiint":"\\dotsi","\\idotsint":"\\dotsi","\\DOTSX":"\\dotsx"};gn("\\dots",(function(e){var t="\\dotso",r=e.expandAfterFuture().text;return r in Ln?t=Ln[r]:("\\not"===r.substr(0,4)||r in X.math&&l(["bin","rel"],X.math[r].group))&&(t="\\dotsb"),t}));var Fn={")":!0,"]":!0,"\\rbrack":!0,"\\}":!0,"\\rbrace":!0,"\\rangle":!0,"\\rceil":!0,"\\rfloor":!0,"\\rgroup":!0,"\\rmoustache":!0,"\\right":!0,"\\bigr":!0,"\\biggr":!0,"\\Bigr":!0,"\\Biggr":!0,$:!0,";":!0,".":!0,",":!0};gn("\\dotso",(function(e){return e.future().text in Fn?"\\ldots\\,":"\\ldots"})),gn("\\dotsc",(function(e){var t=e.future().text;return t in Fn&&","!==t?"\\ldots\\,":"\\ldots"})),gn("\\cdots",(function(e){return e.future().text in Fn?"\\@cdots\\,":"\\@cdots"})),gn("\\dotsb","\\cdots"),gn("\\dotsm","\\cdots"),gn("\\dotsi","\\!\\cdots"),gn("\\dotsx","\\ldots\\,"),gn("\\DOTSI","\\relax"),gn("\\DOTSB","\\relax"),gn("\\DOTSX","\\relax"),gn("\\tmspace","\\TextOrMath{\\kern#1#3}{\\mskip#1#2}\\relax"),gn("\\,","\\tmspace+{3mu}{.1667em}"),gn("\\thinspace","\\,"),gn("\\>","\\mskip{4mu}"),gn("\\:","\\tmspace+{4mu}{.2222em}"),gn("\\medspace","\\:"),gn("\\;","\\tmspace+{5mu}{.2777em}"),gn("\\thickspace","\\;"),gn("\\!","\\tmspace-{3mu}{.1667em}"),gn("\\negthinspace","\\!"),gn("\\negmedspace","\\tmspace-{4mu}{.2222em}"),gn("\\negthickspace","\\tmspace-{5mu}{.277em}"),gn("\\enspace","\\kern.5em "),gn("\\enskip","\\hskip.5em\\relax"),gn("\\quad","\\hskip1em\\relax"),gn("\\qquad","\\hskip2em\\relax"),gn("\\tag","\\@ifstar\\tag@literal\\tag@paren"),gn("\\tag@paren","\\tag@literal{({#1})}"),gn("\\tag@literal",(function(e){if(e.macros.get("\\df@tag"))throw new n("Multiple \\tag");return"\\gdef\\df@tag{\\text{#1}}"})),gn("\\bmod","\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}\\mathbin{\\rm mod}\\mathchoice{\\mskip1mu}{\\mskip1mu}{\\mskip5mu}{\\mskip5mu}"),gn("\\pod","\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern8mu}{\\mkern8mu}{\\mkern8mu}(#1)"),gn("\\pmod","\\pod{{\\rm mod}\\mkern6mu#1}"),gn("\\mod","\\allowbreak\\mathchoice{\\mkern18mu}{\\mkern12mu}{\\mkern12mu}{\\mkern12mu}{\\rm mod}\\,\\,#1"),gn("\\pmb","\\html@mathml{\\@binrel{#1}{\\mathrlap{#1}\\kern0.5px#1}}{\\mathbf{#1}}"),gn("\\newline","\\\\\\relax"),gn("\\TeX","\\textrm{\\html@mathml{T\\kern-.1667em\\raisebox{-.5ex}{E}\\kern-.125emX}{TeX}}");var Vn=$["Main-Regular"]["T".charCodeAt(0)][1]-.7*$["Main-Regular"]["A".charCodeAt(0)][1]+"em";gn("\\LaTeX","\\textrm{\\html@mathml{L\\kern-.36em\\raisebox{"+Vn+"}{\\scriptstyle A}\\kern-.15em\\TeX}{LaTeX}}"),gn("\\KaTeX","\\textrm{\\html@mathml{K\\kern-.17em\\raisebox{"+Vn+"}{\\scriptstyle A}\\kern-.15em\\TeX}{KaTeX}}"),gn("\\hspace","\\@ifstar\\@hspacer\\@hspace"),gn("\\@hspace","\\hskip #1\\relax"),gn("\\@hspacer","\\rule{0pt}{0pt}\\hskip #1\\relax"),gn("\\ordinarycolon",":"),gn("\\vcentcolon","\\mathrel{\\mathop\\ordinarycolon}"),gn("\\dblcolon",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-.9mu}\\vcentcolon}}{\\mathop{\\char"2237}}'),gn("\\coloneqq",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2254}}'),gn("\\Coloneqq",'\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}=}}{\\mathop{\\char"2237\\char"3d}}'),gn("\\coloneq",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"3a\\char"2212}}'),gn("\\Coloneq",'\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\mathrel{-}}}{\\mathop{\\char"2237\\char"2212}}'),gn("\\eqqcolon",'\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2255}}'),gn("\\Eqqcolon",'\\html@mathml{\\mathrel{=\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"3d\\char"2237}}'),gn("\\eqcolon",'\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\vcentcolon}}{\\mathop{\\char"2239}}'),gn("\\Eqcolon",'\\html@mathml{\\mathrel{\\mathrel{-}\\mathrel{\\mkern-1.2mu}\\dblcolon}}{\\mathop{\\char"2212\\char"2237}}'),gn("\\colonapprox",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"3a\\char"2248}}'),gn("\\Colonapprox",'\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\approx}}{\\mathop{\\char"2237\\char"2248}}'),gn("\\colonsim",'\\html@mathml{\\mathrel{\\vcentcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"3a\\char"223c}}'),gn("\\Colonsim",'\\html@mathml{\\mathrel{\\dblcolon\\mathrel{\\mkern-1.2mu}\\sim}}{\\mathop{\\char"2237\\char"223c}}'),gn("∷","\\dblcolon"),gn("∹","\\eqcolon"),gn("≔","\\coloneqq"),gn("≕","\\eqqcolon"),gn("⩴","\\Coloneqq"),gn("\\ratio","\\vcentcolon"),gn("\\coloncolon","\\dblcolon"),gn("\\colonequals","\\coloneqq"),gn("\\coloncolonequals","\\Coloneqq"),gn("\\equalscolon","\\eqqcolon"),gn("\\equalscoloncolon","\\Eqqcolon"),gn("\\colonminus","\\coloneq"),gn("\\coloncolonminus","\\Coloneq"),gn("\\minuscolon","\\eqcolon"),gn("\\minuscoloncolon","\\Eqcolon"),gn("\\coloncolonapprox","\\Colonapprox"),gn("\\coloncolonsim","\\Colonsim"),gn("\\simcolon","\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\vcentcolon}"),gn("\\simcoloncolon","\\mathrel{\\sim\\mathrel{\\mkern-1.2mu}\\dblcolon}"),gn("\\approxcolon","\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\vcentcolon}"),gn("\\approxcoloncolon","\\mathrel{\\approx\\mathrel{\\mkern-1.2mu}\\dblcolon}"),gn("\\notni","\\html@mathml{\\not\\ni}{\\mathrel{\\char`∌}}"),gn("\\limsup","\\DOTSB\\operatorname*{lim\\,sup}"),gn("\\liminf","\\DOTSB\\operatorname*{lim\\,inf}"),gn("\\injlim","\\DOTSB\\operatorname*{inj\\,lim}"),gn("\\projlim","\\DOTSB\\operatorname*{proj\\,lim}"),gn("\\varlimsup","\\DOTSB\\operatorname*{\\overline{lim}}"),gn("\\varliminf","\\DOTSB\\operatorname*{\\underline{lim}}"),gn("\\varinjlim","\\DOTSB\\operatorname*{\\underrightarrow{lim}}"),gn("\\varprojlim","\\DOTSB\\operatorname*{\\underleftarrow{lim}}"),gn("\\gvertneqq","\\html@mathml{\\@gvertneqq}{≩}"),gn("\\lvertneqq","\\html@mathml{\\@lvertneqq}{≨}"),gn("\\ngeqq","\\html@mathml{\\@ngeqq}{≱}"),gn("\\ngeqslant","\\html@mathml{\\@ngeqslant}{≱}"),gn("\\nleqq","\\html@mathml{\\@nleqq}{≰}"),gn("\\nleqslant","\\html@mathml{\\@nleqslant}{≰}"),gn("\\nshortmid","\\html@mathml{\\@nshortmid}{∤}"),gn("\\nshortparallel","\\html@mathml{\\@nshortparallel}{∦}"),gn("\\nsubseteqq","\\html@mathml{\\@nsubseteqq}{⊈}"),gn("\\nsupseteqq","\\html@mathml{\\@nsupseteqq}{⊉}"),gn("\\varsubsetneq","\\html@mathml{\\@varsubsetneq}{⊊}"),gn("\\varsubsetneqq","\\html@mathml{\\@varsubsetneqq}{⫋}"),gn("\\varsupsetneq","\\html@mathml{\\@varsupsetneq}{⊋}"),gn("\\varsupsetneqq","\\html@mathml{\\@varsupsetneqq}{⫌}"),gn("\\imath","\\html@mathml{\\@imath}{ı}"),gn("\\jmath","\\html@mathml{\\@jmath}{ȷ}"),gn("\\llbracket","\\html@mathml{\\mathopen{[\\mkern-3.2mu[}}{\\mathopen{\\char`⟦}}"),gn("\\rrbracket","\\html@mathml{\\mathclose{]\\mkern-3.2mu]}}{\\mathclose{\\char`⟧}}"),gn("⟦","\\llbracket"),gn("⟧","\\rrbracket"),gn("\\lBrace","\\html@mathml{\\mathopen{\\{\\mkern-3.2mu[}}{\\mathopen{\\char`⦃}}"),gn("\\rBrace","\\html@mathml{\\mathclose{]\\mkern-3.2mu\\}}}{\\mathclose{\\char`⦄}}"),gn("⦃","\\lBrace"),gn("⦄","\\rBrace"),gn("\\minuso","\\mathbin{\\html@mathml{{\\mathrlap{\\mathchoice{\\kern{0.145em}}{\\kern{0.145em}}{\\kern{0.1015em}}{\\kern{0.0725em}}\\circ}{-}}}{\\char`⦵}}"),gn("⦵","\\minuso"),gn("\\darr","\\downarrow"),gn("\\dArr","\\Downarrow"),gn("\\Darr","\\Downarrow"),gn("\\lang","\\langle"),gn("\\rang","\\rangle"),gn("\\uarr","\\uparrow"),gn("\\uArr","\\Uparrow"),gn("\\Uarr","\\Uparrow"),gn("\\N","\\mathbb{N}"),gn("\\R","\\mathbb{R}"),gn("\\Z","\\mathbb{Z}"),gn("\\alef","\\aleph"),gn("\\alefsym","\\aleph"),gn("\\Alpha","\\mathrm{A}"),gn("\\Beta","\\mathrm{B}"),gn("\\bull","\\bullet"),gn("\\Chi","\\mathrm{X}"),gn("\\clubs","\\clubsuit"),gn("\\cnums","\\mathbb{C}"),gn("\\Complex","\\mathbb{C}"),gn("\\Dagger","\\ddagger"),gn("\\diamonds","\\diamondsuit"),gn("\\empty","\\emptyset"),gn("\\Epsilon","\\mathrm{E}"),gn("\\Eta","\\mathrm{H}"),gn("\\exist","\\exists"),gn("\\harr","\\leftrightarrow"),gn("\\hArr","\\Leftrightarrow"),gn("\\Harr","\\Leftrightarrow"),gn("\\hearts","\\heartsuit"),gn("\\image","\\Im"),gn("\\infin","\\infty"),gn("\\Iota","\\mathrm{I}"),gn("\\isin","\\in"),gn("\\Kappa","\\mathrm{K}"),gn("\\larr","\\leftarrow"),gn("\\lArr","\\Leftarrow"),gn("\\Larr","\\Leftarrow"),gn("\\lrarr","\\leftrightarrow"),gn("\\lrArr","\\Leftrightarrow"),gn("\\Lrarr","\\Leftrightarrow"),gn("\\Mu","\\mathrm{M}"),gn("\\natnums","\\mathbb{N}"),gn("\\Nu","\\mathrm{N}"),gn("\\Omicron","\\mathrm{O}"),gn("\\plusmn","\\pm"),gn("\\rarr","\\rightarrow"),gn("\\rArr","\\Rightarrow"),gn("\\Rarr","\\Rightarrow"),gn("\\real","\\Re"),gn("\\reals","\\mathbb{R}"),gn("\\Reals","\\mathbb{R}"),gn("\\Rho","\\mathrm{P}"),gn("\\sdot","\\cdot"),gn("\\sect","\\S"),gn("\\spades","\\spadesuit"),gn("\\sub","\\subset"),gn("\\sube","\\subseteq"),gn("\\supe","\\supseteq"),gn("\\Tau","\\mathrm{T}"),gn("\\thetasym","\\vartheta"),gn("\\weierp","\\wp"),gn("\\Zeta","\\mathrm{Z}"),gn("\\argmin","\\DOTSB\\operatorname*{arg\\,min}"),gn("\\argmax","\\DOTSB\\operatorname*{arg\\,max}"),gn("\\plim","\\DOTSB\\mathop{\\operatorname{plim}}\\limits"),gn("\\bra","\\mathinner{\\langle{#1}|}"),gn("\\ket","\\mathinner{|{#1}\\rangle}"),gn("\\braket","\\mathinner{\\langle{#1}\\rangle}"),gn("\\Bra","\\left\\langle#1\\right|"),gn("\\Ket","\\left|#1\\right\\rangle"),gn("\\angln","{\\angl n}"),gn("\\blue","\\textcolor{##6495ed}{#1}"),gn("\\orange","\\textcolor{##ffa500}{#1}"),gn("\\pink","\\textcolor{##ff00af}{#1}"),gn("\\red","\\textcolor{##df0030}{#1}"),gn("\\green","\\textcolor{##28ae7b}{#1}"),gn("\\gray","\\textcolor{gray}{#1}"),gn("\\purple","\\textcolor{##9d38bd}{#1}"),gn("\\blueA","\\textcolor{##ccfaff}{#1}"),gn("\\blueB","\\textcolor{##80f6ff}{#1}"),gn("\\blueC","\\textcolor{##63d9ea}{#1}"),gn("\\blueD","\\textcolor{##11accd}{#1}"),gn("\\blueE","\\textcolor{##0c7f99}{#1}"),gn("\\tealA","\\textcolor{##94fff5}{#1}"),gn("\\tealB","\\textcolor{##26edd5}{#1}"),gn("\\tealC","\\textcolor{##01d1c1}{#1}"),gn("\\tealD","\\textcolor{##01a995}{#1}"),gn("\\tealE","\\textcolor{##208170}{#1}"),gn("\\greenA","\\textcolor{##b6ffb0}{#1}"),gn("\\greenB","\\textcolor{##8af281}{#1}"),gn("\\greenC","\\textcolor{##74cf70}{#1}"),gn("\\greenD","\\textcolor{##1fab54}{#1}"),gn("\\greenE","\\textcolor{##0d923f}{#1}"),gn("\\goldA","\\textcolor{##ffd0a9}{#1}"),gn("\\goldB","\\textcolor{##ffbb71}{#1}"),gn("\\goldC","\\textcolor{##ff9c39}{#1}"),gn("\\goldD","\\textcolor{##e07d10}{#1}"),gn("\\goldE","\\textcolor{##a75a05}{#1}"),gn("\\redA","\\textcolor{##fca9a9}{#1}"),gn("\\redB","\\textcolor{##ff8482}{#1}"),gn("\\redC","\\textcolor{##f9685d}{#1}"),gn("\\redD","\\textcolor{##e84d39}{#1}"),gn("\\redE","\\textcolor{##bc2612}{#1}"),gn("\\maroonA","\\textcolor{##ffbde0}{#1}"),gn("\\maroonB","\\textcolor{##ff92c6}{#1}"),gn("\\maroonC","\\textcolor{##ed5fa6}{#1}"),gn("\\maroonD","\\textcolor{##ca337c}{#1}"),gn("\\maroonE","\\textcolor{##9e034e}{#1}"),gn("\\purpleA","\\textcolor{##ddd7ff}{#1}"),gn("\\purpleB","\\textcolor{##c6b9fc}{#1}"),gn("\\purpleC","\\textcolor{##aa87ff}{#1}"),gn("\\purpleD","\\textcolor{##7854ab}{#1}"),gn("\\purpleE","\\textcolor{##543b78}{#1}"),gn("\\mintA","\\textcolor{##f5f9e8}{#1}"),gn("\\mintB","\\textcolor{##edf2df}{#1}"),gn("\\mintC","\\textcolor{##e0e5cc}{#1}"),gn("\\grayA","\\textcolor{##f6f7f7}{#1}"),gn("\\grayB","\\textcolor{##f0f1f2}{#1}"),gn("\\grayC","\\textcolor{##e3e5e6}{#1}"),gn("\\grayD","\\textcolor{##d6d8da}{#1}"),gn("\\grayE","\\textcolor{##babec2}{#1}"),gn("\\grayF","\\textcolor{##888d93}{#1}"),gn("\\grayG","\\textcolor{##626569}{#1}"),gn("\\grayH","\\textcolor{##3b3e40}{#1}"),gn("\\grayI","\\textcolor{##21242c}{#1}"),gn("\\kaBlue","\\textcolor{##314453}{#1}"),gn("\\kaGreen","\\textcolor{##71B307}{#1}");var Hn={"\\relax":!0,"^":!0,_:!0,"\\limits":!0,"\\nolimits":!0},$n=function(){function e(e,t,r){this.settings=void 0,this.expansionCount=void 0,this.lexer=void 0,this.macros=void 0,this.stack=void 0,this.mode=void 0,this.settings=t,this.expansionCount=0,this.feed(e),this.macros=new Bn(Pn,t.macros),this.mode=r,this.stack=[]}var t=e.prototype;return t.feed=function(e){this.lexer=new Rn(e,this.settings)},t.switchMode=function(e){this.mode=e},t.beginGroup=function(){this.macros.beginGroup()},t.endGroup=function(){this.macros.endGroup()},t.endGroups=function(){this.macros.endGroups()},t.future=function(){return 0===this.stack.length&&this.pushToken(this.lexer.lex()),this.stack[this.stack.length-1]},t.popToken=function(){return this.future(),this.stack.pop()},t.pushToken=function(e){this.stack.push(e)},t.pushTokens=function(e){var t;(t=this.stack).push.apply(t,e)},t.scanArgument=function(e){var t,r,n;if(e){if(this.consumeSpaces(),"["!==this.future().text)return null;t=this.popToken();var o=this.consumeArg(["]"]);n=o.tokens,r=o.end}else{var i=this.consumeArg();n=i.tokens,t=i.start,r=i.end}return this.pushToken(new Dn("EOF",r.loc)),this.pushTokens(n),t.range(r,"")},t.consumeSpaces=function(){for(;" "===this.future().text;)this.stack.pop()},t.consumeArg=function(e){var t=[],r=e&&e.length>0;r||this.consumeSpaces();var o,i=this.future(),a=0,s=0;do{if(o=this.popToken(),t.push(o),"{"===o.text)++a;else if("}"===o.text){if(-1==--a)throw new n("Extra }",o)}else if("EOF"===o.text)throw new n("Unexpected end of input in a macro argument, expected '"+(e&&r?e[s]:"}")+"'",o);if(e&&r)if((0===a||1===a&&"{"===e[s])&&o.text===e[s]){if(++s===e.length){t.splice(-s,s);break}}else s=0}while(0!==a||r);return"{"===i.text&&"}"===t[t.length-1].text&&(t.pop(),t.shift()),t.reverse(),{tokens:t,start:i,end:o}},t.consumeArgs=function(e,t){if(t){if(t.length!==e+1)throw new n("The length of delimiters doesn't match the number of args!");for(var r=t[0],o=0;o<r.length;o++){var i=this.popToken();if(r[o]!==i.text)throw new n("Use of the macro doesn't match its definition",i)}}for(var a=[],s=0;s<e;s++)a.push(this.consumeArg(t&&t[s+1]).tokens);return a},t.expandOnce=function(e){var t=this.popToken(),r=t.text,o=t.noexpand?null:this._getExpansion(r);if(null==o||e&&o.unexpandable){if(e&&null==o&&"\\"===r[0]&&!this.isDefined(r))throw new n("Undefined control sequence: "+r);return this.pushToken(t),t}if(this.expansionCount++,this.expansionCount>this.settings.maxExpand)throw new n("Too many expansions: infinite loop or need to increase maxExpand setting");var i=o.tokens,a=this.consumeArgs(o.numArgs,o.delimiters);if(o.numArgs)for(var s=(i=i.slice()).length-1;s>=0;--s){var l=i[s];if("#"===l.text){if(0===s)throw new n("Incomplete placeholder at end of macro body",l);if("#"===(l=i[--s]).text)i.splice(s+1,1);else{if(!/^[1-9]$/.test(l.text))throw new n("Not a valid argument number",l);var c;(c=i).splice.apply(c,[s,2].concat(a[+l.text-1]))}}}return this.pushTokens(i),i},t.expandAfterFuture=function(){return this.expandOnce(),this.future()},t.expandNextToken=function(){for(;;){var e=this.expandOnce();if(e instanceof Dn){if("\\relax"!==e.text&&!e.treatAsRelax)return this.stack.pop();this.stack.pop()}}throw new Error},t.expandMacro=function(e){return this.macros.has(e)?this.expandTokens([new Dn(e)]):void 0},t.expandTokens=function(e){var t=[],r=this.stack.length;for(this.pushTokens(e);this.stack.length>r;){var n=this.expandOnce(!0);n instanceof Dn&&(n.treatAsRelax&&(n.noexpand=!1,n.treatAsRelax=!1),t.push(this.stack.pop()))}return t},t.expandMacroAsText=function(e){var t=this.expandMacro(e);return t?t.map((function(e){return e.text})).join(""):t},t._getExpansion=function(e){var t=this.macros.get(e);if(null==t)return t;if(1===e.length){var r=this.lexer.catcodes[e];if(null!=r&&13!==r)return}var n="function"==typeof t?t(this):t;if("string"==typeof n){var o=0;if(-1!==n.indexOf("#"))for(var i=n.replace(/##/g,"");-1!==i.indexOf("#"+(o+1));)++o;for(var a=new Rn(n,this.settings),s=[],l=a.lex();"EOF"!==l.text;)s.push(l),l=a.lex();return s.reverse(),{tokens:s,numArgs:o}}return n},t.isDefined=function(e){return this.macros.has(e)||zn.hasOwnProperty(e)||X.math.hasOwnProperty(e)||X.text.hasOwnProperty(e)||Hn.hasOwnProperty(e)},t.isExpandable=function(e){var t=this.macros.get(e);return null!=t?"string"==typeof t||"function"==typeof t||!t.unexpandable:zn.hasOwnProperty(e)&&!zn[e].primitive},e}(),jn={"́":{text:"\\'",math:"\\acute"},"̀":{text:"\\`",math:"\\grave"},"̈":{text:'\\"',math:"\\ddot"},"̃":{text:"\\~",math:"\\tilde"},"̄":{text:"\\=",math:"\\bar"},"̆":{text:"\\u",math:"\\breve"},"̌":{text:"\\v",math:"\\check"},"̂":{text:"\\^",math:"\\hat"},"̇":{text:"\\.",math:"\\dot"},"̊":{text:"\\r",math:"\\mathring"},"̋":{text:"\\H"},"̧":{text:"\\c"}},Wn={á:"á",à:"à",ä:"ä",ǟ:"ǟ",ã:"ã",ā:"ā",ă:"ă",ắ:"ắ",ằ:"ằ",ẵ:"ẵ",ǎ:"ǎ",â:"â",ấ:"ấ",ầ:"ầ",ẫ:"ẫ",ȧ:"ȧ",ǡ:"ǡ",å:"å",ǻ:"ǻ",ḃ:"ḃ",ć:"ć",ḉ:"ḉ",č:"č",ĉ:"ĉ",ċ:"ċ",ç:"ç",ď:"ď",ḋ:"ḋ",ḑ:"ḑ",é:"é",è:"è",ë:"ë",ẽ:"ẽ",ē:"ē",ḗ:"ḗ",ḕ:"ḕ",ĕ:"ĕ",ḝ:"ḝ",ě:"ě",ê:"ê",ế:"ế",ề:"ề",ễ:"ễ",ė:"ė",ȩ:"ȩ",ḟ:"ḟ",ǵ:"ǵ",ḡ:"ḡ",ğ:"ğ",ǧ:"ǧ",ĝ:"ĝ",ġ:"ġ",ģ:"ģ",ḧ:"ḧ",ȟ:"ȟ",ĥ:"ĥ",ḣ:"ḣ",ḩ:"ḩ",í:"í",ì:"ì",ï:"ï",ḯ:"ḯ",ĩ:"ĩ",ī:"ī",ĭ:"ĭ",ǐ:"ǐ",î:"î",ǰ:"ǰ",ĵ:"ĵ",ḱ:"ḱ",ǩ:"ǩ",ķ:"ķ",ĺ:"ĺ",ľ:"ľ",ļ:"ļ",ḿ:"ḿ",ṁ:"ṁ",ń:"ń",ǹ:"ǹ",ñ:"ñ",ň:"ň",ṅ:"ṅ",ņ:"ņ",ó:"ó",ò:"ò",ö:"ö",ȫ:"ȫ",õ:"õ",ṍ:"ṍ",ṏ:"ṏ",ȭ:"ȭ",ō:"ō",ṓ:"ṓ",ṑ:"ṑ",ŏ:"ŏ",ǒ:"ǒ",ô:"ô",ố:"ố",ồ:"ồ",ỗ:"ỗ",ȯ:"ȯ",ȱ:"ȱ",ő:"ő",ṕ:"ṕ",ṗ:"ṗ",ŕ:"ŕ",ř:"ř",ṙ:"ṙ",ŗ:"ŗ",ś:"ś",ṥ:"ṥ",š:"š",ṧ:"ṧ",ŝ:"ŝ",ṡ:"ṡ",ş:"ş",ẗ:"ẗ",ť:"ť",ṫ:"ṫ",ţ:"ţ",ú:"ú",ù:"ù",ü:"ü",ǘ:"ǘ",ǜ:"ǜ",ǖ:"ǖ",ǚ:"ǚ",ũ:"ũ",ṹ:"ṹ",ū:"ū",ṻ:"ṻ",ŭ:"ŭ",ǔ:"ǔ",û:"û",ů:"ů",ű:"ű",ṽ:"ṽ",ẃ:"ẃ",ẁ:"ẁ",ẅ:"ẅ",ŵ:"ŵ",ẇ:"ẇ",ẘ:"ẘ",ẍ:"ẍ",ẋ:"ẋ",ý:"ý",ỳ:"ỳ",ÿ:"ÿ",ỹ:"ỹ",ȳ:"ȳ",ŷ:"ŷ",ẏ:"ẏ",ẙ:"ẙ",ź:"ź",ž:"ž",ẑ:"ẑ",ż:"ż",Á:"Á",À:"À",Ä:"Ä",Ǟ:"Ǟ",Ã:"Ã",Ā:"Ā",Ă:"Ă",Ắ:"Ắ",Ằ:"Ằ",Ẵ:"Ẵ",Ǎ:"Ǎ",Â:"Â",Ấ:"Ấ",Ầ:"Ầ",Ẫ:"Ẫ",Ȧ:"Ȧ",Ǡ:"Ǡ",Å:"Å",Ǻ:"Ǻ",Ḃ:"Ḃ",Ć:"Ć",Ḉ:"Ḉ",Č:"Č",Ĉ:"Ĉ",Ċ:"Ċ",Ç:"Ç",Ď:"Ď",Ḋ:"Ḋ",Ḑ:"Ḑ",É:"É",È:"È",Ë:"Ë",Ẽ:"Ẽ",Ē:"Ē",Ḗ:"Ḗ",Ḕ:"Ḕ",Ĕ:"Ĕ",Ḝ:"Ḝ",Ě:"Ě",Ê:"Ê",Ế:"Ế",Ề:"Ề",Ễ:"Ễ",Ė:"Ė",Ȩ:"Ȩ",Ḟ:"Ḟ",Ǵ:"Ǵ",Ḡ:"Ḡ",Ğ:"Ğ",Ǧ:"Ǧ",Ĝ:"Ĝ",Ġ:"Ġ",Ģ:"Ģ",Ḧ:"Ḧ",Ȟ:"Ȟ",Ĥ:"Ĥ",Ḣ:"Ḣ",Ḩ:"Ḩ",Í:"Í",Ì:"Ì",Ï:"Ï",Ḯ:"Ḯ",Ĩ:"Ĩ",Ī:"Ī",Ĭ:"Ĭ",Ǐ:"Ǐ",Î:"Î",İ:"İ",Ĵ:"Ĵ",Ḱ:"Ḱ",Ǩ:"Ǩ",Ķ:"Ķ",Ĺ:"Ĺ",Ľ:"Ľ",Ļ:"Ļ",Ḿ:"Ḿ",Ṁ:"Ṁ",Ń:"Ń",Ǹ:"Ǹ",Ñ:"Ñ",Ň:"Ň",Ṅ:"Ṅ",Ņ:"Ņ",Ó:"Ó",Ò:"Ò",Ö:"Ö",Ȫ:"Ȫ",Õ:"Õ",Ṍ:"Ṍ",Ṏ:"Ṏ",Ȭ:"Ȭ",Ō:"Ō",Ṓ:"Ṓ",Ṑ:"Ṑ",Ŏ:"Ŏ",Ǒ:"Ǒ",Ô:"Ô",Ố:"Ố",Ồ:"Ồ",Ỗ:"Ỗ",Ȯ:"Ȯ",Ȱ:"Ȱ",Ő:"Ő",Ṕ:"Ṕ",Ṗ:"Ṗ",Ŕ:"Ŕ",Ř:"Ř",Ṙ:"Ṙ",Ŗ:"Ŗ",Ś:"Ś",Ṥ:"Ṥ",Š:"Š",Ṧ:"Ṧ",Ŝ:"Ŝ",Ṡ:"Ṡ",Ş:"Ş",Ť:"Ť",Ṫ:"Ṫ",Ţ:"Ţ",Ú:"Ú",Ù:"Ù",Ü:"Ü",Ǘ:"Ǘ",Ǜ:"Ǜ",Ǖ:"Ǖ",Ǚ:"Ǚ",Ũ:"Ũ",Ṹ:"Ṹ",Ū:"Ū",Ṻ:"Ṻ",Ŭ:"Ŭ",Ǔ:"Ǔ",Û:"Û",Ů:"Ů",Ű:"Ű",Ṽ:"Ṽ",Ẃ:"Ẃ",Ẁ:"Ẁ",Ẅ:"Ẅ",Ŵ:"Ŵ",Ẇ:"Ẇ",Ẍ:"Ẍ",Ẋ:"Ẋ",Ý:"Ý",Ỳ:"Ỳ",Ÿ:"Ÿ",Ỹ:"Ỹ",Ȳ:"Ȳ",Ŷ:"Ŷ",Ẏ:"Ẏ",Ź:"Ź",Ž:"Ž",Ẑ:"Ẑ",Ż:"Ż",ά:"ά",ὰ:"ὰ",ᾱ:"ᾱ",ᾰ:"ᾰ",έ:"έ",ὲ:"ὲ",ή:"ή",ὴ:"ὴ",ί:"ί",ὶ:"ὶ",ϊ:"ϊ",ΐ:"ΐ",ῒ:"ῒ",ῑ:"ῑ",ῐ:"ῐ",ό:"ό",ὸ:"ὸ",ύ:"ύ",ὺ:"ὺ",ϋ:"ϋ",ΰ:"ΰ",ῢ:"ῢ",ῡ:"ῡ",ῠ:"ῠ",ώ:"ώ",ὼ:"ὼ",Ύ:"Ύ",Ὺ:"Ὺ",Ϋ:"Ϋ",Ῡ:"Ῡ",Ῠ:"Ῠ",Ώ:"Ώ",Ὼ:"Ὼ"},Kn=function(){function e(e,t){this.mode=void 0,this.gullet=void 0,this.settings=void 0,this.leftrightDepth=void 0,this.nextToken=void 0,this.mode="math",this.gullet=new $n(e,t,this.mode),this.settings=t,this.leftrightDepth=0}var t=e.prototype;return t.expect=function(e,t){if(void 0===t&&(t=!0),this.fetch().text!==e)throw new n("Expected '"+e+"', got '"+this.fetch().text+"'",this.fetch());t&&this.consume()},t.consume=function(){this.nextToken=null},t.fetch=function(){return null==this.nextToken&&(this.nextToken=this.gullet.expandNextToken()),this.nextToken},t.switchMode=function(e){this.mode=e,this.gullet.switchMode(e)},t.parse=function(){this.settings.globalGroup||this.gullet.beginGroup(),this.settings.colorIsTextColor&&this.gullet.macros.set("\\color","\\textcolor");try{var e=this.parseExpression(!1);return this.expect("EOF"),this.settings.globalGroup||this.gullet.endGroup(),e}finally{this.gullet.endGroups()}},t.parseExpression=function(t,r){for(var n=[];;){"math"===this.mode&&this.consumeSpaces();var o=this.fetch();if(-1!==e.endOfExpression.indexOf(o.text))break;if(r&&o.text===r)break;if(t&&zn[o.text]&&zn[o.text].infix)break;var i=this.parseAtom(r);if(!i)break;"internal"!==i.type&&n.push(i)}return"text"===this.mode&&this.formLigatures(n),this.handleInfixNodes(n)},t.handleInfixNodes=function(e){for(var t,r=-1,o=0;o<e.length;o++)if("infix"===e[o].type){if(-1!==r)throw new n("only one infix operator per group",e[o].token);r=o,t=e[o].replaceWith}if(-1!==r&&t){var i,a,s=e.slice(0,r),l=e.slice(r+1);return i=1===s.length&&"ordgroup"===s[0].type?s[0]:{type:"ordgroup",mode:this.mode,body:s},a=1===l.length&&"ordgroup"===l[0].type?l[0]:{type:"ordgroup",mode:this.mode,body:l},["\\\\abovefrac"===t?this.callFunction(t,[i,e[r],a],[]):this.callFunction(t,[i,a],[])]}return e},t.handleSupSubscript=function(e){var t=this.fetch(),r=t.text;this.consume(),this.consumeSpaces();var o=this.parseGroup(e);if(!o)throw new n("Expected group after '"+r+"'",t);return o},t.formatUnsupportedCmd=function(e){for(var t=[],r=0;r<e.length;r++)t.push({type:"textord",mode:"text",text:e[r]});var n={type:"text",mode:this.mode,body:t};return{type:"color",mode:this.mode,color:this.settings.errorColor,body:[n]}},t.parseAtom=function(e){var t,r,o=this.parseGroup("atom",e);if("text"===this.mode)return o;for(;;){this.consumeSpaces();var i=this.fetch();if("\\limits"===i.text||"\\nolimits"===i.text){if(o&&"op"===o.type){var a="\\limits"===i.text;o.limits=a,o.alwaysHandleSupSub=!0}else{if(!o||"operatorname"!==o.type)throw new n("Limit controls must follow a math operator",i);o.alwaysHandleSupSub&&(o.limits="\\limits"===i.text)}this.consume()}else if("^"===i.text){if(t)throw new n("Double superscript",i);t=this.handleSupSubscript("superscript")}else if("_"===i.text){if(r)throw new n("Double subscript",i);r=this.handleSupSubscript("subscript")}else{if("'"!==i.text)break;if(t)throw new n("Double superscript",i);var s={type:"textord",mode:this.mode,text:"\\prime"},l=[s];for(this.consume();"'"===this.fetch().text;)l.push(s),this.consume();"^"===this.fetch().text&&l.push(this.handleSupSubscript("superscript")),t={type:"ordgroup",mode:this.mode,body:l}}}return t||r?{type:"supsub",mode:this.mode,base:o,sup:t,sub:r}:o},t.parseFunction=function(e,t){var r=this.fetch(),o=r.text,i=zn[o];if(!i)return null;if(this.consume(),t&&"atom"!==t&&!i.allowedInArgument)throw new n("Got function '"+o+"' with no arguments"+(t?" as "+t:""),r);if("text"===this.mode&&!i.allowedInText)throw new n("Can't use function '"+o+"' in text mode",r);if("math"===this.mode&&!1===i.allowedInMath)throw new n("Can't use function '"+o+"' in math mode",r);var a=this.parseArguments(o,i),s=a.args,l=a.optArgs;return this.callFunction(o,s,l,r,e)},t.callFunction=function(e,t,r,o,i){var a={funcName:e,parser:this,token:o,breakOnTokenText:i},s=zn[e];if(s&&s.handler)return s.handler(a,t,r);throw new n("No function handler for "+e)},t.parseArguments=function(e,t){var r=t.numArgs+t.numOptionalArgs;if(0===r)return{args:[],optArgs:[]};for(var o=[],i=[],a=0;a<r;a++){var s=t.argTypes&&t.argTypes[a],l=a<t.numOptionalArgs;(t.primitive&&null==s||"sqrt"===t.type&&1===a&&null==i[0])&&(s="primitive");var c=this.parseGroupOfType("argument to '"+e+"'",s,l);if(l)i.push(c);else{if(null==c)throw new n("Null argument, please report this as a bug");o.push(c)}}return{args:o,optArgs:i}},t.parseGroupOfType=function(e,t,r){switch(t){case"color":return this.parseColorGroup(r);case"size":return this.parseSizeGroup(r);case"url":return this.parseUrlGroup(r);case"math":case"text":return this.parseArgumentGroup(r,t);case"hbox":var o=this.parseArgumentGroup(r,"text");return null!=o?{type:"styling",mode:o.mode,body:[o],style:"text"}:null;case"raw":var i=this.parseStringGroup("raw",r);return null!=i?{type:"raw",mode:"text",string:i.text}:null;case"primitive":if(r)throw new n("A primitive argument cannot be optional");var a=this.parseGroup(e);if(null==a)throw new n("Expected group as "+e,this.fetch());return a;case"original":case null:case void 0:return this.parseArgumentGroup(r);default:throw new n("Unknown group type as "+e,this.fetch())}},t.consumeSpaces=function(){for(;" "===this.fetch().text;)this.consume()},t.parseStringGroup=function(e,t){var r=this.gullet.scanArgument(t);if(null==r)return null;for(var n,o="";"EOF"!==(n=this.fetch()).text;)o+=n.text,this.consume();return this.consume(),r.text=o,r},t.parseRegexGroup=function(e,t){for(var r,o=this.fetch(),i=o,a="";"EOF"!==(r=this.fetch()).text&&e.test(a+r.text);)a+=(i=r).text,this.consume();if(""===a)throw new n("Invalid "+t+": '"+o.text+"'",o);return o.range(i,a)},t.parseColorGroup=function(e){var t=this.parseStringGroup("color",e);if(null==t)return null;var r=/^(#[a-f0-9]{3}|#?[a-f0-9]{6}|[a-z]+)$/i.exec(t.text);if(!r)throw new n("Invalid color: '"+t.text+"'",t);var o=r[0];return/^[0-9a-f]{6}$/i.test(o)&&(o="#"+o),{type:"color-token",mode:this.mode,color:o}},t.parseSizeGroup=function(e){var t,r=!1;if(this.gullet.consumeSpaces(),!(t=e||"{"===this.gullet.future().text?this.parseStringGroup("size",e):this.parseRegexGroup(/^[-+]? *(?:$|\d+|\d+\.\d*|\.\d*) *[a-z]{0,2} *$/,"size")))return null;e||0!==t.text.length||(t.text="0pt",r=!0);var o=/([-+]?) *(\d+(?:\.\d*)?|\.\d+) *([a-z]{2})/.exec(t.text);if(!o)throw new n("Invalid size: '"+t.text+"'",t);var i={number:+(o[1]+o[2]),unit:o[3]};if(!Ve(i))throw new n("Invalid unit: '"+i.unit+"'",t);return{type:"size",mode:this.mode,value:i,isBlank:r}},t.parseUrlGroup=function(e){this.gullet.lexer.setCatcode("%",13),this.gullet.lexer.setCatcode("~",12);var t=this.parseStringGroup("url",e);if(this.gullet.lexer.setCatcode("%",14),this.gullet.lexer.setCatcode("~",13),null==t)return null;var r=t.text.replace(/\\([#$%&~_^{}])/g,"$1");return{type:"url",mode:this.mode,url:r}},t.parseArgumentGroup=function(e,t){var r=this.gullet.scanArgument(e);if(null==r)return null;var n=this.mode;t&&this.switchMode(t),this.gullet.beginGroup();var o=this.parseExpression(!1,"EOF");this.expect("EOF"),this.gullet.endGroup();var i={type:"ordgroup",mode:this.mode,loc:r.loc,body:o};return t&&this.switchMode(n),i},t.parseGroup=function(e,t){var r,o=this.fetch(),i=o.text;if("{"===i||"\\begingroup"===i){this.consume();var a="{"===i?"}":"\\endgroup";this.gullet.beginGroup();var s=this.parseExpression(!1,a),l=this.fetch();this.expect(a),this.gullet.endGroup(),r={type:"ordgroup",mode:this.mode,loc:En.range(o,l),body:s,semisimple:"\\begingroup"===i||void 0}}else if(null==(r=this.parseFunction(t,e)||this.parseSymbol())&&"\\"===i[0]&&!Hn.hasOwnProperty(i)){if(this.settings.throwOnError)throw new n("Undefined control sequence: "+i,o);r=this.formatUnsupportedCmd(i),this.consume()}return r},t.formLigatures=function(e){for(var t=e.length-1,r=0;r<t;++r){var n=e[r],o=n.text;"-"===o&&"-"===e[r+1].text&&(r+1<t&&"-"===e[r+2].text?(e.splice(r,3,{type:"textord",mode:"text",loc:En.range(n,e[r+2]),text:"---"}),t-=2):(e.splice(r,2,{type:"textord",mode:"text",loc:En.range(n,e[r+1]),text:"--"}),t-=1)),"'"!==o&&"`"!==o||e[r+1].text!==o||(e.splice(r,2,{type:"textord",mode:"text",loc:En.range(n,e[r+1]),text:o+o}),t-=1)}},t.parseSymbol=function(){var e=this.fetch(),t=e.text;if(/^\\verb[^a-zA-Z]/.test(t)){this.consume();var r=t.slice(5),o="*"===r.charAt(0);if(o&&(r=r.slice(1)),r.length<2||r.charAt(0)!==r.slice(-1))throw new n("\\verb assertion failed --\n                    please report what input caused this bug");return{type:"verb",mode:"text",body:r=r.slice(1,-1),star:o}}Wn.hasOwnProperty(t[0])&&!X[this.mode][t[0]]&&(this.settings.strict&&"math"===this.mode&&this.settings.reportNonstrict("unicodeTextInMathMode",'Accented Unicode text character "'+t[0]+'" used in math mode',e),t=Wn[t[0]]+t.substr(1));var i,a=In.exec(t);if(a&&("i"===(t=t.substring(0,a.index))?t="ı":"j"===t&&(t="ȷ")),X[this.mode][t]){this.settings.strict&&"math"===this.mode&&Ne.indexOf(t)>=0&&this.settings.reportNonstrict("unicodeTextInMathMode",'Latin-1/Unicode text character "'+t[0]+'" used in math mode',e);var s,l=X[this.mode][t].group,c=En.range(e);if(U.hasOwnProperty(l)){var h=l;s={type:"atom",mode:this.mode,family:h,loc:c,text:t}}else s={type:l,mode:this.mode,loc:c,text:t};i=s}else{if(!(t.charCodeAt(0)>=128))return null;this.settings.strict&&(O(t.charCodeAt(0))?"math"===this.mode&&this.settings.reportNonstrict("unicodeTextInMathMode",'Unicode text character "'+t[0]+'" used in math mode',e):this.settings.reportNonstrict("unknownSymbol",'Unrecognized Unicode character "'+t[0]+'" ('+t.charCodeAt(0)+")",e)),i={type:"textord",mode:"text",loc:En.range(e),text:t}}if(this.consume(),a)for(var p=0;p<a[0].length;p++){var u=a[0][p];if(!jn[u])throw new n("Unknown accent ' "+u+"'",e);var d=jn[u][this.mode]||jn[u].text;if(!d)throw new n("Accent "+u+" unsupported in "+this.mode+" mode",e);i={type:"accent",mode:this.mode,loc:En.range(e),label:d,isStretchy:!1,isShifty:!0,base:i}}return i},e}();Kn.endOfExpression=["}","\\endgroup","\\end","\\right","&"];var Gn=function(e,t){if(!("string"==typeof e||e instanceof String))throw new TypeError("KaTeX can only parse string typed expression");var r=new Kn(e,t);delete r.gullet.macros.current["\\df@tag"];var o=r.parse();if(delete r.gullet.macros.current["\\current@color"],delete r.gullet.macros.current["\\color"],r.gullet.macros.get("\\df@tag")){if(!t.displayMode)throw new n("\\tag works only in display equations");r.gullet.feed("\\df@tag"),o=[{type:"tag",mode:"text",body:o,tag:r.parse()}]}return o},Un=function(e,t,r){t.textContent="";var n=Yn(e,r).toNode();t.appendChild(n)};"undefined"!=typeof document&&"CSS1Compat"!==document.compatMode&&("undefined"!=typeof console&&console.warn("Warning: KaTeX doesn't work in quirks mode. Make sure your website has a suitable doctype."),Un=function(){throw new n("KaTeX doesn't work in quirks mode.")});var Jn=function(e,t,r){if(r.throwOnError||!(e instanceof n))throw e;var o=Qe.makeSpan(["katex-error"],[new q(t)]);return o.setAttribute("title",e.toString()),o.setAttribute("style","color:"+r.errorColor),o},Yn=function(e,t){var r=new m(t);try{return function(e,t,r){var n,o=_t(r);if("mathml"===r.output)return Pt(e,t,o,r.displayMode,!0);if("html"===r.output){var i=Tt(e,o);n=Qe.makeSpan(["katex"],[i])}else{var a=Pt(e,t,o,r.displayMode,!1),s=Tt(e,o);n=Qe.makeSpan(["katex"],[a,s])}return qt(n,r)}(Gn(e,r),e,r)}catch(t){return Jn(t,e,r)}},Xn={version:"0.13.18",render:Un,renderToString:function(e,t){return Yn(e,t).toMarkup()},ParseError:n,__parse:function(e,t){var r=new m(t);return Gn(e,r)},__renderToDomTree:Yn,__renderToHTMLTree:function(e,t){var r=new m(t);try{return function(e,t,r){var n=Tt(e,_t(r)),o=Qe.makeSpan(["katex"],[n]);return qt(o,r)}(Gn(e,r),0,r)}catch(t){return Jn(t,e,r)}},__setFontMetrics:function(e,t){$[e]=t},__defineSymbol:Z,__defineMacro:gn,__domTree:{Span:R,Anchor:B,SymbolNode:q,SvgNode:L,PathNode:F,LineNode:V}};return t.default}()},e.exports=t()},778:(e,t,r)=>{"use strict";r.r(t),r.d(t,{autoJoin:()=>z,baseKeymap:()=>_,chainCommands:()=>E,createParagraphNear:()=>w,deleteSelection:()=>a,exitCode:()=>b,joinBackward:()=>s,joinDown:()=>m,joinForward:()=>p,joinUp:()=>f,lift:()=>g,liftEmptyBlock:()=>x,macBaseKeymap:()=>B,newlineInCode:()=>v,pcBaseKeymap:()=>R,selectAll:()=>T,selectNodeBackward:()=>c,selectNodeForward:()=>u,selectParentNode:()=>M,setBlockType:()=>C,splitBlock:()=>S,splitBlockKeepMarks:()=>k,toggleMark:()=>N,wrapIn:()=>O});var n=r(81),o=r(638),i=r(922);function a(e,t){return!e.selection.empty&&(t&&t(e.tr.deleteSelection().scrollIntoView()),!0)}function s(e,t,r){var o=e.selection.$cursor;if(!o||(r?!r.endOfTextblock("backward",e):o.parentOffset>0))return!1;var a=h(o);if(!a){var s=o.blockRange(),c=s&&(0,n.liftTarget)(s);return null!=c&&(t&&t(e.tr.lift(s,c).scrollIntoView()),!0)}var p=a.nodeBefore;if(!p.type.spec.isolating&&A(e,a,t))return!0;if(0==o.parent.content.size&&(l(p,"end")||i.NodeSelection.isSelectable(p))){if(t){var u=e.tr.deleteRange(o.before(),o.after());u.setSelection(l(p,"end")?i.Selection.findFrom(u.doc.resolve(u.mapping.map(a.pos,-1)),-1):i.NodeSelection.create(u.doc,a.pos-p.nodeSize)),t(u.scrollIntoView())}return!0}return!(!p.isAtom||a.depth!=o.depth-1||(t&&t(e.tr.delete(a.pos-p.nodeSize,a.pos).scrollIntoView()),0))}function l(e,t,r){for(;e;e="start"==t?e.firstChild:e.lastChild){if(e.isTextblock)return!0;if(r&&1!=e.childCount)return!1}return!1}function c(e,t,r){var n=e.selection,o=n.$head,a=o;if(!n.empty)return!1;if(o.parent.isTextblock){if(r?!r.endOfTextblock("backward",e):o.parentOffset>0)return!1;a=h(o)}var s=a&&a.nodeBefore;return!(!s||!i.NodeSelection.isSelectable(s)||(t&&t(e.tr.setSelection(i.NodeSelection.create(e.doc,a.pos-s.nodeSize)).scrollIntoView()),0))}function h(e){if(!e.parent.type.spec.isolating)for(var t=e.depth-1;t>=0;t--){if(e.index(t)>0)return e.doc.resolve(e.before(t+1));if(e.node(t).type.spec.isolating)break}return null}function p(e,t,r){var n=e.selection.$cursor;if(!n||(r?!r.endOfTextblock("forward",e):n.parentOffset<n.parent.content.size))return!1;var o=d(n);if(!o)return!1;var a=o.nodeAfter;if(A(e,o,t))return!0;if(0==n.parent.content.size&&(l(a,"start")||i.NodeSelection.isSelectable(a))){if(t){var s=e.tr.deleteRange(n.before(),n.after());s.setSelection(l(a,"start")?i.Selection.findFrom(s.doc.resolve(s.mapping.map(o.pos)),1):i.NodeSelection.create(s.doc,s.mapping.map(o.pos))),t(s.scrollIntoView())}return!0}return!(!a.isAtom||o.depth!=n.depth-1||(t&&t(e.tr.delete(o.pos,o.pos+a.nodeSize).scrollIntoView()),0))}function u(e,t,r){var n=e.selection,o=n.$head,a=o;if(!n.empty)return!1;if(o.parent.isTextblock){if(r?!r.endOfTextblock("forward",e):o.parentOffset<o.parent.content.size)return!1;a=d(o)}var s=a&&a.nodeAfter;return!(!s||!i.NodeSelection.isSelectable(s)||(t&&t(e.tr.setSelection(i.NodeSelection.create(e.doc,a.pos)).scrollIntoView()),0))}function d(e){if(!e.parent.type.spec.isolating)for(var t=e.depth-1;t>=0;t--){var r=e.node(t);if(e.index(t)+1<r.childCount)return e.doc.resolve(e.after(t+1));if(r.type.spec.isolating)break}return null}function f(e,t){var r,o=e.selection,a=o instanceof i.NodeSelection;if(a){if(o.node.isTextblock||!(0,n.canJoin)(e.doc,o.from))return!1;r=o.from}else if(null==(r=(0,n.joinPoint)(e.doc,o.from,-1)))return!1;if(t){var s=e.tr.join(r);a&&s.setSelection(i.NodeSelection.create(s.doc,r-e.doc.resolve(r).nodeBefore.nodeSize)),t(s.scrollIntoView())}return!0}function m(e,t){var r,o=e.selection;if(o instanceof i.NodeSelection){if(o.node.isTextblock||!(0,n.canJoin)(e.doc,o.to))return!1;r=o.to}else if(null==(r=(0,n.joinPoint)(e.doc,o.to,1)))return!1;return t&&t(e.tr.join(r).scrollIntoView()),!0}function g(e,t){var r=e.selection,o=r.$from,i=r.$to,a=o.blockRange(i),s=a&&(0,n.liftTarget)(a);return null!=s&&(t&&t(e.tr.lift(a,s).scrollIntoView()),!0)}function v(e,t){var r=e.selection,n=r.$head,o=r.$anchor;return!(!n.parent.type.spec.code||!n.sameParent(o)||(t&&t(e.tr.insertText("\n").scrollIntoView()),0))}function y(e){for(var t=0;t<e.edgeCount;t++){var r=e.edge(t).type;if(r.isTextblock&&!r.hasRequiredAttrs())return r}return null}function b(e,t){var r=e.selection,n=r.$head,o=r.$anchor;if(!n.parent.type.spec.code||!n.sameParent(o))return!1;var a=n.node(-1),s=n.indexAfter(-1),l=y(a.contentMatchAt(s));if(!a.canReplaceWith(s,s,l))return!1;if(t){var c=n.after(),h=e.tr.replaceWith(c,c,l.createAndFill());h.setSelection(i.Selection.near(h.doc.resolve(c),1)),t(h.scrollIntoView())}return!0}function w(e,t){var r=e.selection,n=r.$from,o=r.$to;if(r instanceof i.AllSelection||n.parent.inlineContent||o.parent.inlineContent)return!1;var a=y(o.parent.contentMatchAt(o.indexAfter()));if(!a||!a.isTextblock)return!1;if(t){var s=(!n.parentOffset&&o.index()<o.parent.childCount?n:o).pos,l=e.tr.insert(s,a.createAndFill());l.setSelection(i.TextSelection.create(l.doc,s+1)),t(l.scrollIntoView())}return!0}function x(e,t){var r=e.selection.$cursor;if(!r||r.parent.content.size)return!1;if(r.depth>1&&r.after()!=r.end(-1)){var o=r.before();if((0,n.canSplit)(e.doc,o))return t&&t(e.tr.split(o).scrollIntoView()),!0}var i=r.blockRange(),a=i&&(0,n.liftTarget)(i);return null!=a&&(t&&t(e.tr.lift(i,a).scrollIntoView()),!0)}function S(e,t){var r=e.selection,o=r.$from,a=r.$to;if(e.selection instanceof i.NodeSelection&&e.selection.node.isBlock)return!(!o.parentOffset||!(0,n.canSplit)(e.doc,o.pos)||(t&&t(e.tr.split(o.pos).scrollIntoView()),0));if(!o.parent.isBlock)return!1;if(t){var s=a.parentOffset==a.parent.content.size,l=e.tr;(e.selection instanceof i.TextSelection||e.selection instanceof i.AllSelection)&&l.deleteSelection();var c=0==o.depth?null:y(o.node(-1).contentMatchAt(o.indexAfter(-1))),h=s&&c?[{type:c}]:null,p=(0,n.canSplit)(l.doc,l.mapping.map(o.pos),1,h);if(h||p||!(0,n.canSplit)(l.doc,l.mapping.map(o.pos),1,c&&[{type:c}])||(h=[{type:c}],p=!0),p&&(l.split(l.mapping.map(o.pos),1,h),!s&&!o.parentOffset&&o.parent.type!=c)){var u=l.mapping.map(o.before()),d=l.doc.resolve(u);o.node(-1).canReplaceWith(d.index(),d.index()+1,c)&&l.setNodeMarkup(l.mapping.map(o.before()),c)}t(l.scrollIntoView())}return!0}function k(e,t){return S(e,t&&function(r){var n=e.storedMarks||e.selection.$to.parentOffset&&e.selection.$from.marks();n&&r.ensureMarks(n),t(r)})}function M(e,t){var r,n=e.selection,o=n.$from,a=n.to,s=o.sharedDepth(a);return 0!=s&&(r=o.before(s),t&&t(e.tr.setSelection(i.NodeSelection.create(e.doc,r))),!0)}function T(e,t){return t&&t(e.tr.setSelection(new i.AllSelection(e.doc))),!0}function A(e,t,r){var a,s,c=t.nodeBefore,h=t.nodeAfter;if(c.type.spec.isolating||h.type.spec.isolating)return!1;if(function(e,t,r){var o=t.nodeBefore,i=t.nodeAfter,a=t.index();return!(!(o&&i&&o.type.compatibleContent(i.type))||(!o.content.size&&t.parent.canReplace(a-1,a)?(r&&r(e.tr.delete(t.pos-o.nodeSize,t.pos).scrollIntoView()),0):!t.parent.canReplace(a,a+1)||!i.isTextblock&&!(0,n.canJoin)(e.doc,t.pos)||(r&&r(e.tr.clearIncompatible(t.pos,o.type,o.contentMatchAt(o.childCount)).join(t.pos).scrollIntoView()),0)))}(e,t,r))return!0;var p=t.parent.canReplace(t.index(),t.index()+1);if(p&&(a=(s=c.contentMatchAt(c.childCount)).findWrapping(h.type))&&s.matchType(a[0]||h.type).validEnd){if(r){for(var u=t.pos+h.nodeSize,d=o.Fragment.empty,f=a.length-1;f>=0;f--)d=o.Fragment.from(a[f].create(null,d));d=o.Fragment.from(c.copy(d));var m=e.tr.step(new n.ReplaceAroundStep(t.pos-1,u,t.pos,u,new o.Slice(d,1,0),a.length,!0)),g=u+2*a.length;(0,n.canJoin)(m.doc,g)&&m.join(g),r(m.scrollIntoView())}return!0}var v=i.Selection.findFrom(t,1),y=v&&v.$from.blockRange(v.$to),b=y&&(0,n.liftTarget)(y);if(null!=b&&b>=t.depth)return r&&r(e.tr.lift(y,b).scrollIntoView()),!0;if(p&&l(h,"start",!0)&&l(c,"end")){for(var w=c,x=[];x.push(w),!w.isTextblock;)w=w.lastChild;for(var S=h,k=1;!S.isTextblock;S=S.firstChild)k++;if(w.canReplace(w.childCount,w.childCount,S.content)){if(r){for(var M=o.Fragment.empty,T=x.length-1;T>=0;T--)M=o.Fragment.from(x[T].copy(M));r(e.tr.step(new n.ReplaceAroundStep(t.pos-x.length,t.pos+h.nodeSize,t.pos+k,t.pos+h.nodeSize-k,new o.Slice(M,x.length,0),0,!0)).scrollIntoView())}return!0}}return!1}function O(e,t){return function(r,o){var i=r.selection,a=i.$from,s=i.$to,l=a.blockRange(s),c=l&&(0,n.findWrapping)(l,e,t);return!!c&&(o&&o(r.tr.wrap(l,c).scrollIntoView()),!0)}}function C(e,t){return function(r,n){var o=r.selection,i=o.from,a=o.to,s=!1;return r.doc.nodesBetween(i,a,(function(n,o){if(s)return!1;if(n.isTextblock&&!n.hasMarkup(e,t))if(n.type==e)s=!0;else{var i=r.doc.resolve(o),a=i.index();s=i.parent.canReplaceWith(a,a+1,e)}})),!!s&&(n&&n(r.tr.setBlockType(i,a,e,t).scrollIntoView()),!0)}}function N(e,t){return function(r,n){var o=r.selection,i=o.empty,a=o.$cursor,s=o.ranges;if(i&&!a||!function(e,t,r){for(var n=function(n){var o=t[n],i=o.$from,a=o.$to,s=0==i.depth&&e.type.allowsMarkType(r);if(e.nodesBetween(i.pos,a.pos,(function(e){if(s)return!1;s=e.inlineContent&&e.type.allowsMarkType(r)})),s)return{v:!0}},o=0;o<t.length;o++){var i=n(o);if(i)return i.v}return!1}(r.doc,s,e))return!1;if(n)if(a)e.isInSet(r.storedMarks||a.marks())?n(r.tr.removeStoredMark(e)):n(r.tr.addStoredMark(e.create(t)));else{for(var l=!1,c=r.tr,h=0;!l&&h<s.length;h++){var p=s[h],u=p.$from,d=p.$to;l=r.doc.rangeHasMark(u.pos,d.pos,e)}for(var f=0;f<s.length;f++){var m=s[f],g=m.$from,v=m.$to;if(l)c.removeMark(g.pos,v.pos,e);else{var y=g.pos,b=v.pos,w=g.nodeAfter,x=v.nodeBefore,S=w&&w.isText?/^\s*/.exec(w.text)[0].length:0,k=x&&x.isText?/\s*$/.exec(x.text)[0].length:0;y+S<b&&(y+=S,b-=k),c.addMark(y,b,e.create(t))}}n(c.scrollIntoView())}return!0}}function z(e,t){if(Array.isArray(t)){var r=t;t=function(e){return r.indexOf(e.type.name)>-1}}return function(r,o){return e(r,o&&function(e,t){return function(r){if(!r.isGeneric)return e(r);for(var o=[],i=0;i<r.mapping.maps.length;i++){for(var a=r.mapping.maps[i],s=0;s<o.length;s++)o[s]=a.map(o[s]);a.forEach((function(e,t,r,n){return o.push(r,n)}))}for(var l=[],c=0;c<o.length;c+=2)for(var h=o[c],p=o[c+1],u=r.doc.resolve(h),d=u.sharedDepth(p),f=u.node(d),m=u.indexAfter(d),g=u.after(d+1);g<=p;++m){var v=f.maybeChild(m);if(!v)break;if(m&&-1==l.indexOf(g)){var y=f.child(m-1);y.type==v.type&&t(y,v)&&l.push(g)}g+=v.nodeSize}l.sort((function(e,t){return e-t}));for(var b=l.length-1;b>=0;b--)(0,n.canJoin)(r.doc,l[b])&&r.join(l[b]);e(r)}}(o,t))}}function E(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return function(t,r,n){for(var o=0;o<e.length;o++)if(e[o](t,r,n))return!0;return!1}}var D=E(a,s,c),I=E(a,p,u),R={Enter:E(v,w,x,S),"Mod-Enter":b,Backspace:D,"Mod-Backspace":D,Delete:I,"Mod-Delete":I,"Mod-a":T},B={"Ctrl-h":R.Backspace,"Alt-Backspace":R["Mod-Backspace"],"Ctrl-d":R.Delete,"Ctrl-Alt-Backspace":R["Mod-Delete"],"Alt-Delete":R["Mod-Delete"],"Alt-d":R["Mod-Delete"]};for(var P in R)B[P]=R[P];var _=("undefined"!=typeof navigator?/Mac/.test(navigator.platform):"undefined"!=typeof os&&"darwin"==os.platform())?B:R},896:(e,t,r)=>{"use strict";r.r(t),r.d(t,{InputRule:()=>i,closeDoubleQuote:()=>u,closeSingleQuote:()=>f,ellipsis:()=>h,emDash:()=>c,inputRules:()=>a,openDoubleQuote:()=>p,openSingleQuote:()=>d,smartQuotes:()=>m,textblockTypeInputRule:()=>v,undoInputRule:()=>l,wrappingInputRule:()=>g});var n=r(922),o=r(81),i=function(e,t){var r;this.match=e,this.handler="string"==typeof t?(r=t,function(e,t,n,o){var i=r;if(t[1]){var a=t[0].lastIndexOf(t[1]);i+=t[0].slice(a+t[1].length);var s=(n+=a)-o;s>0&&(i=t[0].slice(a-s,a)+i,n=o)}return e.tr.insertText(i,n,o)}):t};function a(e){var t=e.rules,r=new n.Plugin({state:{init:function(){return null},apply:function(e,t){return e.getMeta(this)||(e.selectionSet||e.docChanged?null:t)}},props:{handleTextInput:function(e,n,o,i){return s(e,n,o,i,t,r)},handleDOMEvents:{compositionend:function(e){setTimeout((function(){var n=e.state.selection.$cursor;n&&s(e,n.pos,n.pos,"",t,r)}))}}},isInputRules:!0});return r}function s(e,t,r,n,o,i){if(e.composing)return!1;var a=e.state,s=a.doc.resolve(t);if(s.parent.type.spec.code)return!1;for(var l=s.parent.textBetween(Math.max(0,s.parentOffset-500),s.parentOffset,null,"￼")+n,c=0;c<o.length;c++){var h=o[c].match.exec(l),p=h&&o[c].handler(a,h,t-(h[0].length-n.length),r);if(p)return e.dispatch(p.setMeta(i,{transform:p,from:t,to:r,text:n})),!0}return!1}function l(e,t){for(var r=e.plugins,n=0;n<r.length;n++){var o=r[n],i=void 0;if(o.spec.isInputRules&&(i=o.getState(e))){if(t){for(var a=e.tr,s=i.transform,l=s.steps.length-1;l>=0;l--)a.step(s.steps[l].invert(s.docs[l]));if(i.text){var c=a.doc.resolve(i.from).marks();a.replaceWith(i.from,i.to,e.schema.text(i.text,c))}else a.delete(i.from,i.to);t(a)}return!0}}return!1}var c=new i(/--$/,"—"),h=new i(/\.\.\.$/,"…"),p=new i(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(")$/,"“"),u=new i(/"$/,"”"),d=new i(/(?:^|[\s\{\[\(\<'"\u2018\u201C])(')$/,"‘"),f=new i(/'$/,"’"),m=[p,u,d,f];function g(e,t,r,n){return new i(e,(function(e,i,a,s){var l=r instanceof Function?r(i):r,c=e.tr.delete(a,s),h=c.doc.resolve(a).blockRange(),p=h&&(0,o.findWrapping)(h,t,l);if(!p)return null;c.wrap(h,p);var u=c.doc.resolve(a-1).nodeBefore;return u&&u.type==t&&(0,o.canJoin)(c.doc,a-1)&&(!n||n(i,u))&&c.join(a-1),c}))}function v(e,t,r){return new i(e,(function(e,n,o,i){var a=e.doc.resolve(o),s=r instanceof Function?r(n):r;return a.node(-1).canReplaceWith(a.index(-1),a.indexAfter(-1),t)?e.tr.delete(o,i).setBlockType(o,o,t,s):null}))}},629:(e,t,r)=>{"use strict";r.r(t),r.d(t,{keydownHandler:()=>y,keymap:()=>v});for(var n={8:"Backspace",9:"Tab",10:"Enter",12:"NumLock",13:"Enter",16:"Shift",17:"Control",18:"Alt",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",44:"PrintScreen",45:"Insert",46:"Delete",59:";",61:"=",91:"Meta",92:"Meta",106:"*",107:"+",108:",",109:"-",110:".",111:"/",144:"NumLock",145:"ScrollLock",160:"Shift",161:"Shift",162:"Control",163:"Control",164:"Alt",165:"Alt",173:"-",186:";",187:"=",188:",",189:"-",190:".",191:"/",192:"`",219:"[",220:"\\",221:"]",222:"'",229:"q"},o={48:")",49:"!",50:"@",51:"#",52:"$",53:"%",54:"^",55:"&",56:"*",57:"(",59:":",61:"+",173:"_",186:":",187:"+",188:"<",189:"_",190:">",191:"?",192:"~",219:"{",220:"|",221:"}",222:'"',229:"Q"},i="undefined"!=typeof navigator&&/Chrome\/(\d+)/.exec(navigator.userAgent),a="undefined"!=typeof navigator&&/Apple Computer/.test(navigator.vendor),s="undefined"!=typeof navigator&&/Gecko\/\d+/.test(navigator.userAgent),l="undefined"!=typeof navigator&&/Mac/.test(navigator.platform),c="undefined"!=typeof navigator&&/MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent),h=i&&(l||+i[1]<57)||s&&l,p=0;p<10;p++)n[48+p]=n[96+p]=String(p);for(p=1;p<=24;p++)n[p+111]="F"+p;for(p=65;p<=90;p++)n[p]=String.fromCharCode(p+32),o[p]=String.fromCharCode(p);for(var u in n)o.hasOwnProperty(u)||(o[u]=n[u]);var d=r(922),f="undefined"!=typeof navigator&&/Mac/.test(navigator.platform);function m(e){var t,r,n,o,i=e.split(/-(?!$)/),a=i[i.length-1];"Space"==a&&(a=" ");for(var s=0;s<i.length-1;s++){var l=i[s];if(/^(cmd|meta|m)$/i.test(l))o=!0;else if(/^a(lt)?$/i.test(l))t=!0;else if(/^(c|ctrl|control)$/i.test(l))r=!0;else if(/^s(hift)?$/i.test(l))n=!0;else{if(!/^mod$/i.test(l))throw new Error("Unrecognized modifier name: "+l);f?o=!0:r=!0}}return t&&(a="Alt-"+a),r&&(a="Ctrl-"+a),o&&(a="Meta-"+a),n&&(a="Shift-"+a),a}function g(e,t,r){return t.altKey&&(e="Alt-"+e),t.ctrlKey&&(e="Ctrl-"+e),t.metaKey&&(e="Meta-"+e),!1!==r&&t.shiftKey&&(e="Shift-"+e),e}function v(e){return new d.Plugin({props:{handleKeyDown:y(e)}})}function y(e){var t=function(e){var t=Object.create(null);for(var r in e)t[m(r)]=e[r];return t}(e);return function(e,r){var i,s=function(e){var t=!(h&&(e.ctrlKey||e.altKey||e.metaKey)||(a||c)&&e.shiftKey&&e.key&&1==e.key.length)&&e.key||(e.shiftKey?o:n)[e.keyCode]||e.key||"Unidentified";return"Esc"==t&&(t="Escape"),"Del"==t&&(t="Delete"),"Left"==t&&(t="ArrowLeft"),"Up"==t&&(t="ArrowUp"),"Right"==t&&(t="ArrowRight"),"Down"==t&&(t="ArrowDown"),t}(r),l=1==s.length&&" "!=s,p=t[g(s,r,!l)];if(p&&p(e.state,e.dispatch,e))return!0;if(l&&(r.shiftKey||r.altKey||r.metaKey||s.charCodeAt(0)>127)&&(i=n[r.keyCode])&&i!=s){var u=t[g(i,r,!0)];if(u&&u(e.state,e.dispatch,e))return!0}else if(l&&r.shiftKey){var d=t[g(s,r,!0)];if(d&&d(e.state,e.dispatch,e))return!0}return!1}}},638:(e,t,r)=>{"use strict";function n(e){this.content=e}r.r(t),r.d(t,{ContentMatch:()=>L,DOMParser:()=>ae,DOMSerializer:()=>ve,Fragment:()=>s,Mark:()=>u,MarkType:()=>ne,Node:()=>B,NodeRange:()=>D,NodeType:()=>Q,ReplaceError:()=>d,ResolvedPos:()=>O,Schema:()=>oe,Slice:()=>f}),n.prototype={constructor:n,find:function(e){for(var t=0;t<this.content.length;t+=2)if(this.content[t]===e)return t;return-1},get:function(e){var t=this.find(e);return-1==t?void 0:this.content[t+1]},update:function(e,t,r){var o=r&&r!=e?this.remove(r):this,i=o.find(e),a=o.content.slice();return-1==i?a.push(r||e,t):(a[i+1]=t,r&&(a[i]=r)),new n(a)},remove:function(e){var t=this.find(e);if(-1==t)return this;var r=this.content.slice();return r.splice(t,2),new n(r)},addToStart:function(e,t){return new n([e,t].concat(this.remove(e).content))},addToEnd:function(e,t){var r=this.remove(e).content.slice();return r.push(e,t),new n(r)},addBefore:function(e,t,r){var o=this.remove(t),i=o.content.slice(),a=o.find(e);return i.splice(-1==a?i.length:a,0,t,r),new n(i)},forEach:function(e){for(var t=0;t<this.content.length;t+=2)e(this.content[t],this.content[t+1])},prepend:function(e){return(e=n.from(e)).size?new n(e.content.concat(this.subtract(e).content)):this},append:function(e){return(e=n.from(e)).size?new n(this.subtract(e).content.concat(e.content)):this},subtract:function(e){var t=this;e=n.from(e);for(var r=0;r<e.content.length;r+=2)t=t.remove(e.content[r]);return t},get size(){return this.content.length>>1}},n.from=function(e){if(e instanceof n)return e;var t=[];if(e)for(var r in e)t.push(r,e[r]);return new n(t)};const o=n;function i(e,t,r){for(var n=0;;n++){if(n==e.childCount||n==t.childCount)return e.childCount==t.childCount?null:r;var o=e.child(n),a=t.child(n);if(o!=a){if(!o.sameMarkup(a))return r;if(o.isText&&o.text!=a.text){for(var s=0;o.text[s]==a.text[s];s++)r++;return r}if(o.content.size||a.content.size){var l=i(o.content,a.content,r+1);if(null!=l)return l}r+=o.nodeSize}else r+=o.nodeSize}}function a(e,t,r,n){for(var o=e.childCount,i=t.childCount;;){if(0==o||0==i)return o==i?null:{a:r,b:n};var s=e.child(--o),l=t.child(--i),c=s.nodeSize;if(s!=l){if(!s.sameMarkup(l))return{a:r,b:n};if(s.isText&&s.text!=l.text){for(var h=0,p=Math.min(s.text.length,l.text.length);h<p&&s.text[s.text.length-h-1]==l.text[l.text.length-h-1];)h++,r--,n--;return{a:r,b:n}}if(s.content.size||l.content.size){var u=a(s.content,l.content,r-1,n-1);if(u)return u}r-=c,n-=c}else r-=c,n-=c}}var s=function(e,t){if(this.content=e,this.size=t||0,null==t)for(var r=0;r<e.length;r++)this.size+=e[r].nodeSize},l={firstChild:{configurable:!0},lastChild:{configurable:!0},childCount:{configurable:!0}};s.prototype.nodesBetween=function(e,t,r,n,o){void 0===n&&(n=0);for(var i=0,a=0;a<t;i++){var s=this.content[i],l=a+s.nodeSize;if(l>e&&!1!==r(s,n+a,o,i)&&s.content.size){var c=a+1;s.nodesBetween(Math.max(0,e-c),Math.min(s.content.size,t-c),r,n+c)}a=l}},s.prototype.descendants=function(e){this.nodesBetween(0,this.size,e)},s.prototype.textBetween=function(e,t,r,n){var o="",i=!0;return this.nodesBetween(e,t,(function(a,s){a.isText?(o+=a.text.slice(Math.max(e,s)-s,t-s),i=!r):a.isLeaf&&n?(o+=n,i=!r):!i&&a.isBlock&&(o+=r,i=!0)}),0),o},s.prototype.append=function(e){if(!e.size)return this;if(!this.size)return e;var t=this.lastChild,r=e.firstChild,n=this.content.slice(),o=0;for(t.isText&&t.sameMarkup(r)&&(n[n.length-1]=t.withText(t.text+r.text),o=1);o<e.content.length;o++)n.push(e.content[o]);return new s(n,this.size+e.size)},s.prototype.cut=function(e,t){if(null==t&&(t=this.size),0==e&&t==this.size)return this;var r=[],n=0;if(t>e)for(var o=0,i=0;i<t;o++){var a=this.content[o],l=i+a.nodeSize;l>e&&((i<e||l>t)&&(a=a.isText?a.cut(Math.max(0,e-i),Math.min(a.text.length,t-i)):a.cut(Math.max(0,e-i-1),Math.min(a.content.size,t-i-1))),r.push(a),n+=a.nodeSize),i=l}return new s(r,n)},s.prototype.cutByIndex=function(e,t){return e==t?s.empty:0==e&&t==this.content.length?this:new s(this.content.slice(e,t))},s.prototype.replaceChild=function(e,t){var r=this.content[e];if(r==t)return this;var n=this.content.slice(),o=this.size+t.nodeSize-r.nodeSize;return n[e]=t,new s(n,o)},s.prototype.addToStart=function(e){return new s([e].concat(this.content),this.size+e.nodeSize)},s.prototype.addToEnd=function(e){return new s(this.content.concat(e),this.size+e.nodeSize)},s.prototype.eq=function(e){if(this.content.length!=e.content.length)return!1;for(var t=0;t<this.content.length;t++)if(!this.content[t].eq(e.content[t]))return!1;return!0},l.firstChild.get=function(){return this.content.length?this.content[0]:null},l.lastChild.get=function(){return this.content.length?this.content[this.content.length-1]:null},l.childCount.get=function(){return this.content.length},s.prototype.child=function(e){var t=this.content[e];if(!t)throw new RangeError("Index "+e+" out of range for "+this);return t},s.prototype.maybeChild=function(e){return this.content[e]},s.prototype.forEach=function(e){for(var t=0,r=0;t<this.content.length;t++){var n=this.content[t];e(n,r,t),r+=n.nodeSize}},s.prototype.findDiffStart=function(e,t){return void 0===t&&(t=0),i(this,e,t)},s.prototype.findDiffEnd=function(e,t,r){return void 0===t&&(t=this.size),void 0===r&&(r=e.size),a(this,e,t,r)},s.prototype.findIndex=function(e,t){if(void 0===t&&(t=-1),0==e)return h(0,e);if(e==this.size)return h(this.content.length,e);if(e>this.size||e<0)throw new RangeError("Position "+e+" outside of fragment ("+this+")");for(var r=0,n=0;;r++){var o=n+this.child(r).nodeSize;if(o>=e)return o==e||t>0?h(r+1,o):h(r,n);n=o}},s.prototype.toString=function(){return"<"+this.toStringInner()+">"},s.prototype.toStringInner=function(){return this.content.join(", ")},s.prototype.toJSON=function(){return this.content.length?this.content.map((function(e){return e.toJSON()})):null},s.fromJSON=function(e,t){if(!t)return s.empty;if(!Array.isArray(t))throw new RangeError("Invalid input for Fragment.fromJSON");return new s(t.map(e.nodeFromJSON))},s.fromArray=function(e){if(!e.length)return s.empty;for(var t,r=0,n=0;n<e.length;n++){var o=e[n];r+=o.nodeSize,n&&o.isText&&e[n-1].sameMarkup(o)?(t||(t=e.slice(0,n)),t[t.length-1]=o.withText(t[t.length-1].text+o.text)):t&&t.push(o)}return new s(t||e,r)},s.from=function(e){if(!e)return s.empty;if(e instanceof s)return e;if(Array.isArray(e))return this.fromArray(e);if(e.attrs)return new s([e],e.nodeSize);throw new RangeError("Can not convert "+e+" to a Fragment"+(e.nodesBetween?" (looks like multiple versions of prosemirror-model were loaded)":""))},Object.defineProperties(s.prototype,l);var c={index:0,offset:0};function h(e,t){return c.index=e,c.offset=t,c}function p(e,t){if(e===t)return!0;if(!e||"object"!=typeof e||!t||"object"!=typeof t)return!1;var r=Array.isArray(e);if(Array.isArray(t)!=r)return!1;if(r){if(e.length!=t.length)return!1;for(var n=0;n<e.length;n++)if(!p(e[n],t[n]))return!1}else{for(var o in e)if(!(o in t)||!p(e[o],t[o]))return!1;for(var i in t)if(!(i in e))return!1}return!0}s.empty=new s([],0);var u=function(e,t){this.type=e,this.attrs=t};function d(e){var t=Error.call(this,e);return t.__proto__=d.prototype,t}u.prototype.addToSet=function(e){for(var t,r=!1,n=0;n<e.length;n++){var o=e[n];if(this.eq(o))return e;if(this.type.excludes(o.type))t||(t=e.slice(0,n));else{if(o.type.excludes(this.type))return e;!r&&o.type.rank>this.type.rank&&(t||(t=e.slice(0,n)),t.push(this),r=!0),t&&t.push(o)}}return t||(t=e.slice()),r||t.push(this),t},u.prototype.removeFromSet=function(e){for(var t=0;t<e.length;t++)if(this.eq(e[t]))return e.slice(0,t).concat(e.slice(t+1));return e},u.prototype.isInSet=function(e){for(var t=0;t<e.length;t++)if(this.eq(e[t]))return!0;return!1},u.prototype.eq=function(e){return this==e||this.type==e.type&&p(this.attrs,e.attrs)},u.prototype.toJSON=function(){var e={type:this.type.name};for(var t in this.attrs){e.attrs=this.attrs;break}return e},u.fromJSON=function(e,t){if(!t)throw new RangeError("Invalid input for Mark.fromJSON");var r=e.marks[t.type];if(!r)throw new RangeError("There is no mark type "+t.type+" in this schema");return r.create(t.attrs)},u.sameSet=function(e,t){if(e==t)return!0;if(e.length!=t.length)return!1;for(var r=0;r<e.length;r++)if(!e[r].eq(t[r]))return!1;return!0},u.setFrom=function(e){if(!e||0==e.length)return u.none;if(e instanceof u)return[e];var t=e.slice();return t.sort((function(e,t){return e.type.rank-t.type.rank})),t},u.none=[],d.prototype=Object.create(Error.prototype),d.prototype.constructor=d,d.prototype.name="ReplaceError";var f=function(e,t,r){this.content=e,this.openStart=t,this.openEnd=r},m={size:{configurable:!0}};function g(e,t,r){var n=e.findIndex(t),o=n.index,i=n.offset,a=e.maybeChild(o),s=e.findIndex(r),l=s.index,c=s.offset;if(i==t||a.isText){if(c!=r&&!e.child(l).isText)throw new RangeError("Removing non-flat range");return e.cut(0,t).append(e.cut(r))}if(o!=l)throw new RangeError("Removing non-flat range");return e.replaceChild(o,a.copy(g(a.content,t-i-1,r-i-1)))}function v(e,t,r,n){var o=e.findIndex(t),i=o.index,a=o.offset,s=e.maybeChild(i);if(a==t||s.isText)return n&&!n.canReplace(i,i,r)?null:e.cut(0,t).append(r).append(e.cut(t));var l=v(s.content,t-a-1,r);return l&&e.replaceChild(i,s.copy(l))}function y(e,t,r){if(r.openStart>e.depth)throw new d("Inserted content deeper than insertion position");if(e.depth-r.openStart!=t.depth-r.openEnd)throw new d("Inconsistent open depths");return b(e,t,r,0)}function b(e,t,r,n){var o=e.index(n),i=e.node(n);if(o==t.index(n)&&n<e.depth-r.openStart){var a=b(e,t,r,n+1);return i.copy(i.content.replaceChild(o,a))}if(r.content.size){if(r.openStart||r.openEnd||e.depth!=n||t.depth!=n){var l=function(e,t){for(var r=t.depth-e.openStart,n=t.node(r).copy(e.content),o=r-1;o>=0;o--)n=t.node(o).copy(s.from(n));return{start:n.resolveNoCache(e.openStart+r),end:n.resolveNoCache(n.content.size-e.openEnd-r)}}(r,e);return M(i,T(e,l.start,l.end,t,n))}var c=e.parent,h=c.content;return M(c,h.cut(0,e.parentOffset).append(r.content).append(h.cut(t.parentOffset)))}return M(i,A(e,t,n))}function w(e,t){if(!t.type.compatibleContent(e.type))throw new d("Cannot join "+t.type.name+" onto "+e.type.name)}function x(e,t,r){var n=e.node(r);return w(n,t.node(r)),n}function S(e,t){var r=t.length-1;r>=0&&e.isText&&e.sameMarkup(t[r])?t[r]=e.withText(t[r].text+e.text):t.push(e)}function k(e,t,r,n){var o=(t||e).node(r),i=0,a=t?t.index(r):o.childCount;e&&(i=e.index(r),e.depth>r?i++:e.textOffset&&(S(e.nodeAfter,n),i++));for(var s=i;s<a;s++)S(o.child(s),n);t&&t.depth==r&&t.textOffset&&S(t.nodeBefore,n)}function M(e,t){if(!e.type.validContent(t))throw new d("Invalid content for node "+e.type.name);return e.copy(t)}function T(e,t,r,n,o){var i=e.depth>o&&x(e,t,o+1),a=n.depth>o&&x(r,n,o+1),l=[];return k(null,e,o,l),i&&a&&t.index(o)==r.index(o)?(w(i,a),S(M(i,T(e,t,r,n,o+1)),l)):(i&&S(M(i,A(e,t,o+1)),l),k(t,r,o,l),a&&S(M(a,A(r,n,o+1)),l)),k(n,null,o,l),new s(l)}function A(e,t,r){var n=[];return k(null,e,r,n),e.depth>r&&S(M(x(e,t,r+1),A(e,t,r+1)),n),k(t,null,r,n),new s(n)}m.size.get=function(){return this.content.size-this.openStart-this.openEnd},f.prototype.insertAt=function(e,t){var r=v(this.content,e+this.openStart,t,null);return r&&new f(r,this.openStart,this.openEnd)},f.prototype.removeBetween=function(e,t){return new f(g(this.content,e+this.openStart,t+this.openStart),this.openStart,this.openEnd)},f.prototype.eq=function(e){return this.content.eq(e.content)&&this.openStart==e.openStart&&this.openEnd==e.openEnd},f.prototype.toString=function(){return this.content+"("+this.openStart+","+this.openEnd+")"},f.prototype.toJSON=function(){if(!this.content.size)return null;var e={content:this.content.toJSON()};return this.openStart>0&&(e.openStart=this.openStart),this.openEnd>0&&(e.openEnd=this.openEnd),e},f.fromJSON=function(e,t){if(!t)return f.empty;var r=t.openStart||0,n=t.openEnd||0;if("number"!=typeof r||"number"!=typeof n)throw new RangeError("Invalid input for Slice.fromJSON");return new f(s.fromJSON(e,t.content),r,n)},f.maxOpen=function(e,t){void 0===t&&(t=!0);for(var r=0,n=0,o=e.firstChild;o&&!o.isLeaf&&(t||!o.type.spec.isolating);o=o.firstChild)r++;for(var i=e.lastChild;i&&!i.isLeaf&&(t||!i.type.spec.isolating);i=i.lastChild)n++;return new f(e,r,n)},Object.defineProperties(f.prototype,m),f.empty=new f(s.empty,0,0);var O=function(e,t,r){this.pos=e,this.path=t,this.depth=t.length/3-1,this.parentOffset=r},C={parent:{configurable:!0},doc:{configurable:!0},textOffset:{configurable:!0},nodeAfter:{configurable:!0},nodeBefore:{configurable:!0}};O.prototype.resolveDepth=function(e){return null==e?this.depth:e<0?this.depth+e:e},C.parent.get=function(){return this.node(this.depth)},C.doc.get=function(){return this.node(0)},O.prototype.node=function(e){return this.path[3*this.resolveDepth(e)]},O.prototype.index=function(e){return this.path[3*this.resolveDepth(e)+1]},O.prototype.indexAfter=function(e){return e=this.resolveDepth(e),this.index(e)+(e!=this.depth||this.textOffset?1:0)},O.prototype.start=function(e){return 0==(e=this.resolveDepth(e))?0:this.path[3*e-1]+1},O.prototype.end=function(e){return e=this.resolveDepth(e),this.start(e)+this.node(e).content.size},O.prototype.before=function(e){if(!(e=this.resolveDepth(e)))throw new RangeError("There is no position before the top-level node");return e==this.depth+1?this.pos:this.path[3*e-1]},O.prototype.after=function(e){if(!(e=this.resolveDepth(e)))throw new RangeError("There is no position after the top-level node");return e==this.depth+1?this.pos:this.path[3*e-1]+this.path[3*e].nodeSize},C.textOffset.get=function(){return this.pos-this.path[this.path.length-1]},C.nodeAfter.get=function(){var e=this.parent,t=this.index(this.depth);if(t==e.childCount)return null;var r=this.pos-this.path[this.path.length-1],n=e.child(t);return r?e.child(t).cut(r):n},C.nodeBefore.get=function(){var e=this.index(this.depth),t=this.pos-this.path[this.path.length-1];return t?this.parent.child(e).cut(0,t):0==e?null:this.parent.child(e-1)},O.prototype.posAtIndex=function(e,t){t=this.resolveDepth(t);for(var r=this.path[3*t],n=0==t?0:this.path[3*t-1]+1,o=0;o<e;o++)n+=r.child(o).nodeSize;return n},O.prototype.marks=function(){var e=this.parent,t=this.index();if(0==e.content.size)return u.none;if(this.textOffset)return e.child(t).marks;var r=e.maybeChild(t-1),n=e.maybeChild(t);if(!r){var o=r;r=n,n=o}for(var i=r.marks,a=0;a<i.length;a++)!1!==i[a].type.spec.inclusive||n&&i[a].isInSet(n.marks)||(i=i[a--].removeFromSet(i));return i},O.prototype.marksAcross=function(e){var t=this.parent.maybeChild(this.index());if(!t||!t.isInline)return null;for(var r=t.marks,n=e.parent.maybeChild(e.index()),o=0;o<r.length;o++)!1!==r[o].type.spec.inclusive||n&&r[o].isInSet(n.marks)||(r=r[o--].removeFromSet(r));return r},O.prototype.sharedDepth=function(e){for(var t=this.depth;t>0;t--)if(this.start(t)<=e&&this.end(t)>=e)return t;return 0},O.prototype.blockRange=function(e,t){if(void 0===e&&(e=this),e.pos<this.pos)return e.blockRange(this);for(var r=this.depth-(this.parent.inlineContent||this.pos==e.pos?1:0);r>=0;r--)if(e.pos<=this.end(r)&&(!t||t(this.node(r))))return new D(this,e,r)},O.prototype.sameParent=function(e){return this.pos-this.parentOffset==e.pos-e.parentOffset},O.prototype.max=function(e){return e.pos>this.pos?e:this},O.prototype.min=function(e){return e.pos<this.pos?e:this},O.prototype.toString=function(){for(var e="",t=1;t<=this.depth;t++)e+=(e?"/":"")+this.node(t).type.name+"_"+this.index(t-1);return e+":"+this.parentOffset},O.resolve=function(e,t){if(!(t>=0&&t<=e.content.size))throw new RangeError("Position "+t+" out of range");for(var r=[],n=0,o=t,i=e;;){var a=i.content.findIndex(o),s=a.index,l=a.offset,c=o-l;if(r.push(i,s,n+l),!c)break;if((i=i.child(s)).isText)break;o=c-1,n+=l+1}return new O(t,r,o)},O.resolveCached=function(e,t){for(var r=0;r<N.length;r++){var n=N[r];if(n.pos==t&&n.doc==e)return n}var o=N[z]=O.resolve(e,t);return z=(z+1)%E,o},Object.defineProperties(O.prototype,C);var N=[],z=0,E=12,D=function(e,t,r){this.$from=e,this.$to=t,this.depth=r},I={start:{configurable:!0},end:{configurable:!0},parent:{configurable:!0},startIndex:{configurable:!0},endIndex:{configurable:!0}};I.start.get=function(){return this.$from.before(this.depth+1)},I.end.get=function(){return this.$to.after(this.depth+1)},I.parent.get=function(){return this.$from.node(this.depth)},I.startIndex.get=function(){return this.$from.index(this.depth)},I.endIndex.get=function(){return this.$to.indexAfter(this.depth)},Object.defineProperties(D.prototype,I);var R=Object.create(null),B=function(e,t,r,n){this.type=e,this.attrs=t,this.content=r||s.empty,this.marks=n||u.none},P={nodeSize:{configurable:!0},childCount:{configurable:!0},textContent:{configurable:!0},firstChild:{configurable:!0},lastChild:{configurable:!0},isBlock:{configurable:!0},isTextblock:{configurable:!0},inlineContent:{configurable:!0},isInline:{configurable:!0},isText:{configurable:!0},isLeaf:{configurable:!0},isAtom:{configurable:!0}};P.nodeSize.get=function(){return this.isLeaf?1:2+this.content.size},P.childCount.get=function(){return this.content.childCount},B.prototype.child=function(e){return this.content.child(e)},B.prototype.maybeChild=function(e){return this.content.maybeChild(e)},B.prototype.forEach=function(e){this.content.forEach(e)},B.prototype.nodesBetween=function(e,t,r,n){void 0===n&&(n=0),this.content.nodesBetween(e,t,r,n,this)},B.prototype.descendants=function(e){this.nodesBetween(0,this.content.size,e)},P.textContent.get=function(){return this.textBetween(0,this.content.size,"")},B.prototype.textBetween=function(e,t,r,n){return this.content.textBetween(e,t,r,n)},P.firstChild.get=function(){return this.content.firstChild},P.lastChild.get=function(){return this.content.lastChild},B.prototype.eq=function(e){return this==e||this.sameMarkup(e)&&this.content.eq(e.content)},B.prototype.sameMarkup=function(e){return this.hasMarkup(e.type,e.attrs,e.marks)},B.prototype.hasMarkup=function(e,t,r){return this.type==e&&p(this.attrs,t||e.defaultAttrs||R)&&u.sameSet(this.marks,r||u.none)},B.prototype.copy=function(e){return void 0===e&&(e=null),e==this.content?this:new this.constructor(this.type,this.attrs,e,this.marks)},B.prototype.mark=function(e){return e==this.marks?this:new this.constructor(this.type,this.attrs,this.content,e)},B.prototype.cut=function(e,t){return 0==e&&t==this.content.size?this:this.copy(this.content.cut(e,t))},B.prototype.slice=function(e,t,r){if(void 0===t&&(t=this.content.size),void 0===r&&(r=!1),e==t)return f.empty;var n=this.resolve(e),o=this.resolve(t),i=r?0:n.sharedDepth(t),a=n.start(i),s=n.node(i).content.cut(n.pos-a,o.pos-a);return new f(s,n.depth-i,o.depth-i)},B.prototype.replace=function(e,t,r){return y(this.resolve(e),this.resolve(t),r)},B.prototype.nodeAt=function(e){for(var t=this;;){var r=t.content.findIndex(e),n=r.index,o=r.offset;if(!(t=t.maybeChild(n)))return null;if(o==e||t.isText)return t;e-=o+1}},B.prototype.childAfter=function(e){var t=this.content.findIndex(e),r=t.index,n=t.offset;return{node:this.content.maybeChild(r),index:r,offset:n}},B.prototype.childBefore=function(e){if(0==e)return{node:null,index:0,offset:0};var t=this.content.findIndex(e),r=t.index,n=t.offset;if(n<e)return{node:this.content.child(r),index:r,offset:n};var o=this.content.child(r-1);return{node:o,index:r-1,offset:n-o.nodeSize}},B.prototype.resolve=function(e){return O.resolveCached(this,e)},B.prototype.resolveNoCache=function(e){return O.resolve(this,e)},B.prototype.rangeHasMark=function(e,t,r){var n=!1;return t>e&&this.nodesBetween(e,t,(function(e){return r.isInSet(e.marks)&&(n=!0),!n})),n},P.isBlock.get=function(){return this.type.isBlock},P.isTextblock.get=function(){return this.type.isTextblock},P.inlineContent.get=function(){return this.type.inlineContent},P.isInline.get=function(){return this.type.isInline},P.isText.get=function(){return this.type.isText},P.isLeaf.get=function(){return this.type.isLeaf},P.isAtom.get=function(){return this.type.isAtom},B.prototype.toString=function(){if(this.type.spec.toDebugString)return this.type.spec.toDebugString(this);var e=this.type.name;return this.content.size&&(e+="("+this.content.toStringInner()+")"),q(this.marks,e)},B.prototype.contentMatchAt=function(e){var t=this.type.contentMatch.matchFragment(this.content,0,e);if(!t)throw new Error("Called contentMatchAt on a node with invalid content");return t},B.prototype.canReplace=function(e,t,r,n,o){void 0===r&&(r=s.empty),void 0===n&&(n=0),void 0===o&&(o=r.childCount);var i=this.contentMatchAt(e).matchFragment(r,n,o),a=i&&i.matchFragment(this.content,t);if(!a||!a.validEnd)return!1;for(var l=n;l<o;l++)if(!this.type.allowsMarks(r.child(l).marks))return!1;return!0},B.prototype.canReplaceWith=function(e,t,r,n){if(n&&!this.type.allowsMarks(n))return!1;var o=this.contentMatchAt(e).matchType(r),i=o&&o.matchFragment(this.content,t);return!!i&&i.validEnd},B.prototype.canAppend=function(e){return e.content.size?this.canReplace(this.childCount,this.childCount,e.content):this.type.compatibleContent(e.type)},B.prototype.check=function(){if(!this.type.validContent(this.content))throw new RangeError("Invalid content for node "+this.type.name+": "+this.content.toString().slice(0,50));for(var e=u.none,t=0;t<this.marks.length;t++)e=this.marks[t].addToSet(e);if(!u.sameSet(e,this.marks))throw new RangeError("Invalid collection of marks for node "+this.type.name+": "+this.marks.map((function(e){return e.type.name})));this.content.forEach((function(e){return e.check()}))},B.prototype.toJSON=function(){var e={type:this.type.name};for(var t in this.attrs){e.attrs=this.attrs;break}return this.content.size&&(e.content=this.content.toJSON()),this.marks.length&&(e.marks=this.marks.map((function(e){return e.toJSON()}))),e},B.fromJSON=function(e,t){if(!t)throw new RangeError("Invalid input for Node.fromJSON");var r=null;if(t.marks){if(!Array.isArray(t.marks))throw new RangeError("Invalid mark data for Node.fromJSON");r=t.marks.map(e.markFromJSON)}if("text"==t.type){if("string"!=typeof t.text)throw new RangeError("Invalid text node in JSON");return e.text(t.text,r)}var n=s.fromJSON(e,t.content);return e.nodeType(t.type).create(t.attrs,n,r)},Object.defineProperties(B.prototype,P);var _=function(e){function t(t,r,n,o){if(e.call(this,t,r,null,o),!n)throw new RangeError("Empty text nodes are not allowed");this.text=n}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var r={textContent:{configurable:!0},nodeSize:{configurable:!0}};return t.prototype.toString=function(){return this.type.spec.toDebugString?this.type.spec.toDebugString(this):q(this.marks,JSON.stringify(this.text))},r.textContent.get=function(){return this.text},t.prototype.textBetween=function(e,t){return this.text.slice(e,t)},r.nodeSize.get=function(){return this.text.length},t.prototype.mark=function(e){return e==this.marks?this:new t(this.type,this.attrs,this.text,e)},t.prototype.withText=function(e){return e==this.text?this:new t(this.type,this.attrs,e,this.marks)},t.prototype.cut=function(e,t){return void 0===e&&(e=0),void 0===t&&(t=this.text.length),0==e&&t==this.text.length?this:this.withText(this.text.slice(e,t))},t.prototype.eq=function(e){return this.sameMarkup(e)&&this.text==e.text},t.prototype.toJSON=function(){var t=e.prototype.toJSON.call(this);return t.text=this.text,t},Object.defineProperties(t.prototype,r),t}(B);function q(e,t){for(var r=e.length-1;r>=0;r--)t=e[r].type.name+"("+t+")";return t}var L=function(e){this.validEnd=e,this.next=[],this.wrapCache=[]},F={inlineContent:{configurable:!0},defaultType:{configurable:!0},edgeCount:{configurable:!0}};L.parse=function(e,t){var r=new V(e,t);if(null==r.next)return L.empty;var n=$(r);r.next&&r.err("Unexpected trailing text");var o,i,a=(o=function(e){var t=[[]];return o(function e(t,i){if("choice"==t.type)return t.exprs.reduce((function(t,r){return t.concat(e(r,i))}),[]);if("seq"==t.type)for(var a=0;;a++){var s=e(t.exprs[a],i);if(a==t.exprs.length-1)return s;o(s,i=r())}else{if("star"==t.type){var l=r();return n(i,l),o(e(t.expr,l),l),[n(l)]}if("plus"==t.type){var c=r();return o(e(t.expr,i),c),o(e(t.expr,c),c),[n(c)]}if("opt"==t.type)return[n(i)].concat(e(t.expr,i));if("range"==t.type){for(var h=i,p=0;p<t.min;p++){var u=r();o(e(t.expr,h),u),h=u}if(-1==t.max)o(e(t.expr,h),h);else for(var d=t.min;d<t.max;d++){var f=r();n(h,f),o(e(t.expr,h),f),h=f}return[n(h)]}if("name"==t.type)return[n(i,null,t.value)]}}(e,0),r()),t;function r(){return t.push([])-1}function n(e,r,n){var o={term:n,to:r};return t[e].push(o),o}function o(e,t){e.forEach((function(e){return e.to=t}))}}(n),i=Object.create(null),function e(t){var r=[];t.forEach((function(e){o[e].forEach((function(e){var t=e.term,n=e.to;if(t){var i=r.indexOf(t),a=i>-1&&r[i+1];J(o,n).forEach((function(e){a||r.push(t,a=[]),-1==a.indexOf(e)&&a.push(e)}))}}))}));for(var n=i[t.join(",")]=new L(t.indexOf(o.length-1)>-1),a=0;a<r.length;a+=2){var s=r[a+1].sort(U);n.next.push(r[a],i[s.join(",")]||e(s))}return n}(J(o,0)));return function(e,t){for(var r=0,n=[e];r<n.length;r++){for(var o=n[r],i=!o.validEnd,a=[],s=0;s<o.next.length;s+=2){var l=o.next[s],c=o.next[s+1];a.push(l.name),!i||l.isText||l.hasRequiredAttrs()||(i=!1),-1==n.indexOf(c)&&n.push(c)}i&&t.err("Only non-generatable nodes ("+a.join(", ")+") in a required position (see https://prosemirror.net/docs/guide/#generatable)")}}(a,r),a},L.prototype.matchType=function(e){for(var t=0;t<this.next.length;t+=2)if(this.next[t]==e)return this.next[t+1];return null},L.prototype.matchFragment=function(e,t,r){void 0===t&&(t=0),void 0===r&&(r=e.childCount);for(var n=this,o=t;n&&o<r;o++)n=n.matchType(e.child(o).type);return n},F.inlineContent.get=function(){var e=this.next[0];return!!e&&e.isInline},F.defaultType.get=function(){for(var e=0;e<this.next.length;e+=2){var t=this.next[e];if(!t.isText&&!t.hasRequiredAttrs())return t}},L.prototype.compatible=function(e){for(var t=0;t<this.next.length;t+=2)for(var r=0;r<e.next.length;r+=2)if(this.next[t]==e.next[r])return!0;return!1},L.prototype.fillBefore=function(e,t,r){void 0===t&&(t=!1),void 0===r&&(r=0);var n=[this];return function o(i,a){var l=i.matchFragment(e,r);if(l&&(!t||l.validEnd))return s.from(a.map((function(e){return e.createAndFill()})));for(var c=0;c<i.next.length;c+=2){var h=i.next[c],p=i.next[c+1];if(!h.isText&&!h.hasRequiredAttrs()&&-1==n.indexOf(p)){n.push(p);var u=o(p,a.concat(h));if(u)return u}}}(this,[])},L.prototype.findWrapping=function(e){for(var t=0;t<this.wrapCache.length;t+=2)if(this.wrapCache[t]==e)return this.wrapCache[t+1];var r=this.computeWrapping(e);return this.wrapCache.push(e,r),r},L.prototype.computeWrapping=function(e){for(var t=Object.create(null),r=[{match:this,type:null,via:null}];r.length;){var n=r.shift(),o=n.match;if(o.matchType(e)){for(var i=[],a=n;a.type;a=a.via)i.push(a.type);return i.reverse()}for(var s=0;s<o.next.length;s+=2){var l=o.next[s];l.isLeaf||l.hasRequiredAttrs()||l.name in t||n.type&&!o.next[s+1].validEnd||(r.push({match:l.contentMatch,type:l,via:n}),t[l.name]=!0)}}},F.edgeCount.get=function(){return this.next.length>>1},L.prototype.edge=function(e){var t=e<<1;if(t>=this.next.length)throw new RangeError("There's no "+e+"th edge in this content match");return{type:this.next[t],next:this.next[t+1]}},L.prototype.toString=function(){var e=[];return function t(r){e.push(r);for(var n=1;n<r.next.length;n+=2)-1==e.indexOf(r.next[n])&&t(r.next[n])}(this),e.map((function(t,r){for(var n=r+(t.validEnd?"*":" ")+" ",o=0;o<t.next.length;o+=2)n+=(o?", ":"")+t.next[o].name+"->"+e.indexOf(t.next[o+1]);return n})).join("\n")},Object.defineProperties(L.prototype,F),L.empty=new L(!0);var V=function(e,t){this.string=e,this.nodeTypes=t,this.inline=null,this.pos=0,this.tokens=e.split(/\s*(?=\b|\W|$)/),""==this.tokens[this.tokens.length-1]&&this.tokens.pop(),""==this.tokens[0]&&this.tokens.shift()},H={next:{configurable:!0}};function $(e){var t=[];do{t.push(j(e))}while(e.eat("|"));return 1==t.length?t[0]:{type:"choice",exprs:t}}function j(e){var t=[];do{t.push(W(e))}while(e.next&&")"!=e.next&&"|"!=e.next);return 1==t.length?t[0]:{type:"seq",exprs:t}}function W(e){for(var t=function(e){if(e.eat("(")){var t=$(e);return e.eat(")")||e.err("Missing closing paren"),t}if(!/\W/.test(e.next)){var r=function(e,t){var r=e.nodeTypes,n=r[t];if(n)return[n];var o=[];for(var i in r){var a=r[i];a.groups.indexOf(t)>-1&&o.push(a)}return 0==o.length&&e.err("No node type or group '"+t+"' found"),o}(e,e.next).map((function(t){return null==e.inline?e.inline=t.isInline:e.inline!=t.isInline&&e.err("Mixing inline and block content"),{type:"name",value:t}}));return e.pos++,1==r.length?r[0]:{type:"choice",exprs:r}}e.err("Unexpected token '"+e.next+"'")}(e);;)if(e.eat("+"))t={type:"plus",expr:t};else if(e.eat("*"))t={type:"star",expr:t};else if(e.eat("?"))t={type:"opt",expr:t};else{if(!e.eat("{"))break;t=G(e,t)}return t}function K(e){/\D/.test(e.next)&&e.err("Expected number, got '"+e.next+"'");var t=Number(e.next);return e.pos++,t}function G(e,t){var r=K(e),n=r;return e.eat(",")&&(n="}"!=e.next?K(e):-1),e.eat("}")||e.err("Unclosed braced range"),{type:"range",min:r,max:n,expr:t}}function U(e,t){return t-e}function J(e,t){var r=[];return function t(n){var o=e[n];if(1==o.length&&!o[0].term)return t(o[0].to);r.push(n);for(var i=0;i<o.length;i++){var a=o[i],s=a.term,l=a.to;s||-1!=r.indexOf(l)||t(l)}}(t),r.sort(U)}function Y(e){var t=Object.create(null);for(var r in e){var n=e[r];if(!n.hasDefault)return null;t[r]=n.default}return t}function X(e,t){var r=Object.create(null);for(var n in e){var o=t&&t[n];if(void 0===o){var i=e[n];if(!i.hasDefault)throw new RangeError("No value supplied for attribute "+n);o=i.default}r[n]=o}return r}function Z(e){var t=Object.create(null);if(e)for(var r in e)t[r]=new te(e[r]);return t}H.next.get=function(){return this.tokens[this.pos]},V.prototype.eat=function(e){return this.next==e&&(this.pos++||!0)},V.prototype.err=function(e){throw new SyntaxError(e+" (in content expression '"+this.string+"')")},Object.defineProperties(V.prototype,H);var Q=function(e,t,r){this.name=e,this.schema=t,this.spec=r,this.groups=r.group?r.group.split(" "):[],this.attrs=Z(r.attrs),this.defaultAttrs=Y(this.attrs),this.contentMatch=null,this.markSet=null,this.inlineContent=null,this.isBlock=!(r.inline||"text"==e),this.isText="text"==e},ee={isInline:{configurable:!0},isTextblock:{configurable:!0},isLeaf:{configurable:!0},isAtom:{configurable:!0}};ee.isInline.get=function(){return!this.isBlock},ee.isTextblock.get=function(){return this.isBlock&&this.inlineContent},ee.isLeaf.get=function(){return this.contentMatch==L.empty},ee.isAtom.get=function(){return this.isLeaf||this.spec.atom},Q.prototype.hasRequiredAttrs=function(){for(var e in this.attrs)if(this.attrs[e].isRequired)return!0;return!1},Q.prototype.compatibleContent=function(e){return this==e||this.contentMatch.compatible(e.contentMatch)},Q.prototype.computeAttrs=function(e){return!e&&this.defaultAttrs?this.defaultAttrs:X(this.attrs,e)},Q.prototype.create=function(e,t,r){if(this.isText)throw new Error("NodeType.create can't construct text nodes");return new B(this,this.computeAttrs(e),s.from(t),u.setFrom(r))},Q.prototype.createChecked=function(e,t,r){if(t=s.from(t),!this.validContent(t))throw new RangeError("Invalid content for node "+this.name);return new B(this,this.computeAttrs(e),t,u.setFrom(r))},Q.prototype.createAndFill=function(e,t,r){if(e=this.computeAttrs(e),(t=s.from(t)).size){var n=this.contentMatch.fillBefore(t);if(!n)return null;t=n.append(t)}var o=this.contentMatch.matchFragment(t).fillBefore(s.empty,!0);return o?new B(this,e,t.append(o),u.setFrom(r)):null},Q.prototype.validContent=function(e){var t=this.contentMatch.matchFragment(e);if(!t||!t.validEnd)return!1;for(var r=0;r<e.childCount;r++)if(!this.allowsMarks(e.child(r).marks))return!1;return!0},Q.prototype.allowsMarkType=function(e){return null==this.markSet||this.markSet.indexOf(e)>-1},Q.prototype.allowsMarks=function(e){if(null==this.markSet)return!0;for(var t=0;t<e.length;t++)if(!this.allowsMarkType(e[t].type))return!1;return!0},Q.prototype.allowedMarks=function(e){if(null==this.markSet)return e;for(var t,r=0;r<e.length;r++)this.allowsMarkType(e[r].type)?t&&t.push(e[r]):t||(t=e.slice(0,r));return t?t.length?t:u.empty:e},Q.compile=function(e,t){var r=Object.create(null);e.forEach((function(e,n){return r[e]=new Q(e,t,n)}));var n=t.spec.topNode||"doc";if(!r[n])throw new RangeError("Schema is missing its top node type ('"+n+"')");if(!r.text)throw new RangeError("Every schema needs a 'text' type");for(var o in r.text.attrs)throw new RangeError("The text node type should not have attributes");return r},Object.defineProperties(Q.prototype,ee);var te=function(e){this.hasDefault=Object.prototype.hasOwnProperty.call(e,"default"),this.default=e.default},re={isRequired:{configurable:!0}};re.isRequired.get=function(){return!this.hasDefault},Object.defineProperties(te.prototype,re);var ne=function(e,t,r,n){this.name=e,this.schema=r,this.spec=n,this.attrs=Z(n.attrs),this.rank=t,this.excluded=null;var o=Y(this.attrs);this.instance=o&&new u(this,o)};ne.prototype.create=function(e){return!e&&this.instance?this.instance:new u(this,X(this.attrs,e))},ne.compile=function(e,t){var r=Object.create(null),n=0;return e.forEach((function(e,o){return r[e]=new ne(e,n++,t,o)})),r},ne.prototype.removeFromSet=function(e){for(var t=0;t<e.length;t++)e[t].type==this&&(e=e.slice(0,t).concat(e.slice(t+1)),t--);return e},ne.prototype.isInSet=function(e){for(var t=0;t<e.length;t++)if(e[t].type==this)return e[t]},ne.prototype.excludes=function(e){return this.excluded.indexOf(e)>-1};var oe=function(e){for(var t in this.spec={},e)this.spec[t]=e[t];this.spec.nodes=o.from(e.nodes),this.spec.marks=o.from(e.marks),this.nodes=Q.compile(this.spec.nodes,this),this.marks=ne.compile(this.spec.marks,this);var r=Object.create(null);for(var n in this.nodes){if(n in this.marks)throw new RangeError(n+" can not be both a node and a mark");var i=this.nodes[n],a=i.spec.content||"",s=i.spec.marks;i.contentMatch=r[a]||(r[a]=L.parse(a,this.nodes)),i.inlineContent=i.contentMatch.inlineContent,i.markSet="_"==s?null:s?ie(this,s.split(" ")):""!=s&&i.inlineContent?null:[]}for(var l in this.marks){var c=this.marks[l],h=c.spec.excludes;c.excluded=null==h?[c]:""==h?[]:ie(this,h.split(" "))}this.nodeFromJSON=this.nodeFromJSON.bind(this),this.markFromJSON=this.markFromJSON.bind(this),this.topNodeType=this.nodes[this.spec.topNode||"doc"],this.cached=Object.create(null),this.cached.wrappings=Object.create(null)};function ie(e,t){for(var r=[],n=0;n<t.length;n++){var o=t[n],i=e.marks[o],a=i;if(i)r.push(i);else for(var s in e.marks){var l=e.marks[s];("_"==o||l.spec.group&&l.spec.group.split(" ").indexOf(o)>-1)&&r.push(a=l)}if(!a)throw new SyntaxError("Unknown mark type: '"+t[n]+"'")}return r}oe.prototype.node=function(e,t,r,n){if("string"==typeof e)e=this.nodeType(e);else{if(!(e instanceof Q))throw new RangeError("Invalid node type: "+e);if(e.schema!=this)throw new RangeError("Node type from different schema used ("+e.name+")")}return e.createChecked(t,r,n)},oe.prototype.text=function(e,t){var r=this.nodes.text;return new _(r,r.defaultAttrs,e,u.setFrom(t))},oe.prototype.mark=function(e,t){return"string"==typeof e&&(e=this.marks[e]),e.create(t)},oe.prototype.nodeFromJSON=function(e){return B.fromJSON(this,e)},oe.prototype.markFromJSON=function(e){return u.fromJSON(this,e)},oe.prototype.nodeType=function(e){var t=this.nodes[e];if(!t)throw new RangeError("Unknown node type: "+e);return t};var ae=function(e,t){var r=this;this.schema=e,this.rules=t,this.tags=[],this.styles=[],t.forEach((function(e){e.tag?r.tags.push(e):e.style&&r.styles.push(e)})),this.normalizeLists=!this.tags.some((function(t){if(!/^(ul|ol)\b/.test(t.tag)||!t.node)return!1;var r=e.nodes[t.node];return r.contentMatch.matchType(r)}))};ae.prototype.parse=function(e,t){void 0===t&&(t={});var r=new ue(this,t,!1);return r.addAll(e,null,t.from,t.to),r.finish()},ae.prototype.parseSlice=function(e,t){void 0===t&&(t={});var r=new ue(this,t,!0);return r.addAll(e,null,t.from,t.to),f.maxOpen(r.finish())},ae.prototype.matchTag=function(e,t,r){for(var n=r?this.tags.indexOf(r)+1:0;n<this.tags.length;n++){var o=this.tags[n];if(fe(e,o.tag)&&(void 0===o.namespace||e.namespaceURI==o.namespace)&&(!o.context||t.matchesContext(o.context))){if(o.getAttrs){var i=o.getAttrs(e);if(!1===i)continue;o.attrs=i}return o}}},ae.prototype.matchStyle=function(e,t,r,n){for(var o=n?this.styles.indexOf(n)+1:0;o<this.styles.length;o++){var i=this.styles[o];if(!(0!=i.style.indexOf(e)||i.context&&!r.matchesContext(i.context)||i.style.length>e.length&&(61!=i.style.charCodeAt(e.length)||i.style.slice(e.length+1)!=t))){if(i.getAttrs){var a=i.getAttrs(t);if(!1===a)continue;i.attrs=a}return i}}},ae.schemaRules=function(e){var t=[];function r(e){for(var r=null==e.priority?50:e.priority,n=0;n<t.length;n++){var o=t[n];if((null==o.priority?50:o.priority)<r)break}t.splice(n,0,e)}var n,o=function(t){var n=e.marks[t].spec.parseDOM;n&&n.forEach((function(e){r(e=me(e)),e.mark=t}))};for(var i in e.marks)o(i);for(var a in e.nodes)n=void 0,(n=e.nodes[a].spec.parseDOM)&&n.forEach((function(e){r(e=me(e)),e.node=a}));return t},ae.fromSchema=function(e){return e.cached.domParser||(e.cached.domParser=new ae(e,ae.schemaRules(e)))};var se={address:!0,article:!0,aside:!0,blockquote:!0,canvas:!0,dd:!0,div:!0,dl:!0,fieldset:!0,figcaption:!0,figure:!0,footer:!0,form:!0,h1:!0,h2:!0,h3:!0,h4:!0,h5:!0,h6:!0,header:!0,hgroup:!0,hr:!0,li:!0,noscript:!0,ol:!0,output:!0,p:!0,pre:!0,section:!0,table:!0,tfoot:!0,ul:!0},le={head:!0,noscript:!0,object:!0,script:!0,style:!0,title:!0},ce={ol:!0,ul:!0};function he(e){return(e?1:0)|("full"===e?2:0)}var pe=function(e,t,r,n,o,i,a){this.type=e,this.attrs=t,this.solid=o,this.match=i||(4&a?null:e.contentMatch),this.options=a,this.content=[],this.marks=r,this.activeMarks=u.none,this.pendingMarks=n,this.stashMarks=[]};pe.prototype.findWrapping=function(e){if(!this.match){if(!this.type)return[];var t=this.type.contentMatch.fillBefore(s.from(e));if(!t){var r,n=this.type.contentMatch;return(r=n.findWrapping(e.type))?(this.match=n,r):null}this.match=this.type.contentMatch.matchFragment(t)}return this.match.findWrapping(e.type)},pe.prototype.finish=function(e){if(!(1&this.options)){var t,r=this.content[this.content.length-1];r&&r.isText&&(t=/[ \t\r\n\u000c]+$/.exec(r.text))&&(r.text.length==t[0].length?this.content.pop():this.content[this.content.length-1]=r.withText(r.text.slice(0,r.text.length-t[0].length)))}var n=s.from(this.content);return!e&&this.match&&(n=n.append(this.match.fillBefore(s.empty,!0))),this.type?this.type.create(this.attrs,n,this.marks):n},pe.prototype.popFromStashMark=function(e){for(var t=this.stashMarks.length-1;t>=0;t--)if(e.eq(this.stashMarks[t]))return this.stashMarks.splice(t,1)[0]},pe.prototype.applyPending=function(e){for(var t=0,r=this.pendingMarks;t<r.length;t++){var n=r[t];(this.type?this.type.allowsMarkType(n.type):ge(n.type,e))&&!n.isInSet(this.activeMarks)&&(this.activeMarks=n.addToSet(this.activeMarks),this.pendingMarks=n.removeFromSet(this.pendingMarks))}},pe.prototype.inlineContext=function(e){return this.type?this.type.inlineContent:this.content.length?this.content[0].isInline:e.parentNode&&!se.hasOwnProperty(e.parentNode.nodeName.toLowerCase())};var ue=function(e,t,r){this.parser=e,this.options=t,this.isOpen=r;var n,o=t.topNode,i=he(t.preserveWhitespace)|(r?4:0);n=o?new pe(o.type,o.attrs,u.none,u.none,!0,t.topMatch||o.type.contentMatch,i):new pe(r?null:e.schema.topNodeType,null,u.none,u.none,!0,null,i),this.nodes=[n],this.open=0,this.find=t.findPositions,this.needsBlock=!1},de={top:{configurable:!0},currentPos:{configurable:!0}};function fe(e,t){return(e.matches||e.msMatchesSelector||e.webkitMatchesSelector||e.mozMatchesSelector).call(e,t)}function me(e){var t={};for(var r in e)t[r]=e[r];return t}function ge(e,t){var r=t.schema.nodes,n=function(n){var o=r[n];if(o.allowsMarkType(e)){var i=[],a=function(e){i.push(e);for(var r=0;r<e.edgeCount;r++){var n=e.edge(r),o=n.type,s=n.next;if(o==t)return!0;if(i.indexOf(s)<0&&a(s))return!0}};return a(o.contentMatch)?{v:!0}:void 0}};for(var o in r){var i=n(o);if(i)return i.v}}de.top.get=function(){return this.nodes[this.open]},ue.prototype.addDOM=function(e){if(3==e.nodeType)this.addTextNode(e);else if(1==e.nodeType){var t=e.getAttribute("style"),r=t?this.readStyles(function(e){for(var t,r=/\s*([\w-]+)\s*:\s*([^;]+)/g,n=[];t=r.exec(e);)n.push(t[1],t[2].trim());return n}(t)):null,n=this.top;if(null!=r)for(var o=0;o<r.length;o++)this.addPendingMark(r[o]);if(this.addElement(e),null!=r)for(var i=0;i<r.length;i++)this.removePendingMark(r[i],n)}},ue.prototype.addTextNode=function(e){var t=e.nodeValue,r=this.top;if(2&r.options||r.inlineContext(e)||/[^ \t\r\n\u000c]/.test(t)){if(1&r.options)t=2&r.options?t.replace(/\r\n?/g,"\n"):t.replace(/\r?\n|\r/g," ");else if(t=t.replace(/[ \t\r\n\u000c]+/g," "),/^[ \t\r\n\u000c]/.test(t)&&this.open==this.nodes.length-1){var n=r.content[r.content.length-1],o=e.previousSibling;(!n||o&&"BR"==o.nodeName||n.isText&&/[ \t\r\n\u000c]$/.test(n.text))&&(t=t.slice(1))}t&&this.insertNode(this.parser.schema.text(t)),this.findInText(e)}else this.findInside(e)},ue.prototype.addElement=function(e,t){var r,n=e.nodeName.toLowerCase();ce.hasOwnProperty(n)&&this.parser.normalizeLists&&function(e){for(var t=e.firstChild,r=null;t;t=t.nextSibling){var n=1==t.nodeType?t.nodeName.toLowerCase():null;n&&ce.hasOwnProperty(n)&&r?(r.appendChild(t),t=r):"li"==n?r=t:n&&(r=null)}}(e);var o=this.options.ruleFromNode&&this.options.ruleFromNode(e)||(r=this.parser.matchTag(e,this,t));if(o?o.ignore:le.hasOwnProperty(n))this.findInside(e),this.ignoreFallback(e);else if(!o||o.skip||o.closeParent){o&&o.closeParent?this.open=Math.max(0,this.open-1):o&&o.skip.nodeType&&(e=o.skip);var i,a=this.top,s=this.needsBlock;if(se.hasOwnProperty(n))i=!0,a.type||(this.needsBlock=!0);else if(!e.firstChild)return void this.leafFallback(e);this.addAll(e),i&&this.sync(a),this.needsBlock=s}else this.addElementByRule(e,o,!1===o.consuming?r:null)},ue.prototype.leafFallback=function(e){"BR"==e.nodeName&&this.top.type&&this.top.type.inlineContent&&this.addTextNode(e.ownerDocument.createTextNode("\n"))},ue.prototype.ignoreFallback=function(e){"BR"!=e.nodeName||this.top.type&&this.top.type.inlineContent||this.findPlace(this.parser.schema.text("-"))},ue.prototype.readStyles=function(e){var t=u.none;e:for(var r=0;r<e.length;r+=2)for(var n=null;;){var o=this.parser.matchStyle(e[r],e[r+1],this,n);if(!o)continue e;if(o.ignore)return null;if(t=this.parser.schema.marks[o.mark].create(o.attrs).addToSet(t),!1!==o.consuming)break;n=o}return t},ue.prototype.addElementByRule=function(e,t,r){var n,o,i,a=this;t.node?(o=this.parser.schema.nodes[t.node]).isLeaf?this.insertNode(o.create(t.attrs))||this.leafFallback(e):n=this.enter(o,t.attrs,t.preserveWhitespace):(i=this.parser.schema.marks[t.mark].create(t.attrs),this.addPendingMark(i));var s=this.top;if(o&&o.isLeaf)this.findInside(e);else if(r)this.addElement(e,r);else if(t.getContent)this.findInside(e),t.getContent(e,this.parser.schema).forEach((function(e){return a.insertNode(e)}));else{var l=t.contentElement;"string"==typeof l?l=e.querySelector(l):"function"==typeof l&&(l=l(e)),l||(l=e),this.findAround(e,l,!0),this.addAll(l,n)}n&&(this.sync(s),this.open--),i&&this.removePendingMark(i,s)},ue.prototype.addAll=function(e,t,r,n){for(var o=r||0,i=r?e.childNodes[r]:e.firstChild,a=null==n?null:e.childNodes[n];i!=a;i=i.nextSibling,++o)this.findAtPoint(e,o),this.addDOM(i),t&&se.hasOwnProperty(i.nodeName.toLowerCase())&&this.sync(t);this.findAtPoint(e,o)},ue.prototype.findPlace=function(e){for(var t,r,n=this.open;n>=0;n--){var o=this.nodes[n],i=o.findWrapping(e);if(i&&(!t||t.length>i.length)&&(t=i,r=o,!i.length))break;if(o.solid)break}if(!t)return!1;this.sync(r);for(var a=0;a<t.length;a++)this.enterInner(t[a],null,!1);return!0},ue.prototype.insertNode=function(e){if(e.isInline&&this.needsBlock&&!this.top.type){var t=this.textblockFromContext();t&&this.enterInner(t)}if(this.findPlace(e)){this.closeExtra();var r=this.top;r.applyPending(e.type),r.match&&(r.match=r.match.matchType(e.type));for(var n=r.activeMarks,o=0;o<e.marks.length;o++)r.type&&!r.type.allowsMarkType(e.marks[o].type)||(n=e.marks[o].addToSet(n));return r.content.push(e.mark(n)),!0}return!1},ue.prototype.enter=function(e,t,r){var n=this.findPlace(e.create(t));return n&&this.enterInner(e,t,!0,r),n},ue.prototype.enterInner=function(e,t,r,n){this.closeExtra();var o=this.top;o.applyPending(e),o.match=o.match&&o.match.matchType(e,t);var i=null==n?-5&o.options:he(n);4&o.options&&0==o.content.length&&(i|=4),this.nodes.push(new pe(e,t,o.activeMarks,o.pendingMarks,r,null,i)),this.open++},ue.prototype.closeExtra=function(e){var t=this.nodes.length-1;if(t>this.open){for(;t>this.open;t--)this.nodes[t-1].content.push(this.nodes[t].finish(e));this.nodes.length=this.open+1}},ue.prototype.finish=function(){return this.open=0,this.closeExtra(this.isOpen),this.nodes[0].finish(this.isOpen||this.options.topOpen)},ue.prototype.sync=function(e){for(var t=this.open;t>=0;t--)if(this.nodes[t]==e)return void(this.open=t)},de.currentPos.get=function(){this.closeExtra();for(var e=0,t=this.open;t>=0;t--){for(var r=this.nodes[t].content,n=r.length-1;n>=0;n--)e+=r[n].nodeSize;t&&e++}return e},ue.prototype.findAtPoint=function(e,t){if(this.find)for(var r=0;r<this.find.length;r++)this.find[r].node==e&&this.find[r].offset==t&&(this.find[r].pos=this.currentPos)},ue.prototype.findInside=function(e){if(this.find)for(var t=0;t<this.find.length;t++)null==this.find[t].pos&&1==e.nodeType&&e.contains(this.find[t].node)&&(this.find[t].pos=this.currentPos)},ue.prototype.findAround=function(e,t,r){if(e!=t&&this.find)for(var n=0;n<this.find.length;n++)null==this.find[n].pos&&1==e.nodeType&&e.contains(this.find[n].node)&&t.compareDocumentPosition(this.find[n].node)&(r?2:4)&&(this.find[n].pos=this.currentPos)},ue.prototype.findInText=function(e){if(this.find)for(var t=0;t<this.find.length;t++)this.find[t].node==e&&(this.find[t].pos=this.currentPos-(e.nodeValue.length-this.find[t].offset))},ue.prototype.matchesContext=function(e){var t=this;if(e.indexOf("|")>-1)return e.split(/\s*\|\s*/).some(this.matchesContext,this);var r=e.split("/"),n=this.options.context,o=!(this.isOpen||n&&n.parent.type!=this.nodes[0].type),i=-(n?n.depth+1:0)+(o?0:1),a=function(e,s){for(;e>=0;e--){var l=r[e];if(""==l){if(e==r.length-1||0==e)continue;for(;s>=i;s--)if(a(e-1,s))return!0;return!1}var c=s>0||0==s&&o?t.nodes[s].type:n&&s>=i?n.node(s-i).type:null;if(!c||c.name!=l&&-1==c.groups.indexOf(l))return!1;s--}return!0};return a(r.length-1,this.open)},ue.prototype.textblockFromContext=function(){var e=this.options.context;if(e)for(var t=e.depth;t>=0;t--){var r=e.node(t).contentMatchAt(e.indexAfter(t)).defaultType;if(r&&r.isTextblock&&r.defaultAttrs)return r}for(var n in this.parser.schema.nodes){var o=this.parser.schema.nodes[n];if(o.isTextblock&&o.defaultAttrs)return o}},ue.prototype.addPendingMark=function(e){var t=function(e,t){for(var r=0;r<t.length;r++)if(e.eq(t[r]))return t[r]}(e,this.top.pendingMarks);t&&this.top.stashMarks.push(t),this.top.pendingMarks=e.addToSet(this.top.pendingMarks)},ue.prototype.removePendingMark=function(e,t){for(var r=this.open;r>=0;r--){var n=this.nodes[r];if(n.pendingMarks.lastIndexOf(e)>-1)n.pendingMarks=e.removeFromSet(n.pendingMarks);else{n.activeMarks=e.removeFromSet(n.activeMarks);var o=n.popFromStashMark(e);o&&n.type&&n.type.allowsMarkType(o.type)&&(n.activeMarks=o.addToSet(n.activeMarks))}if(n==t)break}},Object.defineProperties(ue.prototype,de);var ve=function(e,t){this.nodes=e||{},this.marks=t||{}};function ye(e){var t={};for(var r in e){var n=e[r].spec.toDOM;n&&(t[r]=n)}return t}function be(e){return e.document||window.document}ve.prototype.serializeFragment=function(e,t,r){var n=this;void 0===t&&(t={}),r||(r=be(t).createDocumentFragment());var o=r,i=null;return e.forEach((function(e){if(i||e.marks.length){i||(i=[]);for(var r=0,a=0;r<i.length&&a<e.marks.length;){var s=e.marks[a];if(n.marks[s.type.name]){if(!s.eq(i[r])||!1===s.type.spec.spanning)break;r+=2,a++}else a++}for(;r<i.length;)o=i.pop(),i.pop();for(;a<e.marks.length;){var l=e.marks[a++],c=n.serializeMark(l,e.isInline,t);c&&(i.push(l,o),o.appendChild(c.dom),o=c.contentDOM||c.dom)}}o.appendChild(n.serializeNodeInner(e,t))})),r},ve.prototype.serializeNodeInner=function(e,t){void 0===t&&(t={});var r=ve.renderSpec(be(t),this.nodes[e.type.name](e)),n=r.dom,o=r.contentDOM;if(o){if(e.isLeaf)throw new RangeError("Content hole not allowed in a leaf node spec");t.onContent?t.onContent(e,o,t):this.serializeFragment(e.content,t,o)}return n},ve.prototype.serializeNode=function(e,t){void 0===t&&(t={});for(var r=this.serializeNodeInner(e,t),n=e.marks.length-1;n>=0;n--){var o=this.serializeMark(e.marks[n],e.isInline,t);o&&((o.contentDOM||o.dom).appendChild(r),r=o.dom)}return r},ve.prototype.serializeMark=function(e,t,r){void 0===r&&(r={});var n=this.marks[e.type.name];return n&&ve.renderSpec(be(r),n(e,t))},ve.renderSpec=function(e,t,r){if(void 0===r&&(r=null),"string"==typeof t)return{dom:e.createTextNode(t)};if(null!=t.nodeType)return{dom:t};if(t.dom&&null!=t.dom.nodeType)return t;var n=t[0],o=n.indexOf(" ");o>0&&(r=n.slice(0,o),n=n.slice(o+1));var i=null,a=r?e.createElementNS(r,n):e.createElement(n),s=t[1],l=1;if(s&&"object"==typeof s&&null==s.nodeType&&!Array.isArray(s))for(var c in l=2,s)if(null!=s[c]){var h=c.indexOf(" ");h>0?a.setAttributeNS(c.slice(0,h),c.slice(h+1),s[c]):a.setAttribute(c,s[c])}for(var p=l;p<t.length;p++){var u=t[p];if(0===u){if(p<t.length-1||p>l)throw new RangeError("Content hole must be the only child of its parent node");return{dom:a,contentDOM:a}}var d=ve.renderSpec(e,u,r),f=d.dom,m=d.contentDOM;if(a.appendChild(f),m){if(i)throw new RangeError("Multiple content holes");i=m}}return{dom:a,contentDOM:i}},ve.fromSchema=function(e){return e.cached.domSerializer||(e.cached.domSerializer=new ve(this.nodesFromSchema(e),this.marksFromSchema(e)))},ve.nodesFromSchema=function(e){var t=ye(e.nodes);return t.text||(t.text=function(e){return e.text}),t},ve.marksFromSchema=function(e){return ye(e.marks)}},922:(e,t,r)=>{"use strict";r.r(t),r.d(t,{AllSelection:()=>d,EditorState:()=>S,NodeSelection:()=>p,Plugin:()=>A,PluginKey:()=>N,Selection:()=>a,SelectionRange:()=>l,TextSelection:()=>c,Transaction:()=>v});var n=r(638),o=r(81),i=Object.create(null),a=function(e,t,r){this.ranges=r||[new l(e.min(t),e.max(t))],this.$anchor=e,this.$head=t},s={anchor:{configurable:!0},head:{configurable:!0},from:{configurable:!0},to:{configurable:!0},$from:{configurable:!0},$to:{configurable:!0},empty:{configurable:!0}};s.anchor.get=function(){return this.$anchor.pos},s.head.get=function(){return this.$head.pos},s.from.get=function(){return this.$from.pos},s.to.get=function(){return this.$to.pos},s.$from.get=function(){return this.ranges[0].$from},s.$to.get=function(){return this.ranges[0].$to},s.empty.get=function(){for(var e=this.ranges,t=0;t<e.length;t++)if(e[t].$from.pos!=e[t].$to.pos)return!1;return!0},a.prototype.content=function(){return this.$from.node(0).slice(this.from,this.to,!0)},a.prototype.replace=function(e,t){void 0===t&&(t=n.Slice.empty);for(var r=t.content.lastChild,o=null,i=0;i<t.openEnd;i++)o=r,r=r.lastChild;for(var a=e.steps.length,s=this.ranges,l=0;l<s.length;l++){var c=s[l],h=c.$from,p=c.$to,u=e.mapping.slice(a);e.replaceRange(u.map(h.pos),u.map(p.pos),l?n.Slice.empty:t),0==l&&g(e,a,(r?r.isInline:o&&o.isTextblock)?-1:1)}},a.prototype.replaceWith=function(e,t){for(var r=e.steps.length,n=this.ranges,o=0;o<n.length;o++){var i=n[o],a=i.$from,s=i.$to,l=e.mapping.slice(r),c=l.map(a.pos),h=l.map(s.pos);o?e.deleteRange(c,h):(e.replaceRangeWith(c,h,t),g(e,r,t.isInline?-1:1))}},a.findFrom=function(e,t,r){var n=e.parent.inlineContent?new c(e):m(e.node(0),e.parent,e.pos,e.index(),t,r);if(n)return n;for(var o=e.depth-1;o>=0;o--){var i=t<0?m(e.node(0),e.node(o),e.before(o+1),e.index(o),t,r):m(e.node(0),e.node(o),e.after(o+1),e.index(o)+1,t,r);if(i)return i}},a.near=function(e,t){return void 0===t&&(t=1),this.findFrom(e,t)||this.findFrom(e,-t)||new d(e.node(0))},a.atStart=function(e){return m(e,e,0,0,1)||new d(e)},a.atEnd=function(e){return m(e,e,e.content.size,e.childCount,-1)||new d(e)},a.fromJSON=function(e,t){if(!t||!t.type)throw new RangeError("Invalid input for Selection.fromJSON");var r=i[t.type];if(!r)throw new RangeError("No selection type "+t.type+" defined");return r.fromJSON(e,t)},a.jsonID=function(e,t){if(e in i)throw new RangeError("Duplicate use of selection JSON ID "+e);return i[e]=t,t.prototype.jsonID=e,t},a.prototype.getBookmark=function(){return c.between(this.$anchor,this.$head).getBookmark()},Object.defineProperties(a.prototype,s),a.prototype.visible=!0;var l=function(e,t){this.$from=e,this.$to=t},c=function(e){function t(t,r){void 0===r&&(r=t),e.call(this,t,r)}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var r={$cursor:{configurable:!0}};return r.$cursor.get=function(){return this.$anchor.pos==this.$head.pos?this.$head:null},t.prototype.map=function(r,n){var o=r.resolve(n.map(this.head));if(!o.parent.inlineContent)return e.near(o);var i=r.resolve(n.map(this.anchor));return new t(i.parent.inlineContent?i:o,o)},t.prototype.replace=function(t,r){if(void 0===r&&(r=n.Slice.empty),e.prototype.replace.call(this,t,r),r==n.Slice.empty){var o=this.$from.marksAcross(this.$to);o&&t.ensureMarks(o)}},t.prototype.eq=function(e){return e instanceof t&&e.anchor==this.anchor&&e.head==this.head},t.prototype.getBookmark=function(){return new h(this.anchor,this.head)},t.prototype.toJSON=function(){return{type:"text",anchor:this.anchor,head:this.head}},t.fromJSON=function(e,r){if("number"!=typeof r.anchor||"number"!=typeof r.head)throw new RangeError("Invalid input for TextSelection.fromJSON");return new t(e.resolve(r.anchor),e.resolve(r.head))},t.create=function(e,t,r){void 0===r&&(r=t);var n=e.resolve(t);return new this(n,r==t?n:e.resolve(r))},t.between=function(r,n,o){var i=r.pos-n.pos;if(o&&!i||(o=i>=0?1:-1),!n.parent.inlineContent){var a=e.findFrom(n,o,!0)||e.findFrom(n,-o,!0);if(!a)return e.near(n,o);n=a.$head}return r.parent.inlineContent||(0==i||(r=(e.findFrom(r,-o,!0)||e.findFrom(r,o,!0)).$anchor).pos<n.pos!=i<0)&&(r=n),new t(r,n)},Object.defineProperties(t.prototype,r),t}(a);a.jsonID("text",c);var h=function(e,t){this.anchor=e,this.head=t};h.prototype.map=function(e){return new h(e.map(this.anchor),e.map(this.head))},h.prototype.resolve=function(e){return c.between(e.resolve(this.anchor),e.resolve(this.head))};var p=function(e){function t(t){var r=t.nodeAfter,n=t.node(0).resolve(t.pos+r.nodeSize);e.call(this,t,n),this.node=r}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.map=function(r,n){var o=n.mapResult(this.anchor),i=o.deleted,a=o.pos,s=r.resolve(a);return i?e.near(s):new t(s)},t.prototype.content=function(){return new n.Slice(n.Fragment.from(this.node),0,0)},t.prototype.eq=function(e){return e instanceof t&&e.anchor==this.anchor},t.prototype.toJSON=function(){return{type:"node",anchor:this.anchor}},t.prototype.getBookmark=function(){return new u(this.anchor)},t.fromJSON=function(e,r){if("number"!=typeof r.anchor)throw new RangeError("Invalid input for NodeSelection.fromJSON");return new t(e.resolve(r.anchor))},t.create=function(e,t){return new this(e.resolve(t))},t.isSelectable=function(e){return!e.isText&&!1!==e.type.spec.selectable},t}(a);p.prototype.visible=!1,a.jsonID("node",p);var u=function(e){this.anchor=e};u.prototype.map=function(e){var t=e.mapResult(this.anchor),r=t.deleted,n=t.pos;return r?new h(n,n):new u(n)},u.prototype.resolve=function(e){var t=e.resolve(this.anchor),r=t.nodeAfter;return r&&p.isSelectable(r)?new p(t):a.near(t)};var d=function(e){function t(t){e.call(this,t.resolve(0),t.resolve(t.content.size))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.replace=function(t,r){if(void 0===r&&(r=n.Slice.empty),r==n.Slice.empty){t.delete(0,t.doc.content.size);var o=e.atStart(t.doc);o.eq(t.selection)||t.setSelection(o)}else e.prototype.replace.call(this,t,r)},t.prototype.toJSON=function(){return{type:"all"}},t.fromJSON=function(e){return new t(e)},t.prototype.map=function(e){return new t(e)},t.prototype.eq=function(e){return e instanceof t},t.prototype.getBookmark=function(){return f},t}(a);a.jsonID("all",d);var f={map:function(){return this},resolve:function(e){return new d(e)}};function m(e,t,r,n,o,i){if(t.inlineContent)return c.create(e,r);for(var a=n-(o>0?0:1);o>0?a<t.childCount:a>=0;a+=o){var s=t.child(a);if(s.isAtom){if(!i&&p.isSelectable(s))return p.create(e,r-(o<0?s.nodeSize:0))}else{var l=m(e,s,r+o,o<0?s.childCount:0,o,i);if(l)return l}r+=s.nodeSize*o}}function g(e,t,r){var n=e.steps.length-1;if(!(n<t)){var i,s=e.steps[n];(s instanceof o.ReplaceStep||s instanceof o.ReplaceAroundStep)&&(e.mapping.maps[n].forEach((function(e,t,r,n){null==i&&(i=n)})),e.setSelection(a.near(e.doc.resolve(i),r)))}}var v=function(e){function t(t){e.call(this,t.doc),this.time=Date.now(),this.curSelection=t.selection,this.curSelectionFor=0,this.storedMarks=t.storedMarks,this.updated=0,this.meta=Object.create(null)}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var r={selection:{configurable:!0},selectionSet:{configurable:!0},storedMarksSet:{configurable:!0},isGeneric:{configurable:!0},scrolledIntoView:{configurable:!0}};return r.selection.get=function(){return this.curSelectionFor<this.steps.length&&(this.curSelection=this.curSelection.map(this.doc,this.mapping.slice(this.curSelectionFor)),this.curSelectionFor=this.steps.length),this.curSelection},t.prototype.setSelection=function(e){if(e.$from.doc!=this.doc)throw new RangeError("Selection passed to setSelection must point at the current document");return this.curSelection=e,this.curSelectionFor=this.steps.length,this.updated=-3&(1|this.updated),this.storedMarks=null,this},r.selectionSet.get=function(){return(1&this.updated)>0},t.prototype.setStoredMarks=function(e){return this.storedMarks=e,this.updated|=2,this},t.prototype.ensureMarks=function(e){return n.Mark.sameSet(this.storedMarks||this.selection.$from.marks(),e)||this.setStoredMarks(e),this},t.prototype.addStoredMark=function(e){return this.ensureMarks(e.addToSet(this.storedMarks||this.selection.$head.marks()))},t.prototype.removeStoredMark=function(e){return this.ensureMarks(e.removeFromSet(this.storedMarks||this.selection.$head.marks()))},r.storedMarksSet.get=function(){return(2&this.updated)>0},t.prototype.addStep=function(t,r){e.prototype.addStep.call(this,t,r),this.updated=-3&this.updated,this.storedMarks=null},t.prototype.setTime=function(e){return this.time=e,this},t.prototype.replaceSelection=function(e){return this.selection.replace(this,e),this},t.prototype.replaceSelectionWith=function(e,t){var r=this.selection;return!1!==t&&(e=e.mark(this.storedMarks||(r.empty?r.$from.marks():r.$from.marksAcross(r.$to)||n.Mark.none))),r.replaceWith(this,e),this},t.prototype.deleteSelection=function(){return this.selection.replace(this),this},t.prototype.insertText=function(e,t,r){void 0===r&&(r=t);var n=this.doc.type.schema;if(null==t)return e?this.replaceSelectionWith(n.text(e),!0):this.deleteSelection();if(!e)return this.deleteRange(t,r);var o=this.storedMarks;if(!o){var i=this.doc.resolve(t);o=r==t?i.marks():i.marksAcross(this.doc.resolve(r))}return this.replaceRangeWith(t,r,n.text(e,o)),this.selection.empty||this.setSelection(a.near(this.selection.$to)),this},t.prototype.setMeta=function(e,t){return this.meta["string"==typeof e?e:e.key]=t,this},t.prototype.getMeta=function(e){return this.meta["string"==typeof e?e:e.key]},r.isGeneric.get=function(){for(var e in this.meta)return!1;return!0},t.prototype.scrollIntoView=function(){return this.updated|=4,this},r.scrolledIntoView.get=function(){return(4&this.updated)>0},Object.defineProperties(t.prototype,r),t}(o.Transform);function y(e,t){return t&&e?e.bind(t):e}var b=function(e,t,r){this.name=e,this.init=y(t.init,r),this.apply=y(t.apply,r)},w=[new b("doc",{init:function(e){return e.doc||e.schema.topNodeType.createAndFill()},apply:function(e){return e.doc}}),new b("selection",{init:function(e,t){return e.selection||a.atStart(t.doc)},apply:function(e){return e.selection}}),new b("storedMarks",{init:function(e){return e.storedMarks||null},apply:function(e,t,r,n){return n.selection.$cursor?e.storedMarks:null}}),new b("scrollToSelection",{init:function(){return 0},apply:function(e,t){return e.scrolledIntoView?t+1:t}})],x=function(e,t){var r=this;this.schema=e,this.fields=w.concat(),this.plugins=[],this.pluginsByKey=Object.create(null),t&&t.forEach((function(e){if(r.pluginsByKey[e.key])throw new RangeError("Adding different instances of a keyed plugin ("+e.key+")");r.plugins.push(e),r.pluginsByKey[e.key]=e,e.spec.state&&r.fields.push(new b(e.key,e.spec.state,e))}))},S=function(e){this.config=e},k={schema:{configurable:!0},plugins:{configurable:!0},tr:{configurable:!0}};k.schema.get=function(){return this.config.schema},k.plugins.get=function(){return this.config.plugins},S.prototype.apply=function(e){return this.applyTransaction(e).state},S.prototype.filterTransaction=function(e,t){void 0===t&&(t=-1);for(var r=0;r<this.config.plugins.length;r++)if(r!=t){var n=this.config.plugins[r];if(n.spec.filterTransaction&&!n.spec.filterTransaction.call(n,e,this))return!1}return!0},S.prototype.applyTransaction=function(e){if(!this.filterTransaction(e))return{state:this,transactions:[]};for(var t=[e],r=this.applyInner(e),n=null;;){for(var o=!1,i=0;i<this.config.plugins.length;i++){var a=this.config.plugins[i];if(a.spec.appendTransaction){var s=n?n[i].n:0,l=n?n[i].state:this,c=s<t.length&&a.spec.appendTransaction.call(a,s?t.slice(s):t,l,r);if(c&&r.filterTransaction(c,i)){if(c.setMeta("appendedTransaction",e),!n){n=[];for(var h=0;h<this.config.plugins.length;h++)n.push(h<i?{state:r,n:t.length}:{state:this,n:0})}t.push(c),r=r.applyInner(c),o=!0}n&&(n[i]={state:r,n:t.length})}}if(!o)return{state:r,transactions:t}}},S.prototype.applyInner=function(e){if(!e.before.eq(this.doc))throw new RangeError("Applying a mismatched transaction");for(var t=new S(this.config),r=this.config.fields,n=0;n<r.length;n++){var o=r[n];t[o.name]=o.apply(e,this[o.name],this,t)}for(var i=0;i<M.length;i++)M[i](this,e,t);return t},k.tr.get=function(){return new v(this)},S.create=function(e){for(var t=new x(e.doc?e.doc.type.schema:e.schema,e.plugins),r=new S(t),n=0;n<t.fields.length;n++)r[t.fields[n].name]=t.fields[n].init(e,r);return r},S.prototype.reconfigure=function(e){for(var t=new x(this.schema,e.plugins),r=t.fields,n=new S(t),o=0;o<r.length;o++){var i=r[o].name;n[i]=this.hasOwnProperty(i)?this[i]:r[o].init(e,n)}return n},S.prototype.toJSON=function(e){var t={doc:this.doc.toJSON(),selection:this.selection.toJSON()};if(this.storedMarks&&(t.storedMarks=this.storedMarks.map((function(e){return e.toJSON()}))),e&&"object"==typeof e)for(var r in e){if("doc"==r||"selection"==r)throw new RangeError("The JSON fields `doc` and `selection` are reserved");var n=e[r],o=n.spec.state;o&&o.toJSON&&(t[r]=o.toJSON.call(n,this[n.key]))}return t},S.fromJSON=function(e,t,r){if(!t)throw new RangeError("Invalid input for EditorState.fromJSON");if(!e.schema)throw new RangeError("Required config field 'schema' missing");var o=new x(e.schema,e.plugins),i=new S(o);return o.fields.forEach((function(o){if("doc"==o.name)i.doc=n.Node.fromJSON(e.schema,t.doc);else if("selection"==o.name)i.selection=a.fromJSON(i.doc,t.selection);else if("storedMarks"==o.name)t.storedMarks&&(i.storedMarks=t.storedMarks.map(e.schema.markFromJSON));else{if(r)for(var s in r){var l=r[s],c=l.spec.state;if(l.key==o.name&&c&&c.fromJSON&&Object.prototype.hasOwnProperty.call(t,s))return void(i[o.name]=c.fromJSON.call(l,e,t[s],i))}i[o.name]=o.init(e,i)}})),i},S.addApplyListener=function(e){M.push(e)},S.removeApplyListener=function(e){var t=M.indexOf(e);t>-1&&M.splice(t,1)},Object.defineProperties(S.prototype,k);var M=[];function T(e,t,r){for(var n in e){var o=e[n];o instanceof Function?o=o.bind(t):"handleDOMEvents"==n&&(o=T(o,t,{})),r[n]=o}return r}var A=function(e){this.props={},e.props&&T(e.props,this,this.props),this.spec=e,this.key=e.key?e.key.key:C("plugin")};A.prototype.getState=function(e){return e[this.key]};var O=Object.create(null);function C(e){return e in O?e+"$"+ ++O[e]:(O[e]=0,e+"$")}var N=function(e){void 0===e&&(e="key"),this.key=C(e)};N.prototype.get=function(e){return e.config.pluginsByKey[this.key]},N.prototype.getState=function(e){return e[this.key]}},81:(e,t,r)=>{"use strict";r.r(t),r.d(t,{AddMarkStep:()=>z,MapResult:()=>a,Mapping:()=>l,RemoveMarkStep:()=>E,ReplaceAroundStep:()=>v,ReplaceStep:()=>g,Step:()=>f,StepMap:()=>s,StepResult:()=>m,Transform:()=>h,TransformError:()=>c,canJoin:()=>M,canSplit:()=>k,dropPoint:()=>C,findWrapping:()=>x,insertPoint:()=>O,joinPoint:()=>A,liftTarget:()=>w,replaceStep:()=>D});var n=r(638),o=Math.pow(2,16);function i(e){return 65535&e}var a=function(e,t,r){void 0===t&&(t=!1),void 0===r&&(r=null),this.pos=e,this.deleted=t,this.recover=r},s=function(e,t){void 0===t&&(t=!1),this.ranges=e,this.inverted=t};s.prototype.recover=function(e){var t=0,r=i(e);if(!this.inverted)for(var n=0;n<r;n++)t+=this.ranges[3*n+2]-this.ranges[3*n+1];return this.ranges[3*r]+t+function(e){return(e-(65535&e))/o}(e)},s.prototype.mapResult=function(e,t){return void 0===t&&(t=1),this._map(e,t,!1)},s.prototype.map=function(e,t){return void 0===t&&(t=1),this._map(e,t,!0)},s.prototype._map=function(e,t,r){for(var n=0,i=this.inverted?2:1,s=this.inverted?1:2,l=0;l<this.ranges.length;l+=3){var c=this.ranges[l]-(this.inverted?n:0);if(c>e)break;var h=this.ranges[l+i],p=this.ranges[l+s],u=c+h;if(e<=u){var d=c+n+((h?e==c?-1:e==u?1:t:t)<0?0:p);return r?d:new a(d,t<0?e!=c:e!=u,e==(t<0?c:u)?null:l/3+(e-c)*o)}n+=p-h}return r?e+n:new a(e+n)},s.prototype.touches=function(e,t){for(var r=0,n=i(t),o=this.inverted?2:1,a=this.inverted?1:2,s=0;s<this.ranges.length;s+=3){var l=this.ranges[s]-(this.inverted?r:0);if(l>e)break;var c=this.ranges[s+o];if(e<=l+c&&s==3*n)return!0;r+=this.ranges[s+a]-c}return!1},s.prototype.forEach=function(e){for(var t=this.inverted?2:1,r=this.inverted?1:2,n=0,o=0;n<this.ranges.length;n+=3){var i=this.ranges[n],a=i-(this.inverted?o:0),s=i+(this.inverted?0:o),l=this.ranges[n+t],c=this.ranges[n+r];e(a,a+l,s,s+c),o+=c-l}},s.prototype.invert=function(){return new s(this.ranges,!this.inverted)},s.prototype.toString=function(){return(this.inverted?"-":"")+JSON.stringify(this.ranges)},s.offset=function(e){return 0==e?s.empty:new s(e<0?[0,-e,0]:[0,0,e])},s.empty=new s([]);var l=function(e,t,r,n){this.maps=e||[],this.from=r||0,this.to=null==n?this.maps.length:n,this.mirror=t};function c(e){var t=Error.call(this,e);return t.__proto__=c.prototype,t}l.prototype.slice=function(e,t){return void 0===e&&(e=0),void 0===t&&(t=this.maps.length),new l(this.maps,this.mirror,e,t)},l.prototype.copy=function(){return new l(this.maps.slice(),this.mirror&&this.mirror.slice(),this.from,this.to)},l.prototype.appendMap=function(e,t){this.to=this.maps.push(e),null!=t&&this.setMirror(this.maps.length-1,t)},l.prototype.appendMapping=function(e){for(var t=0,r=this.maps.length;t<e.maps.length;t++){var n=e.getMirror(t);this.appendMap(e.maps[t],null!=n&&n<t?r+n:null)}},l.prototype.getMirror=function(e){if(this.mirror)for(var t=0;t<this.mirror.length;t++)if(this.mirror[t]==e)return this.mirror[t+(t%2?-1:1)]},l.prototype.setMirror=function(e,t){this.mirror||(this.mirror=[]),this.mirror.push(e,t)},l.prototype.appendMappingInverted=function(e){for(var t=e.maps.length-1,r=this.maps.length+e.maps.length;t>=0;t--){var n=e.getMirror(t);this.appendMap(e.maps[t].invert(),null!=n&&n>t?r-n-1:null)}},l.prototype.invert=function(){var e=new l;return e.appendMappingInverted(this),e},l.prototype.map=function(e,t){if(void 0===t&&(t=1),this.mirror)return this._map(e,t,!0);for(var r=this.from;r<this.to;r++)e=this.maps[r].map(e,t);return e},l.prototype.mapResult=function(e,t){return void 0===t&&(t=1),this._map(e,t,!1)},l.prototype._map=function(e,t,r){for(var n=!1,o=this.from;o<this.to;o++){var i=this.maps[o].mapResult(e,t);if(null!=i.recover){var s=this.getMirror(o);if(null!=s&&s>o&&s<this.to){o=s,e=this.maps[s].recover(i.recover);continue}}i.deleted&&(n=!0),e=i.pos}return r?e:new a(e,n)},c.prototype=Object.create(Error.prototype),c.prototype.constructor=c,c.prototype.name="TransformError";var h=function(e){this.doc=e,this.steps=[],this.docs=[],this.mapping=new l},p={before:{configurable:!0},docChanged:{configurable:!0}};function u(){throw new Error("Override me")}p.before.get=function(){return this.docs.length?this.docs[0]:this.doc},h.prototype.step=function(e){var t=this.maybeStep(e);if(t.failed)throw new c(t.failed);return this},h.prototype.maybeStep=function(e){var t=e.apply(this.doc);return t.failed||this.addStep(e,t.doc),t},p.docChanged.get=function(){return this.steps.length>0},h.prototype.addStep=function(e,t){this.docs.push(this.doc),this.steps.push(e),this.mapping.appendMap(e.getMap()),this.doc=t},Object.defineProperties(h.prototype,p);var d=Object.create(null),f=function(){};f.prototype.apply=function(e){return u()},f.prototype.getMap=function(){return s.empty},f.prototype.invert=function(e){return u()},f.prototype.map=function(e){return u()},f.prototype.merge=function(e){return null},f.prototype.toJSON=function(){return u()},f.fromJSON=function(e,t){if(!t||!t.stepType)throw new RangeError("Invalid input for Step.fromJSON");var r=d[t.stepType];if(!r)throw new RangeError("No step type "+t.stepType+" defined");return r.fromJSON(e,t)},f.jsonID=function(e,t){if(e in d)throw new RangeError("Duplicate use of step JSON ID "+e);return d[e]=t,t.prototype.jsonID=e,t};var m=function(e,t){this.doc=e,this.failed=t};m.ok=function(e){return new m(e,null)},m.fail=function(e){return new m(null,e)},m.fromReplace=function(e,t,r,o){try{return m.ok(e.replace(t,r,o))}catch(e){if(e instanceof n.ReplaceError)return m.fail(e.message);throw e}};var g=function(e){function t(t,r,n,o){e.call(this),this.from=t,this.to=r,this.slice=n,this.structure=!!o}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.apply=function(e){return this.structure&&y(e,this.from,this.to)?m.fail("Structure replace would overwrite content"):m.fromReplace(e,this.from,this.to,this.slice)},t.prototype.getMap=function(){return new s([this.from,this.to-this.from,this.slice.size])},t.prototype.invert=function(e){return new t(this.from,this.from+this.slice.size,e.slice(this.from,this.to))},t.prototype.map=function(e){var r=e.mapResult(this.from,1),n=e.mapResult(this.to,-1);return r.deleted&&n.deleted?null:new t(r.pos,Math.max(r.pos,n.pos),this.slice)},t.prototype.merge=function(e){if(!(e instanceof t)||e.structure||this.structure)return null;if(this.from+this.slice.size!=e.from||this.slice.openEnd||e.slice.openStart){if(e.to!=this.from||this.slice.openStart||e.slice.openEnd)return null;var r=this.slice.size+e.slice.size==0?n.Slice.empty:new n.Slice(e.slice.content.append(this.slice.content),e.slice.openStart,this.slice.openEnd);return new t(e.from,this.to,r,this.structure)}var o=this.slice.size+e.slice.size==0?n.Slice.empty:new n.Slice(this.slice.content.append(e.slice.content),this.slice.openStart,e.slice.openEnd);return new t(this.from,this.to+(e.to-e.from),o,this.structure)},t.prototype.toJSON=function(){var e={stepType:"replace",from:this.from,to:this.to};return this.slice.size&&(e.slice=this.slice.toJSON()),this.structure&&(e.structure=!0),e},t.fromJSON=function(e,r){if("number"!=typeof r.from||"number"!=typeof r.to)throw new RangeError("Invalid input for ReplaceStep.fromJSON");return new t(r.from,r.to,n.Slice.fromJSON(e,r.slice),!!r.structure)},t}(f);f.jsonID("replace",g);var v=function(e){function t(t,r,n,o,i,a,s){e.call(this),this.from=t,this.to=r,this.gapFrom=n,this.gapTo=o,this.slice=i,this.insert=a,this.structure=!!s}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.apply=function(e){if(this.structure&&(y(e,this.from,this.gapFrom)||y(e,this.gapTo,this.to)))return m.fail("Structure gap-replace would overwrite content");var t=e.slice(this.gapFrom,this.gapTo);if(t.openStart||t.openEnd)return m.fail("Gap is not a flat range");var r=this.slice.insertAt(this.insert,t.content);return r?m.fromReplace(e,this.from,this.to,r):m.fail("Content does not fit in gap")},t.prototype.getMap=function(){return new s([this.from,this.gapFrom-this.from,this.insert,this.gapTo,this.to-this.gapTo,this.slice.size-this.insert])},t.prototype.invert=function(e){var r=this.gapTo-this.gapFrom;return new t(this.from,this.from+this.slice.size+r,this.from+this.insert,this.from+this.insert+r,e.slice(this.from,this.to).removeBetween(this.gapFrom-this.from,this.gapTo-this.from),this.gapFrom-this.from,this.structure)},t.prototype.map=function(e){var r=e.mapResult(this.from,1),n=e.mapResult(this.to,-1),o=e.map(this.gapFrom,-1),i=e.map(this.gapTo,1);return r.deleted&&n.deleted||o<r.pos||i>n.pos?null:new t(r.pos,n.pos,o,i,this.slice,this.insert,this.structure)},t.prototype.toJSON=function(){var e={stepType:"replaceAround",from:this.from,to:this.to,gapFrom:this.gapFrom,gapTo:this.gapTo,insert:this.insert};return this.slice.size&&(e.slice=this.slice.toJSON()),this.structure&&(e.structure=!0),e},t.fromJSON=function(e,r){if("number"!=typeof r.from||"number"!=typeof r.to||"number"!=typeof r.gapFrom||"number"!=typeof r.gapTo||"number"!=typeof r.insert)throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");return new t(r.from,r.to,r.gapFrom,r.gapTo,n.Slice.fromJSON(e,r.slice),r.insert,!!r.structure)},t}(f);function y(e,t,r){for(var n=e.resolve(t),o=r-t,i=n.depth;o>0&&i>0&&n.indexAfter(i)==n.node(i).childCount;)i--,o--;if(o>0)for(var a=n.node(i).maybeChild(n.indexAfter(i));o>0;){if(!a||a.isLeaf)return!0;a=a.firstChild,o--}return!1}function b(e,t,r){return(0==t||e.canReplace(t,e.childCount))&&(r==e.childCount||e.canReplace(0,r))}function w(e){for(var t=e.parent.content.cutByIndex(e.startIndex,e.endIndex),r=e.depth;;--r){var n=e.$from.node(r),o=e.$from.index(r),i=e.$to.indexAfter(r);if(r<e.depth&&n.canReplace(o,i,t))return r;if(0==r||n.type.spec.isolating||!b(n,o,i))break}}function x(e,t,r,n){void 0===n&&(n=e);var o=function(e,t){var r=e.parent,n=e.startIndex,o=e.endIndex,i=r.contentMatchAt(n).findWrapping(t);if(!i)return null;var a=i.length?i[0]:t;return r.canReplaceWith(n,o,a)?i:null}(e,t),i=o&&function(e,t){var r=e.parent,n=e.startIndex,o=e.endIndex,i=r.child(n),a=t.contentMatch.findWrapping(i.type);if(!a)return null;for(var s=(a.length?a[a.length-1]:t).contentMatch,l=n;s&&l<o;l++)s=s.matchType(r.child(l).type);return s&&s.validEnd?a:null}(n,t);return i?o.map(S).concat({type:t,attrs:r}).concat(i.map(S)):null}function S(e){return{type:e,attrs:null}}function k(e,t,r,n){void 0===r&&(r=1);var o=e.resolve(t),i=o.depth-r,a=n&&n[n.length-1]||o.parent;if(i<0||o.parent.type.spec.isolating||!o.parent.canReplace(o.index(),o.parent.childCount)||!a.type.validContent(o.parent.content.cutByIndex(o.index(),o.parent.childCount)))return!1;for(var s=o.depth-1,l=r-2;s>i;s--,l--){var c=o.node(s),h=o.index(s);if(c.type.spec.isolating)return!1;var p=c.content.cutByIndex(h,c.childCount),u=n&&n[l]||c;if(u!=c&&(p=p.replaceChild(0,u.type.create(u.attrs))),!c.canReplace(h+1,c.childCount)||!u.type.validContent(p))return!1}var d=o.indexAfter(i),f=n&&n[0];return o.node(i).canReplaceWith(d,d,f?f.type:o.node(i+1).type)}function M(e,t){var r=e.resolve(t),n=r.index();return T(r.nodeBefore,r.nodeAfter)&&r.parent.canReplace(n,n+1)}function T(e,t){return e&&t&&!e.isLeaf&&e.canAppend(t)}function A(e,t,r){void 0===r&&(r=-1);for(var n=e.resolve(t),o=n.depth;;o--){var i=void 0,a=void 0,s=n.index(o);if(o==n.depth?(i=n.nodeBefore,a=n.nodeAfter):r>0?(i=n.node(o+1),s++,a=n.node(o).maybeChild(s)):(i=n.node(o).maybeChild(s-1),a=n.node(o+1)),i&&!i.isTextblock&&T(i,a)&&n.node(o).canReplace(s,s+1))return t;if(0==o)break;t=r<0?n.before(o):n.after(o)}}function O(e,t,r){var n=e.resolve(t);if(n.parent.canReplaceWith(n.index(),n.index(),r))return t;if(0==n.parentOffset)for(var o=n.depth-1;o>=0;o--){var i=n.index(o);if(n.node(o).canReplaceWith(i,i,r))return n.before(o+1);if(i>0)return null}if(n.parentOffset==n.parent.content.size)for(var a=n.depth-1;a>=0;a--){var s=n.indexAfter(a);if(n.node(a).canReplaceWith(s,s,r))return n.after(a+1);if(s<n.node(a).childCount)return null}}function C(e,t,r){var n=e.resolve(t);if(!r.content.size)return t;for(var o=r.content,i=0;i<r.openStart;i++)o=o.firstChild.content;for(var a=1;a<=(0==r.openStart&&r.size?2:1);a++)for(var s=n.depth;s>=0;s--){var l=s==n.depth?0:n.pos<=(n.start(s+1)+n.end(s+1))/2?-1:1,c=n.index(s)+(l>0?1:0),h=n.node(s),p=!1;if(1==a)p=h.canReplace(c,c,o);else{var u=h.contentMatchAt(c).findWrapping(o.firstChild.type);p=u&&h.canReplaceWith(c,c,u[0])}if(p)return 0==l?n.pos:l<0?n.before(s+1):n.after(s+1)}return null}function N(e,t,r){for(var o=[],i=0;i<e.childCount;i++){var a=e.child(i);a.content.size&&(a=a.copy(N(a.content,t,a))),a.isInline&&(a=t(a,r,i)),o.push(a)}return n.Fragment.fromArray(o)}f.jsonID("replaceAround",v),h.prototype.lift=function(e,t){for(var r=e.$from,o=e.$to,i=e.depth,a=r.before(i+1),s=o.after(i+1),l=a,c=s,h=n.Fragment.empty,p=0,u=i,d=!1;u>t;u--)d||r.index(u)>0?(d=!0,h=n.Fragment.from(r.node(u).copy(h)),p++):l--;for(var f=n.Fragment.empty,m=0,g=i,y=!1;g>t;g--)y||o.after(g+1)<o.end(g)?(y=!0,f=n.Fragment.from(o.node(g).copy(f)),m++):c++;return this.step(new v(l,c,a,s,new n.Slice(h.append(f),p,m),h.size-p,!0))},h.prototype.wrap=function(e,t){for(var r=n.Fragment.empty,o=t.length-1;o>=0;o--)r=n.Fragment.from(t[o].type.create(t[o].attrs,r));var i=e.start,a=e.end;return this.step(new v(i,a,i,a,new n.Slice(r,0,0),t.length,!0))},h.prototype.setBlockType=function(e,t,r,o){var i=this;if(void 0===t&&(t=e),!r.isTextblock)throw new RangeError("Type given to setBlockType should be a textblock");var a=this.steps.length;return this.doc.nodesBetween(e,t,(function(e,t){if(e.isTextblock&&!e.hasMarkup(r,o)&&function(e,t,r){var n=e.resolve(t),o=n.index();return n.parent.canReplaceWith(o,o+1,r)}(i.doc,i.mapping.slice(a).map(t),r)){i.clearIncompatible(i.mapping.slice(a).map(t,1),r);var s=i.mapping.slice(a),l=s.map(t,1),c=s.map(t+e.nodeSize,1);return i.step(new v(l,c,l+1,c-1,new n.Slice(n.Fragment.from(r.create(o,null,e.marks)),0,0),1,!0)),!1}})),this},h.prototype.setNodeMarkup=function(e,t,r,o){var i=this.doc.nodeAt(e);if(!i)throw new RangeError("No node at given position");t||(t=i.type);var a=t.create(r,null,o||i.marks);if(i.isLeaf)return this.replaceWith(e,e+i.nodeSize,a);if(!t.validContent(i.content))throw new RangeError("Invalid content for node type "+t.name);return this.step(new v(e,e+i.nodeSize,e+1,e+i.nodeSize-1,new n.Slice(n.Fragment.from(a),0,0),1,!0))},h.prototype.split=function(e,t,r){void 0===t&&(t=1);for(var o=this.doc.resolve(e),i=n.Fragment.empty,a=n.Fragment.empty,s=o.depth,l=o.depth-t,c=t-1;s>l;s--,c--){i=n.Fragment.from(o.node(s).copy(i));var h=r&&r[c];a=n.Fragment.from(h?h.type.create(h.attrs,a):o.node(s).copy(a))}return this.step(new g(e,e,new n.Slice(i.append(a),t,t),!0))},h.prototype.join=function(e,t){void 0===t&&(t=1);var r=new g(e-t,e+t,n.Slice.empty,!0);return this.step(r)};var z=function(e){function t(t,r,n){e.call(this),this.from=t,this.to=r,this.mark=n}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.apply=function(e){var t=this,r=e.slice(this.from,this.to),o=e.resolve(this.from),i=o.node(o.sharedDepth(this.to)),a=new n.Slice(N(r.content,(function(e,r){return e.isAtom&&r.type.allowsMarkType(t.mark.type)?e.mark(t.mark.addToSet(e.marks)):e}),i),r.openStart,r.openEnd);return m.fromReplace(e,this.from,this.to,a)},t.prototype.invert=function(){return new E(this.from,this.to,this.mark)},t.prototype.map=function(e){var r=e.mapResult(this.from,1),n=e.mapResult(this.to,-1);return r.deleted&&n.deleted||r.pos>=n.pos?null:new t(r.pos,n.pos,this.mark)},t.prototype.merge=function(e){if(e instanceof t&&e.mark.eq(this.mark)&&this.from<=e.to&&this.to>=e.from)return new t(Math.min(this.from,e.from),Math.max(this.to,e.to),this.mark)},t.prototype.toJSON=function(){return{stepType:"addMark",mark:this.mark.toJSON(),from:this.from,to:this.to}},t.fromJSON=function(e,r){if("number"!=typeof r.from||"number"!=typeof r.to)throw new RangeError("Invalid input for AddMarkStep.fromJSON");return new t(r.from,r.to,e.markFromJSON(r.mark))},t}(f);f.jsonID("addMark",z);var E=function(e){function t(t,r,n){e.call(this),this.from=t,this.to=r,this.mark=n}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.apply=function(e){var t=this,r=e.slice(this.from,this.to),o=new n.Slice(N(r.content,(function(e){return e.mark(t.mark.removeFromSet(e.marks))})),r.openStart,r.openEnd);return m.fromReplace(e,this.from,this.to,o)},t.prototype.invert=function(){return new z(this.from,this.to,this.mark)},t.prototype.map=function(e){var r=e.mapResult(this.from,1),n=e.mapResult(this.to,-1);return r.deleted&&n.deleted||r.pos>=n.pos?null:new t(r.pos,n.pos,this.mark)},t.prototype.merge=function(e){if(e instanceof t&&e.mark.eq(this.mark)&&this.from<=e.to&&this.to>=e.from)return new t(Math.min(this.from,e.from),Math.max(this.to,e.to),this.mark)},t.prototype.toJSON=function(){return{stepType:"removeMark",mark:this.mark.toJSON(),from:this.from,to:this.to}},t.fromJSON=function(e,r){if("number"!=typeof r.from||"number"!=typeof r.to)throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");return new t(r.from,r.to,e.markFromJSON(r.mark))},t}(f);function D(e,t,r,o){if(void 0===r&&(r=t),void 0===o&&(o=n.Slice.empty),t==r&&!o.size)return null;var i=e.resolve(t),a=e.resolve(r);return I(i,a,o)?new g(t,r,o):new R(i,a,o).fit()}function I(e,t,r){return!r.openStart&&!r.openEnd&&e.start()==t.start()&&e.parent.canReplace(e.index(),t.index(),r.content)}f.jsonID("removeMark",E),h.prototype.addMark=function(e,t,r){var n=this,o=[],i=[],a=null,s=null;return this.doc.nodesBetween(e,t,(function(n,l,c){if(n.isInline){var h=n.marks;if(!r.isInSet(h)&&c.type.allowsMarkType(r.type)){for(var p=Math.max(l,e),u=Math.min(l+n.nodeSize,t),d=r.addToSet(h),f=0;f<h.length;f++)h[f].isInSet(d)||(a&&a.to==p&&a.mark.eq(h[f])?a.to=u:o.push(a=new E(p,u,h[f])));s&&s.to==p?s.to=u:i.push(s=new z(p,u,r))}}})),o.forEach((function(e){return n.step(e)})),i.forEach((function(e){return n.step(e)})),this},h.prototype.removeMark=function(e,t,r){var o=this;void 0===r&&(r=null);var i=[],a=0;return this.doc.nodesBetween(e,t,(function(o,s){if(o.isInline){a++;var l=null;if(r instanceof n.MarkType)for(var c,h=o.marks;c=r.isInSet(h);)(l||(l=[])).push(c),h=c.removeFromSet(h);else r?r.isInSet(o.marks)&&(l=[r]):l=o.marks;if(l&&l.length)for(var p=Math.min(s+o.nodeSize,t),u=0;u<l.length;u++){for(var d=l[u],f=void 0,m=0;m<i.length;m++){var g=i[m];g.step==a-1&&d.eq(i[m].style)&&(f=g)}f?(f.to=p,f.step=a):i.push({style:d,from:Math.max(s,e),to:p,step:a})}}})),i.forEach((function(e){return o.step(new E(e.from,e.to,e.style))})),this},h.prototype.clearIncompatible=function(e,t,r){void 0===r&&(r=t.contentMatch);for(var o=this.doc.nodeAt(e),i=[],a=e+1,s=0;s<o.childCount;s++){var l=o.child(s),c=a+l.nodeSize,h=r.matchType(l.type,l.attrs);if(h){r=h;for(var p=0;p<l.marks.length;p++)t.allowsMarkType(l.marks[p].type)||this.step(new E(a,c,l.marks[p]))}else i.push(new g(a,c,n.Slice.empty));a=c}if(!r.validEnd){var u=r.fillBefore(n.Fragment.empty,!0);this.replace(a,a,new n.Slice(u,0,0))}for(var d=i.length-1;d>=0;d--)this.step(i[d]);return this},h.prototype.replace=function(e,t,r){void 0===t&&(t=e),void 0===r&&(r=n.Slice.empty);var o=D(this.doc,e,t,r);return o&&this.step(o),this},h.prototype.replaceWith=function(e,t,r){return this.replace(e,t,new n.Slice(n.Fragment.from(r),0,0))},h.prototype.delete=function(e,t){return this.replace(e,t,n.Slice.empty)},h.prototype.insert=function(e,t){return this.replaceWith(e,e,t)};var R=function(e,t,r){this.$to=t,this.$from=e,this.unplaced=r,this.frontier=[];for(var o=0;o<=e.depth;o++){var i=e.node(o);this.frontier.push({type:i.type,match:i.contentMatchAt(e.indexAfter(o))})}this.placed=n.Fragment.empty;for(var a=e.depth;a>0;a--)this.placed=n.Fragment.from(e.node(a).copy(this.placed))},B={depth:{configurable:!0}};function P(e,t,r){return 0==t?e.cutByIndex(r):e.replaceChild(0,e.firstChild.copy(P(e.firstChild.content,t-1,r)))}function _(e,t,r){return 0==t?e.append(r):e.replaceChild(e.childCount-1,e.lastChild.copy(_(e.lastChild.content,t-1,r)))}function q(e,t){for(var r=0;r<t;r++)e=e.firstChild.content;return e}function L(e,t,r){if(t<=0)return e;var o=e.content;return t>1&&(o=o.replaceChild(0,L(o.firstChild,t-1,1==o.childCount?r-1:0))),t>0&&(o=e.type.contentMatch.fillBefore(o).append(o),r<=0&&(o=o.append(e.type.contentMatch.matchFragment(o).fillBefore(n.Fragment.empty,!0)))),e.copy(o)}function F(e,t,r,n,o){var i=e.node(t),a=o?e.indexAfter(t):e.index(t);if(a==i.childCount&&!r.compatibleContent(i.type))return null;var s=n.fillBefore(i.content,!0,a);return s&&!function(e,t,r){for(var n=r;n<t.childCount;n++)if(!e.allowsMarks(t.child(n).marks))return!0;return!1}(r,i.content,a)?s:null}function V(e,t,r,o,i){if(t<r){var a=e.firstChild;e=e.replaceChild(0,a.copy(V(a.content,t+1,r,o,a)))}if(t>o){var s=i.contentMatchAt(0),l=s.fillBefore(e).append(e);e=l.append(s.matchFragment(l).fillBefore(n.Fragment.empty,!0))}return e}function H(e,t){for(var r=[],n=Math.min(e.depth,t.depth);n>=0;n--){var o=e.start(n);if(o<e.pos-(e.depth-n)||t.end(n)>t.pos+(t.depth-n)||e.node(n).type.spec.isolating||t.node(n).type.spec.isolating)break;o==t.start(n)&&r.push(n)}return r}B.depth.get=function(){return this.frontier.length-1},R.prototype.fit=function(){for(;this.unplaced.size;){var e=this.findFittable();e?this.placeNodes(e):this.openMore()||this.dropNode()}var t=this.mustMoveInline(),r=this.placed.size-this.depth-this.$from.depth,o=this.$from,i=this.close(t<0?this.$to:o.doc.resolve(t));if(!i)return null;for(var a=this.placed,s=o.depth,l=i.depth;s&&l&&1==a.childCount;)a=a.firstChild.content,s--,l--;var c=new n.Slice(a,s,l);return t>-1?new v(o.pos,t,this.$to.pos,this.$to.end(),c,r):c.size||o.pos!=this.$to.pos?new g(o.pos,i.pos,c):void 0},R.prototype.findFittable=function(){for(var e=1;e<=2;e++)for(var t=this.unplaced.openStart;t>=0;t--)for(var r=void 0,o=(t?(r=q(this.unplaced.content,t-1).firstChild).content:this.unplaced.content).firstChild,i=this.depth;i>=0;i--){var a=this.frontier[i],s=a.type,l=a.match,c=void 0,h=void 0;if(1==e&&(o?l.matchType(o.type)||(h=l.fillBefore(n.Fragment.from(o),!1)):s.compatibleContent(r.type)))return{sliceDepth:t,frontierDepth:i,parent:r,inject:h};if(2==e&&o&&(c=l.findWrapping(o.type)))return{sliceDepth:t,frontierDepth:i,parent:r,wrap:c};if(r&&l.matchType(r.type))break}},R.prototype.openMore=function(){var e=this.unplaced,t=e.content,r=e.openStart,o=e.openEnd,i=q(t,r);return!(!i.childCount||i.firstChild.isLeaf||(this.unplaced=new n.Slice(t,r+1,Math.max(o,i.size+r>=t.size-o?r+1:0)),0))},R.prototype.dropNode=function(){var e=this.unplaced,t=e.content,r=e.openStart,o=e.openEnd,i=q(t,r);if(i.childCount<=1&&r>0){var a=t.size-r<=r+i.size;this.unplaced=new n.Slice(P(t,r-1,1),r-1,a?r-1:o)}else this.unplaced=new n.Slice(P(t,r,1),r,o)},R.prototype.placeNodes=function(e){for(var t=e.sliceDepth,r=e.frontierDepth,o=e.parent,i=e.inject,a=e.wrap;this.depth>r;)this.closeFrontierNode();if(a)for(var s=0;s<a.length;s++)this.openFrontierNode(a[s]);var l=this.unplaced,c=o?o.content:l.content,h=l.openStart-t,p=0,u=[],d=this.frontier[r],f=d.match,m=d.type;if(i){for(var g=0;g<i.childCount;g++)u.push(i.child(g));f=f.matchFragment(i)}for(var v=c.size+t-(l.content.size-l.openEnd);p<c.childCount;){var y=c.child(p),b=f.matchType(y.type);if(!b)break;(++p>1||0==h||y.content.size)&&(f=b,u.push(L(y.mark(m.allowedMarks(y.marks)),1==p?h:0,p==c.childCount?v:-1)))}var w=p==c.childCount;w||(v=-1),this.placed=_(this.placed,r,n.Fragment.from(u)),this.frontier[r].match=f,w&&v<0&&o&&o.type==this.frontier[this.depth].type&&this.frontier.length>1&&this.closeFrontierNode();for(var x=0,S=c;x<v;x++){var k=S.lastChild;this.frontier.push({type:k.type,match:k.contentMatchAt(k.childCount)}),S=k.content}this.unplaced=w?0==t?n.Slice.empty:new n.Slice(P(l.content,t-1,1),t-1,v<0?l.openEnd:t-1):new n.Slice(P(l.content,t,p),l.openStart,l.openEnd)},R.prototype.mustMoveInline=function(){if(!this.$to.parent.isTextblock||this.$to.end()==this.$to.pos)return-1;var e,t=this.frontier[this.depth];if(!t.type.isTextblock||!F(this.$to,this.$to.depth,t.type,t.match,!1)||this.$to.depth==this.depth&&(e=this.findCloseLevel(this.$to))&&e.depth==this.depth)return-1;for(var r=this.$to.depth,n=this.$to.after(r);r>1&&n==this.$to.end(--r);)++n;return n},R.prototype.findCloseLevel=function(e){e:for(var t=Math.min(this.depth,e.depth);t>=0;t--){var r=this.frontier[t],n=r.match,o=r.type,i=t<e.depth&&e.end(t+1)==e.pos+(e.depth-(t+1)),a=F(e,t,o,n,i);if(a){for(var s=t-1;s>=0;s--){var l=this.frontier[s],c=l.match,h=F(e,s,l.type,c,!0);if(!h||h.childCount)continue e}return{depth:t,fit:a,move:i?e.doc.resolve(e.after(t+1)):e}}}},R.prototype.close=function(e){var t=this.findCloseLevel(e);if(!t)return null;for(;this.depth>t.depth;)this.closeFrontierNode();t.fit.childCount&&(this.placed=_(this.placed,t.depth,t.fit)),e=t.move;for(var r=t.depth+1;r<=e.depth;r++){var n=e.node(r),o=n.type.contentMatch.fillBefore(n.content,!0,e.index(r));this.openFrontierNode(n.type,n.attrs,o)}return e},R.prototype.openFrontierNode=function(e,t,r){var o=this.frontier[this.depth];o.match=o.match.matchType(e),this.placed=_(this.placed,this.depth,n.Fragment.from(e.create(t,r))),this.frontier.push({type:e,match:e.contentMatch})},R.prototype.closeFrontierNode=function(){var e=this.frontier.pop().match.fillBefore(n.Fragment.empty,!0);e.childCount&&(this.placed=_(this.placed,this.frontier.length,e))},Object.defineProperties(R.prototype,B),h.prototype.replaceRange=function(e,t,r){if(!r.size)return this.deleteRange(e,t);var o=this.doc.resolve(e),i=this.doc.resolve(t);if(I(o,i,r))return this.step(new g(e,t,r));var a=H(o,this.doc.resolve(t));0==a[a.length-1]&&a.pop();var s=-(o.depth+1);a.unshift(s);for(var l=o.depth,c=o.pos-1;l>0;l--,c--){var h=o.node(l).type.spec;if(h.defining||h.isolating)break;a.indexOf(l)>-1?s=l:o.before(l)==c&&a.splice(1,0,-l)}for(var p=a.indexOf(s),u=[],d=r.openStart,f=r.content,m=0;;m++){var v=f.firstChild;if(u.push(v),m==r.openStart)break;f=v.content}d>0&&u[d-1].type.spec.defining&&o.node(p).type!=u[d-1].type?d-=1:d>=2&&u[d-1].isTextblock&&u[d-2].type.spec.defining&&o.node(p).type!=u[d-2].type&&(d-=2);for(var y=r.openStart;y>=0;y--){var b=(y+d+1)%(r.openStart+1),w=u[b];if(w)for(var x=0;x<a.length;x++){var S=a[(x+p)%a.length],k=!0;S<0&&(k=!1,S=-S);var M=o.node(S-1),T=o.index(S-1);if(M.canReplaceWith(T,T,w.type,w.marks))return this.replace(o.before(S),k?i.after(S):t,new n.Slice(V(r.content,0,r.openStart,b),b,r.openEnd))}}for(var A=this.steps.length,O=a.length-1;O>=0&&(this.replace(e,t,r),!(this.steps.length>A));O--){var C=a[O];C<0||(e=o.before(C),t=i.after(C))}return this},h.prototype.replaceRangeWith=function(e,t,r){if(!r.isInline&&e==t&&this.doc.resolve(e).parent.content.size){var o=O(this.doc,e,r.type);null!=o&&(e=t=o)}return this.replaceRange(e,t,new n.Slice(n.Fragment.from(r),0,0))},h.prototype.deleteRange=function(e,t){for(var r=this.doc.resolve(e),n=this.doc.resolve(t),o=H(r,n),i=0;i<o.length;i++){var a=o[i],s=i==o.length-1;if(s&&0==a||r.node(a).type.contentMatch.validEnd)return this.delete(r.start(a),n.end(a));if(a>0&&(s||r.node(a-1).canReplace(r.index(a-1),n.indexAfter(a-1))))return this.delete(r.before(a),n.after(a))}for(var l=1;l<=r.depth&&l<=n.depth;l++)if(e-r.start(l)==r.depth-l&&t>r.end(l)&&n.end(l)-t!=n.depth-l)return this.delete(r.before(l),t);return this.delete(e,t)}},780:(e,t,r)=>{"use strict";r.r(t),r.d(t,{Decoration:()=>At,DecorationSet:()=>zt,EditorView:()=>Vt,__endComposition:()=>gt,__parseFromClipboard:()=>Fe,__serializeForClipboard:()=>Le});var n=r(922),o=r(638),i=r(81),a={};if("undefined"!=typeof navigator&&"undefined"!=typeof document){var s=/Edge\/(\d+)/.exec(navigator.userAgent),l=/MSIE \d/.test(navigator.userAgent),c=/Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);a.mac=/Mac/.test(navigator.platform);var h=a.ie=!!(l||c||s);a.ie_version=l?document.documentMode||6:c?+c[1]:s?+s[1]:null,a.gecko=!h&&/gecko\/(\d+)/i.test(navigator.userAgent),a.gecko_version=a.gecko&&+(/Firefox\/(\d+)/.exec(navigator.userAgent)||[0,0])[1];var p=!h&&/Chrome\/(\d+)/.exec(navigator.userAgent);a.chrome=!!p,a.chrome_version=p&&+p[1],a.safari=!h&&/Apple Computer/.test(navigator.vendor),a.ios=a.safari&&(/Mobile\/\w+/.test(navigator.userAgent)||navigator.maxTouchPoints>2),a.android=/Android \d/.test(navigator.userAgent),a.webkit="webkitFontSmoothing"in document.documentElement.style,a.webkit_version=a.webkit&&+(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent)||[0,0])[1]}var u=function(e){for(var t=0;;t++)if(!(e=e.previousSibling))return t},d=function(e){var t=e.assignedSlot||e.parentNode;return t&&11==t.nodeType?t.host:t},f=null,m=function(e,t,r){var n=f||(f=document.createRange());return n.setEnd(e,null==r?e.nodeValue.length:r),n.setStart(e,t||0),n},g=function(e,t,r,n){return r&&(y(e,t,r,n,-1)||y(e,t,r,n,1))},v=/^(img|br|input|textarea|hr)$/i;function y(e,t,r,n,o){for(;;){if(e==r&&t==n)return!0;if(t==(o<0?0:b(e))){var i=e.parentNode;if(1!=i.nodeType||w(e)||v.test(e.nodeName)||"false"==e.contentEditable)return!1;t=u(e)+(o<0?0:1),e=i}else{if(1!=e.nodeType)return!1;if("false"==(e=e.childNodes[t+(o<0?-1:0)]).contentEditable)return!1;t=o<0?b(e):0}}}function b(e){return 3==e.nodeType?e.nodeValue.length:e.childNodes.length}function w(e){for(var t,r=e;r&&!(t=r.pmViewDesc);r=r.parentNode);return t&&t.node&&t.node.isBlock&&(t.dom==e||t.contentDOM==e)}var x=function(e){var t=e.isCollapsed;return t&&a.chrome&&e.rangeCount&&!e.getRangeAt(0).collapsed&&(t=!1),t};function S(e,t){var r=document.createEvent("Event");return r.initEvent("keydown",!0,!0),r.keyCode=e,r.key=r.code=t,r}function k(e){return{left:0,right:e.documentElement.clientWidth,top:0,bottom:e.documentElement.clientHeight}}function M(e,t){return"number"==typeof e?e:e[t]}function T(e){var t=e.getBoundingClientRect(),r=t.width/e.offsetWidth||1,n=t.height/e.offsetHeight||1;return{left:t.left,right:t.left+e.clientWidth*r,top:t.top,bottom:t.top+e.clientHeight*n}}function A(e,t,r){for(var n=e.someProp("scrollThreshold")||0,o=e.someProp("scrollMargin")||5,i=e.dom.ownerDocument,a=r||e.dom;a;a=d(a))if(1==a.nodeType){var s=a==i.body||1!=a.nodeType,l=s?k(i):T(a),c=0,h=0;if(t.top<l.top+M(n,"top")?h=-(l.top-t.top+M(o,"top")):t.bottom>l.bottom-M(n,"bottom")&&(h=t.bottom-l.bottom+M(o,"bottom")),t.left<l.left+M(n,"left")?c=-(l.left-t.left+M(o,"left")):t.right>l.right-M(n,"right")&&(c=t.right-l.right+M(o,"right")),c||h)if(s)i.defaultView.scrollBy(c,h);else{var p=a.scrollLeft,u=a.scrollTop;h&&(a.scrollTop+=h),c&&(a.scrollLeft+=c);var f=a.scrollLeft-p,m=a.scrollTop-u;t={left:t.left-f,top:t.top-m,right:t.right-f,bottom:t.bottom-m}}if(s)break}}function O(e){for(var t=[],r=e.ownerDocument;e&&(t.push({dom:e,top:e.scrollTop,left:e.scrollLeft}),e!=r);e=d(e));return t}function C(e,t){for(var r=0;r<e.length;r++){var n=e[r],o=n.dom,i=n.top,a=n.left;o.scrollTop!=i+t&&(o.scrollTop=i+t),o.scrollLeft!=a&&(o.scrollLeft=a)}}var N=null;function z(e,t){for(var r,n,o=2e8,i=0,a=t.top,s=t.top,l=e.firstChild,c=0;l;l=l.nextSibling,c++){var h=void 0;if(1==l.nodeType)h=l.getClientRects();else{if(3!=l.nodeType)continue;h=m(l).getClientRects()}for(var p=0;p<h.length;p++){var u=h[p];if(u.top<=a&&u.bottom>=s){a=Math.max(u.bottom,a),s=Math.min(u.top,s);var d=u.left>t.left?u.left-t.left:u.right<t.left?t.left-u.right:0;if(d<o){r=l,o=d,n=d&&3==r.nodeType?{left:u.right<t.left?u.right:u.left,top:t.top}:t,1==l.nodeType&&d&&(i=c+(t.left>=(u.left+u.right)/2?1:0));continue}}!r&&(t.left>=u.right&&t.top>=u.top||t.left>=u.left&&t.top>=u.bottom)&&(i=c+1)}}return r&&3==r.nodeType?function(e,t){for(var r=e.nodeValue.length,n=document.createRange(),o=0;o<r;o++){n.setEnd(e,o+1),n.setStart(e,o);var i=R(n,1);if(i.top!=i.bottom&&E(t,i))return{node:e,offset:o+(t.left>=(i.left+i.right)/2?1:0)}}return{node:e,offset:0}}(r,n):!r||o&&1==r.nodeType?{node:e,offset:i}:z(r,n)}function E(e,t){return e.left>=t.left-1&&e.left<=t.right+1&&e.top>=t.top-1&&e.top<=t.bottom+1}function D(e,t,r){var n=e.childNodes.length;if(n&&r.top<r.bottom)for(var o=Math.max(0,Math.min(n-1,Math.floor(n*(t.top-r.top)/(r.bottom-r.top))-2)),i=o;;){var a=e.childNodes[i];if(1==a.nodeType)for(var s=a.getClientRects(),l=0;l<s.length;l++){var c=s[l];if(E(t,c))return D(a,t,c)}if((i=(i+1)%n)==o)break}return e}function I(e,t){var r,n,o,i,s=e.root;if(s.caretPositionFromPoint)try{var l=s.caretPositionFromPoint(t.left,t.top);l&&(o=(r=l).offsetNode,i=r.offset)}catch(e){}if(!o&&s.caretRangeFromPoint){var c=s.caretRangeFromPoint(t.left,t.top);c&&(o=(n=c).startContainer,i=n.startOffset)}var h,p=s.elementFromPoint(t.left,t.top+1);if(!p||!e.dom.contains(1!=p.nodeType?p.parentNode:p)){var u=e.dom.getBoundingClientRect();if(!E(t,u))return null;if(!(p=D(e.dom,t,u)))return null}if(a.safari)for(var f=p;o&&f;f=d(f))f.draggable&&(o=i=null);if(p=function(e,t){var r=e.parentNode;return r&&/^li$/i.test(r.nodeName)&&t.left<e.getBoundingClientRect().left?r:e}(p,t),o){if(a.gecko&&1==o.nodeType&&(i=Math.min(i,o.childNodes.length))<o.childNodes.length){var m,g=o.childNodes[i];"IMG"==g.nodeName&&(m=g.getBoundingClientRect()).right<=t.left&&m.bottom>t.top&&i++}o==e.dom&&i==o.childNodes.length-1&&1==o.lastChild.nodeType&&t.top>o.lastChild.getBoundingClientRect().bottom?h=e.state.doc.content.size:0!=i&&1==o.nodeType&&"BR"==o.childNodes[i-1].nodeName||(h=function(e,t,r,n){for(var o=-1,i=t;i!=e.dom;){var a=e.docView.nearestDesc(i,!0);if(!a)return null;if(a.node.isBlock&&a.parent){var s=a.dom.getBoundingClientRect();if(s.left>n.left||s.top>n.top)o=a.posBefore;else{if(!(s.right<n.left||s.bottom<n.top))break;o=a.posAfter}}i=a.dom.parentNode}return o>-1?o:e.docView.posFromDOM(t,r)}(e,o,i,t))}null==h&&(h=function(e,t,r){var n=z(t,r),o=n.node,i=n.offset,a=-1;if(1==o.nodeType&&!o.firstChild){var s=o.getBoundingClientRect();a=s.left!=s.right&&r.left>(s.left+s.right)/2?1:-1}return e.docView.posFromDOM(o,i,a)}(e,p,t));var v=e.docView.nearestDesc(p,!0);return{pos:h,inside:v?v.posAtStart-v.border:-1}}function R(e,t){var r=e.getClientRects();return r.length?r[t<0?0:r.length-1]:e.getBoundingClientRect()}var B=/[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;function P(e,t,r){var n=e.docView.domFromPos(t,r<0?-1:1),o=n.node,i=n.offset,s=a.webkit||a.gecko;if(3==o.nodeType){if(!s||!B.test(o.nodeValue)&&(r<0?i:i!=o.nodeValue.length)){var l=i,c=i,h=r<0?1:-1;return r<0&&!i?(c++,h=-1):r>=0&&i==o.nodeValue.length?(l--,h=1):r<0?l--:c++,_(R(m(o,l,c),h),h<0)}var p=R(m(o,i,i),r);if(a.gecko&&i&&/\s/.test(o.nodeValue[i-1])&&i<o.nodeValue.length){var u=R(m(o,i-1,i-1),-1);if(u.top==p.top){var d=R(m(o,i,i+1),-1);if(d.top!=p.top)return _(d,d.left<u.left)}}return p}if(!e.state.doc.resolve(t).parent.inlineContent){if(i&&(r<0||i==b(o))){var f=o.childNodes[i-1];if(1==f.nodeType)return q(f.getBoundingClientRect(),!1)}if(i<b(o)){var g=o.childNodes[i];if(1==g.nodeType)return q(g.getBoundingClientRect(),!0)}return q(o.getBoundingClientRect(),r>=0)}if(i&&(r<0||i==b(o))){var v=o.childNodes[i-1],y=3==v.nodeType?m(v,b(v)-(s?0:1)):1!=v.nodeType||"BR"==v.nodeName&&v.nextSibling?null:v;if(y)return _(R(y,1),!1)}if(i<b(o)){for(var w=o.childNodes[i];w.pmViewDesc&&w.pmViewDesc.ignoreForCoords;)w=w.nextSibling;var x=w?3==w.nodeType?m(w,0,s?0:1):1==w.nodeType?w:null:null;if(x)return _(R(x,-1),!0)}return _(R(3==o.nodeType?m(o):o,-r),r>=0)}function _(e,t){if(0==e.width)return e;var r=t?e.left:e.right;return{top:e.top,bottom:e.bottom,left:r,right:r}}function q(e,t){if(0==e.height)return e;var r=t?e.top:e.bottom;return{top:r,bottom:r,left:e.left,right:e.right}}function L(e,t,r){var n=e.state,o=e.root.activeElement;n!=t&&e.updateState(t),o!=e.dom&&e.focus();try{return r()}finally{n!=t&&e.updateState(n),o!=e.dom&&o&&o.focus()}}var F=/[\u0590-\u08ac]/,V=null,H=null,$=!1;var j=function(e,t,r,n){this.parent=e,this.children=t,this.dom=r,r.pmViewDesc=this,this.contentDOM=n,this.dirty=0},W={size:{configurable:!0},border:{configurable:!0},posBefore:{configurable:!0},posAtStart:{configurable:!0},posAfter:{configurable:!0},posAtEnd:{configurable:!0},contentLost:{configurable:!0},domAtom:{configurable:!0},ignoreForCoords:{configurable:!0}};j.prototype.matchesWidget=function(){return!1},j.prototype.matchesMark=function(){return!1},j.prototype.matchesNode=function(){return!1},j.prototype.matchesHack=function(e){return!1},j.prototype.parseRule=function(){return null},j.prototype.stopEvent=function(){return!1},W.size.get=function(){for(var e=0,t=0;t<this.children.length;t++)e+=this.children[t].size;return e},W.border.get=function(){return 0},j.prototype.destroy=function(){this.parent=null,this.dom.pmViewDesc==this&&(this.dom.pmViewDesc=null);for(var e=0;e<this.children.length;e++)this.children[e].destroy()},j.prototype.posBeforeChild=function(e){for(var t=0,r=this.posAtStart;t<this.children.length;t++){var n=this.children[t];if(n==e)return r;r+=n.size}},W.posBefore.get=function(){return this.parent.posBeforeChild(this)},W.posAtStart.get=function(){return this.parent?this.parent.posBeforeChild(this)+this.border:0},W.posAfter.get=function(){return this.posBefore+this.size},W.posAtEnd.get=function(){return this.posAtStart+this.size-2*this.border},j.prototype.localPosFromDOM=function(e,t,r){if(this.contentDOM&&this.contentDOM.contains(1==e.nodeType?e:e.parentNode)){if(r<0){var n,o;if(e==this.contentDOM)n=e.childNodes[t-1];else{for(;e.parentNode!=this.contentDOM;)e=e.parentNode;n=e.previousSibling}for(;n&&(!(o=n.pmViewDesc)||o.parent!=this);)n=n.previousSibling;return n?this.posBeforeChild(o)+o.size:this.posAtStart}var i,a;if(e==this.contentDOM)i=e.childNodes[t];else{for(;e.parentNode!=this.contentDOM;)e=e.parentNode;i=e.nextSibling}for(;i&&(!(a=i.pmViewDesc)||a.parent!=this);)i=i.nextSibling;return i?this.posBeforeChild(a):this.posAtEnd}var s;if(e==this.dom&&this.contentDOM)s=t>u(this.contentDOM);else if(this.contentDOM&&this.contentDOM!=this.dom&&this.dom.contains(this.contentDOM))s=2&e.compareDocumentPosition(this.contentDOM);else if(this.dom.firstChild){if(0==t)for(var l=e;;l=l.parentNode){if(l==this.dom){s=!1;break}if(l.parentNode.firstChild!=l)break}if(null==s&&t==e.childNodes.length)for(var c=e;;c=c.parentNode){if(c==this.dom){s=!0;break}if(c.parentNode.lastChild!=c)break}}return(null==s?r>0:s)?this.posAtEnd:this.posAtStart},j.prototype.nearestDesc=function(e,t){for(var r=!0,n=e;n;n=n.parentNode){var o=this.getDesc(n);if(o&&(!t||o.node)){if(!r||!o.nodeDOM||(1==o.nodeDOM.nodeType?o.nodeDOM.contains(1==e.nodeType?e:e.parentNode):o.nodeDOM==e))return o;r=!1}}},j.prototype.getDesc=function(e){for(var t=e.pmViewDesc,r=t;r;r=r.parent)if(r==this)return t},j.prototype.posFromDOM=function(e,t,r){for(var n=e;n;n=n.parentNode){var o=this.getDesc(n);if(o)return o.localPosFromDOM(e,t,r)}return-1},j.prototype.descAt=function(e){for(var t=0,r=0;t<this.children.length;t++){var n=this.children[t],o=r+n.size;if(r==e&&o!=r){for(;!n.border&&n.children.length;)n=n.children[0];return n}if(e<o)return n.descAt(e-r-n.border);r=o}},j.prototype.domFromPos=function(e,t){if(!this.contentDOM)return{node:this.dom,offset:0};for(var r=0,n=0,o=0;r<this.children.length;r++){var i=this.children[r],a=o+i.size;if(a>e||i instanceof Q){n=e-o;break}o=a}if(n)return this.children[r].domFromPos(n-this.children[r].border,t);for(var s=void 0;r&&!(s=this.children[r-1]).size&&s instanceof G&&s.widget.type.side>=0;r--);if(t<=0){for(var l,c=!0;(l=r?this.children[r-1]:null)&&l.dom.parentNode!=this.contentDOM;r--,c=!1);return l&&t&&c&&!l.border&&!l.domAtom?l.domFromPos(l.size,t):{node:this.contentDOM,offset:l?u(l.dom)+1:0}}for(var h,p=!0;(h=r<this.children.length?this.children[r]:null)&&h.dom.parentNode!=this.contentDOM;r++,p=!1);return h&&p&&!h.border&&!h.domAtom?h.domFromPos(0,t):{node:this.contentDOM,offset:h?u(h.dom):this.contentDOM.childNodes.length}},j.prototype.parseRange=function(e,t,r){if(void 0===r&&(r=0),0==this.children.length)return{node:this.contentDOM,from:e,to:t,fromOffset:0,toOffset:this.contentDOM.childNodes.length};for(var n=-1,o=-1,i=r,a=0;;a++){var s=this.children[a],l=i+s.size;if(-1==n&&e<=l){var c=i+s.border;if(e>=c&&t<=l-s.border&&s.node&&s.contentDOM&&this.contentDOM.contains(s.contentDOM))return s.parseRange(e,t,c);e=i;for(var h=a;h>0;h--){var p=this.children[h-1];if(p.size&&p.dom.parentNode==this.contentDOM&&!p.emptyChildAt(1)){n=u(p.dom)+1;break}e-=p.size}-1==n&&(n=0)}if(n>-1&&(l>t||a==this.children.length-1)){t=l;for(var d=a+1;d<this.children.length;d++){var f=this.children[d];if(f.size&&f.dom.parentNode==this.contentDOM&&!f.emptyChildAt(-1)){o=u(f.dom);break}t+=f.size}-1==o&&(o=this.contentDOM.childNodes.length);break}i=l}return{node:this.contentDOM,from:e,to:t,fromOffset:n,toOffset:o}},j.prototype.emptyChildAt=function(e){if(this.border||!this.contentDOM||!this.children.length)return!1;var t=this.children[e<0?0:this.children.length-1];return 0==t.size||t.emptyChildAt(e)},j.prototype.domAfterPos=function(e){var t=this.domFromPos(e,0),r=t.node,n=t.offset;if(1!=r.nodeType||n==r.childNodes.length)throw new RangeError("No node after pos "+e);return r.childNodes[n]},j.prototype.setSelection=function(e,t,r,n){for(var o=Math.min(e,t),i=Math.max(e,t),s=0,l=0;s<this.children.length;s++){var c=this.children[s],h=l+c.size;if(o>l&&i<h)return c.setSelection(e-l-c.border,t-l-c.border,r,n);l=h}var p=this.domFromPos(e,e?-1:1),d=t==e?p:this.domFromPos(t,t?-1:1),f=r.getSelection(),m=!1;if((a.gecko||a.safari)&&e==t){var v=p.node,y=p.offset;if(3==v.nodeType){if((m=y&&"\n"==v.nodeValue[y-1])&&y==v.nodeValue.length)for(var b=v,w=void 0;b;b=b.parentNode){if(w=b.nextSibling){"BR"==w.nodeName&&(p=d={node:w.parentNode,offset:u(w)+1});break}var x=b.pmViewDesc;if(x&&x.node&&x.node.isBlock)break}}else{var S=v.childNodes[y-1];m=S&&("BR"==S.nodeName||"false"==S.contentEditable)}}if(a.gecko&&f.focusNode&&f.focusNode!=d.node&&1==f.focusNode.nodeType){var k=f.focusNode.childNodes[f.focusOffset];k&&"false"==k.contentEditable&&(n=!0)}if(n||m&&a.safari||!g(p.node,p.offset,f.anchorNode,f.anchorOffset)||!g(d.node,d.offset,f.focusNode,f.focusOffset)){var M=!1;if((f.extend||e==t)&&!m){f.collapse(p.node,p.offset);try{e!=t&&f.extend(d.node,d.offset),M=!0}catch(e){if(!(e instanceof DOMException))throw e}}if(!M){if(e>t){var T=p;p=d,d=T}var A=document.createRange();A.setEnd(d.node,d.offset),A.setStart(p.node,p.offset),f.removeAllRanges(),f.addRange(A)}}},j.prototype.ignoreMutation=function(e){return!this.contentDOM&&"selection"!=e.type},W.contentLost.get=function(){return this.contentDOM&&this.contentDOM!=this.dom&&!this.dom.contains(this.contentDOM)},j.prototype.markDirty=function(e,t){for(var r=0,n=0;n<this.children.length;n++){var o=this.children[n],i=r+o.size;if(r==i?e<=i&&t>=r:e<i&&t>r){var a=r+o.border,s=i-o.border;if(e>=a&&t<=s)return this.dirty=e==r||t==i?2:1,void(e!=a||t!=s||!o.contentLost&&o.dom.parentNode==this.contentDOM?o.markDirty(e-a,t-a):o.dirty=3);o.dirty=o.dom==o.contentDOM&&o.dom.parentNode==this.contentDOM?2:3}r=i}this.dirty=2},j.prototype.markParentsDirty=function(){for(var e=1,t=this.parent;t;t=t.parent,e++){var r=1==e?2:1;t.dirty<r&&(t.dirty=r)}},W.domAtom.get=function(){return!1},W.ignoreForCoords.get=function(){return!1},Object.defineProperties(j.prototype,W);var K=[],G=function(e){function t(t,r,n,o){var i,a=r.type.toDOM;if("function"==typeof a&&(a=a(n,(function(){return i?i.parent?i.parent.posBeforeChild(i):void 0:o}))),!r.type.spec.raw){if(1!=a.nodeType){var s=document.createElement("span");s.appendChild(a),a=s}a.contentEditable=!1,a.classList.add("ProseMirror-widget")}e.call(this,t,K,a,null),this.widget=r,i=this}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var r={domAtom:{configurable:!0}};return t.prototype.matchesWidget=function(e){return 0==this.dirty&&e.type.eq(this.widget.type)},t.prototype.parseRule=function(){return{ignore:!0}},t.prototype.stopEvent=function(e){var t=this.widget.spec.stopEvent;return!!t&&t(e)},t.prototype.ignoreMutation=function(e){return"selection"!=e.type||this.widget.spec.ignoreSelection},r.domAtom.get=function(){return!0},Object.defineProperties(t.prototype,r),t}(j),U=function(e){function t(t,r,n,o){e.call(this,t,K,r,null),this.textDOM=n,this.text=o}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var r={size:{configurable:!0}};return r.size.get=function(){return this.text.length},t.prototype.localPosFromDOM=function(e,t){return e!=this.textDOM?this.posAtStart+(t?this.size:0):this.posAtStart+t},t.prototype.domFromPos=function(e){return{node:this.textDOM,offset:e}},t.prototype.ignoreMutation=function(e){return"characterData"===e.type&&e.target.nodeValue==e.oldValue},Object.defineProperties(t.prototype,r),t}(j),J=function(e){function t(t,r,n,o){e.call(this,t,[],n,o),this.mark=r}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.create=function(e,r,n,i){var a=i.nodeViews[r.type.name],s=a&&a(r,i,n);return s&&s.dom||(s=o.DOMSerializer.renderSpec(document,r.type.spec.toDOM(r,n))),new t(e,r,s.dom,s.contentDOM||s.dom)},t.prototype.parseRule=function(){return{mark:this.mark.type.name,attrs:this.mark.attrs,contentElement:this.contentDOM}},t.prototype.matchesMark=function(e){return 3!=this.dirty&&this.mark.eq(e)},t.prototype.markDirty=function(t,r){if(e.prototype.markDirty.call(this,t,r),0!=this.dirty){for(var n=this.parent;!n.node;)n=n.parent;n.dirty<this.dirty&&(n.dirty=this.dirty),this.dirty=0}},t.prototype.slice=function(e,r,n){var o=t.create(this.parent,this.mark,!0,n),i=this.children,a=this.size;r<a&&(i=ue(i,r,a,n)),e>0&&(i=ue(i,0,e,n));for(var s=0;s<i.length;s++)i[s].parent=o;return o.children=i,o},t}(j),Y=function(e){function t(t,r,n,o,i,a,s,l,c){e.call(this,t,r.isLeaf?K:[],i,a),this.nodeDOM=s,this.node=r,this.outerDeco=n,this.innerDeco=o,a&&this.updateChildren(l,c)}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var r={size:{configurable:!0},border:{configurable:!0},domAtom:{configurable:!0}};return t.create=function(e,r,n,i,a,s){var l,c,h=a.nodeViews[r.type.name],p=h&&h(r,a,(function(){return c?c.parent?c.parent.posBeforeChild(c):void 0:s}),n,i),u=p&&p.dom,d=p&&p.contentDOM;if(r.isText)if(u){if(3!=u.nodeType)throw new RangeError("Text must be rendered as a DOM text node")}else u=document.createTextNode(r.text);else u||(u=(l=o.DOMSerializer.renderSpec(document,r.type.spec.toDOM(r))).dom,d=l.contentDOM);d||r.isText||"BR"==u.nodeName||(u.hasAttribute("contenteditable")||(u.contentEditable=!1),r.type.spec.draggable&&(u.draggable=!0));var f=u;return u=se(u,n,r),p?c=new ee(e,r,n,i,u,d,f,p,a,s+1):r.isText?new Z(e,r,n,i,u,f,a):new t(e,r,n,i,u,d,f,a,s+1)},t.prototype.parseRule=function(){var e=this;if(this.node.type.spec.reparseInView)return null;var t={node:this.node.type.name,attrs:this.node.attrs};return this.node.type.spec.code&&(t.preserveWhitespace="full"),this.contentDOM&&!this.contentLost?t.contentElement=this.contentDOM:t.getContent=function(){return e.contentDOM?o.Fragment.empty:e.node.content},t},t.prototype.matchesNode=function(e,t,r){return 0==this.dirty&&e.eq(this.node)&&le(t,this.outerDeco)&&r.eq(this.innerDeco)},r.size.get=function(){return this.node.nodeSize},r.border.get=function(){return this.node.isLeaf?0:1},t.prototype.updateChildren=function(e,t){var r=this,n=this.node.inlineContent,i=t,s=e.composing&&this.localCompositionInfo(e,t),l=s&&s.pos>-1?s:null,c=s&&s.pos<0,h=new he(this,l&&l.node);!function(e,t,r,n){var o=t.locals(e),i=0;if(0!=o.length)for(var a=0,s=[],l=null,c=0;;){if(a<o.length&&o[a].to==i){for(var h=o[a++],p=void 0;a<o.length&&o[a].to==i;)(p||(p=[h])).push(o[a++]);if(p){p.sort(pe);for(var u=0;u<p.length;u++)r(p[u],c,!!l)}else r(h,c,!!l)}var d=void 0,f=void 0;if(l)f=-1,d=l,l=null;else{if(!(c<e.childCount))break;f=c,d=e.child(c++)}for(var m=0;m<s.length;m++)s[m].to<=i&&s.splice(m--,1);for(;a<o.length&&o[a].from<=i&&o[a].to>i;)s.push(o[a++]);var g=i+d.nodeSize;if(d.isText){var v=g;a<o.length&&o[a].from<v&&(v=o[a].from);for(var y=0;y<s.length;y++)s[y].to<v&&(v=s[y].to);v<g&&(l=d.cut(v-i),d=d.cut(0,v-i),g=v,f=-1)}n(d,s.length?d.isInline&&!d.isLeaf?s.filter((function(e){return!e.inline})):s.slice():K,t.forChild(i,d),f),i=g}else for(var b=0;b<e.childCount;b++){var w=e.child(b);n(w,o,t.forChild(i,w),b),i+=w.nodeSize}}(this.node,this.innerDeco,(function(t,a,s){t.spec.marks?h.syncToMarks(t.spec.marks,n,e):t.type.side>=0&&!s&&h.syncToMarks(a==r.node.childCount?o.Mark.none:r.node.child(a).marks,n,e),h.placeWidget(t,e,i)}),(function(t,r,o,a){var l;h.syncToMarks(t.marks,n,e),h.findNodeMatch(t,r,o,a)||c&&e.state.selection.from>i&&e.state.selection.to<i+t.nodeSize&&(l=h.findIndexWithChild(s.node))>-1&&h.updateNodeAt(t,r,o,l,e)||h.updateNextNode(t,r,o,e,a)||h.addNode(t,r,o,e,i),i+=t.nodeSize})),h.syncToMarks(K,n,e),this.node.isTextblock&&h.addTextblockHacks(),h.destroyRest(),(h.changed||2==this.dirty)&&(l&&this.protectLocalComposition(e,l),te(this.contentDOM,this.children,e),a.ios&&function(e){if("UL"==e.nodeName||"OL"==e.nodeName){var t=e.style.cssText;e.style.cssText=t+"; list-style: square !important",window.getComputedStyle(e).listStyle,e.style.cssText=t}}(this.dom))},t.prototype.localCompositionInfo=function(e,t){var r=e.state.selection,o=r.from,i=r.to;if(!(!(e.state.selection instanceof n.TextSelection)||o<t||i>t+this.node.content.size)){var a=e.root.getSelection(),s=function(e,t){for(;;){if(3==e.nodeType)return e;if(1==e.nodeType&&t>0){if(e.childNodes.length>t&&3==e.childNodes[t].nodeType)return e.childNodes[t];t=b(e=e.childNodes[t-1])}else{if(!(1==e.nodeType&&t<e.childNodes.length))return null;e=e.childNodes[t],t=0}}}(a.focusNode,a.focusOffset);if(s&&this.dom.contains(s.parentNode)){if(this.node.inlineContent){var l=s.nodeValue,c=function(e,t,r,n){for(var o=0,i=0;o<e.childCount&&i<=n;){var a=e.child(o++),s=i;if(i+=a.nodeSize,a.isText){for(var l=a.text;o<e.childCount;){var c=e.child(o++);if(i+=c.nodeSize,!c.isText)break;l+=c.text}if(i>=r){var h=l.lastIndexOf(t,n-s);if(h>=0&&h+t.length+s>=r)return s+h}}}return-1}(this.node.content,l,o-t,i-t);return c<0?null:{node:s,pos:c,text:l}}return{node:s,pos:-1}}}},t.prototype.protectLocalComposition=function(e,t){var r=t.node,n=t.pos,o=t.text;if(!this.getDesc(r)){for(var i=r;i.parentNode!=this.contentDOM;i=i.parentNode){for(;i.previousSibling;)i.parentNode.removeChild(i.previousSibling);for(;i.nextSibling;)i.parentNode.removeChild(i.nextSibling);i.pmViewDesc&&(i.pmViewDesc=null)}var a=new U(this,i,r,o);e.compositionNodes.push(a),this.children=ue(this.children,n,n+o.length,e,a)}},t.prototype.update=function(e,t,r,n){return!(3==this.dirty||!e.sameMarkup(this.node)||(this.updateInner(e,t,r,n),0))},t.prototype.updateInner=function(e,t,r,n){this.updateOuterDeco(t),this.node=e,this.innerDeco=r,this.contentDOM&&this.updateChildren(n,this.posAtStart),this.dirty=0},t.prototype.updateOuterDeco=function(e){if(!le(e,this.outerDeco)){var t=1!=this.nodeDOM.nodeType,r=this.dom;this.dom=ie(this.dom,this.nodeDOM,oe(this.outerDeco,this.node,t),oe(e,this.node,t)),this.dom!=r&&(r.pmViewDesc=null,this.dom.pmViewDesc=this),this.outerDeco=e}},t.prototype.selectNode=function(){this.nodeDOM.classList.add("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||(this.dom.draggable=!0)},t.prototype.deselectNode=function(){this.nodeDOM.classList.remove("ProseMirror-selectednode"),!this.contentDOM&&this.node.type.spec.draggable||this.dom.removeAttribute("draggable")},r.domAtom.get=function(){return this.node.isAtom},Object.defineProperties(t.prototype,r),t}(j);function X(e,t,r,n,o){return se(n,t,e),new Y(null,e,t,r,n,n,n,o,0)}var Z=function(e){function t(t,r,n,o,i,a,s){e.call(this,t,r,n,o,i,null,a,s)}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var r={domAtom:{configurable:!0}};return t.prototype.parseRule=function(){for(var e=this.nodeDOM.parentNode;e&&e!=this.dom&&!e.pmIsDeco;)e=e.parentNode;return{skip:e||!0}},t.prototype.update=function(e,t,r,n){return!(3==this.dirty||0!=this.dirty&&!this.inParent()||!e.sameMarkup(this.node)||(this.updateOuterDeco(t),0==this.dirty&&e.text==this.node.text||e.text==this.nodeDOM.nodeValue||(this.nodeDOM.nodeValue=e.text,n.trackWrites==this.nodeDOM&&(n.trackWrites=null)),this.node=e,this.dirty=0,0))},t.prototype.inParent=function(){for(var e=this.parent.contentDOM,t=this.nodeDOM;t;t=t.parentNode)if(t==e)return!0;return!1},t.prototype.domFromPos=function(e){return{node:this.nodeDOM,offset:e}},t.prototype.localPosFromDOM=function(t,r,n){return t==this.nodeDOM?this.posAtStart+Math.min(r,this.node.text.length):e.prototype.localPosFromDOM.call(this,t,r,n)},t.prototype.ignoreMutation=function(e){return"characterData"!=e.type&&"selection"!=e.type},t.prototype.slice=function(e,r,n){var o=this.node.cut(e,r),i=document.createTextNode(o.text);return new t(this.parent,o,this.outerDeco,this.innerDeco,i,i,n)},t.prototype.markDirty=function(t,r){e.prototype.markDirty.call(this,t,r),this.dom==this.nodeDOM||0!=t&&r!=this.nodeDOM.nodeValue.length||(this.dirty=3)},r.domAtom.get=function(){return!1},Object.defineProperties(t.prototype,r),t}(Y),Q=function(e){function t(){e.apply(this,arguments)}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var r={domAtom:{configurable:!0},ignoreForCoords:{configurable:!0}};return t.prototype.parseRule=function(){return{ignore:!0}},t.prototype.matchesHack=function(e){return 0==this.dirty&&this.dom.nodeName==e},r.domAtom.get=function(){return!0},r.ignoreForCoords.get=function(){return"IMG"==this.dom.nodeName},Object.defineProperties(t.prototype,r),t}(j),ee=function(e){function t(t,r,n,o,i,a,s,l,c,h){e.call(this,t,r,n,o,i,a,s,c,h),this.spec=l}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.update=function(t,r,n,o){if(3==this.dirty)return!1;if(this.spec.update){var i=this.spec.update(t,r,n);return i&&this.updateInner(t,r,n,o),i}return!(!this.contentDOM&&!t.isLeaf)&&e.prototype.update.call(this,t,r,n,o)},t.prototype.selectNode=function(){this.spec.selectNode?this.spec.selectNode():e.prototype.selectNode.call(this)},t.prototype.deselectNode=function(){this.spec.deselectNode?this.spec.deselectNode():e.prototype.deselectNode.call(this)},t.prototype.setSelection=function(t,r,n,o){this.spec.setSelection?this.spec.setSelection(t,r,n):e.prototype.setSelection.call(this,t,r,n,o)},t.prototype.destroy=function(){this.spec.destroy&&this.spec.destroy(),e.prototype.destroy.call(this)},t.prototype.stopEvent=function(e){return!!this.spec.stopEvent&&this.spec.stopEvent(e)},t.prototype.ignoreMutation=function(t){return this.spec.ignoreMutation?this.spec.ignoreMutation(t):e.prototype.ignoreMutation.call(this,t)},t}(Y);function te(e,t,r){for(var n=e.firstChild,o=!1,i=0;i<t.length;i++){var a=t[i],s=a.dom;if(s.parentNode==e){for(;s!=n;)n=ce(n),o=!0;n=n.nextSibling}else o=!0,e.insertBefore(s,n);if(a instanceof J){var l=n?n.previousSibling:e.lastChild;te(a.contentDOM,a.children,r),n=l?l.nextSibling:e.firstChild}}for(;n;)n=ce(n),o=!0;o&&r.trackWrites==e&&(r.trackWrites=null)}function re(e){e&&(this.nodeName=e)}re.prototype=Object.create(null);var ne=[new re];function oe(e,t,r){if(0==e.length)return ne;for(var n=r?ne[0]:new re,o=[n],i=0;i<e.length;i++){var a=e[i].type.attrs;if(a)for(var s in a.nodeName&&o.push(n=new re(a.nodeName)),a){var l=a[s];null!=l&&(r&&1==o.length&&o.push(n=new re(t.isInline?"span":"div")),"class"==s?n.class=(n.class?n.class+" ":"")+l:"style"==s?n.style=(n.style?n.style+";":"")+l:"nodeName"!=s&&(n[s]=l))}}return o}function ie(e,t,r,n){if(r==ne&&n==ne)return t;for(var o=t,i=0;i<n.length;i++){var a=n[i],s=r[i];if(i){var l=void 0;s&&s.nodeName==a.nodeName&&o!=e&&(l=o.parentNode)&&l.tagName.toLowerCase()==a.nodeName||((l=document.createElement(a.nodeName)).pmIsDeco=!0,l.appendChild(o),s=ne[0]),o=l}ae(o,s||ne[0],a)}return o}function ae(e,t,r){for(var n in t)"class"==n||"style"==n||"nodeName"==n||n in r||e.removeAttribute(n);for(var o in r)"class"!=o&&"style"!=o&&"nodeName"!=o&&r[o]!=t[o]&&e.setAttribute(o,r[o]);if(t.class!=r.class){for(var i=t.class?t.class.split(" ").filter(Boolean):K,a=r.class?r.class.split(" ").filter(Boolean):K,s=0;s<i.length;s++)-1==a.indexOf(i[s])&&e.classList.remove(i[s]);for(var l=0;l<a.length;l++)-1==i.indexOf(a[l])&&e.classList.add(a[l])}if(t.style!=r.style){if(t.style)for(var c,h=/\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g;c=h.exec(t.style);)e.style.removeProperty(c[1]);r.style&&(e.style.cssText+=r.style)}}function se(e,t,r){return ie(e,e,ne,oe(t,r,1!=e.nodeType))}function le(e,t){if(e.length!=t.length)return!1;for(var r=0;r<e.length;r++)if(!e[r].type.eq(t[r].type))return!1;return!0}function ce(e){var t=e.nextSibling;return e.parentNode.removeChild(e),t}var he=function(e,t){this.top=e,this.lock=t,this.index=0,this.stack=[],this.changed=!1,this.preMatch=function(e,t){for(var r=e.childCount,n=t.length,o=new Map;r>0&&n>0;n--){var i=t[n-1],a=i.node;if(a){if(a!=e.child(r-1))break;--r,o.set(i,r)}}return{index:r,matched:o}}(e.node.content,e.children)};function pe(e,t){return e.type.side-t.type.side}function ue(e,t,r,n,o){for(var i=[],a=0,s=0;a<e.length;a++){var l=e[a],c=s,h=s+=l.size;c>=r||h<=t?i.push(l):(c<t&&i.push(l.slice(0,t-c,n)),o&&(i.push(o),o=null),h>r&&i.push(l.slice(r-c,l.size,n)))}return i}function de(e,t){var r=e.root.getSelection(),o=e.state.doc;if(!r.focusNode)return null;var i=e.docView.nearestDesc(r.focusNode),a=i&&0==i.size,s=e.docView.posFromDOM(r.focusNode,r.focusOffset);if(s<0)return null;var l,c,h=o.resolve(s);if(x(r)){for(l=h;i&&!i.node;)i=i.parent;if(i&&i.node.isAtom&&n.NodeSelection.isSelectable(i.node)&&i.parent&&(!i.node.isInline||!function(e,t,r){for(var n=0==t,o=t==b(e);n||o;){if(e==r)return!0;var i=u(e);if(!(e=e.parentNode))return!1;n=n&&0==i,o=o&&i==b(e)}}(r.focusNode,r.focusOffset,i.dom))){var p=i.posBefore;c=new n.NodeSelection(s==p?h:o.resolve(p))}}else{var d=e.docView.posFromDOM(r.anchorNode,r.anchorOffset);if(d<0)return null;l=o.resolve(d)}return c||(c=Se(e,l,h,"pointer"==t||e.state.selection.head<h.pos&&!a?1:-1)),c}function fe(e){return e.editable?e.hasFocus():ke(e)&&document.activeElement&&document.activeElement.contains(e.dom)}function me(e,t){var r=e.state.selection;if(we(e,r),fe(e)){if(!t&&e.mouseDown&&e.mouseDown.allowDefault)return e.mouseDown.delayedSelectionSync=!0,void e.domObserver.setCurSelection();if(e.domObserver.disconnectSelection(),e.cursorWrapper)!function(e){var t=e.root.getSelection(),r=document.createRange(),n=e.cursorWrapper.dom,o="IMG"==n.nodeName;o?r.setEnd(n.parentNode,u(n)+1):r.setEnd(n,0),r.collapse(!1),t.removeAllRanges(),t.addRange(r),!o&&!e.state.selection.visible&&a.ie&&a.ie_version<=11&&(n.disabled=!0,n.disabled=!1)}(e);else{var o,i,s=r.anchor,l=r.head;!ge||r instanceof n.TextSelection||(r.$from.parent.inlineContent||(o=ve(e,r.from)),r.empty||r.$from.parent.inlineContent||(i=ve(e,r.to))),e.docView.setSelection(s,l,e.root,t),ge&&(o&&be(o),i&&be(i)),r.visible?e.dom.classList.remove("ProseMirror-hideselection"):(e.dom.classList.add("ProseMirror-hideselection"),"onselectionchange"in document&&function(e){var t=e.dom.ownerDocument;t.removeEventListener("selectionchange",e.hideSelectionGuard);var r=e.root.getSelection(),n=r.anchorNode,o=r.anchorOffset;t.addEventListener("selectionchange",e.hideSelectionGuard=function(){r.anchorNode==n&&r.anchorOffset==o||(t.removeEventListener("selectionchange",e.hideSelectionGuard),setTimeout((function(){fe(e)&&!e.state.selection.visible||e.dom.classList.remove("ProseMirror-hideselection")}),20))})}(e))}e.domObserver.setCurSelection(),e.domObserver.connectSelection()}}he.prototype.destroyBetween=function(e,t){if(e!=t){for(var r=e;r<t;r++)this.top.children[r].destroy();this.top.children.splice(e,t-e),this.changed=!0}},he.prototype.destroyRest=function(){this.destroyBetween(this.index,this.top.children.length)},he.prototype.syncToMarks=function(e,t,r){for(var n=0,o=this.stack.length>>1,i=Math.min(o,e.length);n<i&&(n==o-1?this.top:this.stack[n+1<<1]).matchesMark(e[n])&&!1!==e[n].type.spec.spanning;)n++;for(;n<o;)this.destroyRest(),this.top.dirty=0,this.index=this.stack.pop(),this.top=this.stack.pop(),o--;for(;o<e.length;){this.stack.push(this.top,this.index+1);for(var a=-1,s=this.index;s<Math.min(this.index+3,this.top.children.length);s++)if(this.top.children[s].matchesMark(e[o])){a=s;break}if(a>-1)a>this.index&&(this.changed=!0,this.destroyBetween(this.index,a)),this.top=this.top.children[this.index];else{var l=J.create(this.top,e[o],t,r);this.top.children.splice(this.index,0,l),this.top=l,this.changed=!0}this.index=0,o++}},he.prototype.findNodeMatch=function(e,t,r,n){var o=this.top.children,i=-1;if(n>=this.preMatch.index){for(var a=this.index;a<o.length;a++)if(o[a].matchesNode(e,t,r)){i=a;break}}else for(var s=this.index,l=Math.min(o.length,s+1);s<l;s++){var c=o[s];if(c.matchesNode(e,t,r)&&!this.preMatch.matched.has(c)){i=s;break}}return!(i<0||(this.destroyBetween(this.index,i),this.index++,0))},he.prototype.updateNodeAt=function(e,t,r,n,o){return!!this.top.children[n].update(e,t,r,o)&&(this.destroyBetween(this.index,n),this.index=n+1,!0)},he.prototype.findIndexWithChild=function(e){for(;;){var t=e.parentNode;if(!t)return-1;if(t==this.top.contentDOM){var r=e.pmViewDesc;if(r)for(var n=this.index;n<this.top.children.length;n++)if(this.top.children[n]==r)return n;return-1}e=t}},he.prototype.updateNextNode=function(e,t,r,n,o){for(var i=this.index;i<this.top.children.length;i++){var a=this.top.children[i];if(a instanceof Y){var s=this.preMatch.matched.get(a);if(null!=s&&s!=o)return!1;var l=a.dom;if((!this.lock||!(l==this.lock||1==l.nodeType&&l.contains(this.lock.parentNode))||e.isText&&a.node&&a.node.isText&&a.nodeDOM.nodeValue==e.text&&3!=a.dirty&&le(t,a.outerDeco))&&a.update(e,t,r,n))return this.destroyBetween(this.index,i),a.dom!=l&&(this.changed=!0),this.index++,!0;break}}return!1},he.prototype.addNode=function(e,t,r,n,o){this.top.children.splice(this.index++,0,Y.create(this.top,e,t,r,n,o)),this.changed=!0},he.prototype.placeWidget=function(e,t,r){var n=this.index<this.top.children.length?this.top.children[this.index]:null;if(!n||!n.matchesWidget(e)||e!=n.widget&&n.widget.type.toDOM.parentNode){var o=new G(this.top,e,t,r);this.top.children.splice(this.index++,0,o),this.changed=!0}else this.index++},he.prototype.addTextblockHacks=function(){for(var e=this.top.children[this.index-1];e instanceof J;)e=e.children[e.children.length-1];e&&e instanceof Z&&!/\n$/.test(e.node.text)||((a.safari||a.chrome)&&e&&"false"==e.dom.contentEditable&&this.addHackNode("IMG"),this.addHackNode("BR"))},he.prototype.addHackNode=function(e){if(this.index<this.top.children.length&&this.top.children[this.index].matchesHack(e))this.index++;else{var t=document.createElement(e);"IMG"==e&&(t.className="ProseMirror-separator"),this.top.children.splice(this.index++,0,new Q(this.top,K,t,null)),this.changed=!0}};var ge=a.safari||a.chrome&&a.chrome_version<63;function ve(e,t){var r=e.docView.domFromPos(t,0),n=r.node,o=r.offset,i=o<n.childNodes.length?n.childNodes[o]:null,s=o?n.childNodes[o-1]:null;if(a.safari&&i&&"false"==i.contentEditable)return ye(i);if(!(i&&"false"!=i.contentEditable||s&&"false"!=s.contentEditable)){if(i)return ye(i);if(s)return ye(s)}}function ye(e){return e.contentEditable="true",a.safari&&e.draggable&&(e.draggable=!1,e.wasDraggable=!0),e}function be(e){e.contentEditable="false",e.wasDraggable&&(e.draggable=!0,e.wasDraggable=null)}function we(e,t){if(t instanceof n.NodeSelection){var r=e.docView.descAt(t.from);r!=e.lastSelectedViewDesc&&(xe(e),r&&r.selectNode(),e.lastSelectedViewDesc=r)}else xe(e)}function xe(e){e.lastSelectedViewDesc&&(e.lastSelectedViewDesc.parent&&e.lastSelectedViewDesc.deselectNode(),e.lastSelectedViewDesc=null)}function Se(e,t,r,o){return e.someProp("createSelectionBetween",(function(n){return n(e,t,r)}))||n.TextSelection.between(t,r,o)}function ke(e){var t=e.root.getSelection();if(!t.anchorNode)return!1;try{return e.dom.contains(3==t.anchorNode.nodeType?t.anchorNode.parentNode:t.anchorNode)&&(e.editable||e.dom.contains(3==t.focusNode.nodeType?t.focusNode.parentNode:t.focusNode))}catch(e){return!1}}function Me(e,t){var r=e.selection,o=r.$anchor,i=r.$head,a=t>0?o.max(i):o.min(i),s=a.parent.inlineContent?a.depth?e.doc.resolve(t>0?a.after():a.before()):null:a;return s&&n.Selection.findFrom(s,t)}function Te(e,t){return e.dispatch(e.state.tr.setSelection(t).scrollIntoView()),!0}function Ae(e,t,r){var o=e.state.selection;if(!(o instanceof n.TextSelection)){if(o instanceof n.NodeSelection&&o.node.isInline)return Te(e,new n.TextSelection(t>0?o.$to:o.$from));var i=Me(e.state,t);return!!i&&Te(e,i)}if(!o.empty||r.indexOf("s")>-1)return!1;if(e.endOfTextblock(t>0?"right":"left")){var s=Me(e.state,t);return!!(s&&s instanceof n.NodeSelection)&&Te(e,s)}if(!(a.mac&&r.indexOf("m")>-1)){var l,c=o.$head,h=c.textOffset?null:t<0?c.nodeBefore:c.nodeAfter;if(!h||h.isText)return!1;var p=t<0?c.pos-h.nodeSize:c.pos;return!!(h.isAtom||(l=e.docView.descAt(p))&&!l.contentDOM)&&(n.NodeSelection.isSelectable(h)?Te(e,new n.NodeSelection(t<0?e.state.doc.resolve(c.pos-h.nodeSize):c)):!!a.webkit&&Te(e,new n.TextSelection(e.state.doc.resolve(t<0?p:p+h.nodeSize))))}}function Oe(e){return 3==e.nodeType?e.nodeValue.length:e.childNodes.length}function Ce(e){var t=e.pmViewDesc;return t&&0==t.size&&(e.nextSibling||"BR"!=e.nodeName)}function Ne(e){var t=e.root.getSelection(),r=t.focusNode,n=t.focusOffset;if(r){var o,i,s=!1;for(a.gecko&&1==r.nodeType&&n<Oe(r)&&Ce(r.childNodes[n])&&(s=!0);;)if(n>0){if(1!=r.nodeType)break;var l=r.childNodes[n-1];if(Ce(l))o=r,i=--n;else{if(3!=l.nodeType)break;n=(r=l).nodeValue.length}}else{if(Ee(r))break;for(var c=r.previousSibling;c&&Ce(c);)o=r.parentNode,i=u(c),c=c.previousSibling;if(c)n=Oe(r=c);else{if((r=r.parentNode)==e.dom)break;n=0}}s?De(e,t,r,n):o&&De(e,t,o,i)}}function ze(e){var t=e.root.getSelection(),r=t.focusNode,n=t.focusOffset;if(r){for(var o,i,a=Oe(r);;)if(n<a){if(1!=r.nodeType)break;if(!Ce(r.childNodes[n]))break;o=r,i=++n}else{if(Ee(r))break;for(var s=r.nextSibling;s&&Ce(s);)o=s.parentNode,i=u(s)+1,s=s.nextSibling;if(s)n=0,a=Oe(r=s);else{if((r=r.parentNode)==e.dom)break;n=a=0}}o&&De(e,t,o,i)}}function Ee(e){var t=e.pmViewDesc;return t&&t.node&&t.node.isBlock}function De(e,t,r,n){if(x(t)){var o=document.createRange();o.setEnd(r,n),o.setStart(r,n),t.removeAllRanges(),t.addRange(o)}else t.extend&&t.extend(r,n);e.domObserver.setCurSelection();var i=e.state;setTimeout((function(){e.state==i&&me(e)}),50)}function Ie(e,t,r){var o=e.state.selection;if(o instanceof n.TextSelection&&!o.empty||r.indexOf("s")>-1)return!1;if(a.mac&&r.indexOf("m")>-1)return!1;var i=o.$from,s=o.$to;if(!i.parent.inlineContent||e.endOfTextblock(t<0?"up":"down")){var l=Me(e.state,t);if(l&&l instanceof n.NodeSelection)return Te(e,l)}if(!i.parent.inlineContent){var c=t<0?i:s,h=o instanceof n.AllSelection?n.Selection.near(c,t):n.Selection.findFrom(c,t);return!!h&&Te(e,h)}return!1}function Re(e,t){if(!(e.state.selection instanceof n.TextSelection))return!0;var r=e.state.selection,o=r.$head,i=r.$anchor,a=r.empty;if(!o.sameParent(i))return!0;if(!a)return!1;if(e.endOfTextblock(t>0?"forward":"backward"))return!0;var s=!o.textOffset&&(t<0?o.nodeBefore:o.nodeAfter);if(s&&!s.isText){var l=e.state.tr;return t<0?l.delete(o.pos-s.nodeSize,o.pos):l.delete(o.pos,o.pos+s.nodeSize),e.dispatch(l),!0}return!1}function Be(e,t,r){e.domObserver.stop(),t.contentEditable=r,e.domObserver.start()}function Pe(e){var t=e.pmViewDesc;if(t)return t.parseRule();if("BR"==e.nodeName&&e.parentNode){if(a.safari&&/^(ul|ol)$/i.test(e.parentNode.nodeName)){var r=document.createElement("div");return r.appendChild(document.createElement("li")),{skip:r}}if(e.parentNode.lastChild==e||a.safari&&/^(tr|table)$/i.test(e.parentNode.nodeName))return{ignore:!0}}else if("IMG"==e.nodeName&&e.getAttribute("mark-placeholder"))return{ignore:!0}}function _e(e,t,r){return Math.max(r.anchor,r.head)>t.content.size?null:Se(e,t.resolve(r.anchor),t.resolve(r.head))}function qe(e,t,r){for(var n=e.depth,o=t?e.end():e.pos;n>0&&(t||e.indexAfter(n)==e.node(n).childCount);)n--,o++,t=!1;if(r)for(var i=e.node(n).maybeChild(e.indexAfter(n));i&&!i.isLeaf;)i=i.firstChild,o++;return o}function Le(e,t){for(var r=[],n=t.content,i=t.openStart,a=t.openEnd;i>1&&a>1&&1==n.childCount&&1==n.firstChild.childCount;){i--,a--;var s=n.firstChild;r.push(s.type.name,s.attrs!=s.type.defaultAttrs?s.attrs:null),n=s.content}var l=e.someProp("clipboardSerializer")||o.DOMSerializer.fromSchema(e.state.schema),c=Ge(),h=c.createElement("div");h.appendChild(l.serializeFragment(n,{document:c}));for(var p,u=h.firstChild;u&&1==u.nodeType&&(p=We[u.nodeName.toLowerCase()]);){for(var d=p.length-1;d>=0;d--){for(var f=c.createElement(p[d]);h.firstChild;)f.appendChild(h.firstChild);h.appendChild(f),"tbody"!=p[d]&&(i++,a++)}u=h.firstChild}return u&&1==u.nodeType&&u.setAttribute("data-pm-slice",i+" "+a+" "+JSON.stringify(r)),{dom:h,text:e.someProp("clipboardTextSerializer",(function(e){return e(t)}))||t.content.textBetween(0,t.content.size,"\n\n")}}function Fe(e,t,r,n,i){var s,l,c=i.parent.type.spec.code;if(!r&&!t)return null;var h=t&&(n||c||!r);if(h){if(e.someProp("transformPastedText",(function(e){t=e(t,c||n)})),c)return new o.Slice(o.Fragment.from(e.state.schema.text(t.replace(/\r\n?/g,"\n"))),0,0);var p=e.someProp("clipboardTextParser",(function(e){return e(t,i,n)}));if(p)l=p;else{var u=i.marks(),d=e.state.schema,f=o.DOMSerializer.fromSchema(d);s=document.createElement("div"),t.trim().split(/(?:\r\n?|\n)+/).forEach((function(e){s.appendChild(document.createElement("p")).appendChild(f.serializeNode(d.text(e,u)))}))}}else e.someProp("transformPastedHTML",(function(e){r=e(r)})),s=function(e){var t=/^(\s*<meta [^>]*>)*/.exec(e);t&&(e=e.slice(t[0].length));var r,n=Ge().createElement("div"),o=/<([a-z][^>\s]+)/i.exec(e);if((r=o&&We[o[1].toLowerCase()])&&(e=r.map((function(e){return"<"+e+">"})).join("")+e+r.map((function(e){return"</"+e+">"})).reverse().join("")),n.innerHTML=e,r)for(var i=0;i<r.length;i++)n=n.querySelector(r[i])||n;return n}(r),a.webkit&&function(e){for(var t=e.querySelectorAll(a.chrome?"span:not([class]):not([style])":"span.Apple-converted-space"),r=0;r<t.length;r++){var n=t[r];1==n.childNodes.length&&" "==n.textContent&&n.parentNode&&n.parentNode.replaceChild(e.ownerDocument.createTextNode(" "),n)}}(s);var m=s&&s.querySelector("[data-pm-slice]"),g=m&&/^(\d+) (\d+) (.*)/.exec(m.getAttribute("data-pm-slice"));if(!l){var v=e.someProp("clipboardParser")||e.someProp("domParser")||o.DOMParser.fromSchema(e.state.schema);l=v.parseSlice(s,{preserveWhitespace:!(!h&&!g),context:i})}return l=g?function(e,t){if(!e.size)return e;var r,n=e.content.firstChild.type.schema;try{r=JSON.parse(t)}catch(t){return e}for(var i=e.content,a=e.openStart,s=e.openEnd,l=r.length-2;l>=0;l-=2){var c=n.nodes[r[l]];if(!c||c.hasRequiredAttrs())break;i=o.Fragment.from(c.create(r[l+1],i)),a++,s++}return new o.Slice(i,a,s)}(function(e,t,r){return t<e.openStart&&(e=new o.Slice(je(e.content,-1,t,e.openStart,0,e.openEnd),t,e.openEnd)),r<e.openEnd&&(e=new o.Slice(je(e.content,1,r,e.openEnd,0,0),e.openStart,r)),e}(l,+g[1],+g[2]),g[3]):o.Slice.maxOpen(function(e,t){if(e.childCount<2)return e;for(var r=function(r){var n=t.node(r).contentMatchAt(t.index(r)),i=void 0,a=[];if(e.forEach((function(e){if(a){var t,r=n.findWrapping(e.type);if(!r)return a=null;if(t=a.length&&i.length&&He(r,i,e,a[a.length-1],0))a[a.length-1]=t;else{a.length&&(a[a.length-1]=$e(a[a.length-1],i.length));var o=Ve(e,r);a.push(o),n=n.matchType(o.type,o.attrs),i=r}}})),a)return{v:o.Fragment.from(a)}},n=t.depth;n>=0;n--){var i=r(n);if(i)return i.v}return e}(l.content,i),!1),e.someProp("transformPasted",(function(e){l=e(l)})),l}function Ve(e,t,r){void 0===r&&(r=0);for(var n=t.length-1;n>=r;n--)e=t[n].create(null,o.Fragment.from(e));return e}function He(e,t,r,n,i){if(i<e.length&&i<t.length&&e[i]==t[i]){var a=He(e,t,r,n.lastChild,i+1);if(a)return n.copy(n.content.replaceChild(n.childCount-1,a));if(n.contentMatchAt(n.childCount).matchType(i==e.length-1?r.type:e[i+1]))return n.copy(n.content.append(o.Fragment.from(Ve(r,e,i+1))))}}function $e(e,t){if(0==t)return e;var r=e.content.replaceChild(e.childCount-1,$e(e.lastChild,t-1)),n=e.contentMatchAt(e.childCount).fillBefore(o.Fragment.empty,!0);return e.copy(r.append(n))}function je(e,t,r,n,i,a){var s=t<0?e.firstChild:e.lastChild,l=s.content;return i<n-1&&(l=je(l,t,r,n,i+1,a)),i>=r&&(l=t<0?s.contentMatchAt(0).fillBefore(l,e.childCount>1||a<=i).append(l):l.append(s.contentMatchAt(s.childCount).fillBefore(o.Fragment.empty,!0))),e.replaceChild(t<0?0:e.childCount-1,s.copy(l))}var We={thead:["table"],tbody:["table"],tfoot:["table"],caption:["table"],colgroup:["table"],col:["table","colgroup"],tr:["table","tbody"],td:["table","tbody","tr"],th:["table","tbody","tr"]},Ke=null;function Ge(){return Ke||(Ke=document.implementation.createHTMLDocument("title"))}var Ue={childList:!0,characterData:!0,characterDataOldValue:!0,attributes:!0,attributeOldValue:!0,subtree:!0},Je=a.ie&&a.ie_version<=11,Ye=function(){this.anchorNode=this.anchorOffset=this.focusNode=this.focusOffset=null};Ye.prototype.set=function(e){this.anchorNode=e.anchorNode,this.anchorOffset=e.anchorOffset,this.focusNode=e.focusNode,this.focusOffset=e.focusOffset},Ye.prototype.eq=function(e){return e.anchorNode==this.anchorNode&&e.anchorOffset==this.anchorOffset&&e.focusNode==this.focusNode&&e.focusOffset==this.focusOffset};var Xe=function(e,t){var r=this;this.view=e,this.handleDOMChange=t,this.queue=[],this.flushingSoon=-1,this.observer=window.MutationObserver&&new window.MutationObserver((function(e){for(var t=0;t<e.length;t++)r.queue.push(e[t]);a.ie&&a.ie_version<=11&&e.some((function(e){return"childList"==e.type&&e.removedNodes.length||"characterData"==e.type&&e.oldValue.length>e.target.nodeValue.length}))?r.flushSoon():r.flush()})),this.currentSelection=new Ye,Je&&(this.onCharData=function(e){r.queue.push({target:e.target,type:"characterData",oldValue:e.prevValue}),r.flushSoon()}),this.onSelectionChange=this.onSelectionChange.bind(this),this.suppressingSelectionUpdates=!1};Xe.prototype.flushSoon=function(){var e=this;this.flushingSoon<0&&(this.flushingSoon=window.setTimeout((function(){e.flushingSoon=-1,e.flush()}),20))},Xe.prototype.forceFlush=function(){this.flushingSoon>-1&&(window.clearTimeout(this.flushingSoon),this.flushingSoon=-1,this.flush())},Xe.prototype.start=function(){this.observer&&this.observer.observe(this.view.dom,Ue),Je&&this.view.dom.addEventListener("DOMCharacterDataModified",this.onCharData),this.connectSelection()},Xe.prototype.stop=function(){var e=this;if(this.observer){var t=this.observer.takeRecords();if(t.length){for(var r=0;r<t.length;r++)this.queue.push(t[r]);window.setTimeout((function(){return e.flush()}),20)}this.observer.disconnect()}Je&&this.view.dom.removeEventListener("DOMCharacterDataModified",this.onCharData),this.disconnectSelection()},Xe.prototype.connectSelection=function(){this.view.dom.ownerDocument.addEventListener("selectionchange",this.onSelectionChange)},Xe.prototype.disconnectSelection=function(){this.view.dom.ownerDocument.removeEventListener("selectionchange",this.onSelectionChange)},Xe.prototype.suppressSelectionUpdates=function(){var e=this;this.suppressingSelectionUpdates=!0,setTimeout((function(){return e.suppressingSelectionUpdates=!1}),50)},Xe.prototype.onSelectionChange=function(){if((!(e=this.view).editable||e.root.activeElement==e.dom)&&ke(e)){var e;if(this.suppressingSelectionUpdates)return me(this.view);if(a.ie&&a.ie_version<=11&&!this.view.state.selection.empty){var t=this.view.root.getSelection();if(t.focusNode&&g(t.focusNode,t.focusOffset,t.anchorNode,t.anchorOffset))return this.flushSoon()}this.flush()}},Xe.prototype.setCurSelection=function(){this.currentSelection.set(this.view.root.getSelection())},Xe.prototype.ignoreSelectionChange=function(e){if(0==e.rangeCount)return!0;var t=e.getRangeAt(0).commonAncestorContainer,r=this.view.docView.nearestDesc(t);return r&&r.ignoreMutation({type:"selection",target:3==t.nodeType?t.parentNode:t})?(this.setCurSelection(),!0):void 0},Xe.prototype.flush=function(){if(this.view.docView&&!(this.flushingSoon>-1)){var e=this.observer?this.observer.takeRecords():[];this.queue.length&&(e=this.queue.concat(e),this.queue.length=0);var t=this.view.root.getSelection(),r=!this.suppressingSelectionUpdates&&!this.currentSelection.eq(t)&&ke(this.view)&&!this.ignoreSelectionChange(t),n=-1,o=-1,i=!1,s=[];if(this.view.editable)for(var l=0;l<e.length;l++){var c=this.registerMutation(e[l],s);c&&(n=n<0?c.from:Math.min(c.from,n),o=o<0?c.to:Math.max(c.to,o),c.typeOver&&(i=!0))}if(a.gecko&&s.length>1){var h=s.filter((function(e){return"BR"==e.nodeName}));if(2==h.length){var p=h[0],u=h[1];p.parentNode&&p.parentNode.parentNode==u.parentNode?u.remove():p.remove()}}(n>-1||r)&&(n>-1&&(this.view.docView.markDirty(n,o),d=this.view,Ze||(Ze=!0,"normal"==getComputedStyle(d.dom).whiteSpace&&console.warn("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package."))),this.handleDOMChange(n,o,i,s),this.view.docView.dirty?this.view.updateState(this.view.state):this.currentSelection.eq(t)||me(this.view),this.currentSelection.set(t))}var d},Xe.prototype.registerMutation=function(e,t){if(t.indexOf(e.target)>-1)return null;var r=this.view.docView.nearestDesc(e.target);if("attributes"==e.type&&(r==this.view.docView||"contenteditable"==e.attributeName||"style"==e.attributeName&&!e.oldValue&&!e.target.getAttribute("style")))return null;if(!r||r.ignoreMutation(e))return null;if("childList"==e.type){for(var n=0;n<e.addedNodes.length;n++)t.push(e.addedNodes[n]);if(r.contentDOM&&r.contentDOM!=r.dom&&!r.contentDOM.contains(e.target))return{from:r.posBefore,to:r.posAfter};var o=e.previousSibling,i=e.nextSibling;if(a.ie&&a.ie_version<=11&&e.addedNodes.length)for(var s=0;s<e.addedNodes.length;s++){var l=e.addedNodes[s],c=l.previousSibling,h=l.nextSibling;(!c||Array.prototype.indexOf.call(e.addedNodes,c)<0)&&(o=c),(!h||Array.prototype.indexOf.call(e.addedNodes,h)<0)&&(i=h)}var p=o&&o.parentNode==e.target?u(o)+1:0,d=r.localPosFromDOM(e.target,p,-1),f=i&&i.parentNode==e.target?u(i):e.target.childNodes.length;return{from:d,to:r.localPosFromDOM(e.target,f,1)}}return"attributes"==e.type?{from:r.posAtStart-r.border,to:r.posAtEnd+r.border}:{from:r.posAtStart,to:r.posAtEnd,typeOver:e.target.nodeValue==e.oldValue}};var Ze=!1,Qe={},et={};function tt(e,t){e.lastSelectionOrigin=t,e.lastSelectionTime=Date.now()}function rt(e){e.someProp("handleDOMEvents",(function(t){for(var r in t)e.eventHandlers[r]||e.dom.addEventListener(r,e.eventHandlers[r]=function(t){return nt(e,t)})}))}function nt(e,t){return e.someProp("handleDOMEvents",(function(r){var n=r[t.type];return!!n&&(n(e,t)||t.defaultPrevented)}))}function ot(e){return{left:e.clientX,top:e.clientY}}function it(e,t,r,n,o){if(-1==n)return!1;for(var i=e.state.doc.resolve(n),a=function(n){if(e.someProp(t,(function(t){return n>i.depth?t(e,r,i.nodeAfter,i.before(n),o,!0):t(e,r,i.node(n),i.before(n),o,!1)})))return{v:!0}},s=i.depth+1;s>0;s--){var l=a(s);if(l)return l.v}return!1}function at(e,t,r){e.focused||e.focus();var n=e.state.tr.setSelection(t);"pointer"==r&&n.setMeta("pointer",!0),e.dispatch(n)}function st(e,t,r,n){return it(e,"handleDoubleClickOn",t,r,n)||e.someProp("handleDoubleClick",(function(r){return r(e,t,n)}))}function lt(e,t,r,o){return it(e,"handleTripleClickOn",t,r,o)||e.someProp("handleTripleClick",(function(r){return r(e,t,o)}))||function(e,t,r){if(0!=r.button)return!1;var o=e.state.doc;if(-1==t)return!!o.inlineContent&&(at(e,n.TextSelection.create(o,0,o.content.size),"pointer"),!0);for(var i=o.resolve(t),a=i.depth+1;a>0;a--){var s=a>i.depth?i.nodeAfter:i.node(a),l=i.before(a);if(s.inlineContent)at(e,n.TextSelection.create(o,l+1,l+1+s.content.size),"pointer");else{if(!n.NodeSelection.isSelectable(s))continue;at(e,n.NodeSelection.create(o,l),"pointer")}return!0}}(e,r,o)}function ct(e){return gt(e)}et.keydown=function(e,t){if(e.shiftKey=16==t.keyCode||t.shiftKey,!ut(e,t))if(229!=t.keyCode&&e.domObserver.forceFlush(),e.lastKeyCode=t.keyCode,e.lastKeyCodeTime=Date.now(),!a.ios||13!=t.keyCode||t.ctrlKey||t.altKey||t.metaKey)e.someProp("handleKeyDown",(function(r){return r(e,t)}))||function(e,t){var r=t.keyCode,n=function(e){var t="";return e.ctrlKey&&(t+="c"),e.metaKey&&(t+="m"),e.altKey&&(t+="a"),e.shiftKey&&(t+="s"),t}(t);return 8==r||a.mac&&72==r&&"c"==n?Re(e,-1)||Ne(e):46==r||a.mac&&68==r&&"c"==n?Re(e,1)||ze(e):13==r||27==r||(37==r?Ae(e,-1,n)||Ne(e):39==r?Ae(e,1,n)||ze(e):38==r?Ie(e,-1,n)||Ne(e):40==r?function(e){if(a.safari&&!(e.state.selection.$head.parentOffset>0)){var t=e.root.getSelection(),r=t.focusNode,n=t.focusOffset;if(r&&1==r.nodeType&&0==n&&r.firstChild&&"false"==r.firstChild.contentEditable){var o=r.firstChild;Be(e,o,!0),setTimeout((function(){return Be(e,o,!1)}),20)}}}(e)||Ie(e,1,n)||ze(e):n==(a.mac?"m":"c")&&(66==r||73==r||89==r||90==r))}(e,t)?t.preventDefault():tt(e,"key");else{var r=Date.now();e.lastIOSEnter=r,e.lastIOSEnterFallbackTimeout=setTimeout((function(){e.lastIOSEnter==r&&(e.someProp("handleKeyDown",(function(t){return t(e,S(13,"Enter"))})),e.lastIOSEnter=0)}),200)}},et.keyup=function(e,t){16==t.keyCode&&(e.shiftKey=!1)},et.keypress=function(e,t){if(!(ut(e,t)||!t.charCode||t.ctrlKey&&!t.altKey||a.mac&&t.metaKey))if(e.someProp("handleKeyPress",(function(r){return r(e,t)})))t.preventDefault();else{var r=e.state.selection;if(!(r instanceof n.TextSelection&&r.$from.sameParent(r.$to))){var o=String.fromCharCode(t.charCode);e.someProp("handleTextInput",(function(t){return t(e,r.$from.pos,r.$to.pos,o)}))||e.dispatch(e.state.tr.insertText(o).scrollIntoView()),t.preventDefault()}}};var ht=a.mac?"metaKey":"ctrlKey";Qe.mousedown=function(e,t){e.shiftKey=t.shiftKey;var r=ct(e),n=Date.now(),o="singleClick";n-e.lastClick.time<500&&function(e,t){var r=t.x-e.clientX,n=t.y-e.clientY;return r*r+n*n<100}(t,e.lastClick)&&!t[ht]&&("singleClick"==e.lastClick.type?o="doubleClick":"doubleClick"==e.lastClick.type&&(o="tripleClick")),e.lastClick={time:n,x:t.clientX,y:t.clientY,type:o};var i=e.posAtCoords(ot(t));i&&("singleClick"==o?(e.mouseDown&&e.mouseDown.done(),e.mouseDown=new pt(e,i,t,r)):("doubleClick"==o?st:lt)(e,i.pos,i.inside,t)?t.preventDefault():tt(e,"pointer"))};var pt=function(e,t,r,o){var i,s,l=this;if(this.view=e,this.startDoc=e.state.doc,this.pos=t,this.event=r,this.flushed=o,this.selectNode=r[ht],this.allowDefault=r.shiftKey,this.delayedSelectionSync=!1,t.inside>-1)i=e.state.doc.nodeAt(t.inside),s=t.inside;else{var c=e.state.doc.resolve(t.pos);i=c.parent,s=c.depth?c.before():0}this.mightDrag=null;var h=o?null:r.target,p=h?e.docView.nearestDesc(h,!0):null;this.target=p?p.dom:null;var u=e.state.selection;(0==r.button&&i.type.spec.draggable&&!1!==i.type.spec.selectable||u instanceof n.NodeSelection&&u.from<=s&&u.to>s)&&(this.mightDrag={node:i,pos:s,addAttr:this.target&&!this.target.draggable,setUneditable:this.target&&a.gecko&&!this.target.hasAttribute("contentEditable")}),this.target&&this.mightDrag&&(this.mightDrag.addAttr||this.mightDrag.setUneditable)&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&(this.target.draggable=!0),this.mightDrag.setUneditable&&setTimeout((function(){l.view.mouseDown==l&&l.target.setAttribute("contentEditable","false")}),20),this.view.domObserver.start()),e.root.addEventListener("mouseup",this.up=this.up.bind(this)),e.root.addEventListener("mousemove",this.move=this.move.bind(this)),tt(e,"pointer")};function ut(e,t){return!!e.composing||!!(a.safari&&Math.abs(t.timeStamp-e.compositionEndedAt)<500)&&(e.compositionEndedAt=-2e8,!0)}pt.prototype.done=function(){var e=this;this.view.root.removeEventListener("mouseup",this.up),this.view.root.removeEventListener("mousemove",this.move),this.mightDrag&&this.target&&(this.view.domObserver.stop(),this.mightDrag.addAttr&&this.target.removeAttribute("draggable"),this.mightDrag.setUneditable&&this.target.removeAttribute("contentEditable"),this.view.domObserver.start()),this.delayedSelectionSync&&setTimeout((function(){return me(e.view)})),this.view.mouseDown=null},pt.prototype.up=function(e){if(this.done(),this.view.dom.contains(3==e.target.nodeType?e.target.parentNode:e.target)){var t=this.pos;this.view.state.doc!=this.startDoc&&(t=this.view.posAtCoords(ot(e))),this.allowDefault||!t?tt(this.view,"pointer"):function(e,t,r,o,i){return it(e,"handleClickOn",t,r,o)||e.someProp("handleClick",(function(r){return r(e,t,o)}))||(i?function(e,t){if(-1==t)return!1;var r,o,i=e.state.selection;i instanceof n.NodeSelection&&(r=i.node);for(var a=e.state.doc.resolve(t),s=a.depth+1;s>0;s--){var l=s>a.depth?a.nodeAfter:a.node(s);if(n.NodeSelection.isSelectable(l)){o=r&&i.$from.depth>0&&s>=i.$from.depth&&a.before(i.$from.depth+1)==i.$from.pos?a.before(i.$from.depth):a.before(s);break}}return null!=o&&(at(e,n.NodeSelection.create(e.state.doc,o),"pointer"),!0)}(e,r):function(e,t){if(-1==t)return!1;var r=e.state.doc.resolve(t),o=r.nodeAfter;return!!(o&&o.isAtom&&n.NodeSelection.isSelectable(o))&&(at(e,new n.NodeSelection(r),"pointer"),!0)}(e,r))}(this.view,t.pos,t.inside,e,this.selectNode)?e.preventDefault():0==e.button&&(this.flushed||a.safari&&this.mightDrag&&!this.mightDrag.node.isAtom||a.chrome&&!(this.view.state.selection instanceof n.TextSelection)&&Math.min(Math.abs(t.pos-this.view.state.selection.from),Math.abs(t.pos-this.view.state.selection.to))<=2)?(at(this.view,n.Selection.near(this.view.state.doc.resolve(t.pos)),"pointer"),e.preventDefault()):tt(this.view,"pointer")}},pt.prototype.move=function(e){!this.allowDefault&&(Math.abs(this.event.x-e.clientX)>4||Math.abs(this.event.y-e.clientY)>4)&&(this.allowDefault=!0),tt(this.view,"pointer"),0==e.buttons&&this.done()},Qe.touchdown=function(e){ct(e),tt(e,"pointer")},Qe.contextmenu=function(e){return ct(e)};var dt=a.android?5e3:-1;function ft(e,t){clearTimeout(e.composingTimeout),t>-1&&(e.composingTimeout=setTimeout((function(){return gt(e)}),t))}function mt(e){var t;for(e.composing&&(e.composing=!1,e.compositionEndedAt=((t=document.createEvent("Event")).initEvent("event",!0,!0),t.timeStamp));e.compositionNodes.length>0;)e.compositionNodes.pop().markParentsDirty()}function gt(e,t){if(e.domObserver.forceFlush(),mt(e),t||e.docView.dirty){var r=de(e);return r&&!r.eq(e.state.selection)?e.dispatch(e.state.tr.setSelection(r)):e.updateState(e.state),!0}return!1}et.compositionstart=et.compositionupdate=function(e){if(!e.composing){e.domObserver.flush();var t=e.state,r=t.selection.$from;if(t.selection.empty&&(t.storedMarks||!r.textOffset&&r.parentOffset&&r.nodeBefore.marks.some((function(e){return!1===e.type.spec.inclusive}))))e.markCursor=e.state.storedMarks||r.marks(),gt(e,!0),e.markCursor=null;else if(gt(e),a.gecko&&t.selection.empty&&r.parentOffset&&!r.textOffset&&r.nodeBefore.marks.length)for(var n=e.root.getSelection(),o=n.focusNode,i=n.focusOffset;o&&1==o.nodeType&&0!=i;){var s=i<0?o.lastChild:o.childNodes[i-1];if(!s)break;if(3==s.nodeType){n.collapse(s,s.nodeValue.length);break}o=s,i=-1}e.composing=!0}ft(e,dt)},et.compositionend=function(e,t){e.composing&&(e.composing=!1,e.compositionEndedAt=t.timeStamp,ft(e,20))};var vt=a.ie&&a.ie_version<15||a.ios&&a.webkit_version<604;function yt(e,t,r,n){var i=Fe(e,t,r,e.shiftKey,e.state.selection.$from);if(e.someProp("handlePaste",(function(t){return t(e,n,i||o.Slice.empty)})))return!0;if(!i)return!1;var a=function(e){return 0==e.openStart&&0==e.openEnd&&1==e.content.childCount?e.content.firstChild:null}(i),s=a?e.state.tr.replaceSelectionWith(a,e.shiftKey):e.state.tr.replaceSelection(i);return e.dispatch(s.scrollIntoView().setMeta("paste",!0).setMeta("uiEvent","paste")),!0}Qe.copy=et.cut=function(e,t){var r=e.state.selection,n="cut"==t.type;if(!r.empty){var o=vt?null:t.clipboardData,i=Le(e,r.content()),a=i.dom,s=i.text;o?(t.preventDefault(),o.clearData(),o.setData("text/html",a.innerHTML),o.setData("text/plain",s)):function(e,t){if(e.dom.parentNode){var r=e.dom.parentNode.appendChild(document.createElement("div"));r.appendChild(t),r.style.cssText="position: fixed; left: -10000px; top: 10px";var n=getSelection(),o=document.createRange();o.selectNodeContents(t),e.dom.blur(),n.removeAllRanges(),n.addRange(o),setTimeout((function(){r.parentNode&&r.parentNode.removeChild(r),e.focus()}),50)}}(e,a),n&&e.dispatch(e.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent","cut"))}},et.paste=function(e,t){var r=vt?null:t.clipboardData;r&&yt(e,r.getData("text/plain"),r.getData("text/html"),t)?t.preventDefault():function(e,t){if(e.dom.parentNode){var r=e.shiftKey||e.state.selection.$from.parent.type.spec.code,n=e.dom.parentNode.appendChild(document.createElement(r?"textarea":"div"));r||(n.contentEditable="true"),n.style.cssText="position: fixed; left: -10000px; top: 10px",n.focus(),setTimeout((function(){e.focus(),n.parentNode&&n.parentNode.removeChild(n),r?yt(e,n.value,null,t):yt(e,n.textContent,n.innerHTML,t)}),50)}}(e,t)};var bt=function(e,t){this.slice=e,this.move=t},wt=a.mac?"altKey":"ctrlKey";for(var xt in Qe.dragstart=function(e,t){var r=e.mouseDown;if(r&&r.done(),t.dataTransfer){var o=e.state.selection,i=o.empty?null:e.posAtCoords(ot(t));if(i&&i.pos>=o.from&&i.pos<=(o instanceof n.NodeSelection?o.to-1:o.to));else if(r&&r.mightDrag)e.dispatch(e.state.tr.setSelection(n.NodeSelection.create(e.state.doc,r.mightDrag.pos)));else if(t.target&&1==t.target.nodeType){var a=e.docView.nearestDesc(t.target,!0);a&&a.node.type.spec.draggable&&a!=e.docView&&e.dispatch(e.state.tr.setSelection(n.NodeSelection.create(e.state.doc,a.posBefore)))}var s=e.state.selection.content(),l=Le(e,s),c=l.dom,h=l.text;t.dataTransfer.clearData(),t.dataTransfer.setData(vt?"Text":"text/html",c.innerHTML),t.dataTransfer.effectAllowed="copyMove",vt||t.dataTransfer.setData("text/plain",h),e.dragging=new bt(s,!t[wt])}},Qe.dragend=function(e){var t=e.dragging;window.setTimeout((function(){e.dragging==t&&(e.dragging=null)}),50)},et.dragover=et.dragenter=function(e,t){return t.preventDefault()},et.drop=function(e,t){var r=e.dragging;if(e.dragging=null,t.dataTransfer){var a=e.posAtCoords(ot(t));if(a){var s=e.state.doc.resolve(a.pos);if(s){var l=r&&r.slice;l?e.someProp("transformPasted",(function(e){l=e(l)})):l=Fe(e,t.dataTransfer.getData(vt?"Text":"text/plain"),vt?null:t.dataTransfer.getData("text/html"),!1,s);var c=r&&!t[wt];if(e.someProp("handleDrop",(function(r){return r(e,t,l||o.Slice.empty,c)})))t.preventDefault();else if(l){t.preventDefault();var h=l?(0,i.dropPoint)(e.state.doc,s.pos,l):s.pos;null==h&&(h=s.pos);var p=e.state.tr;c&&p.deleteSelection();var u=p.mapping.map(h),d=0==l.openStart&&0==l.openEnd&&1==l.content.childCount,f=p.doc;if(d?p.replaceRangeWith(u,u,l.content.firstChild):p.replaceRange(u,u,l),!p.doc.eq(f)){var m=p.doc.resolve(u);if(d&&n.NodeSelection.isSelectable(l.content.firstChild)&&m.nodeAfter&&m.nodeAfter.sameMarkup(l.content.firstChild))p.setSelection(new n.NodeSelection(m));else{var g=p.mapping.map(h);p.mapping.maps[p.mapping.maps.length-1].forEach((function(e,t,r,n){return g=n})),p.setSelection(Se(e,m,p.doc.resolve(g)))}e.focus(),e.dispatch(p.setMeta("uiEvent","drop"))}}}}}},Qe.focus=function(e){e.focused||(e.domObserver.stop(),e.dom.classList.add("ProseMirror-focused"),e.domObserver.start(),e.focused=!0,setTimeout((function(){e.docView&&e.hasFocus()&&!e.domObserver.currentSelection.eq(e.root.getSelection())&&me(e)}),20))},Qe.blur=function(e,t){e.focused&&(e.domObserver.stop(),e.dom.classList.remove("ProseMirror-focused"),e.domObserver.start(),t.relatedTarget&&e.dom.contains(t.relatedTarget)&&e.domObserver.currentSelection.set({}),e.focused=!1)},Qe.beforeinput=function(e,t){if(a.chrome&&a.android&&"deleteContentBackward"==t.inputType){var r=e.domChangeCount;setTimeout((function(){if(e.domChangeCount==r&&(e.dom.blur(),e.focus(),!e.someProp("handleKeyDown",(function(t){return t(e,S(8,"Backspace"))})))){var t=e.state.selection.$cursor;t&&t.pos>0&&e.dispatch(e.state.tr.delete(t.pos-1,t.pos).scrollIntoView())}}),50)}},et)Qe[xt]=et[xt];function St(e,t){if(e==t)return!0;for(var r in e)if(e[r]!==t[r])return!1;for(var n in t)if(!(n in e))return!1;return!0}var kt=function(e,t){this.spec=t||Nt,this.side=this.spec.side||0,this.toDOM=e};kt.prototype.map=function(e,t,r,n){var o=e.mapResult(t.from+n,this.side<0?-1:1),i=o.pos;return o.deleted?null:new At(i-r,i-r,this)},kt.prototype.valid=function(){return!0},kt.prototype.eq=function(e){return this==e||e instanceof kt&&(this.spec.key&&this.spec.key==e.spec.key||this.toDOM==e.toDOM&&St(this.spec,e.spec))};var Mt=function(e,t){this.spec=t||Nt,this.attrs=e};Mt.prototype.map=function(e,t,r,n){var o=e.map(t.from+n,this.spec.inclusiveStart?-1:1)-r,i=e.map(t.to+n,this.spec.inclusiveEnd?1:-1)-r;return o>=i?null:new At(o,i,this)},Mt.prototype.valid=function(e,t){return t.from<t.to},Mt.prototype.eq=function(e){return this==e||e instanceof Mt&&St(this.attrs,e.attrs)&&St(this.spec,e.spec)},Mt.is=function(e){return e.type instanceof Mt};var Tt=function(e,t){this.spec=t||Nt,this.attrs=e};Tt.prototype.map=function(e,t,r,n){var o=e.mapResult(t.from+n,1);if(o.deleted)return null;var i=e.mapResult(t.to+n,-1);return i.deleted||i.pos<=o.pos?null:new At(o.pos-r,i.pos-r,this)},Tt.prototype.valid=function(e,t){var r,n=e.content.findIndex(t.from),o=n.index,i=n.offset;return i==t.from&&!(r=e.child(o)).isText&&i+r.nodeSize==t.to},Tt.prototype.eq=function(e){return this==e||e instanceof Tt&&St(this.attrs,e.attrs)&&St(this.spec,e.spec)};var At=function(e,t,r){this.from=e,this.to=t,this.type=r},Ot={spec:{configurable:!0},inline:{configurable:!0}};At.prototype.copy=function(e,t){return new At(e,t,this.type)},At.prototype.eq=function(e,t){return void 0===t&&(t=0),this.type.eq(e.type)&&this.from+t==e.from&&this.to+t==e.to},At.prototype.map=function(e,t,r){return this.type.map(e,this,t,r)},At.widget=function(e,t,r){return new At(e,e,new kt(t,r))},At.inline=function(e,t,r,n){return new At(e,t,new Mt(r,n))},At.node=function(e,t,r,n){return new At(e,t,new Tt(r,n))},Ot.spec.get=function(){return this.type.spec},Ot.inline.get=function(){return this.type instanceof Mt},Object.defineProperties(At.prototype,Ot);var Ct=[],Nt={},zt=function(e,t){this.local=e&&e.length?e:Ct,this.children=t&&t.length?t:Ct};zt.create=function(e,t){return t.length?Pt(t,e,0,Nt):Et},zt.prototype.find=function(e,t,r){var n=[];return this.findInner(null==e?0:e,null==t?1e9:t,n,0,r),n},zt.prototype.findInner=function(e,t,r,n,o){for(var i=0;i<this.local.length;i++){var a=this.local[i];a.from<=t&&a.to>=e&&(!o||o(a.spec))&&r.push(a.copy(a.from+n,a.to+n))}for(var s=0;s<this.children.length;s+=3)if(this.children[s]<t&&this.children[s+1]>e){var l=this.children[s]+1;this.children[s+2].findInner(e-l,t-l,r,n+l,o)}},zt.prototype.map=function(e,t,r){return this==Et||0==e.maps.length?this:this.mapInner(e,t,0,0,r||Nt)},zt.prototype.mapInner=function(e,t,r,n,o){for(var i,a=0;a<this.local.length;a++){var s=this.local[a].map(e,r,n);s&&s.type.valid(t,s)?(i||(i=[])).push(s):o.onRemove&&o.onRemove(this.local[a].spec)}return this.children.length?function(e,t,r,n,o,i,a){for(var s=e.slice(),l=function(e,t,r,n){for(var a=0;a<s.length;a+=3){var l=s[a+1],c=void 0;-1==l||e>l+i||(t>=s[a]+i?s[a+1]=-1:r>=o&&(c=n-r-(t-e))&&(s[a]+=c,s[a+1]+=c))}},c=0;c<r.maps.length;c++)r.maps[c].forEach(l);for(var h=!1,p=0;p<s.length;p+=3)if(-1==s[p+1]){var u=r.map(e[p]+i),d=u-o;if(d<0||d>=n.content.size){h=!0;continue}var f=r.map(e[p+1]+i,-1)-o,m=n.content.findIndex(d),g=m.index,v=m.offset,y=n.maybeChild(g);if(y&&v==d&&v+y.nodeSize==f){var b=s[p+2].mapInner(r,y,u+1,e[p]+i+1,a);b!=Et?(s[p]=d,s[p+1]=f,s[p+2]=b):(s[p+1]=-2,h=!0)}else h=!0}if(h){var w=function(e,t,r,n,o,i,a){function s(e,t){for(var i=0;i<e.local.length;i++){var l=e.local[i].map(n,o,t);l?r.push(l):a.onRemove&&a.onRemove(e.local[i].spec)}for(var c=0;c<e.children.length;c+=3)s(e.children[c+2],e.children[c]+t+1)}for(var l=0;l<e.length;l+=3)-1==e[l+1]&&s(e[l+2],t[l]+i+1);return r}(s,e,t||[],r,o,i,a),x=Pt(w,n,0,a);t=x.local;for(var S=0;S<s.length;S+=3)s[S+1]<0&&(s.splice(S,3),S-=3);for(var k=0,M=0;k<x.children.length;k+=3){for(var T=x.children[k];M<s.length&&s[M]<T;)M+=3;s.splice(M,0,x.children[k],x.children[k+1],x.children[k+2])}}return new zt(t&&t.sort(_t),s)}(this.children,i,e,t,r,n,o):i?new zt(i.sort(_t)):Et},zt.prototype.add=function(e,t){return t.length?this==Et?zt.create(e,t):this.addInner(e,t,0):this},zt.prototype.addInner=function(e,t,r){var n,o=this,i=0;e.forEach((function(e,a){var s,l=a+r;if(s=Rt(t,e,l)){for(n||(n=o.children.slice());i<n.length&&n[i]<a;)i+=3;n[i]==a?n[i+2]=n[i+2].addInner(e,s,l+1):n.splice(i,0,a,a+e.nodeSize,Pt(s,e,l+1,Nt)),i+=3}}));for(var a=It(i?Bt(t):t,-r),s=0;s<a.length;s++)a[s].type.valid(e,a[s])||a.splice(s--,1);return new zt(a.length?this.local.concat(a).sort(_t):this.local,n||this.children)},zt.prototype.remove=function(e){return 0==e.length||this==Et?this:this.removeInner(e,0)},zt.prototype.removeInner=function(e,t){for(var r=this.children,n=this.local,o=0;o<r.length;o+=3){for(var i=void 0,a=r[o]+t,s=r[o+1]+t,l=0,c=void 0;l<e.length;l++)(c=e[l])&&c.from>a&&c.to<s&&(e[l]=null,(i||(i=[])).push(c));if(i){r==this.children&&(r=this.children.slice());var h=r[o+2].removeInner(i,a+1);h!=Et?r[o+2]=h:(r.splice(o,3),o-=3)}}if(n.length)for(var p=0,u=void 0;p<e.length;p++)if(u=e[p])for(var d=0;d<n.length;d++)n[d].eq(u,t)&&(n==this.local&&(n=this.local.slice()),n.splice(d--,1));return r==this.children&&n==this.local?this:n.length||r.length?new zt(n,r):Et},zt.prototype.forChild=function(e,t){if(this==Et)return this;if(t.isLeaf)return zt.empty;for(var r,n,o=0;o<this.children.length;o+=3)if(this.children[o]>=e){this.children[o]==e&&(r=this.children[o+2]);break}for(var i=e+1,a=i+t.content.size,s=0;s<this.local.length;s++){var l=this.local[s];if(l.from<a&&l.to>i&&l.type instanceof Mt){var c=Math.max(i,l.from)-i,h=Math.min(a,l.to)-i;c<h&&(n||(n=[])).push(l.copy(c,h))}}if(n){var p=new zt(n.sort(_t));return r?new Dt([p,r]):p}return r||Et},zt.prototype.eq=function(e){if(this==e)return!0;if(!(e instanceof zt)||this.local.length!=e.local.length||this.children.length!=e.children.length)return!1;for(var t=0;t<this.local.length;t++)if(!this.local[t].eq(e.local[t]))return!1;for(var r=0;r<this.children.length;r+=3)if(this.children[r]!=e.children[r]||this.children[r+1]!=e.children[r+1]||!this.children[r+2].eq(e.children[r+2]))return!1;return!0},zt.prototype.locals=function(e){return qt(this.localsInner(e))},zt.prototype.localsInner=function(e){if(this==Et)return Ct;if(e.inlineContent||!this.local.some(Mt.is))return this.local;for(var t=[],r=0;r<this.local.length;r++)this.local[r].type instanceof Mt||t.push(this.local[r]);return t};var Et=new zt;zt.empty=Et,zt.removeOverlap=qt;var Dt=function(e){this.members=e};function It(e,t){if(!t||!e.length)return e;for(var r=[],n=0;n<e.length;n++){var o=e[n];r.push(new At(o.from+t,o.to+t,o.type))}return r}function Rt(e,t,r){if(t.isLeaf)return null;for(var n=r+t.nodeSize,o=null,i=0,a=void 0;i<e.length;i++)(a=e[i])&&a.from>r&&a.to<n&&((o||(o=[])).push(a),e[i]=null);return o}function Bt(e){for(var t=[],r=0;r<e.length;r++)null!=e[r]&&t.push(e[r]);return t}function Pt(e,t,r,n){var o=[],i=!1;t.forEach((function(t,a){var s=Rt(e,t,a+r);if(s){i=!0;var l=Pt(s,t,r+a+1,n);l!=Et&&o.push(a,a+t.nodeSize,l)}}));for(var a=It(i?Bt(e):e,-r).sort(_t),s=0;s<a.length;s++)a[s].type.valid(t,a[s])||(n.onRemove&&n.onRemove(a[s].spec),a.splice(s--,1));return a.length||o.length?new zt(a,o):Et}function _t(e,t){return e.from-t.from||e.to-t.to}function qt(e){for(var t=e,r=0;r<t.length-1;r++){var n=t[r];if(n.from!=n.to)for(var o=r+1;o<t.length;o++){var i=t[o];if(i.from!=n.from){i.from<n.to&&(t==e&&(t=e.slice()),t[r]=n.copy(n.from,i.from),Lt(t,o,n.copy(i.from,n.to)));break}i.to!=n.to&&(t==e&&(t=e.slice()),t[o]=i.copy(i.from,n.to),Lt(t,o+1,i.copy(n.to,i.to)))}}return t}function Lt(e,t,r){for(;t<e.length&&_t(r,e[t])>0;)t++;e.splice(t,0,r)}function Ft(e){var t=[];return e.someProp("decorations",(function(r){var n=r(e.state);n&&n!=Et&&t.push(n)})),e.cursorWrapper&&t.push(zt.create(e.state.doc,[e.cursorWrapper.deco])),Dt.from(t)}Dt.prototype.map=function(e,t){var r=this.members.map((function(r){return r.map(e,t,Nt)}));return Dt.from(r)},Dt.prototype.forChild=function(e,t){if(t.isLeaf)return zt.empty;for(var r=[],n=0;n<this.members.length;n++){var o=this.members[n].forChild(e,t);o!=Et&&(o instanceof Dt?r=r.concat(o.members):r.push(o))}return Dt.from(r)},Dt.prototype.eq=function(e){if(!(e instanceof Dt)||e.members.length!=this.members.length)return!1;for(var t=0;t<this.members.length;t++)if(!this.members[t].eq(e.members[t]))return!1;return!0},Dt.prototype.locals=function(e){for(var t,r=!0,n=0;n<this.members.length;n++){var o=this.members[n].localsInner(e);if(o.length)if(t){r&&(t=t.slice(),r=!1);for(var i=0;i<o.length;i++)t.push(o[i])}else t=o}return t?qt(r?t:t.sort(_t)):Ct},Dt.from=function(e){switch(e.length){case 0:return Et;case 1:return e[0];default:return new Dt(e)}};var Vt=function(e,t){this._props=t,this.state=t.state,this.directPlugins=t.plugins||[],this.directPlugins.forEach(Gt),this.dispatch=this.dispatch.bind(this),this._root=null,this.focused=!1,this.trackWrites=null,this.dom=e&&e.mount||document.createElement("div"),e&&(e.appendChild?e.appendChild(this.dom):e.apply?e(this.dom):e.mount&&(this.mounted=!0)),this.editable=Wt(this),this.markCursor=null,this.cursorWrapper=null,jt(this),this.nodeViews=Kt(this),this.docView=X(this.state.doc,$t(this),Ft(this),this.dom,this),this.lastSelectedViewDesc=null,this.dragging=null,function(e){e.shiftKey=!1,e.mouseDown=null,e.lastKeyCode=null,e.lastKeyCodeTime=0,e.lastClick={time:0,x:0,y:0,type:""},e.lastSelectionOrigin=null,e.lastSelectionTime=0,e.lastIOSEnter=0,e.lastIOSEnterFallbackTimeout=null,e.lastAndroidDelete=0,e.composing=!1,e.composingTimeout=null,e.compositionNodes=[],e.compositionEndedAt=-2e8,e.domObserver=new Xe(e,(function(t,r,i,s){return function(e,t,r,i,s){if(t<0){var l=e.lastSelectionTime>Date.now()-50?e.lastSelectionOrigin:null,c=de(e,l);if(c&&!e.state.selection.eq(c)){var h=e.state.tr.setSelection(c);"pointer"==l?h.setMeta("pointer",!0):"key"==l&&h.scrollIntoView(),e.dispatch(h)}}else{var p=e.state.doc.resolve(t),u=p.sharedDepth(r);t=p.before(u+1),r=e.state.doc.resolve(r).after(u+1);var d=e.state.selection,f=function(e,t,r){var n=e.docView.parseRange(t,r),i=n.node,s=n.fromOffset,l=n.toOffset,c=n.from,h=n.to,p=e.root.getSelection(),u=null,d=p.anchorNode;if(d&&e.dom.contains(1==d.nodeType?d:d.parentNode)&&(u=[{node:d,offset:p.anchorOffset}],x(p)||u.push({node:p.focusNode,offset:p.focusOffset})),a.chrome&&8===e.lastKeyCode)for(var f=l;f>s;f--){var m=i.childNodes[f-1],g=m.pmViewDesc;if("BR"==m.nodeName&&!g){l=f;break}if(!g||g.size)break}var v=e.state.doc,y=e.someProp("domParser")||o.DOMParser.fromSchema(e.state.schema),b=v.resolve(c),w=null,S=y.parse(i,{topNode:b.parent,topMatch:b.parent.contentMatchAt(b.index()),topOpen:!0,from:s,to:l,preserveWhitespace:!b.parent.type.spec.code||"full",editableContent:!0,findPositions:u,ruleFromNode:Pe,context:b});if(u&&null!=u[0].pos){var k=u[0].pos,M=u[1]&&u[1].pos;null==M&&(M=k),w={anchor:k+c,head:M+c}}return{doc:S,sel:w,from:c,to:h}}(e,t,r);if(a.chrome&&e.cursorWrapper&&f.sel&&f.sel.anchor==e.cursorWrapper.deco.from){var m=e.cursorWrapper.deco.type.toDOM.nextSibling,g=m&&m.nodeValue?m.nodeValue.length:1;f.sel={anchor:f.sel.anchor+g,head:f.sel.anchor+g}}var v,y,b=e.state.doc,w=b.slice(f.from,f.to);8===e.lastKeyCode&&Date.now()-100<e.lastKeyCodeTime?(v=e.state.selection.to,y="end"):(v=e.state.selection.from,y="start"),e.lastKeyCode=null;var k=function(e,t,r,n,o){var i=e.findDiffStart(t,r);if(null==i)return null;var a=e.findDiffEnd(t,r+e.size,r+t.size),s=a.a,l=a.b;return"end"==o&&(n-=s+Math.max(0,i-Math.min(s,l))-i),s<i&&e.size<t.size?(l=(i-=n<=i&&n>=s?i-n:0)+(l-s),s=i):l<i&&(s=(i-=n<=i&&n>=l?i-n:0)+(s-l),l=i),{start:i,endA:s,endB:l}}(w.content,f.doc.content,f.from,v,y);if(!k){if(!(i&&d instanceof n.TextSelection&&!d.empty&&d.$head.sameParent(d.$anchor))||e.composing||f.sel&&f.sel.anchor!=f.sel.head){if((a.ios&&e.lastIOSEnter>Date.now()-225||a.android)&&s.some((function(e){return"DIV"==e.nodeName||"P"==e.nodeName}))&&e.someProp("handleKeyDown",(function(t){return t(e,S(13,"Enter"))})))return void(e.lastIOSEnter=0);if(f.sel){var M=_e(e,e.state.doc,f.sel);M&&!M.eq(e.state.selection)&&e.dispatch(e.state.tr.setSelection(M))}return}k={start:d.from,endA:d.to,endB:d.to}}e.domChangeCount++,e.state.selection.from<e.state.selection.to&&k.start==k.endB&&e.state.selection instanceof n.TextSelection&&(k.start>e.state.selection.from&&k.start<=e.state.selection.from+2?k.start=e.state.selection.from:k.endA<e.state.selection.to&&k.endA>=e.state.selection.to-2&&(k.endB+=e.state.selection.to-k.endA,k.endA=e.state.selection.to)),a.ie&&a.ie_version<=11&&k.endB==k.start+1&&k.endA==k.start&&k.start>f.from&&"  "==f.doc.textBetween(k.start-f.from-1,k.start-f.from+1)&&(k.start--,k.endA--,k.endB--);var T,A=f.doc.resolveNoCache(k.start-f.from),O=f.doc.resolveNoCache(k.endB-f.from),C=A.sameParent(O)&&A.parent.inlineContent;if((a.ios&&e.lastIOSEnter>Date.now()-225&&(!C||s.some((function(e){return"DIV"==e.nodeName||"P"==e.nodeName})))||!C&&A.pos<f.doc.content.size&&(T=n.Selection.findFrom(f.doc.resolve(A.pos+1),1,!0))&&T.head==O.pos)&&e.someProp("handleKeyDown",(function(t){return t(e,S(13,"Enter"))})))e.lastIOSEnter=0;else if(e.state.selection.anchor>k.start&&function(e,t,r,n,o){if(!n.parent.isTextblock||r-t<=o.pos-n.pos||qe(n,!0,!1)<o.pos)return!1;var i=e.resolve(t);if(i.parentOffset<i.parent.content.size||!i.parent.isTextblock)return!1;var a=e.resolve(qe(i,!0,!0));return!(!a.parent.isTextblock||a.pos>r||qe(a,!0,!1)<r)&&n.parent.content.cut(n.parentOffset).eq(a.parent.content)}(b,k.start,k.endA,A,O)&&e.someProp("handleKeyDown",(function(t){return t(e,S(8,"Backspace"))})))a.android&&a.chrome&&e.domObserver.suppressSelectionUpdates();else{a.chrome&&a.android&&k.toB==k.from&&(e.lastAndroidDelete=Date.now()),a.android&&!C&&A.start()!=O.start()&&0==O.parentOffset&&A.depth==O.depth&&f.sel&&f.sel.anchor==f.sel.head&&f.sel.head==k.endA&&(k.endB-=2,O=f.doc.resolveNoCache(k.endB-f.from),setTimeout((function(){e.someProp("handleKeyDown",(function(t){return t(e,S(13,"Enter"))}))}),20));var N,z,E,D,I=k.start,R=k.endA;if(C)if(A.pos==O.pos)a.ie&&a.ie_version<=11&&0==A.parentOffset&&(e.domObserver.suppressSelectionUpdates(),setTimeout((function(){return me(e)}),20)),N=e.state.tr.delete(I,R),z=b.resolve(k.start).marksAcross(b.resolve(k.endA));else if(k.endA==k.endB&&(D=b.resolve(k.start))&&(E=function(e,t){for(var r,n,i,a=e.firstChild.marks,s=t.firstChild.marks,l=a,c=s,h=0;h<s.length;h++)l=s[h].removeFromSet(l);for(var p=0;p<a.length;p++)c=a[p].removeFromSet(c);if(1==l.length&&0==c.length)n=l[0],r="add",i=function(e){return e.mark(n.addToSet(e.marks))};else{if(0!=l.length||1!=c.length)return null;n=c[0],r="remove",i=function(e){return e.mark(n.removeFromSet(e.marks))}}for(var u=[],d=0;d<t.childCount;d++)u.push(i(t.child(d)));if(o.Fragment.from(u).eq(e))return{mark:n,type:r}}(A.parent.content.cut(A.parentOffset,O.parentOffset),D.parent.content.cut(D.parentOffset,k.endA-D.start()))))N=e.state.tr,"add"==E.type?N.addMark(I,R,E.mark):N.removeMark(I,R,E.mark);else if(A.parent.child(A.index()).isText&&A.index()==O.index()-(O.textOffset?0:1)){var B=A.parent.textBetween(A.parentOffset,O.parentOffset);if(e.someProp("handleTextInput",(function(t){return t(e,I,R,B)})))return;N=e.state.tr.insertText(B,I,R)}if(N||(N=e.state.tr.replace(I,R,f.doc.slice(k.start-f.from,k.endB-f.from))),f.sel){var P=_e(e,N.doc,f.sel);P&&!(a.chrome&&a.android&&e.composing&&P.empty&&(k.start!=k.endB||e.lastAndroidDelete<Date.now()-100)&&(P.head==I||P.head==N.mapping.map(R)-1)||a.ie&&P.empty&&P.head==I)&&N.setSelection(P)}z&&N.ensureMarks(z),e.dispatch(N.scrollIntoView())}}}(e,t,r,i,s)})),e.domObserver.start(),e.domChangeCount=0,e.eventHandlers=Object.create(null);var t=function(t){var r=Qe[t];e.dom.addEventListener(t,e.eventHandlers[t]=function(t){!function(e,t){if(!t.bubbles)return!0;if(t.defaultPrevented)return!1;for(var r=t.target;r!=e.dom;r=r.parentNode)if(!r||11==r.nodeType||r.pmViewDesc&&r.pmViewDesc.stopEvent(t))return!1;return!0}(e,t)||nt(e,t)||!e.editable&&t.type in et||r(e,t)})};for(var r in Qe)t(r);a.safari&&e.dom.addEventListener("input",(function(){return null})),rt(e)}(this),this.prevDirectPlugins=[],this.pluginViews=[],this.updatePluginViews()},Ht={props:{configurable:!0},root:{configurable:!0}};function $t(e){var t=Object.create(null);return t.class="ProseMirror",t.contenteditable=String(e.editable),t.translate="no",e.someProp("attributes",(function(r){if("function"==typeof r&&(r=r(e.state)),r)for(var n in r)"class"==n?t.class+=" "+r[n]:t[n]||"contenteditable"==n||"nodeName"==n||(t[n]=String(r[n]))})),[At.node(0,e.state.doc.content.size,t)]}function jt(e){if(e.markCursor){var t=document.createElement("img");t.className="ProseMirror-separator",t.setAttribute("mark-placeholder","true"),e.cursorWrapper={dom:t,deco:At.widget(e.state.selection.head,t,{raw:!0,marks:e.markCursor})}}else e.cursorWrapper=null}function Wt(e){return!e.someProp("editable",(function(t){return!1===t(e.state)}))}function Kt(e){var t={};return e.someProp("nodeViews",(function(e){for(var r in e)Object.prototype.hasOwnProperty.call(t,r)||(t[r]=e[r])})),t}function Gt(e){if(e.spec.state||e.spec.filterTransaction||e.spec.appendTransaction)throw new RangeError("Plugins passed directly to the view must not have a state component")}Ht.props.get=function(){if(this._props.state!=this.state){var e=this._props;for(var t in this._props={},e)this._props[t]=e[t];this._props.state=this.state}return this._props},Vt.prototype.update=function(e){e.handleDOMEvents!=this._props.handleDOMEvents&&rt(this),this._props=e,e.plugins&&(e.plugins.forEach(Gt),this.directPlugins=e.plugins),this.updateStateInner(e.state,!0)},Vt.prototype.setProps=function(e){var t={};for(var r in this._props)t[r]=this._props[r];for(var n in t.state=this.state,e)t[n]=e[n];this.update(t)},Vt.prototype.updateState=function(e){this.updateStateInner(e,this.state.plugins!=e.plugins)},Vt.prototype.updateStateInner=function(e,t){var r=this,o=this.state,i=!1,s=!1;if(e.storedMarks&&this.composing&&(mt(this),s=!0),this.state=e,t){var l=Kt(this);(function(e,t){var r=0,n=0;for(var o in e){if(e[o]!=t[o])return!0;r++}for(var i in t)n++;return r!=n})(l,this.nodeViews)&&(this.nodeViews=l,i=!0),rt(this)}this.editable=Wt(this),jt(this);var c=Ft(this),h=$t(this),p=t?"reset":e.scrollToSelection>o.scrollToSelection?"to selection":"preserve",u=i||!this.docView.matchesNode(e.doc,h,c);!u&&e.selection.eq(o.selection)||(s=!0);var d,f,m,v,y,b,w,x,S,k,M="preserve"==p&&s&&null==this.dom.style.overflowAnchor&&function(e){for(var t,r,n=e.dom.getBoundingClientRect(),o=Math.max(0,n.top),i=(n.left+n.right)/2,a=o+1;a<Math.min(innerHeight,n.bottom);a+=5){var s=e.root.elementFromPoint(i,a);if(s!=e.dom&&e.dom.contains(s)){var l=s.getBoundingClientRect();if(l.top>=o-20){t=s,r=l.top;break}}}return{refDOM:t,refTop:r,stack:O(e.dom)}}(this);if(s){this.domObserver.stop();var T=u&&(a.ie||a.chrome)&&!this.composing&&!o.selection.empty&&!e.selection.empty&&(v=o.selection,y=e.selection,b=Math.min(v.$anchor.sharedDepth(v.head),y.$anchor.sharedDepth(y.head)),v.$anchor.start(b)!=y.$anchor.start(b));if(u){var N=a.chrome?this.trackWrites=this.root.getSelection().focusNode:null;!i&&this.docView.update(e.doc,h,c,this)||(this.docView.updateOuterDeco([]),this.docView.destroy(),this.docView=X(e.doc,h,c,this.dom,this)),N&&!this.trackWrites&&(T=!0)}T||!(this.mouseDown&&this.domObserver.currentSelection.eq(this.root.getSelection())&&(d=this,f=d.docView.domFromPos(d.state.selection.anchor,0),m=d.root.getSelection(),g(f.node,f.offset,m.anchorNode,m.anchorOffset)))?me(this,T):(we(this,e.selection),this.domObserver.setCurSelection()),this.domObserver.start()}if(this.updatePluginViews(o),"reset"==p)this.dom.scrollTop=0;else if("to selection"==p){var z=this.root.getSelection().focusNode;this.someProp("handleScrollToSelection",(function(e){return e(r)}))||(e.selection instanceof n.NodeSelection?A(this,this.docView.domAfterPos(e.selection.from).getBoundingClientRect(),z):A(this,this.coordsAtPos(e.selection.head,1),z))}else M&&(x=(w=M).refDOM,S=w.refTop,C(w.stack,0==(k=x?x.getBoundingClientRect().top:0)?0:k-S))},Vt.prototype.destroyPluginViews=function(){for(var e;e=this.pluginViews.pop();)e.destroy&&e.destroy()},Vt.prototype.updatePluginViews=function(e){if(e&&e.plugins==this.state.plugins&&this.directPlugins==this.prevDirectPlugins)for(var t=0;t<this.pluginViews.length;t++){var r=this.pluginViews[t];r.update&&r.update(this,e)}else{this.prevDirectPlugins=this.directPlugins,this.destroyPluginViews();for(var n=0;n<this.directPlugins.length;n++){var o=this.directPlugins[n];o.spec.view&&this.pluginViews.push(o.spec.view(this))}for(var i=0;i<this.state.plugins.length;i++){var a=this.state.plugins[i];a.spec.view&&this.pluginViews.push(a.spec.view(this))}}},Vt.prototype.someProp=function(e,t){var r,n=this._props&&this._props[e];if(null!=n&&(r=t?t(n):n))return r;for(var o=0;o<this.directPlugins.length;o++){var i=this.directPlugins[o].props[e];if(null!=i&&(r=t?t(i):i))return r}var a=this.state.plugins;if(a)for(var s=0;s<a.length;s++){var l=a[s].props[e];if(null!=l&&(r=t?t(l):l))return r}},Vt.prototype.hasFocus=function(){return this.root.activeElement==this.dom},Vt.prototype.focus=function(){this.domObserver.stop(),this.editable&&function(e){if(e.setActive)return e.setActive();if(N)return e.focus(N);var t=O(e);e.focus(null==N?{get preventScroll(){return N={preventScroll:!0},!0}}:void 0),N||(N=!1,C(t,0))}(this.dom),me(this),this.domObserver.start()},Ht.root.get=function(){var e=this._root;if(null==e)for(var t=this.dom.parentNode;t;t=t.parentNode)if(9==t.nodeType||11==t.nodeType&&t.host)return t.getSelection||(Object.getPrototypeOf(t).getSelection=function(){return document.getSelection()}),this._root=t;return e||document},Vt.prototype.posAtCoords=function(e){return I(this,e)},Vt.prototype.coordsAtPos=function(e,t){return void 0===t&&(t=1),P(this,e,t)},Vt.prototype.domAtPos=function(e,t){return void 0===t&&(t=0),this.docView.domFromPos(e,t)},Vt.prototype.nodeDOM=function(e){var t=this.docView.descAt(e);return t?t.nodeDOM:null},Vt.prototype.posAtDOM=function(e,t,r){void 0===r&&(r=-1);var n=this.docView.posFromDOM(e,t,r);if(null==n)throw new RangeError("DOM position not inside the editor");return n},Vt.prototype.endOfTextblock=function(e,t){return function(e,t,r){return V==t&&H==r?$:(V=t,H=r,$="up"==r||"down"==r?function(e,t,r){var n=t.selection,o="up"==r?n.$from:n.$to;return L(e,t,(function(){for(var t=e.docView.domFromPos(o.pos,"up"==r?-1:1).node;;){var n=e.docView.nearestDesc(t,!0);if(!n)break;if(n.node.isBlock){t=n.dom;break}t=n.dom.parentNode}for(var i=P(e,o.pos,1),a=t.firstChild;a;a=a.nextSibling){var s=void 0;if(1==a.nodeType)s=a.getClientRects();else{if(3!=a.nodeType)continue;s=m(a,0,a.nodeValue.length).getClientRects()}for(var l=0;l<s.length;l++){var c=s[l];if(c.bottom>c.top+1&&("up"==r?i.top-c.top>2*(c.bottom-i.top):c.bottom-i.bottom>2*(i.bottom-c.top)))return!1}}return!0}))}(e,t,r):function(e,t,r){var n=t.selection.$head;if(!n.parent.isTextblock)return!1;var o=n.parentOffset,i=!o,a=o==n.parent.content.size,s=e.root.getSelection();return F.test(n.parent.textContent)&&s.modify?L(e,t,(function(){var t=s.getRangeAt(0),o=s.focusNode,i=s.focusOffset,a=s.caretBidiLevel;s.modify("move",r,"character");var l=!(n.depth?e.docView.domAfterPos(n.before()):e.dom).contains(1==s.focusNode.nodeType?s.focusNode:s.focusNode.parentNode)||o==s.focusNode&&i==s.focusOffset;return s.removeAllRanges(),s.addRange(t),null!=a&&(s.caretBidiLevel=a),l})):"left"==r||"backward"==r?i:a}(e,t,r))}(this,t||this.state,e)},Vt.prototype.destroy=function(){this.docView&&(function(e){for(var t in e.domObserver.stop(),e.eventHandlers)e.dom.removeEventListener(t,e.eventHandlers[t]);clearTimeout(e.composingTimeout),clearTimeout(e.lastIOSEnterFallbackTimeout)}(this),this.destroyPluginViews(),this.mounted?(this.docView.update(this.state.doc,[],Ft(this),this),this.dom.textContent=""):this.dom.parentNode&&this.dom.parentNode.removeChild(this.dom),this.docView.destroy(),this.docView=null)},Vt.prototype.dispatchEvent=function(e){return function(e,t){nt(e,t)||!Qe[t.type]||!e.editable&&t.type in et||Qe[t.type](e,t)}(this,e)},Vt.prototype.dispatch=function(e){var t=this._props.dispatchTransaction;t?t.call(this,e):this.updateState(this.state.apply(e))},Object.defineProperties(Vt.prototype,Ht)}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(483)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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UyxFQUFHLEVBQUcsUUFDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsR0FDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsS0FDcEIsSUFBTyxDQUFDLEVBQUcsS0FBTyxLQUFPLEVBQUcsS0FDNUIsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsS0FBTyxFQUFHLEVBQUcsU0FDeEIsSUFBTyxDQUFDLEVBQUcsR0FBSyxFQUFHLEVBQUcsU0FDdEIsSUFBTyxDQUFDLEVBQUcsS0FBTyxFQUFHLEVBQUcsU0FDeEIsSUFBTyxDQUFDLEVBQUcsR0FBSyxFQUFHLEVBQUcsU0FDdEIsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDaEMsS0FBUSxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsSUFDbEMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsSUFDbEMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsR0FDbEMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsR0FDbEMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsR0FDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsR0FDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsR0FDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsR0FDM0IsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDbEMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsR0FDbEMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsR0FDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsR0FDM0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE1BQVEsS0FBTyxFQUFHLEVBQUcsR0FDOUIsS0FBUSxDQUFDLE1BQVEsS0FBTyxFQUFHLEVBQUcsR0FDOUIsS0FBUSxDQUFDLE1BQVEsS0FBTyxFQUFHLEVBQUcsR0FDOUIsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE1BQVEsS0FBTyxFQUFHLEVBQUcsR0FDOUIsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsR0FDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsR0FDakMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsR0FDbEMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsR0FDbEMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsR0FDbEMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsR0FDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsR0FDakMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsR0FDbEMsS0FBUSxFQUFFLEtBQU8sS0FBTyxFQUFHLEVBQUcsT0FDOUIsS0FBUSxFQUFFLEtBQU8sS0FBTyxFQUFHLEVBQUcsT0FDOUIsS0FBUSxDQUFDLEVBQUcsS0FBTyxFQUFHLEVBQUcsSUFDekIsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsSUFDbEMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsSUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsSUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE1BQVEsS0FBTyxFQUFHLEVBQUcsUUFDOUIsS0FBUSxDQUFDLE1BQVEsS0FBTyxFQUFHLEVBQUcsUUFDOUIsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsS0FBTyxFQUFHLEVBQUcsUUFDekIsS0FBUSxDQUFDLEVBQUcsS0FBTyxFQUFHLEVBQUcsUUFDekIsS0FBUSxDQUFDLEVBQUcsS0FBTyxFQUFHLEVBQUcsUUFDekIsS0FBUSxDQUFDLEVBQUcsS0FBTyxFQUFHLEVBQUcsUUFDekIsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsU0FDM0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLE1BQVEsTUFBUSxFQUFHLEVBQUcsUUFDL0IsS0FBUSxDQUFDLE1BQVEsTUFBUSxFQUFHLEVBQUcsUUFDL0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDM0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsS0FBTyxFQUFHLEVBQUcsUUFDekIsS0FBUSxDQUFDLEVBQUcsS0FBTyxFQUFHLEVBQUcsUUFDekIsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsTUFBUyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDNUIsTUFBUyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDNUIsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FFcEMsc0JBQXVCLENBQ3JCLEdBQU0sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEtBQ25CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxPQUFTLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxPQUFTLFFBQ3JDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxPQUFTLFFBQ3JDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxPQUFTLFFBQ3JDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxPQUFTLFFBQ3JDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxPQUFTLFFBQ3JDLEdBQU0sQ0FBQyxPQUFTLE9BQVMsTUFBUSxPQUFTLFFBQzFDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxPQUFTLFFBQ3JDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxPQUFTLE9BQVMsT0FBUyxPQUFTLFFBQzNDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxPQUFTLFFBQ3JDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxPQUFTLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxPQUFTLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxPQUFTLFFBQ3JDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxPQUFTLFFBQ3JDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxPQUFTLFFBQ3JDLEdBQU0sQ0FBQyxPQUFTLE9BQVMsRUFBRyxPQUFTLFFBQ3JDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxPQUFTLE9BQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsS0FBTyxPQUFTLFFBQ25DLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxPQUFTLFFBQ3JDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxPQUFTLFFBQ3JDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxPQUFTLE9BQ3JDLEdBQU0sQ0FBQyxPQUFTLE9BQVMsT0FBUyxPQUFTLFFBQzNDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxPQUFTLFFBQ3JDLElBQU8sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLE1BRXRCLGtCQUFtQixDQUNqQixHQUFNLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxLQUNuQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLEVBQUUsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUNoQyxHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxPQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxPQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxTQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxTQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxPQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxPQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxPQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxLQUNwQixLQUFRLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMzQixLQUFRLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMzQixNQUFTLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUM1QixNQUFTLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxPQUM1QixNQUFTLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUNsQyxNQUFTLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUNsQyxNQUFTLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUNsQyxNQUFTLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUM1QixNQUFTLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUM1QixNQUFTLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxTQUU5QixZQUFhLENBQ1gsR0FBTSxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsS0FDbkIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsS0FDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDL0IsR0FBTSxDQUFDLE9BQVMsSUFBTSxFQUFHLEVBQUcsTUFDNUIsR0FBTSxDQUFDLE9BQVMsSUFBTSxFQUFHLEVBQUcsUUFDNUIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsSUFBTSxFQUFHLEVBQUcsTUFDdEIsR0FBTSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDL0IsR0FBTSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsTUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDL0IsR0FBTSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDL0IsR0FBTSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDaEMsR0FBTSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsU0FDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsT0FDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsU0FDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsTUFDekIsR0FBTSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDekIsR0FBTSxDQUFDLElBQU0sT0FBUyxPQUFTLEVBQUcsTUFDbEMsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDaEMsSUFBTyxDQUFDLE9BQVMsT0FBUyxPQUFTLEVBQUcsTUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDMUIsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDaEMsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLE9BQVMsT0FBUyxPQUFTLEVBQUcsUUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsTUFDMUIsSUFBTyxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsTUFDMUIsSUFBTyxDQUFDLElBQU0sT0FBUyxFQUFHLEVBQUcsTUFDN0IsSUFBTyxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsS0FDcEIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDaEMsSUFBTyxDQUFDLE9BQVMsRUFBRyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsU0FDMUIsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDaEMsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDaEMsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsTUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsU0FDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsS0FBUSxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsTUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsU0FDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsTUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDbEMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsTUFDakMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDbEMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsTUFDakMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDbEMsS0FBUSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsTUFDM0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDakMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDbEMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDbEMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDbEMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDbEMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDbEMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDbEMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDbEMsS0FBUSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLE9BQVMsSUFBTSxFQUFHLEVBQUcsTUFDOUIsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsTUFDM0IsS0FBUSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsTUFDM0IsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsTUFDbEMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsTUFDbEMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsTUFDbEMsS0FBUSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsU0FDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsTUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxPQUFTLEVBQUcsUUFDdkMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsTUFDbEMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsTUFDbEMsS0FBUSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDM0IsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDbEMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDbEMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDakMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsTUFDbEMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDakMsS0FBUSxFQUFFLE9BQVMsT0FBUyxFQUFHLEVBQUcsTUFDbEMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsU0FDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLEVBQUcsSUFBTSxFQUFHLEVBQUcsUUFDeEIsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDakMsTUFBUyxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDNUIsTUFBUyxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDNUIsTUFBUyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDNUIsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsSUFFcEMsa0JBQW1CLENBQ2pCLEdBQU0sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEtBQ25CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxPQUFTLE9BQVMsT0FBUyxFQUFHLFFBQ3JDLEdBQU0sQ0FBQyxPQUFTLElBQU0sT0FBUyxFQUFHLFFBQ2xDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxJQUFNLElBQU0sT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxJQUFNLElBQU0sT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLElBQU0sT0FBUyxFQUFHLFFBQzVCLEdBQU0sQ0FBQyxPQUFTLE9BQVMsT0FBUyxFQUFHLFFBQ3JDLEdBQU0sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxJQUFNLElBQU0sT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxPQUFTLE9BQVMsT0FBUyxFQUFHLFFBQ3JDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxPQUFTLE9BQVMsT0FBUyxFQUFHLFFBQ3JDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxPQUFTLE9BQVMsT0FBUyxFQUFHLFFBQ3JDLEdBQU0sRUFBRSxPQUFTLE9BQVMsT0FBUyxFQUFHLFFBQ3RDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsTUFBUSxFQUFHLFFBQzlCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLE9BQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsS0FBTyxFQUFHLFFBQzdCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFNBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLE9BQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsTUFBUSxFQUFHLFFBQzlCLEdBQU0sQ0FBQyxPQUFTLE9BQVMsT0FBUyxFQUFHLFFBQ3JDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLE9BQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFNBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxJQUFNLElBQU0sTUFBUSxFQUFHLFFBQzlCLEdBQU0sQ0FBQyxJQUFNLElBQU0sT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxJQUFNLE9BQVMsT0FBUyxFQUFHLFFBQ2xDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsS0FBTyxFQUFHLFFBQzlCLElBQU8sQ0FBQyxPQUFTLE9BQVMsT0FBUyxFQUFHLElBQ3RDLElBQU8sQ0FBQyxPQUFTLE9BQVMsS0FBTyxFQUFHLFFBQ3BDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxPQUFTLE9BQVMsTUFBUSxFQUFHLFFBQ3JDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxPQUFTLE9BQVMsT0FBUyxFQUFHLFFBQ3RDLElBQU8sQ0FBQyxPQUFTLE9BQVMsS0FBTyxFQUFHLFFBQ3BDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLE1BQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxPQUFTLE9BQVMsS0FBTyxFQUFHLFFBQ3BDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxJQUFNLE9BQVMsT0FBUyxFQUFHLFFBQ25DLElBQU8sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEtBQ3BCLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxPQUFTLEVBQUcsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFNBQ2hDLElBQU8sQ0FBQyxPQUFTLE9BQVMsT0FBUyxFQUFHLFFBQ3RDLElBQU8sQ0FBQyxPQUFTLE9BQVMsT0FBUyxFQUFHLE1BQ3RDLElBQU8sQ0FBQyxFQUFHLE9BQVMsS0FBTyxFQUFHLFFBQzlCLElBQU8sQ0FBQyxPQUFTLE9BQVMsT0FBUyxFQUFHLFFBQ3RDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFNBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsS0FBTyxFQUFHLFFBQzlCLElBQU8sQ0FBQyxPQUFTLE9BQVMsT0FBUyxFQUFHLE1BQ3RDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLE9BQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsTUFBUSxFQUFHLFFBQy9CLEtBQVEsQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFNBQ2pDLEtBQVEsQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFNBRW5DLGNBQWUsQ0FDYixHQUFNLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxLQUNuQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUNyQyxHQUFNLENBQUMsT0FBUyxJQUFNLE9BQVMsRUFBRyxRQUNsQyxHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsSUFBTSxJQUFNLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsSUFBTSxJQUFNLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxJQUFNLE9BQVMsRUFBRyxRQUM1QixHQUFNLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUNyQyxHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsSUFBTSxJQUFNLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUNyQyxHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUNyQyxHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE1BQVEsRUFBRyxRQUM5QixHQUFNLENBQUMsT0FBUyxPQUFTLE1BQVEsRUFBRyxRQUNwQyxHQUFNLEVBQUUsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxHQUFNLENBQUMsRUFBRyxPQUFTLE1BQVEsRUFBRyxRQUM5QixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxNQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxNQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUNyQyxHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsSUFBTSxJQUFNLE1BQVEsRUFBRyxRQUM5QixHQUFNLENBQUMsSUFBTSxJQUFNLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsSUFBTSxPQUFTLE9BQVMsRUFBRyxRQUNsQyxHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxLQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxLQUMvQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxLQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxLQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE1BQVEsRUFBRyxRQUMvQixJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxLQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxLQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxLQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsSUFBTSxPQUFTLE9BQVMsRUFBRyxRQUNuQyxJQUFPLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxLQUNwQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsT0FBUyxFQUFHLEVBQUcsRUFBRyxLQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE1BQVEsRUFBRyxRQUMvQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxLQUFRLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNqQyxLQUFRLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxTQUNqQyxLQUFRLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNqQyxLQUFRLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNqQyxLQUFRLENBQUMsRUFBRyxPQUFTLE1BQVEsRUFBRyxRQUNoQyxLQUFRLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNqQyxLQUFRLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxTQUU3QixlQUFnQixDQUNkLEdBQU0sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEtBQ25CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQ3pCLEdBQU0sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLElBQzVCLEdBQU0sQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzVCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLElBQU0sRUFBRyxFQUFHLElBQ3RCLEdBQU0sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLElBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxNQUFRLE1BQVEsRUFBRyxFQUFHLFFBQzdCLEdBQU0sRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2hDLEdBQU0sQ0FBQyxNQUFRLE1BQVEsRUFBRyxFQUFHLFFBQzdCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLE1BQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLEtBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFNBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsS0FBTyxFQUFHLEtBQzdCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLElBQ3pCLEdBQU0sQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQ3pCLEdBQU0sQ0FBQyxJQUFNLE9BQVMsT0FBUyxFQUFHLElBQ2xDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxPQUFTLE9BQVMsT0FBUyxFQUFHLElBQ3RDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQzFCLElBQU8sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxPQUFTLE9BQVMsT0FBUyxFQUFHLFFBQ3RDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLElBQzFCLElBQU8sQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLElBQzFCLElBQU8sQ0FBQyxJQUFNLE9BQVMsRUFBRyxFQUFHLElBQzdCLElBQU8sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEtBQ3BCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQzFCLElBQU8sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxPQUFTLEVBQUcsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLElBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFNBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLE1BQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLElBQ2pDLEtBQVEsQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLEdBQ2pDLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQzNCLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxFQUFHLEtBQU8sRUFBRyxFQUFHLE9BQ3pCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLE1BQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLElBQ2pDLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxPQUFTLFFBQ2pDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxPQUFTLFFBQ3ZDLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLEdBQ2xDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLElBQ2pDLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLEdBQ2xDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLElBQ2pDLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLEdBQ2xDLEtBQVEsQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLElBQzNCLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLEdBQ2pDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLEdBQ2pDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLEdBQ2pDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLEdBQ2pDLEtBQVEsQ0FBQyxLQUFPLEtBQU8sRUFBRyxFQUFHLEdBQzdCLEtBQVEsQ0FBQyxLQUFPLEtBQU8sRUFBRyxFQUFHLE9BQzdCLEtBQVEsQ0FBQyxLQUFPLEtBQU8sRUFBRyxFQUFHLE9BQzdCLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLEdBQ2xDLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLEdBQ2xDLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLEdBQ2xDLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLEdBQ2xDLEtBQVEsQ0FBQyxLQUFPLEtBQU8sRUFBRyxFQUFHLEdBQzdCLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLEdBQ2xDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLEdBQ2xDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLEdBQ2xDLEtBQVEsQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsT0FBUyxPQUFTLE9BQ3ZDLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLElBQzlCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxNQUFRLE1BQVEsRUFBRyxFQUFHLFFBQy9CLEtBQVEsQ0FBQyxNQUFRLE1BQVEsRUFBRyxFQUFHLFFBQy9CLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLElBQzNCLEtBQVEsQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLElBQzNCLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLElBQ2xDLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLElBQ2xDLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLElBQ2xDLEtBQVEsQ0FBQyxHQUFLLEdBQUssRUFBRyxFQUFHLFFBQ3pCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEdBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLElBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxPQUFTLE9BQVMsT0FBUyxFQUFHLFFBQ3ZDLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2xDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2xDLEtBQVEsRUFBRSxLQUFPLEtBQU8sRUFBRyxFQUFHLEdBQzlCLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2xDLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2xDLEtBQVEsRUFBRSxLQUFPLEtBQU8sRUFBRyxFQUFHLE1BQzlCLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2xDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxNQUFRLE1BQVEsRUFBRyxFQUFHLEdBQy9CLEtBQVEsQ0FBQyxNQUFRLE1BQVEsRUFBRyxFQUFHLEdBQy9CLEtBQVEsQ0FBQyxNQUFRLE1BQVEsRUFBRyxFQUFHLFFBQy9CLEtBQVEsQ0FBQyxNQUFRLE1BQVEsRUFBRyxFQUFHLFFBQy9CLEtBQVEsQ0FBQyxNQUFRLE1BQVEsRUFBRyxFQUFHLFFBQy9CLEtBQVEsQ0FBQyxNQUFRLE1BQVEsRUFBRyxFQUFHLFFBQy9CLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxLQUFPLElBQU0sRUFBRyxFQUFHLE1BQzVCLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLElBQ2xDLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2xDLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLElBQ2xDLEtBQVEsQ0FBQyxLQUFPLEtBQU8sRUFBRyxFQUFHLElBQzdCLEtBQVEsQ0FBQyxJQUFNLEtBQU8sRUFBRyxFQUFHLE1BQzVCLEtBQVEsRUFBRSxJQUFNLEtBQU8sRUFBRyxFQUFHLE9BQzdCLEtBQVEsRUFBRSxHQUFLLEtBQU8sRUFBRyxFQUFHLE9BQzVCLEtBQVEsQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLFFBQzNCLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLEdBQ2xDLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLEdBQ2xDLEtBQVEsQ0FBQyxLQUFPLEtBQU8sRUFBRyxFQUFHLE1BQzdCLEtBQVEsQ0FBQyxLQUFPLEtBQU8sRUFBRyxFQUFHLE1BQzdCLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLElBQ2xDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLElBQ2xDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLEdBQ2pDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxFQUFHLElBQU0sRUFBRyxFQUFHLFFBQ3hCLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLEtBQVEsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2pDLE1BQVMsQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLFFBQzVCLE1BQVMsQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLFFBQzVCLE1BQVMsQ0FBQyxLQUFPLEtBQU8sRUFBRyxFQUFHLE1BQzlCLE1BQVMsQ0FBQyxLQUFPLEtBQU8sRUFBRyxFQUFHLE1BQzlCLE1BQVMsQ0FBQyxLQUFPLEtBQU8sRUFBRyxFQUFHLE9BQzlCLE1BQVMsQ0FBQyxLQUFPLEtBQU8sRUFBRyxFQUFHLE9BQzlCLE1BQVMsQ0FBQyxLQUFPLEtBQU8sRUFBRyxFQUFHLE9BQzlCLE1BQVMsQ0FBQyxLQUFPLEtBQU8sRUFBRyxFQUFHLE9BQzlCLE1BQVMsQ0FBQyxLQUFPLEtBQU8sRUFBRyxFQUFHLE9BQzlCLE1BQVMsQ0FBQyxLQUFPLEtBQU8sRUFBRyxFQUFHLE9BQzlCLE1BQVMsQ0FBQyxLQUFPLEtBQU8sRUFBRyxFQUFHLE9BQzlCLE1BQVMsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQzVCLE1BQVMsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2xDLE1BQVMsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2xDLE1BQVMsQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLElBRXBDLGtCQUFtQixDQUNqQixHQUFNLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxLQUNuQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxPQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxTQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxTQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxPQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxPQUMxQixJQUFPLENBQUMsT0FBUyxPQUFTLE1BQVEsRUFBRyxRQUNyQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxPQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE1BQVEsRUFBRyxRQUMvQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxPQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxLQUNwQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxPQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxJQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxPQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxPQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxRQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxPQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxNQUNoQyxLQUFRLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxPQUNqQyxLQUFRLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMzQixNQUFTLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUM1QixNQUFTLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxTQUVwQyxjQUFlLENBQ2IsR0FBTSxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsS0FDbkIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsSUFDL0IsR0FBTSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsSUFDL0IsR0FBTSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsSUFDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsSUFDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsSUFDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsS0FDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsT0FDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsUUFDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsUUFDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDckMsR0FBTSxDQUFDLE9BQVMsT0FBUyxFQUFHLE9BQVMsUUFDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsT0FDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDckMsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsUUFDL0IsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsUUFDaEMsSUFBTyxDQUFDLE9BQVMsT0FBUyxPQUFTLE9BQVMsUUFDNUMsSUFBTyxDQUFDLE9BQVMsT0FBUyxPQUFTLE9BQVMsUUFDNUMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLE9BQVMsT0FBUyxPQUFTLEVBQUcsUUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsT0FDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsUUFDaEMsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLE9BQVMsUUFDdEMsSUFBTyxDQUFDLE9BQVMsT0FBUyxPQUFTLE9BQVMsUUFDNUMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsUUFDaEMsSUFBTyxDQUFDLE9BQVMsT0FBUyxPQUFTLE9BQVMsUUFDNUMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDdEMsSUFBTyxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsS0FDcEIsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxJQUFNLE9BQVMsUUFDbkMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsT0FDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxNQUFRLE9BQVMsT0FDckMsSUFBTyxDQUFDLE9BQVMsT0FBUyxPQUFTLE9BQVMsUUFDNUMsSUFBTyxDQUFDLE9BQVMsT0FBUyxPQUFTLEVBQUcsUUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsUUFDaEMsSUFBTyxDQUFDLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FDNUMsSUFBTyxDQUFDLE9BQVMsT0FBUyxPQUFTLE9BQVMsUUFDNUMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLE9BQVMsUUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDdEMsSUFBTyxDQUFDLE9BQVMsT0FBUyxPQUFTLE9BQVMsT0FDNUMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDaEMsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLE9BQVMsUUFDdEMsSUFBTyxDQUFDLE9BQVMsT0FBUyxPQUFTLE9BQVMsUUFDNUMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxNQUFRLE9BQVMsUUFDckMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLE9BQVMsUUFDdEMsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLE9BQVMsUUFDdEMsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLE9BQVMsUUFDdEMsSUFBTyxDQUFDLE9BQVMsT0FBUyxPQUFTLE9BQVMsUUFDNUMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsUUFDaEMsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLE9BQVMsUUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDaEMsS0FBUSxDQUFDLE9BQVMsT0FBUyxFQUFHLE9BQVMsUUFDdkMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsT0FDakMsTUFBUyxDQUFDLEVBQUcsT0FBUyxFQUFHLE9BQVMsUUFDbEMsTUFBUyxDQUFDLE9BQVMsT0FBUyxFQUFHLE9BQVMsU0FFMUMsaUJBQWtCLENBQ2hCLEdBQU0sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEtBQ25CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLEtBQzVCLEdBQU0sQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFNBQzVCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLElBQU0sRUFBRyxFQUFHLEtBQ3RCLEdBQU0sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLEtBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQy9CLEdBQU0sRUFBRSxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2hDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFNBQy9CLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsTUFBUSxFQUFHLFFBQzlCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxJQUFNLElBQU0sRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQ3pCLEdBQU0sQ0FBQyxJQUFNLE9BQVMsT0FBUyxFQUFHLEtBQ2xDLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLE1BQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLEdBQU0sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQ3pCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxPQUFTLE9BQVMsT0FBUyxFQUFHLEtBQ3RDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQzFCLElBQU8sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLElBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLElBQzFCLElBQU8sQ0FBQyxPQUFTLE9BQVMsT0FBUyxFQUFHLElBQ3RDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxJQUFNLE9BQVMsRUFBRyxFQUFHLEtBQzdCLElBQU8sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEtBQ3BCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQzFCLElBQU8sQ0FBQyxPQUFTLEVBQUcsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxPQUFTLE9BQVMsRUFBRyxFQUFHLFFBQ2hDLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLEtBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLEtBQ2pDLEtBQVEsQ0FBQyxFQUFHLE9BQVMsT0FBUyxFQUFHLFNBQ2pDLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFNBRTdCLG1CQUFvQixDQUNsQixHQUFNLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxLQUNuQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUNyQyxHQUFNLENBQUMsT0FBUyxJQUFNLE9BQVMsRUFBRyxJQUNsQyxHQUFNLENBQUMsT0FBUyxJQUFNLE9BQVMsRUFBRyxRQUNsQyxHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsSUFBTSxJQUFNLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsSUFBTSxJQUFNLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxJQUFNLE9BQVMsRUFBRyxJQUM1QixHQUFNLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUNyQyxHQUFNLENBQUMsS0FBTyxPQUFTLEVBQUcsRUFBRyxRQUM3QixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsSUFBTSxJQUFNLE9BQVMsRUFBRyxJQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsS0FBTyxPQUFTLE9BQVMsRUFBRyxRQUNuQyxHQUFNLEVBQUUsSUFBTSxJQUFNLE9BQVMsRUFBRyxRQUNoQyxHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxNQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsS0FBTyxPQUFTLE9BQVMsRUFBRyxRQUNuQyxHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxPQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE1BQVEsRUFBRyxRQUM5QixHQUFNLENBQUMsRUFBRyxPQUFTLE1BQVEsRUFBRyxRQUM5QixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsSUFBTSxJQUFNLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsSUFBTSxJQUFNLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE1BQVEsRUFBRyxJQUM5QixHQUFNLENBQUMsSUFBTSxPQUFTLE9BQVMsRUFBRyxJQUNsQyxHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUMvQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxJQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLE1BQVEsRUFBRyxRQUNyQyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE1BQVEsRUFBRyxRQUMvQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsSUFBTSxPQUFTLE9BQVMsRUFBRyxJQUNuQyxJQUFPLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxLQUNwQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsT0FBUyxFQUFHLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLE9BQVMsRUFBRyxRQUN0QyxJQUFPLENBQUMsRUFBRyxPQUFTLE1BQVEsRUFBRyxJQUMvQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxJQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxRQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNoQyxLQUFRLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUNqQyxLQUFRLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxHQUNqQyxLQUFRLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNqQyxLQUFRLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxRQUNqQyxLQUFRLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxJQUNqQyxLQUFRLENBQUMsRUFBRyxPQUFTLE9BQVMsRUFBRyxLQUVuQyxvQkFBcUIsQ0FDbkIsR0FBTSxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsS0FDbkIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDL0IsR0FBTSxDQUFDLE9BQVMsSUFBTSxFQUFHLEVBQUcsSUFDNUIsR0FBTSxDQUFDLE9BQVMsSUFBTSxFQUFHLEVBQUcsUUFDNUIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsSUFBTSxFQUFHLEVBQUcsSUFDdEIsR0FBTSxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDL0IsR0FBTSxDQUFDLEtBQU8sT0FBUyxFQUFHLEVBQUcsUUFDN0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEtBQU8sT0FBUyxFQUFHLEVBQUcsUUFDN0IsR0FBTSxFQUFFLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDMUIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsTUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEtBQU8sT0FBUyxFQUFHLEVBQUcsUUFDN0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsT0FDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDL0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxLQUFPLEVBQUcsUUFDN0IsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLElBQU0sSUFBTSxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDekIsR0FBTSxDQUFDLElBQU0sT0FBUyxPQUFTLEVBQUcsSUFDbEMsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsR0FBTSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDekIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDaEMsSUFBTyxDQUFDLE9BQVMsT0FBUyxPQUFTLEVBQUcsSUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDMUIsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDaEMsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLE9BQVMsT0FBUyxPQUFTLEVBQUcsUUFDdEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLElBQU0sT0FBUyxFQUFHLEVBQUcsSUFDN0IsSUFBTyxDQUFDLEVBQUcsRUFBRyxFQUFHLEVBQUcsS0FDcEIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLE9BQVMsRUFBRyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLE9BQVMsT0FBUyxFQUFHLEVBQUcsUUFDaEMsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsSUFBTyxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDMUIsS0FBUSxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsSUFDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxPQUFTLEVBQUcsR0FDakMsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsUUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsSUFDM0IsS0FBUSxDQUFDLEVBQUcsT0FBUyxFQUFHLEVBQUcsS0FFN0IsaUJBQWtCLENBQ2hCLEdBQU0sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEtBQ25CLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFFBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFFBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssTUFBUSxFQUFHLFFBQzFCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFFBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFFBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFFBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFFBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFFBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFFBQzNCLEdBQU0sQ0FBQyxPQUFTLEdBQUssT0FBUyxFQUFHLFNBQ2pDLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFFBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFFBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFNBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssTUFBUSxFQUFHLE9BQzFCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFFBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFNBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFFBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLEtBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFFBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFFBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFFBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFFBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFFBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLFFBQzNCLEdBQU0sQ0FBQyxFQUFHLEdBQUssTUFBUSxFQUFHLFFBQzFCLEdBQU0sQ0FBQyxFQUFHLEdBQUssT0FBUyxFQUFHLE9BQzNCLElBQU8sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLE1BRXRCLGdCQUFpQixDQUNmLEdBQU0sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEtBQ25CLEdBQU0sQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzVCLEdBQU0sQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzVCLEdBQU0sQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzVCLEdBQU0sQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzVCLEdBQU0sQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzVCLEdBQU0sQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzVCLElBQU8sQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzdCLElBQU8sQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzdCLElBQU8sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEtBQ3BCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLElBQU8sQ0FBQyxFQUFHLE9BQVMsRUFBRyxFQUFHLFFBQzFCLEtBQVEsRUFBRSxNQUFTLEtBQU8sRUFBRyxFQUFHLFFBQ2hDLEtBQVEsQ0FBQyxLQUFPLEdBQUssRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxLQUFPLEdBQUssRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxLQUFPLEdBQUssRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxLQUFPLEdBQUssRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFNBQzlCLEtBQVEsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLEdBQzlCLEtBQVEsRUFBRSxPQUFTLEtBQU8sRUFBRyxFQUFHLFFBQ2hDLEtBQVEsRUFBRSxPQUFTLEtBQU8sRUFBRyxFQUFHLFFBQ2hDLEtBQVEsQ0FBQyxPQUFTLEtBQU8sT0FBUyxFQUFHLFFBQ3JDLEtBQVEsQ0FBQyxLQUFPLEtBQU8sT0FBUyxFQUFHLFFBQ25DLEtBQVEsQ0FBQyxLQUFPLEtBQU8sT0FBUyxFQUFHLFFBQ25DLEtBQVEsQ0FBQyxPQUFTLEtBQU8sT0FBUyxFQUFHLFFBQ3JDLEtBQVEsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsRUFBRSxNQUFTLEtBQU8sRUFBRyxFQUFHLFFBQ2hDLE1BQVMsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQy9CLE1BQVMsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQy9CLE1BQVMsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFNBQy9CLE1BQVMsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFNBQy9CLE1BQVMsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFNBQy9CLE1BQVMsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFFBQy9CLE1BQVMsQ0FBQyxPQUFTLElBQU0sRUFBRyxFQUFHLFNBRWpDLGdCQUFpQixDQUNmLEdBQU0sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEtBQ25CLEdBQU0sQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzVCLEdBQU0sQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzVCLEdBQU0sQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzVCLEdBQU0sQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzVCLEdBQU0sQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzVCLEdBQU0sQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzVCLElBQU8sQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzdCLElBQU8sQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzdCLElBQU8sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEtBQ3BCLElBQU8sQ0FBQyxFQUFHLElBQU0sRUFBRyxFQUFHLEdBQ3ZCLElBQU8sQ0FBQyxFQUFHLElBQU0sRUFBRyxFQUFHLEdBQ3ZCLElBQU8sQ0FBQyxFQUFHLElBQU0sRUFBRyxFQUFHLEdBQ3ZCLElBQU8sQ0FBQyxFQUFHLElBQU0sRUFBRyxFQUFHLEdBQ3ZCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFNBQzlCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFNBQzlCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFNBQzlCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLEdBQzlCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sT0FBUyxFQUFHLFFBQ3BDLEtBQVEsQ0FBQyxLQUFPLEtBQU0sT0FBUyxFQUFHLFFBQ2xDLEtBQVEsQ0FBQyxLQUFPLEtBQU0sT0FBUyxFQUFHLFFBQ2xDLEtBQVEsQ0FBQyxPQUFTLEtBQU0sT0FBUyxFQUFHLFFBQ3BDLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFNBQzlCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFNBQzlCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFNBQzlCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFNBQzlCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzlCLE1BQVMsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQy9CLE1BQVMsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQy9CLE1BQVMsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFNBQy9CLE1BQVMsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFNBQy9CLE1BQVMsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFNBQy9CLE1BQVMsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFNBQy9CLE1BQVMsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFVBRWpDLGdCQUFpQixDQUNmLEdBQU0sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEtBQ25CLEdBQU0sQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzVCLEdBQU0sQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzVCLEdBQU0sQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFNBQzVCLEdBQU0sQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzVCLEdBQU0sQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFNBQzVCLEdBQU0sQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzVCLElBQU8sQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLEtBQzdCLElBQU8sQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLEtBQzdCLElBQU8sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEtBQ3BCLElBQU8sQ0FBQyxFQUFHLElBQU0sRUFBRyxFQUFHLFNBQ3ZCLElBQU8sQ0FBQyxFQUFHLElBQU0sRUFBRyxFQUFHLFNBQ3ZCLElBQU8sQ0FBQyxFQUFHLElBQU0sRUFBRyxFQUFHLFNBQ3ZCLElBQU8sQ0FBQyxFQUFHLElBQU0sRUFBRyxFQUFHLFNBQ3ZCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLEdBQzlCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzlCLE1BQVMsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLEtBQy9CLE1BQVMsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLE1BRWpDLGdCQUFpQixDQUNmLEdBQU0sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEtBQ25CLEdBQU0sQ0FBQyxRQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzVCLEdBQU0sQ0FBQyxRQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzVCLEdBQU0sQ0FBQyxRQUFTLEtBQU0sRUFBRyxFQUFHLFNBQzVCLEdBQU0sQ0FBQyxRQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzVCLEdBQU0sQ0FBQyxRQUFTLEtBQU0sRUFBRyxFQUFHLFNBQzVCLEdBQU0sQ0FBQyxRQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzVCLElBQU8sQ0FBQyxRQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzdCLElBQU8sQ0FBQyxRQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzdCLElBQU8sQ0FBQyxFQUFHLEVBQUcsRUFBRyxFQUFHLEtBQ3BCLElBQU8sQ0FBQyxFQUFHLEtBQU8sRUFBRyxFQUFHLFFBQ3hCLElBQU8sQ0FBQyxFQUFHLEtBQU8sRUFBRyxFQUFHLFFBQ3hCLElBQU8sQ0FBQyxFQUFHLEtBQU8sRUFBRyxFQUFHLFFBQ3hCLElBQU8sQ0FBQyxFQUFHLEtBQU8sRUFBRyxFQUFHLFFBQ3hCLEtBQVEsQ0FBQyxRQUFTLEtBQU0sRUFBRyxFQUFHLEdBQzlCLEtBQVEsQ0FBQyxRQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxRQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxRQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxRQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxPQUFTLE1BQU8sRUFBRyxFQUFHLE1BQy9CLEtBQVEsQ0FBQyxLQUFPLEdBQUssRUFBRyxFQUFHLE1BQzNCLEtBQVEsQ0FBQyxPQUFTLE1BQU8sRUFBRyxFQUFHLE1BQy9CLEtBQVEsQ0FBQyxPQUFTLE1BQU8sRUFBRyxFQUFHLE1BQy9CLEtBQVEsQ0FBQyxLQUFPLEdBQUssRUFBRyxFQUFHLE1BQzNCLEtBQVEsQ0FBQyxPQUFTLE1BQU8sRUFBRyxFQUFHLE1BQy9CLEtBQVEsQ0FBQyxPQUFTLE1BQU8sRUFBRyxFQUFHLFFBQy9CLEtBQVEsRUFBRSxNQUFTLEtBQU8sRUFBRyxFQUFHLFFBQ2hDLEtBQVEsQ0FBQyxPQUFTLE1BQU8sRUFBRyxFQUFHLFFBQy9CLEtBQVEsQ0FBQyxPQUFTLE1BQU8sRUFBRyxFQUFHLFFBQy9CLEtBQVEsRUFBRSxNQUFTLEtBQU8sRUFBRyxFQUFHLFFBQ2hDLEtBQVEsQ0FBQyxPQUFTLE1BQU8sRUFBRyxFQUFHLFFBQy9CLEtBQVEsQ0FBQyxLQUFPLEdBQUssRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxPQUFTLEVBQUcsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxFQUFHLEdBQUssRUFBRyxFQUFHLFFBQ3ZCLEtBQVEsQ0FBQyxLQUFPLEdBQUssRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxPQUFTLEtBQU0sRUFBRyxFQUFHLFFBQzlCLEtBQVEsQ0FBQyxPQUFTLEVBQUcsRUFBRyxFQUFHLFFBQzNCLEtBQVEsQ0FBQyxPQUFTLEtBQU8sRUFBRyxFQUFHLFNBQy9CLE1BQVMsQ0FBQyxRQUFTLEtBQU0sRUFBRyxFQUFHLFFBQy9CLE1BQVMsQ0FBQyxRQUFTLEtBQU0sRUFBRyxFQUFHLFFBQy9CLE1BQVMsRUFBRSxPQUFTLEtBQU8sRUFBRyxFQUFHLFNBQ2pDLE1BQVMsRUFBRSxPQUFTLEtBQU8sRUFBRyxFQUFHLFNBQ2pDLE1BQVMsQ0FBQyxFQUFHLElBQU0sRUFBRyxFQUFHLEtBQ3pCLE1BQVMsQ0FBQyxFQUFHLElBQU0sRUFBRyxFQUFHLEtBQ3pCLE1BQVMsQ0FBQyxFQUFHLElBQU0sRUFBRyxFQUFHLEtBQ3pCLE1BQVMsQ0FBQyxFQUFHLElBQU0sRUFBRyxFQUFHLE1BRTNCLHFCQUFzQixDQUNwQixHQUFNLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxNQUNuQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLEVBQUUsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUNoQyxHQUFNLENBQUMsT0FBUyxLQUFPLEVBQUcsRUFBRyxNQUM3QixHQUFNLEVBQUUsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUNoQyxHQUFNLENBQUMsRUFBRyxLQUFPLEVBQUcsRUFBRyxNQUN2QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUMvQixHQUFNLEVBQUUsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUNoQyxHQUFNLEVBQUUsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUNoQyxHQUFNLEVBQUUsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUNoQyxHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUMvQixHQUFNLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUMvQixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsT0FBUyxFQUFHLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixHQUFNLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUN6QixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUNoQyxJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxNQUNwQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsT0FBUyxFQUFHLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsT0FBUyxPQUFTLEVBQUcsRUFBRyxNQUNoQyxJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixJQUFPLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMxQixLQUFRLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFBRyxNQUMzQixLQUFRLENBQUMsRUFBRyxPQUFTLEVBQUcsRUFB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LEVBQWFFLEVBQU1HLEdBQUtVLEdBQVMsSUFBVSxhQUMzQ2YsRUFBYUUsRUFBTUcsR0FBS1UsR0FBUyxJQUFVLFNBQzNDZixFQUFhRSxFQUFNRyxHQUFLVSxHQUFTLElBQVUsVUFBVSxHQUNyRGYsRUFBYUUsRUFBTUcsR0FBS1UsR0FBUyxJQUFVLFVBQVUsR0FDckRmLEVBQWFFLEVBQU1HLEdBQUtVLEdBQVMsSUFBVSxlQUMzQ2YsRUFBYUUsRUFBTUcsR0FBS1UsR0FBUyxJQUFVLG1CQUMzQ2YsRUFBYUUsRUFBTUcsR0FBS1UsR0FBUyxJQUFVLHVCQUMzQ2YsRUFBYUUsRUFBTUcsR0FBS1UsR0FBUyxJQUFVLGlCQUMzQ2YsRUFBYUUsRUFBTUcsR0FBS1UsR0FBUyxJQUFVLGtCQUMzQ2YsRUFBYUUsRUFBTUcsR0FBS1UsR0FBUyxJQUFVLGFBQzNDZixFQUFhRSxFQUFNRyxHQUFLVSxHQUFTLElBQVUsb0JBQW9CLEdBQy9EZixFQUFhRSxFQUFNRyxHQUFLVSxHQUFTLElBQVUsZ0JBQWdCLEdBRTNEZixFQUFhRSxFQUFNRyxHQUFLVSxHQUFTLElBQVEsU0FBUyxHQUNsRGYsRUFBYUcsR0FBY0MsR0FBTVcsR0FBUyxJQUFRLEtBQ2xEZixFQUFhRSxFQUFNRyxHQUFLVSxHQUFTLElBQVUsWUFDM0NmLEVBQWFFLEVBQU1HLEdBQUtVLEdBQVMsSUFBVSxjQUMzQ2YsRUFBYUUsRUFBTUcsR0FBS1UsR0FBUyxJQUFVLFlBQzNDZixFQUFhRSxFQUFNRyxHQUFLVSxHQUFTLElBQVUsU0FDM0NmLEVBQWFFLEVBQU1HLEdBQUtVLEdBQVMsSUFBVSxhQUUzQ2YsRUFBYUUsRUFBTUcsR0FBS1UsR0FBUyxJQUFRLFNBQVMsR0FDbERmLEVBQWFHLEdBQWNFLEdBQUtVLEdBQVMsSUFBUSxTQUFTLEdBQzFEZixFQUFhRSxFQUFNRyxHQUFLVSxHQUFTLElBQVUsZUFBZSxHQUMxRGYsRUFBYUcsR0FBY0UsR0FBS1UsR0FBUyxJQUFVLGVBRW5EZixFQUFhRSxFQUFNRyxHQUFLVSxHQUFTLElBQVUsVUFBVSxHQUNyRGYsRUFBYUUs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RGYsRUFBYUUsRUFBTUUsR0FBTVcsR0FBUyxJQUFLLEtBQ3ZDZixFQUFhRSxFQUFNRSxHQUFNVyxHQUFTLElBQUssS0FDdkNmLEVBQWFFLEVBQU1FLEdBQU1XLEdBQVMsSUFBSyxLQUN2Q2YsRUFBYUUsRUFBTUUsR0FBTVcsR0FBUyxJQUFLLEtBQ3ZDZixFQUFhRSxFQUFNRSxHQUFNVyxHQUFTLElBQUssS0FDdkNmLEVBQWFFLEVBQU1FLEdBQU1XLEdBQVMsSUFBSyxLQUN2Q2YsRUFBYUUsRUFBTUUsR0FBTVcsR0FBUyxJQUFLLEtBQ3ZDZixFQUFhRSxFQUFNRSxHQUFNVyxHQUFTLElBQUssS0FDdkNmLEVBQWFFLEVBQU1FLEdBQU1XLEdBQVMsSUFBSyxLQUN2Q2YsRUFBYUUsRUFBTUUsR0FBTVcsR0FBUyxJQUFLLEtBQ3ZDZixFQUFhRSxFQUFNRSxHQUFNVyxHQUFTLElBQUssS0FDdkNmLEVBQWFFLEVBQU1FLEdBQU1XLEdBQVMsSUFBSyxLQUN2Q2YsRUFBYUUsRUFBTUUsR0FBTVcsR0FBUyxJQUFLLEtBQ3ZDZixFQUFhRSxFQUFNRSxHQUFNVyxHQUFTLElBQVEsU0FBUyxHQUNuRGYsRUFBYUUsRUFBTUUsR0FBTVcsR0FBUyxJQUFRLFVBQzFDZixFQUFhRSxFQUFNRSxHQUFNVyxHQUFTLElBQVUsU0FDNUNmLEVBQWFFLEVBQU1FLEdBQU1XLEdBQVMsSUFBVSxTQUM1Q2YsRUFBYUUsRUFBTUUsR0FBTVcsR0FBUyxJQUFVLGNBQzVDZixFQUFhRSxFQUFNRyxHQUFLVSxHQUFTLElBQVUsZ0JBQzNDZixFQUFhRSxFQUFNRSxHQUFNSyxHQUFTLElBQVUsV0FBVyxHQUN2RFQsRUFBYUUsRUFBTUUsR0FBTUssR0FBUyxJQUFVLFVBQVUsR0FDdERULEVBQWFFLEVBQU1FLEdBQU1LLEdBQVMsSUFBVSxXQUFXLEdBQ3ZEVCxFQUFhRSxFQUFNRSxHQUFNSyxHQUFTLElBQVUsV0FBVyxHQUN2RFQsRUFBYUUsRUFBTUUsR0FBTUssR0FBUyxJQUFVLGFBQWEsR0FDekRULEVBQWFFLEVBQU1FLEdBQU1LLEdBQVMsSUFBVSxVQUFVLEdBQ3REVCxFQUFhRSxFQUFNRSxHQUFNSyxHQUFTLElBQVUsU0FBUyxHQUNyRFQsRUFBYUUsRUFBTUUsR0FBTUssR0FBUyxJQUFVLFdBQVcsR0FDdkRULEVBQWFFLEVBQU1FLEdBQU1LLEdBQVMsSUFBVSxVQUFVLEdBQ3REVCxFQUFhRSxFQUFNRSxHQUFNSyxHQUFTLElBQVUsV0FBVyxHQUN2RFQsRUFBYUUsRUFBTUUsR0FBTUssR0FBUyxJQUFVLFlBQVksR0FDeERULEVBQWFFLEVBQU1FLEdBQU1LLEdBQVMsSUFBVSxRQUFRLEdBQ3BEVCxFQUFhRSxFQUFNRSxHQUFNSyxHQUFTLElBQVUsUUFBUSxHQUNwRFQsRUFBYUUsRUFBTUUsR0FBTUssR0FBUyxJQUFVLFFBQVEsR0FDcERULEVBQWFFLEVBQU1FLEdBQU1LLEdBQVMsSUFBVSxhQUFhLEdBQ3pEVCxFQUFhRSxFQUFNRSxHQUFNSyxHQUFTLElBQVUsUUFBUSxHQUNwRFQsRUFBYUUsRUFBTUUsR0FBTUssR0FBUyxJQUFVLFNBQVMsR0FDckRULEVBQWFFLEVBQU1FLEdBQU1LLEdBQVMsSUFBVSxXQUFXLEdBQ3ZEVCxFQUFhRSxFQUFNRSxHQUFNSyxHQUFTLElBQVUsU0FBUyxHQUNyRFQsRUFBYUUsRUFBTUUsR0FBTUssR0FBUyxJQUFVLGFBQWEsR0FDekRULEVBQWFFLEVBQU1FLEdBQU1LLEdBQVMsSUFBVSxTQUFTLEdBQ3JEVCxFQUFhRSxFQUFNRSxHQUFNSyxHQUFTLElBQVUsU0FBUyxHQUNyRFQsRUFBYUUsRUFBTUUsR0FBTUssR0FBUyxJQUFVLFNBQVMsR0FDckRULEVBQWFFLEVBQU1FLEdBQU1LLEdBQVMsSUFBVSxXQUFXLEdBQ3ZEVCxFQUFhRSxFQUFNRSxHQUFNSyxHQUFTLElBQVUsZ0JBQWdCLEdBQzVEVCxFQUFhRSxFQUFNRSxHQUFNSyxHQUFTLElBQVUsY0FBYyxHQUMxRFQsRUFBYUUsRUFBTUUsR0FBTUssR0FBUyxJQUFVLFdBQVcsR0FDdkRULEVBQWFFLEVBQU1FLEdBQU1LLEdBQVMsSUFBVSxZQUFZLEdBQ3hEVCxFQUFh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LFNBQVUseUJBQ3RCQSxHQUFZLFdBQVksNkJBQ3hCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFdBQVksNkJBQ3hCQSxHQUFZLFdBQVksNkJBQ3hCQSxHQUFZLFdBQVksNkJBQ3hCQSxHQUFZLFdBQVksNkJBQ3hCQSxHQUFZLFdBQVksNkJBQ3hCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFNBQVUsNkJBQ3RCQSxHQUFZLFNBQVUsNkJBQ3RCQSxHQUFZLFNBQVUsNkJBQ3RCQSxHQUFZLFNBQVUsNkJBQ3RCQSxHQUFZLFNBQVUsNkJBQ3RCQSxHQUFZLFlBQWEsNkJBQ3pCQSxHQUFZLFlBQWEsNkJBQ3pCQSxHQUFZLFlBQWEsNkJBQ3pCQSxHQUFZLFlBQWEsNkJBQ3pCQSxHQUFZLFlBQWEsNkJBQ3pCQSxHQUFZLFlBQWEsNkJBQ3pCQSxHQUFZLFlBQWEsNkJBQ3pCQSxHQUFZLFlBQWEsNkJBQ3pCQSxHQUFZLFlBQWEsNkJBQ3pCQSxHQUFZLFlBQWEsNkJBQ3pCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFVBQVcsNkJBQ3ZCQSxHQUFZLFdBQVksNkJBQ3hCQSxHQUFZLFlBQWEsNkJBZXpCLElBQUlzRyxHQUFtQixDQUNyQixXQUFXLEVBRVgsS0FBSyxFQUVMLEdBQUssRUFFTCxZQUFZLEVBRVosY0FBYyxHQUlaQyxHQUE2QixXQUMvQixTQUFTQSxFQUFjL2hDLEVBQU9rZSxFQUFVMW9CLEdBQ3RDMU4sS0FBS28yQixjQUFXLEVBQ2hCcDJCLEtBQUtrNkMsb0JBQWlCLEVBQ3RCbDZDLEtBQUttWSxXQUFRLEVBQ2JuWSxLQUFLNlUsWUFBUyxFQUNkN1UsS0FBS3doQyxXQUFRLEVBQ2J4aEMsS0FBSzBOLFVBQU8sRUFDWjFOLEtBQUtvMkIsU0FBV0EsRUFDaEJwMkIsS0FBS2s2QyxlQUFpQixFQUN0Qmw2QyxLQUFLbTZDLEtBQUtqaUMsR0FFVmxZLEtBQUs2VSxPQUFTLElBQUl3akMsR0FBVVMsR0FBWTFpQixFQUFTdmhCLFFBQ2pEN1UsS0FBSzBOLEtBQU9BLEVBQ1oxTixLQUFLd2hDLE1BQVEsR0FRZixJQUFJeG5CLEVBQVNpZ0MsRUFBY3hpQyxVQXFlM0IsT0FuZUF1QyxFQUFPbWdDLEtBQU8sU0FBY2ppQyxHQUMxQmxZLEtBQUttWSxNQUFRLElBQUkwL0IsR0FBTTMvQixFQUFPbFksS0FBS28yQixXQU9yQ3BjLEVBQU9rNEIsV0FBYSxTQUFvQmtJLEdBQ3RDcDZDLEtBQUswTixLQUFPMHNDLEdBT2RwZ0MsRUFBT3N0QixXQUFhLFdBQ2xCdG5DLEtBQUs2VSxPQUFPeXlCLGNBT2R0dEIsRUFBTzZ0QixTQUFXLFdBQ2hCN25DLEtBQUs2VSxPQUFPZ3pCLFlBUWQ3dEIsRUFBTzQrQixVQUFZLFdBQ2pCNTRDLEtBQUs2VSxPQUFPK2pDLGFBUWQ1K0IsRUFBTytrQixPQUFTLFdBS2QsT0FKMEIsSUFBdEIvK0IsS0FBS3doQyxNQUFNdmlDLFFBQ2JlLEtBQUt1L0IsVUFBVXYvQixLQUFLbVksTUFBTSsvQixPQUdyQmw0QyxLQUFLd2hDLE1BQU14aEMsS0FBS3doQyxNQUFNdmlDLE9BQVMsSUFPeEMrYSxFQUFPNGtCLFNBQVcsV0FHaEIsT0FGQTUrQixLQUFLKytCLFNBRUUvK0IsS0FBS3doQyxNQUFNOU4sT0FRcEIxWixFQUFPdWxCLFVBQVksU0FBbUJ4bkIsR0FDcEMvWCxLQUFLd2hDLE1BQU1qL0IsS0FBS3dWLElBT2xCaUMsRUFBT3FnQyxXQUFhLFNBQW9CL2IsR0FDdEMsSUFBSWdjLEdBRUhBLEVBQWN0NkMsS0FBS3doQyxPQUFPai9CLEtBQUtYLE1BQU0wNEMsRUFBYWhjLElBUXJEdGtCLEVBQU91Z0MsYUFBZSxTQUFzQkMsR0FDMUMsSUFBSTd4QyxFQUNBckIsRUFDQWczQixFQUVKLEdBQUlrYyxFQUFZLENBR2QsR0FGQXg2QyxLQUFLeStCLGdCQUVzQixNQUF2QnorQixLQUFLKytCLFNBQVMzaUMsS0FDaEIsT0FBTyxLQUdUdU0sRUFBUTNJLEtBQUs0K0IsV0FFYixJQUFJNmIsRUFBbUJ6NkMsS0FBS2cvQixXQUFXLENBQUMsTUFFeENWLEVBQVNtYyxFQUFpQm5jLE9BQzFCaDNCLEVBQU1tekMsRUFBaUJuekMsUUFDbEIsQ0FDTCxJQUFJb3pDLEVBQW9CMTZDLEtBQUtnL0IsYUFFN0JWLEVBQVNvYyxFQUFrQnBjLE9BQzNCMzFCLEVBQVEreEMsRUFBa0IveEMsTUFDMUJyQixFQUFNb3pDLEVBQWtCcHpDLElBTTFCLE9BRkF0SCxLQUFLdS9CLFVBQVUsSUFBSWlZLEdBQU0sTUFBT2x3QyxFQUFJMlEsTUFDcENqWSxLQUFLcTZDLFdBQVcvYixHQUNUMzFCLEVBQU12QixNQUFNRSxFQUFLLEtBTzFCMFMsRUFBT3lrQixjQUFnQixXQUNyQixLQUdxQixNQUZQeitCLEtBQUsrK0IsU0FFUDNpQyxNQUNSNEQsS0FBS3doQyxNQUFNOU4sT0FZakIxWixFQUFPZ2xCLFdBQWEsU0FBb0IyYixHQU90QyxJQUFJcmMsRUFBUyxHQUNUc2MsRUFBY0QsR0FBVUEsRUFBTzE3QyxPQUFTLEVBRXZDMjdDLEdBS0g1NkMsS0FBS3krQixnQkFHUCxJQUNJUixFQURBdDFCLEVBQVEzSSxLQUFLKytCLFNBRWJwNEIsRUFBUSxFQUNSUCxFQUFRLEVBRVosRUFBRyxDQUlELEdBSEE2M0IsRUFBTWorQixLQUFLNCtCLFdBQ1hOLEVBQU8vN0IsS0FBSzA3QixHQUVLLE1BQWJBLEVBQUk3aEMsT0FDSnVLLE9BQ0csR0FBaUIsTUFBYnMzQixFQUFJN2hDLE1BR2IsSUFBZSxLQUZidUssRUFHQSxNQUFNLElBQUkyUixFQUFlLFVBQVcybEIsUUFFakMsR0FBaUIsUUFBYkEsRUFBSTdoQyxLQUNiLE1BQU0sSUFBSWtjLEVBQWUsMkRBQWtFcWlDLEdBQVVDLEVBQWNELEVBQU92MEMsR0FBUyxLQUFPLElBQUs2M0IsR0FHakosR0FBSTBjLEdBQVVDLEVBQ1osSUFBZSxJQUFWajBDLEdBQXlCLElBQVZBLEdBQWlDLE1BQWxCZzBDLEVBQU92MEMsS0FBbUI2M0IsRUFBSTdoQyxPQUFTdStDLEVBQU92MEMsSUFHL0UsS0FGRUEsSUFFWXUwQyxFQUFPMTdDLE9BQVEsQ0FFM0JxL0IsRUFBT3hwQixRQUFRMU8sRUFBT0EsR0FDdEIsWUFHRkEsRUFBUSxRQUdLLElBQVZPLEdBQWVpMEMsR0FXeEIsTUFQbUIsTUFBZmp5QyxFQUFNdk0sTUFBbUQsTUFBbkNraUMsRUFBT0EsRUFBT3IvQixPQUFTLEdBQUc3QyxPQUNsRGtpQyxFQUFPNUssTUFDUDRLLEVBQU92UixTQUdUdVIsRUFBT1ksVUFFQSxDQUNMWixPQUFRQSxFQUNSMzFCLE1BQU9BLEVBQ1ByQixJQUFLMjJCLElBU1Rqa0IsRUFBT2kvQixZQUFjLFNBQXFCNW5CLEVBQVN5TixHQUNqRCxHQUFJQSxFQUFZLENBQ2QsR0FBSUEsRUFBVzcvQixTQUFXb3lCLEVBQVUsRUFDbEMsTUFBTSxJQUFJL1ksRUFBZSw4REFLM0IsSUFGQSxJQUFJcWlDLEVBQVM3YixFQUFXLEdBRWYvL0IsRUFBSSxFQUFHQSxFQUFJNDdDLEVBQU8xN0MsT0FBUUYsSUFBSyxDQUN0QyxJQUFJay9CLEVBQU1qK0IsS0FBSzQrQixXQUVmLEdBQUkrYixFQUFPNTdDLEtBQU9rL0IsRUFBSTdoQyxLQUNwQixNQUFNLElBQUlrYyxFQUFlLGdEQUFpRDJsQixJQU9oRixJQUZBLElBQUluN0IsRUFBTyxHQUVGZ2YsRUFBSyxFQUFHQSxFQUFLdVAsRUFBU3ZQLElBQzdCaGYsRUFBS1AsS0FBS3ZDLEtBQUtnL0IsV0FBV0YsR0FBY0EsRUFBV2hkLEVBQUssSUFBSXdjLFFBRzlELE9BQU94N0IsR0F1QlRrWCxFQUFPZy9CLFdBQWEsU0FBb0I2QixHQUN0QyxJQUFJQyxFQUFXOTZDLEtBQUs0K0IsV0FDaEIxZ0MsRUFBTzQ4QyxFQUFTMStDLEtBQ2hCMitDLEVBQWFELEVBQVN6YyxTQUFzQyxLQUEzQnIrQixLQUFLZzdDLGNBQWM5OEMsR0FFeEQsR0FBaUIsTUFBYjY4QyxHQUFxQkYsR0FBa0JFLEVBQVV4YyxhQUFjLENBQ2pFLEdBQUlzYyxHQUErQixNQUFiRSxHQUFpQyxPQUFaNzhDLEVBQUssS0FBZ0I4QixLQUFLdzVDLFVBQVV0N0MsR0FDN0UsTUFBTSxJQUFJb2EsRUFBZSwrQkFBaUNwYSxHQUk1RCxPQURBOEIsS0FBS3UvQixVQUFVdWIsR0FDUkEsRUFLVCxHQUZBOTZDLEtBQUtrNkMsaUJBRURsNkMsS0FBS2s2QyxlQUFpQmw2QyxLQUFLbzJCLFNBQVN0YyxVQUN0QyxNQUFNLElBQUl4QixFQUFlLDRFQUczQixJQUFJZ21CLEVBQVN5YyxFQUFVemMsT0FDbkJ4N0IsRUFBTzlDLEtBQUtpNUMsWUFBWThCLEVBQVUxcEIsUUFBUzBwQixFQUFVamMsWUFFekQsR0FBSWljLEVBQVUxcEIsUUFJWixJQUFLLElBQUl0eUIsR0FGVHUvQixFQUFTQSxFQUFPOWdDLFNBRUl5QixPQUFTLEVBQUdGLEdBQUssSUFBS0EsRUFBRyxDQUMzQyxJQUFJay9CLEVBQU1LLEVBQU92L0IsR0FFakIsR0FBaUIsTUFBYmsvQixFQUFJN2hDLEtBQWMsQ0FDcEIsR0FBVSxJQUFOMkMsRUFDRixNQUFNLElBQUl1WixFQUFlLDhDQUErQzJsQixHQUsxRSxHQUFpQixPQUZqQkEsRUFBTUssSUFBU3YvQixJQUVQM0MsS0FFTmtpQyxFQUFPeHBCLE9BQU8vVixFQUFJLEVBQUcsT0FDaEIsS0FBSSxVQUFVK1csS0FBS21vQixFQUFJN2hDLE1BTTVCLE1BQU0sSUFBSWtjLEVBQWUsOEJBQStCMmxCLEdBTHhELElBQUlnZCxHQUdIQSxFQUFVM2MsR0FBUXhwQixPQUFPbFQsTUFBTXE1QyxFQUFTLENBQUNsOEMsRUFBRyxHQUFHd0MsT0FBT3VCLEdBQU1tN0IsRUFBSTdoQyxLQUFPLE9BVWhGLE9BREE0RCxLQUFLcTZDLFdBQVcvYixHQUNUQSxHQVVUdGtCLEVBQU82L0Isa0JBQW9CLFdBRXpCLE9BREE3NUMsS0FBS2c1QyxhQUNFaDVDLEtBQUsrK0IsVUFPZC9rQixFQUFPMC9CLGdCQUFrQixXQUN2QixPQUFTLENBQ1AsSUFBSXdCLEVBQVdsN0MsS0FBS2c1QyxhQUVwQixHQUFJa0MsYUFBb0IxRCxHQUFPLENBSzdCLEdBQXNCLFlBQWxCMEQsRUFBUzkrQyxPQUFzQjgrQyxFQUFTekQsYUFHMUMsT0FBT3ozQyxLQUFLd2hDLE1BQU05TixNQUZsQjF6QixLQUFLd2hDLE1BQU05TixPQVNqQixNQUFNLElBQUl4Z0IsT0FRWjhHLEVBQU9taEMsWUFBYyxTQUFxQmo5QyxHQUN4QyxPQUFPOEIsS0FBSzZVLE9BQU9na0MsSUFBSTM2QyxHQUFROEIsS0FBS2kvQixhQUFhLENBQUMsSUFBSXVZLEdBQU10NUMsVUFBVThGLEdBT3hFZ1csRUFBT2lsQixhQUFlLFNBQXNCWCxHQUMxQyxJQUFJamxCLEVBQVMsR0FDVCtoQyxFQUFpQnA3QyxLQUFLd2hDLE1BQU12aUMsT0FHaEMsSUFGQWUsS0FBS3E2QyxXQUFXL2IsR0FFVHQrQixLQUFLd2hDLE1BQU12aUMsT0FBU204QyxHQUFnQixDQUN6QyxJQUFJRixFQUFXbDdDLEtBQUtnNUMsWUFBVyxHQUczQmtDLGFBQW9CMUQsS0FDbEIwRCxFQUFTekQsZUFFWHlELEVBQVM3YyxVQUFXLEVBQ3BCNmMsRUFBU3pELGNBQWUsR0FHMUJwK0IsRUFBTzlXLEtBQUt2QyxLQUFLd2hDLE1BQU05TixRQUkzQixPQUFPcmEsR0FRVFcsRUFBT3V0QixrQkFBb0IsU0FBMkJycEMsR0FDcEQsSUFBSW9nQyxFQUFTdCtCLEtBQUttN0MsWUFBWWo5QyxHQUU5QixPQUFJb2dDLEVBQ0tBLEVBQU9sN0IsS0FBSSxTQUFVMlUsR0FDMUIsT0FBT0EsRUFBTTNiLFFBQ1p3UCxLQUFLLElBRUQweUIsR0FTWHRrQixFQUFPZ2hDLGNBQWdCLFNBQXVCOThDLEdBQzVDLElBQUlpWixFQUFhblgsS0FBSzZVLE9BQU8wQyxJQUFJclosR0FFakMsR0FBa0IsTUFBZGlaLEVBRUYsT0FBT0EsRUFLVCxHQUFvQixJQUFoQmpaLEVBQUtlLE9BQWMsQ0FDckIsSUFBSW84QyxFQUFVcjdDLEtBQUttWSxNQUFNNC9CLFNBQVM3NUMsR0FFbEMsR0FBZSxNQUFYbTlDLEdBQStCLEtBQVpBLEVBQ3JCLE9BSUosSUFBSU4sRUFBa0MsbUJBQWY1akMsRUFBNEJBLEVBQVduWCxNQUFRbVgsRUFFdEUsR0FBeUIsaUJBQWQ0akMsRUFBd0IsQ0FDakMsSUFBSTFwQixFQUFVLEVBRWQsSUFBZ0MsSUFBNUIwcEIsRUFBVWhtQyxRQUFRLEtBR3BCLElBRkEsSUFBSXVtQyxFQUFXUCxFQUFVNXdDLFFBQVEsTUFBTyxLQUVVLElBQTNDbXhDLEVBQVN2bUMsUUFBUSxLQUFPc2MsRUFBVSxPQUNyQ0EsRUFRTixJQUpBLElBQUlrcUIsRUFBWSxJQUFJMUQsR0FBTWtELEVBQVcvNkMsS0FBS28yQixVQUN0Q2tJLEVBQVMsR0FDVEwsRUFBTXNkLEVBQVVyRCxNQUVBLFFBQWJqYSxFQUFJN2hDLE1BQ1RraUMsRUFBTy83QixLQUFLMDdCLEdBQ1pBLEVBQU1zZCxFQUFVckQsTUFTbEIsT0FOQTVaLEVBQU9ZLFVBRVEsQ0FDYlosT0FBUUEsRUFDUmpOLFFBQVNBLEdBS2IsT0FBTzBwQixHQVVUL2dDLEVBQU93L0IsVUFBWSxTQUFtQnQ3QyxHQUNwQyxPQUFPOEIsS0FBSzZVLE9BQU9na0MsSUFBSTM2QyxJQUFTbTVDLEdBQWMzL0IsZUFBZXhaLElBQVM4bkIsRUFBWUcsS0FBS3pPLGVBQWV4WixJQUFTOG5CLEVBQVk1cEIsS0FBS3NiLGVBQWV4WixJQUFTODdDLEdBQWlCdGlDLGVBQWV4WixJQU8xTDhiLEVBQU93a0IsYUFBZSxTQUFzQnRnQyxHQUMxQyxJQUFJa2dDLEVBQVFwK0IsS0FBSzZVLE9BQU8wQyxJQUFJclosR0FDNUIsT0FBZ0IsTUFBVGtnQyxFQUFpQyxpQkFBVkEsR0FBdUMsbUJBQVZBLElBQXlCQSxFQUFNRyxhQUFlOFksR0FBYzMvQixlQUFleFosS0FBVW01QyxHQUFjbjVDLEdBQU0wekIsV0FHL0pxb0IsRUEzZndCLEdBNGdCN0J1QixHQUFpQixDQUNuQixJQUFLLENBQ0gsS0FBUSxNQUNSLEtBQVEsV0FFVixJQUFLLENBQ0gsS0FBUSxNQUNSLEtBQVEsV0FFVixJQUFLLENBQ0gsS0FBUSxNQUNSLEtBQVEsVUFFVixJQUFLLENBQ0gsS0FBUSxNQUNSLEtBQVEsV0FFVixJQUFLLENBQ0gsS0FBUSxNQUNSLEtBQVEsU0FFVixJQUFLLENBQ0gsS0FBUSxNQUNSLEtBQVEsV0FFVixJQUFLLENBQ0gsS0FBUSxNQUNSLEtBQVEsV0FFVixJQUFLLENBQ0gsS0FBUSxNQUNSLEtBQVEsU0FFVixJQUFLLENBQ0gsS0FBUSxNQUNSLEtBQVEsU0FFVixJQUFLLENBQ0gsS0FBUSxNQUNSLEtBQVEsY0FFVixJQUFLLENBQ0gsS0FBUSxPQUVWLElBQUssQ0FDSCxLQUFRLFFBR1JDLEdBQWlCLENBQ25CLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssTUFDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLE1BQ0wsRUFBSyxNQUNMLEVBQUssTUFDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssTUFDTCxFQUFLLE1BQ0wsRUFBSyxNQUNMLEVBQUssS0FDTCxFQUFLLE1BQ0wsRUFBSyxLQUNMLEVBQUssTUFDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssTUFDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLE1BQ0wsRUFBSyxNQUNMLEVBQUssS0FDTCxFQUFLLE1BQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLE1BQ0wsRUFBSyxNQUNMLEVBQUssTUFDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLE1BQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxNQUNMLEVBQUssS0FDTCxFQUFLLE1BQ0wsRUFBSyxNQUNMLEVBQUssTUFDTCxFQUFLLEtBQ0wsRUFBSyxNQUNMLEVBQUssTUFDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLE1BQ0wsRUFBSyxNQUNMLEVBQUssTUFDTCxFQUFLLEtBQ0wsRUFBSyxNQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxNQUNMLEVBQUssS0FDTCxFQUFLLE1BQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssTUFDTCxFQUFLLE1BQ0wsRUFBSyxNQUNMLEVBQUssTUFDTCxFQUFLLEtBQ0wsRUFBSyxNQUNMLEVBQUssS0FDTCxFQUFLLE1BQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLE1BQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxNQUNMLEVBQUssTUFDTCxFQUFLLE1BQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLE1BQ0wsRUFBSyxNQUNMLEVBQUssTUFDTCxFQUFLLEtBQ0wsRUFBSyxNQUNMLEVBQUssS0FDTCxFQUFLLE1BQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLE1BQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxNQUNMLEVBQUssTUFDTCxFQUFLLEtBQ0wsRUFBSyxNQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxNQUNMLEVBQUssTUFDTCxFQUFLLE1BQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxNQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssTUFDTCxFQUFLLEtBQ0wsRUFBSyxNQUNMLEVBQUssTUFDTCxFQUFLLE1BQ0wsRUFBSyxLQUNMLEVBQUssTUFDTCxFQUFLLE1BQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxNQUNMLEVBQUssTUFDTCxFQUFLLE1BQ0wsRUFBSyxLQUNMLEVBQUssTUFDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssTUFDTCxFQUFLLEtBQ0wsRUFBSyxNQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssTUFDTCxFQUFLLE1BQ0wsRUFBSyxNQUNMLEVBQUssTUFDTCxFQUFLLEtBQ0wsRUFBSyxNQUNMLEVBQUssS0FDTCxFQUFLLE1BQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFBSyxLQUNMLEVBQUssS0FDTCxFQUFLLEtBQ0wsRUFB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LFFBQVMsSUFPVixPQUhBay9FLEVBQW9CRixHQUFVditFLEtBQUsybkMsRUFBT3BvQyxRQUFTb29DLEVBQVFBLEVBQU9wb0MsUUFBUysrRSxHQUdwRTMyQyxFQUFPcG9DLFFDcEJmKytFLEVBQW9CaHNGLEVBQUksQ0FBQ2lOLEVBQVNDLEtBQ2pDLElBQUksSUFBSS9aLEtBQU8rWixFQUNYOCtFLEVBQW9CNytFLEVBQUVELEVBQVkvWixLQUFTNjRGLEVBQW9CNytFLEVBQUVGLEVBQVM5WixJQUM1RXVILE9BQU8wUyxlQUFlSCxFQUFTOVosRUFBSyxDQUFFa2EsWUFBWSxFQUFNQyxJQUFLSixFQUFXL1osTUNKM0U2NEYsRUFBb0I3K0UsRUFBSSxDQUFDMVMsRUFBSzhTLElBQVU3UyxPQUFPOFMsVUFBVUMsZUFBZUMsS0FBS2pULEVBQUs4UyxHQ0NsRnkrRSxFQUFvQi90RCxFQUFLaHhCLElBQ0gsb0JBQVhtL0UsUUFBMEJBLE9BQU9DLGFBQzFDM3hGLE9BQU8wUyxlQUFlSCxFQUFTbS9FLE9BQU9DLFlBQWEsQ0FBRW5oRixNQUFPLFdBRTdEeFEsT0FBTzBTLGVBQWVILEVBQVMsYUFBYyxDQUFFL0IsT0FBTyxLQ0Y3QjhnRixFQUFvQixNIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZWRpdG9yLy4vY29tbW9uX2V4dGVuc2lvbi9pbmRleC50cyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9jb3JlL2NvbW1vbi9iYXNpY0tleW1hcC50cyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9jb3JlL2NvbW1vbi9jbGlwYm9hcmRUZXh0U2VyaWFsaXplci50cyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9jb3JlL2NvbW1vbi9nZXRJbW1UcmFuc2FjdGlvbi50cyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9jb3JlL2NvbW1vbi9zZXJpYWxDb21tYW5kcy50cyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9jb3JlL2VkaXRvci50cyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9jb3JlL2V2ZW50RW1pdHRlci50cyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9jb3JlL2V4dGVuc2lvblJlc29sdmVyLnRzIiwid2VicGFjazovL2VkaXRvci8uL2NvcmUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZWRpdG9yLy4vY29yZS91dGlscy9iaW5kRnVuYy50cyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9jb3JlL3V0aWxzL2VsZW1lbnRGcm9tU3RyaW5nLnRzIiwid2VicGFjazovL2VkaXRvci8uL2NvcmUvdXRpbHMvZ2V0VHlwZS50cyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9jb3JlL3V0aWxzL3JlY3Vyc2l2ZVRleHRTZXJpYWxpemVyLnRzIiwid2VicGFjazovL2VkaXRvci8uL2NvcmUvdXRpbHMvc3RyaW5nUmVuZGVyZXIudHMiLCJ3ZWJwYWNrOi8vZWRpdG9yLy4vZXhhbXBsZS9pbmRleC50cyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9oZWFkaW5nX2V4dGVuc2lvbi9pbmRleC50cyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9pbmRleC50cyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9saXN0X2V4dGVuc2lvbi9jb21tYW5kcy9kZWxldGVMaXN0SXRlbS50cyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9saXN0X2V4dGVuc2lvbi9jb21tYW5kcy9saWZ0TGlzdEl0ZW0udHMiLCJ3ZWJwYWNrOi8vZWRpdG9yLy4vbGlzdF9leHRlbnNpb24vY29tbWFuZHMvbmV3TGluZUluTGlzdC50cyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9saXN0X2V4dGVuc2lvbi9jb21tYW5kcy9zaW5rTGlzdEl0ZW0udHMiLCJ3ZWJwYWNrOi8vZWRpdG9yLy4vbGlzdF9leHRlbnNpb24vY29tbWFuZHMvc3BsaXRMaXN0SXRlbS50cyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9saXN0X2V4dGVuc2lvbi9jb21tYW5kcy93cmFwSW5MaXN0LnRzIiwid2VicGFjazovL2VkaXRvci8uL2xpc3RfZXh0ZW5zaW9uL2luZGV4LnRzIiwid2VicGFjazovL2VkaXRvci8uL2xpc3RfZXh0ZW5zaW9uL3R5cGUudHMiLCJ3ZWJwYWNrOi8vZWRpdG9yLy4vbGlzdF9leHRlbnNpb24vdXRpbHMvZ2V0TmV4dEF0dHIudHMiLCJ3ZWJwYWNrOi8vZWRpdG9yLy4vbGlzdF9leHRlbnNpb24vdXRpbHMvb3JkZXJUYWJsZS50cyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9tYXRoX2V4dGVuc2lvbi9jb21tYW5kcy9jb2xsYXBzZU1hdGhDbWQudHMiLCJ3ZWJwYWNrOi8vZWRpdG9yLy4vbWF0aF9leHRlbnNpb24vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZWRpdG9yLy4vbWF0aF9leHRlbnNpb24vbWF0aE5vZGV2aWV3LnRzIiwid2VicGFjazovL2VkaXRvci8uL21hdGhfZXh0ZW5zaW9uL21hdGhQbHVnaW4udHMiLCJ3ZWJwYWNrOi8vZWRpdG9yLy4vbWF0aF9leHRlbnNpb24vcGx1Z2lucy9tYXRoSW5wdXRydWxlcy50cyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9tYXRoX2V4dGVuc2lvbi9wbHVnaW5zL21hdGhQcmV2aWV3LnRzIiwid2VicGFjazovL2VkaXRvci8uL21hdGhfZXh0ZW5zaW9uL3BsdWdpbnMvbWF0aFNlbGVjdC50cyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9ub2RlX21vZHVsZXMva2F0ZXgvZGlzdC9rYXRleC5qcyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9ub2RlX21vZHVsZXMvcHJvc2VtaXJyb3ItY29tbWFuZHMvZGlzdC9pbmRleC5lcy5qcyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9ub2RlX21vZHVsZXMvcHJvc2VtaXJyb3ItaW5wdXRydWxlcy9kaXN0L2luZGV4LmVzLmpzIiwid2VicGFjazovL2VkaXRvci8uL25vZGVfbW9kdWxlcy93M2Mta2V5bmFtZS9pbmRleC5lcy5qcyIsIndlYnBhY2s6Ly9lZGl0b3IvLi9ub2RlX21vZHVsZXMvcHJvc2VtaXJyb3Ita2V5bWFwL2Rpc3QvaW5kZXguZXMuanMiLCJ3ZWJwYWNrOi8vZWRpdG9yLy4vbm9kZV9tb2R1bGVzL29yZGVyZWRtYXAvaW5kZXguZXMuanMiLCJ3ZWJwYWNrOi8vZWRpdG9yLy4vbm9kZV9tb2R1bGVzL3Byb3NlbWlycm9yLW1vZGVsL2Rpc3QvaW5kZXguZXMuanMiLCJ3ZWJwYWNrOi8vZWRpdG9yLy4vbm9kZV9tb2R1bGVzL3Byb3NlbWlycm9yLXN0YXRlL2Rpc3QvaW5kZXguZXMuanMiLCJ3ZWJwYWNrOi8vZWRpdG9yLy4vbm9kZV9tb2R1bGVzL3Byb3NlbWlycm9yLXRyYW5zZm9ybS9kaXN0L2luZGV4LmVzLmpzIiwid2VicGFjazovL2VkaXRvci8uL25vZGVfbW9kdWxlcy9wcm9zZW1pcnJvci12aWV3L2Rpc3QvaW5kZXguZXMuanMiLCJ3ZWJwYWNrOi8vZWRpdG9yL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2VkaXRvci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vZWRpdG9yL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZWRpdG9yL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vZWRpdG9yL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRlbnNpb24sIEV4dGVuc2lvbnMgfSBmcm9tIFwiQGVkaXRvci9jb3JlXCI7XHJcbmltcG9ydCB7IGJhc2VLZXltYXAsIGNoYWluQ29tbWFuZHMsIGV4aXRDb2RlIH0gZnJvbSBcInByb3NlbWlycm9yLWNvbW1hbmRzXCI7XHJcbi8vIGltcG9ydCB7IGtleW1hcCB9IGZyb20gXCJwcm9zZW1pcnJvci1rZXltYXBcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBjb21tb25FeHRlbnNpb25zOiBFeHRlbnNpb25zID0gW1xyXG4gICAge1xyXG4gICAgICAgIHR5cGU6ICdOT0RFJyxcclxuICAgICAgICBub2RlOiB7XHJcbiAgICAgICAgICAgIHBhcmFncmFwaCA6IHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdpbmxpbmUqJyxcclxuICAgICAgICAgICAgICAgIGdyb3VwOiAnYmxvY2snLFxyXG4gICAgICAgICAgICAgICAgcGFyc2VET006IFt7dGFnOiAncCd9XSxcclxuICAgICAgICAgICAgICAgIHRvRE9NOiAoKSA9PiBbJ3AnLCAwXSxcclxuICAgICAgICAgICAgfSwgXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwcmlvcml0eTogMzAwLFxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZTogJ05PREUnLFxyXG4gICAgICAgIG5vZGU6IHtcclxuICAgICAgICAgICAgZG9jOiB7XHJcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnYmxvY2srJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHByaW9yaXR5OiAxMDAwLFxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZTogJ05PREUnLFxyXG4gICAgICAgIG5vZGU6IHtcclxuICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgZ3JvdXA6ICdpbmxpbmUnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG5cclxuICAgIHtcclxuICAgICAgICB0eXBlOiAnTk9ERScsXHJcbiAgICAgICAgbm9kZToge1xyXG4gICAgICAgICAgICBoYXJkX2JyZWFrOiB7XHJcbiAgICAgICAgICAgICAgICBncm91cDogJ2lubGluZScsXHJcbiAgICAgICAgICAgICAgICBpbmxpbmU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHBhcnNlRE9NOiBbeyB0YWc6ICdicicgfV0sXHJcbiAgICAgICAgICAgICAgICB0b0RPTTogKCkgPT4gWydiciddLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZTogJ1BMVUdJTicsXHJcbiAgICAgICAgcHJpb3JpdHk6IDEwMCxcclxuICAgICAgICBzaG9ydGN1dEtleTooKSA9PiBiYXNlS2V5bWFwLFxyXG4gICAgfVxyXG5cclxuXSIsImltcG9ydCB7IHBjQmFzZUtleW1hcCB9IGZyb20gXCJwcm9zZW1pcnJvci1jb21tYW5kc1wiO1xyXG5cclxuZXhwb3J0IGxldCB7XHJcbiAgICBFbnRlcixcclxuICAgICdNb2QtRW50ZXInOiBNb2RFbnRlcixcclxuICAgIEJhY2tzcGFjZSxcclxuICAgICdNb2QtQmFja3NwYWNlJzogTW9kQmFja3NwYWNlLFxyXG4gICAgRGVsZXRlLFxyXG4gICAgJ01vZC1EZWxldGUnOiBNb2REZWxldGUsXHJcbiAgICAnTW9kLWEnOiBNb2RBLFxyXG59ID0gcGNCYXNlS2V5bWFwXHJcbiIsImltcG9ydCB7IFBsdWdpbiwgUGx1Z2luS2V5IH0gZnJvbSBcInByb3NlbWlycm9yLXN0YXRlXCI7XHJcbmltcG9ydCB7IEV4dGVuc2lvbiB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5pbXBvcnQgeyBET01PdXRwdXRTcGVjLCBOb2RlIGFzIHBtTm9kZSwgTm9kZVNwZWMsIFNjaGVtYSB9IGZyb20gXCJwcm9zZW1pcnJvci1tb2RlbFwiO1xyXG5pbXBvcnQgeyBub2RlIH0gZnJvbSBcIndlYnBhY2tcIjtcclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2xpcGJvYXJkVGV4dFNlcmlhbGl6ZXIoc2NoZW1hOiBTY2hlbWEpOiBQbHVnaW4ge1xyXG4gICAgcmV0dXJuIG5ldyBQbHVnaW4oe1xyXG4gICAgICAgIGtleTogbmV3IFBsdWdpbktleShcImN1c3RvbUNsaXBib2FyZFRleHRTZXJpYWxpemVyXCIpLFxyXG4gICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgIGNsaXBib2FyZFRleHRTZXJpYWxpemVyKHNsaWNlKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgYmxvY2tTZXBhcmF0b3IgPSAnXFxuXFxuJyxcclxuICAgICAgICAgICAgICAgICAgICBsZWFmVGV4dDp1bmRlZmluZWQgPSB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dCA9ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlcGFyYXRlZCA9IHRydWVcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGxldCB7IGNvbnRlbnQ6IGZyYWdtZW50IH0gPSBzbGljZSxcclxuICAgICAgICAgICAgICAgICAgICBmcm9tID0gMCxcclxuICAgICAgICAgICAgICAgICAgICB0byA9IGZyYWdtZW50LnNpemVcclxuXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzZXJpYWxpemVOb2RlKG5vZGU6IHBtTm9kZSk6IHN0cmluZyB8IG51bGwge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzZXJpYWxpemVyOiBOb2RlU3BlY1sndG9UZXh0J11cclxuICAgICAgICAgICAgICAgICAgICBpZihzZXJpYWxpemVyID0gc2NoZW1hLm5vZGVzW25vZGUudHlwZS5uYW1lXS5zcGVjLnRvVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplcihub2RlLCAwKSBhcyBzdHJpbmdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmcmFnbWVudC5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIChub2RlLCBwb3MpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc2VyaWFsaXplZFRleHQgPSBzZXJpYWxpemVOb2RlKG5vZGUpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoc2VyaWFsaXplZFRleHQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSBzZXJpYWxpemVkVGV4dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKG5vZGUuaXNUZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgKz0gbm9kZS50ZXh0Py5zbGljZShNYXRoLm1heChmcm9tLCBwb3MpIC0gcG9zLCB0byAtIHBvcykgfHwgJydcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VwYXJhdGVkID0gIWJsb2NrU2VwYXJhdG9yXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYobm9kZS5pc0xlYWYgJiYgbGVhZlRleHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSBsZWFmVGV4dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXBhcmF0ZWQgPSAhYmxvY2tTZXBhcmF0b3JcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZighc2VwYXJhdGVkICYmIG5vZGUuaXNCbG9jaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ICs9IGJsb2NrU2VwYXJhdG9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcGFyYXRlZCA9IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCAwKVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0ZXh0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KVxyXG59IiwiaW1wb3J0IHsgRWRpdG9yVmlldyB9IGZyb20gXCJwcm9zZW1pcnJvci12aWV3XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW1tVHJhbnNhY3Rpb24odmlldzogRWRpdG9yVmlldykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0cjogdmlldy5zdGF0ZS50cixcclxuICAgICAgICBkaXNwYXRjaDogdmlldy5kaXNwYXRjaFxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gXCJwcm9zZW1pcnJvci1jb21tYW5kc1wiO1xyXG5pbXBvcnQgeyBFZGl0b3JTdGF0ZSB9IGZyb20gXCJwcm9zZW1pcnJvci1zdGF0ZVwiO1xyXG5pbXBvcnQgeyBFZGl0b3JWaWV3IH0gZnJvbSBcInByb3NlbWlycm9yLXZpZXdcIjtcclxuaW1wb3J0IHsgRGlzcGF0Y2hGdW5jIH0gZnJvbSBcIi4uXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsQ29tbWFuZHMoLi4uY29tbWFuZHM6IENvbW1hbmRbXSkge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXRlOiBFZGl0b3JTdGF0ZSwgZGlzcGF0Y2g6IERpc3BhdGNoRnVuYywgdmlldzogRWRpdG9yVmlldyk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBjb21tYW5kcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gY29tbWFuZHNbaV0oc3RhdGUsIGRpc3BhdGNoLCB2aWV3KVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgc3RhdGUgPSB2aWV3LnN0YXRlXHJcbiAgICAgICAgICAgIGlmKGkgKyAxID09PSBjb21tYW5kcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgU2NoZW1hLCBET01QYXJzZXIsIERPTVNlcmlhbGl6ZXIsIE5vZGVTcGVjLCBNYXJrU3BlYyB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJ1xyXG5pbXBvcnQgeyBFZGl0b3JTdGF0ZSwgUGx1Z2luLCBUcmFuc2FjdGlvbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJ1xyXG5pbXBvcnQgeyBFZGl0b3JWaWV3IH0gZnJvbSAncHJvc2VtaXJyb3ItdmlldydcclxuaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnLi9ldmVudEVtaXR0ZXInXHJcbmltcG9ydCB7XHJcbiAgICBFZGl0b3JPcHRpb25zLCBFeHRlbnNpb25cclxufSBmcm9tICcuL3R5cGVzJ1xyXG5pbXBvcnQgeyBrZXltYXAgfSBmcm9tICdwcm9zZW1pcnJvci1rZXltYXAnXHJcbmltcG9ydCB7IElucHV0UnVsZSwgaW5wdXRSdWxlcyB9IGZyb20gJ3Byb3NlbWlycm9yLWlucHV0cnVsZXMnXHJcbmltcG9ydCB7IGdldENsaXBib2FyZFRleHRTZXJpYWxpemVyIH0gZnJvbSAnLi9jb21tb24vY2xpcGJvYXJkVGV4dFNlcmlhbGl6ZXInXHJcbmltcG9ydCB7IEV4dGVuc2lvblJlc29sdmVyIH0gZnJvbSAnLi9leHRlbnNpb25SZXNvbHZlcidcclxuaW1wb3J0IHsgZWxlbWVudEZyb21TdHJpbmcgfSBmcm9tICcuL3V0aWxzL2VsZW1lbnRGcm9tU3RyaW5nJ1xyXG5cclxuZXhwb3J0IGNsYXNzIEVkaXRvciBleHRlbmRzIEV2ZW50RW1pdHRlciAge1xyXG5cclxuICAgIHByaXZhdGUgb3B0aW9uczogRWRpdG9yT3B0aW9ucyA9IHtcclxuICAgICAgICBkb206IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxyXG4gICAgICAgIGNvbnRlbnQ6ICcnLFxyXG4gICAgICAgIGV4dGVuc2lvbnM6IG5ldyBBcnJheTxFeHRlbnNpb24+KCksXHJcbiAgICAgICAgb25DcmVhdGU6ICgpID0+IG51bGwsXHJcbiAgICAgICAgb25VcGRhdGU6ICgpID0+IG51bGwsXHJcbiAgICAgICAgb25TZWxlY3Rpb25VcGRhdGU6ICgpID0+IG51bGwsXHJcbiAgICAgICAgb25EZXN0cm95OiAoKSA9PiBudWxsLFxyXG4gICAgfVxyXG5cclxuICAgIHNjaGVtYTogU2NoZW1hXHJcblxyXG4gICAgcHVibGljIHZpZXc6IEVkaXRvclZpZXdcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBFZGl0b3JPcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIoKVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEB0b2RvIG1lbnUg55qE5aSE55CG6YC76L6RXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpXHJcbiAgICAgICAgdGhpcy5jcmVhdGVWaWV3KClcclxuICAgICAgICB0aGlzLm9uKCdjcmVhdGUnLCB0aGlzLm9wdGlvbnMub25DcmVhdGUpXHJcbiAgICAgICAgdGhpcy5vbigndXBkYXRlJywgdGhpcy5vcHRpb25zLm9uVXBkYXRlKVxyXG4gICAgICAgIHRoaXMub24oJ3NlbGVjdGlvbiB1cGRhdGUnLCB0aGlzLm9wdGlvbnMub25TZWxlY3Rpb25VcGRhdGUpXHJcbiAgICAgICAgdGhpcy5vbignZGVzdHJveScsIHRoaXMub3B0aW9ucy5vbkRlc3Ryb3kpXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRPcHRpb25zKG9wdGlvbnM6IEVkaXRvck9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIC4uLnRoaXMub3B0aW9ucyxcclxuICAgICAgICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB7IGRvbSB9ID0gdGhpcy5vcHRpb25zXHJcblxyXG4gICAgICAgIGRvbS5zcGVsbGNoZWNrID0gZmFsc2VcclxuICAgICAgICAvLyBsZXQgbWVudUNvbnRhaW5lciA9IHRoaXMub3B0aW9ucy5kb20uYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykpXHJcbiAgICAgICAgZG9tLnNldEF0dHJpYnV0ZSgnZGF0YS13ZWRpdG9yLWNvbnRhaW5lcicsICd0cnVlJylcclxuICAgICAgICBkb20udGFiSW5kZXggPSAtMVxyXG4gICAgICAgIGRvbS5vbmZvY3VzID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBkb20uY2xhc3NMaXN0LmFkZCgnY29udGFpbmVyLWZvY3VzJylcclxuICAgICAgICAgICAgdGhpcy52aWV3LmZvY3VzKClcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjcmVhdGVWaWV3KCkge1xyXG4gICAgICAgIC8vcGx1Z2luXHJcbiAgICAgICAgY29uc3QgcmVzb2x2ZXIgPSBuZXcgRXh0ZW5zaW9uUmVzb2x2ZXIodGhpcy5vcHRpb25zLmV4dGVuc2lvbnMsIHRoaXMpXHJcbiAgICAgICAgbGV0IHsgc2NoZW1hIH0gPSByZXNvbHZlclxyXG4gICAgICAgIC8vIHBsdWdpbnMucHVzaChnZXRDbGlwYm9hcmRUZXh0U2VyaWFsaXplcihzY2hlbWEpKVxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHBsdWdpbnMpXHJcbiAgICAgICAgdGhpcy5zY2hlbWEgPSBzY2hlbWFcclxuICAgICAgICBjb25zb2xlLmxvZyhlbGVtZW50RnJvbVN0cmluZyh0aGlzLm9wdGlvbnMuY29udGVudCkpXHJcbiAgICAgICAgdGhpcy52aWV3ID0gbmV3IEVkaXRvclZpZXcodGhpcy5vcHRpb25zLmRvbSwge1xyXG4gICAgICAgICAgICBzdGF0ZTogRWRpdG9yU3RhdGUuY3JlYXRlKHtcclxuICAgICAgICAgICAgICAgIGRvYzogRE9NUGFyc2VyLmZyb21TY2hlbWEodGhpcy5zY2hlbWEpLnBhcnNlKGVsZW1lbnRGcm9tU3RyaW5nKHRoaXMub3B0aW9ucy5jb250ZW50KSksXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBkaXNwYXRjaFRyYW5zYWN0aW9uOiB0aGlzLmRpc3BhdGNoSW5uZXIuYmluZCh0aGlzKVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIGNvbnN0IG5ld1N0YXRlID0gdGhpcy5zdGF0ZS5yZWNvbmZpZ3VyZSh7XHJcbiAgICAgICAgICAgIHBsdWdpbnM6IHJlc29sdmVyLnBsdWdpbnMuY29uY2F0KFtnZXRDbGlwYm9hcmRUZXh0U2VyaWFsaXplcihzY2hlbWEpXSlcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICB0aGlzLnZpZXcudXBkYXRlU3RhdGUobmV3U3RhdGUpXHJcbiAgICAgICAgdGhpcy5lbWl0KCdjcmVhdGUnLCB7IGVkaXRvcjogdGhpcyB9KVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZGlzcGF0Y2hJbm5lcih0cjogVHJhbnNhY3Rpb24pIHtcclxuICAgICAgICBsZXQgbmV3U3RhdGUgPSB0aGlzLnN0YXRlLmFwcGx5KHRyKSxcclxuICAgICAgICAgICAgc2VsQ2hhbmdlID0gIXRoaXMuc3RhdGUuc2VsZWN0aW9uLmVxKG5ld1N0YXRlLnNlbGVjdGlvbilcclxuXHJcbiAgICAgICAgdGhpcy52aWV3LnVwZGF0ZVN0YXRlKG5ld1N0YXRlKVxyXG4gICAgICAgIGlmKHNlbENoYW5nZSkge1xyXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3NlbGVjdGlvbiBjaGFuZ2UnLCB7XHJcbiAgICAgICAgICAgICAgICBlZGl0b3I6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICB0clxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5lbWl0KCd1cGRhdGUnLCB7IFxyXG4gICAgICAgICAgICAgICAgZWRpdG9yOiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgdHIgXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIGVkaXRvciBldmVudCAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbiAgICBwdWJsaWMgZ2V0IHN0YXRlKCk6IEVkaXRvclN0YXRlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy52aWV3LnN0YXRlXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5lbWl0KCdkZXN0cm95JylcclxuICAgICAgICB0aGlzLnZpZXcgJiYgdGhpcy52aWV3LmRlc3Ryb3koKVxyXG4gICAgICAgIHRoaXMuZGVzdG9yeUFsbExpc3RlbmVycygpXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5cclxuIiwiLyoqXHJcbiAqIEB0b2RvXHJcbiAqIOS6i+S7tumYn+WIl1xyXG4gKi9cclxuXHJcbmV4cG9ydCBjbGFzcyBFdmVudEVtaXR0ZXIge1xyXG4gICAgcHJpdmF0ZSBoYW5kbGVyczogeyBba2V5OiBzdHJpbmddOiBGdW5jdGlvbltdIH0gPSB7fVxyXG5cclxuICAgIHB1YmxpYyBvbihldmVudDogc3RyaW5nLCBmbjogRnVuY3Rpb24pOiB0aGlzIHtcclxuICAgICAgICBpZighdGhpcy5oYW5kbGVyc1tldmVudF0pIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVyc1tldmVudF0gPSBbXVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5oYW5kbGVyc1tldmVudF0ucHVzaChmbilcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW1pdEFzeW5jKGV2ZW50OiBzdHJpbmcsIC4uLmFyZ3M6IGFueSk6IHRoaXMge1xyXG4gICAgICAgIGNvbnN0IGhhbmRsZXJzID0gdGhpcy5oYW5kbGVyc1tldmVudF1cclxuICAgICAgICBcclxuICAgICAgICBsZXQgYXdhaXRGdW5jID0gbmV3IEFycmF5PFByb21pc2U8dm9pZD4+KClcclxuICAgICAgICBpZihoYW5kbGVycykge1xyXG4gICAgICAgICAgICBoYW5kbGVycy5mb3JFYWNoKGhhbmRsZXIgPT4ge1xyXG4gICAgICAgICAgICAgICAgYXdhaXRGdW5jLnB1c2gobmV3IFByb21pc2U8dm9pZD4oKHJlcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuYXBwbHkodGhpcywgYXJncylcclxuICAgICAgICAgICAgICAgICAgICByZXMoKVxyXG4gICAgICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFByb21pc2UuYWxsKGF3YWl0RnVuYylcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW1pdChldmVudDogc3RyaW5nLCAuLi5hcmdzOiBhbnkpOiB0aGlzIHtcclxuICAgICAgICBjb25zdCBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnNbZXZlbnRdXHJcblxyXG4gICAgICAgIGlmKGhhbmRsZXJzKSB7XHJcbiAgICAgICAgICAgIGhhbmRsZXJzLmZvckVhY2goaGFuZGxlciA9PiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyLmFwcGx5KGV2ZW50LCBhcmdzKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb2ZmKGV2ZW50OiBzdHJpbmcsIGZuPzogRnVuY3Rpb24pIHtcclxuICAgICAgICBjb25zdCBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnNbZXZlbnRdXHJcblxyXG4gICAgICAgIGlmKGhhbmRsZXJzKSB7XHJcbiAgICAgICAgICAgIGlmKGZuKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZXJzW2V2ZW50XSA9IGhhbmRsZXJzLmZpbHRlcihoYW5kbGVyID0+IGhhbmRsZXIgIT09IGZuKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuaGFuZGxlcnNbZXZlbnRdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGRlc3RvcnlBbGxMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVycyA9IHt9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBFZGl0b3IgfSBmcm9tIFwiQGVkaXRvclwiO1xyXG5pbXBvcnQgeyBNYXJrU3BlYywgTm9kZVNwZWMsIHBtTWFyaywgcG1Ob2RlLCBTY2hlbWEgfSBmcm9tIFwicHJvc2VtaXJyb3ItbW9kZWxcIjtcclxuaW1wb3J0IHsgRXh0ZW5zaW9ucyB9IGZyb20gXCJAZWRpdG9yL2NvcmVcIjtcclxuaW1wb3J0IHsgZ2V0VHlwZSB9IGZyb20gXCIuL3V0aWxzL2dldFR5cGVcIjtcclxuaW1wb3J0IHsgUGx1Z2luIH0gZnJvbSBcInByb3NlbWlycm9yLXN0YXRlXCI7XHJcbmltcG9ydCB7IGJpbmRGdW5jIH0gZnJvbSBcIi4vdXRpbHMvYmluZEZ1bmNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBFeHRlbnNpb25SZXNvbHZlciB7XHJcblxyXG4gICAgZWRpdG9yOiBFZGl0b3JcclxuXHJcbiAgICBzY2hlbWE6IFNjaGVtYVxyXG5cclxuICAgIGV4dGVuc2lvbnM6IEV4dGVuc2lvbnNcclxuICAgIC8v5q+P5LiqZXh0ZW5zaW9u5Y+q5pyJ5LiA5Liqbm9kZXPkuI5tYXJrc1xyXG4gICAgY29uc3RydWN0b3IoZXh0ZW5zaW9uczogRXh0ZW5zaW9ucywgZWRpdG9yOiBFZGl0b3IpIHtcclxuICAgICAgICB0aGlzLmV4dGVuc2lvbnMgPSBleHRlbnNpb25zXHJcbiAgICAgICAgdGhpcy5lZGl0b3IgPSBlZGl0b3JcclxuXHJcbiAgICAgICAgbGV0IE1hcmtzOiB7IFtuYW1lOiBzdHJpbmddOiBNYXJrU3BlYyB9ID0ge31cclxuICAgICAgICBsZXQgTm9kZXM6IHsgW25hbWU6IHN0cmluZ106IE5vZGVTcGVjIH0gPSB7fVxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiog5aSE55CG5LyY5YWI57qnICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4vKipcclxuICog6buY6K6k5LyY5YWI57qn5Li6MjAwXHJcbiAqL1xyXG4gICAgICAgIHRoaXMuZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnMubWFwKGV4dGVuc2lvbiA9PiB7XHJcbiAgICAgICAgICAgIGV4dGVuc2lvbi5wcmlvcml0eSA9IGV4dGVuc2lvbi5wcmlvcml0eSB8fCAyMDBcclxuICAgICAgICAgICAgcmV0dXJuIGV4dGVuc2lvblxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIChiLnByaW9yaXR5IGFzIG51bWJlcikgLSAoYS5wcmlvcml0eSBhcyBudW1iZXIpXHJcbiAgICAgICAgfSlcclxuXHJcblxyXG4gICAgICAgIHRoaXMuZXh0ZW5zaW9ucy5mb3JFYWNoKGV4dGVuc2lvbiA9PiB7XHJcbiAgICAgICAgICAgIFxyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIOWkhOeQhm5vZGXlkoxtYXJrICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG4gICAgICAgICAgICBzd2l0Y2goZXh0ZW5zaW9uLnR5cGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlICdNQVJLJyA6IHtcclxuICAgICAgICAgICAgICAgICAgICBNYXJrcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLi4uTWFya3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmV4dGVuc2lvbi5tYXJrXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSAnTk9ERScgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgTm9kZXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLk5vZGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5leHRlbnNpb24ubm9kZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLy/liIbliKvlpITnkIbmr4/kuIDkuKpub2Rl5ZKMbWFya1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuc2NoZW1hID0gbmV3IFNjaGVtYSh7XHJcbiAgICAgICAgICAgIG5vZGVzOiBOb2RlcyxcclxuICAgICAgICAgICAgbWFya3M6IE1hcmtzXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgLy/nlJ/miJDmj5Lku7ZcclxuICAgIGdldCBwbHVnaW5zKCk6IEFycmF5PFBsdWdpbj4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV4dGVuc2lvbnNcclxuICAgICAgICAubWFwKGV4dGVuc2lvbiA9PiB7XHJcbiAgICAgICAgICAgIGxldCBwbHVnaW5zID0gbmV3IEFycmF5PFBsdWdpbj4oKVxyXG4gICAgICAgICAgICAvL+e7keWumm5vZGV0eXBlIHwgbWFya3R5cGVcclxuICAgICAgICAgICAgLy8gaWYoZXh0ZW5zaW9uLnR5cGUgIT09ICdQTFVHSU4nKSB7XHJcbiAgICAgICAgICAgICAgICBwbHVnaW5zID0gcGx1Z2lucy5jb25jYXQoYmluZEZ1bmMoZXh0ZW5zaW9uLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yOiB0aGlzLmVkaXRvcixcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBnZXRUeXBlKGV4dGVuc2lvbi50eXBlID09PSAnTUFSSycgPyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uLm1hcmsgYXMgTWFya1NwZWMgOiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uLm5vZGUgYXMgTm9kZVNwZWMsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYSlcclxuICAgICAgICAgICAgICAgIH0pKVxyXG4gICAgICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcGx1Z2lucy5jb25jYXQoZXh0ZW5zaW9uLnBsdWdpbnMgYXMgQXJyYXk8UGx1Z2luPilcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5mbGF0KClcclxuICAgICAgICAuZmlsdGVyKHBsdWdpbiA9PiBwbHVnaW4gIT09IHVuZGVmaW5lZClcclxuICAgIH1cclxuXHJcbn0iLCJpbXBvcnQgeyBOb2RlU3BlYywgU2NoZW1hIH0gZnJvbSAncHJvc2VtaXJyb3ItbW9kZWwnXHJcblxyXG5leHBvcnQge1xyXG4gICAgRXh0ZW5zaW9uLFxyXG4gICAgRGlzcGF0Y2hGdW5jLFxyXG4gICAgRXh0ZW5zaW9ucyxcclxuICAgIEV4dGVuc2lvblR5cGUsXHJcbiAgICBSZWFsaXplXHJcbn0gZnJvbSAnLi90eXBlcydcclxuXHJcbmV4cG9ydCB7XHJcbiAgICBFZGl0b3JcclxufSBmcm9tICcuL2VkaXRvcidcclxuXHJcbmV4cG9ydCB7XHJcbiAgICBFdmVudEVtaXR0ZXJcclxufSBmcm9tICcuL2V2ZW50RW1pdHRlcidcclxuIiwiaW1wb3J0IHsgRWRpdG9yLCBFeHRlbnNpb24gfSBmcm9tIFwiQGVkaXRvci9jb3JlXCI7XHJcbmltcG9ydCB7IGlucHV0UnVsZXMgfSBmcm9tIFwicHJvc2VtaXJyb3ItaW5wdXRydWxlc1wiO1xyXG5pbXBvcnQgeyBrZXltYXAgfSBmcm9tIFwicHJvc2VtaXJyb3Ita2V5bWFwXCI7XHJcbmltcG9ydCB7IE5vZGVUeXBlLCBNYXJrVHlwZSB9IGZyb20gXCJwcm9zZW1pcnJvci1tb2RlbFwiO1xyXG5pbXBvcnQgeyBQbHVnaW4gfSBmcm9tIFwicHJvc2VtaXJyb3Itc3RhdGVcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBiaW5kRnVuYyhleHRlbnNpb246IEV4dGVuc2lvbiwgY29udGV4dDoge1xyXG4gICAgZWRpdG9yOiBFZGl0b3IsXHJcbiAgICB0eXBlOiBOb2RlVHlwZSB8IE1hcmtUeXBlIHwgbnVsbFxyXG59KTogUGx1Z2luW10ge1xyXG4gICAgbGV0IHBsdWdpbnMgPSBuZXcgQXJyYXk8UGx1Z2luPigpXHJcbiAgICBpZihleHRlbnNpb24uaW5wdXRSdWxlcykge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGV4dGVuc2lvbi5pbnB1dFJ1bGVzLmFwcGx5KGNvbnRleHQpKVxyXG4gICAgICAgIHBsdWdpbnMucHVzaChpbnB1dFJ1bGVzKHtcclxuICAgICAgICAgICAgcnVsZXM6IGV4dGVuc2lvbi5pbnB1dFJ1bGVzLmFwcGx5KGNvbnRleHQpXHJcbiAgICAgICAgfSkpXHJcbiAgICB9XHJcbiAgICBpZihleHRlbnNpb24uc2hvcnRjdXRLZXkpIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhleHRlbnNpb24uc2hvcnRjdXRLZXkgICApXHJcbiAgICAgICAgcGx1Z2lucy5wdXNoKFxyXG4gICAgICAgICAgICBrZXltYXAoZXh0ZW5zaW9uLnNob3J0Y3V0S2V5LmFwcGx5KGNvbnRleHQpKVxyXG4gICAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcGx1Z2luc1xyXG59IiwiaW1wb3J0IHsgaHRtbCB9IGZyb20gXCIuL3N0cmluZ1JlbmRlcmVyXCJcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBlbGVtZW50RnJvbVN0cmluZyh0ZXh0OiBzdHJpbmcpOiBIVE1MRWxlbWVudCB7XHJcbiAgICBjb25zb2xlLmxvZyh0ZXh0KVxyXG4gICAgbGV0IHdyYXBwaW5nID0gaHRtbGA8Ym9keT4ke3RleHR9PC9ib2R5PmBcclxuICAgIHJldHVybiBuZXcgd2luZG93LkRPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyh3cmFwcGluZywgJ3RleHQvaHRtbCcpLmJvZHlcclxufSIsImltcG9ydCB7IEV4dGVuc2lvblR5cGUgfSBmcm9tIFwiQGVkaXRvci9jb3JlXCI7XHJcbmltcG9ydCB7IE1hcmtTcGVjLCBOb2RlU3BlYywgU2NoZW1hIH0gZnJvbSBcInByb3NlbWlycm9yLW1vZGVsXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHlwZShvYmo6IHsgW25hbWU6IHN0cmluZ106IE5vZGVTcGVjIHwgTWFya1NwZWMgfSB8IHVuZGVmaW5lZCwgc2NoZW1hOiBTY2hlbWEpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKHNjaGVtYSwgb2JqKVxyXG4gICAgaWYoIW9iaikge1xyXG4gICAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcbiAgICByZXR1cm4gc2NoZW1hLm5vZGVzW09iamVjdC5rZXlzKG9iaiBhcyB7IFtuYW1lOiBzdHJpbmddOiBOb2RlU3BlYyB8IE1hcmtTcGVjIH0pWzBdXVxyXG59IiwiaW1wb3J0IHsgcG1Ob2RlIH0gZnJvbSBcInByb3NlbWlycm9yLW1vZGVsXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVjdXJzaXZlVGV4dFNlcmlhbGl6ZXIoXHJcbiAgICBub2RlOiBwbU5vZGUsXHJcbiAgICBpbmRlbnQ6IG51bWJlcixcclxuICAgIHByZWZpeDogc3RyaW5nID0gJycsXHJcbiAgICBzdWZmaXg6IHN0cmluZyA9ICcnLFxyXG4pXHJcbntcclxuICAgIGNvbnN0IHsgdG9UZXh0IH0gPSBub2RlLnR5cGUuc3BlY1xyXG4gICAgcmV0dXJuIGAke3ByZWZpeH0ke3RvVGV4dCBpbnN0YW5jZW9mIEZ1bmN0aW9uID8gdG9UZXh0KG5vZGUsIGluZGVudCkgOiBub2RlLnRleHRDb250ZW50fSR7c3VmZml4fWBcclxufSIsImV4cG9ydCBjb25zdCBodG1sID0gU3RyaW5nLnJhd1xyXG5cclxuZXhwb3J0IGNvbnN0IGNzcyA9IFN0cmluZy5yYXciLCJpbXBvcnQgeyBleHRlbnNpb25zLCBFZGl0b3IgfSBmcm9tIFwiQGVkaXRvclwiO1xyXG5pbXBvcnQgJ0BlZGl0b3IvY29yZS9pbmRleC5sZXNzJ1xyXG5pbXBvcnQgJ0BlZGl0b3IvbWF0aF9leHRlbnNpb24vaW5kZXgubGVzcydcclxuaW1wb3J0ICdAZWRpdG9yL2NvbW1vbl9leHRlbnNpb24vaW5kZXgubGVzcydcclxuaW1wb3J0IHsgaHRtbCB9IGZyb20gXCJAZWRpdG9yL2NvcmUvdXRpbHMvc3RyaW5nUmVuZGVyZXJcIjtcclxuLy8gaW1wb3J0ICdAZWRpdG9yL25vZGVfbW9kdWxlcy9rYXRleC9kaXN0L2thdGV4Lm1pbi5jc3MnXHJcblxyXG4oPGFueT53aW5kb3cpLmVkaXRvciA9IG5ldyBFZGl0b3Ioe1xyXG4gICAgY29udGVudDogXHJcbiAgICBodG1sYFxyXG4gICAgPHA+bGlzdCB0ZXN0PC9wPlxyXG4gICAgPHVsIHR5cGU9XCJkaXNjXCI+XHJcbiAgICAgICAgPGxpPjxwPui/meaYrzE8L3A+PC9saT5cclxuICAgICAgICA8bGk+PHA+6L+Z5pivMjwvcD48L2xpPlxyXG4gICAgICAgIDxsaT5cclxuICAgICAgICAgICAgPHA+5YaF6YOoPC9wPlxyXG4gICAgICAgICAgICA8dWwgdHlwZT0gXCJjaXJjbGVcIj5cclxuICAgICAgICAgICAgICAgIDxsaT48cD7lhoXpg6gxPC9wPjwvbGk+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgPC9saT5cclxuICAgIDwvdWw+XHJcbiAgICBgLFxyXG4gICAgZG9tOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZWRpdG9yJykgYXMgSFRNTEVsZW1lbnQsXHJcbiAgICBleHRlbnNpb25zLFxyXG4gICAgb25DcmVhdGU6ICgpID0+IG51bGwsXHJcbiAgICBvbkRlc3Ryb3k6ICgpID0+IG51bGwsXHJcbiAgICBvblNlbGVjdGlvblVwZGF0ZTogKCkgPT4gbnVsbCxcclxuICAgIG9uVXBkYXRlOiAoKSA9PiBudWxsLFxyXG59KVxyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlKSA9PiB7XHJcbiAgICBpZihlLmtleSA9PT0gJ1RhYicpIHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgIH1cclxufSlcclxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uIH0gZnJvbSBcIkBlZGl0b3IvY29yZVwiXHJcbi8vIGltcG9ydCB7IElucHV0UnVsZVNwZWMgfSBmcm9tIFwiQGVkaXRvci9jb3JlL3R5cGVzXCJcclxuaW1wb3J0IHsgSW5wdXRSdWxlLCB0ZXh0YmxvY2tUeXBlSW5wdXRSdWxlIH0gZnJvbSBcInByb3NlbWlycm9yLWlucHV0cnVsZXNcIlxyXG5pbXBvcnQgeyBOb2RlVHlwZSwgcG1Ob2RlIH0gZnJvbSBcInByb3NlbWlycm9yLW1vZGVsXCJcclxuXHJcbmV4cG9ydCBjb25zdCBoZWFkaW5nRXh0ZW5zaW9uOiBFeHRlbnNpb24gPSB7XHJcbiAgICB0eXBlOiAnTk9ERScsXHJcbiAgICBub2RlOiB7XHJcbiAgICAgICAgaGVhZGluZzoge1xyXG4gICAgICAgICAgICBncm91cDogJ2Jsb2NrJyxcclxuICAgICAgICAgICAgY29udGVudDogJ2lubGluZSonLFxyXG4gICAgICAgICAgICBkZWZpbmluZzogdHJ1ZSxcclxuICAgICAgICAgICAgYXR0cnM6IHsgbGV2ZWw6IHsgZGVmYXVsdDogMSB9IH0sXHJcbiAgICAgICAgICAgIHBhcnNlRE9NOiBbXHJcbiAgICAgICAgICAgICAgICB7IHRhZzogJ2gxJywgYXR0cnM6IHsgbGV2ZWw6IDEgfSB9LFxyXG4gICAgICAgICAgICAgICAgeyB0YWc6ICdoMicsIGF0dHJzOiB7IGxldmVsOiAyIH0gfSxcclxuICAgICAgICAgICAgICAgIHsgdGFnOiAnaDMnLCBhdHRyczogeyBsZXZlbDogMyB9IH0sXHJcbiAgICAgICAgICAgICAgICB7IHRhZzogJ2g0JywgYXR0cnM6IHsgbGV2ZWw6IDQgfSB9LFxyXG4gICAgICAgICAgICAgICAgeyB0YWc6ICdoNScsIGF0dHJzOiB7IGxldmVsOiA1IH0gfSxcclxuICAgICAgICAgICAgICAgIHsgdGFnOiAnaDYnLCBhdHRyczogeyBsZXZlbDogNiB9IH0sXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIHRvRE9NOiAobm9kZTogcG1Ob2RlKSA9PiBbYGgke25vZGUuYXR0cnMubGV2ZWx9YCwgMF0sXHJcbiAgICAgICAgICAgIHRvVGV4dDogKG5vZGU6IHBtTm9kZSkgPT4gYCR7Z2V0U2hhcnAobm9kZSl9ICR7bm9kZS50ZXh0Q29udGVudH1gXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBpbnB1dFJ1bGVzKCkge1xyXG4gICAgICAgIGxldCBpbnB1dHJ1bGVBcnIgPSBuZXcgQXJyYXk8SW5wdXRSdWxlPigpXHJcblxyXG4gICAgICAgIGZvcihsZXQgaSA9IDE7IGkgPD0gNjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlucHV0cnVsZUFyci5wdXNoKFxyXG4gICAgICAgICAgICAgICAgdGV4dGJsb2NrVHlwZUlucHV0UnVsZShcclxuICAgICAgICAgICAgICAgICAgICBuZXcgUmVnRXhwKGBeKCN7MSwke2l9fSlcXFxccyRgKSxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGUgYXMgTm9kZVR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPT4gKHsgbGV2ZWw6IG1hdGNoWzFdLmxlbmd0aCB9KVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaW5wdXRydWxlQXJyXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIGZ1bmN0aW9uIGdldFNpeEhlYWRpbmcoKSB7XHJcbi8vICAgICBsZXQgaW5wdXRydWxlQXJyID0gbmV3IEFycmF5PElucHV0UnVsZVNwZWM+KClcclxuXHJcbi8vICAgICBmb3IobGV0IGkgPSAxOyBpIDw9IDY7IGkrKykge1xyXG4vLyAgICAgICAgIGlucHV0cnVsZUFyci5wdXNoKHtcclxuLy8gICAgICAgICAgICAgbm9kZU5hbWU6ICdoZWFkaW5nJyxcclxuLy8gICAgICAgICAgICAgcmVnZXg6IG5ldyBSZWdFeHAoYF4oI3sxLCR7aX19KVxcXFxzJGApLFxyXG4vLyAgICAgICAgICAgICBnZXRBdHRyOiBtYXRjaCA9PiAoeyBsZXZlbDogbWF0Y2hbMV0ubGVuZ3RoIH0pLFxyXG4vLyAgICAgICAgICAgICBydWxlV3JhcDogdGV4dGJsb2NrVHlwZUlucHV0UnVsZSxcclxuLy8gICAgICAgICB9KVxyXG4vLyAgICAgfVxyXG5cclxuLy8gICAgIHJldHVybiBpbnB1dHJ1bGVBcnJcclxuLy8gfVxyXG5cclxuZnVuY3Rpb24gZ2V0U2hhcnAobm9kZTogcG1Ob2RlKSB7XHJcbiAgICBsZXQgc3RyID0gJydcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2cobm9kZS5hdHRycy5sZXZlbClcclxuICAgIGZvcihsZXQgaSA9IDA7ICBpIDwgbm9kZS5hdHRycy5sZXZlbDsgaSsrKSB7XHJcbiAgICAgICAgc3RyICs9ICcjJ1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0clxyXG59IiwiaW1wb3J0IHsgRXh0ZW5zaW9uIH0gZnJvbSAnLi9jb3JlJ1xyXG5pbXBvcnQgeyBtYXRoRXh0ZW5zaW9ucyB9IGZyb20gJy4vbWF0aF9leHRlbnNpb24nXHJcbmltcG9ydCB7IGNvbW1vbkV4dGVuc2lvbnMgfSBmcm9tICcuL2NvbW1vbl9leHRlbnNpb24nXHJcbmltcG9ydCB7IGhlYWRpbmdFeHRlbnNpb24gfSBmcm9tICcuL2hlYWRpbmdfZXh0ZW5zaW9uJ1xyXG5pbXBvcnQgeyBsaXN0RXh0ZW5zaW9ucyB9IGZyb20gJy4vbGlzdF9leHRlbnNpb24nXHJcbmV4cG9ydCB7XHJcbiAgICBFZGl0b3JcclxufSBmcm9tICcuL2NvcmUnXHJcblxyXG5sZXQgZXh0ZW5zaW9ucyA9IEFycmF5PEV4dGVuc2lvbj4oKVxyXG5cclxuZXh0ZW5zaW9ucy5wdXNoKFxyXG4gICAgLi4uY29tbW9uRXh0ZW5zaW9ucyxcclxuICAgIC4uLm1hdGhFeHRlbnNpb25zLFxyXG4gICAgaGVhZGluZ0V4dGVuc2lvbixcclxuICAgIC4uLmxpc3RFeHRlbnNpb25zLCAgXHJcbilcclxuXHJcbi8vIGNvbnNvbGUubG9nKGV4dGVuc2lvbnMpXHJcblxyXG5leHBvcnQgeyBleHRlbnNpb25zIH0iLCJpbXBvcnQgeyBEaXNwYXRjaEZ1bmMgfSBmcm9tIFwiQGVkaXRvci9jb3JlXCI7XHJcbmltcG9ydCB7IEJhY2tzcGFjZSB9IGZyb20gXCJAZWRpdG9yL2NvcmUvY29tbW9uL2Jhc2ljS2V5bWFwXCI7XHJcbmltcG9ydCB7IHNlcmlhbENvbW1hbmRzIH0gZnJvbSBcIkBlZGl0b3IvY29yZS9jb21tb24vc2VyaWFsQ29tbWFuZHNcIjtcclxuaW1wb3J0IHsgY2hhaW5Db21tYW5kcywgQ29tbWFuZCB9IGZyb20gXCJwcm9zZW1pcnJvci1jb21tYW5kc1wiO1xyXG5pbXBvcnQgeyBOb2RlVHlwZSwgcG1Ob2RlLCBTbGljZSB9IGZyb20gXCJwcm9zZW1pcnJvci1tb2RlbFwiO1xyXG5pbXBvcnQgeyBFZGl0b3JTdGF0ZSB9IGZyb20gXCJwcm9zZW1pcnJvci1zdGF0ZVwiO1xyXG5pbXBvcnQgeyBFZGl0b3JWaWV3IH0gZnJvbSBcInByb3NlbWlycm9yLXZpZXdcIjtcclxuaW1wb3J0IHsgbGlmdExpc3RJdGVtIH0gZnJvbSBcIi4vbGlmdExpc3RJdGVtXCI7XHJcbmltcG9ydCB7IHNpbmtMaXN0SXRlbSB9IGZyb20gXCIuL3NpbmtMaXN0SXRlbVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZUxpc3RJdGVtKGl0ZW1UeXBlOiBOb2RlVHlwZSwgdmlldzogRWRpdG9yVmlldyk6IENvbW1hbmQge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXRlOiBFZGl0b3JTdGF0ZSwgZGlzcGF0Y2g6IERpc3BhdGNoRnVuYykge1xyXG4gICAgICAgIGxldCB7ICRmcm9tLCAkdG8gfSA9IHN0YXRlLnNlbGVjdGlvbixcclxuICAgICAgICAgICAgZ3JhbmRQYXJlbnQgPSAkZnJvbS5ub2RlKC0xKSBcclxuICAgICAgICBcclxuICAgICAgICBpZihcclxuICAgICAgICAgICAgJGZyb20uZGVwdGggPCAyIHx8XHJcbiAgICAgICAgICAgIGdyYW5kUGFyZW50LnR5cGUgIT09IGl0ZW1UeXBlIHx8XHJcbiAgICAgICAgICAgICgkZnJvbS5wYXJlbnQudHlwZSAhPT0gaXRlbVR5cGUgJiYgICRmcm9tLmluZGV4KC0xKSAhPT0gMCkgfHxcclxuICAgICAgICAgICAgISRmcm9tLnNhbWVQYXJlbnQoJHRvKSAgfHxcclxuICAgICAgICAgICAgJGZyb20ucGFyZW50T2Zmc2V0IFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8v5aaC5p6c6KKr5LiK5LiA5bGC5bWM5aWX5oiW6ICF5Zyo5byA5aS0XHJcbiAgICAgICAgaWYoXHJcbiAgICAgICAgICAgICgoZ3JhbmRQYXJlbnQudHlwZSA9PT0gaXRlbVR5cGUgJiZcclxuICAgICAgICAgICAgJGZyb20ucGFyZW50LmNoaWxkQ291bnQpIHx8XHJcbiAgICAgICAgICAgICgkZnJvbS5ub2RlKC01KSAmJiBcclxuICAgICAgICAgICAgJGZyb20ubm9kZSgtNSkudHlwZSA9PT0gaXRlbVR5cGUpKSAmJlxyXG4gICAgICAgICAgICAhJGZyb20uaW5kZXgoLTIpXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGxldCB3cmFwcGVyTm9kZSA9ICRmcm9tLm5vZGUoLTIpXHJcbiAgICAgICAgICAgIGlmKHdyYXBwZXJOb2RlLmZpcnN0Q2hpbGQ/LnR5cGUgPT09IGl0ZW1UeXBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGlmdExpc3RJdGVtKGl0ZW1UeXBlKShzdGF0ZSwgZGlzcGF0Y2gpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlpoLmnpzkuIrkuIDlsYLooqvltYzlpZfvvIzliJnmj5LlhaXkuIrkuIDkvqfmnKvlsL5cclxuICAgICAgICAgKi9cclxuICAgICAgICAvLyBjb25zb2xlLmxvZygkZnJvbS5ub2RlQmVmb3JlPy5sYXN0Q2hpbGQpXHJcbiAgICAgICAgLy8gbGV0IGJlZm9yZUl0ZW0gPSBzdGF0ZS5kb2MucmVzb2x2ZSgkZnJvbS5iZWZvcmUoLTEpKS5ub2RlQmVmb3JlIGFzIHBtTm9kZSxcclxuICAgICAgICAvLyAgICAgbGFzdENoaWxkT2ZCZWZvcmVJdGVtID0gYmVmb3JlSXRlbSAmJiBiZWZvcmVJdGVtLmxhc3RDaGlsZCBhcyBwbU5vZGUsXHJcbiAgICAgICAgLy8gICAgIGxhc3ROZXN0ZWQgPSBsYXN0Q2hpbGRPZkJlZm9yZUl0ZW0gJiYgbGFzdENoaWxkT2ZCZWZvcmVJdGVtLmNvbnRlbnQuY2hpbGQoMCkudHlwZSA9PT0gaXRlbVR5cGVcclxuICAgICAgICAvL+WmguaenOWSjOS4iuS4gOWxguWQjOe6p1xyXG4gICAgICAgIHJldHVybiBzZXJpYWxDb21tYW5kcyhcclxuICAgICAgICAgICAgLy8gbGFzdE5lc3RlZCA/IFxyXG4gICAgICAgICAgICAvLyBzaW5rTGlzdEl0ZW0oaXRlbVR5cGUpIDpcclxuICAgICAgICAgICAgLy8gKHN0YXRlLCBkaXNwYXRjaCkgPT4gdHJ1ZSxcclxuICAgICAgICAgICAgQmFja3NwYWNlLFxyXG4gICAgICAgICAgICBCYWNrc3BhY2VcclxuICAgICAgICApKHN0YXRlLCBkaXNwYXRjaCwgdmlldylcclxuICAgIH1cclxufSIsImltcG9ydCB7IERpc3BhdGNoRnVuYywgUmVhbGl6ZSB9IGZyb20gXCJAZWRpdG9yL2NvcmVcIjtcclxuaW1wb3J0IHsgdXNlRmFrZVNlcnZlciB9IGZyb20gXCJjeXByZXNzL3R5cGVzL3Npbm9uXCI7XHJcbmltcG9ydCB7IENvbW1hbmQgfSBmcm9tIFwicHJvc2VtaXJyb3ItY29tbWFuZHNcIjtcclxuaW1wb3J0IHsgRnJhZ21lbnQsIE5vZGVSYW5nZSwgTm9kZVR5cGUsIHBtTm9kZSwgU2xpY2UgfSBmcm9tIFwicHJvc2VtaXJyb3ItbW9kZWxcIjtcclxuaW1wb3J0IHsgRWRpdG9yU3RhdGUgfSBmcm9tIFwicHJvc2VtaXJyb3Itc3RhdGVcIjtcclxuaW1wb3J0IHsgUmVwbGFjZUFyb3VuZFN0ZXAsIGxpZnRUYXJnZXQgfSBmcm9tICdwcm9zZW1pcnJvci10cmFuc2Zvcm0nXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbGlmdExpc3RJdGVtKGl0ZW1UeXBlOiBOb2RlVHlwZSk6IENvbW1hbmQge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXRlOiBFZGl0b3JTdGF0ZSwgZGlzcGF0Y2g6IERpc3BhdGNoRnVuYykge1xyXG4gICAgICAgIGxldCB7ICRmcm9tLCAkdG8gfSA9IHN0YXRlLnNlbGVjdGlvbixcclxuICAgICAgICAgICAgcmFuZ2UgPSAkZnJvbS5ibG9ja1JhbmdlKCR0bywgbm9kZSA9PiAhIW5vZGUuY2hpbGRDb3VudCAmJiBub2RlLmZpcnN0Q2hpbGQ/LnR5cGUgPT09IGl0ZW1UeXBlKVxyXG4gICAgICAgIGlmKCFyYW5nZSkgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgaWYoIWRpc3BhdGNoKSByZXR1cm4gdHJ1ZVxyXG4gICAgICAgIGlmKCRmcm9tLm5vZGUocmFuZ2UuZGVwdGggLSAxKS50eXBlID09PSBpdGVtVHlwZSlcclxuICAgICAgICAgICAgcmV0dXJuIGxpZnRUb091dGVyTGlzdChzdGF0ZSwgZGlzcGF0Y2gsIGl0ZW1UeXBlLCByYW5nZSlcclxuICAgICAgICBlbHNlIFxyXG4gICAgICAgICAgICByZXR1cm4gbGlmdE91dE9mTGlzdChzdGF0ZSwgZGlzcGF0Y2gsIHJhbmdlKVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBsaWZ0VG9PdXRlckxpc3QoXHJcbiAgICBzdGF0ZTogRWRpdG9yU3RhdGUsXHJcbiAgICBkaXNwYXRjaDogRGlzcGF0Y2hGdW5jLFxyXG4gICAgaXRlbVR5cGU6IE5vZGVUeXBlLFxyXG4gICAgcmFuZ2U6IE5vZGVSYW5nZSBcclxuKTogYm9vbGVhbiB7XHJcbiAgICBsZXQgeyB0ciB9ID0gc3RhdGUsXHJcbiAgICAgICAgeyBlbmQgfSA9IHJhbmdlLFxyXG4gICAgICAgIGVuZE9mTGlzdCA9IHJhbmdlLiR0by5lbmQocmFuZ2UuZGVwdGgpXHJcbiAgICBpZihlbmQgPCBlbmRPZkxpc3QpIHtcclxuICAgICAgICB0ci5zdGVwKFxyXG4gICAgICAgICAgICBuZXcgUmVwbGFjZUFyb3VuZFN0ZXAoXHJcbiAgICAgICAgICAgICAgICBlbmQgLSAxLFxyXG4gICAgICAgICAgICAgICAgZW5kT2ZMaXN0LFxyXG4gICAgICAgICAgICAgICAgZW5kLFxyXG4gICAgICAgICAgICAgICAgZW5kT2ZMaXN0LFxyXG4gICAgICAgICAgICAgICAgbmV3IFNsaWNlKFxyXG4gICAgICAgICAgICAgICAgICAgIEZyYWdtZW50LmZyb20oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1UeXBlLmNyZWF0ZShudWxsLCByYW5nZS5wYXJlbnQuY29weSgpKVxyXG4gICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgMSxcclxuICAgICAgICAgICAgICAgICAgICAwXHJcbiAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgMSxcclxuICAgICAgICAgICAgICAgIHRydWVcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIClcclxuICAgICAgICByYW5nZSA9IG5ldyBOb2RlUmFuZ2UoXHJcbiAgICAgICAgICAgIHRyLmRvYy5yZXNvbHZlKHJhbmdlLiRmcm9tLnBvcyksXHJcbiAgICAgICAgICAgIHRyLmRvYy5yZXNvbHZlKGVuZE9mTGlzdCksXHJcbiAgICAgICAgICAgIHJhbmdlLmRlcHRoXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG5cclxuICAgIGRpc3BhdGNoICYmIGRpc3BhdGNoKHRyLmxpZnQocmFuZ2UsIGxpZnRUYXJnZXQocmFuZ2UpIGFzIG51bWJlcikuc2Nyb2xsSW50b1ZpZXcoKSlcclxuICAgIHJldHVybiB0cnVlXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxpZnRPdXRPZkxpc3QoXHJcbiAgICBzdGF0ZTogRWRpdG9yU3RhdGUsXHJcbiAgICBkaXNwYXRjaDogRGlzcGF0Y2hGdW5jLFxyXG4gICAgcmFuZ2U6IE5vZGVSYW5nZVxyXG4pOiBib29sZWFuIHtcclxuICAgIGxldCB7IHRyIH0gPSBzdGF0ZSxcclxuICAgICAgICBsaXN0ID0gcmFuZ2UucGFyZW50XHJcblxyXG4gICAgZm9yKGxldCBwb3MgPSByYW5nZS5lbmQsIGkgPSByYW5nZS5lbmRJbmRleCAtIDEsIGUgPSByYW5nZS5zdGFydEluZGV4OyBpID4gZTsgaS0tKSB7XHJcbiAgICAgICAgcG9zIC09IGxpc3QuY2hpbGQoaSkubm9kZVNpemVcclxuICAgICAgICB0ci5kZWxldGUocG9zIC0gMSwgcG9zICsgMSlcclxuICAgIH1cclxuICAgIGxldCAkc3RhcnQgPSB0ci5kb2MucmVzb2x2ZShyYW5nZS5zdGFydCksXHJcbiAgICAgICAgaXRlbSA9ICRzdGFydC5ub2RlQWZ0ZXIgYXMgcG1Ob2RlXHJcblxyXG4gICAgaWYodHIubWFwcGluZy5tYXAocmFuZ2UuZW5kKSAhPT0gcmFuZ2Uuc3RhcnQgKyAoaXRlbS5ub2RlU2l6ZSBhcyBudW1iZXIpKSBcclxuICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgIGxldCBhdFN0YXJ0ID0gcmFuZ2Uuc3RhcnRJbmRleCA9PT0gMCxcclxuICAgICAgICBhdEVuZCA9IHJhbmdlLmVuZEluZGV4ID09PSBsaXN0LmNoaWxkQ291bnQsXHJcbiAgICAgICAgcGFyZW50ID0gJHN0YXJ0Lm5vZGUoLTEpLFxyXG4gICAgICAgIGluZGV4QmVmb3JlID0gJHN0YXJ0LmluZGV4KC0xKVxyXG4gICAgXHJcbiAgICBpZihcclxuICAgICAgICAhcGFyZW50LmNhblJlcGxhY2UoXHJcbiAgICAgICAgICAgIGluZGV4QmVmb3JlICsgKGF0U3RhcnQgPyAwIDogMSksXHJcbiAgICAgICAgICAgIGluZGV4QmVmb3JlICsgMSxcclxuICAgICAgICAgICAgaXRlbS5jb250ZW50LmFwcGVuZChcclxuICAgICAgICAgICAgICAgIGF0RW5kID8gRnJhZ21lbnQuZW1wdHkgOiBGcmFnbWVudC5mcm9tKGxpc3QpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApXHJcbiAgICApIHtcclxuICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgIH1cclxuXHJcbiAgICBsZXQgc3RhcnQgPSAkc3RhcnQucG9zLFxyXG4gICAgICAgIGVuZCA9IHN0YXJ0ICsgaXRlbS5ub2RlU2l6ZVxyXG4gICAgdHIuc3RlcChcclxuICAgICAgICBuZXcgUmVwbGFjZUFyb3VuZFN0ZXAoXHJcbiAgICAgICAgICAgIHN0YXJ0IC0gKGF0U3RhcnQgPyAxIDogMCksXHJcbiAgICAgICAgICAgIGVuZCArIChhdEVuZCA/IDEgOiAwKSxcclxuICAgICAgICAgICAgc3RhcnQgKyAxLFxyXG4gICAgICAgICAgICBlbmQgLSAxLFxyXG4gICAgICAgICAgICBuZXcgU2xpY2UoXHJcbiAgICAgICAgICAgICAgICAoYXRTdGFydCA/IEZyYWdtZW50LmVtcHR5IDogRnJhZ21lbnQuZnJvbShsaXN0LmNvcHkoRnJhZ21lbnQuZW1wdHkpKSlcclxuICAgICAgICAgICAgICAgIC5hcHBlbmQoYXRFbmQgPyBGcmFnbWVudC5lbXB0eSA6IEZyYWdtZW50LmZyb20obGlzdC5jb3B5KEZyYWdtZW50LmVtcHR5KSkpLFxyXG4gICAgICAgICAgICAgICAgYXRTdGFydCA/IDAgOiAxLFxyXG4gICAgICAgICAgICAgICAgYXRFbmQgPyAwIDogMVxyXG4gICAgICAgICAgICApLFxyXG4gICAgICAgICAgICBhdFN0YXJ0ID8gMCA6IDEsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICApXHJcbiAgICApXHJcblxyXG4gICAgaWYoZGlzcGF0Y2gpIHtcclxuICAgICAgICBkaXNwYXRjaCh0ci5zY3JvbGxJbnRvVmlldygpKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWVcclxufSIsImltcG9ydCB7IERpc3BhdGNoRnVuYyB9IGZyb20gXCJAZWRpdG9yL2NvcmVcIjtcclxuaW1wb3J0IHsgRW50ZXIgfSBmcm9tIFwiQGVkaXRvci9jb3JlL2NvbW1vbi9iYXNpY0tleW1hcFwiO1xyXG5pbXBvcnQgeyBDb21tYW5kIH0gZnJvbSBcInByb3NlbWlycm9yLWNvbW1hbmRzXCI7XHJcbmltcG9ydCB7IEZyYWdtZW50LCBOb2RlUmFuZ2UsIE5vZGVUeXBlLCBTbGljZSB9IGZyb20gXCJwcm9zZW1pcnJvci1tb2RlbFwiO1xyXG5pbXBvcnQgeyBFZGl0b3JTdGF0ZSB9IGZyb20gXCJwcm9zZW1pcnJvci1zdGF0ZVwiO1xyXG5pbXBvcnQgeyBSZXBsYWNlQXJvdW5kU3RlcCwgZmluZFdyYXBwaW5nIH0gZnJvbSAncHJvc2VtaXJyb3ItdHJhbnNmb3JtJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG5ld0xpbmVJbkxpc3QoaXRlbVR5cGU6IE5vZGVUeXBlKTogQ29tbWFuZCB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RhdGU6IEVkaXRvclN0YXRlLCBkaXNwYXRjaDogRGlzcGF0Y2hGdW5jKSB7XHJcbiAgICAgICAgbGV0IHsgJGZyb20sICR0byB9ID0gc3RhdGUuc2VsZWN0aW9uLFxyXG4gICAgICAgICAgICB7IHBhcmVudCB9ID0gJGZyb20sXHJcbiAgICAgICAgICAgIGdyYW5kUGFyZW50ID0gJGZyb20ubm9kZSgtMSksXHJcbiAgICAgICAgICAgIHdyYXBUeXBlID0gJGZyb20ucGFyZW50LnR5cGVcclxuICAgICAgICAvL+WmguaenOS4jeWcqGxpc3TkuK1cclxuICAgICAgICBpZihcclxuICAgICAgICAgICAgJGZyb20uZGVwdGggPCAyIHx8XHJcbiAgICAgICAgICAgIGdyYW5kUGFyZW50LnR5cGUgIT09IGl0ZW1UeXBlIHx8XHJcbiAgICAgICAgICAgICEkZnJvbS5zYW1lUGFyZW50KCR0bykgXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIEVudGVyKHN0YXRlLCBkaXNwYXRjaClcclxuICAgIH1cclxufSIsImltcG9ydCB7IERpc3BhdGNoRnVuYyB9IGZyb20gXCJAZWRpdG9yL2NvcmVcIjtcclxuaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gXCJwcm9zZW1pcnJvci1jb21tYW5kc1wiO1xyXG5pbXBvcnQgeyBGcmFnbWVudCwgTm9kZVR5cGUsIHBtTm9kZSwgU2xpY2UgfSBmcm9tIFwicHJvc2VtaXJyb3ItbW9kZWxcIjtcclxuaW1wb3J0IHsgRWRpdG9yU3RhdGUgfSBmcm9tIFwicHJvc2VtaXJyb3Itc3RhdGVcIjtcclxuaW1wb3J0IHsgUmVwbGFjZUFyb3VuZFN0ZXAgfSBmcm9tICdwcm9zZW1pcnJvci10cmFuc2Zvcm0nXHJcbmltcG9ydCB7IGdldE5leHRBdHRyIH0gZnJvbSBcIi4uL3V0aWxzL2dldE5leHRBdHRyXCI7XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSBsaXN0VHlwZSBcclxuICogQHJldHVybnMge0NvbW1hbmR9XHJcbiAqIOS4i+ayiWxpc3RcclxuICogLSDlpoLmnpzkuI3lnKhsaXN05Lit77yM5Yib5bu6bGlzdFxyXG4gKiAtIOWmguaenOWcqGxpc3TkuK3vvIzlu7bnu63kuIrlsYLnmoR0eXBl55Sf5oiQ55u45bqU55qEYXR0cu+8jOS7jmxpc3QtaXRlbei3s+WIsCotbGlzdFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNpbmtMaXN0SXRlbShpdGVtVHlwZTogTm9kZVR5cGUpOiBDb21tYW5kIHtcclxuICAgIHJldHVybiBmdW5jdGlvbihzdGF0ZTogRWRpdG9yU3RhdGUsIGRpc3BhdGNoOiBEaXNwYXRjaEZ1bmMpIHtcclxuICAgICAgICBsZXQgeyAkZnJvbSwgJHRvIH0gPSBzdGF0ZS5zZWxlY3Rpb24sXHJcbiAgICAgICAgICAgIHJhbmdlID0gJGZyb20uYmxvY2tSYW5nZSgkdG8sIG5vZGUgPT4gbm9kZS5jaGlsZENvdW50ICE9PSAwICYmIG5vZGUuZmlyc3RDaGlsZD8udHlwZSA9PSBpdGVtVHlwZSApXHJcblxyXG4gICAgICAgIGlmKCFyYW5nZSkgcmV0dXJuIGZhbHNlXHJcblxyXG4gICAgICAgIGxldCB7IHN0YXJ0SW5kZXgsIHBhcmVudCB9ID0gcmFuZ2VcclxuXHJcbiAgICAgICAgaWYoc3RhcnRJbmRleCA9PT0gMCkgcmV0dXJuIGZhbHNlXHJcblxyXG4gICAgICAgIGxldCBub2RlQmVmb3JlID0gcGFyZW50LmNoaWxkKHN0YXJ0SW5kZXggLSAxKVxyXG5cclxuICAgICAgICBpZihub2RlQmVmb3JlLnR5cGUgIT09IGl0ZW1UeXBlKSByZXR1cm4gZmFsc2VcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coZ2V0TmV4dEF0dHIocGFyZW50KSlcclxuXHJcbiAgICAgICAgaWYoZGlzcGF0Y2gpIHtcclxuICAgICAgICAgICAgLy/lpoLmnpzkuIrkuIDkuKroioLngrnkuZ/mmK/ltYzlpZfnmoTor53vvIzono3lhaXkuIrkuIDkuKroioLngrlcclxuICAgICAgICAgICAgLy8gZGVidWdnZXJcclxuICAgICAgICAgICAgbGV0IGlzTGFzdE5lc3RlZCA9IG5vZGVCZWZvcmUubGFzdENoaWxkICYmIG5vZGVCZWZvcmUubGFzdENoaWxkLnR5cGUgPT0gcGFyZW50LnR5cGUsXHJcbiAgICAgICAgICAgICAgICBpbm5lciA9IEZyYWdtZW50LmZyb20oaXNMYXN0TmVzdGVkID8gaXRlbVR5cGUuY3JlYXRlKCkgYXMgcG1Ob2RlIDogdW5kZWZpbmVkKSxcclxuICAgICAgICAgICAgICAgIHNsaWNlID0gbmV3IFNsaWNlKFxyXG4gICAgICAgICAgICAgICAgICAgIEZyYWdtZW50LmZyb20oaXRlbVR5cGUuY3JlYXRlKG51bGwsIEZyYWdtZW50LmZyb20ocGFyZW50LnR5cGUuY3JlYXRlKGdldE5leHRBdHRyKHBhcmVudCksIGlubmVyKSkpKSxcclxuICAgICAgICAgICAgICAgICAgICBpc0xhc3ROZXN0ZWQgPyAzIDogMSxcclxuICAgICAgICAgICAgICAgICAgICAwXHJcbiAgICAgICAgICAgICAgICApLFxyXG4gICAgICAgICAgICAgICAgYmVmb3JlID0gcmFuZ2Uuc3RhcnQsXHJcbiAgICAgICAgICAgICAgICBhZnRlciA9IHJhbmdlLmVuZFxyXG5cclxuICAgICAgICAgICAgZGlzcGF0Y2goc3RhdGUudHIuc3RlcChuZXcgUmVwbGFjZUFyb3VuZFN0ZXAoXHJcbiAgICAgICAgICAgICAgICBiZWZvcmUgLSAoaXNMYXN0TmVzdGVkID8gMyA6IDEpLFxyXG4gICAgICAgICAgICAgICAgYWZ0ZXIsXHJcbiAgICAgICAgICAgICAgICBiZWZvcmUsXHJcbiAgICAgICAgICAgICAgICBhZnRlcixcclxuICAgICAgICAgICAgICAgIHNsaWNlLFxyXG4gICAgICAgICAgICAgICAgMSxcclxuICAgICAgICAgICAgICAgIHRydWVcclxuICAgICAgICAgICAgKSkuc2Nyb2xsSW50b1ZpZXcoKSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxufSIsImltcG9ydCB7IERpc3BhdGNoRnVuYyB9IGZyb20gXCJAZWRpdG9yL2NvcmVcIjtcclxuaW1wb3J0IHsgQ29tbWFuZCB9IGZyb20gXCJwcm9zZW1pcnJvci1jb21tYW5kc1wiO1xyXG5pbXBvcnQgeyBGcmFnbWVudCwgTm9kZVR5cGUsIHBtTm9kZSwgU2xpY2UgfSBmcm9tIFwicHJvc2VtaXJyb3ItbW9kZWxcIjtcclxuaW1wb3J0IHsgRWRpdG9yU3RhdGUsIE5vZGVTZWxlY3Rpb24sIFNlbGVjdGlvbiwgVGV4dFNlbGVjdGlvbiB9IGZyb20gXCJwcm9zZW1pcnJvci1zdGF0ZVwiO1xyXG5pbXBvcnQgeyBjYW5TcGxpdCB9IGZyb20gJ3Byb3NlbWlycm9yLXRyYW5zZm9ybSdcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzcGxpdExpc3RJdGVtKGl0ZW1UeXBlOiBOb2RlVHlwZSk6IENvbW1hbmQge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXRlOiBFZGl0b3JTdGF0ZSwgZGlzcGF0Y2g6IERpc3BhdGNoRnVuYykge1xyXG4gICAgICAgIC8vIGRlYnVnZ2VyXHJcbiAgICAgICAgbGV0IHsgJGZyb20sICR0bywgbm9kZSB9ID0gc3RhdGUuc2VsZWN0aW9uIGFzIE5vZGVTZWxlY3Rpb25cclxuICAgICAgICBpZihcclxuICAgICAgICAgICAgKG5vZGUgJiYgbm9kZS5pc0Jsb2NrKSB8fCAgIC8v5ruh6LazY29udGVudFxyXG4gICAgICAgICAgICAkZnJvbS5kZXB0aCA8IDIgfHwgICAgICAgICAgLy/lnKhsaXN05LitXHJcbiAgICAgICAgICAgICEkZnJvbS5zYW1lUGFyZW50KCR0bykgICAgICAgLy/kuI3lnKjlkIzkuIDkuKpsaXN05LitXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGdyYW5kUGFyZW50ID0gJGZyb20ubm9kZSgtMSlcclxuICAgICAgICAvL+S/neivgeW9k+WJjeWcqGxpc3QtaXRlbeS4rVxyXG4gICAgICAgIGlmKGdyYW5kUGFyZW50LnR5cGUgIT09IGl0ZW1UeXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5aaC5p6c5b2T5YmN5ZyobGlzdC1pdGVt5LitXHJcbiAgICAgICAgICog6YKj5LmIZ3JhbmRQYXJlbnTlsLHmmK8qLWxpc3RcclxuICAgICAgICAgKiDlpoLmnpxsaXN0Tm9kZeS4reayoeacieWGheWuue+8jOWImemAgOWbnuS4iuS4gOWxgmxpc3RcclxuICAgICAgICAgKi9cclxuICAgICAgICBpZihcclxuICAgICAgICAgICAgJGZyb20ucGFyZW50LmNvbnRlbnQuc2l6ZSA9PT0gMCAmJiAgICAgICAgICAgICAgLy9saXN0LWl0ZW3msqHmnInlhoXlrrlcclxuICAgICAgICAgICAgZ3JhbmRQYXJlbnQuY2hpbGRDb3VudCA9PSAkZnJvbS5pbmRleEFmdGVyKC0xKSAgLy/mmK/mnIDlkI7kuIDkuKpsaVxyXG4gICAgICAgICkge1xyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOWmguaenOWGheWuueS4uuepuu+8jOS4lOS4jeaYr+W1jOWll+iKgueCuVxyXG4gICAgICAgICAgICAgKiDpu5jorqTnmoRlbnRlcuaciWxpZnTlip/og71cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGlmKFxyXG4gICAgICAgICAgICAgICAgJGZyb20uZGVwdGggPT0gMiB8fFxyXG4gICAgICAgICAgICAgICAgJGZyb20ubm9kZSgtMykudHlwZSAhPT0gaXRlbVR5cGUgfHxcclxuICAgICAgICAgICAgICAgICRmcm9tLmluZGV4KC0yKSAhPT0gJGZyb20ubm9kZSgtMikuY2hpbGRDb3VudCAtIDFcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIOaYr+W1jOWll+iKgueCueWImemcgOimgemAgOWMluS4uuS4iuS4gOWxgueahOWQjue7p1xyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgaWYoZGlzcGF0Y2gpIHtcclxuICAgICAgICAgICAgICAgIGxldCB3cmFwID0gRnJhZ21lbnQuZW1wdHksXHJcbiAgICAgICAgICAgICAgICAgICAgZGVwdGhCZWZvcmUgPSAkZnJvbS5pbmRleCgtMSkgPyAxIDogJGZyb20uaW5kZXgoLTIpID8gMiA6IDMsICAgICAgICAgICAgLy/mnKzlsYLnmoTkuIDoiKzmt7HluqbvvIjkuI3mjpLpmaRibG9ja+mHjOWll2Jsb2Nr77yJXHJcbiAgICAgICAgICAgICAgICAgICAgZGVwdGhBZnRlciAgPSAkZnJvbS5pbmRleEFmdGVyKC0xKSA8ICRmcm9tLm5vZGUoLTIpLmNoaWxkQ291bnQgPyBcclxuICAgICAgICAgICAgICAgICAgICAxIDogJGZyb20uaW5kZXhBZnRlcigtMikgPCAkZnJvbS5ub2RlKC0zKS5jaGlsZENvdW50ID8gXHJcbiAgICAgICAgICAgICAgICAgICAgMiA6IDMsICAgICAgICAgIC8v5LiK5LiA5bGC55qE55u45a+55rex5bqmXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSAkZnJvbS5iZWZvcmUoJGZyb20uZGVwdGggLSBkZXB0aEJlZm9yZSArIDEpXHJcblxyXG4gICAgICAgICAgICAgICAgLy/lsYLlsYLltYzlpZcs5p6E6YCg5paw55qEbGlzdC1pdGVt44CC6K+lbGlzdC1pdGVt5Zyo5LiK5LiK5LiK5LiK5bGCXHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGQgPSAkZnJvbS5kZXB0aCAtIGRlcHRoQmVmb3JlOyBkID49ICRmcm9tLmRlcHRoIC0gMzsgZC0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd3JhcCA9IEZyYWdtZW50LmZyb20oJGZyb20ubm9kZShkKS5jb3B5KHdyYXApKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgd3JhcCA9IHdyYXAuYXBwZW5kKEZyYWdtZW50LmZyb20oaXRlbVR5cGUuY3JlYXRlQW5kRmlsbCgpIGFzIHBtTm9kZSkpXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh3cmFwKVxyXG4gICAgICAgICAgICAgICAgbGV0IHRyID0gc3RhdGUudHIucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICBzdGFydCwgXHJcbiAgICAgICAgICAgICAgICAgICAgJGZyb20uYWZ0ZXIoLWRlcHRoQWZ0ZXIpLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBTbGljZSh3cmFwLCA0IC0gZGVwdGhCZWZvcmUsIDApXHJcbiAgICAgICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgICAgICBzZWwgPSAtMVxyXG5cclxuICAgICAgICAgICAgICAgIHRyLmRvYy5ub2Rlc0JldHdlZW4oc3RhcnQsIHRyLmRvYy5jb250ZW50LnNpemUsIChub2RlLCBwb3MpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZihzZWwgPiAtMSkgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYobm9kZS5pc1RleHRibG9jayAmJiBub2RlLmNvbnRlbnQuc2l6ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWwgPSBwb3MgKyAxXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICBpZihzZWwgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyLnNldFNlbGVjdGlvbihTZWxlY3Rpb24ubmVhcih0ci5kb2MucmVzb2x2ZShzZWwpKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHRyLnNjcm9sbEludG9WaWV3KCkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGxldCBuZXh0VHlwZSA9ICR0by5wb3MgPT0gJGZyb20uZW5kKCkgPyBncmFuZFBhcmVudC5jb250ZW50TWF0Y2hBdCgwKS5kZWZhdWx0VHlwZSA6IG51bGxcclxuICAgICAgICAvLyBsZXQgdHIgPSBzdGF0ZS50ci5kZWxldGUoJGZyb20ucG9zLCAkdG8ucG9zKVxyXG4gICAgICAgIC8vIGxldCB0eXBlcyA9IG5leHRUeXBlICYmIFtudWxsLCB7dHlwZTogbmV4dFR5cGV9XVxyXG4gICAgICAgIC8vIGlmICghY2FuU3BsaXQodHIuZG9jLCAkZnJvbS5wb3MsIDIsIHR5cGVzKSkgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgLy8gaWYgKGRpc3BhdGNoKSBkaXNwYXRjaCh0ci5zcGxpdCgkZnJvbS5wb3MsIDIsIHR5cGVzKS5zY3JvbGxJbnRvVmlldygpKVxyXG4gICAgICAgIC8vIHJldHVybiB0cnVlXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOWmguaenOW9k+WJjeiKgueCueS4jeS4uuepuu+8jOmCo+S5iOiHquWKqOW+gOS4i+aOqOS4gOihjFxyXG4gICAgICAgICAqIOWmguaenOS7juS4remXtOWIh+aWrSjmjInlm57ovaYp6L+Y6ZyA6KaB5YiG6KOC6IqC54K5XHJcbiAgICAgICAgICogZ3JhbmRQYXJlbnTljbNpdGVtdHlwZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGxldCBuZXh0SXRlbVR5cGUgPSAkdG8ucG9zID09PSAkZnJvbS5lbmQoKSA/IGdyYW5kUGFyZW50LmNvbnRlbnRNYXRjaEF0KDApLmRlZmF1bHRUeXBlIDogbnVsbCwgICAgICAvL+iOt+W+l+m7mOiupOiKgueCuVxyXG4gICAgICAgICAgICB0ciA9IHN0YXRlLnRyLmRlbGV0ZSgkZnJvbS5wb3MsICR0by5wb3MpLCAgICAgICAgLy/liKDpmaTpgInkuK3ljLpcclxuICAgICAgICAgICAgdHlwZXMgPSBuZXh0SXRlbVR5cGUgJiYgWyBudWxsLCB7IHR5cGU6IG5leHRJdGVtVHlwZSB9XVxyXG5cclxuICAgIGlmKCFjYW5TcGxpdCh0ci5kb2MsICRmcm9tLnBvcywgMiwgdHlwZXMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH0gXHJcbiAgICAgICAgdHIuc3BsaXQoJGZyb20ucG9zLCAyLCB0eXBlcylcclxuICAgICAgICBsZXQgeyAkdG86IGFmdGVyU3BsaXQkdG8gfSA9IHRyLnNlbGVjdGlvblxyXG4gICAgICAgIGFmdGVyU3BsaXQkdG8gPSB0ci5kb2MucmVzb2x2ZShhZnRlclNwbGl0JHRvLmVuZCgpKVxyXG4gICAgICAgIGlmKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgIGRpc3BhdGNoKFxyXG4gICAgICAgICAgICAgICAgdHJcclxuICAgICAgICAgICAgICAgIC8vIC5zZXRTZWxlY3Rpb24obmV3IFRleHRTZWxlY3Rpb24oXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgYWZ0ZXJTcGxpdCR0byxcclxuICAgICAgICAgICAgICAgIC8vICAgICBhZnRlclNwbGl0JHRvXHJcbiAgICAgICAgICAgICAgICAvLyApKVxyXG4gICAgICAgICAgICAgICAgLnNjcm9sbEludG9WaWV3KClcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgRGlzcGF0Y2hGdW5jLCBSZWFsaXplIH0gZnJvbSBcIkBlZGl0b3IvY29yZVwiO1xyXG5pbXBvcnQgeyBDb21tYW5kIH0gZnJvbSBcInByb3NlbWlycm9yLWNvbW1hbmRzXCI7XHJcbmltcG9ydCB7IEZyYWdtZW50LCBOb2RlUmFuZ2UsIE5vZGVUeXBlLCBTbGljZSB9IGZyb20gXCJwcm9zZW1pcnJvci1tb2RlbFwiO1xyXG5pbXBvcnQgeyBFZGl0b3JTdGF0ZSwgVHJhbnNhY3Rpb24gfSBmcm9tIFwicHJvc2VtaXJyb3Itc3RhdGVcIjtcclxuaW1wb3J0IHsgZmluZFdyYXBwaW5nLCBSZXBsYWNlQXJvdW5kU3RlcCwgY2FuU3BsaXQsIGNhbkpvaW4gfSBmcm9tICdwcm9zZW1pcnJvci10cmFuc2Zvcm0nXHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiog5YyF6KO55Ye95pWwICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBJbkxpc3QobGlzdFR5cGU6IE5vZGVUeXBlLCBhdHRycz86IHsgW25hbWU6IHN0cmluZ106IGFueSB9KTogQ29tbWFuZCB7XHJcbiAgICByZXR1cm4gKHN0YXRlOiBFZGl0b3JTdGF0ZSwgZGlzcGF0Y2g6IERpc3BhdGNoRnVuYykgPT4ge1xyXG4gICAgICAgIGxldCB7ICRmcm9tLCAkdG8gfSA9IHN0YXRlLnNlbGVjdGlvblxyXG4gICAgICAgIGxldCByYW5nZSA9ICRmcm9tLmJsb2NrUmFuZ2UoJHRvKSxcclxuICAgICAgICAgICAgZG9Kb2luID0gZmFsc2UsXHJcbiAgICAgICAgICAgIG91dGVyUmFuZ2UgPSByYW5nZVxyXG5cclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhyYW5nZT8uZGVwdGgpXHJcbiAgICAgICAgaWYoIXJhbmdlKSByZXR1cm4gZmFsc2VcclxuICAgICAgICBpZihcclxuICAgICAgICAgICAgcmFuZ2UuZGVwdGggPj0gMiAmJlxyXG4gICAgICAgICAgICAkZnJvbS5ub2RlKHJhbmdlLmRlcHRoIC0gMSkudHlwZS5jb21wYXRpYmxlQ29udGVudChsaXN0VHlwZSkgJiZcclxuICAgICAgICAgICAgcmFuZ2Uuc3RhcnRJbmRleCA9PT0gMFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBpZigkZnJvbS5pbmRleChyYW5nZS5kZXB0aCAtIDEpID09IDApIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICBsZXQgJGluc2VydCA9IHN0YXRlLmRvYy5yZXNvbHZlKHJhbmdlLiRmcm9tLmJlZm9yZSgpKVxyXG4gICAgICAgICAgICBvdXRlclJhbmdlID0gbmV3IE5vZGVSYW5nZSgkaW5zZXJ0LCAkaW5zZXJ0LCByYW5nZS5kZXB0aClcclxuICAgICAgICAgICAgaWYocmFuZ2UuZW5kSW5kZXggPCByYW5nZS5wYXJlbnQuY2hpbGRDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgcmFuZ2UgPSBuZXcgTm9kZVJhbmdlKCRmcm9tLCBzdGF0ZS5kb2MucmVzb2x2ZSgkdG8uZW5kKHJhbmdlLmRlcHRoKSksIHJhbmdlLmRlcHRoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRvSm9pbiA9IHRydWVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGRlYnVnZ2VyXHJcbiAgICAgICAgbGV0IHdyYXAgPSBmaW5kV3JhcHBpbmcob3V0ZXJSYW5nZSBhcyBOb2RlUmFuZ2UsIGxpc3RUeXBlLCBhdHRycywgcmFuZ2UpXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2cod3JhcClcclxuICAgICAgICBpZighd3JhcCkgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgaWYoZGlzcGF0Y2gpIHtcclxuICAgICAgICAgICAgZGlzcGF0Y2goXHJcbiAgICAgICAgICAgICAgICBkb1dyYXBJbkxpc3QoXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUudHIsXHJcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgd3JhcCxcclxuICAgICAgICAgICAgICAgICAgICBkb0pvaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdFR5cGVcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIC5zY3JvbGxJbnRvVmlldygpXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxufVxyXG5cclxuICAgIFxyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIOWGhemDqOWHveaVsO+8iOWMheijue+8iSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbmZ1bmN0aW9uIGRvV3JhcEluTGlzdChcclxuICAgIHRyOiBUcmFuc2FjdGlvbixcclxuICAgIHJhbmdlOiBOb2RlUmFuZ2UsXHJcbiAgICB3cmFwcGVyczogUmVhbGl6ZTxSZXR1cm5UeXBlPHR5cGVvZiBmaW5kV3JhcHBpbmc+PixcclxuICAgIGpvaW5CZWZvcmU6IGJvb2xlYW4sXHJcbiAgICBsaXN0VHlwZTogTm9kZVR5cGVcclxuKTogVHJhbnNhY3Rpb24ge1xyXG4gICAgbGV0IGNvbnRlbnQgPSBGcmFnbWVudC5lbXB0eVxyXG4gICAgZm9yKGxldCBpID0gd3JhcHBlcnM/Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgY29udGVudCA9IEZyYWdtZW50LmZyb20od3JhcHBlcnNbaV0udHlwZS5jcmVhdGUod3JhcHBlcnNbaV0uYXR0cnMsIGNvbnRlbnQpKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBjb25zb2xlLmxvZyhyYW5nZS5zdGFydCwgcmFuZ2UuZW5kKVxyXG5cclxuICAgIHRyLnN0ZXAobmV3IFJlcGxhY2VBcm91bmRTdGVwKFxyXG4gICAgICAgIHJhbmdlLnN0YXJ0IC0gKGpvaW5CZWZvcmUgPyAyIDogMCksXHJcbiAgICAgICAgcmFuZ2UuZW5kLFxyXG4gICAgICAgIHJhbmdlLnN0YXJ0LFxyXG4gICAgICAgIHJhbmdlLmVuZCxcclxuICAgICAgICBuZXcgU2xpY2UoY29udGVudCwgMCwgMCksXHJcbiAgICAgICAgd3JhcHBlcnMubGVuZ3RoLFxyXG4gICAgICAgIHRydWVcclxuICAgICkpXHJcblxyXG4gICAgbGV0IGZvdW5kID0gMFxyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IHdyYXBwZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYod3JhcHBlcnNbaV0udHlwZSA9PSBsaXN0VHlwZSkgZm91bmQgPSBpICsgMVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGRlYnVnZ2VyXHJcbiAgICBcclxuICAgIGxldCBzcGxpdERlcHRoID0gd3JhcHBlcnMubGVuZ3RoIC0gZm91bmQsXHJcbiAgICBzcGxpdFBvcyA9IHJhbmdlLnN0YXJ0ICsgd3JhcHBlcnMubGVuZ3RoIC0gKGpvaW5CZWZvcmUgPyAyIDogMCksXHJcbiAgICBwYXJlbnQgPSByYW5nZS5wYXJlbnRcclxuICAgIFxyXG4gICAgZm9yKGxldCBpID0gcmFuZ2Uuc3RhcnRJbmRleCwgZSA9IHJhbmdlLmVuZEluZGV4LCBmaXJzdCA9IHRydWU7IGkgPCBlOyBpKyssIGZpcnN0ID0gZmFsc2UpIHtcclxuICAgICAgICBpZighZmlyc3QgJiYgY2FuU3BsaXQodHIuZG9jLCBzcGxpdFBvcywgc3BsaXREZXB0aCkpIHtcclxuICAgICAgICAgICAgdHIuc3BsaXQoc3BsaXRQb3MsIHNwbGl0RGVwdGgpXHJcbiAgICAgICAgICAgIHNwbGl0UG9zICs9IDIgKiBzcGxpdERlcHRoXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNwbGl0UG9zICs9IHBhcmVudC5jaGlsZChpKS5ub2RlU2l6ZVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBsZXQgeyBub2RlQmVmb3JlIH0gPSB0ci5kb2MucmVzb2x2ZShyYW5nZS5zdGFydClcclxuICAgIGlmKG5vZGVCZWZvcmU/LnR5cGUgPT09IGxpc3RUeXBlICYmIGNhbkpvaW4odHIuZG9jLCByYW5nZS5zdGFydCkpIHtcclxuICAgICAgICB0ci5qb2luKHJhbmdlLnN0YXJ0LCAxKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRyXHJcbn0iLCJpbXBvcnQgeyBFeHRlbnNpb25zIH0gZnJvbSBcIkBlZGl0b3IvY29yZVwiO1xyXG5pbXBvcnQgeyByZWN1cnNpdmVUZXh0U2VyaWFsaXplciB9IGZyb20gXCJAZWRpdG9yL2NvcmUvdXRpbHMvcmVjdXJzaXZlVGV4dFNlcmlhbGl6ZXJcIjtcclxuaW1wb3J0IHsgY2hhaW5Db21tYW5kcyB9IGZyb20gXCJwcm9zZW1pcnJvci1jb21tYW5kc1wiO1xyXG5pbXBvcnQgeyB3cmFwcGluZ0lucHV0UnVsZSB9IGZyb20gXCJwcm9zZW1pcnJvci1pbnB1dHJ1bGVzXCI7XHJcbi8vIGltcG9ydCB7IGtleW1hcCB9IGZyb20gXCJwcm9zZW1pcnJvci1rZXltYXBcIjtcclxuaW1wb3J0IHsgTm9kZVR5cGUgfSBmcm9tIFwicHJvc2VtaXJyb3ItbW9kZWxcIjtcclxuaW1wb3J0IHsgZGVsZXRlTGlzdEl0ZW0gfSBmcm9tIFwiLi9jb21tYW5kcy9kZWxldGVMaXN0SXRlbVwiO1xyXG5pbXBvcnQgeyBsaWZ0TGlzdEl0ZW0gfSBmcm9tIFwiLi9jb21tYW5kcy9saWZ0TGlzdEl0ZW1cIjtcclxuaW1wb3J0IHsgbmV3TGluZUluTGlzdCB9IGZyb20gXCIuL2NvbW1hbmRzL25ld0xpbmVJbkxpc3RcIjtcclxuaW1wb3J0IHsgc2lua0xpc3RJdGVtIH0gZnJvbSBcIi4vY29tbWFuZHMvc2lua0xpc3RJdGVtXCI7XHJcbmltcG9ydCB7IHNwbGl0TGlzdEl0ZW0gfSBmcm9tIFwiLi9jb21tYW5kcy9zcGxpdExpc3RJdGVtXCI7XHJcbmltcG9ydCB7IHdyYXBJbkxpc3QgfSBmcm9tIFwiLi9jb21tYW5kcy93cmFwSW5MaXN0XCI7XHJcbmltcG9ydCB7IEJ1bGxldExpc3RPcHRpb25zX3QsIE9yZGVyZWRMaXN0T3B0aW9uc190IH0gZnJvbSBcIi4vdHlwZVwiO1xyXG5pbXBvcnQgeyBnZXRUYWJsZSB9IGZyb20gXCIuL3V0aWxzL29yZGVyVGFibGVcIjtcclxuXHJcbi8vIGltcG9ydCB7IHNwbGl0TGlzdEl0ZW0gfSBmcm9tICdwcm9zZW1pcnJvci1zY2hlbWEtbGlzdCdcclxuXHJcbi8vIHR5cGUgT3JkZXJlZExpc3RUeXBlID0geyB0eXBlOiBPcmRlcmVkTGlzdE9wdGlvbiB8IHsgZGVmYXVsdDogT3JkZXJlZExpc3RPcHRpb24gfSB9XHJcblxyXG4vKipcclxuICog5YiX6KGo5YWD57Sg44CCXHJcbiAqIOmcgOimgeWumuS5iXRvVGV4dOOAglxyXG4gKiDpmYTluKblh6DkuKroh6rlrprkuYnlkb3ku6TjgIJcclxuICovXHJcblxyXG5leHBvcnQgY29uc3QgbGlzdEV4dGVuc2lvbnM6IEV4dGVuc2lvbnMgPSBbXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiDmnInluo/liJfooaggKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6ICdOT0RFJyxcclxuICAgICAgICBub2RlOiB7XHJcbiAgICAgICAgICAgICdvcmRlcmVkX2xpc3QnOiB7XHJcbiAgICAgICAgICAgICAgICBncm91cDogJ2Jsb2NrIGxpc3QnLFxyXG4gICAgICAgICAgICAgICAgY29udGVudDogJ2xpc3RfaXRlbSonLFxyXG4gICAgICAgICAgICAgICAgYXR0cnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzdGFydDogeyBkZWZhdWx0OiAxIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogeyBkZWZhdWx0OiAnMScgYXMgT3JkZXJlZExpc3RPcHRpb25zX3QgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHBhcnNlRE9NOiBbe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhZzogJ29sJyxcclxuICAgICAgICAgICAgICAgICAgICBnZXRBdHRycyhkb20pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2F0dHInKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGlzdCA9IGRvbSBhcyBFbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogbGlzdC5oYXNBdHRyaWJ1dGUoJ3N0YXJ0JykgPyBsaXN0LmdldEF0dHJpYnV0ZSgnc3RhcnQnKSA6IDEgYXMgbnVtYmVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogbGlzdC5oYXNBdHRyaWJ1dGUoJ3R5cGUnKSA/IGxpc3QuZ2V0QXR0cmlidXRlKCd0eXBlJykgYXMgc3RyaW5nIDogJzEnIGFzIE9yZGVyZWRMaXN0T3B0aW9uc190XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICB0b0RPTTogbm9kZSA9PiBbXHJcbiAgICAgICAgICAgICAgICAgICAgJ29sJywgXHJcbiAgICAgICAgICAgICAgICAgICAge3N0YXJ0OiBub2RlLmF0dHJzLnN0YXJ0LCB0eXBlOiBub2RlLmF0dHJzLnR5cGV9LFxyXG4gICAgICAgICAgICAgICAgICAgIDBcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICB0b1RleHQ6IChub2RlLCBpbmRlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvL2xpc3TlhbfmnInnsbvkvLzmoJHnirbnmoTnu5PmnoQs5Zug5q2k6ZyA6KaB6YCS5b2S6LCD55So44CCXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRleHQgPSAnJ1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB7IHN0YXJ0LCB0eXBlIH0gPSBub2RlLmF0dHJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcmRlclRhYmxlID0gZ2V0VGFibGUodHlwZSlcclxuICAgICAgICAgICAgICAgICAgICAvL+agueaNrnR5cGXojrflj5blrZfmr43ntKLlj5blh73mlbDjgIJcclxuICAgICAgICAgICAgICAgICAgICAvL+WIqeeUqHN0YXJ0566X5Ye65Yid5aeL5YC8XHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50ICs9IDJcclxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbm9kZS5jaGlsZENvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSByZWN1cnNpdmVUZXh0U2VyaWFsaXplcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuY2hpbGQoaSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHsnICcucmVwZWF0KGluZGVudCl9JHtvcmRlclRhYmxlKHN0YXJ0ICsgMCl9LiBgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYFxcbmBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYFxcbiAgJHt0ZXh0fVxcbmBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNob3J0Y3V0S2V5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgJ0N0cmwtU2hpZnQtOCc6IHdyYXBJbkxpc3QodGhpcy50eXBlIGFzIE5vZGVUeXBlKSwgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGlucHV0UnVsZXMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICB3cmFwcGluZ0lucHV0UnVsZShcclxuICAgICAgICAgICAgICAgICAgICAvXihcXGQrKVxcLlxccyQvLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHlwZSBhcyBOb2RlVHlwZSxcclxuICAgICAgICAgICAgICAgICAgICBtYXRjaCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiArbWF0Y2hbMV1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIChtYXRjaCwgbm9kZSkgPT4gbm9kZS5jaGlsZENvdW50ICsgbm9kZS5hdHRycy5zdGFydCA9PT0gTnVtYmVyLnBhcnNlSW50KG1hdGNoWzFdKVxyXG5cclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiog5peg5bqP5YiX6KGoICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuICAgIHtcclxuICAgICAgICB0eXBlOiAnTk9ERScsXHJcbiAgICAgICAgbm9kZToge1xyXG4gICAgICAgICAgICAnYnVsbGV0X2xpc3QnOiB7XHJcbiAgICAgICAgICAgICAgICBncm91cDogJ2Jsb2NrIGxpc3QnLFxyXG4gICAgICAgICAgICAgICAgY29udGVudDogJ2xpc3RfaXRlbSonLFxyXG4gICAgICAgICAgICAgICAgYXR0cnM6IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiB7IGRlZmF1bHQ6ICdkaXNjJyBhcyBCdWxsZXRMaXN0T3B0aW9uc190IH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBwYXJzZURPTTogW3tcclxuICAgICAgICAgICAgICAgICAgICB0YWc6ICd1bCcsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0QXR0cnMoZG9tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaXN0ID0gZG9tIGFzIEVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGxpc3QuaGFzQXR0cmlidXRlKCd0eXBlJykgPyBsaXN0LmdldEF0dHJpYnV0ZSgndHlwZScpIGFzIHN0cmluZyA6ICdkaXNjJyBhcyBCdWxsZXRMaXN0T3B0aW9uc190XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgIHRvRE9NOiBub2RlID0+IFtcclxuICAgICAgICAgICAgICAgICAgICAndWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGBsaXN0LXN0eWxlLXR5cGU6JHtub2RlLmF0dHJzLnR5cGV9O2BcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIDBcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICB0b1RleHQ6IChub2RlLCBpbmRlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dCA9ICcnXHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50ICs9IDJcclxuICAgICAgICAgICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbm9kZS5jaGlsZENvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCArPSByZWN1cnNpdmVUZXh0U2VyaWFsaXplcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuY2hpbGQoaSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHsnICcucmVwZWF0KGluZGVudCl9LSBgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYFxcbmAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBcXG4ke3RleHR9XFxuYFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzaG9ydGN1dEtleSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICdDdHJsLVNoaWZ0LTknOiB3cmFwSW5MaXN0KHRoaXMudHlwZSBhcyBOb2RlVHlwZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5wdXRSdWxlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgIHdyYXBwaW5nSW5wdXRSdWxlKFxyXG4gICAgICAgICAgICAgICAgICAgIC9eXFxzKlstLFxcKyxcXCpdXFxzJC8sXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50eXBlIGFzIE5vZGVUeXBlXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIDxsaT4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5cclxuICAgIHtcclxuICAgICAgICB0eXBlOiAnTk9ERScsXHJcbiAgICAgICAgbm9kZToge1xyXG4gICAgICAgICAgICBsaXN0X2l0ZW06IHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdwYXJhZ3JhcGggYmxvY2sqJyxcclxuICAgICAgICAgICAgICAgIHBhcnNlRE9NOiBbeyB0YWc6ICdsaScgfV0sXHJcbiAgICAgICAgICAgICAgICB0b0RPTTogKCkgPT4gWydsaScsIDBdLFxyXG4gICAgICAgICAgICAgICAgZGVmaW5pbmc6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB0b1RleHQ6IChub2RlLCBpbmRlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvL2xpc3QtaXRlbeWPquacieS4gOS4quWtkOiKgueCuVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZWN1cnNpdmVUZXh0U2VyaWFsaXplcihub2RlLmNoaWxkKDApLCBpbmRlbnQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHNob3J0Y3V0S2V5KCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgJ0VudGVyJzogc3BsaXRMaXN0SXRlbSh0aGlzLnR5cGUgYXMgTm9kZVR5cGUpLFxyXG4gICAgICAgICAgICAgICAgJ1RhYic6IHNpbmtMaXN0SXRlbSh0aGlzLnR5cGUgYXMgTm9kZVR5cGUpLFxyXG4gICAgICAgICAgICAgICAgJ1NoaWZ0LVRhYic6IGxpZnRMaXN0SXRlbSh0aGlzLnR5cGUgYXMgTm9kZVR5cGUpLFxyXG4gICAgICAgICAgICAgICAgJ0N0cmwtRW50ZXInOiBuZXdMaW5lSW5MaXN0KHRoaXMudHlwZSBhcyBOb2RlVHlwZSksXHJcbiAgICAgICAgICAgICAgICAnQmFja3NwYWNlJzogZGVsZXRlTGlzdEl0ZW0odGhpcy50eXBlIGFzIE5vZGVUeXBlLCB0aGlzLmVkaXRvci52aWV3KSxcclxuICAgICAgICAgICAgICAgIC8vICdUYWInOiBzaW5rTGlzdEl0ZW0odGhpcy50eXBlIGFzIE5vZGVUeXBlKSxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbl0iLCJleHBvcnQgY29uc3QgT3JkZXJlZExpc3RPcHRpb25zID0gWycxJywgJ2knLCAnYScsICdBJ10gYXMgY29uc3RcclxuZXhwb3J0IHR5cGUgT3JkZXJlZExpc3RPcHRpb25zX3QgPSB0eXBlb2YgT3JkZXJlZExpc3RPcHRpb25zW251bWJlcl1cclxuXHJcbmV4cG9ydCBjb25zdCBCdWxsZXRMaXN0T3B0aW9ucyA9IFsnZGlzYycsICdjaXJjbGUnLCAnc3F1YXJlJ10gYXMgY29uc3RcclxuZXhwb3J0IHR5cGUgQnVsbGV0TGlzdE9wdGlvbnNfdCA9IHR5cGVvZiBCdWxsZXRMaXN0T3B0aW9uc1tudW1iZXJdXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIGJ1bGxldF9saXN0QXR0cnMge1xyXG4gICAgdHlwZT86IEJ1bGxldExpc3RPcHRpb25zX3QsXHJcbiAgICBzdGFydD86IG51bWJlclxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIG9yZGVyZWRfbGlzdEF0dHJzIHtcclxuICAgIHR5cGU/OiBPcmRlcmVkTGlzdE9wdGlvbnNfdCxcclxuICAgIHN0YXJ0PzogbnVtYmVyXHJcbn1cclxuIiwiaW1wb3J0IHsgcG1Ob2RlIH0gZnJvbSBcInByb3NlbWlycm9yLW1vZGVsXCI7XHJcbmltcG9ydCB7IEJ1bGxldExpc3RPcHRpb25zLCBidWxsZXRfbGlzdEF0dHJzLCBPcmRlcmVkTGlzdE9wdGlvbnMsIG9yZGVyZWRfbGlzdEF0dHJzIH0gZnJvbSAnLi4vdHlwZSdcclxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRBdHRyKG5vZGU6IHBtTm9kZSk6IGJ1bGxldF9saXN0QXR0cnMgfCBvcmRlcmVkX2xpc3RBdHRycyB7XHJcbiAgICBsZXQgeyAgdHlwZTogeyBuYW1lIH0gfSA9IG5vZGVcclxuICAgIGxldCBhdHRycyA9IG5vZGUuYXR0cnMgYXMgYnVsbGV0X2xpc3RBdHRycyB8IG9yZGVyZWRfbGlzdEF0dHJzLFxyXG4gICAgICAgIG9wdGlvbnMgPSBuYW1lID09PSAnYnVsbGV0X2xpc3QnID8gQnVsbGV0TGlzdE9wdGlvbnMgOiBPcmRlcmVkTGlzdE9wdGlvbnMsXHJcbiAgICAgICAgaW5kZXggPSBvcHRpb25zLmZpbmRJbmRleCgodmFsKSA9PiB2YWwgPT09IGF0dHJzLnR5cGUpXHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0eXBlOiBvcHRpb25zWyhpbmRleCArIDEpICUgb3B0aW9ucy5sZW5ndGhdLFxyXG4gICAgfSBcclxufSIsImltcG9ydCB7IE9yZGVyZWRMaXN0T3B0aW9uc190IH0gZnJvbSBcIi4uL3R5cGVcIjtcclxuXHJcbmNvbnN0IFJvbWVBcmFiID0gWzEwMDAsIDkwMCwgNTAwLCA0MDAsIDEwMCwgOTAsIDUwLCA0MCwgMTAsIDksIDUsIDQsIDFdIGFzIGNvbnN0XHJcbmNvbnN0IFJvbWVOdW0gID0gW1wiTVwiLFwiQ01cIixcIkRcIixcIkNEXCIsXCJDXCIsXCJYQ1wiLFwiTFwiLFwiWExcIixcIlhcIixcIklYXCIsXCJWXCIsXCJJVlwiLFwiSVwiXSBhcyBjb25zdCBcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUYWJsZSh0eXBlOiBPcmRlcmVkTGlzdE9wdGlvbnNfdCkge1xyXG4gICAgc3dpdGNoKHR5cGUpIHtcclxuICAgICAgICBjYXNlICcxJzogcmV0dXJuIChudW06IG51bWJlcikgPT4gbnVtXHJcbiAgICAgICAgY2FzZSAnYSc6IHJldHVybiAobnVtOiBudW1iZXIpID0+IFN0cmluZy5mcm9tQ2hhckNvZGUoNjUgKyBudW0gLSAxKVxyXG4gICAgICAgIGNhc2UgJ0EnOiByZXR1cm4gKG51bTogbnVtYmVyKSA9PiBTdHJpbmcuZnJvbUNoYXJDb2RlKDk3ICsgbnVtIC0gMSlcclxuICAgICAgICBjYXNlICdpJzogcmV0dXJuIChudW06IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0gJydcclxuICAgICAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IFJvbWVBcmFiLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZShudW0gPj0gUm9tZUFyYWJbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBudW0gLT0gUm9tZUFyYWJbaV1cclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gUm9tZU51bVtpXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBDb21tYW5kLCBjcmVhdGVQYXJhZ3JhcGhOZWFyIH0gZnJvbSBcInByb3NlbWlycm9yLWNvbW1hbmRzXCI7XHJcbmltcG9ydCB7IEVkaXRvclN0YXRlLCBTZWxlY3Rpb24gfSBmcm9tIFwicHJvc2VtaXJyb3Itc3RhdGVcIjtcclxuaW1wb3J0IHsgRWRpdG9yVmlldyB9IGZyb20gXCJwcm9zZW1pcnJvci12aWV3XCI7XHJcbmltcG9ydCB7IERpc3BhdGNoRnVuYyB9IGZyb20gXCJAZWRpdG9yL2NvcmVcIjtcclxuaW1wb3J0IHsgZGlzcGxheU1vZGUgfSBmcm9tIFwiLi4vbWF0aFBsdWdpblwiO1xyXG5leHBvcnQgZnVuY3Rpb24gY29sbGFzcGVNYXRoQ21kKFxyXG4gICAgb3V0ZXJWaWV3OiBFZGl0b3JWaWV3LFxyXG4gICAgZGlyOiAoMSB8IC0xKSxcclxuICAgIHJlcXVpcmVPbkJvcmRlcjogYm9vbGVhbixcclxuICAgIG1vZGU6IGJvb2xlYW4sXHJcbiAgICByZXF1aXJlRW1wdHlTZWxlY3Rpb246IGJvb2xlYW4gPSB0cnVlLFxyXG4pOiBDb21tYW5kIHtcclxuICAgIHJldHVybiAoaW5uZXJTdGF0ZTogRWRpdG9yU3RhdGUsIGRpc3BhdGNoOiBEaXNwYXRjaEZ1bmMpID0+IHtcclxuICAgICAgICAvLyBkZWJ1Z2dlclxyXG4gICAgICAgIGxldCBvdXRlclN0YXRlID0gb3V0ZXJWaWV3LnN0YXRlXHJcbiAgICAgICAgbGV0IHsgdG86IG91dGVyVG8sIGZyb206IG91dGVyRnJvbSB9ID0gb3V0ZXJTdGF0ZS5zZWxlY3Rpb25cclxuICAgICAgICBsZXQgeyB0bzogaW5uZXJUbywgZnJvbTogaW5uZXJGcm9tIH0gPSBpbm5lclN0YXRlLnNlbGVjdGlvblxyXG5cclxuICAgICAgICBpZihyZXF1aXJlRW1wdHlTZWxlY3Rpb24gJiYgaW5uZXJUbyAhPT0gaW5uZXJGcm9tKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGN1cnJlbnRQb3MgPSAoZGlyID4gMCkgPyBpbm5lclRvIDogaW5uZXJGcm9tXHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYocmVxdWlyZU9uQm9yZGVyKSB7XHJcbiAgICAgICAgICAgIGxldCBub2RlU2l6ZSA9IGlubmVyU3RhdGUuZG9jLm5vZGVTaXplIC0gMlxyXG4gICAgICAgICAgICBpZihkaXIgPiAwICYmIGN1cnJlbnRQb3MgPCBub2RlU2l6ZSkgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIGlmKGRpciA8IDAgJiYgY3VycmVudFBvcyA+IDApIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYoZGlzcGF0Y2gpIHtcclxuICAgICAgICAgICAgbGV0IHRhcmdldFBvcyA9IChkaXIgPiAwKSA/IG91dGVyVG8gOiBvdXRlckZyb21cclxuXHJcbiAgICAgICAgICAgIGlmKCFvdXRlclN0YXRlLmRvYy5ub2RlQXQodGFyZ2V0UG9zKSAmJiBtb2RlID09PSBkaXNwbGF5TW9kZS5kaXNwbGF5KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZmxhZyA9IGNyZWF0ZVBhcmFncmFwaE5lYXIob3V0ZXJTdGF0ZSwgb3V0ZXJWaWV3LmRpc3BhdGNoKVxyXG4gICAgICAgICAgICAgICAgaWYoZmxhZyAmJiBkaXIgPiAwKSBcclxuICAgICAgICAgICAgICAgICAgICBvdXRlclZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZsYWdcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgb3V0ZXJWaWV3LmRpc3BhdGNoKFxyXG4gICAgICAgICAgICAgICAgb3V0ZXJTdGF0ZS50ci5zZXRTZWxlY3Rpb24oXHJcbiAgICAgICAgICAgICAgICAgICAgU2VsZWN0aW9uLm5lYXIob3V0ZXJTdGF0ZS5kb2MucmVzb2x2ZSh0YXJnZXRQb3MpLCBkaXIpXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgIClcclxuXHJcbiAgICAgICAgICAgIG91dGVyVmlldy5mb2N1cygpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlXHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRXh0ZW5zaW9uLCBFeHRlbnNpb25zIH0gZnJvbSAnQGVkaXRvci9jb3JlJztcclxuaW1wb3J0IHsgY2hhaW5Db21tYW5kcywgY3JlYXRlUGFyYWdyYXBoTmVhciwgZGVsZXRlU2VsZWN0aW9uLCBqb2luQmFja3dhcmQsIG5ld2xpbmVJbkNvZGUsIHNlbGVjdE5vZGVCYWNrd2FyZCwgc3BsaXRCbG9jayB9IGZyb20gJ3Byb3NlbWlycm9yLWNvbW1hbmRzJztcclxuaW1wb3J0IHsgTm9kZVNwZWMsIE5vZGVUeXBlLCBwbU5vZGUgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XHJcbmltcG9ydCB7IG1ha2VJbmxpbmVNYXRoSW5wdXRSdWxlLCBSRUdFWF9JTkxJTkVfTUFUSF9ET0xMQVJTX0VTQ0FQRUQsIG1ha2VCbG9ja01hdGhJbnB1dHJ1bGUsIFJFR0VYX0JMT0NLX01BVEhfRE9MTEFSUywgUkVHRVhfSU5MSU5FX01BVEhfRE9MTEFSU19MSVRFIH0gZnJvbSAnLi9wbHVnaW5zL21hdGhJbnB1dHJ1bGVzJztcclxuaW1wb3J0IHsgbWF0aFBsdWdpbiB9IGZyb20gJy4vbWF0aFBsdWdpbic7XHJcbi8vIGltcG9ydCB7IG1hdGhOb2RlcyB9IGZyb20gJy4vbWF0aFNjaGVtYSc7XHJcbi8vIGltcG9ydCB7IEJsb2NrTWF0aElucHV0cnVsZSwgSW5saW5lTWF0aElucHV0UnVsZSwgUkVHRVhfQkxPQ0tfTUFUSF9ET0xMQVJTLCBSRUdFWF9JTkxJTkVfTUFUSF9ET0xMQVJTX0VTQ0FQRUQgfSBmcm9tICcuL3BsdWdpbnMvbWF0aElucHV0cnVsZXMnO1xyXG5pbXBvcnQgeyBtYXRoU2VsZWN0UGx1Z2luIH0gZnJvbSAnLi9wbHVnaW5zL21hdGhTZWxlY3QnO1xyXG5pbXBvcnQgeyBtYXRoUHJldmlld1BsdWdpbiB9IGZyb20gJy4vcGx1Z2lucy9tYXRoUHJldmlldyc7XHJcblxyXG5cclxuZXhwb3J0IGNvbnN0IG1hdGhFeHRlbnNpb25zOiBFeHRlbnNpb25zID0gW1xyXG4gICAge1xyXG4gICAgICAgIHR5cGU6ICdOT0RFJyxcclxuICAgICAgICBub2RlOiB7XHJcbiAgICAgICAgICAgIG1hdGhfaW5saW5lOiB7XHJcbiAgICAgICAgICAgICAgICBncm91cDogJ2lubGluZSBtYXRoJyxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdpbmxpbmUqJyxcclxuICAgICAgICAgICAgICAgIGlubGluZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGF0b206IHRydWUsXHJcbiAgICAgICAgICAgICAgICB0b0RPTTogKCkgPT4gWydtYXRoLWlubGluZScsIHtjbGFzczogJ21hdGgtbm9kZSd9LCAwXSxcclxuICAgICAgICAgICAgICAgIHBhcnNlRE9NOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0YWc6ICdtYXRoLWlubGluZScgfSxcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICB0b1RleHQ6IChub2RlOiBwbU5vZGUpID0+IGAkJHtub2RlLnRleHRDb250ZW50fSRgLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5wdXRSdWxlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgIG1ha2VJbmxpbmVNYXRoSW5wdXRSdWxlKFxyXG4gICAgICAgICAgICAgICAgICAgIFJFR0VYX0lOTElORV9NQVRIX0RPTExBUlNfRVNDQVBFRCxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnR5cGUgYXMgTm9kZVR5cGVcclxuICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICBtYWtlSW5saW5lTWF0aElucHV0UnVsZShcclxuICAgICAgICAgICAgICAgICAgICBSRUdFWF9JTkxJTkVfTUFUSF9ET0xMQVJTX0xJVEUsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50eXBlIGFzIE5vZGVUeXBlXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICB9XHJcblxyXG4gICAgfSxcclxuXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZTogJ05PREUnLFxyXG4gICAgICAgIG5vZGU6IHtcclxuICAgICAgICAgICAgbWF0aF9kaXNwbGF5OiB7XHJcbiAgICAgICAgICAgICAgICBncm91cDogJ2Jsb2NrIG1hdGgnLFxyXG4gICAgICAgICAgICAgICAgY29udGVudDogJ2lubGluZSonLFxyXG4gICAgICAgICAgICAgICAgYXRvbTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvZGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB0b0RPTTogKCkgPT4gWydtYXRoLWRpc3BsYXknLCB7Y2xhc3M6ICdtYXRoLW5vZGUnfSwgMF0sXHJcbiAgICAgICAgICAgICAgICBwYXJzZURPTTogW1xyXG4gICAgICAgICAgICAgICAgICAgIHsgdGFnOiAnbWF0aC1kaXNwbGF5JyB9LFxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIHRvVGV4dDogKG5vZGU6IHBtTm9kZSkgPT4gYFxcblxcbiQkXFxuJHtub2RlLnRleHRDb250ZW50fX1cXG4kJGAsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgaW5wdXRSdWxlcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFttYWtlQmxvY2tNYXRoSW5wdXRydWxlKFxyXG4gICAgICAgICAgICAgICAgUkVHRVhfQkxPQ0tfTUFUSF9ET0xMQVJTLFxyXG4gICAgICAgICAgICAgICAgdGhpcy50eXBlIGFzIE5vZGVUeXBlLFxyXG4gICAgICAgICAgICApXVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAge1xyXG4gICAgICAgIHR5cGU6ICdQTFVHSU4nLFxyXG4gICAgICAgIHBsdWdpbnM6IFtcclxuICAgICAgICAgICAgbWF0aFByZXZpZXdQbHVnaW4sXHJcbiAgICAgICAgICAgIG1hdGhTZWxlY3RQbHVnaW4sXHJcbiAgICAgICAgICAgIG1hdGhQbHVnaW4sXHJcbiAgICAgICAgXVxyXG4gICAgfVxyXG5dIiwiaW1wb3J0IGthdGV4LCB7IEthdGV4T3B0aW9ucywgUGFyc2VFcnJvciB9IGZyb20gJ2thdGV4JztcclxuaW1wb3J0IHsgY2hhaW5Db21tYW5kcywgZGVsZXRlU2VsZWN0aW9uLCBsaWZ0RW1wdHlCbG9jaywgbmV3bGluZUluQ29kZSB9IGZyb20gJ3Byb3NlbWlycm9yLWNvbW1hbmRzJztcclxuaW1wb3J0IHsga2V5bWFwIH0gZnJvbSAncHJvc2VtaXJyb3Ita2V5bWFwJztcclxuaW1wb3J0IHsgcG1Ob2RlIH0gZnJvbSAncHJvc2VtaXJyb3ItbW9kZWwnXHJcbmltcG9ydCB7IEVkaXRvclN0YXRlLCBQbHVnaW5LZXksIFRleHRTZWxlY3Rpb24sIFRyYW5zYWN0aW9uIH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnO1xyXG5pbXBvcnQgeyBEZWNvcmF0aW9uLCBFZGl0b3JWaWV3LCBOb2RlVmlldyB9IGZyb20gJ3Byb3NlbWlycm9yLXZpZXcnO1xyXG5pbXBvcnQgeyBTdGVwTWFwIH0gZnJvbSAncHJvc2VtaXJyb3ItdHJhbnNmb3JtJ1xyXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICcuLi9jb3JlJ1xyXG5pbXBvcnQgeyBjb2xsYXNwZU1hdGhDbWQgfSBmcm9tICcuL2NvbW1hbmRzL2NvbGxhcHNlTWF0aENtZCc7XHJcbmltcG9ydCB7IE1hdGhQbHVnaW5TdGF0ZSwgTUFUSF9QTFVHSU5fS0VZIH0gZnJvbSAnLi9tYXRoUGx1Z2luJztcclxuaW1wb3J0IHsgTWF0aFByZXZpZXdNZXRhLCBNQVRIX1BSRVZJRVdfS0VZIH0gZnJvbSAnLi9wbHVnaW5zL21hdGhQcmV2aWV3JztcclxuaW1wb3J0IHsgZ2V0SW1tVHJhbnNhY3Rpb24gfSBmcm9tICdAZWRpdG9yL2NvcmUvY29tbW9uL2dldEltbVRyYW5zYWN0aW9uJztcclxuLy8gaW1wb3J0IHsgY3JlYXRlTWF0aFByZXZpZXdQbHVnaW4sIE1BVEhfUFJFVklFV19LRVkgfSBmcm9tICcuL3BsdWdpbnMvbWF0aFByZXZpZXcnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBDdXJzb3JQb3NPYnNlcnZlciB7XHJcbiAgICBjdXJzb3JTaWRlOiAnc3RhcnQnIHwgJ2VuZCcsXHJcbiAgICB1cGRhdGVDdXJzb3JQb3Moc3RhdGU6IEVkaXRvclN0YXRlKTogdm9pZFxyXG59XHJcblxyXG5pbnRlcmZhY2UgTWF0aFZpZXdPcHRpb25zIHtcclxuICAgIHRhZ05hbWU/OiBzdHJpbmdcclxuICAgIGthdGV4T3B0aW9ucz86IEthdGV4T3B0aW9uc1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTWF0aFZpZXcgZXh0ZW5kcyBFdmVudEVtaXR0ZXIgaW1wbGVtZW50cyBOb2RlVmlldywgQ3Vyc29yUG9zT2JzZXJ2ZXIge1xyXG5cclxuICAgIHByaXZhdGUgZG9jOiBwbU5vZGVcclxuICAgIHByaXZhdGUgb3V0ZXJWaWV3OiBFZGl0b3JWaWV3XHJcbiAgICBwcml2YXRlIGdldFBvczogKCkgPT4gbnVtYmVyXHJcbiAgICBwcml2YXRlIGRpc3BsYXlNb2RlOiBib29sZWFuXHJcblxyXG4gICAgZG9tOiBIVE1MRWxlbWVudFxyXG5cclxuICAgIHByaXZhdGUgbWF0aFJlbmRlckVsdD86IEhUTUxFbGVtZW50XHJcbiAgICBwcml2YXRlIG1hdGhTcmNFbHQ/OiBIVE1MRWxlbWVudFxyXG4gICAgcHJpdmF0ZSBrYXRleERpdj86IEhUTUxFbGVtZW50XHJcbiAgICBwcml2YXRlIGlubmVyVmlldz86IEVkaXRvclZpZXcgXHJcblxyXG4gICAgY3Vyc29yU2lkZTogJ3N0YXJ0JyB8ICdlbmQnXHJcbiAgICBwcml2YXRlICBrYXRleE9wdGlvbnM6IEthdGV4T3B0aW9uc1xyXG4gICAgcHJpdmF0ZSB0YWduYW1lOiBzdHJpbmdcclxuICAgIHByaXZhdGUgaXNFZGl0aW5nOiBib29sZWFuXHJcbiAgICBwcml2YXRlIG1hdGhQbHVnaW5LZXk6IFBsdWdpbktleTxNYXRoUGx1Z2luU3RhdGU+XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgbm9kZTogcG1Ob2RlLFxyXG4gICAgICAgIG91dGVyVmlldzogRWRpdG9yVmlldyxcclxuICAgICAgICBnZXRQb3M6ICgpID0+IG51bWJlcixcclxuICAgICAgICBkaXNwbGF5TW9kZTogYm9vbGVhbixcclxuICAgICAgICBvcHRpb25zOiBNYXRoVmlld09wdGlvbnMgPSB7fSxcclxuICAgICAgICBtYXRoUGx1Z2luS2V5OiBQbHVnaW5LZXk8TWF0aFBsdWdpblN0YXRlPixcclxuICAgICAgICBvbkRlc3Ryb3k/OiAoKSA9PiB2b2lkXHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcigpXHJcbiAgICAgICAgdGhpcy5kb2MgPSBub2RlXHJcbiAgICAgICAgdGhpcy5vdXRlclZpZXcgPSBvdXRlclZpZXdcclxuICAgICAgICB0aGlzLmdldFBvcyA9IGdldFBvc1xyXG4gICAgICAgIHRoaXMuZGlzcGxheU1vZGUgPSBkaXNwbGF5TW9kZVxyXG4gICAgICAgIG9uRGVzdHJveSAmJiB0aGlzLm9uKCdkZXN0cm95Jywgb25EZXN0cm95KVxyXG4gICAgICAgIHRoaXMubWF0aFBsdWdpbktleSA9IG1hdGhQbHVnaW5LZXlcclxuXHJcblxyXG4gICAgICAgIHRoaXMuY3Vyc29yU2lkZSA9ICdzdGFydCdcclxuICAgICAgICB0aGlzLmlzRWRpdGluZyA9IGZhbHNlXHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMua2F0ZXhPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XHJcbiAgICAgICAgICAgIGdsb2JhbEdyb3VwOiB0cnVlLFxyXG4gICAgICAgICAgICB0aHJvd09uRXJyb3I6IGZhbHNlLFxyXG4gICAgICAgICAgICBkaXNwbGF5TW9kZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb3B0aW9ucy5rYXRleE9wdGlvbnNcclxuICAgICAgICApXHJcblxyXG5cclxuICAgICAgICB0aGlzLnRhZ25hbWUgPSBvcHRpb25zLnRhZ05hbWUgfHwgdGhpcy5kb2MudHlwZS5uYW1lLnJlcGxhY2UoJ18nLCAnLScpXHJcbiAgICAgICAgdGhpcy5kb20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRoaXMudGFnbmFtZSlcclxuICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QuYWRkKCdtYXRoLW5vZGUnKVxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5tYXRoUmVuZGVyRWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpIGFzIEhUTUxTcGFuRWxlbWVudFxyXG4gICAgICAgIHRoaXMubWF0aFJlbmRlckVsdC50ZXh0Q29udGVudCA9ICcnXHJcbiAgICAgICAgdGhpcy5tYXRoUmVuZGVyRWx0LmNsYXNzTGlzdC5hZGQoJ21hdGgtcmVuZGVyJylcclxuICAgICAgICB0aGlzLmRvbS5hcHBlbmRDaGlsZCh0aGlzLm1hdGhSZW5kZXJFbHQpXHJcblxyXG4gICAgICAgIHRoaXMubWF0aFNyY0VsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKSBhcyBIVE1MU3BhbkVsZW1lbnRcclxuICAgICAgICB0aGlzLm1hdGhTcmNFbHQuY2xhc3NMaXN0LmFkZCgnbWF0aC1zcmMnKVxyXG4gICAgICAgIHRoaXMuZG9tLmFwcGVuZENoaWxkKHRoaXMubWF0aFNyY0VsdClcclxuXHJcbiAgICAgICAgdGhpcy5kb20uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmVuc3VyZUZvY3VzKCkpXHJcblxyXG4gICAgICAgIHRoaXMucmVuZGVyTWF0aCgpXHJcbiAgICB9XHJcblxyXG4gICAgZW5zdXJlRm9jdXMoKSB7XHJcbiAgICAgICAgaWYodGhpcy5pbm5lclZpZXcgJiYgdGhpcy5vdXRlclZpZXcuaGFzRm9jdXMoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmlubmVyVmlldy5mb2N1cygpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlck1hdGgoKSB7XHJcbiAgICAgICAgaWYoIXRoaXMubWF0aFJlbmRlckVsdCkge1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucmVuZGVyS2F0ZXgodGhpcy5kb20pXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBodG1sRE9NIFxyXG4gICAgICogQHBhcmFtIGZyb21Jbm5lciBcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICogXHJcbiAgICAgKiBgdGhpcy5kb2Ng5a2Y55qE5piv5q2k5qyh5L+u5pS55LmL5YmN55qE54q25oCB44CC5Zug5q2k5b2T6Lez5Ye657yW6L6R5Z2X55qE5L+u5pS55Y+R55Sf5pe2LFxyXG4gICAgICogYHRoaXMuZG9jLnRleHRDb250ZW50YOmprOS4iuWwseabtOaWsOS4uuacgOe7iOeKtuaAgeOAglxyXG4gICAgICog6ICM5a6e5pe26aKE6KeI6ZyA6KaB55qE5piv5q2k5qyh5L+u5pS55LmL5ZCO55qE54q25oCB77yM5Zug5q2k6ZyA6KaBdHIuZG9jXHJcbiAgICAgKi9cclxuICAgIHJlbmRlckthdGV4KGh0bWxET006IEhUTUxFbGVtZW50LCBmcm9tSW5uZXIgPSB0cnVlLCBzeW5jRG9jPzogcG1Ob2RlKSB7XHJcbiAgICAgICAgbGV0IHsgY29udGVudCB9ID0gdGhpcy5kb2MuY29udGVudFxyXG4gICAgICAgIGxldCB0ZXh0U3RyaW5nID0gJydcclxuICAgICAgICBpZihmcm9tSW5uZXIpIHtcclxuICAgICAgICAgICAgaWYoY29udGVudC5sZW5ndGggPiAwICYmIGNvbnRlbnRbMF0udGV4dENvbnRlbnQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRleHRTdHJpbmcgPSBjb250ZW50WzBdLnRleHRDb250ZW50LnRyaW0oKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGV4dFN0cmluZyA9IHN5bmNEb2M/LnRleHRDb250ZW50IGFzIHN0cmluZ1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodGV4dFN0cmluZy5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgICAgIGh0bWxET00uY2xhc3NMaXN0LmFkZCgnZW1wdHktbWF0aCcpXHJcbiAgICAgICAgICAgIGlmKGZyb21Jbm5lcikge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUodGhpcy5tYXRoUmVuZGVyRWx0Py5maXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRoUmVuZGVyRWx0LmZpcnN0Q2hpbGQucmVtb3ZlKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBodG1sRE9NLmNsYXNzTGlzdC5yZW1vdmUoJ2VtcHR5LW1hdGgnKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYoZnJvbUlubmVyKSB7XHJcbiAgICAgICAgICAgICAgICBrYXRleC5yZW5kZXIodGV4dFN0cmluZywgdGhpcy5tYXRoUmVuZGVyRWx0IGFzIEhUTUxFbGVtZW50LCB0aGlzLmthdGV4T3B0aW9ucylcclxuICAgICAgICAgICAgICAgIHRoaXMubWF0aFJlbmRlckVsdD8uY2xhc3NMaXN0LnJlbW92ZSgncGFyc2UtZXJyb3InKSAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGthdGV4LnJlbmRlcih0ZXh0U3RyaW5nLCBodG1sRE9NLCB0aGlzLmthdGV4T3B0aW9ucylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgaWYoZSBpbnN0YW5jZW9mIFBhcnNlRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSlcclxuICAgICAgICAgICAgICAgIGlmKGZyb21Jbm5lcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWF0aFJlbmRlckVsdD8uY2xhc3NMaXN0LmFkZCgncGFyc2UtZXJyb3InKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaHRtbERPTS5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgZS50b1N0cmluZygpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaHRtbERPTVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShub2RlOiBwbU5vZGUsIGRlY29yYXRpb25zOiBBcnJheTxEZWNvcmF0aW9uPikge1xyXG4gICAgICAgIGlmKCFub2RlLnNhbWVNYXJrdXAodGhpcy5kb2MpKSByZXR1cm4gZmFsc2VcclxuICAgICAgICB0aGlzLmRvYyA9IG5vZGVcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnZGVjbycsIGRlY29yYXRpb25zKVxyXG4gICAgICAgIGlmKHRoaXMuaW5uZXJWaWV3KSB7XHJcbiAgICAgICAgICAgIGxldCB7IHN0YXRlIH0gPSB0aGlzLmlubmVyVmlld1xyXG5cclxuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gbm9kZS5jb250ZW50LmZpbmREaWZmU3RhcnQoc3RhdGUuZG9jLmNvbnRlbnQpXHJcbiAgICAgICAgICAgIGlmKHN0YXJ0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGxldCBkaWZmID0gbm9kZS5jb250ZW50LmZpbmREaWZmRW5kKHN0YXRlLmRvYy5jb250ZW50KVxyXG4gICAgICAgICAgICAgICAgaWYoZGlmZikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB7IGE6IGVuZEEsIGI6IGVuZEIgfSA9IGRpZmZcclxuICAgICAgICAgICAgICAgICAgICBsZXQgb3ZlcmxhcCA9IHN0YXJ0IC0gTWF0aC5taW4oZW5kQSwgZW5kQilcclxuICAgICAgICAgICAgICAgICAgICBpZihvdmVybGFwID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRBICs9IG92ZXJsYXAsIGVuZEIgKz0gb3ZlcmxhcFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlubmVyVmlldy5kaXNwYXRjaChcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUudHJcclxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2Uoc3RhcnQsIGVuZEIsIG5vZGUuc2xpY2Uoc3RhcnQsIGVuZEEpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0TWV0YShNQVRIX1BMVUdJTl9LRVksIHRydWUpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZighdGhpcy5pc0VkaXRpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJNYXRoKClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlXHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmVtaXQoJ2Rlc3Ryb3knKVxyXG4gICAgICAgIHRoaXMuY2xvc2VFZGl0b3IoZmFsc2UpXHJcblxyXG4gICAgICAgIGlmKHRoaXMubWF0aFJlbmRlckVsdCkge1xyXG4gICAgICAgICAgICB0aGlzLm1hdGhSZW5kZXJFbHQucmVtb3ZlKClcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMubWF0aFJlbmRlckVsdFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodGhpcy5tYXRoU3JjRWx0KSB7XHJcbiAgICAgICAgICAgIHRoaXMubWF0aFNyY0VsdC5yZW1vdmUoKVxyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5tYXRoU3JjRWx0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmRvbS5yZW1vdmUoKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB1cGRhdGVDdXJzb3JQb3Moc3RhdGU6IEVkaXRvclN0YXRlKSB7XHJcbiAgICAgICAgY29uc3QgcG9zID0gdGhpcy5nZXRQb3MoKVxyXG4gICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLmRvYy5ub2RlU2l6ZVxyXG4gICAgICAgIGNvbnN0IGluUG1TZWxlY3Rpb24gPSBcclxuICAgICAgICAgICAgKHN0YXRlLnNlbGVjdGlvbi5mcm9tIDwgcG9zICsgc2l6ZSlcclxuICAgICAgICAgICAgJiYgKHBvcyA8IHN0YXRlLnNlbGVjdGlvbi50bylcclxuXHJcbiAgICAgICAgICAgIGlmKCFpblBtU2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnNvclNpZGUgPSAocG9zIDwgc3RhdGUuc2VsZWN0aW9uLmZyb20pID8gJ2VuZCcgOiAnc3RhcnQnXHJcbiAgICAgICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZWxlY3ROb2RlKCkge1xyXG4gICAgICAgIC8vIGRlYnVnZ2VyXHJcbiAgICAgICAgaWYoIXRoaXMub3V0ZXJWaWV3LmVkaXRhYmxlKSB7XHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5kb20uY2xhc3NMaXN0LmFkZCgnUHJvc2VNaXJyb3Itc2VsZWN0ZWRub2RlJylcclxuICAgICAgICBpZighdGhpcy5pc0VkaXRpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5vcGVuRWRpdG9yKClcclxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqIOeUn+aIkOmihOiniOWMuiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuICAgICAgICAgICAgdGhpcy5rYXRleERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXHJcbiAgICAgICAgICAgIHRoaXMua2F0ZXhEaXYuY2xhc3NOYW1lID0gJ21hdGgtcHJldmlldydcclxuICAgICAgICAgICAgbGV0IHsgdHI6IG91dGVyVHIsIGRpc3BhdGNoOiBvdXRlckRpc3BhdGNoIH0gPSBnZXRJbW1UcmFuc2FjdGlvbih0aGlzLm91dGVyVmlldylcclxuICAgICAgICAgICAgbGV0IHsgdHI6IGlubmVyVHIgfSA9IGdldEltbVRyYW5zYWN0aW9uKHRoaXMuaW5uZXJWaWV3IGFzIEVkaXRvclZpZXcpXHJcbiAgICAgICAgICAgIG91dGVyRGlzcGF0Y2gob3V0ZXJUci5zZXRNZXRhKFxyXG4gICAgICAgICAgICAgICAgTUFUSF9QUkVWSUVXX0tFWSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnQUREJyxcclxuICAgICAgICAgICAgICAgICAgICBwb3M6IHRoaXMuZ2V0UG9zKCksXHJcbiAgICAgICAgICAgICAgICAgICAga2F0ZXhET006IHRoaXMucmVuZGVyS2F0ZXgodGhpcy5rYXRleERpdiwgZmFsc2UsIGlubmVyVHIuZG9jKVxyXG4gICAgICAgICAgICAgICAgfSBhcyBNYXRoUHJldmlld01ldGFcclxuICAgICAgICAgICAgKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGRlc2VsZWN0Tm9kZSgpIHtcclxuICAgICAgICB0aGlzLmRvbS5jbGFzc0xpc3QucmVtb3ZlKCdQcm9zZU1pcnJvci1zZWxlY3RlZG5vZGUnKVxyXG4gICAgICAgIGlmKHRoaXMuaXNFZGl0aW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VFZGl0b3IoKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdG9wRXZlbnQoZXZlbnQ6IEV2ZW50KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmlubmVyVmlldyAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAmJiAoZXZlbnQudGFyZ2V0ICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICYmIHRoaXMuaW5uZXJWaWV3LmRvbS5jb250YWlucyhldmVudC50YXJnZXQgYXMgTm9kZSlcclxuICAgIH0gXHJcblxyXG4gICAgaWdub3JlTXV0YXRpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxuXHJcblxyXG4gICAgb3BlbkVkaXRvcigpIHtcclxuICAgICAgICBpZih0aGlzLmlubmVyVmlldykgeyB0aHJvdyBFcnJvcignaW5uZXIgdmlldyBzaG91bGQgbm90IGV4aXN0IScpIH1cclxuICAgICAgICB0aGlzLmlubmVyVmlldyA9IG5ldyBFZGl0b3JWaWV3KHRoaXMubWF0aFNyY0VsdCwge1xyXG4gICAgICAgICAgICBzdGF0ZTogRWRpdG9yU3RhdGUuY3JlYXRlKHtcclxuICAgICAgICAgICAgICAgIGRvYzogdGhpcy5kb2MsXHJcbiAgICAgICAgICAgICAgICBwbHVnaW5zOiBbXHJcbiAgICAgICAgICAgICAgICAgICAga2V5bWFwKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ1RhYic6IChzdGF0ZSwgZGlzcGF0Y2gpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goc3RhdGUudHIuaW5zZXJ0VGV4dCgnXFx0JykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0JhY2tzcGFjZSc6IGNoYWluQ29tbWFuZHMoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVTZWxlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3RhdGUsIGRpc3BhdGNoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXN0YXRlLnNlbGVjdGlvbi5lbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodGhpcy5kb2MudGV4dENvbnRlbnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRlclZpZXcuZGlzcGF0Y2godGhpcy5vdXRlclZpZXcuc3RhdGUudHIuaW5zZXJ0VGV4dCgnJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vdXRlclZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICksXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnQ3RybC1CYWNrc3BhY2UnOiAoc3RhdGUsIGRpc3BhdGNoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm91dGVyVmlldy5kaXNwYXRjaCh0aGlzLm91dGVyVmlldy5zdGF0ZS50ci5pbnNlcnRUZXh0KCcnKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3V0ZXJWaWV3LmZvY3VzKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnRW50ZXInOiBjaGFpbkNvbW1hbmRzKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld2xpbmVJbkNvZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGFzcGVNYXRoQ21kKHRoaXMub3V0ZXJWaWV3LCArMSwgZmFsc2UsIHRoaXMuZGlzcGxheU1vZGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdDdHJsLUVudGVyJyA6IGNvbGxhc3BlTWF0aENtZCh0aGlzLm91dGVyVmlldywgKzEsIGZhbHNlLCB0aGlzLmRpc3BsYXlNb2RlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0Fycm93TGVmdCcgIDogY29sbGFzcGVNYXRoQ21kKHRoaXMub3V0ZXJWaWV3LCAtMSwgdHJ1ZSwgdGhpcy5kaXNwbGF5TW9kZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdBcnJvd1VwJyAgICA6IGNvbGxhc3BlTWF0aENtZCh0aGlzLm91dGVyVmlldywgLTEsIHRydWUsIHRoaXMuZGlzcGxheU1vZGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnQXJyb3dSaWdodCcgOiBjb2xsYXNwZU1hdGhDbWQodGhpcy5vdXRlclZpZXcsICsxLCB0cnVlLCB0aGlzLmRpc3BsYXlNb2RlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ0Fycm93RG93bicgIDogY29sbGFzcGVNYXRoQ21kKHRoaXMub3V0ZXJWaWV3LCArMSwgdHJ1ZSwgdGhpcy5kaXNwbGF5TW9kZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdTcGFjZScgICAgICA6IChzdGF0ZSwgZGlzcGF0Y2gpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRpc3BhdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goc3RhdGUudHIuaW5zZXJ0VGV4dCgnICcpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGVNYXRoUHJldmlld1BsdWdpbih0aGlzLm91dGVyVmlldywgdGhpcy5rYXRleE9wdGlvbnMsIHRoaXMuZ2V0UG9zKCkpXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBkaXNwYXRjaFRyYW5zYWN0aW9uOiB0aGlzLmRpc3BhdGNoSW5uZXIuYmluZCh0aGlzKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiDpgInkuK0gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG4gICAgICAgIGxldCB7IHN0YXRlOiBpbm5lclN0YXRlIH0gPSB0aGlzLmlubmVyVmlld1xyXG4gICAgICAgIHRoaXMuaW5uZXJWaWV3LmZvY3VzKClcclxuICAgICAgICBsZXQgbWFieVBvcyA9IHRoaXMubWF0aFBsdWdpbktleS5nZXRTdGF0ZSh0aGlzLm91dGVyVmlldy5zdGF0ZSk/LnByZXZDdXJzb3JQb3NcclxuICAgICAgICBpZihtYWJ5UG9zICA9PT0gbnVsbCB8fCBtYWJ5UG9zID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcignW3Byb3NlbWlycm9yLW1hdGhdIEVycm9yOiAgVW5hYmxlIHRvIGZldGNoIG1hdGggcGx1Z2luIHN0YXRlIGZyb20ga2V5LicpXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgbGV0IHByZXZDdXJzb3JQb3MgPSBtYWJ5UG9zID8/IDBcclxuICAgICAgICBsZXQgaW5uZXJQb3MgPSBwcmV2Q3Vyc29yUG9zIDw9IHRoaXMuZ2V0UG9zKCkgPyAwIDogdGhpcy5kb2Mubm9kZVNpemUgLSAyXHJcbiAgICAgICAgdGhpcy5pbm5lclZpZXcuZGlzcGF0Y2goXHJcbiAgICAgICAgICAgIGlubmVyU3RhdGUudHIuc2V0U2VsZWN0aW9uKFxyXG4gICAgICAgICAgICAgICAgVGV4dFNlbGVjdGlvbi5jcmVhdGUoaW5uZXJTdGF0ZS5kb2MsIGlubmVyUG9zKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKVxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5pc0VkaXRpbmcgPSB0cnVlXHJcbiAgICB9XHJcblxyXG4gICAgY2xvc2VFZGl0b3IocmVuZGVyOiBib29sZWFuID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmKHRoaXMuaW5uZXJWaWV3KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5uZXJWaWV3LmRlc3Ryb3koKVxyXG4gICAgICAgICAgICB0aGlzLmlubmVyVmlldyA9IHVuZGVmaW5lZFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYocmVuZGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyTWF0aCgpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCB7IHRyOiBvdXRlclRyLCBkaXNwYXRjaDogb3V0ZXJEaXNwYXRjaCB9ID0gZ2V0SW1tVHJhbnNhY3Rpb24odGhpcy5vdXRlclZpZXcpXHJcbiAgICAgICAgb3V0ZXJEaXNwYXRjaChvdXRlclRyLnNldE1ldGEoXHJcbiAgICAgICAgICAgIE1BVEhfUFJFVklFV19LRVksXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdSRU1PVkUnLFxyXG4gICAgICAgICAgICAgICAgcG9zOiB0aGlzLmdldFBvcygpLFxyXG4gICAgICAgICAgICAgICAga2F0ZXhET006IHRoaXMua2F0ZXhEaXZcclxuICAgICAgICAgICAgfSBhcyBNYXRoUHJldmlld01ldGFcclxuICAgICAgICApKVxyXG4gICAgICAgIHRoaXMuaXNFZGl0aW5nID0gZmFsc2VcclxuICAgIH1cclxuXHJcbiAgICBkaXNwYXRjaElubmVyKHRyOiBUcmFuc2FjdGlvbikge1xyXG4gICAgICAgIGlmKCF0aGlzLmlubmVyVmlldykgcmV0dXJuXHJcblxyXG4gICAgICAgIC8v5aSE55CG6aKE6KeIXHJcbiAgICAgICAgaWYodHIuZG9jQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAvL+aPkOS6pOa4suafk+WQjueahOe7k+aenOS4juS9jee9ruWIsOWkluWxglxyXG4gICAgICAgICAgICBsZXQgeyB0cjogb3V0ZXJUciwgZGlzcGF0Y2g6IG91dGVyRGlzcGF0Y2ggfSA9IGdldEltbVRyYW5zYWN0aW9uKHRoaXMub3V0ZXJWaWV3KVxyXG4gICAgICAgICAgICB0aGlzLnJlbmRlckthdGV4KHRoaXMua2F0ZXhEaXYgYXMgSFRNTEVsZW1lbnQsIGZhbHNlLCB0ci5kb2MpXHJcbiAgICAgICAgICAgIG91dGVyRGlzcGF0Y2gob3V0ZXJUci5zZXRNZXRhKFxyXG4gICAgICAgICAgICAgICAgTUFUSF9QUkVWSUVXX0tFWSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnTU9ESUZZJyxcclxuICAgICAgICAgICAgICAgIH0gYXMgTWF0aFByZXZpZXdNZXRhLFxyXG4gICAgICAgICAgICApKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHsgc3RhdGUsIHRyYW5zYWN0aW9ucyB9ID0gdGhpcy5pbm5lclZpZXcuc3RhdGUuYXBwbHlUcmFuc2FjdGlvbih0cilcclxuICAgICAgICB0aGlzLmlubmVyVmlldy51cGRhdGVTdGF0ZShzdGF0ZSlcclxuXHJcbiAgICAgICAgaWYoIXRyLmdldE1ldGEoTUFUSF9QTFVHSU5fS0VZKSkge1xyXG4gICAgICAgICAgICBsZXQgb3V0ZXJUciA9IHRoaXMub3V0ZXJWaWV3LnN0YXRlLnRyLFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0TWFwID0gU3RlcE1hcC5vZmZzZXQodGhpcy5nZXRQb3MoKSArIDEpXHJcblxyXG4gICAgICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgdHJhbnNhY3Rpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgeyBzdGVwcyB9ID0gdHJhbnNhY3Rpb25zW2ldXHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGogPSAwOyBqIDwgc3RlcHMubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbWFwcGVkID0gc3RlcHNbal0ubWFwKG9mZnNldE1hcClcclxuICAgICAgICAgICAgICAgICAgICBpZighbWFwcGVkKSB0aHJvdyBFcnJvcignc3RlcCBkaXNjYXJkZWQnKVxyXG4gICAgICAgICAgICAgICAgICAgIG91dGVyVHIuc3RlcChtYXBwZWQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKG91dGVyVHIuZG9jQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdXRlclZpZXcuZGlzcGF0Y2gob3V0ZXJUcilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuXHJcbiIsImltcG9ydCB7IFBsdWdpbiwgUGx1Z2luS2V5IH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnXHJcbmltcG9ydCB7IHBtTm9kZSB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJ1xyXG5pbXBvcnQgeyBFZGl0b3JWaWV3IH0gZnJvbSAncHJvc2VtaXJyb3ItdmlldydcclxuaW1wb3J0IHsgTWF0aFZpZXcgfSBmcm9tICcuL21hdGhOb2RldmlldydcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWF0aFBsdWdpblN0YXRlIHtcclxuICAgIG1hY3JvczogUmVjb3JkPHN0cmluZywgc3RyaW5nPlxyXG4gICAgYWN0aXZlTm9kZVZpZXdzOiBBcnJheTxNYXRoVmlldz5cclxuICAgIHByZXZDdXJzb3JQb3M6IG51bWJlclxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgTUFUSF9QTFVHSU5fS0VZID0gbmV3IFBsdWdpbktleTxNYXRoUGx1Z2luU3RhdGU+KCdwcm9zZW1pcnJvci1tYXRoJylcclxuXHJcbmV4cG9ydCBjb25zdCBkaXNwbGF5TW9kZSA9IHtcclxuICAgIGlubGluZTogZmFsc2UsXHJcbiAgICBkaXNwbGF5OiB0cnVlLCBcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU1hdGhWaWV3KGRpc3BsYXlNb2RlOiBib29sZWFuKSB7XHJcbiAgICByZXR1cm4gKG5vZGU6IHBtTm9kZSwgdmlldzogRWRpdG9yVmlldywgZ2V0UG9zOiBib29sZWFuIHwgKCgpID0+IG51bWJlcikpOiBNYXRoVmlldyA9PiB7XHJcbiAgICAgICAgbGV0IHBsdWdpblN0YXRlID0gTUFUSF9QTFVHSU5fS0VZLmdldFN0YXRlKHZpZXcuc3RhdGUpXHJcbiAgICAgICAgaWYoIXBsdWdpblN0YXRlKSB7IHRocm93IG5ldyBFcnJvcignbm8gbWF0aCBwbHVnaW4hJykgfVxyXG4gICAgICAgIGxldCBub2RlVmlld3MgPSBwbHVnaW5TdGF0ZS5hY3RpdmVOb2RlVmlld3NcclxuXHJcbiAgICAgICAgbGV0IG5vZGVWaWV3OiBNYXRoVmlldyA9IG5ldyBNYXRoVmlldyhcclxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgIG5vZGUsIHZpZXcsIGdldFBvcyBhcyAoKCkgPT4gbnVtYmVyKSxcclxuICAgICAgICAgICAgZGlzcGxheU1vZGUsXHJcbiAgICAgICAgICAgIHsga2F0ZXhPcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBtYWNyb3M6IHBsdWdpblN0YXRlLm1hY3JvcyxcclxuICAgICAgICAgICAgfX0sXHJcbiAgICAgICAgICAgIE1BVEhfUExVR0lOX0tFWSxcclxuICAgICAgICAgICAgKCkgPT4gbm9kZVZpZXdzLnNwbGljZShub2RlVmlld3MuaW5kZXhPZihub2RlVmlldykpXHJcbiAgICAgICAgKVxyXG5cclxuXHJcbiAgICAgICAgbm9kZVZpZXdzLnB1c2gobm9kZVZpZXcpXHJcbiAgICAgICAgcmV0dXJuIG5vZGVWaWV3XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBtYXRoUGx1Z2luID0gbmV3IFBsdWdpbjxNYXRoUGx1Z2luU3RhdGU+KHtcclxuICAgIGtleTogTUFUSF9QTFVHSU5fS0VZLFxyXG4gICAgc3RhdGU6IHtcclxuICAgICAgICBpbml0KGNvbmZpZywgaW5zdGFuc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIG1hY3Jvczoge30sXHJcbiAgICAgICAgICAgICAgICBhY3RpdmVOb2RlVmlld3M6IFtdLFxyXG4gICAgICAgICAgICAgICAgcHJldkN1cnNvclBvczogMCxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGFwcGx5KHRyLCB2YWx1ZSwgb2xiU3RhdGUsIG5ld1N0YXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVOb2RlVmlld3M6IHZhbHVlLmFjdGl2ZU5vZGVWaWV3cyxcclxuICAgICAgICAgICAgICAgIG1hY3JvczogdmFsdWUubWFjcm9zLFxyXG4gICAgICAgICAgICAgICAgcHJldkN1cnNvclBvczogb2xiU3RhdGUuc2VsZWN0aW9uLmZyb20sXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcbiAgICBwcm9wczogIHtcclxuICAgICAgICBub2RlVmlld3M6IHtcclxuICAgICAgICAgICAgJ21hdGhfaW5saW5lJzogY3JlYXRlTWF0aFZpZXcoZGlzcGxheU1vZGUuaW5saW5lKSxcclxuICAgICAgICAgICAgJ21hdGhfZGlzcGxheSc6IGNyZWF0ZU1hdGhWaWV3KGRpc3BsYXlNb2RlLmRpc3BsYXkpLFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG59KSIsImltcG9ydCB0eXBlIHsgTm9kZVR5cGUgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCdcclxuaW1wb3J0IHsgSW5wdXRSdWxlIH0gZnJvbSAncHJvc2VtaXJyb3ItaW5wdXRydWxlcydcclxuaW1wb3J0IHsgTm9kZVNlbGVjdGlvbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJ1xyXG4vLyBpbXBvcnQgeyBJbnB1dFJ1bGVTcGVjIH0gZnJvbSAnQGVkaXRvci9jb3JlL3R5cGVzJ1xyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuZXhwb3J0IGNvbnN0IFJFR0VYX0lOTElORV9NQVRIX0RPTExBUlMgPSAvXFwkKC4rKVxcJC9cclxuZXhwb3J0IGNvbnN0IFJFR0VYX0lOTElORV9NQVRIX0RPTExBUlNfRVNDQVBFRCA9ICgoKSA9PiB7XHJcbiAgICB0cnkgICAgICB7IHJldHVybiAvKD88IVxcXFxcXFxcKVxcJCguKykoPzwhXFxcXFxcXFwpXFwkLyB9XHJcbiAgICBjYXRjaChlKSB7IHJldHVybiBSRUdFWF9JTkxJTkVfTUFUSF9ET0xMQVJTIH1cclxufSkoKVxyXG5cclxuZXhwb3J0IGNvbnN0IFJFR0VYX0lOTElORV9NQVRIX0RPTExBUlNfTElURSA9IC8oPzwhXFwkKVxcJFxccyskL1xyXG5cclxuZXhwb3J0IGNvbnN0IFJFR0VYX0JMT0NLX01BVEhfRE9MTEFSUyA9IC9cXCRcXCRcXHMrJC9cclxuXHJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VCbG9ja01hdGhJbnB1dHJ1bGUoXHJcbiAgICBwYXR0ZXJuOiBSZWdFeHAsIFxyXG4gICAgbm9kZVR5cGU6IE5vZGVUeXBlLCBcclxuICAgIGdldEF0dHJzPzpPYmplY3QgfCAoKG1hdGg6IEFycmF5PHN0cmluZz4pID0+IGFueSkpIHtcclxuICAgICAgICByZXR1cm4gbmV3IElucHV0UnVsZShcclxuICAgICAgICAgICAgcGF0dGVybixcclxuICAgICAgICAgICAgKHN0YXRlLCBtYXRjaCwgc3RhcnQsIGVuZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coMSlcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdtYXRoJylcclxuICAgICAgICAgICAgICAgIGxldCAkc3RhcnQgPSBzdGF0ZS5kb2MucmVzb2x2ZShzdGFydClcclxuICAgICAgICAgICAgICAgIGxldCBhdHRycyA9IGdldEF0dHJzIGluc3RhbmNlb2YgRnVuY3Rpb24gPyBnZXRBdHRycyhtYXRjaCk6IGdldEF0dHJzXHJcbiAgICAgICAgICAgICAgICAvLyBkZWJ1Z2dlclxyXG4gICAgICAgICAgICAgICAgaWYoKCEkc3RhcnQubm9kZSgtMSkuY2FuUmVwbGFjZVdpdGgoJHN0YXJ0LmluZGV4KC0xKSwgJHN0YXJ0LmluZGV4QWZ0ZXIoLTEpLCBub2RlVHlwZSkpKSByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgaWYobm9kZVR5cGUubmFtZSA9PT0gJ21hdGhfZGlzcGxheScpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZigkc3RhcnQucGFyZW50T2Zmc2V0ICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IHRyID0gc3RhdGUudHJcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmRlbGV0ZShzdGFydCwgZW5kKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0QmxvY2tUeXBlKHN0YXJ0LCBzdGFydCwgbm9kZVR5cGUsIGF0dHJzKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyLnNldFNlbGVjdGlvbihOb2RlU2VsZWN0aW9uLmNyZWF0ZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyLmRvYywgdHIubWFwcGluZy5tYXAoJHN0YXJ0LnBvcyAtIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApXHJcbiAgICB9XHJcblxyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWFrZUlubGluZU1hdGhJbnB1dFJ1bGUoXHJcbiAgICBwYXR0ZXJuOiBSZWdFeHAsIFxyXG4gICAgbm9kZVR5cGU6IE5vZGVUeXBlLCBcclxuICAgIGdldEF0dHJzPzpPYmplY3QgfCAoKG1hdGg6IEFycmF5PHN0cmluZz4pID0+IGFueSkpIHtcclxuICAgICAgICByZXR1cm4gbmV3IElucHV0UnVsZShcclxuICAgICAgICAgICAgcGF0dGVybixcclxuICAgICAgICAgICAgKHN0YXRlLCBtYXRjaCwgc3RhcnQsIGVuZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0ICRzdGFydCA9IHN0YXRlLmRvYy5yZXNvbHZlKHN0YXJ0KSxcclxuICAgICAgICAgICAgICAgICRlbmQgPSBzdGF0ZS5kb2MucmVzb2x2ZShlbmQpLFxyXG4gICAgICAgICAgICAgICAgaW5kZXggPSAkc3RhcnQuaW5kZXgoKVxyXG4gICAgICAgICAgICAgICAgLy8gZGVidWdnZXJcclxuICAgICAgICAgICAgICAgIGxldCBhdHRycyA9IGdldEF0dHJzIGluc3RhbmNlb2YgRnVuY3Rpb24gPyBnZXRBdHRycyhtYXRjaCk6IGdldEF0dHJzXHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhpbmRleCwgJGVuZC5pbmRleCgpKVxyXG4gICAgICAgICAgICAgICAgaWYoISRzdGFydC5wYXJlbnQuY2FuUmVwbGFjZVdpdGgoaW5kZXgsICRlbmQuaW5kZXgoKSwgbm9kZVR5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH0gIFxyXG5cclxuICAgICAgICAgICAgICAgIGxldCBtYXRjaExpdGUgPSBSRUdFWF9JTkxJTkVfTUFUSF9ET0xMQVJTX0xJVEUudGVzdChtYXRjaFswXSksXHJcbiAgICAgICAgICAgICAgICAgICAgdHIgPSBzdGF0ZS50ci5yZXBsYWNlUmFuZ2VXaXRoKFxyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0LCBlbmQsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hMaXRlID9cclxuICAgICAgICAgICAgICAgICAgICBub2RlVHlwZS5jcmVhdGUoYXR0cnMpOlxyXG4gICAgICAgICAgICAgICAgICAgIG5vZGVUeXBlLmNyZWF0ZShhdHRycywgbm9kZVR5cGUuc2NoZW1hLnRleHQobWF0Y2hbMV0pKVxyXG4gICAgICAgICAgICAgICAgKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyLnNldFNlbGVjdGlvbihOb2RlU2VsZWN0aW9uLmNyZWF0ZSh0ci5kb2MsICRzdGFydC5wb3MpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG5cclxuLy8gZXhwb3J0IGNvbnN0IElubGluZU1hdGhJbnB1dFJ1bGU6IElucHV0UnVsZVNwZWMgPSB7XHJcbi8vICAgICBub2RlTmFtZTogJ21hdGhfaW5saW5lJyxcclxuLy8gICAgIHJlZ2V4OiBSRUdFWF9JTkxJTkVfTUFUSF9ET0xMQVJTX0VTQ0FQRUQsXHJcbi8vICAgICBydWxlV3JhcDogbWFrZUlubGluZU1hdGhJbnB1dFJ1bGUsXHJcbi8vIH0iLCJpbXBvcnQgeyBDb250ZW50TWF0Y2gsIE5vZGVUeXBlLCBwbU5vZGUgfSBmcm9tIFwicHJvc2VtaXJyb3ItbW9kZWxcIjtcclxuaW1wb3J0IHsgRWRpdG9yU3RhdGUsIFBsdWdpbiwgUGx1Z2luS2V5LCBUZXh0U2VsZWN0aW9uLCBUcmFuc2FjdGlvbiB9IGZyb20gXCJwcm9zZW1pcnJvci1zdGF0ZVwiO1xyXG5pbXBvcnQgeyBEZWNvcmF0aW9uLCBEZWNvcmF0aW9uU2V0IH0gZnJvbSBcInByb3NlbWlycm9yLXZpZXdcIjtcclxuXHJcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiBvdXRlciBwbHVnaW4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbi8qKlxyXG4gKiDkvpvlpJbpg6jkvb/nlKjnmoTmj5Lku7bjgILnlKjkuo7ojrflj5bngrnlvIDnvJbovpHmoYblhazlvI/oioLngrnnmoTkvY3nva7vvIzlhoXlrrnjgIJcclxuICogYXBwbHnmm7TmlrDpnIDopoHosIPmlbTjgIJcclxuICovXHJcbmV4cG9ydCBjb25zdCBNQVRIX1BSRVZJRVdfS0VZID0gbmV3IFBsdWdpbktleSgncHJvc2VtaXJyb3IgbWF0aCBwcmV2aWV3JylcclxuZXhwb3J0IGNvbnN0IFBSRVZJRVdfV0lER0VUX0tFWSA9ICdwcm9zZW1pcnJvciBtYXRoIHByZXZpZXcnXHJcbi8qKlxyXG4gKiBNZXRh5Lqk5rWB5o6l5Y+j44CCXHJcbiAqIEBwYXJhbSB0eXBlOiDliKDpmaTov5jmmK/lop7liqBcclxuICogQHBhcmFtIHBvczog5YWs5byP6IqC54K555qE5L2N572uIFxyXG4gKiBAcGFyYW0ga2F0ZXhET006IOeUseWFrOW8j+iKgueCuea4suafk+WlveeahGthdGV46IqC54K544CCXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIE1hdGhQcmV2aWV3TWV0YSB7XHJcbiAgICB0eXBlOiAnQUREJyB8ICdSRU1PVkUnIHwgJ01PRElGWSdcclxuICAgIHBvczogbnVtYmVyXHJcbiAgICBrYXRleERPTTogSFRNTEVsZW1lbnRcclxuICAgIFxyXG59IFxyXG4vKirpgJrov4flhazlvI/oioLngrnnmoRzZXRNZXRh5p2l6LCD55SoYXBwbHlcclxuICog5Zug5Li65q+P5qyh5Y+q6IO954K55byA5LiA5Liq5YWs5byP6IqC54K544CC5omA5LulXHJcbiAqIGBkZWNvcmF0aW9uYOWUr+S4gOOAgiBcclxuICogXHJcbiAqIOWumuS5ieivpWBkZWNvcmF0aW9uYOS4umB3aWRnZXRgKGB3ZGlnZXRg6ZyA6KaB5Y2g6aKG5LiA6KGM77yM5L2N572u6ZqP5L6/5pGGKeOAglxyXG4gKiBcclxuICog6LCD55So6K+l5o+S5Lu255qE6L+H56iLOlxyXG4gKiAxLiDlnKjlhazlvI/oioLngrnkuK3nlJ/miJDnvJbovpHmoYbjgIJcclxuICogMi4gZ2V0TWV0YVxyXG4gKiBcclxuICog55Sf5oiQYHdpZGdldGDnmoTov4fnqIs6XHJcbiAqIDEuIOWQkeS4i+aOqOi/m+S4pOihjOOAglxyXG4gKiAyLiDlnKjnrKzkuozooYznlJ/miJDkuIDkuKpgd2lkZ2V0YOOAglxyXG4gKiAzLiDliankuIvnmoTkuqTnu5lrYXRleOeahOWxheS4reW4g+WxgOOAglxyXG4gKiBcclxuICog6ZSA5q+BYHdpZGdldGDnmoTov4fnqIvvvJpcclxuICogMS4g5YWJ5qCH56e75Yqo5Yiw5ZCI55CG5L2N572u44CCXHJcbiAqIDIuIOWIoOmZpOivpeiKgueCuShgcG1Ob2RlYClcclxuICogMy4g5Zue6YCA5Lik6KGM44CCXHJcbiAqIFxyXG4gKiDlvZPnhLbov5jmmK/opoHms6jmhI/pgInljLrlkozogZrnhKbjgIJcclxuICogXHJcbiAqIEB0b2RvIOW4jOacm+WinuWKoOe8k+WtmOacuuWItlxyXG4gKi9cclxuXHJcbmV4cG9ydCBjb25zdCBtYXRoUHJldmlld1BsdWdpbiA9IG5ldyBQbHVnaW48RGVjb3JhdGlvblNldD4oe1xyXG4gICAga2V5OiBNQVRIX1BSRVZJRVdfS0VZLFxyXG4gICAgc3RhdGU6IHtcclxuICAgICAgICBpbml0KF8sIHN0YXRlOiBFZGl0b3JTdGF0ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gRGVjb3JhdGlvblNldC5lbXB0eVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXBwbHkodHIsIGRlY29TZXQgKSB7XHJcbiAgICAgICAgICAgIGRlY29TZXQubWFwKHRyLm1hcHBpbmcsIHRyLmRvYylcclxuICAgICAgICAgICAgbGV0IGFjdGlvbjogTWF0aFByZXZpZXdNZXRhID0gdHIuZ2V0TWV0YShNQVRIX1BSRVZJRVdfS0VZKVxyXG4gICAgICAgICAgICBpZighYWN0aW9uKSByZXR1cm4gZGVjb1NldFxyXG4gICAgICAgICAgICBsZXQgeyBwb3MsIHR5cGUsIGthdGV4RE9NIH0gPSBhY3Rpb25cclxuICAgICAgICAgICAgc3dpdGNoKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0FERCc6ICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlY29TZXQgPSBkZWNvU2V0LmFkZChcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHIuZG9jLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbRGVjb3JhdGlvbi53aWRnZXQocG9zLCBrYXRleERPTSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBQUkVWSUVXX1dJREdFVF9LRVksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ01PRElGWSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAvL+mcgOimgeabtOaWsGthdGV4ZG9tLGthdGV4ZG9t6Ieq5Yqo5pu05paw77yM5LiN6ZyA6KaB6K6/5a2YXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlY29TZXRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgJ1JFTU9WRSc6IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVtb3ZlRGVjbyA9IGRlY29TZXQuZmluZCh1bmRlZmluZWQsIHVuZGVmaW5lZCwgZGVjbyA9PiBkZWNvLmtleSA9PT0gUFJFVklFV19XSURHRVRfS0VZKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWNvU2V0ID0gZGVjb1NldC5yZW1vdmUocmVtb3ZlRGVjbylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBkZWNvU2V0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcbiAgICBwcm9wczoge1xyXG4gICAgICAgIGRlY29yYXRpb25zKHN0YXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN0YXRlKHN0YXRlKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSlcclxuXHJcbi8qKiBcclxuICogQHRvZG8g6ZyA6KaB5Lit5b+D6LCD5bqmXHJcbiAqLyIsImltcG9ydCB7IFNlbGVjdGlvbiwgUGx1Z2luLCBFZGl0b3JTdGF0ZSB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJ1xyXG5pbXBvcnQgeyBwbU5vZGUgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCdcclxuaW1wb3J0IHsgRGVjb3JhdGlvbiwgRGVjb3JhdGlvblNldCB9IGZyb20gJ3Byb3NlbWlycm9yLXZpZXcnXHJcblxyXG50eXBlIENoZWNrU2VsZWN0aW9uUGFyYW1zID0ge1xyXG4gICAgc2VsZWN0aW9uOiBTZWxlY3Rpb24sXHJcbiAgICBkb2M6IHBtTm9kZSxcclxufVxyXG5cclxuY29uc3QgY2hlY2tTZWxlY3Rpb24gPSAoYXJnOiBDaGVja1NlbGVjdGlvblBhcmFtcykgPT4ge1xyXG4gICAgbGV0IHsgc2VsZWN0aW9uOiB7IGZyb20sIHRvIH0gfSA9IGFyZ1xyXG4gICAgbGV0IGNvbnRlbnQgPSBhcmcuc2VsZWN0aW9uLmNvbnRlbnQoKS5jb250ZW50XHJcbiAgICBsZXQgcmVzdWx0ID0gbmV3IEFycmF5PHsgc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIgfT4oKVxyXG5cclxuICAgIGNvbnRlbnQuZGVzY2VuZGFudHMoKG5vZGUsIHBvcywgcGFyZW50KSA9PiB7XHJcbiAgICAgICAgaWYobm9kZS50eXBlLm5hbWUgPT09ICd0ZXh0JykgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgaWYobm9kZS50eXBlLm5hbWUuc3RhcnRzV2l0aCgnbWF0aF8nKSkge1xyXG4gICAgICAgICAgICByZXN1bHQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBzdGFydDogTWF0aC5tYXgoZnJvbSArIHBvcyAtIDEsIDApLFxyXG4gICAgICAgICAgICAgICAgZW5kOiBmcm9tICsgcG9zICsgbm9kZS5ub2RlU2l6ZSAtIDEsXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRydWVcclxuICAgIH0pXHJcblxyXG4gICAgcmV0dXJuIERlY29yYXRpb25TZXQuY3JlYXRlKGFyZy5kb2MsIHJlc3VsdC5tYXAoXHJcbiAgICAgICAgKHtzdGFydCwgZW5kfSkgPT4gRGVjb3JhdGlvbi5ub2RlKHN0YXJ0LCBlbmQsIHsgY2xhc3M6ICdtYXRoLXNlbGVjdCcgfSlcclxuICAgICkpXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBtYXRoU2VsZWN0UGx1Z2luOiBQbHVnaW48RGVjb3JhdGlvblNldD4gPSBuZXcgUGx1Z2luPERlY29yYXRpb25TZXQ+KHtcclxuICAgIHN0YXRlOiB7XHJcbiAgICAgICAgaW5pdChjb25maWcsIGluc3RhbnNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjaGVja1NlbGVjdGlvbihpbnN0YW5zZSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFwcGx5KHRyLCBvbGREZWNvU2V0KSB7XHJcbiAgICAgICAgICAgIGlmKCF0ci5zZWxlY3Rpb24gfHwgIXRyLnNlbGVjdGlvblNldCkgcmV0dXJuIG9sZERlY29TZXRcclxuICAgICAgICAgICAgcmV0dXJuIGNoZWNrU2VsZWN0aW9uKHRyKVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgcHJvcHM6IHtcclxuICAgICAgICBkZWNvcmF0aW9uczogKHN0YXRlOiBFZGl0b3JTdGF0ZSkgPT4gbWF0aFNlbGVjdFBsdWdpbi5nZXRTdGF0ZShzdGF0ZSlcclxuICAgIH1cclxufSkiLCIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJrYXRleFwiXSA9IGZhY3RvcnkoKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJrYXRleFwiXSA9IGZhY3RvcnkoKTtcbn0pKCh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcyksIGZ1bmN0aW9uKCkge1xucmV0dXJuIC8qKioqKiovIChmdW5jdGlvbigpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHRcInVzZSBzdHJpY3RcIjtcbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgc2NvcGVcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19yZXF1aXJlX18gPSB7fTtcbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMgKi9cbi8qKioqKiovIFx0IWZ1bmN0aW9uKCkge1xuLyoqKioqKi8gXHRcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KCk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHQvKiB3ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kICovXG4vKioqKioqLyBcdCFmdW5jdGlvbigpIHtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9XG4vKioqKioqLyBcdH0oKTtcbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSB7fTtcblxuLy8gRVhQT1JUU1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbiAgXCJkZWZhdWx0XCI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gLyogYmluZGluZyAqLyBrYXRleF93ZWJwYWNrOyB9XG59KTtcblxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL1BhcnNlRXJyb3IuanNcblxuXG4vKipcbiAqIFRoaXMgaXMgdGhlIFBhcnNlRXJyb3IgY2xhc3MsIHdoaWNoIGlzIHRoZSBtYWluIGVycm9yIHRocm93biBieSBLYVRlWFxuICogZnVuY3Rpb25zIHdoZW4gc29tZXRoaW5nIGhhcyBnb25lIHdyb25nLiBUaGlzIGlzIHVzZWQgdG8gZGlzdGluZ3Vpc2ggaW50ZXJuYWxcbiAqIGVycm9ycyBmcm9tIGVycm9ycyBpbiB0aGUgZXhwcmVzc2lvbiB0aGF0IHRoZSB1c2VyIHByb3ZpZGVkLlxuICpcbiAqIElmIHBvc3NpYmxlLCBhIGNhbGxlciBzaG91bGQgcHJvdmlkZSBhIFRva2VuIG9yIFBhcnNlTm9kZSB3aXRoIGluZm9ybWF0aW9uXG4gKiBhYm91dCB3aGVyZSBpbiB0aGUgc291cmNlIHN0cmluZyB0aGUgcHJvYmxlbSBvY2N1cnJlZC5cbiAqL1xudmFyIFBhcnNlRXJyb3IgPSAvLyBFcnJvciBwb3NpdGlvbiBiYXNlZCBvbiBwYXNzZWQtaW4gVG9rZW4gb3IgUGFyc2VOb2RlLlxuZnVuY3Rpb24gUGFyc2VFcnJvcihtZXNzYWdlLCAvLyBUaGUgZXJyb3IgbWVzc2FnZVxudG9rZW4gLy8gQW4gb2JqZWN0IHByb3ZpZGluZyBwb3NpdGlvbiBpbmZvcm1hdGlvblxuKSB7XG4gIHRoaXMucG9zaXRpb24gPSB2b2lkIDA7XG4gIHZhciBlcnJvciA9IFwiS2FUZVggcGFyc2UgZXJyb3I6IFwiICsgbWVzc2FnZTtcbiAgdmFyIHN0YXJ0O1xuICB2YXIgbG9jID0gdG9rZW4gJiYgdG9rZW4ubG9jO1xuXG4gIGlmIChsb2MgJiYgbG9jLnN0YXJ0IDw9IGxvYy5lbmQpIHtcbiAgICAvLyBJZiB3ZSBoYXZlIHRoZSBpbnB1dCBhbmQgYSBwb3NpdGlvbiwgbWFrZSB0aGUgZXJyb3IgYSBiaXQgZmFuY2llclxuICAgIC8vIEdldCB0aGUgaW5wdXRcbiAgICB2YXIgaW5wdXQgPSBsb2MubGV4ZXIuaW5wdXQ7IC8vIFByZXBlbmQgc29tZSBpbmZvcm1hdGlvblxuXG4gICAgc3RhcnQgPSBsb2Muc3RhcnQ7XG4gICAgdmFyIGVuZCA9IGxvYy5lbmQ7XG5cbiAgICBpZiAoc3RhcnQgPT09IGlucHV0Lmxlbmd0aCkge1xuICAgICAgZXJyb3IgKz0gXCIgYXQgZW5kIG9mIGlucHV0OiBcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgZXJyb3IgKz0gXCIgYXQgcG9zaXRpb24gXCIgKyAoc3RhcnQgKyAxKSArIFwiOiBcIjtcbiAgICB9IC8vIFVuZGVybGluZSB0b2tlbiBpbiBxdWVzdGlvbiB1c2luZyBjb21iaW5pbmcgdW5kZXJzY29yZXNcblxuXG4gICAgdmFyIHVuZGVybGluZWQgPSBpbnB1dC5zbGljZShzdGFydCwgZW5kKS5yZXBsYWNlKC9bXl0vZywgXCIkJlxcdTAzMzJcIik7IC8vIEV4dHJhY3Qgc29tZSBjb250ZXh0IGZyb20gdGhlIGlucHV0IGFuZCBhZGQgaXQgdG8gdGhlIGVycm9yXG5cbiAgICB2YXIgbGVmdDtcblxuICAgIGlmIChzdGFydCA+IDE1KSB7XG4gICAgICBsZWZ0ID0gXCLigKZcIiArIGlucHV0LnNsaWNlKHN0YXJ0IC0gMTUsIHN0YXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGVmdCA9IGlucHV0LnNsaWNlKDAsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICB2YXIgcmlnaHQ7XG5cbiAgICBpZiAoZW5kICsgMTUgPCBpbnB1dC5sZW5ndGgpIHtcbiAgICAgIHJpZ2h0ID0gaW5wdXQuc2xpY2UoZW5kLCBlbmQgKyAxNSkgKyBcIuKAplwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByaWdodCA9IGlucHV0LnNsaWNlKGVuZCk7XG4gICAgfVxuXG4gICAgZXJyb3IgKz0gbGVmdCArIHVuZGVybGluZWQgKyByaWdodDtcbiAgfSAvLyBTb21lIGhhY2tlcnkgdG8gbWFrZSBQYXJzZUVycm9yIGEgcHJvdG90eXBlIG9mIEVycm9yXG4gIC8vIFNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS84NDYwNzUzXG5cblxuICB2YXIgc2VsZiA9IG5ldyBFcnJvcihlcnJvcik7XG4gIHNlbGYubmFtZSA9IFwiUGFyc2VFcnJvclwiOyAvLyAkRmxvd0ZpeE1lXG5cbiAgc2VsZi5fX3Byb3RvX18gPSBQYXJzZUVycm9yLnByb3RvdHlwZTsgLy8gJEZsb3dGaXhNZVxuXG4gIHNlbGYucG9zaXRpb24gPSBzdGFydDtcbiAgcmV0dXJuIHNlbGY7XG59OyAvLyAkRmxvd0ZpeE1lIE1vcmUgaGFja2VyeVxuXG5cblBhcnNlRXJyb3IucHJvdG90eXBlLl9fcHJvdG9fXyA9IEVycm9yLnByb3RvdHlwZTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHNyY19QYXJzZUVycm9yID0gKFBhcnNlRXJyb3IpO1xuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3V0aWxzLmpzXG4vKipcbiAqIFRoaXMgZmlsZSBjb250YWlucyBhIGxpc3Qgb2YgdXRpbGl0eSBmdW5jdGlvbnMgd2hpY2ggYXJlIHVzZWZ1bCBpbiBvdGhlclxuICogZmlsZXMuXG4gKi9cblxuLyoqXG4gKiBSZXR1cm4gd2hldGhlciBhbiBlbGVtZW50IGlzIGNvbnRhaW5lZCBpbiBhIGxpc3RcbiAqL1xudmFyIGNvbnRhaW5zID0gZnVuY3Rpb24gY29udGFpbnMobGlzdCwgZWxlbSkge1xuICByZXR1cm4gbGlzdC5pbmRleE9mKGVsZW0pICE9PSAtMTtcbn07XG4vKipcbiAqIFByb3ZpZGUgYSBkZWZhdWx0IHZhbHVlIGlmIGEgc2V0dGluZyBpcyB1bmRlZmluZWRcbiAqIE5PVEU6IENvdWxkbid0IHVzZSBgVGAgYXMgdGhlIG91dHB1dCB0eXBlIGR1ZSB0byBmYWNlYm9vay9mbG93IzUwMjIuXG4gKi9cblxuXG52YXIgZGVmbHQgPSBmdW5jdGlvbiBkZWZsdChzZXR0aW5nLCBkZWZhdWx0SWZVbmRlZmluZWQpIHtcbiAgcmV0dXJuIHNldHRpbmcgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRJZlVuZGVmaW5lZCA6IHNldHRpbmc7XG59OyAvLyBoeXBoZW5hdGUgYW5kIGVzY2FwZSBhZGFwdGVkIGZyb20gRmFjZWJvb2sncyBSZWFjdCB1bmRlciBBcGFjaGUgMiBsaWNlbnNlXG5cblxudmFyIHVwcGVyY2FzZSA9IC8oW0EtWl0pL2c7XG5cbnZhciBoeXBoZW5hdGUgPSBmdW5jdGlvbiBoeXBoZW5hdGUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSh1cHBlcmNhc2UsIFwiLSQxXCIpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgRVNDQVBFX0xPT0tVUCA9IHtcbiAgXCImXCI6IFwiJmFtcDtcIixcbiAgXCI+XCI6IFwiJmd0O1wiLFxuICBcIjxcIjogXCImbHQ7XCIsXG4gIFwiXFxcIlwiOiBcIiZxdW90O1wiLFxuICBcIidcIjogXCImI3gyNztcIlxufTtcbnZhciBFU0NBUEVfUkVHRVggPSAvWyY+PFwiJ10vZztcbi8qKlxuICogRXNjYXBlcyB0ZXh0IHRvIHByZXZlbnQgc2NyaXB0aW5nIGF0dGFja3MuXG4gKi9cblxuZnVuY3Rpb24gdXRpbHNfZXNjYXBlKHRleHQpIHtcbiAgcmV0dXJuIFN0cmluZyh0ZXh0KS5yZXBsYWNlKEVTQ0FQRV9SRUdFWCwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgcmV0dXJuIEVTQ0FQRV9MT09LVVBbbWF0Y2hdO1xuICB9KTtcbn1cbi8qKlxuICogU29tZXRpbWVzIHdlIHdhbnQgdG8gcHVsbCBvdXQgdGhlIGlubmVybW9zdCBlbGVtZW50IG9mIGEgZ3JvdXAuIEluIG1vc3RcbiAqIGNhc2VzLCB0aGlzIHdpbGwganVzdCBiZSB0aGUgZ3JvdXAgaXRzZWxmLCBidXQgd2hlbiBvcmRncm91cHMgYW5kIGNvbG9ycyBoYXZlXG4gKiBhIHNpbmdsZSBlbGVtZW50LCB3ZSB3YW50IHRvIHB1bGwgdGhhdCBvdXQuXG4gKi9cblxuXG52YXIgZ2V0QmFzZUVsZW0gPSBmdW5jdGlvbiBnZXRCYXNlRWxlbShncm91cCkge1xuICBpZiAoZ3JvdXAudHlwZSA9PT0gXCJvcmRncm91cFwiKSB7XG4gICAgaWYgKGdyb3VwLmJvZHkubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gZ2V0QmFzZUVsZW0oZ3JvdXAuYm9keVswXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBncm91cDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZ3JvdXAudHlwZSA9PT0gXCJjb2xvclwiKSB7XG4gICAgaWYgKGdyb3VwLmJvZHkubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gZ2V0QmFzZUVsZW0oZ3JvdXAuYm9keVswXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBncm91cDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZ3JvdXAudHlwZSA9PT0gXCJmb250XCIpIHtcbiAgICByZXR1cm4gZ2V0QmFzZUVsZW0oZ3JvdXAuYm9keSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdyb3VwO1xuICB9XG59O1xuLyoqXG4gKiBUZVhib29rIGFsZ29yaXRobXMgb2Z0ZW4gcmVmZXJlbmNlIFwiY2hhcmFjdGVyIGJveGVzXCIsIHdoaWNoIGFyZSBzaW1wbHkgZ3JvdXBzXG4gKiB3aXRoIGEgc2luZ2xlIGNoYXJhY3RlciBpbiB0aGVtLiBUbyBkZWNpZGUgaWYgc29tZXRoaW5nIGlzIGEgY2hhcmFjdGVyIGJveCxcbiAqIHdlIGZpbmQgaXRzIGlubmVybW9zdCBncm91cCwgYW5kIHNlZSBpZiBpdCBpcyBhIHNpbmdsZSBjaGFyYWN0ZXIuXG4gKi9cblxuXG52YXIgaXNDaGFyYWN0ZXJCb3ggPSBmdW5jdGlvbiBpc0NoYXJhY3RlckJveChncm91cCkge1xuICB2YXIgYmFzZUVsZW0gPSBnZXRCYXNlRWxlbShncm91cCk7IC8vIFRoZXNlIGFyZSBhbGwgdGhleSB0eXBlcyBvZiBncm91cHMgd2hpY2ggaG9sZCBzaW5nbGUgY2hhcmFjdGVyc1xuXG4gIHJldHVybiBiYXNlRWxlbS50eXBlID09PSBcIm1hdGhvcmRcIiB8fCBiYXNlRWxlbS50eXBlID09PSBcInRleHRvcmRcIiB8fCBiYXNlRWxlbS50eXBlID09PSBcImF0b21cIjtcbn07XG5cbnZhciBhc3NlcnQgPSBmdW5jdGlvbiBhc3NlcnQodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgbm9uLW51bGwsIGJ1dCBnb3QgJyArIFN0cmluZyh2YWx1ZSkpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufTtcbi8qKlxuICogUmV0dXJuIHRoZSBwcm90b2NvbCBvZiBhIFVSTCwgb3IgXCJfcmVsYXRpdmVcIiBpZiB0aGUgVVJMIGRvZXMgbm90IHNwZWNpZnkgYVxuICogcHJvdG9jb2wgKGFuZCB0aHVzIGlzIHJlbGF0aXZlKS5cbiAqL1xuXG52YXIgcHJvdG9jb2xGcm9tVXJsID0gZnVuY3Rpb24gcHJvdG9jb2xGcm9tVXJsKHVybCkge1xuICB2YXIgcHJvdG9jb2wgPSAvXlxccyooW15cXFxcLyNdKj8pKD86OnwmIzAqNTh8JiN4MCozYSkvaS5leGVjKHVybCk7XG4gIHJldHVybiBwcm90b2NvbCAhPSBudWxsID8gcHJvdG9jb2xbMV0gOiBcIl9yZWxhdGl2ZVwiO1xufTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHV0aWxzID0gKHtcbiAgY29udGFpbnM6IGNvbnRhaW5zLFxuICBkZWZsdDogZGVmbHQsXG4gIGVzY2FwZTogdXRpbHNfZXNjYXBlLFxuICBoeXBoZW5hdGU6IGh5cGhlbmF0ZSxcbiAgZ2V0QmFzZUVsZW06IGdldEJhc2VFbGVtLFxuICBpc0NoYXJhY3RlckJveDogaXNDaGFyYWN0ZXJCb3gsXG4gIHByb3RvY29sRnJvbVVybDogcHJvdG9jb2xGcm9tVXJsXG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9TZXR0aW5ncy5qc1xuLyogZXNsaW50IG5vLWNvbnNvbGU6MCAqL1xuXG4vKipcbiAqIFRoaXMgaXMgYSBtb2R1bGUgZm9yIHN0b3Jpbmcgc2V0dGluZ3MgcGFzc2VkIGludG8gS2FUZVguIEl0IGNvcnJlY3RseSBoYW5kbGVzXG4gKiBkZWZhdWx0IHNldHRpbmdzLlxuICovXG5cblxuXG5cbi8qKlxuICogVGhlIG1haW4gU2V0dGluZ3Mgb2JqZWN0XG4gKlxuICogVGhlIGN1cnJlbnQgb3B0aW9ucyBzdG9yZWQgYXJlOlxuICogIC0gZGlzcGxheU1vZGU6IFdoZXRoZXIgdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHR5cGVzZXQgYXMgaW5saW5lIG1hdGhcbiAqICAgICAgICAgICAgICAgICAoZmFsc2UsIHRoZSBkZWZhdWx0KSwgbWVhbmluZyB0aGF0IHRoZSBtYXRoIHN0YXJ0cyBpblxuICogICAgICAgICAgICAgICAgIFxcdGV4dHN0eWxlIGFuZCBpcyBwbGFjZWQgaW4gYW4gaW5saW5lLWJsb2NrKTsgb3IgYXMgZGlzcGxheVxuICogICAgICAgICAgICAgICAgIG1hdGggKHRydWUpLCBtZWFuaW5nIHRoYXQgdGhlIG1hdGggc3RhcnRzIGluIFxcZGlzcGxheXN0eWxlXG4gKiAgICAgICAgICAgICAgICAgYW5kIGlzIHBsYWNlZCBpbiBhIGJsb2NrIHdpdGggdmVydGljYWwgbWFyZ2luLlxuICovXG52YXIgU2V0dGluZ3MgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTZXR0aW5ncyhvcHRpb25zKSB7XG4gICAgdGhpcy5kaXNwbGF5TW9kZSA9IHZvaWQgMDtcbiAgICB0aGlzLm91dHB1dCA9IHZvaWQgMDtcbiAgICB0aGlzLmxlcW5vID0gdm9pZCAwO1xuICAgIHRoaXMuZmxlcW4gPSB2b2lkIDA7XG4gICAgdGhpcy50aHJvd09uRXJyb3IgPSB2b2lkIDA7XG4gICAgdGhpcy5lcnJvckNvbG9yID0gdm9pZCAwO1xuICAgIHRoaXMubWFjcm9zID0gdm9pZCAwO1xuICAgIHRoaXMubWluUnVsZVRoaWNrbmVzcyA9IHZvaWQgMDtcbiAgICB0aGlzLmNvbG9ySXNUZXh0Q29sb3IgPSB2b2lkIDA7XG4gICAgdGhpcy5zdHJpY3QgPSB2b2lkIDA7XG4gICAgdGhpcy50cnVzdCA9IHZvaWQgMDtcbiAgICB0aGlzLm1heFNpemUgPSB2b2lkIDA7XG4gICAgdGhpcy5tYXhFeHBhbmQgPSB2b2lkIDA7XG4gICAgdGhpcy5nbG9iYWxHcm91cCA9IHZvaWQgMDtcbiAgICAvLyBhbGxvdyBudWxsIG9wdGlvbnNcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICB0aGlzLmRpc3BsYXlNb2RlID0gdXRpbHMuZGVmbHQob3B0aW9ucy5kaXNwbGF5TW9kZSwgZmFsc2UpO1xuICAgIHRoaXMub3V0cHV0ID0gdXRpbHMuZGVmbHQob3B0aW9ucy5vdXRwdXQsIFwiaHRtbEFuZE1hdGhtbFwiKTtcbiAgICB0aGlzLmxlcW5vID0gdXRpbHMuZGVmbHQob3B0aW9ucy5sZXFubywgZmFsc2UpO1xuICAgIHRoaXMuZmxlcW4gPSB1dGlscy5kZWZsdChvcHRpb25zLmZsZXFuLCBmYWxzZSk7XG4gICAgdGhpcy50aHJvd09uRXJyb3IgPSB1dGlscy5kZWZsdChvcHRpb25zLnRocm93T25FcnJvciwgdHJ1ZSk7XG4gICAgdGhpcy5lcnJvckNvbG9yID0gdXRpbHMuZGVmbHQob3B0aW9ucy5lcnJvckNvbG9yLCBcIiNjYzAwMDBcIik7XG4gICAgdGhpcy5tYWNyb3MgPSBvcHRpb25zLm1hY3JvcyB8fCB7fTtcbiAgICB0aGlzLm1pblJ1bGVUaGlja25lc3MgPSBNYXRoLm1heCgwLCB1dGlscy5kZWZsdChvcHRpb25zLm1pblJ1bGVUaGlja25lc3MsIDApKTtcbiAgICB0aGlzLmNvbG9ySXNUZXh0Q29sb3IgPSB1dGlscy5kZWZsdChvcHRpb25zLmNvbG9ySXNUZXh0Q29sb3IsIGZhbHNlKTtcbiAgICB0aGlzLnN0cmljdCA9IHV0aWxzLmRlZmx0KG9wdGlvbnMuc3RyaWN0LCBcIndhcm5cIik7XG4gICAgdGhpcy50cnVzdCA9IHV0aWxzLmRlZmx0KG9wdGlvbnMudHJ1c3QsIGZhbHNlKTtcbiAgICB0aGlzLm1heFNpemUgPSBNYXRoLm1heCgwLCB1dGlscy5kZWZsdChvcHRpb25zLm1heFNpemUsIEluZmluaXR5KSk7XG4gICAgdGhpcy5tYXhFeHBhbmQgPSBNYXRoLm1heCgwLCB1dGlscy5kZWZsdChvcHRpb25zLm1heEV4cGFuZCwgMTAwMCkpO1xuICAgIHRoaXMuZ2xvYmFsR3JvdXAgPSB1dGlscy5kZWZsdChvcHRpb25zLmdsb2JhbEdyb3VwLCBmYWxzZSk7XG4gIH1cbiAgLyoqXG4gICAqIFJlcG9ydCBub25zdHJpY3QgKG5vbi1MYVRlWC1jb21wYXRpYmxlKSBpbnB1dC5cbiAgICogQ2FuIHNhZmVseSBub3QgYmUgY2FsbGVkIGlmIGB0aGlzLnN0cmljdGAgaXMgZmFsc2UgaW4gSmF2YVNjcmlwdC5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gU2V0dGluZ3MucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZXBvcnROb25zdHJpY3QgPSBmdW5jdGlvbiByZXBvcnROb25zdHJpY3QoZXJyb3JDb2RlLCBlcnJvck1zZywgdG9rZW4pIHtcbiAgICB2YXIgc3RyaWN0ID0gdGhpcy5zdHJpY3Q7XG5cbiAgICBpZiAodHlwZW9mIHN0cmljdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAvLyBBbGxvdyByZXR1cm4gdmFsdWUgb2Ygc3RyaWN0IGZ1bmN0aW9uIHRvIGJlIGJvb2xlYW4gb3Igc3RyaW5nXG4gICAgICAvLyAob3IgbnVsbC91bmRlZmluZWQsIG1lYW5pbmcgbm8gZnVydGhlciBwcm9jZXNzaW5nKS5cbiAgICAgIHN0cmljdCA9IHN0cmljdChlcnJvckNvZGUsIGVycm9yTXNnLCB0b2tlbik7XG4gICAgfVxuXG4gICAgaWYgKCFzdHJpY3QgfHwgc3RyaWN0ID09PSBcImlnbm9yZVwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChzdHJpY3QgPT09IHRydWUgfHwgc3RyaWN0ID09PSBcImVycm9yXCIpIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkxhVGVYLWluY29tcGF0aWJsZSBpbnB1dCBhbmQgc3RyaWN0IG1vZGUgaXMgc2V0IHRvICdlcnJvcic6IFwiICsgKGVycm9yTXNnICsgXCIgW1wiICsgZXJyb3JDb2RlICsgXCJdXCIpLCB0b2tlbik7XG4gICAgfSBlbHNlIGlmIChzdHJpY3QgPT09IFwid2FyblwiKSB7XG4gICAgICB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4oXCJMYVRlWC1pbmNvbXBhdGlibGUgaW5wdXQgYW5kIHN0cmljdCBtb2RlIGlzIHNldCB0byAnd2Fybic6IFwiICsgKGVycm9yTXNnICsgXCIgW1wiICsgZXJyb3JDb2RlICsgXCJdXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gd29uJ3QgaGFwcGVuIGluIHR5cGUtc2FmZSBjb2RlXG4gICAgICB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4oXCJMYVRlWC1pbmNvbXBhdGlibGUgaW5wdXQgYW5kIHN0cmljdCBtb2RlIGlzIHNldCB0byBcIiArIChcInVucmVjb2duaXplZCAnXCIgKyBzdHJpY3QgKyBcIic6IFwiICsgZXJyb3JNc2cgKyBcIiBbXCIgKyBlcnJvckNvZGUgKyBcIl1cIikpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2hlY2sgd2hldGhlciB0byBhcHBseSBzdHJpY3QgKExhVGVYLWFkaGVyaW5nKSBiZWhhdmlvciBmb3IgdW51c3VhbFxuICAgKiBpbnB1dCAobGlrZSBgXFxcXGApLiAgVW5saWtlIGBub25zdHJpY3RgLCB3aWxsIG5vdCB0aHJvdyBhbiBlcnJvcjtcbiAgICogaW5zdGVhZCwgXCJlcnJvclwiIHRyYW5zbGF0ZXMgdG8gYSByZXR1cm4gdmFsdWUgb2YgYHRydWVgLCB3aGlsZSBcImlnbm9yZVwiXG4gICAqIHRyYW5zbGF0ZXMgdG8gYSByZXR1cm4gdmFsdWUgb2YgYGZhbHNlYC4gIE1heSBzdGlsbCBwcmludCBhIHdhcm5pbmc6XG4gICAqIFwid2FyblwiIHByaW50cyBhIHdhcm5pbmcgYW5kIHJldHVybnMgYGZhbHNlYC5cbiAgICogVGhpcyBpcyBmb3IgdGhlIHNlY29uZCBjYXRlZ29yeSBvZiBgZXJyb3JDb2RlYHMgbGlzdGVkIGluIHRoZSBSRUFETUUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVzZVN0cmljdEJlaGF2aW9yID0gZnVuY3Rpb24gdXNlU3RyaWN0QmVoYXZpb3IoZXJyb3JDb2RlLCBlcnJvck1zZywgdG9rZW4pIHtcbiAgICB2YXIgc3RyaWN0ID0gdGhpcy5zdHJpY3Q7XG5cbiAgICBpZiAodHlwZW9mIHN0cmljdCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAvLyBBbGxvdyByZXR1cm4gdmFsdWUgb2Ygc3RyaWN0IGZ1bmN0aW9uIHRvIGJlIGJvb2xlYW4gb3Igc3RyaW5nXG4gICAgICAvLyAob3IgbnVsbC91bmRlZmluZWQsIG1lYW5pbmcgbm8gZnVydGhlciBwcm9jZXNzaW5nKS5cbiAgICAgIC8vIEJ1dCBjYXRjaCBhbnkgZXhjZXB0aW9ucyB0aHJvd24gYnkgZnVuY3Rpb24sIHRyZWF0aW5nIHRoZW1cbiAgICAgIC8vIGxpa2UgXCJlcnJvclwiLlxuICAgICAgdHJ5IHtcbiAgICAgICAgc3RyaWN0ID0gc3RyaWN0KGVycm9yQ29kZSwgZXJyb3JNc2csIHRva2VuKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHN0cmljdCA9IFwiZXJyb3JcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXN0cmljdCB8fCBzdHJpY3QgPT09IFwiaWdub3JlXCIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHN0cmljdCA9PT0gdHJ1ZSB8fCBzdHJpY3QgPT09IFwiZXJyb3JcIikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChzdHJpY3QgPT09IFwid2FyblwiKSB7XG4gICAgICB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4oXCJMYVRlWC1pbmNvbXBhdGlibGUgaW5wdXQgYW5kIHN0cmljdCBtb2RlIGlzIHNldCB0byAnd2Fybic6IFwiICsgKGVycm9yTXNnICsgXCIgW1wiICsgZXJyb3JDb2RlICsgXCJdXCIpKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gd29uJ3QgaGFwcGVuIGluIHR5cGUtc2FmZSBjb2RlXG4gICAgICB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4oXCJMYVRlWC1pbmNvbXBhdGlibGUgaW5wdXQgYW5kIHN0cmljdCBtb2RlIGlzIHNldCB0byBcIiArIChcInVucmVjb2duaXplZCAnXCIgKyBzdHJpY3QgKyBcIic6IFwiICsgZXJyb3JNc2cgKyBcIiBbXCIgKyBlcnJvckNvZGUgKyBcIl1cIikpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2hlY2sgd2hldGhlciB0byB0ZXN0IHBvdGVudGlhbGx5IGRhbmdlcm91cyBpbnB1dCwgYW5kIHJldHVyblxuICAgKiBgdHJ1ZWAgKHRydXN0ZWQpIG9yIGBmYWxzZWAgKHVudHJ1c3RlZCkuICBUaGUgc29sZSBhcmd1bWVudCBgY29udGV4dGBcbiAgICogc2hvdWxkIGJlIGFuIG9iamVjdCB3aXRoIGBjb21tYW5kYCBmaWVsZCBzcGVjaWZ5aW5nIHRoZSByZWxldmFudCBMYVRlWFxuICAgKiBjb21tYW5kIChhcyBhIHN0cmluZyBzdGFydGluZyB3aXRoIGBcXGApLCBhbmQgYW55IG90aGVyIGFyZ3VtZW50cywgZXRjLlxuICAgKiBJZiBgY29udGV4dGAgaGFzIGEgYHVybGAgZmllbGQsIGEgYHByb3RvY29sYCBmaWVsZCB3aWxsIGF1dG9tYXRpY2FsbHlcbiAgICogZ2V0IGFkZGVkIGJ5IHRoaXMgZnVuY3Rpb24gKGNoYW5naW5nIHRoZSBzcGVjaWZpZWQgb2JqZWN0KS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaXNUcnVzdGVkID0gZnVuY3Rpb24gaXNUcnVzdGVkKGNvbnRleHQpIHtcbiAgICBpZiAoY29udGV4dC51cmwgJiYgIWNvbnRleHQucHJvdG9jb2wpIHtcbiAgICAgIGNvbnRleHQucHJvdG9jb2wgPSB1dGlscy5wcm90b2NvbEZyb21VcmwoY29udGV4dC51cmwpO1xuICAgIH1cblxuICAgIHZhciB0cnVzdCA9IHR5cGVvZiB0aGlzLnRydXN0ID09PSBcImZ1bmN0aW9uXCIgPyB0aGlzLnRydXN0KGNvbnRleHQpIDogdGhpcy50cnVzdDtcbiAgICByZXR1cm4gQm9vbGVhbih0cnVzdCk7XG4gIH07XG5cbiAgcmV0dXJuIFNldHRpbmdzO1xufSgpO1xuXG5cbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9TdHlsZS5qc1xuLyoqXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgaW5mb3JtYXRpb24gYW5kIGNsYXNzZXMgZm9yIHRoZSB2YXJpb3VzIGtpbmRzIG9mIHN0eWxlc1xuICogdXNlZCBpbiBUZVguIEl0IHByb3ZpZGVzIGEgZ2VuZXJpYyBgU3R5bGVgIGNsYXNzLCB3aGljaCBob2xkcyBpbmZvcm1hdGlvblxuICogYWJvdXQgYSBzcGVjaWZpYyBzdHlsZS4gSXQgdGhlbiBwcm92aWRlcyBpbnN0YW5jZXMgb2YgYWxsIHRoZSBkaWZmZXJlbnQga2luZHNcbiAqIG9mIHN0eWxlcyBwb3NzaWJsZSwgYW5kIHByb3ZpZGVzIGZ1bmN0aW9ucyB0byBtb3ZlIGJldHdlZW4gdGhlbSBhbmQgZ2V0XG4gKiBpbmZvcm1hdGlvbiBhYm91dCB0aGVtLlxuICovXG5cbi8qKlxuICogVGhlIG1haW4gc3R5bGUgY2xhc3MuIENvbnRhaW5zIGEgdW5pcXVlIGlkIGZvciB0aGUgc3R5bGUsIGEgc2l6ZSAod2hpY2ggaXNcbiAqIHRoZSBzYW1lIGZvciBjcmFtcGVkIGFuZCB1bmNyYW1wZWQgdmVyc2lvbiBvZiBhIHN0eWxlKSwgYW5kIGEgY3JhbXBlZCBmbGFnLlxuICovXG52YXIgU3R5bGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZShpZCwgc2l6ZSwgY3JhbXBlZCkge1xuICAgIHRoaXMuaWQgPSB2b2lkIDA7XG4gICAgdGhpcy5zaXplID0gdm9pZCAwO1xuICAgIHRoaXMuY3JhbXBlZCA9IHZvaWQgMDtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgICB0aGlzLmNyYW1wZWQgPSBjcmFtcGVkO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHN0eWxlIG9mIGEgc3VwZXJzY3JpcHQgZ2l2ZW4gYSBiYXNlIGluIHRoZSBjdXJyZW50IHN0eWxlLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBTdHlsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnN1cCA9IGZ1bmN0aW9uIHN1cCgpIHtcbiAgICByZXR1cm4gc3R5bGVzW19zdXBbdGhpcy5pZF1dO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIHN0eWxlIG9mIGEgc3Vic2NyaXB0IGdpdmVuIGEgYmFzZSBpbiB0aGUgY3VycmVudCBzdHlsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc3ViID0gZnVuY3Rpb24gc3ViKCkge1xuICAgIHJldHVybiBzdHlsZXNbX3N1Ylt0aGlzLmlkXV07XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgc3R5bGUgb2YgYSBmcmFjdGlvbiBudW1lcmF0b3IgZ2l2ZW4gdGhlIGZyYWN0aW9uIGluIHRoZSBjdXJyZW50XG4gICAqIHN0eWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5mcmFjTnVtID0gZnVuY3Rpb24gZnJhY051bSgpIHtcbiAgICByZXR1cm4gc3R5bGVzW19mcmFjTnVtW3RoaXMuaWRdXTtcbiAgfVxuICAvKipcbiAgICogR2V0IHRoZSBzdHlsZSBvZiBhIGZyYWN0aW9uIGRlbm9taW5hdG9yIGdpdmVuIHRoZSBmcmFjdGlvbiBpbiB0aGUgY3VycmVudFxuICAgKiBzdHlsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZnJhY0RlbiA9IGZ1bmN0aW9uIGZyYWNEZW4oKSB7XG4gICAgcmV0dXJuIHN0eWxlc1tfZnJhY0Rlblt0aGlzLmlkXV07XG4gIH1cbiAgLyoqXG4gICAqIEdldCB0aGUgY3JhbXBlZCB2ZXJzaW9uIG9mIGEgc3R5bGUgKGluIHBhcnRpY3VsYXIsIGNyYW1waW5nIGEgY3JhbXBlZCBzdHlsZVxuICAgKiBkb2Vzbid0IGNoYW5nZSB0aGUgc3R5bGUpLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jcmFtcCA9IGZ1bmN0aW9uIGNyYW1wKCkge1xuICAgIHJldHVybiBzdHlsZXNbX2NyYW1wW3RoaXMuaWRdXTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgdGV4dCBvciBkaXNwbGF5IHZlcnNpb24gb2YgdGhpcyBzdHlsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udGV4dCA9IGZ1bmN0aW9uIHRleHQoKSB7XG4gICAgcmV0dXJuIHN0eWxlc1tfdGV4dFt0aGlzLmlkXV07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0cnVlIGlmIHRoaXMgc3R5bGUgaXMgdGlnaHRseSBzcGFjZWQgKHNjcmlwdHN0eWxlL3NjcmlwdHNjcmlwdHN0eWxlKVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pc1RpZ2h0ID0gZnVuY3Rpb24gaXNUaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5zaXplID49IDI7XG4gIH07XG5cbiAgcmV0dXJuIFN0eWxlO1xufSgpOyAvLyBFeHBvcnQgYW4gaW50ZXJmYWNlIGZvciB0eXBlIGNoZWNraW5nLCBidXQgZG9uJ3QgZXhwb3NlIHRoZSBpbXBsZW1lbnRhdGlvbi5cbi8vIFRoaXMgd2F5LCBubyBtb3JlIHN0eWxlcyBjYW4gYmUgZ2VuZXJhdGVkLlxuXG5cbi8vIElEcyBvZiB0aGUgZGlmZmVyZW50IHN0eWxlc1xudmFyIEQgPSAwO1xudmFyIERjID0gMTtcbnZhciBUID0gMjtcbnZhciBUYyA9IDM7XG52YXIgUyA9IDQ7XG52YXIgU2MgPSA1O1xudmFyIFNTID0gNjtcbnZhciBTU2MgPSA3OyAvLyBJbnN0YW5jZXMgb2YgdGhlIGRpZmZlcmVudCBzdHlsZXNcblxudmFyIHN0eWxlcyA9IFtuZXcgU3R5bGUoRCwgMCwgZmFsc2UpLCBuZXcgU3R5bGUoRGMsIDAsIHRydWUpLCBuZXcgU3R5bGUoVCwgMSwgZmFsc2UpLCBuZXcgU3R5bGUoVGMsIDEsIHRydWUpLCBuZXcgU3R5bGUoUywgMiwgZmFsc2UpLCBuZXcgU3R5bGUoU2MsIDIsIHRydWUpLCBuZXcgU3R5bGUoU1MsIDMsIGZhbHNlKSwgbmV3IFN0eWxlKFNTYywgMywgdHJ1ZSldOyAvLyBMb29rdXAgdGFibGVzIGZvciBzd2l0Y2hpbmcgZnJvbSBvbmUgc3R5bGUgdG8gYW5vdGhlclxuXG52YXIgX3N1cCA9IFtTLCBTYywgUywgU2MsIFNTLCBTU2MsIFNTLCBTU2NdO1xudmFyIF9zdWIgPSBbU2MsIFNjLCBTYywgU2MsIFNTYywgU1NjLCBTU2MsIFNTY107XG52YXIgX2ZyYWNOdW0gPSBbVCwgVGMsIFMsIFNjLCBTUywgU1NjLCBTUywgU1NjXTtcbnZhciBfZnJhY0RlbiA9IFtUYywgVGMsIFNjLCBTYywgU1NjLCBTU2MsIFNTYywgU1NjXTtcbnZhciBfY3JhbXAgPSBbRGMsIERjLCBUYywgVGMsIFNjLCBTYywgU1NjLCBTU2NdO1xudmFyIF90ZXh0ID0gW0QsIERjLCBULCBUYywgVCwgVGMsIFQsIFRjXTsgLy8gV2Ugb25seSBleHBvcnQgc29tZSBvZiB0aGUgc3R5bGVzLlxuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBzcmNfU3R5bGUgPSAoe1xuICBESVNQTEFZOiBzdHlsZXNbRF0sXG4gIFRFWFQ6IHN0eWxlc1tUXSxcbiAgU0NSSVBUOiBzdHlsZXNbU10sXG4gIFNDUklQVFNDUklQVDogc3R5bGVzW1NTXVxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvdW5pY29kZVNjcmlwdHMuanNcbi8qXG4gKiBUaGlzIGZpbGUgZGVmaW5lcyB0aGUgVW5pY29kZSBzY3JpcHRzIGFuZCBzY3JpcHQgZmFtaWxpZXMgdGhhdCB3ZVxuICogc3VwcG9ydC4gVG8gYWRkIG5ldyBzY3JpcHRzIG9yIGZhbWlsaWVzLCBqdXN0IGFkZCBhIG5ldyBlbnRyeSB0byB0aGVcbiAqIHNjcmlwdERhdGEgYXJyYXkgYmVsb3cuIEFkZGluZyBzY3JpcHRzIHRvIHRoZSBzY3JpcHREYXRhIGFycmF5IGFsbG93c1xuICogY2hhcmFjdGVycyBmcm9tIHRoYXQgc2NyaXB0IHRvIGFwcGVhciBpbiBcXHRleHR7fSBlbnZpcm9ubWVudHMuXG4gKi9cblxuLyoqXG4gKiBFYWNoIHNjcmlwdCBvciBzY3JpcHQgZmFtaWx5IGhhcyBhIG5hbWUgYW5kIGFuIGFycmF5IG9mIGJsb2Nrcy5cbiAqIEVhY2ggYmxvY2sgaXMgYW4gYXJyYXkgb2YgdHdvIG51bWJlcnMgd2hpY2ggc3BlY2lmeSB0aGUgc3RhcnQgYW5kXG4gKiBlbmQgcG9pbnRzIChpbmNsdXNpdmUpIG9mIGEgYmxvY2sgb2YgVW5pY29kZSBjb2RlcG9pbnRzLlxuICovXG5cbi8qKlxuICogVW5pY29kZSBibG9jayBkYXRhIGZvciB0aGUgZmFtaWxpZXMgb2Ygc2NyaXB0cyB3ZSBzdXBwb3J0IGluIFxcdGV4dHt9LlxuICogU2NyaXB0cyBvbmx5IG5lZWQgdG8gYXBwZWFyIGhlcmUgaWYgdGhleSBkbyBub3QgaGF2ZSBmb250IG1ldHJpY3MuXG4gKi9cbnZhciBzY3JpcHREYXRhID0gW3tcbiAgLy8gTGF0aW4gY2hhcmFjdGVycyBiZXlvbmQgdGhlIExhdGluLTEgY2hhcmFjdGVycyB3ZSBoYXZlIG1ldHJpY3MgZm9yLlxuICAvLyBOZWVkZWQgZm9yIEN6ZWNoLCBIdW5nYXJpYW4gYW5kIFR1cmtpc2ggdGV4dCwgZm9yIGV4YW1wbGUuXG4gIG5hbWU6ICdsYXRpbicsXG4gIGJsb2NrczogW1sweDAxMDAsIDB4MDI0Zl0sIC8vIExhdGluIEV4dGVuZGVkLUEgYW5kIExhdGluIEV4dGVuZGVkLUJcbiAgWzB4MDMwMCwgMHgwMzZmXSAvLyBDb21iaW5pbmcgRGlhY3JpdGljYWwgbWFya3NcbiAgXVxufSwge1xuICAvLyBUaGUgQ3lyaWxsaWMgc2NyaXB0IHVzZWQgYnkgUnVzc2lhbiBhbmQgcmVsYXRlZCBsYW5ndWFnZXMuXG4gIC8vIEEgQ3lyaWxsaWMgc3Vic2V0IHVzZWQgdG8gYmUgc3VwcG9ydGVkIGFzIGV4cGxpY2l0bHkgZGVmaW5lZFxuICAvLyBzeW1ib2xzIGluIHN5bWJvbHMuanNcbiAgbmFtZTogJ2N5cmlsbGljJyxcbiAgYmxvY2tzOiBbWzB4MDQwMCwgMHgwNGZmXV1cbn0sIHtcbiAgLy8gQXJtZW5pYW5cbiAgbmFtZTogJ2FybWVuaWFuJyxcbiAgYmxvY2tzOiBbWzB4MDUzMCwgMHgwNThGXV1cbn0sIHtcbiAgLy8gVGhlIEJyYWhtaWMgc2NyaXB0cyBvZiBTb3V0aCBhbmQgU291dGhlYXN0IEFzaWFcbiAgLy8gRGV2YW5hZ2FyaSAoMDkwMOKAkzA5N0YpXG4gIC8vIEJlbmdhbGkgKDA5ODDigJMwOUZGKVxuICAvLyBHdXJtdWtoaSAoMEEwMOKAkzBBN0YpXG4gIC8vIEd1amFyYXRpICgwQTgw4oCTMEFGRilcbiAgLy8gT3JpeWEgKDBCMDDigJMwQjdGKVxuICAvLyBUYW1pbCAoMEI4MOKAkzBCRkYpXG4gIC8vIFRlbHVndSAoMEMwMOKAkzBDN0YpXG4gIC8vIEthbm5hZGEgKDBDODDigJMwQ0ZGKVxuICAvLyBNYWxheWFsYW0gKDBEMDDigJMwRDdGKVxuICAvLyBTaW5oYWxhICgwRDgw4oCTMERGRilcbiAgLy8gVGhhaSAoMEUwMOKAkzBFN0YpXG4gIC8vIExhbyAoMEU4MOKAkzBFRkYpXG4gIC8vIFRpYmV0YW4gKDBGMDDigJMwRkZGKVxuICAvLyBNeWFubWFyICgxMDAw4oCTMTA5RilcbiAgbmFtZTogJ2JyYWhtaWMnLFxuICBibG9ja3M6IFtbMHgwOTAwLCAweDEwOUZdXVxufSwge1xuICBuYW1lOiAnZ2VvcmdpYW4nLFxuICBibG9ja3M6IFtbMHgxMEEwLCAweDEwZmZdXVxufSwge1xuICAvLyBDaGluZXNlIGFuZCBKYXBhbmVzZS5cbiAgLy8gVGhlIFwia1wiIGluIGNqayBpcyBmb3IgS29yZWFuLCBidXQgd2UndmUgc2VwYXJhdGVkIEtvcmVhbiBvdXRcbiAgbmFtZTogXCJjamtcIixcbiAgYmxvY2tzOiBbWzB4MzAwMCwgMHgzMEZGXSwgLy8gQ0pLIHN5bWJvbHMgYW5kIHB1bmN0dWF0aW9uLCBIaXJhZ2FuYSwgS2F0YWthbmFcbiAgWzB4NEUwMCwgMHg5RkFGXSwgLy8gQ0pLIGlkZW9ncmFtc1xuICBbMHhGRjAwLCAweEZGNjBdIC8vIEZ1bGx3aWR0aCBwdW5jdHVhdGlvblxuICAvLyBUT0RPOiBhZGQgaGFsZndpZHRoIEthdGFrYW5hIGFuZCBSb21hbmppIGdseXBoc1xuICBdXG59LCB7XG4gIC8vIEtvcmVhblxuICBuYW1lOiAnaGFuZ3VsJyxcbiAgYmxvY2tzOiBbWzB4QUMwMCwgMHhEN0FGXV1cbn1dO1xuLyoqXG4gKiBHaXZlbiBhIGNvZGVwb2ludCwgcmV0dXJuIHRoZSBuYW1lIG9mIHRoZSBzY3JpcHQgb3Igc2NyaXB0IGZhbWlseVxuICogaXQgaXMgZnJvbSwgb3IgbnVsbCBpZiBpdCBpcyBub3QgcGFydCBvZiBhIGtub3duIGJsb2NrXG4gKi9cblxuZnVuY3Rpb24gc2NyaXB0RnJvbUNvZGVwb2ludChjb2RlcG9pbnQpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY3JpcHREYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNjcmlwdCA9IHNjcmlwdERhdGFbaV07XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgc2NyaXB0LmJsb2Nrcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBibG9jayA9IHNjcmlwdC5ibG9ja3NbX2ldO1xuXG4gICAgICBpZiAoY29kZXBvaW50ID49IGJsb2NrWzBdICYmIGNvZGVwb2ludCA8PSBibG9ja1sxXSkge1xuICAgICAgICByZXR1cm4gc2NyaXB0Lm5hbWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIEEgZmxhdHRlbmVkIHZlcnNpb24gb2YgYWxsIHRoZSBzdXBwb3J0ZWQgYmxvY2tzIGluIGEgc2luZ2xlIGFycmF5LlxuICogVGhpcyBpcyBhbiBvcHRpbWl6YXRpb24gdG8gbWFrZSBzdXBwb3J0ZWRDb2RlcG9pbnQoKSBmYXN0LlxuICovXG5cbnZhciBhbGxCbG9ja3MgPSBbXTtcbnNjcmlwdERhdGEuZm9yRWFjaChmdW5jdGlvbiAocykge1xuICByZXR1cm4gcy5ibG9ja3MuZm9yRWFjaChmdW5jdGlvbiAoYikge1xuICAgIHJldHVybiBhbGxCbG9ja3MucHVzaC5hcHBseShhbGxCbG9ja3MsIGIpO1xuICB9KTtcbn0pO1xuLyoqXG4gKiBHaXZlbiBhIGNvZGVwb2ludCwgcmV0dXJuIHRydWUgaWYgaXQgZmFsbHMgd2l0aGluIG9uZSBvZiB0aGVcbiAqIHNjcmlwdHMgb3Igc2NyaXB0IGZhbWlsaWVzIGRlZmluZWQgYWJvdmUgYW5kIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBNaWNybyBiZW5jaG1hcmtzIHNob3dzIHRoYXQgdGhpcyBpcyBmYXN0ZXIgdGhhblxuICogL1tcXHUzMDAwLVxcdTMwRkZcXHU0RTAwLVxcdTlGQUZcXHVGRjAwLVxcdUZGNjBcXHVBQzAwLVxcdUQ3QUZcXHUwOTAwLVxcdTEwOUZdLy50ZXN0KClcbiAqIGluIEZpcmVmb3gsIENocm9tZSBhbmQgTm9kZS5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0ZWRDb2RlcG9pbnQoY29kZXBvaW50KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYWxsQmxvY2tzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgaWYgKGNvZGVwb2ludCA+PSBhbGxCbG9ja3NbaV0gJiYgY29kZXBvaW50IDw9IGFsbEJsb2Nrc1tpICsgMV0pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9zdmdHZW9tZXRyeS5qc1xuLyoqXG4gKiBUaGlzIGZpbGUgcHJvdmlkZXMgc3VwcG9ydCB0byBkb21UcmVlLmpzIGFuZCBkZWxpbWl0ZXIuanMuXG4gKiBJdCdzIGEgc3RvcmVob3VzZSBvZiBwYXRoIGdlb21ldHJ5IGZvciBTVkcgaW1hZ2VzLlxuICovXG4vLyBJbiBhbGwgcGF0aHMgYmVsb3csIHRoZSB2aWV3Qm94LXRvLWVtIHNjYWxlIGlzIDEwMDA6MS5cbnZhciBoTGluZVBhZCA9IDgwOyAvLyBwYWRkaW5nIGFib3ZlIGEgc3FydCB2aW5pY3VsdW0uIFByZXZlbnRzIGltYWdlIGNyb3BwaW5nLlxuLy8gVGhlIHZpbmljdWx1bSBvZiBhIFxcc3FydCBjYW4gYmUgbWFkZSB0aGlja2VyIGJ5IGEgS2FUZVggcmVuZGVyaW5nIG9wdGlvbi5cbi8vIFRoaW5rIG9mIHZhcmlhYmxlIGV4dHJhVmluaWN1bHVtIGFzIHR3byBkZXRvdXJzIGluIHRoZSBTVkcgcGF0aC5cbi8vIFRoZSBkZXRvdXIgYmVnaW5zIGF0IHRoZSBsb3dlciBsZWZ0IG9mIHRoZSBhcmVhIGxhYmVsZWQgZXh0cmFWaW5pY3VsdW0gYmVsb3cuXG4vLyBUaGUgZGV0b3VyIHByb2NlZWRzIG9uZSBleHRyYVZpbmljdWx1bSBkaXN0YW5jZSB1cCBhbmQgc2xpZ2h0bHkgdG8gdGhlIHJpZ2h0LFxuLy8gZGlzcGxhY2luZyB0aGUgcmFkaXVzZWQgY29ybmVyIGJldHdlZW4gc3VyZCBhbmQgdmluaWN1bHVtLiBUaGUgcmFkaXVzIGlzXG4vLyB0cmF2ZXJzZWQgYXMgdXN1YWwsIHRoZW4gdGhlIGRldG91ciByZXN1bWVzLiBJdCBnb2VzIHJpZ2h0LCB0byB0aGUgZW5kIG9mXG4vLyB0aGUgdmVyeSBsb25nIHZpbmljdWx1bW4sIHRoZW4gZG93biBvbmUgZXh0cmFWaW5pY3VsdW0gZGlzdGFuY2UsXG4vLyBhZnRlciB3aGljaCBpdCByZXN1bWVzIHJlZ3VsYXIgcGF0aCBnZW9tZXRyeSBmb3IgdGhlIHJhZGljYWwuXG5cbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aW5pY3VsdW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9cbiAgICAgICAgIC/ilpLilpLilpLilpLilpLilpLilpLilpLilpLilpLilpLilpLilpLilpLilpLilpLilpLilpLilpLilpLilpLihpBleHRyYVZpbmljdWx1bVxuICAgICAgICAvIOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKWiOKGkDAuMDRlbSAoNDAgdW5pdCkgc3RkIHZpbmljdWx1bSB0aGlja25lc3NcbiAgICAgICAvIC9cbiAgICAgIC8gL1xuICAgICAvIC9cXFxuICAgIC8gLyBzdXJkXG4qL1xuXG52YXIgc3FydE1haW4gPSBmdW5jdGlvbiBzcXJ0TWFpbihleHRyYVZpbmljdWx1bSwgaExpbmVQYWQpIHtcbiAgLy8gc3FydE1haW4gcGF0aCBnZW9tZXRyeSBpcyBmcm9tIGdseXBoIFUyMjFBIGluIHRoZSBmb250IEthVGVYIE1haW5cbiAgcmV0dXJuIFwiTTk1LFwiICsgKDYyMiArIGV4dHJhVmluaWN1bHVtICsgaExpbmVQYWQpICsgXCJcXG5jLTIuNywwLC03LjE3LC0yLjcsLTEzLjUsLThjLTUuOCwtNS4zLC05LjUsLTEwLC05LjUsLTE0XFxuYzAsLTIsMC4zLC0zLjMsMSwtNGMxLjMsLTIuNywyMy44MywtMjAuNyw2Ny41LC01NFxcbmM0NC4yLC0zMy4zLDY1LjgsLTUwLjMsNjYuNSwtNTFjMS4zLC0xLjMsMywtMiw1LC0yYzQuNywwLDguNywzLjMsMTIsMTBcXG5zMTczLDM3OCwxNzMsMzc4YzAuNywwLDM1LjMsLTcxLDEwNCwtMjEzYzY4LjcsLTE0MiwxMzcuNSwtMjg1LDIwNi41LC00MjlcXG5jNjksLTE0NCwxMDQuNSwtMjE3LjcsMTA2LjUsLTIyMVxcbmxcIiArIGV4dHJhVmluaWN1bHVtIC8gMi4wNzUgKyBcIiAtXCIgKyBleHRyYVZpbmljdWx1bSArIFwiXFxuYzUuMywtOS4zLDEyLC0xNCwyMCwtMTRcXG5INDAwMDAwdlwiICsgKDQwICsgZXh0cmFWaW5pY3VsdW0pICsgXCJIODQ1LjI3MjRcXG5zLTIyNS4yNzIsNDY3LC0yMjUuMjcyLDQ2N3MtMjM1LDQ4NiwtMjM1LDQ4NmMtMi43LDQuNywtOSw3LC0xOSw3XFxuYy02LDAsLTEwLC0xLC0xMiwtM3MtMTk0LC00MjIsLTE5NCwtNDIycy02NSw0NywtNjUsNDd6XFxuTVwiICsgKDgzNCArIGV4dHJhVmluaWN1bHVtKSArIFwiIFwiICsgaExpbmVQYWQgKyBcImg0MDAwMDB2XCIgKyAoNDAgKyBleHRyYVZpbmljdWx1bSkgKyBcImgtNDAwMDAwelwiO1xufTtcblxudmFyIHNxcnRTaXplMSA9IGZ1bmN0aW9uIHNxcnRTaXplMShleHRyYVZpbmljdWx1bSwgaExpbmVQYWQpIHtcbiAgLy8gc2l6ZTEgaXMgZnJvbSBnbHlwaCBVMjIxQSBpbiB0aGUgZm9udCBLYVRlWF9TaXplMS1SZWd1bGFyXG4gIHJldHVybiBcIk0yNjMsXCIgKyAoNjAxICsgZXh0cmFWaW5pY3VsdW0gKyBoTGluZVBhZCkgKyBcImMwLjcsMCwxOCwzOS43LDUyLDExOVxcbmMzNCw3OS4zLDY4LjE2NywxNTguNywxMDIuNSwyMzhjMzQuMyw3OS4zLDUxLjgsMTE5LjMsNTIuNSwxMjBcXG5jMzQwLC03MDQuNyw1MTAuNywtMTA2MC4zLDUxMiwtMTA2N1xcbmxcIiArIGV4dHJhVmluaWN1bHVtIC8gMi4wODQgKyBcIiAtXCIgKyBleHRyYVZpbmljdWx1bSArIFwiXFxuYzQuNywtNy4zLDExLC0xMSwxOSwtMTFcXG5INDAwMDB2XCIgKyAoNDAgKyBleHRyYVZpbmljdWx1bSkgKyBcIkgxMDEyLjNcXG5zLTI3MS4zLDU2NywtMjcxLjMsNTY3Yy0zOC43LDgwLjcsLTg0LDE3NSwtMTM2LDI4M2MtNTIsMTA4LC04OS4xNjcsMTg1LjMsLTExMS41LDIzMlxcbmMtMjIuMyw0Ni43LC0zMy44LDcwLjMsLTM0LjUsNzFjLTQuNyw0LjcsLTEyLjMsNywtMjMsN3MtMTIsLTEsLTEyLC0xXFxucy0xMDksLTI1MywtMTA5LC0yNTNjLTcyLjcsLTE2OCwtMTA5LjMsLTI1MiwtMTEwLC0yNTJjLTEwLjcsOCwtMjIsMTYuNywtMzQsMjZcXG5jLTIyLDE3LjMsLTMzLjMsMjYsLTM0LDI2cy0yNiwtMjYsLTI2LC0yNnM3NiwtNTksNzYsLTU5czc2LC02MCw3NiwtNjB6XFxuTVwiICsgKDEwMDEgKyBleHRyYVZpbmljdWx1bSkgKyBcIiBcIiArIGhMaW5lUGFkICsgXCJoNDAwMDAwdlwiICsgKDQwICsgZXh0cmFWaW5pY3VsdW0pICsgXCJoLTQwMDAwMHpcIjtcbn07XG5cbnZhciBzcXJ0U2l6ZTIgPSBmdW5jdGlvbiBzcXJ0U2l6ZTIoZXh0cmFWaW5pY3VsdW0sIGhMaW5lUGFkKSB7XG4gIC8vIHNpemUyIGlzIGZyb20gZ2x5cGggVTIyMUEgaW4gdGhlIGZvbnQgS2FUZVhfU2l6ZTItUmVndWxhclxuICByZXR1cm4gXCJNOTgzIFwiICsgKDEwICsgZXh0cmFWaW5pY3VsdW0gKyBoTGluZVBhZCkgKyBcIlxcbmxcIiArIGV4dHJhVmluaWN1bHVtIC8gMy4xMyArIFwiIC1cIiArIGV4dHJhVmluaWN1bHVtICsgXCJcXG5jNCwtNi43LDEwLC0xMCwxOCwtMTAgSDQwMDAwMHZcIiArICg0MCArIGV4dHJhVmluaWN1bHVtKSArIFwiXFxuSDEwMTMuMXMtODMuNCwyNjgsLTI2NC4xLDg0MGMtMTgwLjcsNTcyLC0yNzcsODc2LjMsLTI4OSw5MTNjLTQuNyw0LjcsLTEyLjcsNywtMjQsN1xcbnMtMTIsMCwtMTIsMGMtMS4zLC0zLjMsLTMuNywtMTEuNywtNywtMjVjLTM1LjMsLTEyNS4zLC0xMDYuNywtMzczLjMsLTIxNCwtNzQ0XFxuYy0xMCwxMiwtMjEsMjUsLTMzLDM5cy0zMiwzOSwtMzIsMzljLTYsLTUuMywtMTUsLTE0LC0yNywtMjZzMjUsLTMwLDI1LC0zMFxcbmMyNi43LC0zMi43LDUyLC02Myw3NiwtOTFzNTIsLTYwLDUyLC02MHMyMDgsNzIyLDIwOCw3MjJcXG5jNTYsLTE3NS4zLDEyNi4zLC0zOTcuMywyMTEsLTY2NmM4NC43LC0yNjguNywxNTMuOCwtNDg4LjIsMjA3LjUsLTY1OC41XFxuYzUzLjcsLTE3MC4zLDg0LjUsLTI2Ni44LDkyLjUsLTI4OS41elxcbk1cIiArICgxMDAxICsgZXh0cmFWaW5pY3VsdW0pICsgXCIgXCIgKyBoTGluZVBhZCArIFwiaDQwMDAwMHZcIiArICg0MCArIGV4dHJhVmluaWN1bHVtKSArIFwiaC00MDAwMDB6XCI7XG59O1xuXG52YXIgc3FydFNpemUzID0gZnVuY3Rpb24gc3FydFNpemUzKGV4dHJhVmluaWN1bHVtLCBoTGluZVBhZCkge1xuICAvLyBzaXplMyBpcyBmcm9tIGdseXBoIFUyMjFBIGluIHRoZSBmb250IEthVGVYX1NpemUzLVJlZ3VsYXJcbiAgcmV0dXJuIFwiTTQyNCxcIiArICgyMzk4ICsgZXh0cmFWaW5pY3VsdW0gKyBoTGluZVBhZCkgKyBcIlxcbmMtMS4zLC0wLjcsLTM4LjUsLTE3MiwtMTExLjUsLTUxNGMtNzMsLTM0MiwtMTA5LjgsLTUxMy4zLC0xMTAuNSwtNTE0XFxuYzAsLTIsLTEwLjcsMTQuMywtMzIsNDljLTQuNyw3LjMsLTkuOCwxNS43LC0xNS41LDI1Yy01LjcsOS4zLC05LjgsMTYsLTEyLjUsMjBcXG5zLTUsNywtNSw3Yy00LC0zLjMsLTguMywtNy43LC0xMywtMTNzLTEzLC0xMywtMTMsLTEzczc2LC0xMjIsNzYsLTEyMnM3NywtMTIxLDc3LC0xMjFcXG5zMjA5LDk2OCwyMDksOTY4YzAsLTIsODQuNywtMzYxLjcsMjU0LC0xMDc5YzE2OS4zLC03MTcuMywyNTQuNywtMTA3Ny43LDI1NiwtMTA4MVxcbmxcIiArIGV4dHJhVmluaWN1bHVtIC8gNC4yMjMgKyBcIiAtXCIgKyBleHRyYVZpbmljdWx1bSArIFwiYzQsLTYuNywxMCwtMTAsMTgsLTEwIEg0MDAwMDBcXG52XCIgKyAoNDAgKyBleHRyYVZpbmljdWx1bSkgKyBcIkgxMDE0LjZcXG5zLTg3LjMsMzc4LjcsLTI3Mi42LDExNjZjLTE4NS4zLDc4Ny4zLC0yNzkuMywxMTgyLjMsLTI4MiwxMTg1XFxuYy0yLDYsLTEwLDksLTI0LDlcXG5jLTgsMCwtMTIsLTAuNywtMTIsLTJ6IE1cIiArICgxMDAxICsgZXh0cmFWaW5pY3VsdW0pICsgXCIgXCIgKyBoTGluZVBhZCArIFwiXFxuaDQwMDAwMHZcIiArICg0MCArIGV4dHJhVmluaWN1bHVtKSArIFwiaC00MDAwMDB6XCI7XG59O1xuXG52YXIgc3FydFNpemU0ID0gZnVuY3Rpb24gc3FydFNpemU0KGV4dHJhVmluaWN1bHVtLCBoTGluZVBhZCkge1xuICAvLyBzaXplNCBpcyBmcm9tIGdseXBoIFUyMjFBIGluIHRoZSBmb250IEthVGVYX1NpemU0LVJlZ3VsYXJcbiAgcmV0dXJuIFwiTTQ3MyxcIiArICgyNzEzICsgZXh0cmFWaW5pY3VsdW0gKyBoTGluZVBhZCkgKyBcIlxcbmMzMzkuMywtMTc5OS4zLDUwOS4zLC0yNzAwLDUxMCwtMjcwMiBsXCIgKyBleHRyYVZpbmljdWx1bSAvIDUuMjk4ICsgXCIgLVwiICsgZXh0cmFWaW5pY3VsdW0gKyBcIlxcbmMzLjMsLTcuMyw5LjMsLTExLDE4LC0xMSBINDAwMDAwdlwiICsgKDQwICsgZXh0cmFWaW5pY3VsdW0pICsgXCJIMTAxNy43XFxucy05MC41LDQ3OCwtMjc2LjIsMTQ2NmMtMTg1LjcsOTg4LC0yNzkuNSwxNDgzLC0yODEuNSwxNDg1Yy0yLDYsLTEwLDksLTI0LDlcXG5jLTgsMCwtMTIsLTAuNywtMTIsLTJjMCwtMS4zLC01LjMsLTMyLC0xNiwtOTJjLTUwLjcsLTI5My4zLC0xMTkuNywtNjkzLjMsLTIwNywtMTIwMFxcbmMwLC0xLjMsLTUuMyw4LjcsLTE2LDMwYy0xMC43LDIxLjMsLTIxLjMsNDIuNywtMzIsNjRzLTE2LDMzLC0xNiwzM3MtMjYsLTI2LC0yNiwtMjZcXG5zNzYsLTE1Myw3NiwtMTUzczc3LC0xNTEsNzcsLTE1MWMwLjcsMC43LDM1LjcsMjAyLDEwNSw2MDRjNjcuMyw0MDAuNywxMDIsNjAyLjcsMTA0LFxcbjYwNnpNXCIgKyAoMTAwMSArIGV4dHJhVmluaWN1bHVtKSArIFwiIFwiICsgaExpbmVQYWQgKyBcImg0MDAwMDB2XCIgKyAoNDAgKyBleHRyYVZpbmljdWx1bSkgKyBcIkgxMDE3Ljd6XCI7XG59O1xuXG52YXIgcGhhc2VQYXRoID0gZnVuY3Rpb24gcGhhc2VQYXRoKHkpIHtcbiAgdmFyIHggPSB5IC8gMjsgLy8geCBjb29yZGluYXRlIGF0IHRvcCBvZiBhbmdsZVxuXG4gIHJldHVybiBcIk00MDAwMDAgXCIgKyB5ICsgXCIgSDAgTFwiICsgeCArIFwiIDAgbDY1IDQ1IEwxNDUgXCIgKyAoeSAtIDgwKSArIFwiIEg0MDAwMDB6XCI7XG59O1xuXG52YXIgc3FydFRhbGwgPSBmdW5jdGlvbiBzcXJ0VGFsbChleHRyYVZpbmljdWx1bSwgaExpbmVQYWQsIHZpZXdCb3hIZWlnaHQpIHtcbiAgLy8gc3FydFRhbGwgaXMgZnJvbSBnbHlwaCBVMjNCNyBpbiB0aGUgZm9udCBLYVRlWF9TaXplNC1SZWd1bGFyXG4gIC8vIE9uZSBwYXRoIGVkZ2UgaGFzIGEgdmFyaWFibGUgbGVuZ3RoLiBJdCBydW5zIHZlcnRpY2FsbHkgZnJvbSB0aGUgdmluaWN1bHVtblxuICAvLyB0byBhIHBvaW50IG5lYXIgKDE0IHVuaXRzKSB0aGUgYm90dG9tIG9mIHRoZSBzdXJkLiBUaGUgdmluaWN1bHVtXG4gIC8vIGlzIG5vcm1hbGx5IDQwIHVuaXRzIHRoaWNrLiBTbyB0aGUgbGVuZ3RoIG9mIHRoZSBsaW5lIGluIHF1ZXN0aW9uIGlzOlxuICB2YXIgdmVydFNlZ21lbnQgPSB2aWV3Qm94SGVpZ2h0IC0gNTQgLSBoTGluZVBhZCAtIGV4dHJhVmluaWN1bHVtO1xuICByZXR1cm4gXCJNNzAyIFwiICsgKGV4dHJhVmluaWN1bHVtICsgaExpbmVQYWQpICsgXCJINDAwMDAwXCIgKyAoNDAgKyBleHRyYVZpbmljdWx1bSkgKyBcIlxcbkg3NDJ2XCIgKyB2ZXJ0U2VnbWVudCArIFwibC00IDQtNCA0Yy0uNjY3LjcgLTIgMS41LTQgMi41cy00LjE2NyAxLjgzMy02LjUgMi41LTUuNSAxLTkuNSAxXFxuaC0xMmwtMjgtODRjLTE2LjY2Ny01Mi05Ni42NjcgLTI5NC4zMzMtMjQwLTcyN2wtMjEyIC02NDMgLTg1IDE3MFxcbmMtNC0zLjMzMy04LjMzMy03LjY2Ny0xMyAtMTNsLTEzLTEzbDc3LTE1NSA3Ny0xNTZjNjYgMTk5LjMzMyAxMzkgNDE5LjY2N1xcbjIxOSA2NjEgbDIxOCA2NjF6TTcwMiBcIiArIGhMaW5lUGFkICsgXCJINDAwMDAwdlwiICsgKDQwICsgZXh0cmFWaW5pY3VsdW0pICsgXCJINzQyelwiO1xufTtcblxudmFyIHNxcnRQYXRoID0gZnVuY3Rpb24gc3FydFBhdGgoc2l6ZSwgZXh0cmFWaW5pY3VsdW0sIHZpZXdCb3hIZWlnaHQpIHtcbiAgZXh0cmFWaW5pY3VsdW0gPSAxMDAwICogZXh0cmFWaW5pY3VsdW07IC8vIENvbnZlcnQgZnJvbSBkb2N1bWVudCBlbXMgdG8gdmlld0JveC5cblxuICB2YXIgcGF0aCA9IFwiXCI7XG5cbiAgc3dpdGNoIChzaXplKSB7XG4gICAgY2FzZSBcInNxcnRNYWluXCI6XG4gICAgICBwYXRoID0gc3FydE1haW4oZXh0cmFWaW5pY3VsdW0sIGhMaW5lUGFkKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBcInNxcnRTaXplMVwiOlxuICAgICAgcGF0aCA9IHNxcnRTaXplMShleHRyYVZpbmljdWx1bSwgaExpbmVQYWQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFwic3FydFNpemUyXCI6XG4gICAgICBwYXRoID0gc3FydFNpemUyKGV4dHJhVmluaWN1bHVtLCBoTGluZVBhZCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgXCJzcXJ0U2l6ZTNcIjpcbiAgICAgIHBhdGggPSBzcXJ0U2l6ZTMoZXh0cmFWaW5pY3VsdW0sIGhMaW5lUGFkKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBcInNxcnRTaXplNFwiOlxuICAgICAgcGF0aCA9IHNxcnRTaXplNChleHRyYVZpbmljdWx1bSwgaExpbmVQYWQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFwic3FydFRhbGxcIjpcbiAgICAgIHBhdGggPSBzcXJ0VGFsbChleHRyYVZpbmljdWx1bSwgaExpbmVQYWQsIHZpZXdCb3hIZWlnaHQpO1xuICB9XG5cbiAgcmV0dXJuIHBhdGg7XG59O1xudmFyIGlubmVyUGF0aCA9IGZ1bmN0aW9uIGlubmVyUGF0aChuYW1lLCBoZWlnaHQpIHtcbiAgLy8gVGhlIGlubmVyIHBhcnQgb2Ygc3RyZXRjaHkgdGFsbCBkZWxpbWl0ZXJzXG4gIHN3aXRjaCAobmFtZSkge1xuICAgIGNhc2UgXCJcXHUyMzlDXCI6XG4gICAgICByZXR1cm4gXCJNMjkxIDAgSDQxNyBWXCIgKyBoZWlnaHQgKyBcIiBIMjkxeiBNMjkxIDAgSDQxNyBWXCIgKyBoZWlnaHQgKyBcIiBIMjkxelwiO1xuXG4gICAgY2FzZSBcIlxcdTIyMjNcIjpcbiAgICAgIHJldHVybiBcIk0xNDUgMCBIMTg4IFZcIiArIGhlaWdodCArIFwiIEgxNDV6IE0xNDUgMCBIMTg4IFZcIiArIGhlaWdodCArIFwiIEgxNDV6XCI7XG5cbiAgICBjYXNlIFwiXFx1MjIyNVwiOlxuICAgICAgcmV0dXJuIFwiTTE0NSAwIEgxODggVlwiICsgaGVpZ2h0ICsgXCIgSDE0NXogTTE0NSAwIEgxODggVlwiICsgaGVpZ2h0ICsgXCIgSDE0NXpcIiArIChcIk0zNjcgMCBINDEwIFZcIiArIGhlaWdodCArIFwiIEgzNjd6IE0zNjcgMCBINDEwIFZcIiArIGhlaWdodCArIFwiIEgzNjd6XCIpO1xuXG4gICAgY2FzZSBcIlxcdTIzOUZcIjpcbiAgICAgIHJldHVybiBcIk00NTcgMCBINTgzIFZcIiArIGhlaWdodCArIFwiIEg0NTd6IE00NTcgMCBINTgzIFZcIiArIGhlaWdodCArIFwiIEg0NTd6XCI7XG5cbiAgICBjYXNlIFwiXFx1MjNBMlwiOlxuICAgICAgcmV0dXJuIFwiTTMxOSAwIEg0MDMgVlwiICsgaGVpZ2h0ICsgXCIgSDMxOXogTTMxOSAwIEg0MDMgVlwiICsgaGVpZ2h0ICsgXCIgSDMxOXpcIjtcblxuICAgIGNhc2UgXCJcXHUyM0E1XCI6XG4gICAgICByZXR1cm4gXCJNMjYzIDAgSDM0NyBWXCIgKyBoZWlnaHQgKyBcIiBIMjYzeiBNMjYzIDAgSDM0NyBWXCIgKyBoZWlnaHQgKyBcIiBIMjYzelwiO1xuXG4gICAgY2FzZSBcIlxcdTIzQUFcIjpcbiAgICAgIHJldHVybiBcIk0zODQgMCBINTA0IFZcIiArIGhlaWdodCArIFwiIEgzODR6IE0zODQgMCBINTA0IFZcIiArIGhlaWdodCArIFwiIEgzODR6XCI7XG5cbiAgICBjYXNlIFwiXFx1MjNEMFwiOlxuICAgICAgcmV0dXJuIFwiTTMxMiAwIEgzNTUgVlwiICsgaGVpZ2h0ICsgXCIgSDMxMnogTTMxMiAwIEgzNTUgVlwiICsgaGVpZ2h0ICsgXCIgSDMxMnpcIjtcblxuICAgIGNhc2UgXCJcXHUyMDE2XCI6XG4gICAgICByZXR1cm4gXCJNMjU3IDAgSDMwMCBWXCIgKyBoZWlnaHQgKyBcIiBIMjU3eiBNMjU3IDAgSDMwMCBWXCIgKyBoZWlnaHQgKyBcIiBIMjU3elwiICsgKFwiTTQ3OCAwIEg1MjEgVlwiICsgaGVpZ2h0ICsgXCIgSDQ3OHogTTQ3OCAwIEg1MjEgVlwiICsgaGVpZ2h0ICsgXCIgSDQ3OHpcIik7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwiXCI7XG4gIH1cbn07XG52YXIgcGF0aCA9IHtcbiAgLy8gVGhlIGRvdWJsZWxlZnRhcnJvdyBnZW9tZXRyeSBpcyBmcm9tIGdseXBoIFUrMjFEMCBpbiB0aGUgZm9udCBLYVRlWCBNYWluXG4gIGRvdWJsZWxlZnRhcnJvdzogXCJNMjYyIDE1N1xcbmwxMC0xMGMzNC0zNiA2Mi43LTc3IDg2LTEyMyAzLjMtOCA1LTEzLjMgNS0xNiAwLTUuMy02LjctOC0yMC04LTcuM1xcbiAwLTEyLjIuNS0xNC41IDEuNS0yLjMgMS00LjggNC41LTcuNSAxMC41LTQ5LjMgOTcuMy0xMjEuNyAxNjkuMy0yMTcgMjE2LTI4XFxuIDE0LTU3LjMgMjUtODggMzMtNi43IDItMTEgMy44LTEzIDUuNS0yIDEuNy0zIDQuMi0zIDcuNXMxIDUuOCAzIDcuNVxcbmMyIDEuNyA2LjMgMy41IDEzIDUuNSA2OCAxNy4zIDEyOC4yIDQ3LjggMTgwLjUgOTEuNSA1Mi4zIDQzLjcgOTMuOCA5Ni4yIDEyNC41XFxuIDE1Ny41IDkuMyA4IDE1LjMgMTIuMyAxOCAxM2g2YzEyLS43IDE4LTQgMTgtMTAgMC0yLTEuNy03LTUtMTUtMjMuMy00Ni01Mi04N1xcbi04Ni0xMjNsLTEwLTEwaDM5OTczOHYtNDBIMjE4YzMyOCAwIDAgMCAwIDBsLTEwLThjLTI2LjctMjAtNjUuNy00My0xMTctNjkgMi43XFxuLTIgNi0zLjcgMTAtNSAzNi43LTE2IDcyLjMtMzcuMyAxMDctNjRsMTAtOGgzOTk3ODJ2LTQwelxcbm04IDB2NDBoMzk5NzMwdi00MHptMCAxOTR2NDBoMzk5NzMwdi00MHpcIixcbiAgLy8gZG91YmxlcmlnaHRhcnJvdyBpcyBmcm9tIGdseXBoIFUrMjFEMiBpbiBmb250IEthVGVYIE1haW5cbiAgZG91YmxlcmlnaHRhcnJvdzogXCJNMzk5NzM4IDM5MmxcXG4tMTAgMTBjLTM0IDM2LTYyLjcgNzctODYgMTIzLTMuMyA4LTUgMTMuMy01IDE2IDAgNS4zIDYuNyA4IDIwIDggNy4zIDAgMTIuMi0uNVxcbiAxNC41LTEuNSAyLjMtMSA0LjgtNC41IDcuNS0xMC41IDQ5LjMtOTcuMyAxMjEuNy0xNjkuMyAyMTctMjE2IDI4LTE0IDU3LjMtMjUgODhcXG4tMzMgNi43LTIgMTEtMy44IDEzLTUuNSAyLTEuNyAzLTQuMiAzLTcuNXMtMS01LjgtMy03LjVjLTItMS43LTYuMy0zLjUtMTMtNS41LTY4XFxuLTE3LjMtMTI4LjItNDcuOC0xODAuNS05MS41LTUyLjMtNDMuNy05My44LTk2LjItMTI0LjUtMTU3LjUtOS4zLTgtMTUuMy0xMi4zLTE4XFxuLTEzaC02Yy0xMiAuNy0xOCA0LTE4IDEwIDAgMiAxLjcgNyA1IDE1IDIzLjMgNDYgNTIgODcgODYgMTIzbDEwIDEwSDB2NDBoMzk5NzgyXFxuYy0zMjggMCAwIDAgMCAwbDEwIDhjMjYuNyAyMCA2NS43IDQzIDExNyA2OS0yLjcgMi02IDMuNy0xMCA1LTM2LjcgMTYtNzIuMyAzNy4zXFxuLTEwNyA2NGwtMTAgOEgwdjQwek0wIDE1N3Y0MGgzOTk3MzB2LTQwem0wIDE5NHY0MGgzOTk3MzB2LTQwelwiLFxuICAvLyBsZWZ0YXJyb3cgaXMgZnJvbSBnbHlwaCBVKzIxOTAgaW4gZm9udCBLYVRlWCBNYWluXG4gIGxlZnRhcnJvdzogXCJNNDAwMDAwIDI0MUgxMTBsMy0zYzY4LjctNTIuNyAxMTMuNy0xMjBcXG4gMTM1LTIwMiA0LTE0LjcgNi0yMyA2LTI1IDAtNy4zLTctMTEtMjEtMTEtOCAwLTEzLjIuOC0xNS41IDIuNS0yLjMgMS43LTQuMiA1LjhcXG4tNS41IDEyLjUtMS4zIDQuNy0yLjcgMTAuMy00IDE3LTEyIDQ4LjctMzQuOCA5Mi02OC41IDEzMFM2NS4zIDIyOC4zIDE4IDI0N1xcbmMtMTAgNC0xNiA3LjctMTggMTEgMCA4LjcgNiAxNC4zIDE4IDE3IDQ3LjMgMTguNyA4Ny44IDQ3IDEyMS41IDg1UzE5NiA0NDEuMyAyMDhcXG4gNDkwYy43IDIgMS4zIDUgMiA5czEuMiA2LjcgMS41IDhjLjMgMS4zIDEgMy4zIDIgNnMyLjIgNC41IDMuNSA1LjVjMS4zIDEgMy4zXFxuIDEuOCA2IDIuNXM2IDEgMTAgMWMxNCAwIDIxLTMuNyAyMS0xMSAwLTItMi0xMC4zLTYtMjUtMjAtNzkuMy02NS0xNDYuNy0xMzUtMjAyXFxuIGwtMy0zaDM5OTg5MHpNMTAwIDI0MXY0MGgzOTk5MDB2LTQwelwiLFxuICAvLyBvdmVyYnJhY2UgaXMgZnJvbSBnbHlwaHMgVSsyM0E5LzIzQTgvMjNBNyBpbiBmb250IEthVGVYX1NpemU0LVJlZ3VsYXJcbiAgbGVmdGJyYWNlOiBcIk02IDU0OGwtNi02di0zNWw2LTExYzU2LTEwNCAxMzUuMy0xODEuMyAyMzgtMjMyIDU3LjMtMjguNyAxMTdcXG4tNDUgMTc5LTUwaDM5OTU3N3YxMjBINDAzYy00My4zIDctODEgMTUtMTEzIDI2LTEwMC43IDMzLTE3OS43IDkxLTIzNyAxNzQtMi43XFxuIDUtNiA5LTEwIDEzLS43IDEtNy4zIDEtMjAgMUg2elwiLFxuICBsZWZ0YnJhY2V1bmRlcjogXCJNMCA2bDYtNmgxN2MxMi42ODggMCAxOS4zMTMuMyAyMCAxIDQgNCA3LjMxMyA4LjMgMTAgMTNcXG4gMzUuMzEzIDUxLjMgODAuODEzIDkzLjggMTM2LjUgMTI3LjUgNTUuNjg4IDMzLjcgMTE3LjE4OCA1NS44IDE4NC41IDY2LjUuNjg4XFxuIDAgMiAuMyA0IDEgMTguNjg4IDIuNyA3NiA0LjMgMTcyIDVoMzk5NDUwdjEyMEg0MjlsLTYtMWMtMTI0LjY4OC04LTIzNS02MS43XFxuLTMzMS0xNjFDNjAuNjg3IDEzOC43IDMyLjMxMiA5OS4zIDcgNTRMMCA0MVY2elwiLFxuICAvLyBvdmVyZ3JvdXAgaXMgZnJvbSB0aGUgTW5TeW1ib2wgcGFja2FnZSAocHVibGljIGRvbWFpbilcbiAgbGVmdGdyb3VwOiBcIk00MDAwMDAgODBcXG5INDM1QzY0IDgwIDE2OC4zIDIyOS40IDIxIDI2MGMtNS45IDEuMi0xOCAwLTE4IDAtMiAwLTMtMS0zLTN2LTM4Qzc2IDYxIDI1NyAwXFxuIDQzNSAwaDM5OTU2NXpcIixcbiAgbGVmdGdyb3VwdW5kZXI6IFwiTTQwMDAwMCAyNjJcXG5INDM1QzY0IDI2MiAxNjguMyAxMTIuNiAyMSA4MmMtNS45LTEuMi0xOCAwLTE4IDAtMiAwLTMgMS0zIDN2MzhjNzYgMTU4IDI1NyAyMTlcXG4gNDM1IDIxOWgzOTk1NjV6XCIsXG4gIC8vIEhhcnBvb25zIGFyZSBmcm9tIGdseXBoIFUrMjFCRCBpbiBmb250IEthVGVYIE1haW5cbiAgbGVmdGhhcnBvb246IFwiTTAgMjY3Yy43IDUuMyAzIDEwIDcgMTRoMzk5OTkzdi00MEg5M2MzLjNcXG4tMy4zIDEwLjItOS41IDIwLjUtMTguNXMxNy44LTE1LjggMjIuNS0yMC41YzUwLjctNTIgODgtMTEwLjMgMTEyLTE3NSA0LTExLjMgNVxcbi0xOC4zIDMtMjEtMS4zLTQtNy4zLTYtMTgtNi04IDAtMTMgLjctMTUgMnMtNC43IDYuNy04IDE2Yy00MiA5OC43LTEwNy4zIDE3NC43XFxuLTE5NiAyMjgtNi43IDQuNy0xMC43IDgtMTIgMTAtMS4zIDItMiA1LjctMiAxMXptMTAwLTI2djQwaDM5OTkwMHYtNDB6XCIsXG4gIGxlZnRoYXJwb29ucGx1czogXCJNMCAyNjdjLjcgNS4zIDMgMTAgNyAxNGgzOTk5OTN2LTQwSDkzYzMuMy0zLjMgMTAuMi05LjVcXG4gMjAuNS0xOC41czE3LjgtMTUuOCAyMi41LTIwLjVjNTAuNy01MiA4OC0xMTAuMyAxMTItMTc1IDQtMTEuMyA1LTE4LjMgMy0yMS0xLjNcXG4tNC03LjMtNi0xOC02LTggMC0xMyAuNy0xNSAycy00LjcgNi43LTggMTZjLTQyIDk4LjctMTA3LjMgMTc0LjctMTk2IDIyOC02LjcgNC43XFxuLTEwLjcgOC0xMiAxMC0xLjMgMi0yIDUuNy0yIDExem0xMDAtMjZ2NDBoMzk5OTAwdi00MHpNMCA0MzV2NDBoNDAwMDAwdi00MHpcXG5tMCAwdjQwaDQwMDAwMHYtNDB6XCIsXG4gIGxlZnRoYXJwb29uZG93bjogXCJNNyAyNDFjLTQgNC02LjMzMyA4LjY2Ny03IDE0IDAgNS4zMzMuNjY3IDkgMiAxMXM1LjMzM1xcbiA1LjMzMyAxMiAxMGM5MC42NjcgNTQgMTU2IDEzMCAxOTYgMjI4IDMuMzMzIDEwLjY2NyA2LjMzMyAxNi4zMzMgOSAxNyAyIC42NjcgNVxcbiAxIDkgMWg1YzEwLjY2NyAwIDE2LjY2Ny0yIDE4LTYgMi0yLjY2NyAxLTkuNjY3LTMtMjEtMzItODcuMzMzLTgyLjY2Ny0xNTcuNjY3XFxuLTE1Mi0yMTFsLTMtM2gzOTk5MDd2LTQwek05MyAyODEgSDQwMDAwMCB2LTQwTDcgMjQxelwiLFxuICBsZWZ0aGFycG9vbmRvd25wbHVzOiBcIk03IDQzNWMtNCA0LTYuMyA4LjctNyAxNCAwIDUuMy43IDkgMiAxMXM1LjMgNS4zIDEyXFxuIDEwYzkwLjcgNTQgMTU2IDEzMCAxOTYgMjI4IDMuMyAxMC43IDYuMyAxNi4zIDkgMTcgMiAuNyA1IDEgOSAxaDVjMTAuNyAwIDE2LjdcXG4tMiAxOC02IDItMi43IDEtOS43LTMtMjEtMzItODcuMy04Mi43LTE1Ny43LTE1Mi0yMTFsLTMtM2gzOTk5MDd2LTQwSDd6bTkzIDBcXG52NDBoMzk5OTAwdi00MHpNMCAyNDF2NDBoMzk5OTAwdi00MHptMCAwdjQwaDM5OTkwMHYtNDB6XCIsXG4gIC8vIGhvb2sgaXMgZnJvbSBnbHlwaCBVKzIxQTkgaW4gZm9udCBLYVRlWCBNYWluXG4gIGxlZnRob29rOiBcIk00MDAwMDAgMjgxIEgxMDNzLTMzLTExLjItNjEtMzMuNVMwIDE5Ny4zIDAgMTY0czE0LjItNjEuMiA0Mi41XFxuLTgzLjVDNzAuOCA1OC4yIDEwNCA0NyAxNDIgNDcgYzE2LjcgMCAyNSA2LjcgMjUgMjAgMCAxMi04LjcgMTguNy0yNiAyMC00MCAzLjNcXG4tNjguNyAxNS43LTg2IDM3LTEwIDEyLTE1IDI1LjMtMTUgNDAgMCAyMi43IDkuOCA0MC43IDI5LjUgNTQgMTkuNyAxMy4zIDQzLjUgMjFcXG4gNzEuNSAyM2gzOTk4NTl6TTEwMyAyODF2LTQwaDM5OTg5N3Y0MHpcIixcbiAgbGVmdGxpbmVzZWdtZW50OiBcIk00MCAyODEgVjQyOCBIMCBWOTQgSDQwIFYyNDEgSDQwMDAwMCB2NDB6XFxuTTQwIDI4MSBWNDI4IEgwIFY5NCBINDAgVjI0MSBINDAwMDAwIHY0MHpcIixcbiAgbGVmdG1hcHN0bzogXCJNNDAgMjgxIFY0NDhIMFY3NEg0MFYyNDFINDAwMDAwdjQwelxcbk00MCAyODEgVjQ0OEgwVjc0SDQwVjI0MUg0MDAwMDB2NDB6XCIsXG4gIC8vIHRvZnJvbSBpcyBmcm9tIGdseXBoIFUrMjFDNCBpbiBmb250IEthVGVYIEFNUyBSZWd1bGFyXG4gIGxlZnRUb0Zyb206IFwiTTAgMTQ3aDQwMDAwMHY0MEgwem0wIDIxNGM2OCA0MCAxMTUuNyA5NS43IDE0MyAxNjdoMjJjMTUuMyAwIDIzXFxuLS4zIDIzLTEgMC0xLjMtNS4zLTEzLjctMTYtMzctMTgtMzUuMy00MS4zLTY5LTcwLTEwMWwtNy04aDM5OTkwNXYtNDBIOTVsNy04XFxuYzI4LjctMzIgNTItNjUuNyA3MC0xMDEgMTAuNy0yMy4zIDE2LTM1LjcgMTYtMzcgMC0uNy03LjctMS0yMy0xaC0yMkMxMTUuNyAyNjUuM1xcbiA2OCAzMjEgMCAzNjF6bTAtMTc0di00MGgzOTk5MDB2NDB6bTEwMCAxNTR2NDBoMzk5OTAwdi00MHpcIixcbiAgbG9uZ2VxdWFsOiBcIk0wIDUwIGg0MDAwMDAgdjQwSDB6IG0wIDE5NGg0MDAwMHY0MEgwelxcbk0wIDUwIGg0MDAwMDAgdjQwSDB6IG0wIDE5NGg0MDAwMHY0MEgwelwiLFxuICBtaWRicmFjZTogXCJNMjAwNDI4IDMzNFxcbmMtMTAwLjctOC4zLTE5NS4zLTQ0LTI4MC0xMDgtNTUuMy00Mi0xMDEuNy05My0xMzktMTUzbC05LTE0Yy0yLjcgNC01LjcgOC43LTkgMTRcXG4tNTMuMyA4Ni43LTEyMy43IDE1My0yMTEgMTk5LTY2LjcgMzYtMTM3LjMgNTYuMy0yMTIgNjJIMFYyMTRoMTk5NTY4YzE3OC4zLTExLjdcXG4gMzExLjctNzguMyA0MDMtMjAxIDYtOCA5LjctMTIgMTEtMTIgLjctLjcgNi43LTEgMTgtMXMxNy4zLjMgMTggMWMxLjMgMCA1IDQgMTFcXG4gMTIgNDQuNyA1OS4zIDEwMS4zIDEwNi4zIDE3MCAxNDFzMTQ1LjMgNTQuMyAyMjkgNjBoMTk5NTcydjEyMHpcIixcbiAgbWlkYnJhY2V1bmRlcjogXCJNMTk5NTcyIDIxNFxcbmMxMDAuNyA4LjMgMTk1LjMgNDQgMjgwIDEwOCA1NS4zIDQyIDEwMS43IDkzIDEzOSAxNTNsOSAxNGMyLjctNCA1LjctOC43IDktMTRcXG4gNTMuMy04Ni43IDEyMy43LTE1MyAyMTEtMTk5IDY2LjctMzYgMTM3LjMtNTYuMyAyMTItNjJoMTk5NTY4djEyMEgyMDA0MzJjLTE3OC4zXFxuIDExLjctMzExLjcgNzguMy00MDMgMjAxLTYgOC05LjcgMTItMTEgMTItLjcuNy02LjcgMS0xOCAxcy0xNy4zLS4zLTE4LTFjLTEuMyAwXFxuLTUtNC0xMS0xMi00NC43LTU5LjMtMTAxLjMtMTA2LjMtMTcwLTE0MXMtMTQ1LjMtNTQuMy0yMjktNjBIMFYyMTR6XCIsXG4gIG9paW50U2l6ZTE6IFwiTTUxMi42IDcxLjZjMjcyLjYgMCAzMjAuMyAxMDYuOCAzMjAuMyAxNzguMiAwIDcwLjgtNDcuNyAxNzcuNlxcbi0zMjAuMyAxNzcuNlMxOTMuMSAzMjAuNiAxOTMuMSAyNDkuOGMwLTcxLjQgNDYuOS0xNzguMiAzMTkuNS0xNzguMnpcXG5tMzY4LjEgMTc4LjJjMC04Ni40LTYwLjktMjE1LjQtMzY4LjEtMjE1LjQtMzA2LjQgMC0zNjcuMyAxMjktMzY3LjMgMjE1LjQgMCA4NS44XFxuNjAuOSAyMTQuOCAzNjcuMyAyMTQuOCAzMDcuMiAwIDM2OC4xLTEyOSAzNjguMS0yMTQuOHpcIixcbiAgb2lpbnRTaXplMjogXCJNNzU3LjggMTAwLjFjMzg0LjcgMCA0NTEuMSAxMzcuNiA0NTEuMSAyMzAgMCA5MS4zLTY2LjQgMjI4LjhcXG4tNDUxLjEgMjI4LjgtMzg2LjMgMC00NTIuNy0xMzcuNS00NTIuNy0yMjguOCAwLTkyLjQgNjYuNC0yMzAgNDUyLjctMjMwelxcbm01MDIuNCAyMzBjMC0xMTEuMi04Mi40LTI3Ny4yLTUwMi40LTI3Ny4ycy01MDQgMTY2LTUwNCAyNzcuMlxcbmMwIDExMCA4NCAyNzYgNTA0IDI3NnM1MDIuNC0xNjYgNTAyLjQtMjc2elwiLFxuICBvaWlpbnRTaXplMTogXCJNNjgxLjQgNzEuNmM0MDguOSAwIDQ4MC41IDEwNi44IDQ4MC41IDE3OC4yIDAgNzAuOC03MS42IDE3Ny42XFxuLTQ4MC41IDE3Ny42UzIwMi4xIDMyMC42IDIwMi4xIDI0OS44YzAtNzEuNCA3MC41LTE3OC4yIDQ3OS4zLTE3OC4yelxcbm01MjUuOCAxNzguMmMwLTg2LjQtODYuOC0yMTUuNC01MjUuNy0yMTUuNC00MzcuOSAwLTUyNC43IDEyOS01MjQuNyAyMTUuNCAwXFxuODUuOCA4Ni44IDIxNC44IDUyNC43IDIxNC44IDQzOC45IDAgNTI1LjctMTI5IDUyNS43LTIxNC44elwiLFxuICBvaWlpbnRTaXplMjogXCJNMTAyMS4yIDUzYzYwMy42IDAgNzA3LjggMTY1LjggNzA3LjggMjc3LjIgMCAxMTAtMTA0LjIgMjc1LjhcXG4tNzA3LjggMjc1LjgtNjA2IDAtNzEwLjItMTY1LjgtNzEwLjItMjc1LjhDMzExIDIxOC44IDQxNS4yIDUzIDEwMjEuMiA1M3pcXG5tNzcwLjQgMjc3LjFjMC0xMzEuMi0xMjYuNC0zMjcuNi03NzAuNS0zMjcuNlMyNDguNCAxOTguOSAyNDguNCAzMzAuMVxcbmMwIDEzMCAxMjguOCAzMjYuNCA3NzIuNyAzMjYuNHM3NzAuNS0xOTYuNCA3NzAuNS0zMjYuNHpcIixcbiAgcmlnaHRhcnJvdzogXCJNMCAyNDF2NDBoMzk5ODkxYy00Ny4zIDM1LjMtODQgNzgtMTEwIDEyOFxcbi0xNi43IDMyLTI3LjcgNjMuNy0zMyA5NSAwIDEuMy0uMiAyLjctLjUgNC0uMyAxLjMtLjUgMi4zLS41IDMgMCA3LjMgNi43IDExIDIwXFxuIDExIDggMCAxMy4yLS44IDE1LjUtMi41IDIuMy0xLjcgNC4yLTUuNSA1LjUtMTEuNSAyLTEzLjMgNS43LTI3IDExLTQxIDE0LjctNDQuN1xcbiAzOS04NC41IDczLTExOS41czczLjctNjAuMiAxMTktNzUuNWM2LTIgOS01LjcgOS0xMXMtMy05LTktMTFjLTQ1LjMtMTUuMy04NVxcbi00MC41LTExOS03NS41cy01OC4zLTc0LjgtNzMtMTE5LjVjLTQuNy0xNC04LjMtMjcuMy0xMS00MC0xLjMtNi43LTMuMi0xMC44LTUuNVxcbi0xMi41LTIuMy0xLjctNy41LTIuNS0xNS41LTIuNS0xNCAwLTIxIDMuNy0yMSAxMSAwIDIgMiAxMC4zIDYgMjUgMjAuNyA4My4zIDY3XFxuIDE1MS43IDEzOSAyMDV6bTAgMHY0MGgzOTk5MDB2LTQwelwiLFxuICByaWdodGJyYWNlOiBcIk00MDAwMDAgNTQybFxcbi02IDZoLTE3Yy0xMi43IDAtMTkuMy0uMy0yMC0xLTQtNC03LjMtOC4zLTEwLTEzLTM1LjMtNTEuMy04MC44LTkzLjgtMTM2LjUtMTI3LjVcXG5zLTExNy4yLTU1LjgtMTg0LjUtNjYuNWMtLjcgMC0yLS4zLTQtMS0xOC43LTIuNy03Ni00LjMtMTcyLTVIMFYyMTRoMzk5NTcxbDYgMVxcbmMxMjQuNyA4IDIzNSA2MS43IDMzMSAxNjEgMzEuMyAzMy4zIDU5LjcgNzIuNyA4NSAxMThsNyAxM3YzNXpcIixcbiAgcmlnaHRicmFjZXVuZGVyOiBcIk0zOTk5OTQgMGw2IDZ2MzVsLTYgMTFjLTU2IDEwNC0xMzUuMyAxODEuMy0yMzggMjMyLTU3LjNcXG4gMjguNy0xMTcgNDUtMTc5IDUwSC0zMDBWMjE0aDM5OTg5N2M0My4zLTcgODEtMTUgMTEzLTI2IDEwMC43LTMzIDE3OS43LTkxIDIzN1xcbi0xNzQgMi43LTUgNi05IDEwLTEzIC43LTEgNy4zLTEgMjAtMWgxN3pcIixcbiAgcmlnaHRncm91cDogXCJNMCA4MGgzOTk1NjVjMzcxIDAgMjY2LjcgMTQ5LjQgNDE0IDE4MCA1LjkgMS4yIDE4IDAgMTggMCAyIDBcXG4gMy0xIDMtM3YtMzhjLTc2LTE1OC0yNTctMjE5LTQzNS0yMTlIMHpcIixcbiAgcmlnaHRncm91cHVuZGVyOiBcIk0wIDI2MmgzOTk1NjVjMzcxIDAgMjY2LjctMTQ5LjQgNDE0LTE4MCA1LjktMS4yIDE4IDAgMThcXG4gMCAyIDAgMyAxIDMgM3YzOGMtNzYgMTU4LTI1NyAyMTktNDM1IDIxOUgwelwiLFxuICByaWdodGhhcnBvb246IFwiTTAgMjQxdjQwaDM5OTk5M2M0LjctNC43IDctOS4zIDctMTQgMC05LjNcXG4tMy43LTE1LjMtMTEtMTgtOTIuNy01Ni43LTE1OS0xMzMuNy0xOTktMjMxLTMuMy05LjMtNi0xNC43LTgtMTYtMi0xLjMtNy0yLTE1LTJcXG4tMTAuNyAwLTE2LjcgMi0xOCA2LTIgMi43LTEgOS43IDMgMjEgMTUuMyA0MiAzNi43IDgxLjggNjQgMTE5LjUgMjcuMyAzNy43IDU4XFxuIDY5LjIgOTIgOTQuNXptMCAwdjQwaDM5OTkwMHYtNDB6XCIsXG4gIHJpZ2h0aGFycG9vbnBsdXM6IFwiTTAgMjQxdjQwaDM5OTk5M2M0LjctNC43IDctOS4zIDctMTQgMC05LjMtMy43LTE1LjMtMTFcXG4tMTgtOTIuNy01Ni43LTE1OS0xMzMuNy0xOTktMjMxLTMuMy05LjMtNi0xNC43LTgtMTYtMi0xLjMtNy0yLTE1LTItMTAuNyAwLTE2LjdcXG4gMi0xOCA2LTIgMi43LTEgOS43IDMgMjEgMTUuMyA0MiAzNi43IDgxLjggNjQgMTE5LjUgMjcuMyAzNy43IDU4IDY5LjIgOTIgOTQuNXpcXG5tMCAwdjQwaDM5OTkwMHYtNDB6IG0xMDAgMTk0djQwaDM5OTkwMHYtNDB6bTAgMHY0MGgzOTk5MDB2LTQwelwiLFxuICByaWdodGhhcnBvb25kb3duOiBcIk0zOTk3NDcgNTExYzAgNy4zIDYuNyAxMSAyMCAxMSA4IDAgMTMtLjggMTUtMi41czQuNy02LjhcXG4gOC0xNS41YzQwLTk0IDk5LjMtMTY2LjMgMTc4LTIxNyAxMy4zLTggMjAuMy0xMi4zIDIxLTEzIDUuMy0zLjMgOC41LTUuOCA5LjVcXG4tNy41IDEtMS43IDEuNS01LjIgMS41LTEwLjVzLTIuMy0xMC4zLTctMTVIMHY0MGgzOTk5MDhjLTM0IDI1LjMtNjQuNyA1Ny05MiA5NVxcbi0yNy4zIDM4LTQ4LjcgNzcuNy02NCAxMTktMy4zIDguNy01IDE0LTUgMTZ6TTAgMjQxdjQwaDM5OTkwMHYtNDB6XCIsXG4gIHJpZ2h0aGFycG9vbmRvd25wbHVzOiBcIk0zOTk3NDcgNzA1YzAgNy4zIDYuNyAxMSAyMCAxMSA4IDAgMTMtLjhcXG4gMTUtMi41czQuNy02LjggOC0xNS41YzQwLTk0IDk5LjMtMTY2LjMgMTc4LTIxNyAxMy4zLTggMjAuMy0xMi4zIDIxLTEzIDUuMy0zLjNcXG4gOC41LTUuOCA5LjUtNy41IDEtMS43IDEuNS01LjIgMS41LTEwLjVzLTIuMy0xMC4zLTctMTVIMHY0MGgzOTk5MDhjLTM0IDI1LjNcXG4tNjQuNyA1Ny05MiA5NS0yNy4zIDM4LTQ4LjcgNzcuNy02NCAxMTktMy4zIDguNy01IDE0LTUgMTZ6TTAgNDM1djQwaDM5OTkwMHYtNDB6XFxubTAtMTk0djQwaDQwMDAwMHYtNDB6bTAgMHY0MGg0MDAwMDB2LTQwelwiLFxuICByaWdodGhvb2s6IFwiTTM5OTg1OSAyNDFjLTc2NCAwIDAgMCAwIDAgNDAtMy4zIDY4LjctMTUuNyA4Ni0zNyAxMC0xMiAxNS0yNS4zXFxuIDE1LTQwIDAtMjIuNy05LjgtNDAuNy0yOS41LTU0LTE5LjctMTMuMy00My41LTIxLTcxLjUtMjMtMTcuMy0xLjMtMjYtOC0yNi0yMCAwXFxuLTEzLjMgOC43LTIwIDI2LTIwIDM4IDAgNzEgMTEuMiA5OSAzMy41IDAgMCA3IDUuNiAyMSAxNi43IDE0IDExLjIgMjEgMzMuNSAyMVxcbiA2Ni44cy0xNCA2MS4yLTQyIDgzLjVjLTI4IDIyLjMtNjEgMzMuNS05OSAzMy41TDAgMjQxeiBNMCAyODF2LTQwaDM5OTg1OXY0MHpcIixcbiAgcmlnaHRsaW5lc2VnbWVudDogXCJNMzk5OTYwIDI0MSBWOTQgaDQwIFY0MjggaC00MCBWMjgxIEgwIHYtNDB6XFxuTTM5OTk2MCAyNDEgVjk0IGg0MCBWNDI4IGgtNDAgVjI4MSBIMCB2LTQwelwiLFxuICByaWdodFRvRnJvbTogXCJNNDAwMDAwIDE2N2MtNzAuNy00Mi0xMTgtOTcuNy0xNDItMTY3aC0yM2MtMTUuMyAwLTIzIC4zLTIzXFxuIDEgMCAxLjMgNS4zIDEzLjcgMTYgMzcgMTggMzUuMyA0MS4zIDY5IDcwIDEwMWw3IDhIMHY0MGgzOTk5MDVsLTcgOGMtMjguNyAzMlxcbi01MiA2NS43LTcwIDEwMS0xMC43IDIzLjMtMTYgMzUuNy0xNiAzNyAwIC43IDcuNyAxIDIzIDFoMjNjMjQtNjkuMyA3MS4zLTEyNSAxNDJcXG4tMTY3eiBNMTAwIDE0N3Y0MGgzOTk5MDB2LTQwek0wIDM0MXY0MGgzOTk5MDB2LTQwelwiLFxuICAvLyB0d29oZWFkbGVmdGFycm93IGlzIGZyb20gZ2x5cGggVSsyMTlFIGluIGZvbnQgS2FUZVggQU1TIFJlZ3VsYXJcbiAgdHdvaGVhZGxlZnRhcnJvdzogXCJNMCAxNjdjNjggNDBcXG4gMTE1LjcgOTUuNyAxNDMgMTY3aDIyYzE1LjMgMCAyMy0uMyAyMy0xIDAtMS4zLTUuMy0xMy43LTE2LTM3LTE4LTM1LjMtNDEuMy02OVxcbi03MC0xMDFsLTctOGgxMjVsOSA3YzUwLjcgMzkuMyA4NSA4NiAxMDMgMTQwaDQ2YzAtNC43LTYuMy0xOC43LTE5LTQyLTE4LTM1LjNcXG4tNDAtNjcuMy02Ni05NmwtOS05aDM5OTcxNnYtNDBIMjg0bDktOWMyNi0yOC43IDQ4LTYwLjcgNjYtOTYgMTIuNy0yMy4zMzMgMTlcXG4tMzcuMzMzIDE5LTQyaC00NmMtMTggNTQtNTIuMyAxMDAuNy0xMDMgMTQwbC05IDdIOTVsNy04YzI4LjctMzIgNTItNjUuNyA3MC0xMDFcXG4gMTAuNy0yMy4zMzMgMTYtMzUuNyAxNi0zNyAwLS43LTcuNy0xLTIzLTFoLTIyQzExNS43IDcxLjMgNjggMTI3IDAgMTY3elwiLFxuICB0d29oZWFkcmlnaHRhcnJvdzogXCJNNDAwMDAwIDE2N1xcbmMtNjgtNDAtMTE1LjctOTUuNy0xNDMtMTY3aC0yMmMtMTUuMyAwLTIzIC4zLTIzIDEgMCAxLjMgNS4zIDEzLjcgMTYgMzcgMTggMzUuM1xcbiA0MS4zIDY5IDcwIDEwMWw3IDhoLTEyNWwtOS03Yy01MC43LTM5LjMtODUtODYtMTAzLTE0MGgtNDZjMCA0LjcgNi4zIDE4LjcgMTkgNDJcXG4gMTggMzUuMyA0MCA2Ny4zIDY2IDk2bDkgOUgwdjQwaDM5OTcxNmwtOSA5Yy0yNiAyOC43LTQ4IDYwLjctNjYgOTYtMTIuNyAyMy4zMzNcXG4tMTkgMzcuMzMzLTE5IDQyaDQ2YzE4LTU0IDUyLjMtMTAwLjcgMTAzLTE0MGw5LTdoMTI1bC03IDhjLTI4LjcgMzItNTIgNjUuNy03MFxcbiAxMDEtMTAuNyAyMy4zMzMtMTYgMzUuNy0xNiAzNyAwIC43IDcuNyAxIDIzIDFoMjJjMjcuMy03MS4zIDc1LTEyNyAxNDMtMTY3elwiLFxuICAvLyB0aWxkZTEgaXMgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIGEgZ2x5cGggZnJvbSB0aGUgTW5TeW1ib2wgcGFja2FnZVxuICB0aWxkZTE6IFwiTTIwMCA1NS41MzhjLTc3IDAtMTY4IDczLjk1My0xNzcgNzMuOTUzLTMgMC03XFxuLTIuMTc1LTktNS40MzdMMiA5N2MtMS0yLTItNC0yLTYgMC00IDItNyA1LTlsMjAtMTJDMTE2IDEyIDE3MSAwIDIwNyAwYzg2IDBcXG4gMTE0IDY4IDE5MSA2OCA3OCAwIDE2OC02OCAxNzctNjggNCAwIDcgMiA5IDVsMTIgMTljMSAyLjE3NSAyIDQuMzUgMiA2LjUyNSAwXFxuIDQuMzUtMiA3LjYxMy01IDkuNzg4bC0xOSAxMy4wNWMtOTIgNjMuMDc3LTExNi45MzcgNzUuMzA4LTE4MyA3Ni4xMjhcXG4tNjguMjY3Ljg0Ny0xMTMtNzMuOTUyLTE5MS03My45NTJ6XCIsXG4gIC8vIGRpdHRvIHRpbGRlMiwgdGlsZGUzLCAmIHRpbGRlNFxuICB0aWxkZTI6IFwiTTM0NCA1NS4yNjZjLTE0MiAwLTMwMC42MzggODEuMzE2LTMxMS41IDg2LjQxOFxcbi04LjAxIDMuNzYyLTIyLjUgMTAuOTEtMjMuNSA1LjU2MkwxIDEyMGMtMS0yLTEtMy0xLTQgMC01IDMtOSA4LTEwbDE4LjQtOUMxNjAuOVxcbiAzMS45IDI4MyAwIDM1OCAwYzE0OCAwIDE4OCAxMjIgMzMxIDEyMnMzMTQtOTcgMzI2LTk3YzQgMCA4IDIgMTAgN2w3IDIxLjExNFxcbmMxIDIuMTQgMSAzLjIxIDEgNC4yOCAwIDUuMzQ3LTMgOS42MjYtNyAxMC42OTZsLTIyLjMgMTIuNjIyQzg1Mi42IDE1OC4zNzIgNzUxXFxuIDE4MS40NzYgNjc2IDE4MS40NzZjLTE0OSAwLTE4OS0xMjYuMjEtMzMyLTEyNi4yMXpcIixcbiAgdGlsZGUzOiBcIk03ODYgNTlDNDU3IDU5IDMyIDE3NS4yNDIgMTMgMTc1LjI0MmMtNiAwLTEwLTMuNDU3XFxuLTExLTEwLjM3TC4xNSAxMzhjLTEtNyAzLTEyIDEwLTEzbDE5LjItNi40QzM3OC40IDQwLjcgNjM0LjMgMCA4MDQuMyAwYzMzNyAwXFxuIDQxMS44IDE1NyA3NDYuOCAxNTcgMzI4IDAgNzU0LTExMiA3NzMtMTEyIDUgMCAxMCAzIDExIDlsMSAxNC4wNzVjMSA4LjA2Ni0uNjk3XFxuIDE2LjU5NS02LjY5NyAxNy40OTJsLTIxLjA1MiA3LjMxYy0zNjcuOSA5OC4xNDYtNjA5LjE1IDEyMi42OTYtNzc4LjE1IDEyMi42OTZcXG4gLTMzOCAwLTQwOS0xNTYuNTczLTc0NC0xNTYuNTczelwiLFxuICB0aWxkZTQ6IFwiTTc4NiA1OEM0NTcgNTggMzIgMTc3LjQ4NyAxMyAxNzcuNDg3Yy02IDAtMTAtMy4zNDVcXG4tMTEtMTAuMDM1TC4xNSAxNDNjLTEtNyAzLTEyIDEwLTEzbDIyLTYuN0MzODEuMiAzNSA2MzcuMTUgMCA4MDcuMTUgMGMzMzcgMCA0MDlcXG4gMTc3IDc0NCAxNzcgMzI4IDAgNzU0LTEyNyA3NzMtMTI3IDUgMCAxMCAzIDExIDlsMSAxNC43OTRjMSA3LjgwNS0zIDEzLjM4LTlcXG4gMTQuNDk1bC0yMC43IDUuNTc0Yy0zNjYuODUgOTkuNzktNjA3LjMgMTM5LjM3Mi03NzYuMyAxMzkuMzcyLTMzOCAwLTQwOVxcbiAtMTc1LjIzNi03NDQtMTc1LjIzNnpcIixcbiAgLy8gdmVjIGlzIGZyb20gZ2x5cGggVSsyMEQ3IGluIGZvbnQgS2FUZVggTWFpblxuICB2ZWM6IFwiTTM3NyAyMGMwLTUuMzMzIDEuODMzLTEwIDUuNS0xNFMzOTEgMCAzOTcgMGM0LjY2NyAwIDguNjY3IDEuNjY3IDEyIDVcXG4zLjMzMyAyLjY2NyA2LjY2NyA5IDEwIDE5IDYuNjY3IDI0LjY2NyAyMC4zMzMgNDMuNjY3IDQxIDU3IDcuMzMzIDQuNjY3IDExXFxuMTAuNjY3IDExIDE4IDAgNi0xIDEwLTMgMTJzLTYuNjY3IDUtMTQgOWMtMjguNjY3IDE0LjY2Ny01My42NjcgMzUuNjY3LTc1IDYzXFxuLTEuMzMzIDEuMzMzLTMuMTY3IDMuNS01LjUgNi41cy00IDQuODMzLTUgNS41Yy0xIC42NjctMi41IDEuMzMzLTQuNSAycy00LjMzMyAxXFxuLTcgMWMtNC42NjcgMC05LjE2Ny0xLjgzMy0xMy41LTUuNVMzMzcgMTg0IDMzNyAxNzhjMC0xMi42NjcgMTUuNjY3LTMyLjMzMyA0Ny01OVxcbkgyMTNsLTE3MS0xYy04LjY2Ny02LTEzLTEyLjMzMy0xMy0xOSAwLTQuNjY3IDQuMzMzLTExLjMzMyAxMy0yMGgzNTlcXG5jLTE2LTI1LjMzMy0yNC00NS0yNC01OXpcIixcbiAgLy8gd2lkZWhhdDEgaXMgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIGEgZ2x5cGggZnJvbSB0aGUgTW5TeW1ib2wgcGFja2FnZVxuICB3aWRlaGF0MTogXCJNNTI5IDBoNWw1MTkgMTE1YzUgMSA5IDUgOSAxMCAwIDEtMSAyLTEgM2wtNCAyMlxcbmMtMSA1LTUgOS0xMSA5aC0yTDUzMiA2NyAxOSAxNTloLTJjLTUgMC05LTQtMTEtOWwtNS0yMmMtMS02IDItMTIgOC0xM3pcIixcbiAgLy8gZGl0dG8gd2lkZWhhdDIsIHdpZGVoYXQzLCAmIHdpZGVoYXQ0XG4gIHdpZGVoYXQyOiBcIk0xMTgxIDBoMmwxMTcxIDE3NmM2IDAgMTAgNSAxMCAxMWwtMiAyM2MtMSA2LTUgMTBcXG4tMTEgMTBoLTFMMTE4MiA2NyAxNSAyMjBoLTFjLTYgMC0xMC00LTExLTEwbC0yLTIzYy0xLTYgNC0xMSAxMC0xMXpcIixcbiAgd2lkZWhhdDM6IFwiTTExODEgMGgybDExNzEgMjM2YzYgMCAxMCA1IDEwIDExbC0yIDIzYy0xIDYtNSAxMFxcbi0xMSAxMGgtMUwxMTgyIDY3IDE1IDI4MGgtMWMtNiAwLTEwLTQtMTEtMTBsLTItMjNjLTEtNiA0LTExIDEwLTExelwiLFxuICB3aWRlaGF0NDogXCJNMTE4MSAwaDJsMTE3MSAyOTZjNiAwIDEwIDUgMTAgMTFsLTIgMjNjLTEgNi01IDEwXFxuLTExIDEwaC0xTDExODIgNjcgMTUgMzQwaC0xYy02IDAtMTAtNC0xMS0xMGwtMi0yM2MtMS02IDQtMTEgMTAtMTF6XCIsXG4gIC8vIHdpZGVjaGVjayBwYXRocyBhcmUgYWxsIGludmVydGVkIHZlcnNpb25zIG9mIHdpZGVoYXRcbiAgd2lkZWNoZWNrMTogXCJNNTI5LDE1OWg1bDUxOSwtMTE1YzUsLTEsOSwtNSw5LC0xMGMwLC0xLC0xLC0yLC0xLC0zbC00LC0yMmMtMSxcXG4tNSwtNSwtOSwtMTEsLTloLTJsLTUxMiw5MmwtNTEzLC05MmgtMmMtNSwwLC05LDQsLTExLDlsLTUsMjJjLTEsNiwyLDEyLDgsMTN6XCIsXG4gIHdpZGVjaGVjazI6IFwiTTExODEsMjIwaDJsMTE3MSwtMTc2YzYsMCwxMCwtNSwxMCwtMTFsLTIsLTIzYy0xLC02LC01LC0xMCxcXG4tMTEsLTEwaC0xbC0xMTY4LDE1M2wtMTE2NywtMTUzaC0xYy02LDAsLTEwLDQsLTExLDEwbC0yLDIzYy0xLDYsNCwxMSwxMCwxMXpcIixcbiAgd2lkZWNoZWNrMzogXCJNMTE4MSwyODBoMmwxMTcxLC0yMzZjNiwwLDEwLC01LDEwLC0xMWwtMiwtMjNjLTEsLTYsLTUsLTEwLFxcbi0xMSwtMTBoLTFsLTExNjgsMjEzbC0xMTY3LC0yMTNoLTFjLTYsMCwtMTAsNCwtMTEsMTBsLTIsMjNjLTEsNiw0LDExLDEwLDExelwiLFxuICB3aWRlY2hlY2s0OiBcIk0xMTgxLDM0MGgybDExNzEsLTI5NmM2LDAsMTAsLTUsMTAsLTExbC0yLC0yM2MtMSwtNiwtNSwtMTAsXFxuLTExLC0xMGgtMWwtMTE2OCwyNzNsLTExNjcsLTI3M2gtMWMtNiwwLC0xMCw0LC0xMSwxMGwtMiwyM2MtMSw2LDQsMTEsMTAsMTF6XCIsXG4gIC8vIFRoZSBuZXh0IHRlbiBwYXRocyBzdXBwb3J0IHJlYWN0aW9uIGFycm93cyBmcm9tIHRoZSBtaGNoZW0gcGFja2FnZS5cbiAgLy8gQXJyb3dzIGZvciBcXGNlezwtLT59IGFyZSBvZmZzZXQgZnJvbSB4QXhpcyBieSAwLjIyZXgsIHBlciBtaGNoZW0gaW4gTGFUZVhcbiAgLy8gYmFyYWJvdmVsZWZ0YXJyb3cgaXMgbW9zdGx5IGZyb20gZnJvbSBnbHlwaCBVKzIxOTAgaW4gZm9udCBLYVRlWCBNYWluXG4gIGJhcmFib3ZlbGVmdGFycm93OiBcIk00MDAwMDAgNjIwaC0zOTk4OTBsMyAtM2M2OC43IC01Mi43IDExMy43IC0xMjAgMTM1IC0yMDJcXG5jNCAtMTQuNyA2IC0yMyA2IC0yNWMwIC03LjMgLTcgLTExIC0yMSAtMTFjLTggMCAtMTMuMiAwLjggLTE1LjUgMi41XFxuYy0yLjMgMS43IC00LjIgNS44IC01LjUgMTIuNWMtMS4zIDQuNyAtMi43IDEwLjMgLTQgMTdjLTEyIDQ4LjcgLTM0LjggOTIgLTY4LjUgMTMwXFxucy03NC4yIDY2LjMgLTEyMS41IDg1Yy0xMCA0IC0xNiA3LjcgLTE4IDExYzAgOC43IDYgMTQuMyAxOCAxN2M0Ny4zIDE4LjcgODcuOCA0N1xcbjEyMS41IDg1czU2LjUgODEuMyA2OC41IDEzMGMwLjcgMiAxLjMgNSAyIDlzMS4yIDYuNyAxLjUgOGMwLjMgMS4zIDEgMy4zIDIgNlxcbnMyLjIgNC41IDMuNSA1LjVjMS4zIDEgMy4zIDEuOCA2IDIuNXM2IDEgMTAgMWMxNCAwIDIxIC0zLjcgMjEgLTExXFxuYzAgLTIgLTIgLTEwLjMgLTYgLTI1Yy0yMCAtNzkuMyAtNjUgLTE0Ni43IC0xMzUgLTIwMmwtMyAtM2gzOTk4OTB6XFxuTTEwMCA2MjB2NDBoMzk5OTAwdi00MHogTTAgMjQxdjQwaDM5OTkwMHYtNDB6TTAgMjQxdjQwaDM5OTkwMHYtNDB6XCIsXG4gIC8vIHJpZ2h0YXJyb3dhYm92ZWJhciBpcyBtb3N0bHkgZnJvbSBnbHlwaCBVKzIxOTIsIEthVGVYIE1haW5cbiAgcmlnaHRhcnJvd2Fib3ZlYmFyOiBcIk0wIDI0MXY0MGgzOTk4OTFjLTQ3LjMgMzUuMy04NCA3OC0xMTAgMTI4LTE2LjcgMzJcXG4tMjcuNyA2My43LTMzIDk1IDAgMS4zLS4yIDIuNy0uNSA0LS4zIDEuMy0uNSAyLjMtLjUgMyAwIDcuMyA2LjcgMTEgMjAgMTEgOCAwXFxuMTMuMi0uOCAxNS41LTIuNSAyLjMtMS43IDQuMi01LjUgNS41LTExLjUgMi0xMy4zIDUuNy0yNyAxMS00MSAxNC43LTQ0LjcgMzlcXG4tODQuNSA3My0xMTkuNXM3My43LTYwLjIgMTE5LTc1LjVjNi0yIDktNS43IDktMTFzLTMtOS05LTExYy00NS4zLTE1LjMtODUtNDAuNVxcbi0xMTktNzUuNXMtNTguMy03NC44LTczLTExOS41Yy00LjctMTQtOC4zLTI3LjMtMTEtNDAtMS4zLTYuNy0zLjItMTAuOC01LjVcXG4tMTIuNS0yLjMtMS43LTcuNS0yLjUtMTUuNS0yLjUtMTQgMC0yMSAzLjctMjEgMTEgMCAyIDIgMTAuMyA2IDI1IDIwLjcgODMuMyA2N1xcbjE1MS43IDEzOSAyMDV6bTk2IDM3OWgzOTk4OTR2NDBIMHptMCAwaDM5OTkwNHY0MEgwelwiLFxuICAvLyBUaGUgc2hvcnQgbGVmdCBoYXJwb29uIGhhcyAwLjVlbSAoaS5lLiA1MDAgdW5pdHMpIGtlcm4gb24gdGhlIGxlZnQgZW5kLlxuICAvLyBSZWYgZnJvbSBtaGNoZW0uc3R5OiBcXHJsYXB7XFxyYWlzZWJveHstLjIyZXh9eyRcXGtlcm4wLjVlbVxuICBiYXJhYm92ZXNob3J0bGVmdGhhcnBvb246IFwiTTUwNyw0MzVjLTQsNCwtNi4zLDguNywtNywxNGMwLDUuMywwLjcsOSwyLDExXFxuYzEuMywyLDUuMyw1LjMsMTIsMTBjOTAuNyw1NCwxNTYsMTMwLDE5NiwyMjhjMy4zLDEwLjcsNi4zLDE2LjMsOSwxN1xcbmMyLDAuNyw1LDEsOSwxYzAsMCw1LDAsNSwwYzEwLjcsMCwxNi43LC0yLDE4LC02YzIsLTIuNywxLC05LjcsLTMsLTIxXFxuYy0zMiwtODcuMywtODIuNywtMTU3LjcsLTE1MiwtMjExYzAsMCwtMywtMywtMywtM2wzOTkzNTEsMGwwLC00MFxcbmMtMzk4NTcwLDAsLTM5OTQzNywwLC0zOTk0MzcsMHogTTU5MyA0MzUgdjQwIEgzOTk1MDAgdi00MHpcXG5NMCAyODEgdi00MCBIMzk5OTA4IHY0MHogTTAgMjgxIHYtNDAgSDM5OTkwOCB2NDB6XCIsXG4gIHJpZ2h0aGFycG9vbmFib3Zlc2hvcnRiYXI6IFwiTTAsMjQxIGwwLDQwYzM5OTEyNiwwLDM5OTk5MywwLDM5OTk5MywwXFxuYzQuNywtNC43LDcsLTkuMyw3LC0xNGMwLC05LjMsLTMuNywtMTUuMywtMTEsLTE4Yy05Mi43LC01Ni43LC0xNTksLTEzMy43LC0xOTksXFxuLTIzMWMtMy4zLC05LjMsLTYsLTE0LjcsLTgsLTE2Yy0yLC0xLjMsLTcsLTIsLTE1LC0yYy0xMC43LDAsLTE2LjcsMiwtMTgsNlxcbmMtMiwyLjcsLTEsOS43LDMsMjFjMTUuMyw0MiwzNi43LDgxLjgsNjQsMTE5LjVjMjcuMywzNy43LDU4LDY5LjIsOTIsOTQuNXpcXG5NMCAyNDEgdjQwIEgzOTk5MDggdi00MHogTTAgNDc1IHYtNDAgSDM5OTUwMCB2NDB6IE0wIDQ3NSB2LTQwIEgzOTk1MDAgdjQwelwiLFxuICBzaG9ydGJhcmFib3ZlbGVmdGhhcnBvb246IFwiTTcsNDM1Yy00LDQsLTYuMyw4LjcsLTcsMTRjMCw1LjMsMC43LDksMiwxMVxcbmMxLjMsMiw1LjMsNS4zLDEyLDEwYzkwLjcsNTQsMTU2LDEzMCwxOTYsMjI4YzMuMywxMC43LDYuMywxNi4zLDksMTdjMiwwLjcsNSwxLDksXFxuMWMwLDAsNSwwLDUsMGMxMC43LDAsMTYuNywtMiwxOCwtNmMyLC0yLjcsMSwtOS43LC0zLC0yMWMtMzIsLTg3LjMsLTgyLjcsLTE1Ny43LFxcbi0xNTIsLTIxMWMwLDAsLTMsLTMsLTMsLTNsMzk5OTA3LDBsMCwtNDBjLTM5OTEyNiwwLC0zOTk5OTMsMCwtMzk5OTkzLDB6XFxuTTkzIDQzNSB2NDAgSDQwMDAwMCB2LTQweiBNNTAwIDI0MSB2NDAgSDQwMDAwMCB2LTQweiBNNTAwIDI0MSB2NDAgSDQwMDAwMCB2LTQwelwiLFxuICBzaG9ydHJpZ2h0aGFycG9vbmFib3ZlYmFyOiBcIk01MywyNDFsMCw0MGMzOTg1NzAsMCwzOTk0MzcsMCwzOTk0MzcsMFxcbmM0LjcsLTQuNyw3LC05LjMsNywtMTRjMCwtOS4zLC0zLjcsLTE1LjMsLTExLC0xOGMtOTIuNywtNTYuNywtMTU5LC0xMzMuNywtMTk5LFxcbi0yMzFjLTMuMywtOS4zLC02LC0xNC43LC04LC0xNmMtMiwtMS4zLC03LC0yLC0xNSwtMmMtMTAuNywwLC0xNi43LDIsLTE4LDZcXG5jLTIsMi43LC0xLDkuNywzLDIxYzE1LjMsNDIsMzYuNyw4MS44LDY0LDExOS41YzI3LjMsMzcuNyw1OCw2OS4yLDkyLDk0LjV6XFxuTTUwMCAyNDEgdjQwIEgzOTk0MDggdi00MHogTTUwMCA0MzUgdjQwIEg0MDAwMDAgdi00MHpcIlxufTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy90cmVlLmpzXG5cblxuLyoqXG4gKiBUaGlzIG5vZGUgcmVwcmVzZW50cyBhIGRvY3VtZW50IGZyYWdtZW50LCB3aGljaCBjb250YWlucyBlbGVtZW50cywgYnV0IHdoZW5cbiAqIHBsYWNlZCBpbnRvIHRoZSBET00gZG9lc24ndCBoYXZlIGFueSByZXByZXNlbnRhdGlvbiBpdHNlbGYuIEl0IG9ubHkgY29udGFpbnNcbiAqIGNoaWxkcmVuIGFuZCBkb2Vzbid0IGhhdmUgYW55IERPTSBub2RlIHByb3BlcnRpZXMuXG4gKi9cbnZhciBEb2N1bWVudEZyYWdtZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLy8gSHRtbERvbU5vZGVcbiAgLy8gTmV2ZXIgdXNlZDsgbmVlZGVkIGZvciBzYXRpc2Z5aW5nIGludGVyZmFjZS5cbiAgZnVuY3Rpb24gRG9jdW1lbnRGcmFnbWVudChjaGlsZHJlbikge1xuICAgIHRoaXMuY2hpbGRyZW4gPSB2b2lkIDA7XG4gICAgdGhpcy5jbGFzc2VzID0gdm9pZCAwO1xuICAgIHRoaXMuaGVpZ2h0ID0gdm9pZCAwO1xuICAgIHRoaXMuZGVwdGggPSB2b2lkIDA7XG4gICAgdGhpcy5tYXhGb250U2l6ZSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB0aGlzLmNsYXNzZXMgPSBbXTtcbiAgICB0aGlzLmhlaWdodCA9IDA7XG4gICAgdGhpcy5kZXB0aCA9IDA7XG4gICAgdGhpcy5tYXhGb250U2l6ZSA9IDA7XG4gICAgdGhpcy5zdHlsZSA9IHt9O1xuICB9XG5cbiAgdmFyIF9wcm90byA9IERvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlO1xuXG4gIF9wcm90by5oYXNDbGFzcyA9IGZ1bmN0aW9uIGhhc0NsYXNzKGNsYXNzTmFtZSkge1xuICAgIHJldHVybiB1dGlscy5jb250YWlucyh0aGlzLmNsYXNzZXMsIGNsYXNzTmFtZSk7XG4gIH1cbiAgLyoqIENvbnZlcnQgdGhlIGZyYWdtZW50IGludG8gYSBub2RlLiAqL1xuICA7XG5cbiAgX3Byb3RvLnRvTm9kZSA9IGZ1bmN0aW9uIHRvTm9kZSgpIHtcbiAgICB2YXIgZnJhZyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgZnJhZy5hcHBlbmRDaGlsZCh0aGlzLmNoaWxkcmVuW2ldLnRvTm9kZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnJhZztcbiAgfVxuICAvKiogQ29udmVydCB0aGUgZnJhZ21lbnQgaW50byBIVE1MIG1hcmt1cC4gKi9cbiAgO1xuXG4gIF9wcm90by50b01hcmt1cCA9IGZ1bmN0aW9uIHRvTWFya3VwKCkge1xuICAgIHZhciBtYXJrdXAgPSBcIlwiOyAvLyBTaW1wbHkgY29uY2F0ZW5hdGUgdGhlIG1hcmt1cCBmb3IgdGhlIGNoaWxkcmVuIHRvZ2V0aGVyLlxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBtYXJrdXAgKz0gdGhpcy5jaGlsZHJlbltpXS50b01hcmt1cCgpO1xuICAgIH1cblxuICAgIHJldHVybiBtYXJrdXA7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnRzIHRoZSBtYXRoIG5vZGUgaW50byBhIHN0cmluZywgc2ltaWxhciB0byBpbm5lclRleHQuIEFwcGxpZXMgdG9cbiAgICogTWF0aERvbU5vZGUncyBvbmx5LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1RleHQgPSBmdW5jdGlvbiB0b1RleHQoKSB7XG4gICAgLy8gVG8gYXZvaWQgdGhpcywgd2Ugd291bGQgc3ViY2xhc3MgZG9jdW1lbnRGcmFnbWVudCBzZXBhcmF0ZWx5IGZvclxuICAgIC8vIE1hdGhNTCwgYnV0IHBvbHlmaWxscyBmb3Igc3ViY2xhc3NpbmcgaXMgZXhwZW5zaXZlIHBlciBQUiAxNDY5LlxuICAgIC8vICRGbG93Rml4TWU6IE9ubHkgd29ya3MgZm9yIENoaWxkVHlwZSA9IE1hdGhEb21Ob2RlLlxuICAgIHZhciB0b1RleHQgPSBmdW5jdGlvbiB0b1RleHQoY2hpbGQpIHtcbiAgICAgIHJldHVybiBjaGlsZC50b1RleHQoKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4ubWFwKHRvVGV4dCkuam9pbihcIlwiKTtcbiAgfTtcblxuICByZXR1cm4gRG9jdW1lbnRGcmFnbWVudDtcbn0oKTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9kb21UcmVlLmpzXG4vKipcbiAqIFRoZXNlIG9iamVjdHMgc3RvcmUgdGhlIGRhdGEgYWJvdXQgdGhlIERPTSBub2RlcyB3ZSBjcmVhdGUsIGFzIHdlbGwgYXMgc29tZVxuICogZXh0cmEgZGF0YS4gVGhleSBjYW4gdGhlbiBiZSB0cmFuc2Zvcm1lZCBpbnRvIHJlYWwgRE9NIG5vZGVzIHdpdGggdGhlXG4gKiBgdG9Ob2RlYCBmdW5jdGlvbiBvciBIVE1MIG1hcmt1cCB1c2luZyBgdG9NYXJrdXBgLiBUaGV5IGFyZSB1c2VmdWwgZm9yIGJvdGhcbiAqIHN0b3JpbmcgZXh0cmEgcHJvcGVydGllcyBvbiB0aGUgbm9kZXMsIGFzIHdlbGwgYXMgcHJvdmlkaW5nIGEgd2F5IHRvIGVhc2lseVxuICogd29yayB3aXRoIHRoZSBET00uXG4gKlxuICogU2ltaWxhciBmdW5jdGlvbnMgZm9yIHdvcmtpbmcgd2l0aCBNYXRoTUwgbm9kZXMgZXhpc3QgaW4gbWF0aE1MVHJlZS5qcy5cbiAqXG4gKiBUT0RPOiByZWZhY3RvciBgc3BhbmAgYW5kIGBhbmNob3JgIGludG8gY29tbW9uIHN1cGVyY2xhc3Mgd2hlblxuICogdGFyZ2V0IGVudmlyb25tZW50cyBzdXBwb3J0IGNsYXNzIGluaGVyaXRhbmNlXG4gKi9cblxuXG5cblxuXG4vKipcbiAqIENyZWF0ZSBhbiBIVE1MIGNsYXNzTmFtZSBiYXNlZCBvbiBhIGxpc3Qgb2YgY2xhc3Nlcy4gSW4gYWRkaXRpb24gdG8gam9pbmluZ1xuICogd2l0aCBzcGFjZXMsIHdlIGFsc28gcmVtb3ZlIGVtcHR5IGNsYXNzZXMuXG4gKi9cbnZhciBjcmVhdGVDbGFzcyA9IGZ1bmN0aW9uIGNyZWF0ZUNsYXNzKGNsYXNzZXMpIHtcbiAgcmV0dXJuIGNsYXNzZXMuZmlsdGVyKGZ1bmN0aW9uIChjbHMpIHtcbiAgICByZXR1cm4gY2xzO1xuICB9KS5qb2luKFwiIFwiKTtcbn07XG5cbnZhciBpbml0Tm9kZSA9IGZ1bmN0aW9uIGluaXROb2RlKGNsYXNzZXMsIG9wdGlvbnMsIHN0eWxlKSB7XG4gIHRoaXMuY2xhc3NlcyA9IGNsYXNzZXMgfHwgW107XG4gIHRoaXMuYXR0cmlidXRlcyA9IHt9O1xuICB0aGlzLmhlaWdodCA9IDA7XG4gIHRoaXMuZGVwdGggPSAwO1xuICB0aGlzLm1heEZvbnRTaXplID0gMDtcbiAgdGhpcy5zdHlsZSA9IHN0eWxlIHx8IHt9O1xuXG4gIGlmIChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMuc3R5bGUuaXNUaWdodCgpKSB7XG4gICAgICB0aGlzLmNsYXNzZXMucHVzaChcIm10aWdodFwiKTtcbiAgICB9XG5cbiAgICB2YXIgY29sb3IgPSBvcHRpb25zLmdldENvbG9yKCk7XG5cbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIHRoaXMuc3R5bGUuY29sb3IgPSBjb2xvcjtcbiAgICB9XG4gIH1cbn07XG4vKipcbiAqIENvbnZlcnQgaW50byBhbiBIVE1MIG5vZGVcbiAqL1xuXG5cbnZhciBfdG9Ob2RlID0gZnVuY3Rpb24gdG9Ob2RlKHRhZ05hbWUpIHtcbiAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpOyAvLyBBcHBseSB0aGUgY2xhc3NcblxuICBub2RlLmNsYXNzTmFtZSA9IGNyZWF0ZUNsYXNzKHRoaXMuY2xhc3Nlcyk7IC8vIEFwcGx5IGlubGluZSBzdHlsZXNcblxuICBmb3IgKHZhciBzdHlsZSBpbiB0aGlzLnN0eWxlKSB7XG4gICAgaWYgKHRoaXMuc3R5bGUuaGFzT3duUHJvcGVydHkoc3R5bGUpKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lIEZsb3cgZG9lc24ndCBzZWVtIHRvIHVuZGVyc3RhbmQgc3Bhbi5zdHlsZSdzIHR5cGUuXG4gICAgICBub2RlLnN0eWxlW3N0eWxlXSA9IHRoaXMuc3R5bGVbc3R5bGVdO1xuICAgIH1cbiAgfSAvLyBBcHBseSBhdHRyaWJ1dGVzXG5cblxuICBmb3IgKHZhciBhdHRyIGluIHRoaXMuYXR0cmlidXRlcykge1xuICAgIGlmICh0aGlzLmF0dHJpYnV0ZXMuaGFzT3duUHJvcGVydHkoYXR0cikpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHIsIHRoaXMuYXR0cmlidXRlc1thdHRyXSk7XG4gICAgfVxuICB9IC8vIEFwcGVuZCB0aGUgY2hpbGRyZW4sIGFsc28gYXMgSFRNTCBub2Rlc1xuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgbm9kZS5hcHBlbmRDaGlsZCh0aGlzLmNoaWxkcmVuW2ldLnRvTm9kZSgpKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufTtcbi8qKlxuICogQ29udmVydCBpbnRvIGFuIEhUTUwgbWFya3VwIHN0cmluZ1xuICovXG5cblxudmFyIF90b01hcmt1cCA9IGZ1bmN0aW9uIHRvTWFya3VwKHRhZ05hbWUpIHtcbiAgdmFyIG1hcmt1cCA9IFwiPFwiICsgdGFnTmFtZTsgLy8gQWRkIHRoZSBjbGFzc1xuXG4gIGlmICh0aGlzLmNsYXNzZXMubGVuZ3RoKSB7XG4gICAgbWFya3VwICs9IFwiIGNsYXNzPVxcXCJcIiArIHV0aWxzLmVzY2FwZShjcmVhdGVDbGFzcyh0aGlzLmNsYXNzZXMpKSArIFwiXFxcIlwiO1xuICB9XG5cbiAgdmFyIHN0eWxlcyA9IFwiXCI7IC8vIEFkZCB0aGUgc3R5bGVzLCBhZnRlciBoeXBoZW5hdGlvblxuXG4gIGZvciAodmFyIHN0eWxlIGluIHRoaXMuc3R5bGUpIHtcbiAgICBpZiAodGhpcy5zdHlsZS5oYXNPd25Qcm9wZXJ0eShzdHlsZSkpIHtcbiAgICAgIHN0eWxlcyArPSB1dGlscy5oeXBoZW5hdGUoc3R5bGUpICsgXCI6XCIgKyB0aGlzLnN0eWxlW3N0eWxlXSArIFwiO1wiO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdHlsZXMpIHtcbiAgICBtYXJrdXAgKz0gXCIgc3R5bGU9XFxcIlwiICsgdXRpbHMuZXNjYXBlKHN0eWxlcykgKyBcIlxcXCJcIjtcbiAgfSAvLyBBZGQgdGhlIGF0dHJpYnV0ZXNcblxuXG4gIGZvciAodmFyIGF0dHIgaW4gdGhpcy5hdHRyaWJ1dGVzKSB7XG4gICAgaWYgKHRoaXMuYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShhdHRyKSkge1xuICAgICAgbWFya3VwICs9IFwiIFwiICsgYXR0ciArIFwiPVxcXCJcIiArIHV0aWxzLmVzY2FwZSh0aGlzLmF0dHJpYnV0ZXNbYXR0cl0pICsgXCJcXFwiXCI7XG4gICAgfVxuICB9XG5cbiAgbWFya3VwICs9IFwiPlwiOyAvLyBBZGQgdGhlIG1hcmt1cCBvZiB0aGUgY2hpbGRyZW4sIGFsc28gYXMgbWFya3VwXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgbWFya3VwICs9IHRoaXMuY2hpbGRyZW5baV0udG9NYXJrdXAoKTtcbiAgfVxuXG4gIG1hcmt1cCArPSBcIjwvXCIgKyB0YWdOYW1lICsgXCI+XCI7XG4gIHJldHVybiBtYXJrdXA7XG59OyAvLyBNYWtpbmcgdGhlIHR5cGUgYmVsb3cgZXhhY3Qgd2l0aCBhbGwgb3B0aW9uYWwgZmllbGRzIGRvZXNuJ3Qgd29yayBkdWUgdG9cbi8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzQ1ODJcbi8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzU2ODhcbi8vIEhvd2V2ZXIsIHNpbmNlICphbGwqIGZpZWxkcyBhcmUgb3B0aW9uYWwsICRTaGFwZTw+IHdvcmtzIGFzIHN1Z2dlc3RlZCBpbiA1Njg4XG4vLyBhYm92ZS5cbi8vIFRoaXMgdHlwZSBkb2VzIG5vdCBpbmNsdWRlIGFsbCBDU1MgcHJvcGVydGllcy4gQWRkaXRpb25hbCBwcm9wZXJ0aWVzIHNob3VsZFxuLy8gYmUgYWRkZWQgYXMgbmVlZGVkLlxuXG5cbi8qKlxuICogVGhpcyBub2RlIHJlcHJlc2VudHMgYSBzcGFuIG5vZGUsIHdpdGggYSBjbGFzc05hbWUsIGEgbGlzdCBvZiBjaGlsZHJlbiwgYW5kXG4gKiBhbiBpbmxpbmUgc3R5bGUuIEl0IGFsc28gY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgaXRzIGhlaWdodCwgZGVwdGgsIGFuZFxuICogbWF4Rm9udFNpemUuXG4gKlxuICogUmVwcmVzZW50cyB0d28gdHlwZXMgd2l0aCBkaWZmZXJlbnQgdXNlczogU3ZnU3BhbiB0byB3cmFwIGFuIFNWRyBhbmQgRG9tU3BhblxuICogb3RoZXJ3aXNlLiBUaGlzIHR5cGVzYWZldHkgaXMgaW1wb3J0YW50IHdoZW4gSFRNTCBidWlsZGVycyBhY2Nlc3MgYSBzcGFuJ3NcbiAqIGNoaWxkcmVuLlxuICovXG52YXIgU3BhbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNwYW4oY2xhc3NlcywgY2hpbGRyZW4sIG9wdGlvbnMsIHN0eWxlKSB7XG4gICAgdGhpcy5jaGlsZHJlbiA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5jbGFzc2VzID0gdm9pZCAwO1xuICAgIHRoaXMuaGVpZ2h0ID0gdm9pZCAwO1xuICAgIHRoaXMuZGVwdGggPSB2b2lkIDA7XG4gICAgdGhpcy53aWR0aCA9IHZvaWQgMDtcbiAgICB0aGlzLm1heEZvbnRTaXplID0gdm9pZCAwO1xuICAgIHRoaXMuc3R5bGUgPSB2b2lkIDA7XG4gICAgaW5pdE5vZGUuY2FsbCh0aGlzLCBjbGFzc2VzLCBvcHRpb25zLCBzdHlsZSk7XG4gICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuIHx8IFtdO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIGFuIGFyYml0cmFyeSBhdHRyaWJ1dGUgb24gdGhlIHNwYW4uIFdhcm5pbmc6IHVzZSB0aGlzIHdpc2VseS4gTm90XG4gICAqIGFsbCBicm93c2VycyBzdXBwb3J0IGF0dHJpYnV0ZXMgdGhlIHNhbWUsIGFuZCBoYXZpbmcgdG9vIG1hbnkgY3VzdG9tXG4gICAqIGF0dHJpYnV0ZXMgaXMgcHJvYmFibHkgYmFkLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBTcGFuLnByb3RvdHlwZTtcblxuICBfcHJvdG8uc2V0QXR0cmlidXRlID0gZnVuY3Rpb24gc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICB0aGlzLmF0dHJpYnV0ZXNbYXR0cmlidXRlXSA9IHZhbHVlO1xuICB9O1xuXG4gIF9wcm90by5oYXNDbGFzcyA9IGZ1bmN0aW9uIGhhc0NsYXNzKGNsYXNzTmFtZSkge1xuICAgIHJldHVybiB1dGlscy5jb250YWlucyh0aGlzLmNsYXNzZXMsIGNsYXNzTmFtZSk7XG4gIH07XG5cbiAgX3Byb3RvLnRvTm9kZSA9IGZ1bmN0aW9uIHRvTm9kZSgpIHtcbiAgICByZXR1cm4gX3RvTm9kZS5jYWxsKHRoaXMsIFwic3BhblwiKTtcbiAgfTtcblxuICBfcHJvdG8udG9NYXJrdXAgPSBmdW5jdGlvbiB0b01hcmt1cCgpIHtcbiAgICByZXR1cm4gX3RvTWFya3VwLmNhbGwodGhpcywgXCJzcGFuXCIpO1xuICB9O1xuXG4gIHJldHVybiBTcGFuO1xufSgpO1xuLyoqXG4gKiBUaGlzIG5vZGUgcmVwcmVzZW50cyBhbiBhbmNob3IgKDxhPikgZWxlbWVudCB3aXRoIGEgaHlwZXJsaW5rLiAgU2VlIGBzcGFuYFxuICogZm9yIGZ1cnRoZXIgZGV0YWlscy5cbiAqL1xuXG52YXIgQW5jaG9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQW5jaG9yKGhyZWYsIGNsYXNzZXMsIGNoaWxkcmVuLCBvcHRpb25zKSB7XG4gICAgdGhpcy5jaGlsZHJlbiA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5jbGFzc2VzID0gdm9pZCAwO1xuICAgIHRoaXMuaGVpZ2h0ID0gdm9pZCAwO1xuICAgIHRoaXMuZGVwdGggPSB2b2lkIDA7XG4gICAgdGhpcy5tYXhGb250U2l6ZSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIGluaXROb2RlLmNhbGwodGhpcywgY2xhc3Nlcywgb3B0aW9ucyk7XG4gICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuIHx8IFtdO1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gIH1cblxuICB2YXIgX3Byb3RvMiA9IEFuY2hvci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMi5zZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbiBzZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgIHRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGVdID0gdmFsdWU7XG4gIH07XG5cbiAgX3Byb3RvMi5oYXNDbGFzcyA9IGZ1bmN0aW9uIGhhc0NsYXNzKGNsYXNzTmFtZSkge1xuICAgIHJldHVybiB1dGlscy5jb250YWlucyh0aGlzLmNsYXNzZXMsIGNsYXNzTmFtZSk7XG4gIH07XG5cbiAgX3Byb3RvMi50b05vZGUgPSBmdW5jdGlvbiB0b05vZGUoKSB7XG4gICAgcmV0dXJuIF90b05vZGUuY2FsbCh0aGlzLCBcImFcIik7XG4gIH07XG5cbiAgX3Byb3RvMi50b01hcmt1cCA9IGZ1bmN0aW9uIHRvTWFya3VwKCkge1xuICAgIHJldHVybiBfdG9NYXJrdXAuY2FsbCh0aGlzLCBcImFcIik7XG4gIH07XG5cbiAgcmV0dXJuIEFuY2hvcjtcbn0oKTtcbi8qKlxuICogVGhpcyBub2RlIHJlcHJlc2VudHMgYW4gaW1hZ2UgZW1iZWQgKDxpbWc+KSBlbGVtZW50LlxuICovXG5cbnZhciBJbWcgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBJbWcoc3JjLCBhbHQsIHN0eWxlKSB7XG4gICAgdGhpcy5zcmMgPSB2b2lkIDA7XG4gICAgdGhpcy5hbHQgPSB2b2lkIDA7XG4gICAgdGhpcy5jbGFzc2VzID0gdm9pZCAwO1xuICAgIHRoaXMuaGVpZ2h0ID0gdm9pZCAwO1xuICAgIHRoaXMuZGVwdGggPSB2b2lkIDA7XG4gICAgdGhpcy5tYXhGb250U2l6ZSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMuYWx0ID0gYWx0O1xuICAgIHRoaXMuc3JjID0gc3JjO1xuICAgIHRoaXMuY2xhc3NlcyA9IFtcIm1vcmRcIl07XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICB9XG5cbiAgdmFyIF9wcm90bzMgPSBJbWcucHJvdG90eXBlO1xuXG4gIF9wcm90bzMuaGFzQ2xhc3MgPSBmdW5jdGlvbiBoYXNDbGFzcyhjbGFzc05hbWUpIHtcbiAgICByZXR1cm4gdXRpbHMuY29udGFpbnModGhpcy5jbGFzc2VzLCBjbGFzc05hbWUpO1xuICB9O1xuXG4gIF9wcm90bzMudG9Ob2RlID0gZnVuY3Rpb24gdG9Ob2RlKCkge1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICBub2RlLnNyYyA9IHRoaXMuc3JjO1xuICAgIG5vZGUuYWx0ID0gdGhpcy5hbHQ7XG4gICAgbm9kZS5jbGFzc05hbWUgPSBcIm1vcmRcIjsgLy8gQXBwbHkgaW5saW5lIHN0eWxlc1xuXG4gICAgZm9yICh2YXIgc3R5bGUgaW4gdGhpcy5zdHlsZSkge1xuICAgICAgaWYgKHRoaXMuc3R5bGUuaGFzT3duUHJvcGVydHkoc3R5bGUpKSB7XG4gICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgbm9kZS5zdHlsZVtzdHlsZV0gPSB0aGlzLnN0eWxlW3N0eWxlXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICBfcHJvdG8zLnRvTWFya3VwID0gZnVuY3Rpb24gdG9NYXJrdXAoKSB7XG4gICAgdmFyIG1hcmt1cCA9IFwiPGltZyAgc3JjPSdcIiArIHRoaXMuc3JjICsgXCIgJ2FsdD0nXCIgKyB0aGlzLmFsdCArIFwiJyBcIjsgLy8gQWRkIHRoZSBzdHlsZXMsIGFmdGVyIGh5cGhlbmF0aW9uXG5cbiAgICB2YXIgc3R5bGVzID0gXCJcIjtcblxuICAgIGZvciAodmFyIHN0eWxlIGluIHRoaXMuc3R5bGUpIHtcbiAgICAgIGlmICh0aGlzLnN0eWxlLmhhc093blByb3BlcnR5KHN0eWxlKSkge1xuICAgICAgICBzdHlsZXMgKz0gdXRpbHMuaHlwaGVuYXRlKHN0eWxlKSArIFwiOlwiICsgdGhpcy5zdHlsZVtzdHlsZV0gKyBcIjtcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3R5bGVzKSB7XG4gICAgICBtYXJrdXAgKz0gXCIgc3R5bGU9XFxcIlwiICsgdXRpbHMuZXNjYXBlKHN0eWxlcykgKyBcIlxcXCJcIjtcbiAgICB9XG5cbiAgICBtYXJrdXAgKz0gXCInLz5cIjtcbiAgICByZXR1cm4gbWFya3VwO1xuICB9O1xuXG4gIHJldHVybiBJbWc7XG59KCk7XG52YXIgaUNvbWJpbmF0aW9ucyA9IHtcbiAgJ8OuJzogXCJcXHUwMTMxXFx1MDMwMlwiLFxuICAnw68nOiBcIlxcdTAxMzFcXHUwMzA4XCIsXG4gICfDrSc6IFwiXFx1MDEzMVxcdTAzMDFcIixcbiAgLy8gJ8SrJzogJ1xcdTAxMzFcXHUwMzA0JywgLy8gZW5hYmxlIHdoZW4gd2UgYWRkIEV4dGVuZGVkIExhdGluXG4gICfDrCc6IFwiXFx1MDEzMVxcdTAzMDBcIlxufTtcbi8qKlxuICogQSBzeW1ib2wgbm9kZSBjb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCBhIHNpbmdsZSBzeW1ib2wuIEl0IGVpdGhlciByZW5kZXJzXG4gKiB0byBhIHNpbmdsZSB0ZXh0IG5vZGUsIG9yIGEgc3BhbiB3aXRoIGEgc2luZ2xlIHRleHQgbm9kZSBpbiBpdCwgZGVwZW5kaW5nIG9uXG4gKiB3aGV0aGVyIGl0IGhhcyBDU1MgY2xhc3Nlcywgc3R5bGVzLCBvciBuZWVkcyBpdGFsaWMgY29ycmVjdGlvbi5cbiAqL1xuXG52YXIgU3ltYm9sTm9kZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN5bWJvbE5vZGUodGV4dCwgaGVpZ2h0LCBkZXB0aCwgaXRhbGljLCBza2V3LCB3aWR0aCwgY2xhc3Nlcywgc3R5bGUpIHtcbiAgICB0aGlzLnRleHQgPSB2b2lkIDA7XG4gICAgdGhpcy5oZWlnaHQgPSB2b2lkIDA7XG4gICAgdGhpcy5kZXB0aCA9IHZvaWQgMDtcbiAgICB0aGlzLml0YWxpYyA9IHZvaWQgMDtcbiAgICB0aGlzLnNrZXcgPSB2b2lkIDA7XG4gICAgdGhpcy53aWR0aCA9IHZvaWQgMDtcbiAgICB0aGlzLm1heEZvbnRTaXplID0gdm9pZCAwO1xuICAgIHRoaXMuY2xhc3NlcyA9IHZvaWQgMDtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQgfHwgMDtcbiAgICB0aGlzLmRlcHRoID0gZGVwdGggfHwgMDtcbiAgICB0aGlzLml0YWxpYyA9IGl0YWxpYyB8fCAwO1xuICAgIHRoaXMuc2tldyA9IHNrZXcgfHwgMDtcbiAgICB0aGlzLndpZHRoID0gd2lkdGggfHwgMDtcbiAgICB0aGlzLmNsYXNzZXMgPSBjbGFzc2VzIHx8IFtdO1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZSB8fCB7fTtcbiAgICB0aGlzLm1heEZvbnRTaXplID0gMDsgLy8gTWFyayB0ZXh0IGZyb20gbm9uLUxhdGluIHNjcmlwdHMgd2l0aCBzcGVjaWZpYyBjbGFzc2VzIHNvIHRoYXQgd2VcbiAgICAvLyBjYW4gc3BlY2lmeSB3aGljaCBmb250cyB0byB1c2UuICBUaGlzIGFsbG93cyB1cyB0byByZW5kZXIgdGhlc2VcbiAgICAvLyBjaGFyYWN0ZXJzIHdpdGggYSBzZXJpZiBmb250IGluIHNpdHVhdGlvbnMgd2hlcmUgdGhlIGJyb3dzZXIgd291bGRcbiAgICAvLyBlaXRoZXIgZGVmYXVsdCB0byBhIHNhbnMgc2VyaWYgb3IgcmVuZGVyIGEgcGxhY2Vob2xkZXIgY2hhcmFjdGVyLlxuICAgIC8vIFdlIHVzZSBDU1MgY2xhc3MgbmFtZXMgbGlrZSBjamtfZmFsbGJhY2ssIGhhbmd1bF9mYWxsYmFjayBhbmRcbiAgICAvLyBicmFobWljX2ZhbGxiYWNrLiBTZWUgLi91bmljb2RlU2NyaXB0cy5qcyBmb3IgdGhlIHNldCBvZiBwb3NzaWJsZVxuICAgIC8vIHNjcmlwdCBuYW1lc1xuXG4gICAgdmFyIHNjcmlwdCA9IHNjcmlwdEZyb21Db2RlcG9pbnQodGhpcy50ZXh0LmNoYXJDb2RlQXQoMCkpO1xuXG4gICAgaWYgKHNjcmlwdCkge1xuICAgICAgdGhpcy5jbGFzc2VzLnB1c2goc2NyaXB0ICsgXCJfZmFsbGJhY2tcIik7XG4gICAgfVxuXG4gICAgaWYgKC9bw67Dr8Otw6xdLy50ZXN0KHRoaXMudGV4dCkpIHtcbiAgICAgIC8vIGFkZCDEqyB3aGVuIHdlIGFkZCBFeHRlbmRlZCBMYXRpblxuICAgICAgdGhpcy50ZXh0ID0gaUNvbWJpbmF0aW9uc1t0aGlzLnRleHRdO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfcHJvdG80ID0gU3ltYm9sTm9kZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNC5oYXNDbGFzcyA9IGZ1bmN0aW9uIGhhc0NsYXNzKGNsYXNzTmFtZSkge1xuICAgIHJldHVybiB1dGlscy5jb250YWlucyh0aGlzLmNsYXNzZXMsIGNsYXNzTmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB0ZXh0IG5vZGUgb3Igc3BhbiBmcm9tIGEgc3ltYm9sIG5vZGUuIE5vdGUgdGhhdCBhIHNwYW4gaXMgb25seVxuICAgKiBjcmVhdGVkIGlmIGl0IGlzIG5lZWRlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG80LnRvTm9kZSA9IGZ1bmN0aW9uIHRvTm9kZSgpIHtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMudGV4dCk7XG4gICAgdmFyIHNwYW4gPSBudWxsO1xuXG4gICAgaWYgKHRoaXMuaXRhbGljID4gMCkge1xuICAgICAgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgc3Bhbi5zdHlsZS5tYXJnaW5SaWdodCA9IHRoaXMuaXRhbGljICsgXCJlbVwiO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNsYXNzZXMubGVuZ3RoID4gMCkge1xuICAgICAgc3BhbiA9IHNwYW4gfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICBzcGFuLmNsYXNzTmFtZSA9IGNyZWF0ZUNsYXNzKHRoaXMuY2xhc3Nlcyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgc3R5bGUgaW4gdGhpcy5zdHlsZSkge1xuICAgICAgaWYgKHRoaXMuc3R5bGUuaGFzT3duUHJvcGVydHkoc3R5bGUpKSB7XG4gICAgICAgIHNwYW4gPSBzcGFuIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpOyAvLyAkRmxvd0ZpeE1lIEZsb3cgZG9lc24ndCBzZWVtIHRvIHVuZGVyc3RhbmQgc3Bhbi5zdHlsZSdzIHR5cGUuXG5cbiAgICAgICAgc3Bhbi5zdHlsZVtzdHlsZV0gPSB0aGlzLnN0eWxlW3N0eWxlXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3Bhbikge1xuICAgICAgc3Bhbi5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgIHJldHVybiBzcGFuO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgbWFya3VwIGZvciBhIHN5bWJvbCBub2RlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzQudG9NYXJrdXAgPSBmdW5jdGlvbiB0b01hcmt1cCgpIHtcbiAgICAvLyBUT0RPKGFscGVydCk6IE1vcmUgZHVwbGljYXRpb24gdGhhbiBJJ2QgbGlrZSBmcm9tXG4gICAgLy8gc3Bhbi5wcm90b3R5cGUudG9NYXJrdXAgYW5kIHN5bWJvbE5vZGUucHJvdG90eXBlLnRvTm9kZS4uLlxuICAgIHZhciBuZWVkc1NwYW4gPSBmYWxzZTtcbiAgICB2YXIgbWFya3VwID0gXCI8c3BhblwiO1xuXG4gICAgaWYgKHRoaXMuY2xhc3Nlcy5sZW5ndGgpIHtcbiAgICAgIG5lZWRzU3BhbiA9IHRydWU7XG4gICAgICBtYXJrdXAgKz0gXCIgY2xhc3M9XFxcIlwiO1xuICAgICAgbWFya3VwICs9IHV0aWxzLmVzY2FwZShjcmVhdGVDbGFzcyh0aGlzLmNsYXNzZXMpKTtcbiAgICAgIG1hcmt1cCArPSBcIlxcXCJcIjtcbiAgICB9XG5cbiAgICB2YXIgc3R5bGVzID0gXCJcIjtcblxuICAgIGlmICh0aGlzLml0YWxpYyA+IDApIHtcbiAgICAgIHN0eWxlcyArPSBcIm1hcmdpbi1yaWdodDpcIiArIHRoaXMuaXRhbGljICsgXCJlbTtcIjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBzdHlsZSBpbiB0aGlzLnN0eWxlKSB7XG4gICAgICBpZiAodGhpcy5zdHlsZS5oYXNPd25Qcm9wZXJ0eShzdHlsZSkpIHtcbiAgICAgICAgc3R5bGVzICs9IHV0aWxzLmh5cGhlbmF0ZShzdHlsZSkgKyBcIjpcIiArIHRoaXMuc3R5bGVbc3R5bGVdICsgXCI7XCI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0eWxlcykge1xuICAgICAgbmVlZHNTcGFuID0gdHJ1ZTtcbiAgICAgIG1hcmt1cCArPSBcIiBzdHlsZT1cXFwiXCIgKyB1dGlscy5lc2NhcGUoc3R5bGVzKSArIFwiXFxcIlwiO1xuICAgIH1cblxuICAgIHZhciBlc2NhcGVkID0gdXRpbHMuZXNjYXBlKHRoaXMudGV4dCk7XG5cbiAgICBpZiAobmVlZHNTcGFuKSB7XG4gICAgICBtYXJrdXAgKz0gXCI+XCI7XG4gICAgICBtYXJrdXAgKz0gZXNjYXBlZDtcbiAgICAgIG1hcmt1cCArPSBcIjwvc3Bhbj5cIjtcbiAgICAgIHJldHVybiBtYXJrdXA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlc2NhcGVkO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3ltYm9sTm9kZTtcbn0oKTtcbi8qKlxuICogU1ZHIG5vZGVzIGFyZSB1c2VkIHRvIHJlbmRlciBzdHJldGNoeSB3aWRlIGVsZW1lbnRzLlxuICovXG5cbnZhciBTdmdOb2RlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3ZnTm9kZShjaGlsZHJlbiwgYXR0cmlidXRlcykge1xuICAgIHRoaXMuY2hpbGRyZW4gPSB2b2lkIDA7XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0gdm9pZCAwO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbiB8fCBbXTtcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzIHx8IHt9O1xuICB9XG5cbiAgdmFyIF9wcm90bzUgPSBTdmdOb2RlLnByb3RvdHlwZTtcblxuICBfcHJvdG81LnRvTm9kZSA9IGZ1bmN0aW9uIHRvTm9kZSgpIHtcbiAgICB2YXIgc3ZnTlMgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsIFwic3ZnXCIpOyAvLyBBcHBseSBhdHRyaWJ1dGVzXG5cbiAgICBmb3IgKHZhciBhdHRyIGluIHRoaXMuYXR0cmlidXRlcykge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLmF0dHJpYnV0ZXMsIGF0dHIpKSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHIsIHRoaXMuYXR0cmlidXRlc1thdHRyXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBub2RlLmFwcGVuZENoaWxkKHRoaXMuY2hpbGRyZW5baV0udG9Ob2RlKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIF9wcm90bzUudG9NYXJrdXAgPSBmdW5jdGlvbiB0b01hcmt1cCgpIHtcbiAgICB2YXIgbWFya3VwID0gXCI8c3ZnIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCJcIjsgLy8gQXBwbHkgYXR0cmlidXRlc1xuXG4gICAgZm9yICh2YXIgYXR0ciBpbiB0aGlzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5hdHRyaWJ1dGVzLCBhdHRyKSkge1xuICAgICAgICBtYXJrdXAgKz0gXCIgXCIgKyBhdHRyICsgXCI9J1wiICsgdGhpcy5hdHRyaWJ1dGVzW2F0dHJdICsgXCInXCI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWFya3VwICs9IFwiPlwiO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBtYXJrdXAgKz0gdGhpcy5jaGlsZHJlbltpXS50b01hcmt1cCgpO1xuICAgIH1cblxuICAgIG1hcmt1cCArPSBcIjwvc3ZnPlwiO1xuICAgIHJldHVybiBtYXJrdXA7XG4gIH07XG5cbiAgcmV0dXJuIFN2Z05vZGU7XG59KCk7XG52YXIgUGF0aE5vZGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQYXRoTm9kZShwYXRoTmFtZSwgYWx0ZXJuYXRlKSB7XG4gICAgdGhpcy5wYXRoTmFtZSA9IHZvaWQgMDtcbiAgICB0aGlzLmFsdGVybmF0ZSA9IHZvaWQgMDtcbiAgICB0aGlzLnBhdGhOYW1lID0gcGF0aE5hbWU7XG4gICAgdGhpcy5hbHRlcm5hdGUgPSBhbHRlcm5hdGU7IC8vIFVzZWQgb25seSBmb3IgXFxzcXJ0LCBcXHBoYXNlLCAmIHRhbGwgZGVsaW1zXG4gIH1cblxuICB2YXIgX3Byb3RvNiA9IFBhdGhOb2RlLnByb3RvdHlwZTtcblxuICBfcHJvdG82LnRvTm9kZSA9IGZ1bmN0aW9uIHRvTm9kZSgpIHtcbiAgICB2YXIgc3ZnTlMgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsIFwicGF0aFwiKTtcblxuICAgIGlmICh0aGlzLmFsdGVybmF0ZSkge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJkXCIsIHRoaXMuYWx0ZXJuYXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJkXCIsIHBhdGhbdGhpcy5wYXRoTmFtZV0pO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIF9wcm90bzYudG9NYXJrdXAgPSBmdW5jdGlvbiB0b01hcmt1cCgpIHtcbiAgICBpZiAodGhpcy5hbHRlcm5hdGUpIHtcbiAgICAgIHJldHVybiBcIjxwYXRoIGQ9J1wiICsgdGhpcy5hbHRlcm5hdGUgKyBcIicvPlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCI8cGF0aCBkPSdcIiArIHBhdGhbdGhpcy5wYXRoTmFtZV0gKyBcIicvPlwiO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gUGF0aE5vZGU7XG59KCk7XG52YXIgTGluZU5vZGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBMaW5lTm9kZShhdHRyaWJ1dGVzKSB7XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMgfHwge307XG4gIH1cblxuICB2YXIgX3Byb3RvNyA9IExpbmVOb2RlLnByb3RvdHlwZTtcblxuICBfcHJvdG83LnRvTm9kZSA9IGZ1bmN0aW9uIHRvTm9kZSgpIHtcbiAgICB2YXIgc3ZnTlMgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsIFwibGluZVwiKTsgLy8gQXBwbHkgYXR0cmlidXRlc1xuXG4gICAgZm9yICh2YXIgYXR0ciBpbiB0aGlzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5hdHRyaWJ1dGVzLCBhdHRyKSkge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyLCB0aGlzLmF0dHJpYnV0ZXNbYXR0cl0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIF9wcm90bzcudG9NYXJrdXAgPSBmdW5jdGlvbiB0b01hcmt1cCgpIHtcbiAgICB2YXIgbWFya3VwID0gXCI8bGluZVwiO1xuXG4gICAgZm9yICh2YXIgYXR0ciBpbiB0aGlzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5hdHRyaWJ1dGVzLCBhdHRyKSkge1xuICAgICAgICBtYXJrdXAgKz0gXCIgXCIgKyBhdHRyICsgXCI9J1wiICsgdGhpcy5hdHRyaWJ1dGVzW2F0dHJdICsgXCInXCI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWFya3VwICs9IFwiLz5cIjtcbiAgICByZXR1cm4gbWFya3VwO1xuICB9O1xuXG4gIHJldHVybiBMaW5lTm9kZTtcbn0oKTtcbmZ1bmN0aW9uIGFzc2VydFN5bWJvbERvbU5vZGUoZ3JvdXApIHtcbiAgaWYgKGdyb3VwIGluc3RhbmNlb2YgU3ltYm9sTm9kZSkge1xuICAgIHJldHVybiBncm91cDtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBzeW1ib2xOb2RlIGJ1dCBnb3QgXCIgKyBTdHJpbmcoZ3JvdXApICsgXCIuXCIpO1xuICB9XG59XG5mdW5jdGlvbiBhc3NlcnRTcGFuKGdyb3VwKSB7XG4gIGlmIChncm91cCBpbnN0YW5jZW9mIFNwYW4pIHtcbiAgICByZXR1cm4gZ3JvdXA7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgc3BhbjxIdG1sRG9tTm9kZT4gYnV0IGdvdCBcIiArIFN0cmluZyhncm91cCkgKyBcIi5cIik7XG4gIH1cbn1cbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mb250TWV0cmljc0RhdGEuanNcbi8vIFRoaXMgZmlsZSBpcyBHRU5FUkFURUQgYnkgYnVpbGRNZXRyaWNzLnNoLiBETyBOT1QgTU9ESUZZLlxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgZm9udE1ldHJpY3NEYXRhID0gKHtcbiAgXCJBTVMtUmVndWxhclwiOiB7XG4gICAgXCIzMlwiOiBbMCwgMCwgMCwgMCwgMC4yNV0sXG4gICAgXCI2NVwiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI2NlwiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI2N1wiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI2OFwiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI2OVwiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI3MFwiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC42MTExMV0sXG4gICAgXCI3MVwiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI3MlwiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI3M1wiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC4zODg4OV0sXG4gICAgXCI3NFwiOiBbMC4xNjY2NywgMC42ODg4OSwgMCwgMCwgMC41XSxcbiAgICBcIjc1XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjc2XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjc3XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjk0NDQ1XSxcbiAgICBcIjc4XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjc5XCI6IFswLjE2NjY3LCAwLjY4ODg5LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjgwXCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjgxXCI6IFswLjE2NjY3LCAwLjY4ODg5LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjgyXCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjgzXCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjg0XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjg1XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjg2XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjg3XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAxLjBdLFxuICAgIFwiODhcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiODlcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiOTBcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiMTA3XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjE2MFwiOiBbMCwgMCwgMCwgMCwgMC4yNV0sXG4gICAgXCIxNjVcIjogWzAsIDAuNjc1LCAwLjAyNSwgMCwgMC43NV0sXG4gICAgXCIxNzRcIjogWzAuMTU1NTksIDAuNjkyMjQsIDAsIDAsIDAuOTQ2NjZdLFxuICAgIFwiMjQwXCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjI5NVwiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC41NDAyOF0sXG4gICAgXCI3MTBcIjogWzAsIDAuODI1LCAwLCAwLCAyLjMzMzM0XSxcbiAgICBcIjczMlwiOiBbMCwgMC45LCAwLCAwLCAyLjMzMzM0XSxcbiAgICBcIjc3MFwiOiBbMCwgMC44MjUsIDAsIDAsIDIuMzMzMzRdLFxuICAgIFwiNzcxXCI6IFswLCAwLjksIDAsIDAsIDIuMzMzMzRdLFxuICAgIFwiOTg5XCI6IFswLjA4MTY3LCAwLjU4MTY3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjEwMDhcIjogWzAsIDAuNDMwNTYsIDAuMDQwMjgsIDAsIDAuNjY2NjddLFxuICAgIFwiODI0NVwiOiBbMCwgMC41NDk4NiwgMCwgMCwgMC4yNzVdLFxuICAgIFwiODQ2M1wiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC41NDAyOF0sXG4gICAgXCI4NDg3XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjg0OThcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNTU1NTZdLFxuICAgIFwiODUwMlwiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI4NTAzXCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjQ0NDQ1XSxcbiAgICBcIjg1MDRcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiODUxM1wiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC42Mzg4OV0sXG4gICAgXCI4NTkyXCI6IFstMC4wMzU5OCwgMC40NjQwMiwgMCwgMCwgMC41XSxcbiAgICBcIjg1OTRcIjogWy0wLjAzNTk4LCAwLjQ2NDAyLCAwLCAwLCAwLjVdLFxuICAgIFwiODYwMlwiOiBbLTAuMTMzMTMsIDAuMzY2ODcsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjAzXCI6IFstMC4xMzMxMywgMC4zNjY4NywgMCwgMCwgMS4wXSxcbiAgICBcIjg2MDZcIjogWzAuMDEzNTQsIDAuNTIyMzksIDAsIDAsIDEuMF0sXG4gICAgXCI4NjA4XCI6IFswLjAxMzU0LCAwLjUyMjM5LCAwLCAwLCAxLjBdLFxuICAgIFwiODYxMFwiOiBbMC4wMTM1NCwgMC41MjIzOSwgMCwgMCwgMS4xMTExMV0sXG4gICAgXCI4NjExXCI6IFswLjAxMzU0LCAwLjUyMjM5LCAwLCAwLCAxLjExMTExXSxcbiAgICBcIjg2MTlcIjogWzAsIDAuNTQ5ODYsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjIwXCI6IFswLCAwLjU0OTg2LCAwLCAwLCAxLjBdLFxuICAgIFwiODYyMVwiOiBbLTAuMTMzMTMsIDAuMzc3ODgsIDAsIDAsIDEuMzg4ODldLFxuICAgIFwiODYyMlwiOiBbLTAuMTMzMTMsIDAuMzY2ODcsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjI0XCI6IFswLCAwLjY5MjI0LCAwLCAwLCAwLjVdLFxuICAgIFwiODYyNVwiOiBbMCwgMC42OTIyNCwgMCwgMCwgMC41XSxcbiAgICBcIjg2MzBcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjMxXCI6IFswLCAwLjQzMDU2LCAwLCAwLCAxLjBdLFxuICAgIFwiODYzNFwiOiBbMC4wODE5OCwgMC41ODE5OCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4NjM1XCI6IFswLjA4MTk4LCAwLjU4MTk4LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg2MzhcIjogWzAuMTk0NDQsIDAuNjkyMjQsIDAsIDAsIDAuNDE2NjddLFxuICAgIFwiODYzOVwiOiBbMC4xOTQ0NCwgMC42OTIyNCwgMCwgMCwgMC40MTY2N10sXG4gICAgXCI4NjQyXCI6IFswLjE5NDQ0LCAwLjY5MjI0LCAwLCAwLCAwLjQxNjY3XSxcbiAgICBcIjg2NDNcIjogWzAuMTk0NDQsIDAuNjkyMjQsIDAsIDAsIDAuNDE2NjddLFxuICAgIFwiODY0NFwiOiBbMC4xODA4LCAwLjY3NSwgMCwgMCwgMS4wXSxcbiAgICBcIjg2NDZcIjogWzAuMTgwOCwgMC42NzUsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjQ3XCI6IFswLjE4MDgsIDAuNjc1LCAwLCAwLCAxLjBdLFxuICAgIFwiODY0OFwiOiBbMC4xOTQ0NCwgMC42OTIyNCwgMCwgMCwgMC44MzMzNF0sXG4gICAgXCI4NjQ5XCI6IFswLjE4MDgsIDAuNjc1LCAwLCAwLCAxLjBdLFxuICAgIFwiODY1MFwiOiBbMC4xOTQ0NCwgMC42OTIyNCwgMCwgMCwgMC44MzMzNF0sXG4gICAgXCI4NjUxXCI6IFswLjAxMzU0LCAwLjUyMjM5LCAwLCAwLCAxLjBdLFxuICAgIFwiODY1MlwiOiBbMC4wMTM1NCwgMC41MjIzOSwgMCwgMCwgMS4wXSxcbiAgICBcIjg2NTNcIjogWy0wLjEzMzEzLCAwLjM2Njg3LCAwLCAwLCAxLjBdLFxuICAgIFwiODY1NFwiOiBbLTAuMTMzMTMsIDAuMzY2ODcsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjU1XCI6IFstMC4xMzMxMywgMC4zNjY4NywgMCwgMCwgMS4wXSxcbiAgICBcIjg2NjZcIjogWzAuMTM2NjcsIDAuNjM2NjcsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjY3XCI6IFswLjEzNjY3LCAwLjYzNjY3LCAwLCAwLCAxLjBdLFxuICAgIFwiODY2OVwiOiBbLTAuMTMzMTMsIDAuMzc3ODgsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjcyXCI6IFstMC4wNjQsIDAuNDM3LCAwLCAwLCAxLjMzNF0sXG4gICAgXCI4Njc0XCI6IFstMC4wNjQsIDAuNDM3LCAwLCAwLCAxLjMzNF0sXG4gICAgXCI4NzA1XCI6IFswLCAwLjgyNSwgMCwgMCwgMC41XSxcbiAgICBcIjg3MDhcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNTU1NTZdLFxuICAgIFwiODcwOVwiOiBbMC4wODE2NywgMC41ODE2NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4NzE3XCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjQyOTE3XSxcbiAgICBcIjg3MjJcIjogWy0wLjAzNTk4LCAwLjQ2NDAyLCAwLCAwLCAwLjVdLFxuICAgIFwiODcyNFwiOiBbMC4wODE5OCwgMC42OTIyNCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4NzI2XCI6IFswLjA4MTY3LCAwLjU4MTY3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg3MzNcIjogWzAsIDAuNjkyMjQsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODczNlwiOiBbMCwgMC42OTIyNCwgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI4NzM3XCI6IFswLCAwLjY5MjI0LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjg3MzhcIjogWzAuMDM1MTcsIDAuNTIyMzksIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiODczOVwiOiBbMC4wODE2NywgMC41ODE2NywgMCwgMCwgMC4yMjIyMl0sXG4gICAgXCI4NzQwXCI6IFswLjI1MTQyLCAwLjc0MTExLCAwLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjg3NDFcIjogWzAuMDgxNjcsIDAuNTgxNjcsIDAsIDAsIDAuMzg4ODldLFxuICAgIFwiODc0MlwiOiBbMC4yNTE0MiwgMC43NDExMSwgMCwgMCwgMC41XSxcbiAgICBcIjg3NTZcIjogWzAsIDAuNjkyMjQsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiODc1N1wiOiBbMCwgMC42OTIyNCwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI4NzY0XCI6IFstMC4xMzMxMywgMC4zNjY4NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4NzY1XCI6IFstMC4xMzMxMywgMC4zNzc4OCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4NzY5XCI6IFstMC4xMzMxMywgMC4zNjY4NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4NzcwXCI6IFstMC4wMzYyNSwgMC40NjM3NSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4Nzc0XCI6IFswLjMwMjc0LCAwLjc5MzgzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg3NzZcIjogWy0wLjAxNjg4LCAwLjQ4MzEyLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg3NzhcIjogWzAuMDgxNjcsIDAuNTgxNjcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODc4MlwiOiBbMC4wNjA2MiwgMC41NDk4NiwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4NzgzXCI6IFswLjA2MDYyLCAwLjU0OTg2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg3ODVcIjogWzAuMDgxOTgsIDAuNTgxOTgsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODc4NlwiOiBbMC4wODE5OCwgMC41ODE5OCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4Nzg3XCI6IFswLjA4MTk4LCAwLjU4MTk4LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg3OTBcIjogWzAsIDAuNjkyMjQsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODc5MVwiOiBbMC4yMjk1OCwgMC43Mjk1OCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4Nzk2XCI6IFswLjA4MTk4LCAwLjkxNjY3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MDZcIjogWzAuMjU1ODMsIDAuNzU1ODMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgwN1wiOiBbMC4yNTU4MywgMC43NTU4MywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODA4XCI6IFswLjI1MTQyLCAwLjc1NzI2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MDlcIjogWzAuMjUxNDIsIDAuNzU3MjYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgxMlwiOiBbMC4yNTU4MywgMC43NTU4MywgMCwgMCwgMC41XSxcbiAgICBcIjg4MTRcIjogWzAuMjA1NzYsIDAuNzA1NzYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgxNVwiOiBbMC4yMDU3NiwgMC43MDU3NiwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODE2XCI6IFswLjMwMjc0LCAwLjc5MzgzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MTdcIjogWzAuMzAyNzQsIDAuNzkzODMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgxOFwiOiBbMC4yMjk1OCwgMC43Mjk1OCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODE5XCI6IFswLjIyOTU4LCAwLjcyOTU4LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MjJcIjogWzAuMTgwOCwgMC42NzUsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgyM1wiOiBbMC4xODA4LCAwLjY3NSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODI4XCI6IFswLjEzNjY3LCAwLjYzNjY3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MjlcIjogWzAuMTM2NjcsIDAuNjM2NjcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgzMFwiOiBbMC4yMjk1OCwgMC43Mjk1OCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODMxXCI6IFswLjIyOTU4LCAwLjcyOTU4LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MzJcIjogWzAuMjA1NzYsIDAuNzA1NzYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgzM1wiOiBbMC4yMDU3NiwgMC43MDU3NiwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODQwXCI6IFswLjMwMjc0LCAwLjc5MzgzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4NDFcIjogWzAuMzAyNzQsIDAuNzkzODMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg0MlwiOiBbMC4xMzU5NywgMC42MzU5NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODQzXCI6IFswLjEzNTk3LCAwLjYzNTk3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4NDdcIjogWzAuMDM1MTcsIDAuNTQ5ODYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg0OFwiOiBbMC4wMzUxNywgMC41NDk4NiwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODU4XCI6IFswLjA4MTk4LCAwLjU4MTk4LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4NTlcIjogWzAuMDgxOTgsIDAuNTgxOTgsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg2MVwiOiBbMC4wODE5OCwgMC41ODE5OCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODYyXCI6IFswLCAwLjY3NSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODYzXCI6IFswLCAwLjY3NSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODY0XCI6IFswLCAwLjY3NSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODY1XCI6IFswLCAwLjY3NSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODcyXCI6IFswLCAwLjY5MjI0LCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjg4NzNcIjogWzAsIDAuNjkyMjQsIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiODg3NFwiOiBbMCwgMC42OTIyNCwgMCwgMCwgMC44ODg4OV0sXG4gICAgXCI4ODc2XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjg4NzdcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNjExMTFdLFxuICAgIFwiODg3OFwiOiBbMCwgMC42ODg4OSwgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI4ODc5XCI6IFswLCAwLjY4ODg5LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjg4ODJcIjogWzAuMDM1MTcsIDAuNTQ5ODYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg4M1wiOiBbMC4wMzUxNywgMC41NDk4NiwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODg0XCI6IFswLjEzNjY3LCAwLjYzNjY3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4ODVcIjogWzAuMTM2NjcsIDAuNjM2NjcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg4OFwiOiBbMCwgMC41NDk4NiwgMCwgMCwgMS4xMTExMV0sXG4gICAgXCI4ODkwXCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjg4OTFcIjogWzAuMTk0NDQsIDAuNjkyMjQsIDAsIDAsIDAuNjExMTFdLFxuICAgIFwiODg5MlwiOiBbMC4xOTQ0NCwgMC42OTIyNCwgMCwgMCwgMC42MTExMV0sXG4gICAgXCI4OTAxXCI6IFswLCAwLjU0OTg2LCAwLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjg5MDNcIjogWzAuMDgxNjcsIDAuNTgxNjcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODkwNVwiOiBbMC4wODE2NywgMC41ODE2NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4OTA2XCI6IFswLjA4MTY3LCAwLjU4MTY3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg5MDdcIjogWzAsIDAuNjkyMjQsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODkwOFwiOiBbMCwgMC42OTIyNCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4OTA5XCI6IFstMC4wMzU5OCwgMC40NjQwMiwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4OTEwXCI6IFswLCAwLjU0OTg2LCAwLCAwLCAwLjc2MDQyXSxcbiAgICBcIjg5MTFcIjogWzAsIDAuNTQ5ODYsIDAsIDAsIDAuNzYwNDJdLFxuICAgIFwiODkxMlwiOiBbMC4wMzUxNywgMC41NDk4NiwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4OTEzXCI6IFswLjAzNTE3LCAwLjU0OTg2LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg5MTRcIjogWzAsIDAuNTQ5ODYsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiODkxNVwiOiBbMCwgMC41NDk4NiwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI4OTE2XCI6IFswLCAwLjY5MjI0LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjg5MThcIjogWzAuMDM5MSwgMC41MzkxLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg5MTlcIjogWzAuMDM5MSwgMC41MzkxLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg5MjBcIjogWzAuMDM1MTcsIDAuNTQ5ODYsIDAsIDAsIDEuMzMzMzRdLFxuICAgIFwiODkyMVwiOiBbMC4wMzUxNywgMC41NDk4NiwgMCwgMCwgMS4zMzMzNF0sXG4gICAgXCI4OTIyXCI6IFswLjM4NTY5LCAwLjg4NTY5LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg5MjNcIjogWzAuMzg1NjksIDAuODg1NjksIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODkyNlwiOiBbMC4xMzY2NywgMC42MzY2NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4OTI3XCI6IFswLjEzNjY3LCAwLjYzNjY3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg5MjhcIjogWzAuMzAyNzQsIDAuNzkzODMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODkyOVwiOiBbMC4zMDI3NCwgMC43OTM4MywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4OTM0XCI6IFswLjIzMjIyLCAwLjc0MTExLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg5MzVcIjogWzAuMjMyMjIsIDAuNzQxMTEsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODkzNlwiOiBbMC4yMzIyMiwgMC43NDExMSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4OTM3XCI6IFswLjIzMjIyLCAwLjc0MTExLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg5MzhcIjogWzAuMjA1NzYsIDAuNzA1NzYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODkzOVwiOiBbMC4yMDU3NiwgMC43MDU3NiwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4OTQwXCI6IFswLjMwMjc0LCAwLjc5MzgzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg5NDFcIjogWzAuMzAyNzQsIDAuNzkzODMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODk5NFwiOiBbMC4xOTQ0NCwgMC42OTIyNCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4OTk1XCI6IFswLjE5NDQ0LCAwLjY5MjI0LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjk0MTZcIjogWzAuMTU1NTksIDAuNjkyMjQsIDAsIDAsIDAuOTAyMjJdLFxuICAgIFwiOTQ4NFwiOiBbMCwgMC42OTIyNCwgMCwgMCwgMC41XSxcbiAgICBcIjk0ODhcIjogWzAsIDAuNjkyMjQsIDAsIDAsIDAuNV0sXG4gICAgXCI5NDkyXCI6IFswLCAwLjM3Nzg4LCAwLCAwLCAwLjVdLFxuICAgIFwiOTQ5NlwiOiBbMCwgMC4zNzc4OCwgMCwgMCwgMC41XSxcbiAgICBcIjk1ODVcIjogWzAuMTk0NDQsIDAuNjg4ODksIDAsIDAsIDAuODg4ODldLFxuICAgIFwiOTU4NlwiOiBbMC4xOTQ0NCwgMC43NDExMSwgMCwgMCwgMC44ODg4OV0sXG4gICAgXCI5NjMyXCI6IFswLCAwLjY3NSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI5NjMzXCI6IFswLCAwLjY3NSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI5NjUwXCI6IFswLCAwLjU0OTg2LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjk2NTFcIjogWzAsIDAuNTQ5ODYsIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiOTY1NFwiOiBbMC4wMzUxNywgMC41NDk4NiwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI5NjYwXCI6IFswLCAwLjU0OTg2LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjk2NjFcIjogWzAsIDAuNTQ5ODYsIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiOTY2NFwiOiBbMC4wMzUxNywgMC41NDk4NiwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI5Njc0XCI6IFswLjExMTExLCAwLjY5MjI0LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjk3MzNcIjogWzAuMTk0NDQsIDAuNjkyMjQsIDAsIDAsIDAuOTQ0NDVdLFxuICAgIFwiMTAwMDNcIjogWzAsIDAuNjkyMjQsIDAsIDAsIDAuODMzMzRdLFxuICAgIFwiMTAwMTZcIjogWzAsIDAuNjkyMjQsIDAsIDAsIDAuODMzMzRdLFxuICAgIFwiMTA3MzFcIjogWzAuMTExMTEsIDAuNjkyMjQsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiMTA4NDZcIjogWzAuMTk0NDQsIDAuNzU1ODMsIDAsIDAsIDAuNjExMTFdLFxuICAgIFwiMTA4NzdcIjogWzAuMTM2NjcsIDAuNjM2NjcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA4NzhcIjogWzAuMTM2NjcsIDAuNjM2NjcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA4ODVcIjogWzAuMjU1ODMsIDAuNzU1ODMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA4ODZcIjogWzAuMjU1ODMsIDAuNzU1ODMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA4ODdcIjogWzAuMTM1OTcsIDAuNjM1OTcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA4ODhcIjogWzAuMTM1OTcsIDAuNjM1OTcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA4ODlcIjogWzAuMjYxNjcsIDAuNzU3MjYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA4OTBcIjogWzAuMjYxNjcsIDAuNzU3MjYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA4OTFcIjogWzAuNDgyNTYsIDAuOTgyNTYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA4OTJcIjogWzAuNDgyNTYsIDAuOTgyNTYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA5MDFcIjogWzAuMTM2NjcsIDAuNjM2NjcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA5MDJcIjogWzAuMTM2NjcsIDAuNjM2NjcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA5MzNcIjogWzAuMjUxNDIsIDAuNzU3MjYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA5MzRcIjogWzAuMjUxNDIsIDAuNzU3MjYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA5MzVcIjogWzAuMjYxNjcsIDAuNzU3MjYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA5MzZcIjogWzAuMjYxNjcsIDAuNzU3MjYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA5MzdcIjogWzAuMjYxNjcsIDAuNzU3MjYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA5MzhcIjogWzAuMjYxNjcsIDAuNzU3MjYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA5NDlcIjogWzAuMjU1ODMsIDAuNzU1ODMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA5NTBcIjogWzAuMjU1ODMsIDAuNzU1ODMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA5NTVcIjogWzAuMjg0ODEsIDAuNzkzODMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMTA5NTZcIjogWzAuMjg0ODEsIDAuNzkzODMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNTczNTBcIjogWzAuMDgxNjcsIDAuNTgxNjcsIDAsIDAsIDAuMjIyMjJdLFxuICAgIFwiNTczNTFcIjogWzAuMDgxNjcsIDAuNTgxNjcsIDAsIDAsIDAuMzg4ODldLFxuICAgIFwiNTczNTJcIjogWzAuMDgxNjcsIDAuNTgxNjcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNTczNTNcIjogWzAsIDAuNDMwNTYsIDAuMDQwMjgsIDAsIDAuNjY2NjddLFxuICAgIFwiNTczNTZcIjogWzAuMjUxNDIsIDAuNzU3MjYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNTczNTdcIjogWzAuMjUxNDIsIDAuNzU3MjYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNTczNThcIjogWzAuNDE5NTEsIDAuOTE5NTEsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNTczNTlcIjogWzAuMzAyNzQsIDAuNzkzODMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNTczNjBcIjogWzAuMzAyNzQsIDAuNzkzODMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNTczNjFcIjogWzAuNDE5NTEsIDAuOTE5NTEsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNTczNjZcIjogWzAuMjUxNDIsIDAuNzU3MjYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNTczNjdcIjogWzAuMjUxNDIsIDAuNzU3MjYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNTczNjhcIjogWzAuMjUxNDIsIDAuNzU3MjYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNTczNjlcIjogWzAuMjUxNDIsIDAuNzU3MjYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNTczNzBcIjogWzAuMTM1OTcsIDAuNjM1OTcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNTczNzFcIjogWzAuMTM1OTcsIDAuNjM1OTcsIDAsIDAsIDAuNzc3NzhdXG4gIH0sXG4gIFwiQ2FsaWdyYXBoaWMtUmVndWxhclwiOiB7XG4gICAgXCIzMlwiOiBbMCwgMCwgMCwgMCwgMC4yNV0sXG4gICAgXCI2NVwiOiBbMCwgMC42ODMzMywgMCwgMC4xOTQ0NSwgMC43OTg0N10sXG4gICAgXCI2NlwiOiBbMCwgMC42ODMzMywgMC4wMzA0MSwgMC4xMzg4OSwgMC42NTY4MV0sXG4gICAgXCI2N1wiOiBbMCwgMC42ODMzMywgMC4wNTgzNCwgMC4xMzg4OSwgMC41MjY1M10sXG4gICAgXCI2OFwiOiBbMCwgMC42ODMzMywgMC4wMjc3OCwgMC4wODMzNCwgMC43NzEzOV0sXG4gICAgXCI2OVwiOiBbMCwgMC42ODMzMywgMC4wODk0NCwgMC4xMTExMSwgMC41Mjc3OF0sXG4gICAgXCI3MFwiOiBbMCwgMC42ODMzMywgMC4wOTkzMSwgMC4xMTExMSwgMC43MTg3NV0sXG4gICAgXCI3MVwiOiBbMC4wOTcyMiwgMC42ODMzMywgMC4wNTkzLCAwLjExMTExLCAwLjU5NDg3XSxcbiAgICBcIjcyXCI6IFswLCAwLjY4MzMzLCAwLjAwOTY1LCAwLjExMTExLCAwLjg0NDUyXSxcbiAgICBcIjczXCI6IFswLCAwLjY4MzMzLCAwLjA3MzgyLCAwLCAwLjU0NDUyXSxcbiAgICBcIjc0XCI6IFswLjA5NzIyLCAwLjY4MzMzLCAwLjE4NDcyLCAwLjE2NjY3LCAwLjY3Nzc4XSxcbiAgICBcIjc1XCI6IFswLCAwLjY4MzMzLCAwLjAxNDQ1LCAwLjA1NTU2LCAwLjc2MTk1XSxcbiAgICBcIjc2XCI6IFswLCAwLjY4MzMzLCAwLCAwLjEzODg5LCAwLjY4OTcyXSxcbiAgICBcIjc3XCI6IFswLCAwLjY4MzMzLCAwLCAwLjEzODg5LCAxLjIwMDldLFxuICAgIFwiNzhcIjogWzAsIDAuNjgzMzMsIDAuMTQ3MzYsIDAuMDgzMzQsIDAuODIwNDldLFxuICAgIFwiNzlcIjogWzAsIDAuNjgzMzMsIDAuMDI3NzgsIDAuMTExMTEsIDAuNzk2MTFdLFxuICAgIFwiODBcIjogWzAsIDAuNjgzMzMsIDAuMDgyMjIsIDAuMDgzMzQsIDAuNjk1NTZdLFxuICAgIFwiODFcIjogWzAuMDk3MjIsIDAuNjgzMzMsIDAsIDAuMTExMTEsIDAuODE2NjddLFxuICAgIFwiODJcIjogWzAsIDAuNjgzMzMsIDAsIDAuMDgzMzQsIDAuODQ3NV0sXG4gICAgXCI4M1wiOiBbMCwgMC42ODMzMywgMC4wNzUsIDAuMTM4ODksIDAuNjA1NTZdLFxuICAgIFwiODRcIjogWzAsIDAuNjgzMzMsIDAuMjU0MTcsIDAsIDAuNTQ0NjRdLFxuICAgIFwiODVcIjogWzAsIDAuNjgzMzMsIDAuMDk5MzEsIDAuMDgzMzQsIDAuNjI1ODNdLFxuICAgIFwiODZcIjogWzAsIDAuNjgzMzMsIDAuMDgyMjIsIDAsIDAuNjEyNzhdLFxuICAgIFwiODdcIjogWzAsIDAuNjgzMzMsIDAuMDgyMjIsIDAuMDgzMzQsIDAuOTg3NzhdLFxuICAgIFwiODhcIjogWzAsIDAuNjgzMzMsIDAuMTQ2NDMsIDAuMTM4ODksIDAuNzEzM10sXG4gICAgXCI4OVwiOiBbMC4wOTcyMiwgMC42ODMzMywgMC4wODIyMiwgMC4wODMzNCwgMC42NjgzNF0sXG4gICAgXCI5MFwiOiBbMCwgMC42ODMzMywgMC4wNzk0NCwgMC4xMzg4OSwgMC43MjQ3M10sXG4gICAgXCIxNjBcIjogWzAsIDAsIDAsIDAsIDAuMjVdXG4gIH0sXG4gIFwiRnJha3R1ci1SZWd1bGFyXCI6IHtcbiAgICBcIjMyXCI6IFswLCAwLCAwLCAwLCAwLjI1XSxcbiAgICBcIjMzXCI6IFswLCAwLjY5MTQxLCAwLCAwLCAwLjI5NTc0XSxcbiAgICBcIjM0XCI6IFswLCAwLjY5MTQxLCAwLCAwLCAwLjIxNDcxXSxcbiAgICBcIjM4XCI6IFswLCAwLjY5MTQxLCAwLCAwLCAwLjczNzg2XSxcbiAgICBcIjM5XCI6IFswLCAwLjY5MTQxLCAwLCAwLCAwLjIxMjAxXSxcbiAgICBcIjQwXCI6IFswLjI0OTgyLCAwLjc0OTQ3LCAwLCAwLCAwLjM4ODY1XSxcbiAgICBcIjQxXCI6IFswLjI0OTgyLCAwLjc0OTQ3LCAwLCAwLCAwLjM4ODY1XSxcbiAgICBcIjQyXCI6IFswLCAwLjYyMTE5LCAwLCAwLCAwLjI3NzY0XSxcbiAgICBcIjQzXCI6IFswLjA4MzE5LCAwLjU4MjgzLCAwLCAwLCAwLjc1NjIzXSxcbiAgICBcIjQ0XCI6IFswLCAwLjEwODAzLCAwLCAwLCAwLjI3NzY0XSxcbiAgICBcIjQ1XCI6IFswLjA4MzE5LCAwLjU4MjgzLCAwLCAwLCAwLjc1NjIzXSxcbiAgICBcIjQ2XCI6IFswLCAwLjEwODAzLCAwLCAwLCAwLjI3NzY0XSxcbiAgICBcIjQ3XCI6IFswLjI0OTgyLCAwLjc0OTQ3LCAwLCAwLCAwLjUwMTgxXSxcbiAgICBcIjQ4XCI6IFswLCAwLjQ3NTM0LCAwLCAwLCAwLjUwMTgxXSxcbiAgICBcIjQ5XCI6IFswLCAwLjQ3NTM0LCAwLCAwLCAwLjUwMTgxXSxcbiAgICBcIjUwXCI6IFswLCAwLjQ3NTM0LCAwLCAwLCAwLjUwMTgxXSxcbiAgICBcIjUxXCI6IFswLjE4OTA2LCAwLjQ3NTM0LCAwLCAwLCAwLjUwMTgxXSxcbiAgICBcIjUyXCI6IFswLjE4OTA2LCAwLjQ3NTM0LCAwLCAwLCAwLjUwMTgxXSxcbiAgICBcIjUzXCI6IFswLjE4OTA2LCAwLjQ3NTM0LCAwLCAwLCAwLjUwMTgxXSxcbiAgICBcIjU0XCI6IFswLCAwLjY5MTQxLCAwLCAwLCAwLjUwMTgxXSxcbiAgICBcIjU1XCI6IFswLjE4OTA2LCAwLjQ3NTM0LCAwLCAwLCAwLjUwMTgxXSxcbiAgICBcIjU2XCI6IFswLCAwLjY5MTQxLCAwLCAwLCAwLjUwMTgxXSxcbiAgICBcIjU3XCI6IFswLjE4OTA2LCAwLjQ3NTM0LCAwLCAwLCAwLjUwMTgxXSxcbiAgICBcIjU4XCI6IFswLCAwLjQ3NTM0LCAwLCAwLCAwLjIxNjA2XSxcbiAgICBcIjU5XCI6IFswLjEyNjA0LCAwLjQ3NTM0LCAwLCAwLCAwLjIxNjA2XSxcbiAgICBcIjYxXCI6IFstMC4xMzA5OSwgMC4zNjg2NiwgMCwgMCwgMC43NTYyM10sXG4gICAgXCI2M1wiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC4zNjI0NV0sXG4gICAgXCI2NVwiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC43MTc2XSxcbiAgICBcIjY2XCI6IFswLCAwLjY5MTQxLCAwLCAwLCAwLjg4Mzk3XSxcbiAgICBcIjY3XCI6IFswLCAwLjY5MTQxLCAwLCAwLCAwLjYxMjU0XSxcbiAgICBcIjY4XCI6IFswLCAwLjY5MTQxLCAwLCAwLCAwLjgzMTU4XSxcbiAgICBcIjY5XCI6IFswLCAwLjY5MTQxLCAwLCAwLCAwLjY2Mjc4XSxcbiAgICBcIjcwXCI6IFswLjEyNjA0LCAwLjY5MTQxLCAwLCAwLCAwLjYxMTE5XSxcbiAgICBcIjcxXCI6IFswLCAwLjY5MTQxLCAwLCAwLCAwLjc4NTM5XSxcbiAgICBcIjcyXCI6IFswLjA2MzAyLCAwLjY5MTQxLCAwLCAwLCAwLjcyMDNdLFxuICAgIFwiNzNcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuNTU0NDhdLFxuICAgIFwiNzRcIjogWzAuMTI2MDQsIDAuNjkxNDEsIDAsIDAsIDAuNTUyMzFdLFxuICAgIFwiNzVcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuNjY4NDVdLFxuICAgIFwiNzZcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuNjY2MDJdLFxuICAgIFwiNzdcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDEuMDQ5NTNdLFxuICAgIFwiNzhcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuODMyMTJdLFxuICAgIFwiNzlcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuODI2OTldLFxuICAgIFwiODBcIjogWzAuMTg5MDYsIDAuNjkxNDEsIDAsIDAsIDAuODI3NTNdLFxuICAgIFwiODFcIjogWzAuMDM3ODEsIDAuNjkxNDEsIDAsIDAsIDAuODI2OTldLFxuICAgIFwiODJcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuODI4MDddLFxuICAgIFwiODNcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuODI4NjFdLFxuICAgIFwiODRcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuNjY4OTldLFxuICAgIFwiODVcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuNjQ1NzZdLFxuICAgIFwiODZcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuODMxMzFdLFxuICAgIFwiODdcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDEuMDQ2MDJdLFxuICAgIFwiODhcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuNzE5MjJdLFxuICAgIFwiODlcIjogWzAuMTg5MDYsIDAuNjkxNDEsIDAsIDAsIDAuODMyOTNdLFxuICAgIFwiOTBcIjogWzAuMTI2MDQsIDAuNjkxNDEsIDAsIDAsIDAuNjAyMDFdLFxuICAgIFwiOTFcIjogWzAuMjQ5ODIsIDAuNzQ5NDcsIDAsIDAsIDAuMjc3NjRdLFxuICAgIFwiOTNcIjogWzAuMjQ5ODIsIDAuNzQ5NDcsIDAsIDAsIDAuMjc3NjRdLFxuICAgIFwiOTRcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuNDk5NjVdLFxuICAgIFwiOTdcIjogWzAsIDAuNDc1MzQsIDAsIDAsIDAuNTAwNDZdLFxuICAgIFwiOThcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuNTEzMTVdLFxuICAgIFwiOTlcIjogWzAsIDAuNDc1MzQsIDAsIDAsIDAuMzg5NDZdLFxuICAgIFwiMTAwXCI6IFswLCAwLjYyMTE5LCAwLCAwLCAwLjQ5ODU3XSxcbiAgICBcIjEwMVwiOiBbMCwgMC40NzUzNCwgMCwgMCwgMC40MDA1M10sXG4gICAgXCIxMDJcIjogWzAuMTg5MDYsIDAuNjkxNDEsIDAsIDAsIDAuMzI2MjZdLFxuICAgIFwiMTAzXCI6IFswLjE4OTA2LCAwLjQ3NTM0LCAwLCAwLCAwLjUwMzddLFxuICAgIFwiMTA0XCI6IFswLjE4OTA2LCAwLjY5MTQxLCAwLCAwLCAwLjUyMTI2XSxcbiAgICBcIjEwNVwiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC4yNzg5OV0sXG4gICAgXCIxMDZcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuMjgwODhdLFxuICAgIFwiMTA3XCI6IFswLCAwLjY5MTQxLCAwLCAwLCAwLjM4OTQ2XSxcbiAgICBcIjEwOFwiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC4yNzk1M10sXG4gICAgXCIxMDlcIjogWzAsIDAuNDc1MzQsIDAsIDAsIDAuNzY2NzZdLFxuICAgIFwiMTEwXCI6IFswLCAwLjQ3NTM0LCAwLCAwLCAwLjUyNjY2XSxcbiAgICBcIjExMVwiOiBbMCwgMC40NzUzNCwgMCwgMCwgMC40ODg4NV0sXG4gICAgXCIxMTJcIjogWzAuMTg5MDYsIDAuNTIzOTYsIDAsIDAsIDAuNTAwNDZdLFxuICAgIFwiMTEzXCI6IFswLjE4OTA2LCAwLjQ3NTM0LCAwLCAwLCAwLjQ4OTEyXSxcbiAgICBcIjExNFwiOiBbMCwgMC40NzUzNCwgMCwgMCwgMC4zODkxOV0sXG4gICAgXCIxMTVcIjogWzAsIDAuNDc1MzQsIDAsIDAsIDAuNDQyNjZdLFxuICAgIFwiMTE2XCI6IFswLCAwLjYyMTE5LCAwLCAwLCAwLjMzMzAxXSxcbiAgICBcIjExN1wiOiBbMCwgMC40NzUzNCwgMCwgMCwgMC41MTcyXSxcbiAgICBcIjExOFwiOiBbMCwgMC41MjM5NiwgMCwgMCwgMC41MTE4XSxcbiAgICBcIjExOVwiOiBbMCwgMC41MjM5NiwgMCwgMCwgMC43NzM1MV0sXG4gICAgXCIxMjBcIjogWzAuMTg5MDYsIDAuNDc1MzQsIDAsIDAsIDAuMzg4NjVdLFxuICAgIFwiMTIxXCI6IFswLjE4OTA2LCAwLjQ3NTM0LCAwLCAwLCAwLjQ5ODg0XSxcbiAgICBcIjEyMlwiOiBbMC4xODkwNiwgMC40NzUzNCwgMCwgMCwgMC4zOTA1NF0sXG4gICAgXCIxNjBcIjogWzAsIDAsIDAsIDAsIDAuMjVdLFxuICAgIFwiODIxNlwiOiBbMCwgMC42OTE0MSwgMCwgMCwgMC4yMTQ3MV0sXG4gICAgXCI4MjE3XCI6IFswLCAwLjY5MTQxLCAwLCAwLCAwLjIxNDcxXSxcbiAgICBcIjU4MTEyXCI6IFswLCAwLjYyMTE5LCAwLCAwLCAwLjQ5NzQ5XSxcbiAgICBcIjU4MTEzXCI6IFswLCAwLjYyMTE5LCAwLCAwLCAwLjQ5ODNdLFxuICAgIFwiNTgxMTRcIjogWzAuMTg5MDYsIDAuNjkxNDEsIDAsIDAsIDAuMzMzMjhdLFxuICAgIFwiNTgxMTVcIjogWzAuMTg5MDYsIDAuNjkxNDEsIDAsIDAsIDAuMzI5MjNdLFxuICAgIFwiNTgxMTZcIjogWzAuMTg5MDYsIDAuNDc1MzQsIDAsIDAsIDAuNTAzNDNdLFxuICAgIFwiNTgxMTdcIjogWzAsIDAuNjkxNDEsIDAsIDAsIDAuMzMzMDFdLFxuICAgIFwiNTgxMThcIjogWzAsIDAuNjIxMTksIDAsIDAsIDAuMzM0MDldLFxuICAgIFwiNTgxMTlcIjogWzAsIDAuNDc1MzQsIDAsIDAsIDAuNTAwNzNdXG4gIH0sXG4gIFwiTWFpbi1Cb2xkXCI6IHtcbiAgICBcIjMyXCI6IFswLCAwLCAwLCAwLCAwLjI1XSxcbiAgICBcIjMzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjM1XSxcbiAgICBcIjM0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjYwMjc4XSxcbiAgICBcIjM1XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAwLjk1ODMzXSxcbiAgICBcIjM2XCI6IFswLjA1NTU2LCAwLjc1LCAwLCAwLCAwLjU3NV0sXG4gICAgXCIzN1wiOiBbMC4wNTU1NiwgMC43NSwgMCwgMCwgMC45NTgzM10sXG4gICAgXCIzOFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCIzOVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC4zMTk0NF0sXG4gICAgXCI0MFwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC40NDcyMl0sXG4gICAgXCI0MVwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC40NDcyMl0sXG4gICAgXCI0MlwiOiBbMCwgMC43NSwgMCwgMCwgMC41NzVdLFxuICAgIFwiNDNcIjogWzAuMTMzMzMsIDAuNjMzMzMsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiNDRcIjogWzAuMTk0NDQsIDAuMTU1NTYsIDAsIDAsIDAuMzE5NDRdLFxuICAgIFwiNDVcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuMzgzMzNdLFxuICAgIFwiNDZcIjogWzAsIDAuMTU1NTYsIDAsIDAsIDAuMzE5NDRdLFxuICAgIFwiNDdcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjQ4XCI6IFswLCAwLjY0NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI0OVwiOiBbMCwgMC42NDQ0NCwgMCwgMCwgMC41NzVdLFxuICAgIFwiNTBcIjogWzAsIDAuNjQ0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjUxXCI6IFswLCAwLjY0NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI1MlwiOiBbMCwgMC42NDQ0NCwgMCwgMCwgMC41NzVdLFxuICAgIFwiNTNcIjogWzAsIDAuNjQ0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjU0XCI6IFswLCAwLjY0NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI1NVwiOiBbMCwgMC42NDQ0NCwgMCwgMCwgMC41NzVdLFxuICAgIFwiNTZcIjogWzAsIDAuNjQ0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjU3XCI6IFswLCAwLjY0NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI1OFwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC4zMTk0NF0sXG4gICAgXCI1OVwiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMCwgMCwgMC4zMTk0NF0sXG4gICAgXCI2MFwiOiBbMC4wODU1NiwgMC41ODU1NiwgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI2MVwiOiBbLTAuMTA4ODksIDAuMzkxMTEsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiNjJcIjogWzAuMDg1NTYsIDAuNTg1NTYsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiNjNcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTQzMDVdLFxuICAgIFwiNjRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiNjVcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuODY5NDRdLFxuICAgIFwiNjZcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuODE4MDVdLFxuICAgIFwiNjdcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuODMwNTVdLFxuICAgIFwiNjhcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuODgxOTRdLFxuICAgIFwiNjlcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuNzU1NTVdLFxuICAgIFwiNzBcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuNzIzNjFdLFxuICAgIFwiNzFcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuOTA0MTZdLFxuICAgIFwiNzJcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuOV0sXG4gICAgXCI3M1wiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC40MzYxMV0sXG4gICAgXCI3NFwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC41OTQ0NF0sXG4gICAgXCI3NVwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC45MDEzOF0sXG4gICAgXCI3NlwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC42OTE2Nl0sXG4gICAgXCI3N1wiOiBbMCwgMC42ODYxMSwgMCwgMCwgMS4wOTE2Nl0sXG4gICAgXCI3OFwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC45XSxcbiAgICBcIjc5XCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjg2Mzg4XSxcbiAgICBcIjgwXCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjc4NjExXSxcbiAgICBcIjgxXCI6IFswLjE5NDQ0LCAwLjY4NjExLCAwLCAwLCAwLjg2Mzg4XSxcbiAgICBcIjgyXCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjg2MjVdLFxuICAgIFwiODNcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuNjM4ODldLFxuICAgIFwiODRcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuOF0sXG4gICAgXCI4NVwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC44ODQ3Ml0sXG4gICAgXCI4NlwiOiBbMCwgMC42ODYxMSwgMC4wMTU5NywgMCwgMC44Njk0NF0sXG4gICAgXCI4N1wiOiBbMCwgMC42ODYxMSwgMC4wMTU5NywgMCwgMS4xODg4OF0sXG4gICAgXCI4OFwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC44Njk0NF0sXG4gICAgXCI4OVwiOiBbMCwgMC42ODYxMSwgMC4wMjg3NSwgMCwgMC44Njk0NF0sXG4gICAgXCI5MFwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC43MDI3N10sXG4gICAgXCI5MVwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC4zMTk0NF0sXG4gICAgXCI5MlwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC41NzVdLFxuICAgIFwiOTNcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuMzE5NDRdLFxuICAgIFwiOTRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjk1XCI6IFswLjMxLCAwLjEzNDQ0LCAwLjAzMTk0LCAwLCAwLjU3NV0sXG4gICAgXCI5N1wiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC41NTkwMl0sXG4gICAgXCI5OFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42Mzg4OV0sXG4gICAgXCI5OVwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC41MTExMV0sXG4gICAgXCIxMDBcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjM4ODldLFxuICAgIFwiMTAxXCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjUyNzA4XSxcbiAgICBcIjEwMlwiOiBbMCwgMC42OTQ0NCwgMC4xMDkwMywgMCwgMC4zNTEzOV0sXG4gICAgXCIxMDNcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAuMDE1OTcsIDAsIDAuNTc1XSxcbiAgICBcIjEwNFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42Mzg4OV0sXG4gICAgXCIxMDVcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuMzE5NDRdLFxuICAgIFwiMTA2XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAwLjM1MTM5XSxcbiAgICBcIjEwN1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42MDY5NF0sXG4gICAgXCIxMDhcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuMzE5NDRdLFxuICAgIFwiMTA5XCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjk1ODMzXSxcbiAgICBcIjExMFwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC42Mzg4OV0sXG4gICAgXCIxMTFcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjExMlwiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMCwgMCwgMC42Mzg4OV0sXG4gICAgXCIxMTNcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAsIDAsIDAuNjA2OTRdLFxuICAgIFwiMTE0XCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjQ3MzYxXSxcbiAgICBcIjExNVwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC40NTM2MV0sXG4gICAgXCIxMTZcIjogWzAsIDAuNjM0OTIsIDAsIDAsIDAuNDQ3MjJdLFxuICAgIFwiMTE3XCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjYzODg5XSxcbiAgICBcIjExOFwiOiBbMCwgMC40NDQ0NCwgMC4wMTU5NywgMCwgMC42MDY5NF0sXG4gICAgXCIxMTlcIjogWzAsIDAuNDQ0NDQsIDAuMDE1OTcsIDAsIDAuODMwNTVdLFxuICAgIFwiMTIwXCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjYwNjk0XSxcbiAgICBcIjEyMVwiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMC4wMTU5NywgMCwgMC42MDY5NF0sXG4gICAgXCIxMjJcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNTExMTFdLFxuICAgIFwiMTIzXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjU3NV0sXG4gICAgXCIxMjRcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuMzE5NDRdLFxuICAgIFwiMTI1XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjU3NV0sXG4gICAgXCIxMjZcIjogWzAuMzUsIDAuMzQ0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjE2MFwiOiBbMCwgMCwgMCwgMCwgMC4yNV0sXG4gICAgXCIxNjNcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuODY4NTNdLFxuICAgIFwiMTY4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCIxNzJcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNzY2NjZdLFxuICAgIFwiMTc2XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjg2OTQ0XSxcbiAgICBcIjE3N1wiOiBbMC4xMzMzMywgMC42MzMzMywgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCIxODRcIjogWzAuMTcwMTQsIDAsIDAsIDAsIDAuNTExMTFdLFxuICAgIFwiMTk4XCI6IFswLCAwLjY4NjExLCAwLCAwLCAxLjA0MTY2XSxcbiAgICBcIjIxNVwiOiBbMC4xMzMzMywgMC42MzMzMywgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCIyMTZcIjogWzAuMDQ4NjEsIDAuNzM0NzIsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiMjIzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU5NzIyXSxcbiAgICBcIjIzMFwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC44MzA1NV0sXG4gICAgXCIyNDdcIjogWzAuMTMzMzMsIDAuNjMzMzMsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiMjQ4XCI6IFswLjA5NzIyLCAwLjU0MTY3LCAwLCAwLCAwLjU3NV0sXG4gICAgXCIzMDVcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuMzE5NDRdLFxuICAgIFwiMzM4XCI6IFswLCAwLjY4NjExLCAwLCAwLCAxLjE2OTQ0XSxcbiAgICBcIjMzOVwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI1NjdcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAsIDAsIDAuMzUxMzldLFxuICAgIFwiNzEwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI3MTFcIjogWzAsIDAuNjMxOTQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjcxM1wiOiBbMCwgMC41OTYxMSwgMCwgMCwgMC41NzVdLFxuICAgIFwiNzE0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI3MTVcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjcyOFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41NzVdLFxuICAgIFwiNzI5XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjMxOTQ0XSxcbiAgICBcIjczMFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC44Njk0NF0sXG4gICAgXCI3MzJcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjczM1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41NzVdLFxuICAgIFwiOTE1XCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjY5MTY2XSxcbiAgICBcIjkxNlwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC45NTgzM10sXG4gICAgXCI5MjBcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiOTIzXCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjgwNTU1XSxcbiAgICBcIjkyNlwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC43NjY2Nl0sXG4gICAgXCI5MjhcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuOV0sXG4gICAgXCI5MzFcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuODMwNTVdLFxuICAgIFwiOTMzXCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjkzNFwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC44MzA1NV0sXG4gICAgXCI5MzZcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiOTM3XCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjgzMDU1XSxcbiAgICBcIjgyMTFcIjogWzAsIDAuNDQ0NDQsIDAuMDMxOTQsIDAsIDAuNTc1XSxcbiAgICBcIjgyMTJcIjogWzAsIDAuNDQ0NDQsIDAuMDMxOTQsIDAsIDEuMTQ5OTldLFxuICAgIFwiODIxNlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC4zMTk0NF0sXG4gICAgXCI4MjE3XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjMxOTQ0XSxcbiAgICBcIjgyMjBcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjAyNzhdLFxuICAgIFwiODIyMVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42MDI3OF0sXG4gICAgXCI4MjI0XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAwLjUxMTExXSxcbiAgICBcIjgyMjVcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuNTExMTFdLFxuICAgIFwiODI0MlwiOiBbMCwgMC41NTU1NiwgMCwgMCwgMC4zNDQ0NF0sXG4gICAgXCI4NDA3XCI6IFswLCAwLjcyNDQ0LCAwLjE1NDg2LCAwLCAwLjU3NV0sXG4gICAgXCI4NDYzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjY2NzU5XSxcbiAgICBcIjg0NjVcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuODMwNTVdLFxuICAgIFwiODQ2N1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC40NzM2MV0sXG4gICAgXCI4NDcyXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLCAwLCAwLjc0MDI3XSxcbiAgICBcIjg0NzZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuODMwNTVdLFxuICAgIFwiODUwMVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MDI3N10sXG4gICAgXCI4NTkyXCI6IFstMC4xMDg4OSwgMC4zOTExMSwgMCwgMCwgMS4xNDk5OV0sXG4gICAgXCI4NTkzXCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI4NTk0XCI6IFstMC4xMDg4OSwgMC4zOTExMSwgMCwgMCwgMS4xNDk5OV0sXG4gICAgXCI4NTk1XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI4NTk2XCI6IFstMC4xMDg4OSwgMC4zOTExMSwgMCwgMCwgMS4xNDk5OV0sXG4gICAgXCI4NTk3XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI4NTk4XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAxLjE0OTk5XSxcbiAgICBcIjg1OTlcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDEuMTQ5OTldLFxuICAgIFwiODYwMFwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMS4xNDk5OV0sXG4gICAgXCI4NjAxXCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAxLjE0OTk5XSxcbiAgICBcIjg2MzZcIjogWy0wLjEwODg5LCAwLjM5MTExLCAwLCAwLCAxLjE0OTk5XSxcbiAgICBcIjg2MzdcIjogWy0wLjEwODg5LCAwLjM5MTExLCAwLCAwLCAxLjE0OTk5XSxcbiAgICBcIjg2NDBcIjogWy0wLjEwODg5LCAwLjM5MTExLCAwLCAwLCAxLjE0OTk5XSxcbiAgICBcIjg2NDFcIjogWy0wLjEwODg5LCAwLjM5MTExLCAwLCAwLCAxLjE0OTk5XSxcbiAgICBcIjg2NTZcIjogWy0wLjEwODg5LCAwLjM5MTExLCAwLCAwLCAxLjE0OTk5XSxcbiAgICBcIjg2NTdcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuNzAyNzddLFxuICAgIFwiODY1OFwiOiBbLTAuMTA4ODksIDAuMzkxMTEsIDAsIDAsIDEuMTQ5OTldLFxuICAgIFwiODY1OVwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC43MDI3N10sXG4gICAgXCI4NjYwXCI6IFstMC4xMDg4OSwgMC4zOTExMSwgMCwgMCwgMS4xNDk5OV0sXG4gICAgXCI4NjYxXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjcwMjc3XSxcbiAgICBcIjg3MDRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjM4ODldLFxuICAgIFwiODcwNlwiOiBbMCwgMC42OTQ0NCwgMC4wNjM4OSwgMCwgMC42Mjg0N10sXG4gICAgXCI4NzA3XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjYzODg5XSxcbiAgICBcIjg3MDlcIjogWzAuMDU1NTYsIDAuNzUsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjg3MTFcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuOTU4MzNdLFxuICAgIFwiODcxMlwiOiBbMC4wODU1NiwgMC41ODU1NiwgMCwgMCwgMC43NjY2Nl0sXG4gICAgXCI4NzE1XCI6IFswLjA4NTU2LCAwLjU4NTU2LCAwLCAwLCAwLjc2NjY2XSxcbiAgICBcIjg3MjJcIjogWzAuMTMzMzMsIDAuNjMzMzMsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiODcyM1wiOiBbMC4xMzMzMywgMC42MzMzMywgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI4NzI1XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI4NzI2XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI4NzI3XCI6IFstMC4wMjc3OCwgMC40NzIyMiwgMCwgMCwgMC41NzVdLFxuICAgIFwiODcyOFwiOiBbLTAuMDI2MzksIDAuNDczNjEsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjg3MjlcIjogWy0wLjAyNjM5LCAwLjQ3MzYxLCAwLCAwLCAwLjU3NV0sXG4gICAgXCI4NzMwXCI6IFswLjE4LCAwLjgyLCAwLCAwLCAwLjk1ODMzXSxcbiAgICBcIjg3MzNcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiODczNFwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMS4xNDk5OV0sXG4gICAgXCI4NzM2XCI6IFswLCAwLjY5MjI0LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjg3MzlcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuMzE5NDRdLFxuICAgIFwiODc0MVwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC41NzVdLFxuICAgIFwiODc0M1wiOiBbMCwgMC41NTU1NiwgMCwgMCwgMC43NjY2Nl0sXG4gICAgXCI4NzQ0XCI6IFswLCAwLjU1NTU2LCAwLCAwLCAwLjc2NjY2XSxcbiAgICBcIjg3NDVcIjogWzAsIDAuNTU1NTYsIDAsIDAsIDAuNzY2NjZdLFxuICAgIFwiODc0NlwiOiBbMCwgMC41NTU1NiwgMCwgMCwgMC43NjY2Nl0sXG4gICAgXCI4NzQ3XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLjEyNzc4LCAwLCAwLjU2ODc1XSxcbiAgICBcIjg3NjRcIjogWy0wLjEwODg5LCAwLjM5MTExLCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjg3NjhcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuMzE5NDRdLFxuICAgIFwiODc3MVwiOiBbMC4wMDIyMiwgMC41MDIyMiwgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI4Nzc2XCI6IFswLjAyNDQ0LCAwLjUyNDQ0LCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjg3ODFcIjogWzAuMDAyMjIsIDAuNTAyMjIsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiODgwMVwiOiBbMC4wMDIyMiwgMC41MDIyMiwgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI4ODA0XCI6IFswLjE5NjY3LCAwLjY5NjY3LCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjg4MDVcIjogWzAuMTk2NjcsIDAuNjk2NjcsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiODgxMFwiOiBbMC4wODU1NiwgMC41ODU1NiwgMCwgMCwgMS4xNDk5OV0sXG4gICAgXCI4ODExXCI6IFswLjA4NTU2LCAwLjU4NTU2LCAwLCAwLCAxLjE0OTk5XSxcbiAgICBcIjg4MjZcIjogWzAuMDg1NTYsIDAuNTg1NTYsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiODgyN1wiOiBbMC4wODU1NiwgMC41ODU1NiwgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI4ODM0XCI6IFswLjA4NTU2LCAwLjU4NTU2LCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjg4MzVcIjogWzAuMDg1NTYsIDAuNTg1NTYsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiODgzOFwiOiBbMC4xOTY2NywgMC42OTY2NywgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI4ODM5XCI6IFswLjE5NjY3LCAwLjY5NjY3LCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjg4NDZcIjogWzAsIDAuNTU1NTYsIDAsIDAsIDAuNzY2NjZdLFxuICAgIFwiODg0OVwiOiBbMC4xOTY2NywgMC42OTY2NywgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI4ODUwXCI6IFswLjE5NjY3LCAwLjY5NjY3LCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjg4NTFcIjogWzAsIDAuNTU1NTYsIDAsIDAsIDAuNzY2NjZdLFxuICAgIFwiODg1MlwiOiBbMCwgMC41NTU1NiwgMCwgMCwgMC43NjY2Nl0sXG4gICAgXCI4ODUzXCI6IFswLjEzMzMzLCAwLjYzMzMzLCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjg4NTRcIjogWzAuMTMzMzMsIDAuNjMzMzMsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiODg1NVwiOiBbMC4xMzMzMywgMC42MzMzMywgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI4ODU2XCI6IFswLjEzMzMzLCAwLjYzMzMzLCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjg4NTdcIjogWzAuMTMzMzMsIDAuNjMzMzMsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiODg2NlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MDI3N10sXG4gICAgXCI4ODY3XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjcwMjc3XSxcbiAgICBcIjg4NjhcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiODg2OVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI4OTAwXCI6IFstMC4wMjYzOSwgMC40NzM2MSwgMCwgMCwgMC41NzVdLFxuICAgIFwiODkwMVwiOiBbLTAuMDI2MzksIDAuNDczNjEsIDAsIDAsIDAuMzE5NDRdLFxuICAgIFwiODkwMlwiOiBbLTAuMDI3NzgsIDAuNDcyMjIsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjg5NjhcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNTExMTFdLFxuICAgIFwiODk2OVwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC41MTExMV0sXG4gICAgXCI4OTcwXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjUxMTExXSxcbiAgICBcIjg5NzFcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNTExMTFdLFxuICAgIFwiODk5NFwiOiBbLTAuMTM4ODksIDAuMzYxMTEsIDAsIDAsIDEuMTQ5OTldLFxuICAgIFwiODk5NVwiOiBbLTAuMTM4ODksIDAuMzYxMTEsIDAsIDAsIDEuMTQ5OTldLFxuICAgIFwiOTY1MVwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMS4wMjIyMl0sXG4gICAgXCI5NjU3XCI6IFstMC4wMjc3OCwgMC40NzIyMiwgMCwgMCwgMC41NzVdLFxuICAgIFwiOTY2MVwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMS4wMjIyMl0sXG4gICAgXCI5NjY3XCI6IFstMC4wMjc3OCwgMC40NzIyMiwgMCwgMCwgMC41NzVdLFxuICAgIFwiOTcxMVwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMS4xNDk5OV0sXG4gICAgXCI5ODI0XCI6IFswLjEyOTYzLCAwLjY5NDQ0LCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjk4MjVcIjogWzAuMTI5NjMsIDAuNjk0NDQsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiOTgyNlwiOiBbMC4xMjk2MywgMC42OTQ0NCwgMCwgMCwgMC44OTQ0NF0sXG4gICAgXCI5ODI3XCI6IFswLjEyOTYzLCAwLjY5NDQ0LCAwLCAwLCAwLjg5NDQ0XSxcbiAgICBcIjk4MzdcIjogWzAsIDAuNzUsIDAsIDAsIDAuNDQ3MjJdLFxuICAgIFwiOTgzOFwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC40NDcyMl0sXG4gICAgXCI5ODM5XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAwLjQ0NzIyXSxcbiAgICBcIjEwMjE2XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjQ0NzIyXSxcbiAgICBcIjEwMjE3XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjQ0NzIyXSxcbiAgICBcIjEwODE1XCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjldLFxuICAgIFwiMTA5MjdcIjogWzAuMTk2NjcsIDAuNjk2NjcsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiMTA5MjhcIjogWzAuMTk2NjcsIDAuNjk2NjcsIDAsIDAsIDAuODk0NDRdLFxuICAgIFwiNTczNzZcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDBdXG4gIH0sXG4gIFwiTWFpbi1Cb2xkSXRhbGljXCI6IHtcbiAgICBcIjMyXCI6IFswLCAwLCAwLCAwLCAwLjI1XSxcbiAgICBcIjMzXCI6IFswLCAwLjY5NDQ0LCAwLjExNDE3LCAwLCAwLjM4NjExXSxcbiAgICBcIjM0XCI6IFswLCAwLjY5NDQ0LCAwLjA3OTM5LCAwLCAwLjYyMDU1XSxcbiAgICBcIjM1XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLjA2ODMzLCAwLCAwLjk0NDQ0XSxcbiAgICBcIjM3XCI6IFswLjA1NTU2LCAwLjc1LCAwLjEyODYxLCAwLCAwLjk0NDQ0XSxcbiAgICBcIjM4XCI6IFswLCAwLjY5NDQ0LCAwLjA4NTI4LCAwLCAwLjg4NTU1XSxcbiAgICBcIjM5XCI6IFswLCAwLjY5NDQ0LCAwLjEyOTQ1LCAwLCAwLjM1NTU1XSxcbiAgICBcIjQwXCI6IFswLjI1LCAwLjc1LCAwLjE1ODA2LCAwLCAwLjQ3MzMzXSxcbiAgICBcIjQxXCI6IFswLjI1LCAwLjc1LCAwLjAzMzA2LCAwLCAwLjQ3MzMzXSxcbiAgICBcIjQyXCI6IFswLCAwLjc1LCAwLjE0MzMzLCAwLCAwLjU5MTExXSxcbiAgICBcIjQzXCI6IFswLjEwMzMzLCAwLjYwMzMzLCAwLjAzMzA2LCAwLCAwLjg4NTU1XSxcbiAgICBcIjQ0XCI6IFswLjE5NDQ0LCAwLjE0NzIyLCAwLCAwLCAwLjM1NTU1XSxcbiAgICBcIjQ1XCI6IFswLCAwLjQ0NDQ0LCAwLjAyNjExLCAwLCAwLjQxNDQ0XSxcbiAgICBcIjQ2XCI6IFswLCAwLjE0NzIyLCAwLCAwLCAwLjM1NTU1XSxcbiAgICBcIjQ3XCI6IFswLjI1LCAwLjc1LCAwLjE1ODA2LCAwLCAwLjU5MTExXSxcbiAgICBcIjQ4XCI6IFswLCAwLjY0NDQ0LCAwLjEzMTY3LCAwLCAwLjU5MTExXSxcbiAgICBcIjQ5XCI6IFswLCAwLjY0NDQ0LCAwLjEzMTY3LCAwLCAwLjU5MTExXSxcbiAgICBcIjUwXCI6IFswLCAwLjY0NDQ0LCAwLjEzMTY3LCAwLCAwLjU5MTExXSxcbiAgICBcIjUxXCI6IFswLCAwLjY0NDQ0LCAwLjEzMTY3LCAwLCAwLjU5MTExXSxcbiAgICBcIjUyXCI6IFswLjE5NDQ0LCAwLjY0NDQ0LCAwLjEzMTY3LCAwLCAwLjU5MTExXSxcbiAgICBcIjUzXCI6IFswLCAwLjY0NDQ0LCAwLjEzMTY3LCAwLCAwLjU5MTExXSxcbiAgICBcIjU0XCI6IFswLCAwLjY0NDQ0LCAwLjEzMTY3LCAwLCAwLjU5MTExXSxcbiAgICBcIjU1XCI6IFswLjE5NDQ0LCAwLjY0NDQ0LCAwLjEzMTY3LCAwLCAwLjU5MTExXSxcbiAgICBcIjU2XCI6IFswLCAwLjY0NDQ0LCAwLjEzMTY3LCAwLCAwLjU5MTExXSxcbiAgICBcIjU3XCI6IFswLCAwLjY0NDQ0LCAwLjEzMTY3LCAwLCAwLjU5MTExXSxcbiAgICBcIjU4XCI6IFswLCAwLjQ0NDQ0LCAwLjA2Njk1LCAwLCAwLjM1NTU1XSxcbiAgICBcIjU5XCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLjA2Njk1LCAwLCAwLjM1NTU1XSxcbiAgICBcIjYxXCI6IFstMC4xMDg4OSwgMC4zOTExMSwgMC4wNjgzMywgMCwgMC44ODU1NV0sXG4gICAgXCI2M1wiOiBbMCwgMC42OTQ0NCwgMC4xMTQ3MiwgMCwgMC41OTExMV0sXG4gICAgXCI2NFwiOiBbMCwgMC42OTQ0NCwgMC4wOTIwOCwgMCwgMC44ODU1NV0sXG4gICAgXCI2NVwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC44NjU1NV0sXG4gICAgXCI2NlwiOiBbMCwgMC42ODYxMSwgMC4wOTkyLCAwLCAwLjgxNjY2XSxcbiAgICBcIjY3XCI6IFswLCAwLjY4NjExLCAwLjE0MjA4LCAwLCAwLjgyNjY2XSxcbiAgICBcIjY4XCI6IFswLCAwLjY4NjExLCAwLjA5MDYyLCAwLCAwLjg3NTU1XSxcbiAgICBcIjY5XCI6IFswLCAwLjY4NjExLCAwLjExNDMxLCAwLCAwLjc1NjY2XSxcbiAgICBcIjcwXCI6IFswLCAwLjY4NjExLCAwLjEyOTAzLCAwLCAwLjcyNzIyXSxcbiAgICBcIjcxXCI6IFswLCAwLjY4NjExLCAwLjA3MzQ3LCAwLCAwLjg5NTI3XSxcbiAgICBcIjcyXCI6IFswLCAwLjY4NjExLCAwLjE3MjA4LCAwLCAwLjg5NjFdLFxuICAgIFwiNzNcIjogWzAsIDAuNjg2MTEsIDAuMTU2ODEsIDAsIDAuNDcxNjZdLFxuICAgIFwiNzRcIjogWzAsIDAuNjg2MTEsIDAuMTQ1LCAwLCAwLjYxMDU1XSxcbiAgICBcIjc1XCI6IFswLCAwLjY4NjExLCAwLjE0MjA4LCAwLCAwLjg5NDk5XSxcbiAgICBcIjc2XCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjY5Nzc3XSxcbiAgICBcIjc3XCI6IFswLCAwLjY4NjExLCAwLjE3MjA4LCAwLCAxLjA3Mjc3XSxcbiAgICBcIjc4XCI6IFswLCAwLjY4NjExLCAwLjE3MjA4LCAwLCAwLjg5NjFdLFxuICAgIFwiNzlcIjogWzAsIDAuNjg2MTEsIDAuMDkwNjIsIDAsIDAuODU0OTldLFxuICAgIFwiODBcIjogWzAsIDAuNjg2MTEsIDAuMDk5MiwgMCwgMC43ODcyMV0sXG4gICAgXCI4MVwiOiBbMC4xOTQ0NCwgMC42ODYxMSwgMC4wOTA2MiwgMCwgMC44NTQ5OV0sXG4gICAgXCI4MlwiOiBbMCwgMC42ODYxMSwgMC4wMjU1OSwgMCwgMC44NTk0NF0sXG4gICAgXCI4M1wiOiBbMCwgMC42ODYxMSwgMC4xMTI2NCwgMCwgMC42NDk5OV0sXG4gICAgXCI4NFwiOiBbMCwgMC42ODYxMSwgMC4xMjkwMywgMCwgMC43OTYxXSxcbiAgICBcIjg1XCI6IFswLCAwLjY4NjExLCAwLjE3MjA4LCAwLCAwLjg4MDgzXSxcbiAgICBcIjg2XCI6IFswLCAwLjY4NjExLCAwLjE4NjI1LCAwLCAwLjg2NTU1XSxcbiAgICBcIjg3XCI6IFswLCAwLjY4NjExLCAwLjE4NjI1LCAwLCAxLjE1OTk5XSxcbiAgICBcIjg4XCI6IFswLCAwLjY4NjExLCAwLjE1NjgxLCAwLCAwLjg2NTU1XSxcbiAgICBcIjg5XCI6IFswLCAwLjY4NjExLCAwLjE5ODAzLCAwLCAwLjg2NTU1XSxcbiAgICBcIjkwXCI6IFswLCAwLjY4NjExLCAwLjE0MjA4LCAwLCAwLjcwODg4XSxcbiAgICBcIjkxXCI6IFswLjI1LCAwLjc1LCAwLjE4NzUsIDAsIDAuMzU2MTFdLFxuICAgIFwiOTNcIjogWzAuMjUsIDAuNzUsIDAuMDk5NzIsIDAsIDAuMzU2MTFdLFxuICAgIFwiOTRcIjogWzAsIDAuNjk0NDQsIDAuMDY3MDksIDAsIDAuNTkxMTFdLFxuICAgIFwiOTVcIjogWzAuMzEsIDAuMTM0NDQsIDAuMDk4MTEsIDAsIDAuNTkxMTFdLFxuICAgIFwiOTdcIjogWzAsIDAuNDQ0NDQsIDAuMDk0MjYsIDAsIDAuNTkxMTFdLFxuICAgIFwiOThcIjogWzAsIDAuNjk0NDQsIDAuMDc4NjEsIDAsIDAuNTMyMjJdLFxuICAgIFwiOTlcIjogWzAsIDAuNDQ0NDQsIDAuMDUyMjIsIDAsIDAuNTMyMjJdLFxuICAgIFwiMTAwXCI6IFswLCAwLjY5NDQ0LCAwLjEwODYxLCAwLCAwLjU5MTExXSxcbiAgICBcIjEwMVwiOiBbMCwgMC40NDQ0NCwgMC4wODUsIDAsIDAuNTMyMjJdLFxuICAgIFwiMTAyXCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLjIxNzc4LCAwLCAwLjRdLFxuICAgIFwiMTAzXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLjEwNSwgMCwgMC41MzIyMl0sXG4gICAgXCIxMDRcIjogWzAsIDAuNjk0NDQsIDAuMDk0MjYsIDAsIDAuNTkxMTFdLFxuICAgIFwiMTA1XCI6IFswLCAwLjY5MzI2LCAwLjExMzg3LCAwLCAwLjM1NTU1XSxcbiAgICBcIjEwNlwiOiBbMC4xOTQ0NCwgMC42OTMyNiwgMC4xNjcyLCAwLCAwLjM1NTU1XSxcbiAgICBcIjEwN1wiOiBbMCwgMC42OTQ0NCwgMC4xMTExMSwgMCwgMC41MzIyMl0sXG4gICAgXCIxMDhcIjogWzAsIDAuNjk0NDQsIDAuMTA4NjEsIDAsIDAuMjk2NjZdLFxuICAgIFwiMTA5XCI6IFswLCAwLjQ0NDQ0LCAwLjA5NDI2LCAwLCAwLjk0NDQ0XSxcbiAgICBcIjExMFwiOiBbMCwgMC40NDQ0NCwgMC4wOTQyNiwgMCwgMC42NDk5OV0sXG4gICAgXCIxMTFcIjogWzAsIDAuNDQ0NDQsIDAuMDc4NjEsIDAsIDAuNTkxMTFdLFxuICAgIFwiMTEyXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLjA3ODYxLCAwLCAwLjU5MTExXSxcbiAgICBcIjExM1wiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMC4xMDUsIDAsIDAuNTMyMjJdLFxuICAgIFwiMTE0XCI6IFswLCAwLjQ0NDQ0LCAwLjExMTExLCAwLCAwLjUwMTY3XSxcbiAgICBcIjExNVwiOiBbMCwgMC40NDQ0NCwgMC4wODE2NywgMCwgMC40ODY5NF0sXG4gICAgXCIxMTZcIjogWzAsIDAuNjM0OTIsIDAuMDk2MzksIDAsIDAuMzg1XSxcbiAgICBcIjExN1wiOiBbMCwgMC40NDQ0NCwgMC4wOTQyNiwgMCwgMC42MjA1NV0sXG4gICAgXCIxMThcIjogWzAsIDAuNDQ0NDQsIDAuMTExMTEsIDAsIDAuNTMyMjJdLFxuICAgIFwiMTE5XCI6IFswLCAwLjQ0NDQ0LCAwLjExMTExLCAwLCAwLjc2Nzc3XSxcbiAgICBcIjEyMFwiOiBbMCwgMC40NDQ0NCwgMC4xMjU4MywgMCwgMC41NjA1NV0sXG4gICAgXCIxMjFcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAuMTA1LCAwLCAwLjU2MTY2XSxcbiAgICBcIjEyMlwiOiBbMCwgMC40NDQ0NCwgMC4xMzg4OSwgMCwgMC40OTA1NV0sXG4gICAgXCIxMjZcIjogWzAuMzUsIDAuMzQ0NDQsIDAuMTE0NzIsIDAsIDAuNTkxMTFdLFxuICAgIFwiMTYwXCI6IFswLCAwLCAwLCAwLCAwLjI1XSxcbiAgICBcIjE2OFwiOiBbMCwgMC42OTQ0NCwgMC4xMTQ3MywgMCwgMC41OTExMV0sXG4gICAgXCIxNzZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuOTQ4ODhdLFxuICAgIFwiMTg0XCI6IFswLjE3MDE0LCAwLCAwLCAwLCAwLjUzMjIyXSxcbiAgICBcIjE5OFwiOiBbMCwgMC42ODYxMSwgMC4xMTQzMSwgMCwgMS4wMjI3N10sXG4gICAgXCIyMTZcIjogWzAuMDQ4NjEsIDAuNzM0NzIsIDAuMDkwNjIsIDAsIDAuODg1NTVdLFxuICAgIFwiMjIzXCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLjA5NzM2LCAwLCAwLjY2NV0sXG4gICAgXCIyMzBcIjogWzAsIDAuNDQ0NDQsIDAuMDg1LCAwLCAwLjgyNjY2XSxcbiAgICBcIjI0OFwiOiBbMC4wOTcyMiwgMC41NDE2NywgMC4wOTQ1OCwgMCwgMC41OTExMV0sXG4gICAgXCIzMDVcIjogWzAsIDAuNDQ0NDQsIDAuMDk0MjYsIDAsIDAuMzU1NTVdLFxuICAgIFwiMzM4XCI6IFswLCAwLjY4NjExLCAwLjExNDMxLCAwLCAxLjE0MDU0XSxcbiAgICBcIjMzOVwiOiBbMCwgMC40NDQ0NCwgMC4wODUsIDAsIDAuODI2NjZdLFxuICAgIFwiNTY3XCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLjA0NjExLCAwLCAwLjM4NV0sXG4gICAgXCI3MTBcIjogWzAsIDAuNjk0NDQsIDAuMDY3MDksIDAsIDAuNTkxMTFdLFxuICAgIFwiNzExXCI6IFswLCAwLjYzMTk0LCAwLjA4MjcxLCAwLCAwLjU5MTExXSxcbiAgICBcIjcxM1wiOiBbMCwgMC41OTQ0NCwgMC4xMDQ0NCwgMCwgMC41OTExMV0sXG4gICAgXCI3MTRcIjogWzAsIDAuNjk0NDQsIDAuMDg1MjgsIDAsIDAuNTkxMTFdLFxuICAgIFwiNzE1XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU5MTExXSxcbiAgICBcIjcyOFwiOiBbMCwgMC42OTQ0NCwgMC4xMDMzMywgMCwgMC41OTExMV0sXG4gICAgXCI3MjlcIjogWzAsIDAuNjk0NDQsIDAuMTI5NDUsIDAsIDAuMzU1NTVdLFxuICAgIFwiNzMwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjk0ODg4XSxcbiAgICBcIjczMlwiOiBbMCwgMC42OTQ0NCwgMC4xMTQ3MiwgMCwgMC41OTExMV0sXG4gICAgXCI3MzNcIjogWzAsIDAuNjk0NDQsIDAuMTE0NzIsIDAsIDAuNTkxMTFdLFxuICAgIFwiOTE1XCI6IFswLCAwLjY4NjExLCAwLjEyOTAzLCAwLCAwLjY5Nzc3XSxcbiAgICBcIjkxNlwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC45NDQ0NF0sXG4gICAgXCI5MjBcIjogWzAsIDAuNjg2MTEsIDAuMDkwNjIsIDAsIDAuODg1NTVdLFxuICAgIFwiOTIzXCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjgwNjY2XSxcbiAgICBcIjkyNlwiOiBbMCwgMC42ODYxMSwgMC4xNTA5MiwgMCwgMC43Njc3N10sXG4gICAgXCI5MjhcIjogWzAsIDAuNjg2MTEsIDAuMTcyMDgsIDAsIDAuODk2MV0sXG4gICAgXCI5MzFcIjogWzAsIDAuNjg2MTEsIDAuMTE0MzEsIDAsIDAuODI2NjZdLFxuICAgIFwiOTMzXCI6IFswLCAwLjY4NjExLCAwLjEwNzc4LCAwLCAwLjg4NTU1XSxcbiAgICBcIjkzNFwiOiBbMCwgMC42ODYxMSwgMC4wNTYzMiwgMCwgMC44MjY2Nl0sXG4gICAgXCI5MzZcIjogWzAsIDAuNjg2MTEsIDAuMTA3NzgsIDAsIDAuODg1NTVdLFxuICAgIFwiOTM3XCI6IFswLCAwLjY4NjExLCAwLjA5OTIsIDAsIDAuODI2NjZdLFxuICAgIFwiODIxMVwiOiBbMCwgMC40NDQ0NCwgMC4wOTgxMSwgMCwgMC41OTExMV0sXG4gICAgXCI4MjEyXCI6IFswLCAwLjQ0NDQ0LCAwLjA5ODExLCAwLCAxLjE4MjIxXSxcbiAgICBcIjgyMTZcIjogWzAsIDAuNjk0NDQsIDAuMTI5NDUsIDAsIDAuMzU1NTVdLFxuICAgIFwiODIxN1wiOiBbMCwgMC42OTQ0NCwgMC4xMjk0NSwgMCwgMC4zNTU1NV0sXG4gICAgXCI4MjIwXCI6IFswLCAwLjY5NDQ0LCAwLjE2NzcyLCAwLCAwLjYyMDU1XSxcbiAgICBcIjgyMjFcIjogWzAsIDAuNjk0NDQsIDAuMDc5MzksIDAsIDAuNjIwNTVdXG4gIH0sXG4gIFwiTWFpbi1JdGFsaWNcIjoge1xuICAgIFwiMzJcIjogWzAsIDAsIDAsIDAsIDAuMjVdLFxuICAgIFwiMzNcIjogWzAsIDAuNjk0NDQsIDAuMTI0MTcsIDAsIDAuMzA2NjddLFxuICAgIFwiMzRcIjogWzAsIDAuNjk0NDQsIDAuMDY5NjEsIDAsIDAuNTE0NDRdLFxuICAgIFwiMzVcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAuMDY2MTYsIDAsIDAuODE3NzddLFxuICAgIFwiMzdcIjogWzAuMDU1NTYsIDAuNzUsIDAuMTM2MzksIDAsIDAuODE3NzddLFxuICAgIFwiMzhcIjogWzAsIDAuNjk0NDQsIDAuMDk2OTQsIDAsIDAuNzY2NjZdLFxuICAgIFwiMzlcIjogWzAsIDAuNjk0NDQsIDAuMTI0MTcsIDAsIDAuMzA2NjddLFxuICAgIFwiNDBcIjogWzAuMjUsIDAuNzUsIDAuMTYxOTQsIDAsIDAuNDA4ODldLFxuICAgIFwiNDFcIjogWzAuMjUsIDAuNzUsIDAuMDM2OTQsIDAsIDAuNDA4ODldLFxuICAgIFwiNDJcIjogWzAsIDAuNzUsIDAuMTQ5MTcsIDAsIDAuNTExMTFdLFxuICAgIFwiNDNcIjogWzAuMDU2NjcsIDAuNTYxNjcsIDAuMDM2OTQsIDAsIDAuNzY2NjZdLFxuICAgIFwiNDRcIjogWzAuMTk0NDQsIDAuMTA1NTYsIDAsIDAsIDAuMzA2NjddLFxuICAgIFwiNDVcIjogWzAsIDAuNDMwNTYsIDAuMDI4MjYsIDAsIDAuMzU3NzhdLFxuICAgIFwiNDZcIjogWzAsIDAuMTA1NTYsIDAsIDAsIDAuMzA2NjddLFxuICAgIFwiNDdcIjogWzAuMjUsIDAuNzUsIDAuMTYxOTQsIDAsIDAuNTExMTFdLFxuICAgIFwiNDhcIjogWzAsIDAuNjQ0NDQsIDAuMTM1NTYsIDAsIDAuNTExMTFdLFxuICAgIFwiNDlcIjogWzAsIDAuNjQ0NDQsIDAuMTM1NTYsIDAsIDAuNTExMTFdLFxuICAgIFwiNTBcIjogWzAsIDAuNjQ0NDQsIDAuMTM1NTYsIDAsIDAuNTExMTFdLFxuICAgIFwiNTFcIjogWzAsIDAuNjQ0NDQsIDAuMTM1NTYsIDAsIDAuNTExMTFdLFxuICAgIFwiNTJcIjogWzAuMTk0NDQsIDAuNjQ0NDQsIDAuMTM1NTYsIDAsIDAuNTExMTFdLFxuICAgIFwiNTNcIjogWzAsIDAuNjQ0NDQsIDAuMTM1NTYsIDAsIDAuNTExMTFdLFxuICAgIFwiNTRcIjogWzAsIDAuNjQ0NDQsIDAuMTM1NTYsIDAsIDAuNTExMTFdLFxuICAgIFwiNTVcIjogWzAuMTk0NDQsIDAuNjQ0NDQsIDAuMTM1NTYsIDAsIDAuNTExMTFdLFxuICAgIFwiNTZcIjogWzAsIDAuNjQ0NDQsIDAuMTM1NTYsIDAsIDAuNTExMTFdLFxuICAgIFwiNTdcIjogWzAsIDAuNjQ0NDQsIDAuMTM1NTYsIDAsIDAuNTExMTFdLFxuICAgIFwiNThcIjogWzAsIDAuNDMwNTYsIDAuMDU4MiwgMCwgMC4zMDY2N10sXG4gICAgXCI1OVwiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMC4wNTgyLCAwLCAwLjMwNjY3XSxcbiAgICBcIjYxXCI6IFstMC4xMzMxMywgMC4zNjY4NywgMC4wNjYxNiwgMCwgMC43NjY2Nl0sXG4gICAgXCI2M1wiOiBbMCwgMC42OTQ0NCwgMC4xMjI1LCAwLCAwLjUxMTExXSxcbiAgICBcIjY0XCI6IFswLCAwLjY5NDQ0LCAwLjA5NTk3LCAwLCAwLjc2NjY2XSxcbiAgICBcIjY1XCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjc0MzMzXSxcbiAgICBcIjY2XCI6IFswLCAwLjY4MzMzLCAwLjEwMjU3LCAwLCAwLjcwMzg5XSxcbiAgICBcIjY3XCI6IFswLCAwLjY4MzMzLCAwLjE0NTI4LCAwLCAwLjcxNTU1XSxcbiAgICBcIjY4XCI6IFswLCAwLjY4MzMzLCAwLjA5NDAzLCAwLCAwLjc1NV0sXG4gICAgXCI2OVwiOiBbMCwgMC42ODMzMywgMC4xMjAyOCwgMCwgMC42NzgzM10sXG4gICAgXCI3MFwiOiBbMCwgMC42ODMzMywgMC4xMzMwNSwgMCwgMC42NTI3N10sXG4gICAgXCI3MVwiOiBbMCwgMC42ODMzMywgMC4wODcyMiwgMCwgMC43NzM2MV0sXG4gICAgXCI3MlwiOiBbMCwgMC42ODMzMywgMC4xNjM4OSwgMCwgMC43NDMzM10sXG4gICAgXCI3M1wiOiBbMCwgMC42ODMzMywgMC4xNTgwNiwgMCwgMC4zODU1NV0sXG4gICAgXCI3NFwiOiBbMCwgMC42ODMzMywgMC4xNDAyOCwgMCwgMC41MjVdLFxuICAgIFwiNzVcIjogWzAsIDAuNjgzMzMsIDAuMTQ1MjgsIDAsIDAuNzY4ODhdLFxuICAgIFwiNzZcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNjI3MjJdLFxuICAgIFwiNzdcIjogWzAsIDAuNjgzMzMsIDAuMTYzODksIDAsIDAuODk2NjZdLFxuICAgIFwiNzhcIjogWzAsIDAuNjgzMzMsIDAuMTYzODksIDAsIDAuNzQzMzNdLFxuICAgIFwiNzlcIjogWzAsIDAuNjgzMzMsIDAuMDk0MDMsIDAsIDAuNzY2NjZdLFxuICAgIFwiODBcIjogWzAsIDAuNjgzMzMsIDAuMTAyNTcsIDAsIDAuNjc4MzNdLFxuICAgIFwiODFcIjogWzAuMTk0NDQsIDAuNjgzMzMsIDAuMDk0MDMsIDAsIDAuNzY2NjZdLFxuICAgIFwiODJcIjogWzAsIDAuNjgzMzMsIDAuMDM4NjgsIDAsIDAuNzI5NDRdLFxuICAgIFwiODNcIjogWzAsIDAuNjgzMzMsIDAuMTE5NzIsIDAsIDAuNTYyMjJdLFxuICAgIFwiODRcIjogWzAsIDAuNjgzMzMsIDAuMTMzMDUsIDAsIDAuNzE1NTVdLFxuICAgIFwiODVcIjogWzAsIDAuNjgzMzMsIDAuMTYzODksIDAsIDAuNzQzMzNdLFxuICAgIFwiODZcIjogWzAsIDAuNjgzMzMsIDAuMTgzNjEsIDAsIDAuNzQzMzNdLFxuICAgIFwiODdcIjogWzAsIDAuNjgzMzMsIDAuMTgzNjEsIDAsIDAuOTk4ODhdLFxuICAgIFwiODhcIjogWzAsIDAuNjgzMzMsIDAuMTU4MDYsIDAsIDAuNzQzMzNdLFxuICAgIFwiODlcIjogWzAsIDAuNjgzMzMsIDAuMTkzODMsIDAsIDAuNzQzMzNdLFxuICAgIFwiOTBcIjogWzAsIDAuNjgzMzMsIDAuMTQ1MjgsIDAsIDAuNjEzMzNdLFxuICAgIFwiOTFcIjogWzAuMjUsIDAuNzUsIDAuMTg3NSwgMCwgMC4zMDY2N10sXG4gICAgXCI5M1wiOiBbMC4yNSwgMC43NSwgMC4xMDUyOCwgMCwgMC4zMDY2N10sXG4gICAgXCI5NFwiOiBbMCwgMC42OTQ0NCwgMC4wNjY0NiwgMCwgMC41MTExMV0sXG4gICAgXCI5NVwiOiBbMC4zMSwgMC4xMjA1NiwgMC4wOTIwOCwgMCwgMC41MTExMV0sXG4gICAgXCI5N1wiOiBbMCwgMC40MzA1NiwgMC4wNzY3MSwgMCwgMC41MTExMV0sXG4gICAgXCI5OFwiOiBbMCwgMC42OTQ0NCwgMC4wNjMxMiwgMCwgMC40Nl0sXG4gICAgXCI5OVwiOiBbMCwgMC40MzA1NiwgMC4wNTY1MywgMCwgMC40Nl0sXG4gICAgXCIxMDBcIjogWzAsIDAuNjk0NDQsIDAuMTAzMzMsIDAsIDAuNTExMTFdLFxuICAgIFwiMTAxXCI6IFswLCAwLjQzMDU2LCAwLjA3NTE0LCAwLCAwLjQ2XSxcbiAgICBcIjEwMlwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMC4yMTE5NCwgMCwgMC4zMDY2N10sXG4gICAgXCIxMDNcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAuMDg4NDcsIDAsIDAuNDZdLFxuICAgIFwiMTA0XCI6IFswLCAwLjY5NDQ0LCAwLjA3NjcxLCAwLCAwLjUxMTExXSxcbiAgICBcIjEwNVwiOiBbMCwgMC42NTUzNiwgMC4xMDE5LCAwLCAwLjMwNjY3XSxcbiAgICBcIjEwNlwiOiBbMC4xOTQ0NCwgMC42NTUzNiwgMC4xNDQ2NywgMCwgMC4zMDY2N10sXG4gICAgXCIxMDdcIjogWzAsIDAuNjk0NDQsIDAuMTA3NjQsIDAsIDAuNDZdLFxuICAgIFwiMTA4XCI6IFswLCAwLjY5NDQ0LCAwLjEwMzMzLCAwLCAwLjI1NTU1XSxcbiAgICBcIjEwOVwiOiBbMCwgMC40MzA1NiwgMC4wNzY3MSwgMCwgMC44MTc3N10sXG4gICAgXCIxMTBcIjogWzAsIDAuNDMwNTYsIDAuMDc2NzEsIDAsIDAuNTYyMjJdLFxuICAgIFwiMTExXCI6IFswLCAwLjQzMDU2LCAwLjA2MzEyLCAwLCAwLjUxMTExXSxcbiAgICBcIjExMlwiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMC4wNjMxMiwgMCwgMC41MTExMV0sXG4gICAgXCIxMTNcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAuMDg4NDcsIDAsIDAuNDZdLFxuICAgIFwiMTE0XCI6IFswLCAwLjQzMDU2LCAwLjEwNzY0LCAwLCAwLjQyMTY2XSxcbiAgICBcIjExNVwiOiBbMCwgMC40MzA1NiwgMC4wODIwOCwgMCwgMC40MDg4OV0sXG4gICAgXCIxMTZcIjogWzAsIDAuNjE1MDgsIDAuMDk0ODYsIDAsIDAuMzMyMjJdLFxuICAgIFwiMTE3XCI6IFswLCAwLjQzMDU2LCAwLjA3NjcxLCAwLCAwLjUzNjY2XSxcbiAgICBcIjExOFwiOiBbMCwgMC40MzA1NiwgMC4xMDc2NCwgMCwgMC40Nl0sXG4gICAgXCIxMTlcIjogWzAsIDAuNDMwNTYsIDAuMTA3NjQsIDAsIDAuNjY0NDRdLFxuICAgIFwiMTIwXCI6IFswLCAwLjQzMDU2LCAwLjEyMDQyLCAwLCAwLjQ2Mzg5XSxcbiAgICBcIjEyMVwiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMC4wODg0NywgMCwgMC40ODU1NV0sXG4gICAgXCIxMjJcIjogWzAsIDAuNDMwNTYsIDAuMTIyOTIsIDAsIDAuNDA4ODldLFxuICAgIFwiMTI2XCI6IFswLjM1LCAwLjMxNzg2LCAwLjExNTg1LCAwLCAwLjUxMTExXSxcbiAgICBcIjE2MFwiOiBbMCwgMCwgMCwgMCwgMC4yNV0sXG4gICAgXCIxNjhcIjogWzAsIDAuNjY3ODYsIDAuMTA0NzQsIDAsIDAuNTExMTFdLFxuICAgIFwiMTc2XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjgzMTI5XSxcbiAgICBcIjE4NFwiOiBbMC4xNzAxNCwgMCwgMCwgMCwgMC40Nl0sXG4gICAgXCIxOThcIjogWzAsIDAuNjgzMzMsIDAuMTIwMjgsIDAsIDAuODgyNzddLFxuICAgIFwiMjE2XCI6IFswLjA0ODYxLCAwLjczMTk0LCAwLjA5NDAzLCAwLCAwLjc2NjY2XSxcbiAgICBcIjIyM1wiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMC4xMDUxNCwgMCwgMC41MzY2Nl0sXG4gICAgXCIyMzBcIjogWzAsIDAuNDMwNTYsIDAuMDc1MTQsIDAsIDAuNzE1NTVdLFxuICAgIFwiMjQ4XCI6IFswLjA5NzIyLCAwLjUyNzc4LCAwLjA5MTk0LCAwLCAwLjUxMTExXSxcbiAgICBcIjMzOFwiOiBbMCwgMC42ODMzMywgMC4xMjAyOCwgMCwgMC45ODQ5OV0sXG4gICAgXCIzMzlcIjogWzAsIDAuNDMwNTYsIDAuMDc1MTQsIDAsIDAuNzE1NTVdLFxuICAgIFwiNzEwXCI6IFswLCAwLjY5NDQ0LCAwLjA2NjQ2LCAwLCAwLjUxMTExXSxcbiAgICBcIjcxMVwiOiBbMCwgMC42Mjg0NywgMC4wODI5NSwgMCwgMC41MTExMV0sXG4gICAgXCI3MTNcIjogWzAsIDAuNTYxNjcsIDAuMTAzMzMsIDAsIDAuNTExMTFdLFxuICAgIFwiNzE0XCI6IFswLCAwLjY5NDQ0LCAwLjA5Njk0LCAwLCAwLjUxMTExXSxcbiAgICBcIjcxNVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41MTExMV0sXG4gICAgXCI3MjhcIjogWzAsIDAuNjk0NDQsIDAuMTA4MDYsIDAsIDAuNTExMTFdLFxuICAgIFwiNzI5XCI6IFswLCAwLjY2Nzg2LCAwLjExNzUyLCAwLCAwLjMwNjY3XSxcbiAgICBcIjczMFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC44MzEyOV0sXG4gICAgXCI3MzJcIjogWzAsIDAuNjY3ODYsIDAuMTE1ODUsIDAsIDAuNTExMTFdLFxuICAgIFwiNzMzXCI6IFswLCAwLjY5NDQ0LCAwLjEyMjUsIDAsIDAuNTExMTFdLFxuICAgIFwiOTE1XCI6IFswLCAwLjY4MzMzLCAwLjEzMzA1LCAwLCAwLjYyNzIyXSxcbiAgICBcIjkxNlwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC44MTc3N10sXG4gICAgXCI5MjBcIjogWzAsIDAuNjgzMzMsIDAuMDk0MDMsIDAsIDAuNzY2NjZdLFxuICAgIFwiOTIzXCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjY5MjIyXSxcbiAgICBcIjkyNlwiOiBbMCwgMC42ODMzMywgMC4xNTI5NCwgMCwgMC42NjQ0NF0sXG4gICAgXCI5MjhcIjogWzAsIDAuNjgzMzMsIDAuMTYzODksIDAsIDAuNzQzMzNdLFxuICAgIFwiOTMxXCI6IFswLCAwLjY4MzMzLCAwLjEyMDI4LCAwLCAwLjcxNTU1XSxcbiAgICBcIjkzM1wiOiBbMCwgMC42ODMzMywgMC4xMTExMSwgMCwgMC43NjY2Nl0sXG4gICAgXCI5MzRcIjogWzAsIDAuNjgzMzMsIDAuMDU5ODYsIDAsIDAuNzE1NTVdLFxuICAgIFwiOTM2XCI6IFswLCAwLjY4MzMzLCAwLjExMTExLCAwLCAwLjc2NjY2XSxcbiAgICBcIjkzN1wiOiBbMCwgMC42ODMzMywgMC4xMDI1NywgMCwgMC43MTU1NV0sXG4gICAgXCI4MjExXCI6IFswLCAwLjQzMDU2LCAwLjA5MjA4LCAwLCAwLjUxMTExXSxcbiAgICBcIjgyMTJcIjogWzAsIDAuNDMwNTYsIDAuMDkyMDgsIDAsIDEuMDIyMjJdLFxuICAgIFwiODIxNlwiOiBbMCwgMC42OTQ0NCwgMC4xMjQxNywgMCwgMC4zMDY2N10sXG4gICAgXCI4MjE3XCI6IFswLCAwLjY5NDQ0LCAwLjEyNDE3LCAwLCAwLjMwNjY3XSxcbiAgICBcIjgyMjBcIjogWzAsIDAuNjk0NDQsIDAuMTY4NSwgMCwgMC41MTQ0NF0sXG4gICAgXCI4MjIxXCI6IFswLCAwLjY5NDQ0LCAwLjA2OTYxLCAwLCAwLjUxNDQ0XSxcbiAgICBcIjg0NjNcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNTQwMjhdXG4gIH0sXG4gIFwiTWFpbi1SZWd1bGFyXCI6IHtcbiAgICBcIjMyXCI6IFswLCAwLCAwLCAwLCAwLjI1XSxcbiAgICBcIjMzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjM0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiMzVcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuODMzMzRdLFxuICAgIFwiMzZcIjogWzAuMDU1NTYsIDAuNzUsIDAsIDAsIDAuNV0sXG4gICAgXCIzN1wiOiBbMC4wNTU1NiwgMC43NSwgMCwgMCwgMC44MzMzNF0sXG4gICAgXCIzOFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCIzOVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI0MFwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC4zODg4OV0sXG4gICAgXCI0MVwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC4zODg4OV0sXG4gICAgXCI0MlwiOiBbMCwgMC43NSwgMCwgMCwgMC41XSxcbiAgICBcIjQzXCI6IFswLjA4MzMzLCAwLjU4MzMzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjQ0XCI6IFswLjE5NDQ0LCAwLjEwNTU2LCAwLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjQ1XCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjMzMzMzXSxcbiAgICBcIjQ2XCI6IFswLCAwLjEwNTU2LCAwLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjQ3XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjVdLFxuICAgIFwiNDhcIjogWzAsIDAuNjQ0NDQsIDAsIDAsIDAuNV0sXG4gICAgXCI0OVwiOiBbMCwgMC42NDQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjUwXCI6IFswLCAwLjY0NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiNTFcIjogWzAsIDAuNjQ0NDQsIDAsIDAsIDAuNV0sXG4gICAgXCI1MlwiOiBbMCwgMC42NDQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjUzXCI6IFswLCAwLjY0NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiNTRcIjogWzAsIDAuNjQ0NDQsIDAsIDAsIDAuNV0sXG4gICAgXCI1NVwiOiBbMCwgMC42NDQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjU2XCI6IFswLCAwLjY0NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiNTdcIjogWzAsIDAuNjQ0NDQsIDAsIDAsIDAuNV0sXG4gICAgXCI1OFwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI1OVwiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI2MFwiOiBbMC4wMzkxLCAwLjUzOTEsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiNjFcIjogWy0wLjEzMzEzLCAwLjM2Njg3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjYyXCI6IFswLjAzOTEsIDAuNTM5MSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI2M1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC40NzIyMl0sXG4gICAgXCI2NFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI2NVwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC43NV0sXG4gICAgXCI2NlwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC43MDgzNF0sXG4gICAgXCI2N1wiOiBbMCwgMC42ODMzMywgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI2OFwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC43NjM4OV0sXG4gICAgXCI2OVwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC42ODA1Nl0sXG4gICAgXCI3MFwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC42NTI3OF0sXG4gICAgXCI3MVwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC43ODQ3Ml0sXG4gICAgXCI3MlwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC43NV0sXG4gICAgXCI3M1wiOiBbMCwgMC42ODMzMywgMCwgMCwgMC4zNjExMV0sXG4gICAgXCI3NFwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC41MTM4OV0sXG4gICAgXCI3NVwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI3NlwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC42MjVdLFxuICAgIFwiNzdcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuOTE2NjddLFxuICAgIFwiNzhcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzVdLFxuICAgIFwiNzlcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODBcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNjgwNTZdLFxuICAgIFwiODFcIjogWzAuMTk0NDQsIDAuNjgzMzMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODJcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzM2MTFdLFxuICAgIFwiODNcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNTU1NTZdLFxuICAgIFwiODRcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiODVcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzVdLFxuICAgIFwiODZcIjogWzAsIDAuNjgzMzMsIDAuMDEzODksIDAsIDAuNzVdLFxuICAgIFwiODdcIjogWzAsIDAuNjgzMzMsIDAuMDEzODksIDAsIDEuMDI3NzhdLFxuICAgIFwiODhcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzVdLFxuICAgIFwiODlcIjogWzAsIDAuNjgzMzMsIDAuMDI1LCAwLCAwLjc1XSxcbiAgICBcIjkwXCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjkxXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjkyXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjVdLFxuICAgIFwiOTNcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiOTRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNV0sXG4gICAgXCI5NVwiOiBbMC4zMSwgMC4xMjA1NiwgMC4wMjc3OCwgMCwgMC41XSxcbiAgICBcIjk3XCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjVdLFxuICAgIFwiOThcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTU1NTZdLFxuICAgIFwiOTlcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNDQ0NDVdLFxuICAgIFwiMTAwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjEwMVwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC40NDQ0NV0sXG4gICAgXCIxMDJcIjogWzAsIDAuNjk0NDQsIDAuMDc3NzgsIDAsIDAuMzA1NTZdLFxuICAgIFwiMTAzXCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLjAxMzg5LCAwLCAwLjVdLFxuICAgIFwiMTA0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjEwNVwiOiBbMCwgMC42Njc4NiwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCIxMDZcIjogWzAuMTk0NDQsIDAuNjY3ODYsIDAsIDAsIDAuMzA1NTZdLFxuICAgIFwiMTA3XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjUyNzc4XSxcbiAgICBcIjEwOFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCIxMDlcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuODMzMzRdLFxuICAgIFwiMTEwXCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjExMVwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC41XSxcbiAgICBcIjExMlwiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMCwgMCwgMC41NTU1Nl0sXG4gICAgXCIxMTNcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAsIDAsIDAuNTI3NzhdLFxuICAgIFwiMTE0XCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjM5MTY3XSxcbiAgICBcIjExNVwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC4zOTQ0NV0sXG4gICAgXCIxMTZcIjogWzAsIDAuNjE1MDgsIDAsIDAsIDAuMzg4ODldLFxuICAgIFwiMTE3XCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjExOFwiOiBbMCwgMC40MzA1NiwgMC4wMTM4OSwgMCwgMC41Mjc3OF0sXG4gICAgXCIxMTlcIjogWzAsIDAuNDMwNTYsIDAuMDEzODksIDAsIDAuNzIyMjJdLFxuICAgIFwiMTIwXCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjUyNzc4XSxcbiAgICBcIjEyMVwiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMC4wMTM4OSwgMCwgMC41Mjc3OF0sXG4gICAgXCIxMjJcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNDQ0NDVdLFxuICAgIFwiMTIzXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjVdLFxuICAgIFwiMTI0XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjEyNVwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC41XSxcbiAgICBcIjEyNlwiOiBbMC4zNSwgMC4zMTc4NiwgMCwgMCwgMC41XSxcbiAgICBcIjE2MFwiOiBbMCwgMCwgMCwgMCwgMC4yNV0sXG4gICAgXCIxNjNcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzY5MDldLFxuICAgIFwiMTY3XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAwLjQ0NDQ1XSxcbiAgICBcIjE2OFwiOiBbMCwgMC42Njc4NiwgMCwgMCwgMC41XSxcbiAgICBcIjE3MlwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC42NjY2N10sXG4gICAgXCIxNzZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzVdLFxuICAgIFwiMTc3XCI6IFswLjA4MzMzLCAwLjU4MzMzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjE4MlwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC42MTExMV0sXG4gICAgXCIxODRcIjogWzAuMTcwMTQsIDAsIDAsIDAsIDAuNDQ0NDVdLFxuICAgIFwiMTk4XCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjkwMjc4XSxcbiAgICBcIjIxNVwiOiBbMC4wODMzMywgMC41ODMzMywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCIyMTZcIjogWzAuMDQ4NjEsIDAuNzMxOTQsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiMjIzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiMjMwXCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjI0N1wiOiBbMC4wODMzMywgMC41ODMzMywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCIyNDhcIjogWzAuMDk3MjIsIDAuNTI3NzgsIDAsIDAsIDAuNV0sXG4gICAgXCIzMDVcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiMzM4XCI6IFswLCAwLjY4MzMzLCAwLCAwLCAxLjAxMzg5XSxcbiAgICBcIjMzOVwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI1NjdcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAsIDAsIDAuMzA1NTZdLFxuICAgIFwiNzEwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiNzExXCI6IFswLCAwLjYyODQ3LCAwLCAwLCAwLjVdLFxuICAgIFwiNzEzXCI6IFswLCAwLjU2Nzc4LCAwLCAwLCAwLjVdLFxuICAgIFwiNzE0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiNzE1XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiNzI4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiNzI5XCI6IFswLCAwLjY2Nzg2LCAwLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjczMFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43NV0sXG4gICAgXCI3MzJcIjogWzAsIDAuNjY3ODYsIDAsIDAsIDAuNV0sXG4gICAgXCI3MzNcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNV0sXG4gICAgXCI5MTVcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNjI1XSxcbiAgICBcIjkxNlwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC44MzMzNF0sXG4gICAgXCI5MjBcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiOTIzXCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjY5NDQ1XSxcbiAgICBcIjkyNlwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC42NjY2N10sXG4gICAgXCI5MjhcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzVdLFxuICAgIFwiOTMxXCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjkzM1wiOiBbMCwgMC42ODMzMywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI5MzRcIjogWzAsIDAuNjgzMzMsIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiOTM2XCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjkzN1wiOiBbMCwgMC42ODMzMywgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI4MjExXCI6IFswLCAwLjQzMDU2LCAwLjAyNzc4LCAwLCAwLjVdLFxuICAgIFwiODIxMlwiOiBbMCwgMC40MzA1NiwgMC4wMjc3OCwgMCwgMS4wXSxcbiAgICBcIjgyMTZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiODIxN1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI4MjIwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiODIyMVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjgyMjRcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuNDQ0NDVdLFxuICAgIFwiODIyNVwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC40NDQ0NV0sXG4gICAgXCI4MjMwXCI6IFswLCAwLjEyMywgMCwgMCwgMS4xNzJdLFxuICAgIFwiODI0MlwiOiBbMCwgMC41NTU1NiwgMCwgMCwgMC4yNzVdLFxuICAgIFwiODQwN1wiOiBbMCwgMC43MTQ0NCwgMC4xNTM4MiwgMCwgMC41XSxcbiAgICBcIjg0NjNcIjogWzAsIDAuNjg4ODksIDAsIDAsIDAuNTQwMjhdLFxuICAgIFwiODQ2NVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI4NDY3XCI6IFswLCAwLjY5NDQ0LCAwLCAwLjExMTExLCAwLjQxNjY3XSxcbiAgICBcIjg0NzJcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAsIDAuMTExMTEsIDAuNjM2NDZdLFxuICAgIFwiODQ3NlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI4NTAxXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjg1OTJcIjogWy0wLjEzMzEzLCAwLjM2Njg3LCAwLCAwLCAxLjBdLFxuICAgIFwiODU5M1wiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjg1OTRcIjogWy0wLjEzMzEzLCAwLjM2Njg3LCAwLCAwLCAxLjBdLFxuICAgIFwiODU5NVwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjg1OTZcIjogWy0wLjEzMzEzLCAwLjM2Njg3LCAwLCAwLCAxLjBdLFxuICAgIFwiODU5N1wiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC41XSxcbiAgICBcIjg1OThcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDEuMF0sXG4gICAgXCI4NTk5XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAxLjBdLFxuICAgIFwiODYwMFwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMS4wXSxcbiAgICBcIjg2MDFcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjE0XCI6IFswLjAxMSwgMC41MTEsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjE3XCI6IFswLjAxMSwgMC41MTEsIDAsIDAsIDEuMTI2XSxcbiAgICBcIjg2MThcIjogWzAuMDExLCAwLjUxMSwgMCwgMCwgMS4xMjZdLFxuICAgIFwiODYzNlwiOiBbLTAuMTMzMTMsIDAuMzY2ODcsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjM3XCI6IFstMC4xMzMxMywgMC4zNjY4NywgMCwgMCwgMS4wXSxcbiAgICBcIjg2NDBcIjogWy0wLjEzMzEzLCAwLjM2Njg3LCAwLCAwLCAxLjBdLFxuICAgIFwiODY0MVwiOiBbLTAuMTMzMTMsIDAuMzY2ODcsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjUyXCI6IFswLjAxMSwgMC42NzEsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjU2XCI6IFstMC4xMzMxMywgMC4zNjY4NywgMCwgMCwgMS4wXSxcbiAgICBcIjg2NTdcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuNjExMTFdLFxuICAgIFwiODY1OFwiOiBbLTAuMTMzMTMsIDAuMzY2ODcsIDAsIDAsIDEuMF0sXG4gICAgXCI4NjU5XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjg2NjBcIjogWy0wLjEzMzEzLCAwLjM2Njg3LCAwLCAwLCAxLjBdLFxuICAgIFwiODY2MVwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC42MTExMV0sXG4gICAgXCI4NzA0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjg3MDZcIjogWzAsIDAuNjk0NDQsIDAuMDU1NTYsIDAuMDgzMzQsIDAuNTMwOV0sXG4gICAgXCI4NzA3XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjg3MDlcIjogWzAuMDU1NTYsIDAuNzUsIDAsIDAsIDAuNV0sXG4gICAgXCI4NzExXCI6IFswLCAwLjY4MzMzLCAwLCAwLCAwLjgzMzM0XSxcbiAgICBcIjg3MTJcIjogWzAuMDM5MSwgMC41MzkxLCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjg3MTVcIjogWzAuMDM5MSwgMC41MzkxLCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjg3MjJcIjogWzAuMDgzMzMsIDAuNTgzMzMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODcyM1wiOiBbMC4wODMzMywgMC41ODMzMywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4NzI1XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjVdLFxuICAgIFwiODcyNlwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC41XSxcbiAgICBcIjg3MjdcIjogWy0wLjAzNDcyLCAwLjQ2NTI4LCAwLCAwLCAwLjVdLFxuICAgIFwiODcyOFwiOiBbLTAuMDU1NTUsIDAuNDQ0NDUsIDAsIDAsIDAuNV0sXG4gICAgXCI4NzI5XCI6IFstMC4wNTU1NSwgMC40NDQ0NSwgMCwgMCwgMC41XSxcbiAgICBcIjg3MzBcIjogWzAuMiwgMC44LCAwLCAwLCAwLjgzMzM0XSxcbiAgICBcIjg3MzNcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODczNFwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMS4wXSxcbiAgICBcIjg3MzZcIjogWzAsIDAuNjkyMjQsIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiODczOVwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI4NzQxXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjVdLFxuICAgIFwiODc0M1wiOiBbMCwgMC41NTU1NiwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI4NzQ0XCI6IFswLCAwLjU1NTU2LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjg3NDVcIjogWzAsIDAuNTU1NTYsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiODc0NlwiOiBbMCwgMC41NTU1NiwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI4NzQ3XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLjExMTExLCAwLCAwLjQxNjY3XSxcbiAgICBcIjg3NjRcIjogWy0wLjEzMzEzLCAwLjM2Njg3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg3NjhcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiODc3MVwiOiBbLTAuMDM2MjUsIDAuNDYzNzUsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODc3M1wiOiBbLTAuMDIyLCAwLjU4OSwgMCwgMCwgMS4wXSxcbiAgICBcIjg3NzZcIjogWy0wLjAxNjg4LCAwLjQ4MzEyLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg3ODFcIjogWy0wLjAzNjI1LCAwLjQ2Mzc1LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg3ODRcIjogWy0wLjEzMywgMC42NzMsIDAsIDAsIDAuNzc4XSxcbiAgICBcIjg4MDFcIjogWy0wLjAzNjI1LCAwLjQ2Mzc1LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4MDRcIjogWzAuMTM1OTcsIDAuNjM1OTcsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgwNVwiOiBbMC4xMzU5NywgMC42MzU5NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODEwXCI6IFswLjAzOTEsIDAuNTM5MSwgMCwgMCwgMS4wXSxcbiAgICBcIjg4MTFcIjogWzAuMDM5MSwgMC41MzkxLCAwLCAwLCAxLjBdLFxuICAgIFwiODgyNlwiOiBbMC4wMzkxLCAwLjUzOTEsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgyN1wiOiBbMC4wMzkxLCAwLjUzOTEsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgzNFwiOiBbMC4wMzkxLCAwLjUzOTEsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgzNVwiOiBbMC4wMzkxLCAwLjUzOTEsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODgzOFwiOiBbMC4xMzU5NywgMC42MzU5NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODM5XCI6IFswLjEzNTk3LCAwLjYzNTk3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4NDZcIjogWzAsIDAuNTU1NTYsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiODg0OVwiOiBbMC4xMzU5NywgMC42MzU5NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODUwXCI6IFswLjEzNTk3LCAwLjYzNTk3LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4NTFcIjogWzAsIDAuNTU1NTYsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiODg1MlwiOiBbMCwgMC41NTU1NiwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI4ODUzXCI6IFswLjA4MzMzLCAwLjU4MzMzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4NTRcIjogWzAuMDgzMzMsIDAuNTgzMzMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg1NVwiOiBbMC4wODMzMywgMC41ODMzMywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODU2XCI6IFswLjA4MzMzLCAwLjU4MzMzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg4NTdcIjogWzAuMDgzMzMsIDAuNTgzMzMsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg2NlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42MTExMV0sXG4gICAgXCI4ODY3XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjg4NjhcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiODg2OVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4ODcyXCI6IFswLjI0OSwgMC43NSwgMCwgMCwgMC44NjddLFxuICAgIFwiODkwMFwiOiBbLTAuMDU1NTUsIDAuNDQ0NDUsIDAsIDAsIDAuNV0sXG4gICAgXCI4OTAxXCI6IFstMC4wNTU1NSwgMC40NDQ0NSwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI4OTAyXCI6IFstMC4wMzQ3MiwgMC40NjUyOCwgMCwgMCwgMC41XSxcbiAgICBcIjg5MDRcIjogWzAuMDA1LCAwLjUwNSwgMCwgMCwgMC45XSxcbiAgICBcIjg5NDJcIjogWzAuMDMsIDAuOTAzLCAwLCAwLCAwLjI3OF0sXG4gICAgXCI4OTQzXCI6IFstMC4xOSwgMC4zMTMsIDAsIDAsIDEuMTcyXSxcbiAgICBcIjg5NDVcIjogWy0wLjEsIDAuODIzLCAwLCAwLCAxLjI4Ml0sXG4gICAgXCI4OTY4XCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjQ0NDQ1XSxcbiAgICBcIjg5NjlcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNDQ0NDVdLFxuICAgIFwiODk3MFwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC40NDQ0NV0sXG4gICAgXCI4OTcxXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjQ0NDQ1XSxcbiAgICBcIjg5OTRcIjogWy0wLjE0MjM2LCAwLjM1NzY0LCAwLCAwLCAxLjBdLFxuICAgIFwiODk5NVwiOiBbLTAuMTQyMzYsIDAuMzU3NjQsIDAsIDAsIDEuMF0sXG4gICAgXCI5MTM2XCI6IFswLjI0NCwgMC43NDQsIDAsIDAsIDAuNDEyXSxcbiAgICBcIjkxMzdcIjogWzAuMjQ0LCAwLjc0NSwgMCwgMCwgMC40MTJdLFxuICAgIFwiOTY1MVwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC44ODg4OV0sXG4gICAgXCI5NjU3XCI6IFstMC4wMzQ3MiwgMC40NjUyOCwgMCwgMCwgMC41XSxcbiAgICBcIjk2NjFcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuODg4ODldLFxuICAgIFwiOTY2N1wiOiBbLTAuMDM0NzIsIDAuNDY1MjgsIDAsIDAsIDAuNV0sXG4gICAgXCI5NzExXCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLCAwLCAxLjBdLFxuICAgIFwiOTgyNFwiOiBbMC4xMjk2MywgMC42OTQ0NCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI5ODI1XCI6IFswLjEyOTYzLCAwLjY5NDQ0LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjk4MjZcIjogWzAuMTI5NjMsIDAuNjk0NDQsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiOTgyN1wiOiBbMC4xMjk2MywgMC42OTQ0NCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI5ODM3XCI6IFswLCAwLjc1LCAwLCAwLCAwLjM4ODg5XSxcbiAgICBcIjk4MzhcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuMzg4ODldLFxuICAgIFwiOTgzOVwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC4zODg4OV0sXG4gICAgXCIxMDIxNlwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC4zODg4OV0sXG4gICAgXCIxMDIxN1wiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC4zODg4OV0sXG4gICAgXCIxMDIyMlwiOiBbMC4yNDQsIDAuNzQ0LCAwLCAwLCAwLjQxMl0sXG4gICAgXCIxMDIyM1wiOiBbMC4yNDQsIDAuNzQ1LCAwLCAwLCAwLjQxMl0sXG4gICAgXCIxMDIyOVwiOiBbMC4wMTEsIDAuNTExLCAwLCAwLCAxLjYwOV0sXG4gICAgXCIxMDIzMFwiOiBbMC4wMTEsIDAuNTExLCAwLCAwLCAxLjYzOF0sXG4gICAgXCIxMDIzMVwiOiBbMC4wMTEsIDAuNTExLCAwLCAwLCAxLjg1OV0sXG4gICAgXCIxMDIzMlwiOiBbMC4wMjQsIDAuNTI1LCAwLCAwLCAxLjYwOV0sXG4gICAgXCIxMDIzM1wiOiBbMC4wMjQsIDAuNTI1LCAwLCAwLCAxLjYzOF0sXG4gICAgXCIxMDIzNFwiOiBbMC4wMjQsIDAuNTI1LCAwLCAwLCAxLjg1OF0sXG4gICAgXCIxMDIzNlwiOiBbMC4wMTEsIDAuNTExLCAwLCAwLCAxLjYzOF0sXG4gICAgXCIxMDgxNVwiOiBbMCwgMC42ODMzMywgMCwgMCwgMC43NV0sXG4gICAgXCIxMDkyN1wiOiBbMC4xMzU5NywgMC42MzU5NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCIxMDkyOFwiOiBbMC4xMzU5NywgMC42MzU5NywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI1NzM3NlwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMF1cbiAgfSxcbiAgXCJNYXRoLUJvbGRJdGFsaWNcIjoge1xuICAgIFwiMzJcIjogWzAsIDAsIDAsIDAsIDAuMjVdLFxuICAgIFwiNDhcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjQ5XCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI1MFwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC41NzVdLFxuICAgIFwiNTFcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjUyXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI1M1wiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMCwgMCwgMC41NzVdLFxuICAgIFwiNTRcIjogWzAsIDAuNjQ0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjU1XCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLCAwLCAwLjU3NV0sXG4gICAgXCI1NlwiOiBbMCwgMC42NDQ0NCwgMCwgMCwgMC41NzVdLFxuICAgIFwiNTdcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAsIDAsIDAuNTc1XSxcbiAgICBcIjY1XCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjg2OTQ0XSxcbiAgICBcIjY2XCI6IFswLCAwLjY4NjExLCAwLjA0ODM1LCAwLCAwLjg2NjRdLFxuICAgIFwiNjdcIjogWzAsIDAuNjg2MTEsIDAuMDY5NzksIDAsIDAuODE2OTRdLFxuICAgIFwiNjhcIjogWzAsIDAuNjg2MTEsIDAuMDMxOTQsIDAsIDAuOTM4MTJdLFxuICAgIFwiNjlcIjogWzAsIDAuNjg2MTEsIDAuMDU0NTEsIDAsIDAuODEwMDddLFxuICAgIFwiNzBcIjogWzAsIDAuNjg2MTEsIDAuMTU5NzIsIDAsIDAuNjg4ODldLFxuICAgIFwiNzFcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuODg2NzNdLFxuICAgIFwiNzJcIjogWzAsIDAuNjg2MTEsIDAuMDgyMjksIDAsIDAuOTgyMjldLFxuICAgIFwiNzNcIjogWzAsIDAuNjg2MTEsIDAuMDc3NzgsIDAsIDAuNTExMTFdLFxuICAgIFwiNzRcIjogWzAsIDAuNjg2MTEsIDAuMTAwNjksIDAsIDAuNjMxMjVdLFxuICAgIFwiNzVcIjogWzAsIDAuNjg2MTEsIDAuMDY5NzksIDAsIDAuOTcxMThdLFxuICAgIFwiNzZcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuNzU1NTVdLFxuICAgIFwiNzdcIjogWzAsIDAuNjg2MTEsIDAuMTE0MjQsIDAsIDEuMTQyMDFdLFxuICAgIFwiNzhcIjogWzAsIDAuNjg2MTEsIDAuMTE0MjQsIDAsIDAuOTUwMzRdLFxuICAgIFwiNzlcIjogWzAsIDAuNjg2MTEsIDAuMDMxOTQsIDAsIDAuODM2NjZdLFxuICAgIFwiODBcIjogWzAsIDAuNjg2MTEsIDAuMTU5NzIsIDAsIDAuNzIzMDldLFxuICAgIFwiODFcIjogWzAuMTk0NDQsIDAuNjg2MTEsIDAsIDAsIDAuODY4NjFdLFxuICAgIFwiODJcIjogWzAsIDAuNjg2MTEsIDAuMDA0MjEsIDAsIDAuODcyMzVdLFxuICAgIFwiODNcIjogWzAsIDAuNjg2MTEsIDAuMDUzODIsIDAsIDAuNjkyNzFdLFxuICAgIFwiODRcIjogWzAsIDAuNjg2MTEsIDAuMTU5NzIsIDAsIDAuNjM2NjNdLFxuICAgIFwiODVcIjogWzAsIDAuNjg2MTEsIDAuMTE0MjQsIDAsIDAuODAwMjddLFxuICAgIFwiODZcIjogWzAsIDAuNjg2MTEsIDAuMjU1NTUsIDAsIDAuNjc3NzhdLFxuICAgIFwiODdcIjogWzAsIDAuNjg2MTEsIDAuMTU5NzIsIDAsIDEuMDkzMDVdLFxuICAgIFwiODhcIjogWzAsIDAuNjg2MTEsIDAuMDc3NzgsIDAsIDAuOTQ3MjJdLFxuICAgIFwiODlcIjogWzAsIDAuNjg2MTEsIDAuMjU1NTUsIDAsIDAuNjc0NThdLFxuICAgIFwiOTBcIjogWzAsIDAuNjg2MTEsIDAuMDY5NzksIDAsIDAuNzcyNTddLFxuICAgIFwiOTdcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNjMyODddLFxuICAgIFwiOThcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTIwODNdLFxuICAgIFwiOTlcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNTEzNDJdLFxuICAgIFwiMTAwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjYwOTcyXSxcbiAgICBcIjEwMVwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC41NTM2MV0sXG4gICAgXCIxMDJcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAuMTEwNDIsIDAsIDAuNTY4MDZdLFxuICAgIFwiMTAzXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLjAzNzA0LCAwLCAwLjU0NDldLFxuICAgIFwiMTA0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjY2NzU5XSxcbiAgICBcIjEwNVwiOiBbMCwgMC42OTMyNiwgMCwgMCwgMC40MDQ4XSxcbiAgICBcIjEwNlwiOiBbMC4xOTQ0NCwgMC42OTMyNiwgMC4wNjIyLCAwLCAwLjQ3MDgzXSxcbiAgICBcIjEwN1wiOiBbMCwgMC42OTQ0NCwgMC4wMTg1MiwgMCwgMC42MDM3XSxcbiAgICBcIjEwOFwiOiBbMCwgMC42OTQ0NCwgMC4wMDg4LCAwLCAwLjM0ODE1XSxcbiAgICBcIjEwOVwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMS4wMzI0XSxcbiAgICBcIjExMFwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC43MTI5Nl0sXG4gICAgXCIxMTFcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNTg0NzJdLFxuICAgIFwiMTEyXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLCAwLCAwLjYwMDkyXSxcbiAgICBcIjExM1wiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMC4wMzcwNCwgMCwgMC41NDIxM10sXG4gICAgXCIxMTRcIjogWzAsIDAuNDQ0NDQsIDAuMDMxOTQsIDAsIDAuNTI4N10sXG4gICAgXCIxMTVcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNTMxMjVdLFxuICAgIFwiMTE2XCI6IFswLCAwLjYzNDkyLCAwLCAwLCAwLjQxNTI4XSxcbiAgICBcIjExN1wiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC42ODEwMl0sXG4gICAgXCIxMThcIjogWzAsIDAuNDQ0NDQsIDAuMDM3MDQsIDAsIDAuNTY2NjZdLFxuICAgIFwiMTE5XCI6IFswLCAwLjQ0NDQ0LCAwLjAyNzc4LCAwLCAwLjgzMTQ4XSxcbiAgICBcIjEyMFwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC42NTkwM10sXG4gICAgXCIxMjFcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAuMDM3MDQsIDAsIDAuNTkwMjhdLFxuICAgIFwiMTIyXCI6IFswLCAwLjQ0NDQ0LCAwLjA0MjEzLCAwLCAwLjU1NTA5XSxcbiAgICBcIjE2MFwiOiBbMCwgMCwgMCwgMCwgMC4yNV0sXG4gICAgXCI5MTVcIjogWzAsIDAuNjg2MTEsIDAuMTU5NzIsIDAsIDAuNjU2OTRdLFxuICAgIFwiOTE2XCI6IFswLCAwLjY4NjExLCAwLCAwLCAwLjk1ODMzXSxcbiAgICBcIjkyMFwiOiBbMCwgMC42ODYxMSwgMC4wMzE5NCwgMCwgMC44NjcyMl0sXG4gICAgXCI5MjNcIjogWzAsIDAuNjg2MTEsIDAsIDAsIDAuODA1NTVdLFxuICAgIFwiOTI2XCI6IFswLCAwLjY4NjExLCAwLjA3NDU4LCAwLCAwLjg0MTI1XSxcbiAgICBcIjkyOFwiOiBbMCwgMC42ODYxMSwgMC4wODIyOSwgMCwgMC45ODIyOV0sXG4gICAgXCI5MzFcIjogWzAsIDAuNjg2MTEsIDAuMDU0NTEsIDAsIDAuODg1MDddLFxuICAgIFwiOTMzXCI6IFswLCAwLjY4NjExLCAwLjE1OTcyLCAwLCAwLjY3MDgzXSxcbiAgICBcIjkzNFwiOiBbMCwgMC42ODYxMSwgMCwgMCwgMC43NjY2Nl0sXG4gICAgXCI5MzZcIjogWzAsIDAuNjg2MTEsIDAuMTE2NTMsIDAsIDAuNzE0MDJdLFxuICAgIFwiOTM3XCI6IFswLCAwLjY4NjExLCAwLjA0ODM1LCAwLCAwLjg3ODldLFxuICAgIFwiOTQ1XCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjc2MDY0XSxcbiAgICBcIjk0NlwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMC4wMzQwMywgMCwgMC42NTk3Ml0sXG4gICAgXCI5NDdcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAuMDYzODksIDAsIDAuNTkwMDNdLFxuICAgIFwiOTQ4XCI6IFswLCAwLjY5NDQ0LCAwLjAzODE5LCAwLCAwLjUyMjIyXSxcbiAgICBcIjk0OVwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC41Mjg4Ml0sXG4gICAgXCI5NTBcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAuMDYyMTUsIDAsIDAuNTA4MzNdLFxuICAgIFwiOTUxXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLjAzNzA0LCAwLCAwLjZdLFxuICAgIFwiOTUyXCI6IFswLCAwLjY5NDQ0LCAwLjAzMTk0LCAwLCAwLjU2MThdLFxuICAgIFwiOTUzXCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjQxMjA0XSxcbiAgICBcIjk1NFwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC42Njc1OV0sXG4gICAgXCI5NTVcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjcwODNdLFxuICAgIFwiOTU2XCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLCAwLCAwLjcwNzg3XSxcbiAgICBcIjk1N1wiOiBbMCwgMC40NDQ0NCwgMC4wNjg5OCwgMCwgMC41NzY4NV0sXG4gICAgXCI5NThcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAuMDMwMjEsIDAsIDAuNTA4MzNdLFxuICAgIFwiOTU5XCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjU4NDcyXSxcbiAgICBcIjk2MFwiOiBbMCwgMC40NDQ0NCwgMC4wMzcwNCwgMCwgMC42ODI0MV0sXG4gICAgXCI5NjFcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAsIDAsIDAuNjExOF0sXG4gICAgXCI5NjJcIjogWzAuMDk3MjIsIDAuNDQ0NDQsIDAuMDc5MTcsIDAsIDAuNDIzNjFdLFxuICAgIFwiOTYzXCI6IFswLCAwLjQ0NDQ0LCAwLjAzNzA0LCAwLCAwLjY4NTg4XSxcbiAgICBcIjk2NFwiOiBbMCwgMC40NDQ0NCwgMC4xMzQ3MiwgMCwgMC41MjA4M10sXG4gICAgXCI5NjVcIjogWzAsIDAuNDQ0NDQsIDAuMDM3MDQsIDAsIDAuNjMwNTVdLFxuICAgIFwiOTY2XCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLCAwLCAwLjc0NzIyXSxcbiAgICBcIjk2N1wiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMCwgMCwgMC43MTgwNV0sXG4gICAgXCI5NjhcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAuMDM3MDQsIDAsIDAuNzU4MzNdLFxuICAgIFwiOTY5XCI6IFswLCAwLjQ0NDQ0LCAwLjAzNzA0LCAwLCAwLjcxNzgyXSxcbiAgICBcIjk3N1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42OTE1NV0sXG4gICAgXCI5ODFcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuNzEyNV0sXG4gICAgXCI5ODJcIjogWzAsIDAuNDQ0NDQsIDAuMDMxOTQsIDAsIDAuOTc1XSxcbiAgICBcIjEwMDlcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAsIDAsIDAuNjExOF0sXG4gICAgXCIxMDEzXCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjQ4MzMzXSxcbiAgICBcIjU3NjQ5XCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjM5MzUyXSxcbiAgICBcIjU3OTExXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLCAwLCAwLjQzODg5XVxuICB9LFxuICBcIk1hdGgtSXRhbGljXCI6IHtcbiAgICBcIjMyXCI6IFswLCAwLCAwLCAwLCAwLjI1XSxcbiAgICBcIjQ4XCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjVdLFxuICAgIFwiNDlcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNV0sXG4gICAgXCI1MFwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC41XSxcbiAgICBcIjUxXCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLCAwLCAwLjVdLFxuICAgIFwiNTJcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAsIDAsIDAuNV0sXG4gICAgXCI1M1wiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMCwgMCwgMC41XSxcbiAgICBcIjU0XCI6IFswLCAwLjY0NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiNTVcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAsIDAsIDAuNV0sXG4gICAgXCI1NlwiOiBbMCwgMC42NDQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjU3XCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLCAwLCAwLjVdLFxuICAgIFwiNjVcIjogWzAsIDAuNjgzMzMsIDAsIDAuMTM4ODksIDAuNzVdLFxuICAgIFwiNjZcIjogWzAsIDAuNjgzMzMsIDAuMDUwMTcsIDAuMDgzMzQsIDAuNzU4NTFdLFxuICAgIFwiNjdcIjogWzAsIDAuNjgzMzMsIDAuMDcxNTMsIDAuMDgzMzQsIDAuNzE0NzJdLFxuICAgIFwiNjhcIjogWzAsIDAuNjgzMzMsIDAuMDI3NzgsIDAuMDU1NTYsIDAuODI3OTJdLFxuICAgIFwiNjlcIjogWzAsIDAuNjgzMzMsIDAuMDU3NjQsIDAuMDgzMzQsIDAuNzM4Ml0sXG4gICAgXCI3MFwiOiBbMCwgMC42ODMzMywgMC4xMzg4OSwgMC4wODMzNCwgMC42NDMwNl0sXG4gICAgXCI3MVwiOiBbMCwgMC42ODMzMywgMCwgMC4wODMzNCwgMC43ODYyNV0sXG4gICAgXCI3MlwiOiBbMCwgMC42ODMzMywgMC4wODEyNSwgMC4wNTU1NiwgMC44MzEyNV0sXG4gICAgXCI3M1wiOiBbMCwgMC42ODMzMywgMC4wNzg0NywgMC4xMTExMSwgMC40Mzk1OF0sXG4gICAgXCI3NFwiOiBbMCwgMC42ODMzMywgMC4wOTYxOCwgMC4xNjY2NywgMC41NTQ1MV0sXG4gICAgXCI3NVwiOiBbMCwgMC42ODMzMywgMC4wNzE1MywgMC4wNTU1NiwgMC44NDkzMV0sXG4gICAgXCI3NlwiOiBbMCwgMC42ODMzMywgMCwgMC4wMjc3OCwgMC42ODA1Nl0sXG4gICAgXCI3N1wiOiBbMCwgMC42ODMzMywgMC4xMDkwMywgMC4wODMzNCwgMC45NzAxNF0sXG4gICAgXCI3OFwiOiBbMCwgMC42ODMzMywgMC4xMDkwMywgMC4wODMzNCwgMC44MDM0N10sXG4gICAgXCI3OVwiOiBbMCwgMC42ODMzMywgMC4wMjc3OCwgMC4wODMzNCwgMC43NjI3OF0sXG4gICAgXCI4MFwiOiBbMCwgMC42ODMzMywgMC4xMzg4OSwgMC4wODMzNCwgMC42NDIwMV0sXG4gICAgXCI4MVwiOiBbMC4xOTQ0NCwgMC42ODMzMywgMCwgMC4wODMzNCwgMC43OTA1Nl0sXG4gICAgXCI4MlwiOiBbMCwgMC42ODMzMywgMC4wMDc3MywgMC4wODMzNCwgMC43NTkyOV0sXG4gICAgXCI4M1wiOiBbMCwgMC42ODMzMywgMC4wNTc2NCwgMC4wODMzNCwgMC42MTMyXSxcbiAgICBcIjg0XCI6IFswLCAwLjY4MzMzLCAwLjEzODg5LCAwLjA4MzM0LCAwLjU4NDM4XSxcbiAgICBcIjg1XCI6IFswLCAwLjY4MzMzLCAwLjEwOTAzLCAwLjAyNzc4LCAwLjY4Mjc4XSxcbiAgICBcIjg2XCI6IFswLCAwLjY4MzMzLCAwLjIyMjIyLCAwLCAwLjU4MzMzXSxcbiAgICBcIjg3XCI6IFswLCAwLjY4MzMzLCAwLjEzODg5LCAwLCAwLjk0NDQ1XSxcbiAgICBcIjg4XCI6IFswLCAwLjY4MzMzLCAwLjA3ODQ3LCAwLjA4MzM0LCAwLjgyODQ3XSxcbiAgICBcIjg5XCI6IFswLCAwLjY4MzMzLCAwLjIyMjIyLCAwLCAwLjU4MDU2XSxcbiAgICBcIjkwXCI6IFswLCAwLjY4MzMzLCAwLjA3MTUzLCAwLjA4MzM0LCAwLjY4MjY0XSxcbiAgICBcIjk3XCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjUyODU5XSxcbiAgICBcIjk4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjQyOTE3XSxcbiAgICBcIjk5XCI6IFswLCAwLjQzMDU2LCAwLCAwLjA1NTU2LCAwLjQzMjc2XSxcbiAgICBcIjEwMFwiOiBbMCwgMC42OTQ0NCwgMCwgMC4xNjY2NywgMC41MjA0OV0sXG4gICAgXCIxMDFcIjogWzAsIDAuNDMwNTYsIDAsIDAuMDU1NTYsIDAuNDY1NjNdLFxuICAgIFwiMTAyXCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLjEwNzY0LCAwLjE2NjY3LCAwLjQ4OTU5XSxcbiAgICBcIjEwM1wiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMC4wMzU4OCwgMC4wMjc3OCwgMC40NzY5N10sXG4gICAgXCIxMDRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTc2MTZdLFxuICAgIFwiMTA1XCI6IFswLCAwLjY1OTUyLCAwLCAwLCAwLjM0NDUxXSxcbiAgICBcIjEwNlwiOiBbMC4xOTQ0NCwgMC42NTk1MiwgMC4wNTcyNCwgMCwgMC40MTE4MV0sXG4gICAgXCIxMDdcIjogWzAsIDAuNjk0NDQsIDAuMDMxNDgsIDAsIDAuNTIwNl0sXG4gICAgXCIxMDhcIjogWzAsIDAuNjk0NDQsIDAuMDE5NjgsIDAuMDgzMzQsIDAuMjk4MzhdLFxuICAgIFwiMTA5XCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjg3ODAxXSxcbiAgICBcIjExMFwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC42MDAyM10sXG4gICAgXCIxMTFcIjogWzAsIDAuNDMwNTYsIDAsIDAuMDU1NTYsIDAuNDg0NzJdLFxuICAgIFwiMTEyXCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLCAwLjA4MzM0LCAwLjUwMzEzXSxcbiAgICBcIjExM1wiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMC4wMzU4OCwgMC4wODMzNCwgMC40NDY0MV0sXG4gICAgXCIxMTRcIjogWzAsIDAuNDMwNTYsIDAuMDI3NzgsIDAuMDU1NTYsIDAuNDUxMTZdLFxuICAgIFwiMTE1XCI6IFswLCAwLjQzMDU2LCAwLCAwLjA1NTU2LCAwLjQ2ODc1XSxcbiAgICBcIjExNlwiOiBbMCwgMC42MTUwOCwgMCwgMC4wODMzNCwgMC4zNjExMV0sXG4gICAgXCIxMTdcIjogWzAsIDAuNDMwNTYsIDAsIDAuMDI3NzgsIDAuNTcyNDZdLFxuICAgIFwiMTE4XCI6IFswLCAwLjQzMDU2LCAwLjAzNTg4LCAwLjAyNzc4LCAwLjQ4NDcyXSxcbiAgICBcIjExOVwiOiBbMCwgMC40MzA1NiwgMC4wMjY5MSwgMC4wODMzNCwgMC43MTU5Ml0sXG4gICAgXCIxMjBcIjogWzAsIDAuNDMwNTYsIDAsIDAuMDI3NzgsIDAuNTcxNTNdLFxuICAgIFwiMTIxXCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLjAzNTg4LCAwLjA1NTU2LCAwLjQ5MDI4XSxcbiAgICBcIjEyMlwiOiBbMCwgMC40MzA1NiwgMC4wNDM5OCwgMC4wNTU1NiwgMC40NjUwNV0sXG4gICAgXCIxNjBcIjogWzAsIDAsIDAsIDAsIDAuMjVdLFxuICAgIFwiOTE1XCI6IFswLCAwLjY4MzMzLCAwLjEzODg5LCAwLjA4MzM0LCAwLjYxNTI4XSxcbiAgICBcIjkxNlwiOiBbMCwgMC42ODMzMywgMCwgMC4xNjY2NywgMC44MzMzNF0sXG4gICAgXCI5MjBcIjogWzAsIDAuNjgzMzMsIDAuMDI3NzgsIDAuMDgzMzQsIDAuNzYyNzhdLFxuICAgIFwiOTIzXCI6IFswLCAwLjY4MzMzLCAwLCAwLjE2NjY3LCAwLjY5NDQ1XSxcbiAgICBcIjkyNlwiOiBbMCwgMC42ODMzMywgMC4wNzU2OSwgMC4wODMzNCwgMC43NDIzNl0sXG4gICAgXCI5MjhcIjogWzAsIDAuNjgzMzMsIDAuMDgxMjUsIDAuMDU1NTYsIDAuODMxMjVdLFxuICAgIFwiOTMxXCI6IFswLCAwLjY4MzMzLCAwLjA1NzY0LCAwLjA4MzM0LCAwLjc3OTg2XSxcbiAgICBcIjkzM1wiOiBbMCwgMC42ODMzMywgMC4xMzg4OSwgMC4wNTU1NiwgMC41ODMzM10sXG4gICAgXCI5MzRcIjogWzAsIDAuNjgzMzMsIDAsIDAuMDgzMzQsIDAuNjY2NjddLFxuICAgIFwiOTM2XCI6IFswLCAwLjY4MzMzLCAwLjExLCAwLjA1NTU2LCAwLjYxMjIyXSxcbiAgICBcIjkzN1wiOiBbMCwgMC42ODMzMywgMC4wNTAxNywgMC4wODMzNCwgMC43NzI0XSxcbiAgICBcIjk0NVwiOiBbMCwgMC40MzA1NiwgMC4wMDM3LCAwLjAyNzc4LCAwLjYzOTddLFxuICAgIFwiOTQ2XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLjA1Mjc4LCAwLjA4MzM0LCAwLjU2NTYzXSxcbiAgICBcIjk0N1wiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMC4wNTU1NiwgMCwgMC41MTc3M10sXG4gICAgXCI5NDhcIjogWzAsIDAuNjk0NDQsIDAuMDM3ODUsIDAuMDU1NTYsIDAuNDQ0NDRdLFxuICAgIFwiOTQ5XCI6IFswLCAwLjQzMDU2LCAwLCAwLjA4MzM0LCAwLjQ2NjMyXSxcbiAgICBcIjk1MFwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMC4wNzM3OCwgMC4wODMzNCwgMC40Mzc1XSxcbiAgICBcIjk1MVwiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMC4wMzU4OCwgMC4wNTU1NiwgMC40OTY1M10sXG4gICAgXCI5NTJcIjogWzAsIDAuNjk0NDQsIDAuMDI3NzgsIDAuMDgzMzQsIDAuNDY5NDRdLFxuICAgIFwiOTUzXCI6IFswLCAwLjQzMDU2LCAwLCAwLjA1NTU2LCAwLjM1Mzk0XSxcbiAgICBcIjk1NFwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC41NzYxNl0sXG4gICAgXCI5NTVcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTgzMzRdLFxuICAgIFwiOTU2XCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLCAwLjAyNzc4LCAwLjYwMjU1XSxcbiAgICBcIjk1N1wiOiBbMCwgMC40MzA1NiwgMC4wNjM2NiwgMC4wMjc3OCwgMC40OTM5OF0sXG4gICAgXCI5NThcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAuMDQ2MDEsIDAuMTExMTEsIDAuNDM3NV0sXG4gICAgXCI5NTlcIjogWzAsIDAuNDMwNTYsIDAsIDAuMDU1NTYsIDAuNDg0NzJdLFxuICAgIFwiOTYwXCI6IFswLCAwLjQzMDU2LCAwLjAzNTg4LCAwLCAwLjU3MDAzXSxcbiAgICBcIjk2MVwiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMCwgMC4wODMzNCwgMC41MTcwMl0sXG4gICAgXCI5NjJcIjogWzAuMDk3MjIsIDAuNDMwNTYsIDAuMDc5ODYsIDAuMDgzMzQsIDAuMzYyODVdLFxuICAgIFwiOTYzXCI6IFswLCAwLjQzMDU2LCAwLjAzNTg4LCAwLCAwLjU3MTQxXSxcbiAgICBcIjk2NFwiOiBbMCwgMC40MzA1NiwgMC4xMTMyLCAwLjAyNzc4LCAwLjQzNzE1XSxcbiAgICBcIjk2NVwiOiBbMCwgMC40MzA1NiwgMC4wMzU4OCwgMC4wMjc3OCwgMC41NDAyOF0sXG4gICAgXCI5NjZcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAsIDAuMDgzMzQsIDAuNjU0MTddLFxuICAgIFwiOTY3XCI6IFswLjE5NDQ0LCAwLjQzMDU2LCAwLCAwLjA1NTU2LCAwLjYyNTY5XSxcbiAgICBcIjk2OFwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMC4wMzU4OCwgMC4xMTExMSwgMC42NTEzOV0sXG4gICAgXCI5NjlcIjogWzAsIDAuNDMwNTYsIDAuMDM1ODgsIDAsIDAuNjIyNDVdLFxuICAgIFwiOTc3XCI6IFswLCAwLjY5NDQ0LCAwLCAwLjA4MzM0LCAwLjU5MTQ0XSxcbiAgICBcIjk4MVwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMC4wODMzNCwgMC41OTU4M10sXG4gICAgXCI5ODJcIjogWzAsIDAuNDMwNTYsIDAuMDI3NzgsIDAsIDAuODI4MTNdLFxuICAgIFwiMTAwOVwiOiBbMC4xOTQ0NCwgMC40MzA1NiwgMCwgMC4wODMzNCwgMC41MTcwMl0sXG4gICAgXCIxMDEzXCI6IFswLCAwLjQzMDU2LCAwLCAwLjA1NTU2LCAwLjQwNTldLFxuICAgIFwiNTc2NDlcIjogWzAsIDAuNDMwNTYsIDAsIDAuMDI3NzgsIDAuMzIyNDZdLFxuICAgIFwiNTc5MTFcIjogWzAuMTk0NDQsIDAuNDMwNTYsIDAsIDAuMDgzMzQsIDAuMzg0MDNdXG4gIH0sXG4gIFwiU2Fuc1NlcmlmLUJvbGRcIjoge1xuICAgIFwiMzJcIjogWzAsIDAsIDAsIDAsIDAuMjVdLFxuICAgIFwiMzNcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuMzY2NjddLFxuICAgIFwiMzRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTU4MzRdLFxuICAgIFwiMzVcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuOTE2NjddLFxuICAgIFwiMzZcIjogWzAuMDU1NTYsIDAuNzUsIDAsIDAsIDAuNTVdLFxuICAgIFwiMzdcIjogWzAuMDU1NTYsIDAuNzUsIDAsIDAsIDEuMDI5MTJdLFxuICAgIFwiMzhcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuODMwNTZdLFxuICAgIFwiMzlcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuMzA1NTZdLFxuICAgIFwiNDBcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNDI3NzhdLFxuICAgIFwiNDFcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNDI3NzhdLFxuICAgIFwiNDJcIjogWzAsIDAuNzUsIDAsIDAsIDAuNTVdLFxuICAgIFwiNDNcIjogWzAuMTE2NjcsIDAuNjE2NjcsIDAsIDAsIDAuODU1NTZdLFxuICAgIFwiNDRcIjogWzAuMTA1NTYsIDAuMTMwNTYsIDAsIDAsIDAuMzA1NTZdLFxuICAgIFwiNDVcIjogWzAsIDAuNDU4MzMsIDAsIDAsIDAuMzY2NjddLFxuICAgIFwiNDZcIjogWzAsIDAuMTMwNTYsIDAsIDAsIDAuMzA1NTZdLFxuICAgIFwiNDdcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuNTVdLFxuICAgIFwiNDhcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiNDlcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiNTBcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiNTFcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiNTJcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiNTNcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiNTRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiNTVcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiNTZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiNTdcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiNThcIjogWzAsIDAuNDU4MzMsIDAsIDAsIDAuMzA1NTZdLFxuICAgIFwiNTlcIjogWzAuMTA1NTYsIDAuNDU4MzMsIDAsIDAsIDAuMzA1NTZdLFxuICAgIFwiNjFcIjogWy0wLjA5Mzc1LCAwLjQwNjI1LCAwLCAwLCAwLjg1NTU2XSxcbiAgICBcIjYzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjUxOTQ1XSxcbiAgICBcIjY0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjczMzM0XSxcbiAgICBcIjY1XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjczMzM0XSxcbiAgICBcIjY2XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjczMzM0XSxcbiAgICBcIjY3XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjcwMjc4XSxcbiAgICBcIjY4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjc5NDQ1XSxcbiAgICBcIjY5XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjY0MTY3XSxcbiAgICBcIjcwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjcxXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjczMzM0XSxcbiAgICBcIjcyXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjc5NDQ1XSxcbiAgICBcIjczXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjMzMDU2XSxcbiAgICBcIjc0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjUxOTQ1XSxcbiAgICBcIjc1XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjc2Mzg5XSxcbiAgICBcIjc2XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU4MDU2XSxcbiAgICBcIjc3XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjk3Nzc4XSxcbiAgICBcIjc4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjc5NDQ1XSxcbiAgICBcIjc5XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjc5NDQ1XSxcbiAgICBcIjgwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjcwMjc4XSxcbiAgICBcIjgxXCI6IFswLjEwNTU2LCAwLjY5NDQ0LCAwLCAwLCAwLjc5NDQ1XSxcbiAgICBcIjgyXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjcwMjc4XSxcbiAgICBcIjgzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjg0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjczMzM0XSxcbiAgICBcIjg1XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjc2Mzg5XSxcbiAgICBcIjg2XCI6IFswLCAwLjY5NDQ0LCAwLjAxNTI4LCAwLCAwLjczMzM0XSxcbiAgICBcIjg3XCI6IFswLCAwLjY5NDQ0LCAwLjAxNTI4LCAwLCAxLjAzODg5XSxcbiAgICBcIjg4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjczMzM0XSxcbiAgICBcIjg5XCI6IFswLCAwLjY5NDQ0LCAwLjAyNzUsIDAsIDAuNzMzMzRdLFxuICAgIFwiOTBcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjcyMjNdLFxuICAgIFwiOTFcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuMzQzMDZdLFxuICAgIFwiOTNcIjogWzAuMjUsIDAuNzUsIDAsIDAsIDAuMzQzMDZdLFxuICAgIFwiOTRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiOTVcIjogWzAuMzUsIDAuMTA4MzMsIDAuMDMwNTYsIDAsIDAuNTVdLFxuICAgIFwiOTdcIjogWzAsIDAuNDU4MzMsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjk4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU2MTExXSxcbiAgICBcIjk5XCI6IFswLCAwLjQ1ODMzLCAwLCAwLCAwLjQ4ODg5XSxcbiAgICBcIjEwMFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41NjExMV0sXG4gICAgXCIxMDFcIjogWzAsIDAuNDU4MzMsIDAsIDAsIDAuNTExMTFdLFxuICAgIFwiMTAyXCI6IFswLCAwLjY5NDQ0LCAwLjA3NjM5LCAwLCAwLjMzNjExXSxcbiAgICBcIjEwM1wiOiBbMC4xOTQ0NCwgMC40NTgzMywgMC4wMTUyOCwgMCwgMC41NV0sXG4gICAgXCIxMDRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTYxMTFdLFxuICAgIFwiMTA1XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjI1NTU2XSxcbiAgICBcIjEwNlwiOiBbMC4xOTQ0NCwgMC42OTQ0NCwgMCwgMCwgMC4yODYxMV0sXG4gICAgXCIxMDdcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTMwNTZdLFxuICAgIFwiMTA4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjI1NTU2XSxcbiAgICBcIjEwOVwiOiBbMCwgMC40NTgzMywgMCwgMCwgMC44NjY2N10sXG4gICAgXCIxMTBcIjogWzAsIDAuNDU4MzMsIDAsIDAsIDAuNTYxMTFdLFxuICAgIFwiMTExXCI6IFswLCAwLjQ1ODMzLCAwLCAwLCAwLjU1XSxcbiAgICBcIjExMlwiOiBbMC4xOTQ0NCwgMC40NTgzMywgMCwgMCwgMC41NjExMV0sXG4gICAgXCIxMTNcIjogWzAuMTk0NDQsIDAuNDU4MzMsIDAsIDAsIDAuNTYxMTFdLFxuICAgIFwiMTE0XCI6IFswLCAwLjQ1ODMzLCAwLjAxNTI4LCAwLCAwLjM3MjIyXSxcbiAgICBcIjExNVwiOiBbMCwgMC40NTgzMywgMCwgMCwgMC40MjE2N10sXG4gICAgXCIxMTZcIjogWzAsIDAuNTg5MjksIDAsIDAsIDAuNDA0MTddLFxuICAgIFwiMTE3XCI6IFswLCAwLjQ1ODMzLCAwLCAwLCAwLjU2MTExXSxcbiAgICBcIjExOFwiOiBbMCwgMC40NTgzMywgMC4wMTUyOCwgMCwgMC41XSxcbiAgICBcIjExOVwiOiBbMCwgMC40NTgzMywgMC4wMTUyOCwgMCwgMC43NDQ0NV0sXG4gICAgXCIxMjBcIjogWzAsIDAuNDU4MzMsIDAsIDAsIDAuNV0sXG4gICAgXCIxMjFcIjogWzAuMTk0NDQsIDAuNDU4MzMsIDAuMDE1MjgsIDAsIDAuNV0sXG4gICAgXCIxMjJcIjogWzAsIDAuNDU4MzMsIDAsIDAsIDAuNDc2MzldLFxuICAgIFwiMTI2XCI6IFswLjM1LCAwLjM0NDQ0LCAwLCAwLCAwLjU1XSxcbiAgICBcIjE2MFwiOiBbMCwgMCwgMCwgMCwgMC4yNV0sXG4gICAgXCIxNjhcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiMTc2XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjczMzM0XSxcbiAgICBcIjE4MFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41NV0sXG4gICAgXCIxODRcIjogWzAuMTcwMTQsIDAsIDAsIDAsIDAuNDg4ODldLFxuICAgIFwiMzA1XCI6IFswLCAwLjQ1ODMzLCAwLCAwLCAwLjI1NTU2XSxcbiAgICBcIjU2N1wiOiBbMC4xOTQ0NCwgMC40NTgzMywgMCwgMCwgMC4yODYxMV0sXG4gICAgXCI3MTBcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiNzExXCI6IFswLCAwLjYzNTQyLCAwLCAwLCAwLjU1XSxcbiAgICBcIjcxM1wiOiBbMCwgMC42Mzc3OCwgMCwgMCwgMC41NV0sXG4gICAgXCI3MjhcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiNzI5XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjMwNTU2XSxcbiAgICBcIjczMFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MzMzNF0sXG4gICAgXCI3MzJcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTVdLFxuICAgIFwiNzMzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1XSxcbiAgICBcIjkxNVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41ODA1Nl0sXG4gICAgXCI5MTZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuOTE2NjddLFxuICAgIFwiOTIwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjg1NTU2XSxcbiAgICBcIjkyM1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42NzIyM10sXG4gICAgXCI5MjZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzMzMzRdLFxuICAgIFwiOTI4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjc5NDQ1XSxcbiAgICBcIjkzMVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43OTQ0NV0sXG4gICAgXCI5MzNcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuODU1NTZdLFxuICAgIFwiOTM0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjc5NDQ1XSxcbiAgICBcIjkzNlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC44NTU1Nl0sXG4gICAgXCI5MzdcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzk0NDVdLFxuICAgIFwiODIxMVwiOiBbMCwgMC40NTgzMywgMC4wMzA1NiwgMCwgMC41NV0sXG4gICAgXCI4MjEyXCI6IFswLCAwLjQ1ODMzLCAwLjAzMDU2LCAwLCAxLjEwMDAxXSxcbiAgICBcIjgyMTZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuMzA1NTZdLFxuICAgIFwiODIxN1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC4zMDU1Nl0sXG4gICAgXCI4MjIwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1ODM0XSxcbiAgICBcIjgyMjFcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTU4MzRdXG4gIH0sXG4gIFwiU2Fuc1NlcmlmLUl0YWxpY1wiOiB7XG4gICAgXCIzMlwiOiBbMCwgMCwgMCwgMCwgMC4yNV0sXG4gICAgXCIzM1wiOiBbMCwgMC42OTQ0NCwgMC4wNTczMywgMCwgMC4zMTk0NV0sXG4gICAgXCIzNFwiOiBbMCwgMC42OTQ0NCwgMC4wMDMxNiwgMCwgMC41XSxcbiAgICBcIjM1XCI6IFswLjE5NDQ0LCAwLjY5NDQ0LCAwLjA1MDg3LCAwLCAwLjgzMzM0XSxcbiAgICBcIjM2XCI6IFswLjA1NTU2LCAwLjc1LCAwLjExMTU2LCAwLCAwLjVdLFxuICAgIFwiMzdcIjogWzAuMDU1NTYsIDAuNzUsIDAuMDMxMjYsIDAsIDAuODMzMzRdLFxuICAgIFwiMzhcIjogWzAsIDAuNjk0NDQsIDAuMDMwNTgsIDAsIDAuNzU4MzRdLFxuICAgIFwiMzlcIjogWzAsIDAuNjk0NDQsIDAuMDc4MTYsIDAsIDAuMjc3NzhdLFxuICAgIFwiNDBcIjogWzAuMjUsIDAuNzUsIDAuMTMxNjQsIDAsIDAuMzg4ODldLFxuICAgIFwiNDFcIjogWzAuMjUsIDAuNzUsIDAuMDI1MzYsIDAsIDAuMzg4ODldLFxuICAgIFwiNDJcIjogWzAsIDAuNzUsIDAuMTE3NzUsIDAsIDAuNV0sXG4gICAgXCI0M1wiOiBbMC4wODMzMywgMC41ODMzMywgMC4wMjUzNiwgMCwgMC43Nzc3OF0sXG4gICAgXCI0NFwiOiBbMC4xMjUsIDAuMDgzMzMsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiNDVcIjogWzAsIDAuNDQ0NDQsIDAuMDE5NDYsIDAsIDAuMzMzMzNdLFxuICAgIFwiNDZcIjogWzAsIDAuMDgzMzMsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiNDdcIjogWzAuMjUsIDAuNzUsIDAuMTMxNjQsIDAsIDAuNV0sXG4gICAgXCI0OFwiOiBbMCwgMC42NTU1NiwgMC4xMTE1NiwgMCwgMC41XSxcbiAgICBcIjQ5XCI6IFswLCAwLjY1NTU2LCAwLjExMTU2LCAwLCAwLjVdLFxuICAgIFwiNTBcIjogWzAsIDAuNjU1NTYsIDAuMTExNTYsIDAsIDAuNV0sXG4gICAgXCI1MVwiOiBbMCwgMC42NTU1NiwgMC4xMTE1NiwgMCwgMC41XSxcbiAgICBcIjUyXCI6IFswLCAwLjY1NTU2LCAwLjExMTU2LCAwLCAwLjVdLFxuICAgIFwiNTNcIjogWzAsIDAuNjU1NTYsIDAuMTExNTYsIDAsIDAuNV0sXG4gICAgXCI1NFwiOiBbMCwgMC42NTU1NiwgMC4xMTE1NiwgMCwgMC41XSxcbiAgICBcIjU1XCI6IFswLCAwLjY1NTU2LCAwLjExMTU2LCAwLCAwLjVdLFxuICAgIFwiNTZcIjogWzAsIDAuNjU1NTYsIDAuMTExNTYsIDAsIDAuNV0sXG4gICAgXCI1N1wiOiBbMCwgMC42NTU1NiwgMC4xMTE1NiwgMCwgMC41XSxcbiAgICBcIjU4XCI6IFswLCAwLjQ0NDQ0LCAwLjAyNTAyLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjU5XCI6IFswLjEyNSwgMC40NDQ0NCwgMC4wMjUwMiwgMCwgMC4yNzc3OF0sXG4gICAgXCI2MVwiOiBbLTAuMTMsIDAuMzcsIDAuMDUwODcsIDAsIDAuNzc3NzhdLFxuICAgIFwiNjNcIjogWzAsIDAuNjk0NDQsIDAuMTE4MDksIDAsIDAuNDcyMjJdLFxuICAgIFwiNjRcIjogWzAsIDAuNjk0NDQsIDAuMDc1NTUsIDAsIDAuNjY2NjddLFxuICAgIFwiNjVcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiNjZcIjogWzAsIDAuNjk0NDQsIDAuMDgyOTMsIDAsIDAuNjY2NjddLFxuICAgIFwiNjdcIjogWzAsIDAuNjk0NDQsIDAuMTE5ODMsIDAsIDAuNjM4ODldLFxuICAgIFwiNjhcIjogWzAsIDAuNjk0NDQsIDAuMDc1NTUsIDAsIDAuNzIyMjNdLFxuICAgIFwiNjlcIjogWzAsIDAuNjk0NDQsIDAuMTE5ODMsIDAsIDAuNTk3MjJdLFxuICAgIFwiNzBcIjogWzAsIDAuNjk0NDQsIDAuMTMzNzIsIDAsIDAuNTY5NDVdLFxuICAgIFwiNzFcIjogWzAsIDAuNjk0NDQsIDAuMTE5ODMsIDAsIDAuNjY2NjddLFxuICAgIFwiNzJcIjogWzAsIDAuNjk0NDQsIDAuMDgwOTQsIDAsIDAuNzA4MzRdLFxuICAgIFwiNzNcIjogWzAsIDAuNjk0NDQsIDAuMTMzNzIsIDAsIDAuMjc3NzhdLFxuICAgIFwiNzRcIjogWzAsIDAuNjk0NDQsIDAuMDgwOTQsIDAsIDAuNDcyMjJdLFxuICAgIFwiNzVcIjogWzAsIDAuNjk0NDQsIDAuMTE5ODMsIDAsIDAuNjk0NDVdLFxuICAgIFwiNzZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTQxNjddLFxuICAgIFwiNzdcIjogWzAsIDAuNjk0NDQsIDAuMDgwOTQsIDAsIDAuODc1XSxcbiAgICBcIjc4XCI6IFswLCAwLjY5NDQ0LCAwLjA4MDk0LCAwLCAwLjcwODM0XSxcbiAgICBcIjc5XCI6IFswLCAwLjY5NDQ0LCAwLjA3NTU1LCAwLCAwLjczNjExXSxcbiAgICBcIjgwXCI6IFswLCAwLjY5NDQ0LCAwLjA4MjkzLCAwLCAwLjYzODg5XSxcbiAgICBcIjgxXCI6IFswLjEyNSwgMC42OTQ0NCwgMC4wNzU1NSwgMCwgMC43MzYxMV0sXG4gICAgXCI4MlwiOiBbMCwgMC42OTQ0NCwgMC4wODI5MywgMCwgMC42NDU4NF0sXG4gICAgXCI4M1wiOiBbMCwgMC42OTQ0NCwgMC4wOTIwNSwgMCwgMC41NTU1Nl0sXG4gICAgXCI4NFwiOiBbMCwgMC42OTQ0NCwgMC4xMzM3MiwgMCwgMC42ODA1Nl0sXG4gICAgXCI4NVwiOiBbMCwgMC42OTQ0NCwgMC4wODA5NCwgMCwgMC42ODc1XSxcbiAgICBcIjg2XCI6IFswLCAwLjY5NDQ0LCAwLjE2MTUsIDAsIDAuNjY2NjddLFxuICAgIFwiODdcIjogWzAsIDAuNjk0NDQsIDAuMTYxNSwgMCwgMC45NDQ0NV0sXG4gICAgXCI4OFwiOiBbMCwgMC42OTQ0NCwgMC4xMzM3MiwgMCwgMC42NjY2N10sXG4gICAgXCI4OVwiOiBbMCwgMC42OTQ0NCwgMC4xNzI2MSwgMCwgMC42NjY2N10sXG4gICAgXCI5MFwiOiBbMCwgMC42OTQ0NCwgMC4xMTk4MywgMCwgMC42MTExMV0sXG4gICAgXCI5MVwiOiBbMC4yNSwgMC43NSwgMC4xNTk0MiwgMCwgMC4yODg4OV0sXG4gICAgXCI5M1wiOiBbMC4yNSwgMC43NSwgMC4wODcxOSwgMCwgMC4yODg4OV0sXG4gICAgXCI5NFwiOiBbMCwgMC42OTQ0NCwgMC4wNzk5LCAwLCAwLjVdLFxuICAgIFwiOTVcIjogWzAuMzUsIDAuMDk0NDQsIDAuMDg2MTYsIDAsIDAuNV0sXG4gICAgXCI5N1wiOiBbMCwgMC40NDQ0NCwgMC4wMDk4MSwgMCwgMC40ODA1Nl0sXG4gICAgXCI5OFwiOiBbMCwgMC42OTQ0NCwgMC4wMzA1NywgMCwgMC41MTY2N10sXG4gICAgXCI5OVwiOiBbMCwgMC40NDQ0NCwgMC4wODMzNiwgMCwgMC40NDQ0NV0sXG4gICAgXCIxMDBcIjogWzAsIDAuNjk0NDQsIDAuMDk0ODMsIDAsIDAuNTE2NjddLFxuICAgIFwiMTAxXCI6IFswLCAwLjQ0NDQ0LCAwLjA2Nzc4LCAwLCAwLjQ0NDQ1XSxcbiAgICBcIjEwMlwiOiBbMCwgMC42OTQ0NCwgMC4yMTcwNSwgMCwgMC4zMDU1Nl0sXG4gICAgXCIxMDNcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAuMTA4MzYsIDAsIDAuNV0sXG4gICAgXCIxMDRcIjogWzAsIDAuNjk0NDQsIDAuMDE3NzgsIDAsIDAuNTE2NjddLFxuICAgIFwiMTA1XCI6IFswLCAwLjY3OTM3LCAwLjA5NzE4LCAwLCAwLjIzODg5XSxcbiAgICBcIjEwNlwiOiBbMC4xOTQ0NCwgMC42NzkzNywgMC4wOTE2MiwgMCwgMC4yNjY2N10sXG4gICAgXCIxMDdcIjogWzAsIDAuNjk0NDQsIDAuMDgzMzYsIDAsIDAuNDg4ODldLFxuICAgIFwiMTA4XCI6IFswLCAwLjY5NDQ0LCAwLjA5NDgzLCAwLCAwLjIzODg5XSxcbiAgICBcIjEwOVwiOiBbMCwgMC40NDQ0NCwgMC4wMTc3OCwgMCwgMC43OTQ0NV0sXG4gICAgXCIxMTBcIjogWzAsIDAuNDQ0NDQsIDAuMDE3NzgsIDAsIDAuNTE2NjddLFxuICAgIFwiMTExXCI6IFswLCAwLjQ0NDQ0LCAwLjA2NjEzLCAwLCAwLjVdLFxuICAgIFwiMTEyXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLjAzODksIDAsIDAuNTE2NjddLFxuICAgIFwiMTEzXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLjA0MTY5LCAwLCAwLjUxNjY3XSxcbiAgICBcIjExNFwiOiBbMCwgMC40NDQ0NCwgMC4xMDgzNiwgMCwgMC4zNDE2N10sXG4gICAgXCIxMTVcIjogWzAsIDAuNDQ0NDQsIDAuMDc3OCwgMCwgMC4zODMzM10sXG4gICAgXCIxMTZcIjogWzAsIDAuNTcxNDMsIDAuMDcyMjUsIDAsIDAuMzYxMTFdLFxuICAgIFwiMTE3XCI6IFswLCAwLjQ0NDQ0LCAwLjA0MTY5LCAwLCAwLjUxNjY3XSxcbiAgICBcIjExOFwiOiBbMCwgMC40NDQ0NCwgMC4xMDgzNiwgMCwgMC40NjExMV0sXG4gICAgXCIxMTlcIjogWzAsIDAuNDQ0NDQsIDAuMTA4MzYsIDAsIDAuNjgzMzRdLFxuICAgIFwiMTIwXCI6IFswLCAwLjQ0NDQ0LCAwLjA5MTY5LCAwLCAwLjQ2MTExXSxcbiAgICBcIjEyMVwiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMC4xMDgzNiwgMCwgMC40NjExMV0sXG4gICAgXCIxMjJcIjogWzAsIDAuNDQ0NDQsIDAuMDg3NTIsIDAsIDAuNDM0NzJdLFxuICAgIFwiMTI2XCI6IFswLjM1LCAwLjMyNjU5LCAwLjA4ODI2LCAwLCAwLjVdLFxuICAgIFwiMTYwXCI6IFswLCAwLCAwLCAwLCAwLjI1XSxcbiAgICBcIjE2OFwiOiBbMCwgMC42NzkzNywgMC4wNjM4NSwgMCwgMC41XSxcbiAgICBcIjE3NlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43Mzc1Ml0sXG4gICAgXCIxODRcIjogWzAuMTcwMTQsIDAsIDAsIDAsIDAuNDQ0NDVdLFxuICAgIFwiMzA1XCI6IFswLCAwLjQ0NDQ0LCAwLjA0MTY5LCAwLCAwLjIzODg5XSxcbiAgICBcIjU2N1wiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMC4wNDE2OSwgMCwgMC4yNjY2N10sXG4gICAgXCI3MTBcIjogWzAsIDAuNjk0NDQsIDAuMDc5OSwgMCwgMC41XSxcbiAgICBcIjcxMVwiOiBbMCwgMC42MzE5NCwgMC4wODQzMiwgMCwgMC41XSxcbiAgICBcIjcxM1wiOiBbMCwgMC42MDg4OSwgMC4wODc3NiwgMCwgMC41XSxcbiAgICBcIjcxNFwiOiBbMCwgMC42OTQ0NCwgMC4wOTIwNSwgMCwgMC41XSxcbiAgICBcIjcxNVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjcyOFwiOiBbMCwgMC42OTQ0NCwgMC4wOTQ4MywgMCwgMC41XSxcbiAgICBcIjcyOVwiOiBbMCwgMC42NzkzNywgMC4wNzc3NCwgMCwgMC4yNzc3OF0sXG4gICAgXCI3MzBcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzM3NTJdLFxuICAgIFwiNzMyXCI6IFswLCAwLjY3NjU5LCAwLjA4ODI2LCAwLCAwLjVdLFxuICAgIFwiNzMzXCI6IFswLCAwLjY5NDQ0LCAwLjA5MjA1LCAwLCAwLjVdLFxuICAgIFwiOTE1XCI6IFswLCAwLjY5NDQ0LCAwLjEzMzcyLCAwLCAwLjU0MTY3XSxcbiAgICBcIjkxNlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC44MzMzNF0sXG4gICAgXCI5MjBcIjogWzAsIDAuNjk0NDQsIDAuMDc1NTUsIDAsIDAuNzc3NzhdLFxuICAgIFwiOTIzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjkyNlwiOiBbMCwgMC42OTQ0NCwgMC4xMjgxNiwgMCwgMC42NjY2N10sXG4gICAgXCI5MjhcIjogWzAsIDAuNjk0NDQsIDAuMDgwOTQsIDAsIDAuNzA4MzRdLFxuICAgIFwiOTMxXCI6IFswLCAwLjY5NDQ0LCAwLjExOTgzLCAwLCAwLjcyMjIyXSxcbiAgICBcIjkzM1wiOiBbMCwgMC42OTQ0NCwgMC4wOTAzMSwgMCwgMC43Nzc3OF0sXG4gICAgXCI5MzRcIjogWzAsIDAuNjk0NDQsIDAuMDQ2MDMsIDAsIDAuNzIyMjJdLFxuICAgIFwiOTM2XCI6IFswLCAwLjY5NDQ0LCAwLjA5MDMxLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjkzN1wiOiBbMCwgMC42OTQ0NCwgMC4wODI5MywgMCwgMC43MjIyMl0sXG4gICAgXCI4MjExXCI6IFswLCAwLjQ0NDQ0LCAwLjA4NjE2LCAwLCAwLjVdLFxuICAgIFwiODIxMlwiOiBbMCwgMC40NDQ0NCwgMC4wODYxNiwgMCwgMS4wXSxcbiAgICBcIjgyMTZcIjogWzAsIDAuNjk0NDQsIDAuMDc4MTYsIDAsIDAuMjc3NzhdLFxuICAgIFwiODIxN1wiOiBbMCwgMC42OTQ0NCwgMC4wNzgxNiwgMCwgMC4yNzc3OF0sXG4gICAgXCI4MjIwXCI6IFswLCAwLjY5NDQ0LCAwLjE0MjA1LCAwLCAwLjVdLFxuICAgIFwiODIyMVwiOiBbMCwgMC42OTQ0NCwgMC4wMDMxNiwgMCwgMC41XVxuICB9LFxuICBcIlNhbnNTZXJpZi1SZWd1bGFyXCI6IHtcbiAgICBcIjMyXCI6IFswLCAwLCAwLCAwLCAwLjI1XSxcbiAgICBcIjMzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjMxOTQ1XSxcbiAgICBcIjM0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiMzVcIjogWzAuMTk0NDQsIDAuNjk0NDQsIDAsIDAsIDAuODMzMzRdLFxuICAgIFwiMzZcIjogWzAuMDU1NTYsIDAuNzUsIDAsIDAsIDAuNV0sXG4gICAgXCIzN1wiOiBbMC4wNTU1NiwgMC43NSwgMCwgMCwgMC44MzMzNF0sXG4gICAgXCIzOFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43NTgzNF0sXG4gICAgXCIzOVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI0MFwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC4zODg4OV0sXG4gICAgXCI0MVwiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC4zODg4OV0sXG4gICAgXCI0MlwiOiBbMCwgMC43NSwgMCwgMCwgMC41XSxcbiAgICBcIjQzXCI6IFswLjA4MzMzLCAwLjU4MzMzLCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjQ0XCI6IFswLjEyNSwgMC4wODMzMywgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI0NVwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC4zMzMzM10sXG4gICAgXCI0NlwiOiBbMCwgMC4wODMzMywgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI0N1wiOiBbMC4yNSwgMC43NSwgMCwgMCwgMC41XSxcbiAgICBcIjQ4XCI6IFswLCAwLjY1NTU2LCAwLCAwLCAwLjVdLFxuICAgIFwiNDlcIjogWzAsIDAuNjU1NTYsIDAsIDAsIDAuNV0sXG4gICAgXCI1MFwiOiBbMCwgMC42NTU1NiwgMCwgMCwgMC41XSxcbiAgICBcIjUxXCI6IFswLCAwLjY1NTU2LCAwLCAwLCAwLjVdLFxuICAgIFwiNTJcIjogWzAsIDAuNjU1NTYsIDAsIDAsIDAuNV0sXG4gICAgXCI1M1wiOiBbMCwgMC42NTU1NiwgMCwgMCwgMC41XSxcbiAgICBcIjU0XCI6IFswLCAwLjY1NTU2LCAwLCAwLCAwLjVdLFxuICAgIFwiNTVcIjogWzAsIDAuNjU1NTYsIDAsIDAsIDAuNV0sXG4gICAgXCI1NlwiOiBbMCwgMC42NTU1NiwgMCwgMCwgMC41XSxcbiAgICBcIjU3XCI6IFswLCAwLjY1NTU2LCAwLCAwLCAwLjVdLFxuICAgIFwiNThcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiNTlcIjogWzAuMTI1LCAwLjQ0NDQ0LCAwLCAwLCAwLjI3Nzc4XSxcbiAgICBcIjYxXCI6IFstMC4xMywgMC4zNywgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI2M1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC40NzIyMl0sXG4gICAgXCI2NFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI2NVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI2NlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI2N1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42Mzg4OV0sXG4gICAgXCI2OFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MjIyM10sXG4gICAgXCI2OVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41OTcyMl0sXG4gICAgXCI3MFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41Njk0NV0sXG4gICAgXCI3MVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI3MlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MDgzNF0sXG4gICAgXCI3M1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI3NFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC40NzIyMl0sXG4gICAgXCI3NVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42OTQ0NV0sXG4gICAgXCI3NlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41NDE2N10sXG4gICAgXCI3N1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC44NzVdLFxuICAgIFwiNzhcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzA4MzRdLFxuICAgIFwiNzlcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzM2MTFdLFxuICAgIFwiODBcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjM4ODldLFxuICAgIFwiODFcIjogWzAuMTI1LCAwLjY5NDQ0LCAwLCAwLCAwLjczNjExXSxcbiAgICBcIjgyXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjY0NTg0XSxcbiAgICBcIjgzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjg0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjY4MDU2XSxcbiAgICBcIjg1XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjY4NzVdLFxuICAgIFwiODZcIjogWzAsIDAuNjk0NDQsIDAuMDEzODksIDAsIDAuNjY2NjddLFxuICAgIFwiODdcIjogWzAsIDAuNjk0NDQsIDAuMDEzODksIDAsIDAuOTQ0NDVdLFxuICAgIFwiODhcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiODlcIjogWzAsIDAuNjk0NDQsIDAuMDI1LCAwLCAwLjY2NjY3XSxcbiAgICBcIjkwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjkxXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjI4ODg5XSxcbiAgICBcIjkzXCI6IFswLjI1LCAwLjc1LCAwLCAwLCAwLjI4ODg5XSxcbiAgICBcIjk0XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiOTVcIjogWzAuMzUsIDAuMDk0NDQsIDAuMDI3NzgsIDAsIDAuNV0sXG4gICAgXCI5N1wiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC40ODA1Nl0sXG4gICAgXCI5OFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41MTY2N10sXG4gICAgXCI5OVwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC40NDQ0NV0sXG4gICAgXCIxMDBcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTE2NjddLFxuICAgIFwiMTAxXCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjQ0NDQ1XSxcbiAgICBcIjEwMlwiOiBbMCwgMC42OTQ0NCwgMC4wNjk0NCwgMCwgMC4zMDU1Nl0sXG4gICAgXCIxMDNcIjogWzAuMTk0NDQsIDAuNDQ0NDQsIDAuMDEzODksIDAsIDAuNV0sXG4gICAgXCIxMDRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNTE2NjddLFxuICAgIFwiMTA1XCI6IFswLCAwLjY3OTM3LCAwLCAwLCAwLjIzODg5XSxcbiAgICBcIjEwNlwiOiBbMC4xOTQ0NCwgMC42NzkzNywgMCwgMCwgMC4yNjY2N10sXG4gICAgXCIxMDdcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNDg4ODldLFxuICAgIFwiMTA4XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjIzODg5XSxcbiAgICBcIjEwOVwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC43OTQ0NV0sXG4gICAgXCIxMTBcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNTE2NjddLFxuICAgIFwiMTExXCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiMTEyXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLCAwLCAwLjUxNjY3XSxcbiAgICBcIjExM1wiOiBbMC4xOTQ0NCwgMC40NDQ0NCwgMCwgMCwgMC41MTY2N10sXG4gICAgXCIxMTRcIjogWzAsIDAuNDQ0NDQsIDAuMDEzODksIDAsIDAuMzQxNjddLFxuICAgIFwiMTE1XCI6IFswLCAwLjQ0NDQ0LCAwLCAwLCAwLjM4MzMzXSxcbiAgICBcIjExNlwiOiBbMCwgMC41NzE0MywgMCwgMCwgMC4zNjExMV0sXG4gICAgXCIxMTdcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNTE2NjddLFxuICAgIFwiMTE4XCI6IFswLCAwLjQ0NDQ0LCAwLjAxMzg5LCAwLCAwLjQ2MTExXSxcbiAgICBcIjExOVwiOiBbMCwgMC40NDQ0NCwgMC4wMTM4OSwgMCwgMC42ODMzNF0sXG4gICAgXCIxMjBcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuNDYxMTFdLFxuICAgIFwiMTIxXCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLjAxMzg5LCAwLCAwLjQ2MTExXSxcbiAgICBcIjEyMlwiOiBbMCwgMC40NDQ0NCwgMCwgMCwgMC40MzQ3Ml0sXG4gICAgXCIxMjZcIjogWzAuMzUsIDAuMzI2NTksIDAsIDAsIDAuNV0sXG4gICAgXCIxNjBcIjogWzAsIDAsIDAsIDAsIDAuMjVdLFxuICAgIFwiMTY4XCI6IFswLCAwLjY3OTM3LCAwLCAwLCAwLjVdLFxuICAgIFwiMTc2XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjE4NFwiOiBbMC4xNzAxNCwgMCwgMCwgMCwgMC40NDQ0NV0sXG4gICAgXCIzMDVcIjogWzAsIDAuNDQ0NDQsIDAsIDAsIDAuMjM4ODldLFxuICAgIFwiNTY3XCI6IFswLjE5NDQ0LCAwLjQ0NDQ0LCAwLCAwLCAwLjI2NjY3XSxcbiAgICBcIjcxMFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjcxMVwiOiBbMCwgMC42MzE5NCwgMCwgMCwgMC41XSxcbiAgICBcIjcxM1wiOiBbMCwgMC42MDg4OSwgMCwgMCwgMC41XSxcbiAgICBcIjcxNFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjcxNVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjcyOFwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41XSxcbiAgICBcIjcyOVwiOiBbMCwgMC42NzkzNywgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI3MzBcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiNzMyXCI6IFswLCAwLjY3NjU5LCAwLCAwLCAwLjVdLFxuICAgIFwiNzMzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiOTE1XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjU0MTY3XSxcbiAgICBcIjkxNlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC44MzMzNF0sXG4gICAgXCI5MjBcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzc3NzhdLFxuICAgIFwiOTIzXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjkyNlwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI5MjhcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzA4MzRdLFxuICAgIFwiOTMxXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjcyMjIyXSxcbiAgICBcIjkzM1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI5MzRcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuNzIyMjJdLFxuICAgIFwiOTM2XCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjkzN1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC43MjIyMl0sXG4gICAgXCI4MjExXCI6IFswLCAwLjQ0NDQ0LCAwLjAyNzc4LCAwLCAwLjVdLFxuICAgIFwiODIxMlwiOiBbMCwgMC40NDQ0NCwgMC4wMjc3OCwgMCwgMS4wXSxcbiAgICBcIjgyMTZcIjogWzAsIDAuNjk0NDQsIDAsIDAsIDAuMjc3NzhdLFxuICAgIFwiODIxN1wiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC4yNzc3OF0sXG4gICAgXCI4MjIwXCI6IFswLCAwLjY5NDQ0LCAwLCAwLCAwLjVdLFxuICAgIFwiODIyMVwiOiBbMCwgMC42OTQ0NCwgMCwgMCwgMC41XVxuICB9LFxuICBcIlNjcmlwdC1SZWd1bGFyXCI6IHtcbiAgICBcIjMyXCI6IFswLCAwLCAwLCAwLCAwLjI1XSxcbiAgICBcIjY1XCI6IFswLCAwLjcsIDAuMjI5MjUsIDAsIDAuODAyNTNdLFxuICAgIFwiNjZcIjogWzAsIDAuNywgMC4wNDA4NywgMCwgMC45MDc1N10sXG4gICAgXCI2N1wiOiBbMCwgMC43LCAwLjE2ODksIDAsIDAuNjY2MTldLFxuICAgIFwiNjhcIjogWzAsIDAuNywgMC4wOTM3MSwgMCwgMC43NzQ0M10sXG4gICAgXCI2OVwiOiBbMCwgMC43LCAwLjE4NTgzLCAwLCAwLjU2MTYyXSxcbiAgICBcIjcwXCI6IFswLCAwLjcsIDAuMTM2MzQsIDAsIDAuODk1NDRdLFxuICAgIFwiNzFcIjogWzAsIDAuNywgMC4xNzMyMiwgMCwgMC42MDk2MV0sXG4gICAgXCI3MlwiOiBbMCwgMC43LCAwLjI5Njk0LCAwLCAwLjk2OTE5XSxcbiAgICBcIjczXCI6IFswLCAwLjcsIDAuMTkxODksIDAsIDAuODA5MDddLFxuICAgIFwiNzRcIjogWzAuMjc3NzgsIDAuNywgMC4xOTE4OSwgMCwgMS4wNTE1OV0sXG4gICAgXCI3NVwiOiBbMCwgMC43LCAwLjMxMjU5LCAwLCAwLjkxMzY0XSxcbiAgICBcIjc2XCI6IFswLCAwLjcsIDAuMTkxODksIDAsIDAuODczNzNdLFxuICAgIFwiNzdcIjogWzAsIDAuNywgMC4xNTk4MSwgMCwgMS4wODAzMV0sXG4gICAgXCI3OFwiOiBbMCwgMC43LCAwLjM1MjUsIDAsIDAuOTAxNV0sXG4gICAgXCI3OVwiOiBbMCwgMC43LCAwLjA4MDc4LCAwLCAwLjczNzg3XSxcbiAgICBcIjgwXCI6IFswLCAwLjcsIDAuMDgwNzgsIDAsIDEuMDEyNjJdLFxuICAgIFwiODFcIjogWzAsIDAuNywgMC4wMzMwNSwgMCwgMC44ODI4Ml0sXG4gICAgXCI4MlwiOiBbMCwgMC43LCAwLjA2MjU5LCAwLCAwLjg1XSxcbiAgICBcIjgzXCI6IFswLCAwLjcsIDAuMTkxODksIDAsIDAuODY3NjddLFxuICAgIFwiODRcIjogWzAsIDAuNywgMC4yOTA4NywgMCwgMC43NDY5N10sXG4gICAgXCI4NVwiOiBbMCwgMC43LCAwLjI1ODE1LCAwLCAwLjc5OTk2XSxcbiAgICBcIjg2XCI6IFswLCAwLjcsIDAuMjc1MjMsIDAsIDAuNjIyMDRdLFxuICAgIFwiODdcIjogWzAsIDAuNywgMC4yNzUyMywgMCwgMC44MDUzMl0sXG4gICAgXCI4OFwiOiBbMCwgMC43LCAwLjI2MDA2LCAwLCAwLjk0NDQ1XSxcbiAgICBcIjg5XCI6IFswLCAwLjcsIDAuMjkzOSwgMCwgMC43MDk2MV0sXG4gICAgXCI5MFwiOiBbMCwgMC43LCAwLjI0MDM3LCAwLCAwLjgyMTJdLFxuICAgIFwiMTYwXCI6IFswLCAwLCAwLCAwLCAwLjI1XVxuICB9LFxuICBcIlNpemUxLVJlZ3VsYXJcIjoge1xuICAgIFwiMzJcIjogWzAsIDAsIDAsIDAsIDAuMjVdLFxuICAgIFwiNDBcIjogWzAuMzUwMDEsIDAuODUsIDAsIDAsIDAuNDU4MzRdLFxuICAgIFwiNDFcIjogWzAuMzUwMDEsIDAuODUsIDAsIDAsIDAuNDU4MzRdLFxuICAgIFwiNDdcIjogWzAuMzUwMDEsIDAuODUsIDAsIDAsIDAuNTc3NzhdLFxuICAgIFwiOTFcIjogWzAuMzUwMDEsIDAuODUsIDAsIDAsIDAuNDE2NjddLFxuICAgIFwiOTJcIjogWzAuMzUwMDEsIDAuODUsIDAsIDAsIDAuNTc3NzhdLFxuICAgIFwiOTNcIjogWzAuMzUwMDEsIDAuODUsIDAsIDAsIDAuNDE2NjddLFxuICAgIFwiMTIzXCI6IFswLjM1MDAxLCAwLjg1LCAwLCAwLCAwLjU4MzM0XSxcbiAgICBcIjEyNVwiOiBbMC4zNTAwMSwgMC44NSwgMCwgMCwgMC41ODMzNF0sXG4gICAgXCIxNjBcIjogWzAsIDAsIDAsIDAsIDAuMjVdLFxuICAgIFwiNzEwXCI6IFswLCAwLjcyMjIyLCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjczMlwiOiBbMCwgMC43MjIyMiwgMCwgMCwgMC41NTU1Nl0sXG4gICAgXCI3NzBcIjogWzAsIDAuNzIyMjIsIDAsIDAsIDAuNTU1NTZdLFxuICAgIFwiNzcxXCI6IFswLCAwLjcyMjIyLCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjgyMTRcIjogWy0wLjAwMDk5LCAwLjYwMSwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4NTkzXCI6IFsxZS0wNSwgMC42LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjg1OTVcIjogWzFlLTA1LCAwLjYsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiODY1N1wiOiBbMWUtMDUsIDAuNiwgMCwgMCwgMC43Nzc3OF0sXG4gICAgXCI4NjU5XCI6IFsxZS0wNSwgMC42LCAwLCAwLCAwLjc3Nzc4XSxcbiAgICBcIjg3MTlcIjogWzAuMjUwMDEsIDAuNzUsIDAsIDAsIDAuOTQ0NDVdLFxuICAgIFwiODcyMFwiOiBbMC4yNTAwMSwgMC43NSwgMCwgMCwgMC45NDQ0NV0sXG4gICAgXCI4NzIxXCI6IFswLjI1MDAxLCAwLjc1LCAwLCAwLCAxLjA1NTU2XSxcbiAgICBcIjg3MzBcIjogWzAuMzUwMDEsIDAuODUsIDAsIDAsIDEuMF0sXG4gICAgXCI4NzM5XCI6IFstMC4wMDU5OSwgMC42MDYsIDAsIDAsIDAuMzMzMzNdLFxuICAgIFwiODc0MVwiOiBbLTAuMDA1OTksIDAuNjA2LCAwLCAwLCAwLjU1NTU2XSxcbiAgICBcIjg3NDdcIjogWzAuMzA2MTIsIDAuODA1LCAwLjE5NDQ1LCAwLCAwLjQ3MjIyXSxcbiAgICBcIjg3NDhcIjogWzAuMzA2LCAwLjgwNSwgMC4xOTQ0NSwgMCwgMC40NzIyMl0sXG4gICAgXCI4NzQ5XCI6IFswLjMwNiwgMC44MDUsIDAuMTk0NDUsIDAsIDAuNDcyMjJdLFxuICAgIFwiODc1MFwiOiBbMC4zMDYxMiwgMC44MDUsIDAuMTk0NDUsIDAsIDAuNDcyMjJdLFxuICAgIFwiODg5NlwiOiBbMC4yNTAwMSwgMC43NSwgMCwgMCwgMC44MzMzNF0sXG4gICAgXCI4ODk3XCI6IFswLjI1MDAxLCAwLjc1LCAwLCAwLCAwLjgzMzM0XSxcbiAgICBcIjg4OThcIjogWzAuMjUwMDEsIDAuNzUsIDAsIDAsIDAuODMzMzRdLFxuICAgIFwiODg5OVwiOiBbMC4yNTAwMSwgMC43NSwgMCwgMCwgMC44MzMzNF0sXG4gICAgXCI4OTY4XCI6IFswLjM1MDAxLCAwLjg1LCAwLCAwLCAwLjQ3MjIyXSxcbiAgICBcIjg5NjlcIjogWzAuMzUwMDEsIDAuODUsIDAsIDAsIDAuNDcyMjJdLFxuICAgIFwiODk3MFwiOiBbMC4zNTAwMSwgMC44NSwgMCwgMCwgMC40NzIyMl0sXG4gICAgXCI4OTcxXCI6IFswLjM1MDAxLCAwLjg1LCAwLCAwLCAwLjQ3MjIyXSxcbiAgICBcIjkxNjhcIjogWy0wLjAwMDk5LCAwLjYwMSwgMCwgMCwgMC42NjY2N10sXG4gICAgXCIxMDIxNlwiOiBbMC4zNTAwMSwgMC44NSwgMCwgMCwgMC40NzIyMl0sXG4gICAgXCIxMDIxN1wiOiBbMC4zNTAwMSwgMC44NSwgMCwgMCwgMC40NzIyMl0sXG4gICAgXCIxMDc1MlwiOiBbMC4yNTAwMSwgMC43NSwgMCwgMCwgMS4xMTExMV0sXG4gICAgXCIxMDc1M1wiOiBbMC4yNTAwMSwgMC43NSwgMCwgMCwgMS4xMTExMV0sXG4gICAgXCIxMDc1NFwiOiBbMC4yNTAwMSwgMC43NSwgMCwgMCwgMS4xMTExMV0sXG4gICAgXCIxMDc1NlwiOiBbMC4yNTAwMSwgMC43NSwgMCwgMCwgMC44MzMzNF0sXG4gICAgXCIxMDc1OFwiOiBbMC4yNTAwMSwgMC43NSwgMCwgMCwgMC44MzMzNF1cbiAgfSxcbiAgXCJTaXplMi1SZWd1bGFyXCI6IHtcbiAgICBcIjMyXCI6IFswLCAwLCAwLCAwLCAwLjI1XSxcbiAgICBcIjQwXCI6IFswLjY1MDAyLCAxLjE1LCAwLCAwLCAwLjU5NzIyXSxcbiAgICBcIjQxXCI6IFswLjY1MDAyLCAxLjE1LCAwLCAwLCAwLjU5NzIyXSxcbiAgICBcIjQ3XCI6IFswLjY1MDAyLCAxLjE1LCAwLCAwLCAwLjgxMTExXSxcbiAgICBcIjkxXCI6IFswLjY1MDAyLCAxLjE1LCAwLCAwLCAwLjQ3MjIyXSxcbiAgICBcIjkyXCI6IFswLjY1MDAyLCAxLjE1LCAwLCAwLCAwLjgxMTExXSxcbiAgICBcIjkzXCI6IFswLjY1MDAyLCAxLjE1LCAwLCAwLCAwLjQ3MjIyXSxcbiAgICBcIjEyM1wiOiBbMC42NTAwMiwgMS4xNSwgMCwgMCwgMC42NjY2N10sXG4gICAgXCIxMjVcIjogWzAuNjUwMDIsIDEuMTUsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiMTYwXCI6IFswLCAwLCAwLCAwLCAwLjI1XSxcbiAgICBcIjcxMFwiOiBbMCwgMC43NSwgMCwgMCwgMS4wXSxcbiAgICBcIjczMlwiOiBbMCwgMC43NSwgMCwgMCwgMS4wXSxcbiAgICBcIjc3MFwiOiBbMCwgMC43NSwgMCwgMCwgMS4wXSxcbiAgICBcIjc3MVwiOiBbMCwgMC43NSwgMCwgMCwgMS4wXSxcbiAgICBcIjg3MTlcIjogWzAuNTUwMDEsIDEuMDUsIDAsIDAsIDEuMjc3NzhdLFxuICAgIFwiODcyMFwiOiBbMC41NTAwMSwgMS4wNSwgMCwgMCwgMS4yNzc3OF0sXG4gICAgXCI4NzIxXCI6IFswLjU1MDAxLCAxLjA1LCAwLCAwLCAxLjQ0NDQ1XSxcbiAgICBcIjg3MzBcIjogWzAuNjUwMDIsIDEuMTUsIDAsIDAsIDEuMF0sXG4gICAgXCI4NzQ3XCI6IFswLjg2MjI1LCAxLjM2LCAwLjQ0NDQ1LCAwLCAwLjU1NTU2XSxcbiAgICBcIjg3NDhcIjogWzAuODYyLCAxLjM2LCAwLjQ0NDQ1LCAwLCAwLjU1NTU2XSxcbiAgICBcIjg3NDlcIjogWzAuODYyLCAxLjM2LCAwLjQ0NDQ1LCAwLCAwLjU1NTU2XSxcbiAgICBcIjg3NTBcIjogWzAuODYyMjUsIDEuMzYsIDAuNDQ0NDUsIDAsIDAuNTU1NTZdLFxuICAgIFwiODg5NlwiOiBbMC41NTAwMSwgMS4wNSwgMCwgMCwgMS4xMTExMV0sXG4gICAgXCI4ODk3XCI6IFswLjU1MDAxLCAxLjA1LCAwLCAwLCAxLjExMTExXSxcbiAgICBcIjg4OThcIjogWzAuNTUwMDEsIDEuMDUsIDAsIDAsIDEuMTExMTFdLFxuICAgIFwiODg5OVwiOiBbMC41NTAwMSwgMS4wNSwgMCwgMCwgMS4xMTExMV0sXG4gICAgXCI4OTY4XCI6IFswLjY1MDAyLCAxLjE1LCAwLCAwLCAwLjUyNzc4XSxcbiAgICBcIjg5NjlcIjogWzAuNjUwMDIsIDEuMTUsIDAsIDAsIDAuNTI3NzhdLFxuICAgIFwiODk3MFwiOiBbMC42NTAwMiwgMS4xNSwgMCwgMCwgMC41Mjc3OF0sXG4gICAgXCI4OTcxXCI6IFswLjY1MDAyLCAxLjE1LCAwLCAwLCAwLjUyNzc4XSxcbiAgICBcIjEwMjE2XCI6IFswLjY1MDAyLCAxLjE1LCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjEwMjE3XCI6IFswLjY1MDAyLCAxLjE1LCAwLCAwLCAwLjYxMTExXSxcbiAgICBcIjEwNzUyXCI6IFswLjU1MDAxLCAxLjA1LCAwLCAwLCAxLjUxMTEyXSxcbiAgICBcIjEwNzUzXCI6IFswLjU1MDAxLCAxLjA1LCAwLCAwLCAxLjUxMTEyXSxcbiAgICBcIjEwNzU0XCI6IFswLjU1MDAxLCAxLjA1LCAwLCAwLCAxLjUxMTEyXSxcbiAgICBcIjEwNzU2XCI6IFswLjU1MDAxLCAxLjA1LCAwLCAwLCAxLjExMTExXSxcbiAgICBcIjEwNzU4XCI6IFswLjU1MDAxLCAxLjA1LCAwLCAwLCAxLjExMTExXVxuICB9LFxuICBcIlNpemUzLVJlZ3VsYXJcIjoge1xuICAgIFwiMzJcIjogWzAsIDAsIDAsIDAsIDAuMjVdLFxuICAgIFwiNDBcIjogWzAuOTUwMDMsIDEuNDUsIDAsIDAsIDAuNzM2MTFdLFxuICAgIFwiNDFcIjogWzAuOTUwMDMsIDEuNDUsIDAsIDAsIDAuNzM2MTFdLFxuICAgIFwiNDdcIjogWzAuOTUwMDMsIDEuNDUsIDAsIDAsIDEuMDQ0NDVdLFxuICAgIFwiOTFcIjogWzAuOTUwMDMsIDEuNDUsIDAsIDAsIDAuNTI3NzhdLFxuICAgIFwiOTJcIjogWzAuOTUwMDMsIDEuNDUsIDAsIDAsIDEuMDQ0NDVdLFxuICAgIFwiOTNcIjogWzAuOTUwMDMsIDEuNDUsIDAsIDAsIDAuNTI3NzhdLFxuICAgIFwiMTIzXCI6IFswLjk1MDAzLCAxLjQ1LCAwLCAwLCAwLjc1XSxcbiAgICBcIjEyNVwiOiBbMC45NTAwMywgMS40NSwgMCwgMCwgMC43NV0sXG4gICAgXCIxNjBcIjogWzAsIDAsIDAsIDAsIDAuMjVdLFxuICAgIFwiNzEwXCI6IFswLCAwLjc1LCAwLCAwLCAxLjQ0NDQ1XSxcbiAgICBcIjczMlwiOiBbMCwgMC43NSwgMCwgMCwgMS40NDQ0NV0sXG4gICAgXCI3NzBcIjogWzAsIDAuNzUsIDAsIDAsIDEuNDQ0NDVdLFxuICAgIFwiNzcxXCI6IFswLCAwLjc1LCAwLCAwLCAxLjQ0NDQ1XSxcbiAgICBcIjg3MzBcIjogWzAuOTUwMDMsIDEuNDUsIDAsIDAsIDEuMF0sXG4gICAgXCI4OTY4XCI6IFswLjk1MDAzLCAxLjQ1LCAwLCAwLCAwLjU4MzM0XSxcbiAgICBcIjg5NjlcIjogWzAuOTUwMDMsIDEuNDUsIDAsIDAsIDAuNTgzMzRdLFxuICAgIFwiODk3MFwiOiBbMC45NTAwMywgMS40NSwgMCwgMCwgMC41ODMzNF0sXG4gICAgXCI4OTcxXCI6IFswLjk1MDAzLCAxLjQ1LCAwLCAwLCAwLjU4MzM0XSxcbiAgICBcIjEwMjE2XCI6IFswLjk1MDAzLCAxLjQ1LCAwLCAwLCAwLjc1XSxcbiAgICBcIjEwMjE3XCI6IFswLjk1MDAzLCAxLjQ1LCAwLCAwLCAwLjc1XVxuICB9LFxuICBcIlNpemU0LVJlZ3VsYXJcIjoge1xuICAgIFwiMzJcIjogWzAsIDAsIDAsIDAsIDAuMjVdLFxuICAgIFwiNDBcIjogWzEuMjUwMDMsIDEuNzUsIDAsIDAsIDAuNzkxNjddLFxuICAgIFwiNDFcIjogWzEuMjUwMDMsIDEuNzUsIDAsIDAsIDAuNzkxNjddLFxuICAgIFwiNDdcIjogWzEuMjUwMDMsIDEuNzUsIDAsIDAsIDEuMjc3NzhdLFxuICAgIFwiOTFcIjogWzEuMjUwMDMsIDEuNzUsIDAsIDAsIDAuNTgzMzRdLFxuICAgIFwiOTJcIjogWzEuMjUwMDMsIDEuNzUsIDAsIDAsIDEuMjc3NzhdLFxuICAgIFwiOTNcIjogWzEuMjUwMDMsIDEuNzUsIDAsIDAsIDAuNTgzMzRdLFxuICAgIFwiMTIzXCI6IFsxLjI1MDAzLCAxLjc1LCAwLCAwLCAwLjgwNTU2XSxcbiAgICBcIjEyNVwiOiBbMS4yNTAwMywgMS43NSwgMCwgMCwgMC44MDU1Nl0sXG4gICAgXCIxNjBcIjogWzAsIDAsIDAsIDAsIDAuMjVdLFxuICAgIFwiNzEwXCI6IFswLCAwLjgyNSwgMCwgMCwgMS44ODg5XSxcbiAgICBcIjczMlwiOiBbMCwgMC44MjUsIDAsIDAsIDEuODg4OV0sXG4gICAgXCI3NzBcIjogWzAsIDAuODI1LCAwLCAwLCAxLjg4ODldLFxuICAgIFwiNzcxXCI6IFswLCAwLjgyNSwgMCwgMCwgMS44ODg5XSxcbiAgICBcIjg3MzBcIjogWzEuMjUwMDMsIDEuNzUsIDAsIDAsIDEuMF0sXG4gICAgXCI4OTY4XCI6IFsxLjI1MDAzLCAxLjc1LCAwLCAwLCAwLjYzODg5XSxcbiAgICBcIjg5NjlcIjogWzEuMjUwMDMsIDEuNzUsIDAsIDAsIDAuNjM4ODldLFxuICAgIFwiODk3MFwiOiBbMS4yNTAwMywgMS43NSwgMCwgMCwgMC42Mzg4OV0sXG4gICAgXCI4OTcxXCI6IFsxLjI1MDAzLCAxLjc1LCAwLCAwLCAwLjYzODg5XSxcbiAgICBcIjkxMTVcIjogWzAuNjQ1MDIsIDEuMTU1LCAwLCAwLCAwLjg3NV0sXG4gICAgXCI5MTE2XCI6IFsxZS0wNSwgMC42LCAwLCAwLCAwLjg3NV0sXG4gICAgXCI5MTE3XCI6IFswLjY0NTAyLCAxLjE1NSwgMCwgMCwgMC44NzVdLFxuICAgIFwiOTExOFwiOiBbMC42NDUwMiwgMS4xNTUsIDAsIDAsIDAuODc1XSxcbiAgICBcIjkxMTlcIjogWzFlLTA1LCAwLjYsIDAsIDAsIDAuODc1XSxcbiAgICBcIjkxMjBcIjogWzAuNjQ1MDIsIDEuMTU1LCAwLCAwLCAwLjg3NV0sXG4gICAgXCI5MTIxXCI6IFswLjY0NTAyLCAxLjE1NSwgMCwgMCwgMC42NjY2N10sXG4gICAgXCI5MTIyXCI6IFstMC4wMDA5OSwgMC42MDEsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiOTEyM1wiOiBbMC42NDUwMiwgMS4xNTUsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiOTEyNFwiOiBbMC42NDUwMiwgMS4xNTUsIDAsIDAsIDAuNjY2NjddLFxuICAgIFwiOTEyNVwiOiBbLTAuMDAwOTksIDAuNjAxLCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjkxMjZcIjogWzAuNjQ1MDIsIDEuMTU1LCAwLCAwLCAwLjY2NjY3XSxcbiAgICBcIjkxMjdcIjogWzFlLTA1LCAwLjksIDAsIDAsIDAuODg4ODldLFxuICAgIFwiOTEyOFwiOiBbMC42NTAwMiwgMS4xNSwgMCwgMCwgMC44ODg4OV0sXG4gICAgXCI5MTI5XCI6IFswLjkwMDAxLCAwLCAwLCAwLCAwLjg4ODg5XSxcbiAgICBcIjkxMzBcIjogWzAsIDAuMywgMCwgMCwgMC44ODg4OV0sXG4gICAgXCI5MTMxXCI6IFsxZS0wNSwgMC45LCAwLCAwLCAwLjg4ODg5XSxcbiAgICBcIjkxMzJcIjogWzAuNjUwMDIsIDEuMTUsIDAsIDAsIDAuODg4ODldLFxuICAgIFwiOTEzM1wiOiBbMC45MDAwMSwgMCwgMCwgMCwgMC44ODg4OV0sXG4gICAgXCI5MTQzXCI6IFswLjg4NTAyLCAwLjkxNSwgMCwgMCwgMS4wNTU1Nl0sXG4gICAgXCIxMDIxNlwiOiBbMS4yNTAwMywgMS43NSwgMCwgMCwgMC44MDU1Nl0sXG4gICAgXCIxMDIxN1wiOiBbMS4yNTAwMywgMS43NSwgMCwgMCwgMC44MDU1Nl0sXG4gICAgXCI1NzM0NFwiOiBbLTAuMDA0OTksIDAuNjA1LCAwLCAwLCAxLjA1NTU2XSxcbiAgICBcIjU3MzQ1XCI6IFstMC4wMDQ5OSwgMC42MDUsIDAsIDAsIDEuMDU1NTZdLFxuICAgIFwiNTc2ODBcIjogWzAsIDAuMTIsIDAsIDAsIDAuNDVdLFxuICAgIFwiNTc2ODFcIjogWzAsIDAuMTIsIDAsIDAsIDAuNDVdLFxuICAgIFwiNTc2ODJcIjogWzAsIDAuMTIsIDAsIDAsIDAuNDVdLFxuICAgIFwiNTc2ODNcIjogWzAsIDAuMTIsIDAsIDAsIDAuNDVdXG4gIH0sXG4gIFwiVHlwZXdyaXRlci1SZWd1bGFyXCI6IHtcbiAgICBcIjMyXCI6IFswLCAwLCAwLCAwLCAwLjUyNV0sXG4gICAgXCIzM1wiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiMzRcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjM1XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCIzNlwiOiBbMC4wODMzMywgMC42OTQ0NCwgMCwgMCwgMC41MjVdLFxuICAgIFwiMzdcIjogWzAuMDgzMzMsIDAuNjk0NDQsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjM4XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCIzOVwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNDBcIjogWzAuMDgzMzMsIDAuNjk0NDQsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjQxXCI6IFswLjA4MzMzLCAwLjY5NDQ0LCAwLCAwLCAwLjUyNV0sXG4gICAgXCI0MlwiOiBbMCwgMC41MjA4MywgMCwgMCwgMC41MjVdLFxuICAgIFwiNDNcIjogWy0wLjA4MDU2LCAwLjUzMDU1LCAwLCAwLCAwLjUyNV0sXG4gICAgXCI0NFwiOiBbMC4xMzg4OSwgMC4xMjUsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjQ1XCI6IFstMC4wODA1NiwgMC41MzA1NSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNDZcIjogWzAsIDAuMTI1LCAwLCAwLCAwLjUyNV0sXG4gICAgXCI0N1wiOiBbMC4wODMzMywgMC42OTQ0NCwgMCwgMCwgMC41MjVdLFxuICAgIFwiNDhcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjQ5XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI1MFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNTFcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjUyXCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI1M1wiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNTRcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjU1XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI1NlwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNTdcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjU4XCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjUyNV0sXG4gICAgXCI1OVwiOiBbMC4xMzg4OSwgMC40MzA1NiwgMCwgMCwgMC41MjVdLFxuICAgIFwiNjBcIjogWy0wLjA1NTU2LCAwLjU1NTU2LCAwLCAwLCAwLjUyNV0sXG4gICAgXCI2MVwiOiBbLTAuMTk1NDksIDAuNDE1NjIsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjYyXCI6IFstMC4wNTU1NiwgMC41NTU1NiwgMCwgMCwgMC41MjVdLFxuICAgIFwiNjNcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjY0XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI2NVwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNjZcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjY3XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI2OFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNjlcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjcwXCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI3MVwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNzJcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjczXCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI3NFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNzVcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjc2XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI3N1wiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNzhcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjc5XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI4MFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiODFcIjogWzAuMTM4ODksIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjgyXCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI4M1wiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiODRcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjg1XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI4NlwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiODdcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjg4XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI4OVwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiOTBcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjkxXCI6IFswLjA4MzMzLCAwLjY5NDQ0LCAwLCAwLCAwLjUyNV0sXG4gICAgXCI5MlwiOiBbMC4wODMzMywgMC42OTQ0NCwgMCwgMCwgMC41MjVdLFxuICAgIFwiOTNcIjogWzAuMDgzMzMsIDAuNjk0NDQsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjk0XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI5NVwiOiBbMC4wOTUxNCwgMCwgMCwgMCwgMC41MjVdLFxuICAgIFwiOTZcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjk3XCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjUyNV0sXG4gICAgXCI5OFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiOTlcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjEwMFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTAxXCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxMDJcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjEwM1wiOiBbMC4yMjIyMiwgMC40MzA1NiwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTA0XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxMDVcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjEwNlwiOiBbMC4yMjIyMiwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTA3XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxMDhcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjEwOVwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTEwXCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxMTFcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjExMlwiOiBbMC4yMjIyMiwgMC40MzA1NiwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTEzXCI6IFswLjIyMjIyLCAwLjQzMDU2LCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxMTRcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjExNVwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTE2XCI6IFswLCAwLjU1MzU4LCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxMTdcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjExOFwiOiBbMCwgMC40MzA1NiwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTE5XCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxMjBcIjogWzAsIDAuNDMwNTYsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjEyMVwiOiBbMC4yMjIyMiwgMC40MzA1NiwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTIyXCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxMjNcIjogWzAuMDgzMzMsIDAuNjk0NDQsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjEyNFwiOiBbMC4wODMzMywgMC42OTQ0NCwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTI1XCI6IFswLjA4MzMzLCAwLjY5NDQ0LCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxMjZcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjEyN1wiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiMTYwXCI6IFswLCAwLCAwLCAwLCAwLjUyNV0sXG4gICAgXCIxNzZcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjE4NFwiOiBbMC4xOTQ0NSwgMCwgMCwgMCwgMC41MjVdLFxuICAgIFwiMzA1XCI6IFswLCAwLjQzMDU2LCAwLCAwLCAwLjUyNV0sXG4gICAgXCI1NjdcIjogWzAuMjIyMjIsIDAuNDMwNTYsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjcxMVwiOiBbMCwgMC41NjU5NywgMCwgMCwgMC41MjVdLFxuICAgIFwiNzEzXCI6IFswLCAwLjU2NTU1LCAwLCAwLCAwLjUyNV0sXG4gICAgXCI3MTRcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjcxNVwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNzI4XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI3MzBcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjc3MFwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiNzcxXCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI3NzZcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjkxNVwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiOTE2XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI5MjBcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjkyM1wiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiOTI2XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI5MjhcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjkzMVwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiOTMzXCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI5MzRcIjogWzAsIDAuNjExMTEsIDAsIDAsIDAuNTI1XSxcbiAgICBcIjkzNlwiOiBbMCwgMC42MTExMSwgMCwgMCwgMC41MjVdLFxuICAgIFwiOTM3XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI4MjE2XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI4MjE3XCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI4MjQyXCI6IFswLCAwLjYxMTExLCAwLCAwLCAwLjUyNV0sXG4gICAgXCI5MjUxXCI6IFswLjExMTExLCAwLjIxOTQ0LCAwLCAwLCAwLjUyNV1cbiAgfVxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZm9udE1ldHJpY3MuanNcblxuXG4vKipcbiAqIFRoaXMgZmlsZSBjb250YWlucyBtZXRyaWNzIHJlZ2FyZGluZyBmb250cyBhbmQgaW5kaXZpZHVhbCBzeW1ib2xzLiBUaGUgc2lnbWFcbiAqIGFuZCB4aSB2YXJpYWJsZXMsIGFzIHdlbGwgYXMgdGhlIG1ldHJpY01hcCBtYXAgY29udGFpbiBkYXRhIGV4dHJhY3RlZCBmcm9tXG4gKiBUZVgsIFRlWCBmb250IG1ldHJpY3MsIGFuZCB0aGUgVFRGIGZpbGVzLiBUaGVzZSBkYXRhIGFyZSB0aGVuIGV4cG9zZWQgdmlhIHRoZVxuICogYG1ldHJpY3NgIHZhcmlhYmxlIGFuZCB0aGUgZ2V0Q2hhcmFjdGVyTWV0cmljcyBmdW5jdGlvbi5cbiAqL1xuLy8gSW4gVGVYLCB0aGVyZSBhcmUgYWN0dWFsbHkgdGhyZWUgc2V0cyBvZiBkaW1lbnNpb25zLCBvbmUgZm9yIGVhY2ggb2Zcbi8vIHRleHRzdHlsZSAoc2l6ZSBpbmRleCA1IGFuZCBoaWdoZXI6ID49OXB0KSwgc2NyaXB0c3R5bGUgKHNpemUgaW5kZXggMyBhbmQgNDpcbi8vIDctOHB0KSwgYW5kIHNjcmlwdHNjcmlwdHN0eWxlIChzaXplIGluZGV4IDEgYW5kIDI6IDUtNnB0KS4gIFRoZXNlIGFyZVxuLy8gcHJvdmlkZWQgaW4gdGhlIHRoZSBhcnJheXMgYmVsb3csIGluIHRoYXQgb3JkZXIuXG4vL1xuLy8gVGhlIGZvbnQgbWV0cmljcyBhcmUgc3RvcmVkIGluIGZvbnRzIGNtc3kxMCwgY21zeTcsIGFuZCBjbXN5NSByZXNwc2VjdGl2ZWx5LlxuLy8gVGhpcyB3YXMgZGV0ZXJtaW5lZCBieSBydW5uaW5nIHRoZSBmb2xsb3dpbmcgc2NyaXB0OlxuLy9cbi8vICAgICBsYXRleCAtaW50ZXJhY3Rpb249bm9uc3RvcG1vZGUgXFxcbi8vICAgICAnXFxkb2N1bWVudGNsYXNze2FydGljbGV9XFx1c2VwYWNrYWdle2Ftc21hdGh9XFxiZWdpbntkb2N1bWVudH0nIFxcXG4vLyAgICAgJyRhJCBcXGV4cGFuZGFmdGVyXFxzaG93XFx0aGVcXHRleHRmb250MicgXFxcbi8vICAgICAnXFxleHBhbmRhZnRlclxcc2hvd1xcdGhlXFxzY3JpcHRmb250MicgXFxcbi8vICAgICAnXFxleHBhbmRhZnRlclxcc2hvd1xcdGhlXFxzY3JpcHRzY3JpcHRmb250MicgXFxcbi8vICAgICAnXFxzdG9wJ1xuLy9cbi8vIFRoZSBtZXRyaWNzIHRoZW1zZWx2ZXMgd2VyZSByZXRyZWl2ZWQgdXNpbmcgdGhlIGZvbGxvd2luZyBjb21tYW5kczpcbi8vXG4vLyAgICAgdGZ0b3BsIGNtc3kxMFxuLy8gICAgIHRmdG9wbCBjbXN5N1xuLy8gICAgIHRmdG9wbCBjbXN5NVxuLy9cbi8vIFRoZSBvdXRwdXQgb2YgZWFjaCBvZiB0aGVzZSBjb21tYW5kcyBpcyBxdWl0ZSBsZW5ndGh5LiAgVGhlIG9ubHkgcGFydCB3ZVxuLy8gY2FyZSBhYm91dCBpcyB0aGUgRk9OVERJTUVOIHNlY3Rpb24uIEVhY2ggdmFsdWUgaXMgbWVhc3VyZWQgaW4gRU1zLlxudmFyIHNpZ21hc0FuZFhpcyA9IHtcbiAgc2xhbnQ6IFswLjI1MCwgMC4yNTAsIDAuMjUwXSxcbiAgLy8gc2lnbWExXG4gIHNwYWNlOiBbMC4wMDAsIDAuMDAwLCAwLjAwMF0sXG4gIC8vIHNpZ21hMlxuICBzdHJldGNoOiBbMC4wMDAsIDAuMDAwLCAwLjAwMF0sXG4gIC8vIHNpZ21hM1xuICBzaHJpbms6IFswLjAwMCwgMC4wMDAsIDAuMDAwXSxcbiAgLy8gc2lnbWE0XG4gIHhIZWlnaHQ6IFswLjQzMSwgMC40MzEsIDAuNDMxXSxcbiAgLy8gc2lnbWE1XG4gIHF1YWQ6IFsxLjAwMCwgMS4xNzEsIDEuNDcyXSxcbiAgLy8gc2lnbWE2XG4gIGV4dHJhU3BhY2U6IFswLjAwMCwgMC4wMDAsIDAuMDAwXSxcbiAgLy8gc2lnbWE3XG4gIG51bTE6IFswLjY3NywgMC43MzIsIDAuOTI1XSxcbiAgLy8gc2lnbWE4XG4gIG51bTI6IFswLjM5NCwgMC4zODQsIDAuMzg3XSxcbiAgLy8gc2lnbWE5XG4gIG51bTM6IFswLjQ0NCwgMC40NzEsIDAuNTA0XSxcbiAgLy8gc2lnbWExMFxuICBkZW5vbTE6IFswLjY4NiwgMC43NTIsIDEuMDI1XSxcbiAgLy8gc2lnbWExMVxuICBkZW5vbTI6IFswLjM0NSwgMC4zNDQsIDAuNTMyXSxcbiAgLy8gc2lnbWExMlxuICBzdXAxOiBbMC40MTMsIDAuNTAzLCAwLjUwNF0sXG4gIC8vIHNpZ21hMTNcbiAgc3VwMjogWzAuMzYzLCAwLjQzMSwgMC40MDRdLFxuICAvLyBzaWdtYTE0XG4gIHN1cDM6IFswLjI4OSwgMC4yODYsIDAuMjk0XSxcbiAgLy8gc2lnbWExNVxuICBzdWIxOiBbMC4xNTAsIDAuMTQzLCAwLjIwMF0sXG4gIC8vIHNpZ21hMTZcbiAgc3ViMjogWzAuMjQ3LCAwLjI4NiwgMC40MDBdLFxuICAvLyBzaWdtYTE3XG4gIHN1cERyb3A6IFswLjM4NiwgMC4zNTMsIDAuNDk0XSxcbiAgLy8gc2lnbWExOFxuICBzdWJEcm9wOiBbMC4wNTAsIDAuMDcxLCAwLjEwMF0sXG4gIC8vIHNpZ21hMTlcbiAgZGVsaW0xOiBbMi4zOTAsIDEuNzAwLCAxLjk4MF0sXG4gIC8vIHNpZ21hMjBcbiAgZGVsaW0yOiBbMS4wMTAsIDEuMTU3LCAxLjQyMF0sXG4gIC8vIHNpZ21hMjFcbiAgYXhpc0hlaWdodDogWzAuMjUwLCAwLjI1MCwgMC4yNTBdLFxuICAvLyBzaWdtYTIyXG4gIC8vIFRoZXNlIGZvbnQgbWV0cmljcyBhcmUgZXh0cmFjdGVkIGZyb20gVGVYIGJ5IHVzaW5nIHRmdG9wbCBvbiBjbWV4MTAudGZtO1xuICAvLyB0aGV5IGNvcnJlc3BvbmQgdG8gdGhlIGZvbnQgcGFyYW1ldGVycyBvZiB0aGUgZXh0ZW5zaW9uIGZvbnRzIChmYW1pbHkgMykuXG4gIC8vIFNlZSB0aGUgVGVYYm9vaywgcGFnZSA0NDEuIEluIEFNU1RlWCwgdGhlIGV4dGVuc2lvbiBmb250cyBzY2FsZTsgdG9cbiAgLy8gbWF0Y2ggY21leDcsIHdlJ2QgdXNlIGNtZXg3LnRmbSB2YWx1ZXMgZm9yIHNjcmlwdCBhbmQgc2NyaXB0c2NyaXB0XG4gIC8vIHZhbHVlcy5cbiAgZGVmYXVsdFJ1bGVUaGlja25lc3M6IFswLjA0LCAwLjA0OSwgMC4wNDldLFxuICAvLyB4aTg7IGNtZXg3OiAwLjA0OVxuICBiaWdPcFNwYWNpbmcxOiBbMC4xMTEsIDAuMTExLCAwLjExMV0sXG4gIC8vIHhpOVxuICBiaWdPcFNwYWNpbmcyOiBbMC4xNjYsIDAuMTY2LCAwLjE2Nl0sXG4gIC8vIHhpMTBcbiAgYmlnT3BTcGFjaW5nMzogWzAuMiwgMC4yLCAwLjJdLFxuICAvLyB4aTExXG4gIGJpZ09wU3BhY2luZzQ6IFswLjYsIDAuNjExLCAwLjYxMV0sXG4gIC8vIHhpMTI7IGNtZXg3OiAwLjYxMVxuICBiaWdPcFNwYWNpbmc1OiBbMC4xLCAwLjE0MywgMC4xNDNdLFxuICAvLyB4aTEzOyBjbWV4NzogMC4xNDNcbiAgLy8gVGhlIFxcc3FydCBydWxlIHdpZHRoIGlzIHRha2VuIGZyb20gdGhlIGhlaWdodCBvZiB0aGUgc3VyZCBjaGFyYWN0ZXIuXG4gIC8vIFNpbmNlIHdlIHVzZSB0aGUgc2FtZSBmb250IGF0IGFsbCBzaXplcywgdGhpcyB0aGlja25lc3MgZG9lc24ndCBzY2FsZS5cbiAgc3FydFJ1bGVUaGlja25lc3M6IFswLjA0LCAwLjA0LCAwLjA0XSxcbiAgLy8gVGhpcyB2YWx1ZSBkZXRlcm1pbmVzIGhvdyBsYXJnZSBhIHB0IGlzLCBmb3IgbWV0cmljcyB3aGljaCBhcmUgZGVmaW5lZFxuICAvLyBpbiB0ZXJtcyBvZiBwdHMuXG4gIC8vIFRoaXMgdmFsdWUgaXMgYWxzbyB1c2VkIGluIGthdGV4Lmxlc3M7IGlmIHlvdSBjaGFuZ2UgaXQgbWFrZSBzdXJlIHRoZVxuICAvLyB2YWx1ZXMgbWF0Y2guXG4gIHB0UGVyRW06IFsxMC4wLCAxMC4wLCAxMC4wXSxcbiAgLy8gVGhlIHNwYWNlIGJldHdlZW4gYWRqYWNlbnQgYHxgIGNvbHVtbnMgaW4gYW4gYXJyYXkgZGVmaW5pdGlvbi4gRnJvbVxuICAvLyBgXFxzaG93dGhlXFxkb3VibGVydWxlc2VwYCBpbiBMYVRlWC4gRXF1YWxzIDIuMCAvIHB0UGVyRW0uXG4gIGRvdWJsZVJ1bGVTZXA6IFswLjIsIDAuMiwgMC4yXSxcbiAgLy8gVGhlIHdpZHRoIG9mIHNlcGFyYXRvciBsaW5lcyBpbiB7YXJyYXl9IGVudmlyb25tZW50cy4gRnJvbVxuICAvLyBgXFxzaG93dGhlXFxhcnJheXJ1bGV3aWR0aGAgaW4gTGFUZVguIEVxdWFscyAwLjQgLyBwdFBlckVtLlxuICBhcnJheVJ1bGVXaWR0aDogWzAuMDQsIDAuMDQsIDAuMDRdLFxuICAvLyBUd28gdmFsdWVzIGZyb20gTGFUZVggc291cmNlMmU6XG4gIGZib3hzZXA6IFswLjMsIDAuMywgMC4zXSxcbiAgLy8gICAgICAgIDMgcHQgLyBwdFBlckVtXG4gIGZib3hydWxlOiBbMC4wNCwgMC4wNCwgMC4wNF0gLy8gMC40IHB0IC8gcHRQZXJFbVxuXG59OyAvLyBUaGlzIG1hcCBjb250YWlucyBhIG1hcHBpbmcgZnJvbSBmb250IG5hbWUgYW5kIGNoYXJhY3RlciBjb2RlIHRvIGNoYXJhY3RlclxuLy8gbWV0cmljcywgaW5jbHVkaW5nIGhlaWdodCwgZGVwdGgsIGl0YWxpYyBjb3JyZWN0aW9uLCBhbmQgc2tldyAoa2VybiBmcm9tIHRoZVxuLy8gY2hhcmFjdGVyIHRvIHRoZSBjb3JyZXNwb25kaW5nIFxcc2tld2NoYXIpXG4vLyBUaGlzIG1hcCBpcyBnZW5lcmF0ZWQgdmlhIGBtYWtlIG1ldHJpY3NgLiBJdCBzaG91bGQgbm90IGJlIGNoYW5nZWQgbWFudWFsbHkuXG5cbiAvLyBUaGVzZSBhcmUgdmVyeSByb3VnaCBhcHByb3hpbWF0aW9ucy4gIFdlIGRlZmF1bHQgdG8gVGltZXMgTmV3IFJvbWFuIHdoaWNoXG4vLyBzaG91bGQgaGF2ZSBMYXRpbi0xIGFuZCBDeXJpbGxpYyBjaGFyYWN0ZXJzLCBidXQgbWF5IG5vdCBkZXBlbmRpbmcgb24gdGhlXG4vLyBvcGVyYXRpbmcgc3lzdGVtLiAgVGhlIG1ldHJpY3MgZG8gbm90IGFjY291bnQgZm9yIGV4dHJhIGhlaWdodCBmcm9tIHRoZVxuLy8gYWNjZW50cy4gIEluIHRoZSBjYXNlIG9mIEN5cmlsbGljIGNoYXJhY3RlcnMgd2hpY2ggaGF2ZSBib3RoIGFzY2VuZGVycyBhbmRcbi8vIGRlc2NlbmRlcnMgd2UgcHJlZmVyIGFwcHJveGltYXRpb25zIHdpdGggYXNjZW5kZXJzLCBwcmltYXJpbHkgdG8gcHJldmVudFxuLy8gdGhlIGZyYWN0aW9uIGJhciBvciByb290IGxpbmUgZnJvbSBpbnRlcnNlY3RpbmcgdGhlIGdseXBoLlxuLy8gVE9ETyhrZXZpbmIpIGFsbG93IHVuaW9uIG9mIG11bHRpcGxlIGdseXBoIG1ldHJpY3MgZm9yIGJldHRlciBhY2N1cmFjeS5cblxudmFyIGV4dHJhQ2hhcmFjdGVyTWFwID0ge1xuICAvLyBMYXRpbi0xXG4gICfDhSc6ICdBJyxcbiAgJ8OQJzogJ0QnLFxuICAnw54nOiAnbycsXG4gICfDpSc6ICdhJyxcbiAgJ8OwJzogJ2QnLFxuICAnw74nOiAnbycsXG4gIC8vIEN5cmlsbGljXG4gICfQkCc6ICdBJyxcbiAgJ9CRJzogJ0InLFxuICAn0JInOiAnQicsXG4gICfQkyc6ICdGJyxcbiAgJ9CUJzogJ0EnLFxuICAn0JUnOiAnRScsXG4gICfQlic6ICdLJyxcbiAgJ9CXJzogJzMnLFxuICAn0JgnOiAnTicsXG4gICfQmSc6ICdOJyxcbiAgJ9CaJzogJ0snLFxuICAn0JsnOiAnTicsXG4gICfQnCc6ICdNJyxcbiAgJ9CdJzogJ0gnLFxuICAn0J4nOiAnTycsXG4gICfQnyc6ICdOJyxcbiAgJ9CgJzogJ1AnLFxuICAn0KEnOiAnQycsXG4gICfQoic6ICdUJyxcbiAgJ9CjJzogJ3knLFxuICAn0KQnOiAnTycsXG4gICfQpSc6ICdYJyxcbiAgJ9CmJzogJ1UnLFxuICAn0KcnOiAnaCcsXG4gICfQqCc6ICdXJyxcbiAgJ9CpJzogJ1cnLFxuICAn0KonOiAnQicsXG4gICfQqyc6ICdYJyxcbiAgJ9CsJzogJ0InLFxuICAn0K0nOiAnMycsXG4gICfQric6ICdYJyxcbiAgJ9CvJzogJ1InLFxuICAn0LAnOiAnYScsXG4gICfQsSc6ICdiJyxcbiAgJ9CyJzogJ2EnLFxuICAn0LMnOiAncicsXG4gICfQtCc6ICd5JyxcbiAgJ9C1JzogJ2UnLFxuICAn0LYnOiAnbScsXG4gICfQtyc6ICdlJyxcbiAgJ9C4JzogJ24nLFxuICAn0LknOiAnbicsXG4gICfQuic6ICduJyxcbiAgJ9C7JzogJ24nLFxuICAn0LwnOiAnbScsXG4gICfQvSc6ICduJyxcbiAgJ9C+JzogJ28nLFxuICAn0L8nOiAnbicsXG4gICfRgCc6ICdwJyxcbiAgJ9GBJzogJ2MnLFxuICAn0YInOiAnbycsXG4gICfRgyc6ICd5JyxcbiAgJ9GEJzogJ2InLFxuICAn0YUnOiAneCcsXG4gICfRhic6ICduJyxcbiAgJ9GHJzogJ24nLFxuICAn0YgnOiAndycsXG4gICfRiSc6ICd3JyxcbiAgJ9GKJzogJ2EnLFxuICAn0YsnOiAnbScsXG4gICfRjCc6ICdhJyxcbiAgJ9GNJzogJ2UnLFxuICAn0Y4nOiAnbScsXG4gICfRjyc6ICdyJ1xufTtcblxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGFkZHMgbmV3IGZvbnQgbWV0cmljcyB0byBkZWZhdWx0IG1ldHJpY01hcFxuICogSXQgY2FuIGFsc28gb3ZlcnJpZGUgZXhpc3RpbmcgbWV0cmljc1xuICovXG5mdW5jdGlvbiBzZXRGb250TWV0cmljcyhmb250TmFtZSwgbWV0cmljcykge1xuICBmb250TWV0cmljc0RhdGFbZm9udE5hbWVdID0gbWV0cmljcztcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBhIGNvbnZlbmllbmNlIGZ1bmN0aW9uIGZvciBsb29raW5nIHVwIGluZm9ybWF0aW9uIGluIHRoZVxuICogbWV0cmljTWFwIHRhYmxlLiBJdCB0YWtlcyBhIGNoYXJhY3RlciBhcyBhIHN0cmluZywgYW5kIGEgZm9udC5cbiAqXG4gKiBOb3RlOiB0aGUgYHdpZHRoYCBwcm9wZXJ0eSBtYXkgYmUgdW5kZWZpbmVkIGlmIGZvbnRNZXRyaWNzRGF0YS5qcyB3YXNuJ3RcbiAqIGJ1aWx0IHVzaW5nIGBNYWtlIGV4dGVuZGVkX21ldHJpY3NgLlxuICovXG5cbmZ1bmN0aW9uIGdldENoYXJhY3Rlck1ldHJpY3MoY2hhcmFjdGVyLCBmb250LCBtb2RlKSB7XG4gIGlmICghZm9udE1ldHJpY3NEYXRhW2ZvbnRdKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRm9udCBtZXRyaWNzIG5vdCBmb3VuZCBmb3IgZm9udDogXCIgKyBmb250ICsgXCIuXCIpO1xuICB9XG5cbiAgdmFyIGNoID0gY2hhcmFjdGVyLmNoYXJDb2RlQXQoMCk7XG4gIHZhciBtZXRyaWNzID0gZm9udE1ldHJpY3NEYXRhW2ZvbnRdW2NoXTtcblxuICBpZiAoIW1ldHJpY3MgJiYgY2hhcmFjdGVyWzBdIGluIGV4dHJhQ2hhcmFjdGVyTWFwKSB7XG4gICAgY2ggPSBleHRyYUNoYXJhY3Rlck1hcFtjaGFyYWN0ZXJbMF1dLmNoYXJDb2RlQXQoMCk7XG4gICAgbWV0cmljcyA9IGZvbnRNZXRyaWNzRGF0YVtmb250XVtjaF07XG4gIH1cblxuICBpZiAoIW1ldHJpY3MgJiYgbW9kZSA9PT0gJ3RleHQnKSB7XG4gICAgLy8gV2UgZG9uJ3QgdHlwaWNhbGx5IGhhdmUgZm9udCBtZXRyaWNzIGZvciBBc2lhbiBzY3JpcHRzLlxuICAgIC8vIEJ1dCBzaW5jZSB3ZSBzdXBwb3J0IHRoZW0gaW4gdGV4dCBtb2RlLCB3ZSBuZWVkIHRvIHJldHVyblxuICAgIC8vIHNvbWUgc29ydCBvZiBtZXRyaWNzLlxuICAgIC8vIFNvIGlmIHRoZSBjaGFyYWN0ZXIgaXMgaW4gYSBzY3JpcHQgd2Ugc3VwcG9ydCBidXQgd2VcbiAgICAvLyBkb24ndCBoYXZlIG1ldHJpY3MgZm9yIGl0LCBqdXN0IHVzZSB0aGUgbWV0cmljcyBmb3JcbiAgICAvLyB0aGUgTGF0aW4gY2FwaXRhbCBsZXR0ZXIgTS4gVGhpcyBpcyBjbG9zZSBlbm91Z2ggYmVjYXVzZVxuICAgIC8vIHdlIChjdXJyZW50bHkpIG9ubHkgY2FyZSBhYm91dCB0aGUgaGVpZ2h0IG9mIHRoZSBnbHB5aFxuICAgIC8vIG5vdCBpdHMgd2lkdGguXG4gICAgaWYgKHN1cHBvcnRlZENvZGVwb2ludChjaCkpIHtcbiAgICAgIG1ldHJpY3MgPSBmb250TWV0cmljc0RhdGFbZm9udF1bNzddOyAvLyA3NyBpcyB0aGUgY2hhcmNvZGUgZm9yICdNJ1xuICAgIH1cbiAgfVxuXG4gIGlmIChtZXRyaWNzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlcHRoOiBtZXRyaWNzWzBdLFxuICAgICAgaGVpZ2h0OiBtZXRyaWNzWzFdLFxuICAgICAgaXRhbGljOiBtZXRyaWNzWzJdLFxuICAgICAgc2tldzogbWV0cmljc1szXSxcbiAgICAgIHdpZHRoOiBtZXRyaWNzWzRdXG4gICAgfTtcbiAgfVxufVxudmFyIGZvbnRNZXRyaWNzQnlTaXplSW5kZXggPSB7fTtcbi8qKlxuICogR2V0IHRoZSBmb250IG1ldHJpY3MgZm9yIGEgZ2l2ZW4gc2l6ZS5cbiAqL1xuXG5mdW5jdGlvbiBnZXRHbG9iYWxNZXRyaWNzKHNpemUpIHtcbiAgdmFyIHNpemVJbmRleDtcblxuICBpZiAoc2l6ZSA+PSA1KSB7XG4gICAgc2l6ZUluZGV4ID0gMDtcbiAgfSBlbHNlIGlmIChzaXplID49IDMpIHtcbiAgICBzaXplSW5kZXggPSAxO1xuICB9IGVsc2Uge1xuICAgIHNpemVJbmRleCA9IDI7XG4gIH1cblxuICBpZiAoIWZvbnRNZXRyaWNzQnlTaXplSW5kZXhbc2l6ZUluZGV4XSkge1xuICAgIHZhciBtZXRyaWNzID0gZm9udE1ldHJpY3NCeVNpemVJbmRleFtzaXplSW5kZXhdID0ge1xuICAgICAgY3NzRW1QZXJNdTogc2lnbWFzQW5kWGlzLnF1YWRbc2l6ZUluZGV4XSAvIDE4XG4gICAgfTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzaWdtYXNBbmRYaXMpIHtcbiAgICAgIGlmIChzaWdtYXNBbmRYaXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBtZXRyaWNzW2tleV0gPSBzaWdtYXNBbmRYaXNba2V5XVtzaXplSW5kZXhdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmb250TWV0cmljc0J5U2l6ZUluZGV4W3NpemVJbmRleF07XG59XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvc3ltYm9scy5qc1xuLyoqXG4gKiBUaGlzIGZpbGUgaG9sZHMgYSBsaXN0IG9mIGFsbCBuby1hcmd1bWVudCBmdW5jdGlvbnMgYW5kIHNpbmdsZS1jaGFyYWN0ZXJcbiAqIHN5bWJvbHMgKGxpa2UgJ2EnIG9yICc7JykuXG4gKlxuICogRm9yIGVhY2ggb2YgdGhlIHN5bWJvbHMsIHRoZXJlIGFyZSB0aHJlZSBwcm9wZXJ0aWVzIHRoZXkgY2FuIGhhdmU6XG4gKiAtIGZvbnQgKHJlcXVpcmVkKTogdGhlIGZvbnQgdG8gYmUgdXNlZCBmb3IgdGhpcyBzeW1ib2wuIEVpdGhlciBcIm1haW5cIiAodGhlXG4gICAgIG5vcm1hbCBmb250KSwgb3IgXCJhbXNcIiAodGhlIGFtcyBmb250cykuXG4gKiAtIGdyb3VwIChyZXF1aXJlZCk6IHRoZSBQYXJzZU5vZGUgZ3JvdXAgdHlwZSB0aGUgc3ltYm9sIHNob3VsZCBoYXZlIChpLmUuXG4gICAgIFwidGV4dG9yZFwiLCBcIm1hdGhvcmRcIiwgZXRjKS5cbiAgICAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9LYVRlWC9LYVRlWC93aWtpL0V4YW1pbmluZy1UZVgjZ3JvdXAtdHlwZXNcbiAqIC0gcmVwbGFjZTogdGhlIGNoYXJhY3RlciB0aGF0IHRoaXMgc3ltYm9sIG9yIGZ1bmN0aW9uIHNob3VsZCBiZVxuICogICByZXBsYWNlZCB3aXRoIChpLmUuIFwiXFxwaGlcIiBoYXMgYSByZXBsYWNlIHZhbHVlIG9mIFwiXFx1MDNkNVwiLCB0aGUgcGhpXG4gKiAgIGNoYXJhY3RlciBpbiB0aGUgbWFpbiBmb250KS5cbiAqXG4gKiBUaGUgb3V0ZXJtb3N0IG1hcCBpbiB0aGUgdGFibGUgaW5kaWNhdGVzIHdoYXQgbW9kZSB0aGUgc3ltYm9scyBzaG91bGQgYmVcbiAqIGFjY2VwdGVkIGluIChlLmcuIFwibWF0aFwiIG9yIFwidGV4dFwiKS5cbiAqL1xuLy8gU29tZSBvZiB0aGVzZSBoYXZlIGEgXCItdG9rZW5cIiBzdWZmaXggc2luY2UgdGhlc2UgYXJlIGFsc28gdXNlZCBhcyBgUGFyc2VOb2RlYFxuLy8gdHlwZXMgZm9yIHJhdyB0ZXh0IHRva2VucywgYW5kIHdlIHdhbnQgdG8gYXZvaWQgY29uZmxpY3RzIHdpdGggaGlnaGVyLWxldmVsXG4vLyBgUGFyc2VOb2RlYCB0eXBlcy4gVGhlc2UgYFBhcnNlTm9kZWBzIGFyZSBjb25zdHJ1Y3RlZCB3aXRoaW4gYFBhcnNlcmAgYnlcbi8vIGxvb2tpbmcgdXAgdGhlIGBzeW1ib2xzYCBtYXAuXG52YXIgQVRPTVMgPSB7XG4gIFwiYmluXCI6IDEsXG4gIFwiY2xvc2VcIjogMSxcbiAgXCJpbm5lclwiOiAxLFxuICBcIm9wZW5cIjogMSxcbiAgXCJwdW5jdFwiOiAxLFxuICBcInJlbFwiOiAxXG59O1xudmFyIE5PTl9BVE9NUyA9IHtcbiAgXCJhY2NlbnQtdG9rZW5cIjogMSxcbiAgXCJtYXRob3JkXCI6IDEsXG4gIFwib3AtdG9rZW5cIjogMSxcbiAgXCJzcGFjaW5nXCI6IDEsXG4gIFwidGV4dG9yZFwiOiAxXG59O1xudmFyIHN5bWJvbHMgPSB7XG4gIFwibWF0aFwiOiB7fSxcbiAgXCJ0ZXh0XCI6IHt9XG59O1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgc3JjX3N5bWJvbHMgPSAoc3ltYm9scyk7XG4vKiogYGFjY2VwdFVuaWNvZGVDaGFyID0gdHJ1ZWAgaXMgb25seSBhcHBsaWNhYmxlIGlmIGByZXBsYWNlYCBpcyBzZXQuICovXG5cbmZ1bmN0aW9uIGRlZmluZVN5bWJvbChtb2RlLCBmb250LCBncm91cCwgcmVwbGFjZSwgbmFtZSwgYWNjZXB0VW5pY29kZUNoYXIpIHtcbiAgc3ltYm9sc1ttb2RlXVtuYW1lXSA9IHtcbiAgICBmb250OiBmb250LFxuICAgIGdyb3VwOiBncm91cCxcbiAgICByZXBsYWNlOiByZXBsYWNlXG4gIH07XG5cbiAgaWYgKGFjY2VwdFVuaWNvZGVDaGFyICYmIHJlcGxhY2UpIHtcbiAgICBzeW1ib2xzW21vZGVdW3JlcGxhY2VdID0gc3ltYm9sc1ttb2RlXVtuYW1lXTtcbiAgfVxufSAvLyBTb21lIGFiYnJldmlhdGlvbnMgZm9yIGNvbW1vbmx5IHVzZWQgc3RyaW5ncy5cbi8vIFRoaXMgaGVscHMgbWluaWZ5IHRoZSBjb2RlLCBhbmQgYWxzbyBzcG90dGluZyB0eXBvcyB1c2luZyBqc2hpbnQuXG4vLyBtb2RlczpcblxudmFyIG1hdGggPSBcIm1hdGhcIjtcbnZhciBzeW1ib2xzX3RleHQgPSBcInRleHRcIjsgLy8gZm9udHM6XG5cbnZhciBtYWluID0gXCJtYWluXCI7XG52YXIgYW1zID0gXCJhbXNcIjsgLy8gZ3JvdXBzOlxuXG52YXIgYWNjZW50ID0gXCJhY2NlbnQtdG9rZW5cIjtcbnZhciBiaW4gPSBcImJpblwiO1xudmFyIHN5bWJvbHNfY2xvc2UgPSBcImNsb3NlXCI7XG52YXIgaW5uZXIgPSBcImlubmVyXCI7XG52YXIgbWF0aG9yZCA9IFwibWF0aG9yZFwiO1xudmFyIG9wID0gXCJvcC10b2tlblwiO1xudmFyIHN5bWJvbHNfb3BlbiA9IFwib3BlblwiO1xudmFyIHB1bmN0ID0gXCJwdW5jdFwiO1xudmFyIHJlbCA9IFwicmVsXCI7XG52YXIgc3BhY2luZyA9IFwic3BhY2luZ1wiO1xudmFyIHRleHRvcmQgPSBcInRleHRvcmRcIjsgLy8gTm93IGNvbWVzIHRoZSBzeW1ib2wgdGFibGVcbi8vIFJlbGF0aW9uIFN5bWJvbHNcblxuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjYxXCIsIFwiXFxcXGVxdWl2XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjdBXCIsIFwiXFxcXHByZWNcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIyN0JcIiwgXCJcXFxcc3VjY1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjIzQ1wiLCBcIlxcXFxzaW1cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIyQTVcIiwgXCJcXFxccGVycFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MkFBRlwiLCBcIlxcXFxwcmVjZXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcmVsLCBcIlxcdTJBQjBcIiwgXCJcXFxcc3VjY2VxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjQzXCIsIFwiXFxcXHNpbWVxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjIzXCIsIFwiXFxcXG1pZFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjI2QVwiLCBcIlxcXFxsbFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjI2QlwiLCBcIlxcXFxnZ1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjI0RFwiLCBcIlxcXFxhc3ltcFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjIyNVwiLCBcIlxcXFxwYXJhbGxlbFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjJDOFwiLCBcIlxcXFxib3d0aWVcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIzMjNcIiwgXCJcXFxcc21pbGVcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIyOTFcIiwgXCJcXFxcc3FzdWJzZXRlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjI5MlwiLCBcIlxcXFxzcXN1cHNldGVxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjUwXCIsIFwiXFxcXGRvdGVxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMzIyXCIsIFwiXFxcXGZyb3duXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjBCXCIsIFwiXFxcXG5pXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjFEXCIsIFwiXFxcXHByb3B0b1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjJBMlwiLCBcIlxcXFx2ZGFzaFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjJBM1wiLCBcIlxcXFxkYXNodlwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjIwQlwiLCBcIlxcXFxvd25zXCIpOyAvLyBQdW5jdHVhdGlvblxuXG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcHVuY3QsIFwiLlwiLCBcIlxcXFxsZG90cFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBwdW5jdCwgXCJcXHUyMkM1XCIsIFwiXFxcXGNkb3RwXCIpOyAvLyBNaXNjIFN5bWJvbHNcblxuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiI1wiLCBcIlxcXFwjXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgXCIjXCIsIFwiXFxcXCNcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCImXCIsIFwiXFxcXCZcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBcIiZcIiwgXCJcXFxcJlwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTIxMzVcIiwgXCJcXFxcYWxlcGhcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJcXHUyMjAwXCIsIFwiXFxcXGZvcmFsbFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTIxMEZcIiwgXCJcXFxcaGJhclwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTIyMDNcIiwgXCJcXFxcZXhpc3RzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiXFx1MjIwN1wiLCBcIlxcXFxuYWJsYVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTI2NkRcIiwgXCJcXFxcZmxhdFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTIxMTNcIiwgXCJcXFxcZWxsXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiXFx1MjY2RVwiLCBcIlxcXFxuYXR1cmFsXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiXFx1MjY2M1wiLCBcIlxcXFxjbHVic3VpdFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTIxMThcIiwgXCJcXFxcd3BcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJcXHUyNjZGXCIsIFwiXFxcXHNoYXJwXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiXFx1MjY2MlwiLCBcIlxcXFxkaWFtb25kc3VpdFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTIxMUNcIiwgXCJcXFxcUmVcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJcXHUyNjYxXCIsIFwiXFxcXGhlYXJ0c3VpdFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTIxMTFcIiwgXCJcXFxcSW1cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJcXHUyNjYwXCIsIFwiXFxcXHNwYWRlc3VpdFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxceEE3XCIsIFwiXFxcXFNcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBcIlxceEE3XCIsIFwiXFxcXFNcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJcXHhCNlwiLCBcIlxcXFxQXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgXCJcXHhCNlwiLCBcIlxcXFxQXCIpOyAvLyBNYXRoIGFuZCBUZXh0XG5cbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTIwMjBcIiwgXCJcXFxcZGFnXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgXCJcXHUyMDIwXCIsIFwiXFxcXGRhZ1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwiXFx1MjAyMFwiLCBcIlxcXFx0ZXh0ZGFnZ2VyXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiXFx1MjAyMVwiLCBcIlxcXFxkZGFnXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgXCJcXHUyMDIxXCIsIFwiXFxcXGRkYWdcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBcIlxcdTIwMjFcIiwgXCJcXFxcdGV4dGRhZ2dlcmRibFwiKTsgLy8gTGFyZ2UgRGVsaW1pdGVyc1xuXG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgc3ltYm9sc19jbG9zZSwgXCJcXHUyM0IxXCIsIFwiXFxcXHJtb3VzdGFjaGVcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgc3ltYm9sc19vcGVuLCBcIlxcdTIzQjBcIiwgXCJcXFxcbG1vdXN0YWNoZVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBzeW1ib2xzX2Nsb3NlLCBcIlxcdTI3RUZcIiwgXCJcXFxccmdyb3VwXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHN5bWJvbHNfb3BlbiwgXCJcXHUyN0VFXCIsIFwiXFxcXGxncm91cFwiLCB0cnVlKTsgLy8gQmluYXJ5IE9wZXJhdG9yc1xuXG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgYmluLCBcIlxcdTIyMTNcIiwgXCJcXFxcbXBcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgYmluLCBcIlxcdTIyOTZcIiwgXCJcXFxcb21pbnVzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCJcXHUyMjhFXCIsIFwiXFxcXHVwbHVzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCJcXHUyMjkzXCIsIFwiXFxcXHNxY2FwXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCJcXHUyMjE3XCIsIFwiXFxcXGFzdFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBiaW4sIFwiXFx1MjI5NFwiLCBcIlxcXFxzcWN1cFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBiaW4sIFwiXFx1MjVFRlwiLCBcIlxcXFxiaWdjaXJjXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCJcXHUyMjE5XCIsIFwiXFxcXGJ1bGxldFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBiaW4sIFwiXFx1MjAyMVwiLCBcIlxcXFxkZGFnZ2VyXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCJcXHUyMjQwXCIsIFwiXFxcXHdyXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCJcXHUyQTNGXCIsIFwiXFxcXGFtYWxnXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCImXCIsIFwiXFxcXEFuZFwiKTsgLy8gZnJvbSBhbXNtYXRoXG4vLyBBcnJvdyBTeW1ib2xzXG5cbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjdGNVwiLCBcIlxcXFxsb25nbGVmdGFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMUQwXCIsIFwiXFxcXExlZnRhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjdGOFwiLCBcIlxcXFxMb25nbGVmdGFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyN0Y2XCIsIFwiXFxcXGxvbmdyaWdodGFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMUQyXCIsIFwiXFxcXFJpZ2h0YXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcmVsLCBcIlxcdTI3RjlcIiwgXCJcXFxcTG9uZ3JpZ2h0YXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIxOTRcIiwgXCJcXFxcbGVmdHJpZ2h0YXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcmVsLCBcIlxcdTI3RjdcIiwgXCJcXFxcbG9uZ2xlZnRyaWdodGFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMUQ0XCIsIFwiXFxcXExlZnRyaWdodGFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyN0ZBXCIsIFwiXFxcXExvbmdsZWZ0cmlnaHRhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjFBNlwiLCBcIlxcXFxtYXBzdG9cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcmVsLCBcIlxcdTI3RkNcIiwgXCJcXFxcbG9uZ21hcHN0b1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjE5N1wiLCBcIlxcXFxuZWFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMUE5XCIsIFwiXFxcXGhvb2tsZWZ0YXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIxQUFcIiwgXCJcXFxcaG9va3JpZ2h0YXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIxOThcIiwgXCJcXFxcc2VhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjFCQ1wiLCBcIlxcXFxsZWZ0aGFycG9vbnVwXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMUMwXCIsIFwiXFxcXHJpZ2h0aGFycG9vbnVwXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMTk5XCIsIFwiXFxcXHN3YXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIxQkRcIiwgXCJcXFxcbGVmdGhhcnBvb25kb3duXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMUMxXCIsIFwiXFxcXHJpZ2h0aGFycG9vbmRvd25cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIxOTZcIiwgXCJcXFxcbndhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjFDQ1wiLCBcIlxcXFxyaWdodGxlZnRoYXJwb29uc1wiLCB0cnVlKTsgLy8gQU1TIE5lZ2F0ZWQgQmluYXJ5IFJlbGF0aW9uc1xuXG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjI2RVwiLCBcIlxcXFxubGVzc1wiLCB0cnVlKTsgLy8gU3ltYm9sIG5hbWVzIHByZWNlZWRlZCBieSBcIkBcIiBlYWNoIGhhdmUgYSBjb3JyZXNwb25kaW5nIG1hY3JvLlxuXG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1RTAxMFwiLCBcIlxcXFxAbmxlcXNsYW50XCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdUUwMTFcIiwgXCJcXFxcQG5sZXFxXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTJBODdcIiwgXCJcXFxcbG5lcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjY4XCIsIFwiXFxcXGxuZXFxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdUUwMENcIiwgXCJcXFxcQGx2ZXJ0bmVxcVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkU2XCIsIFwiXFxcXGxuc2ltXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTJBODlcIiwgXCJcXFxcbG5hcHByb3hcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjI4MFwiLCBcIlxcXFxucHJlY1wiLCB0cnVlKTsgLy8gdW5pY29kZS1tYXRoIG1hcHMgXFx1MjJlMCB0byBcXG5wcmVjY3VybHllcS4gV2UnbGwgdXNlIHRoZSBBTVMgc3lub255bS5cblxuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIyRTBcIiwgXCJcXFxcbnByZWNlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkU4XCIsIFwiXFxcXHByZWNuc2ltXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTJBQjlcIiwgXCJcXFxccHJlY25hcHByb3hcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjI0MVwiLCBcIlxcXFxuc2ltXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdUUwMDZcIiwgXCJcXFxcQG5zaG9ydG1pZFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjI0XCIsIFwiXFxcXG5taWRcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjJBQ1wiLCBcIlxcXFxudmRhc2hcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjJBRFwiLCBcIlxcXFxudkRhc2hcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjJFQVwiLCBcIlxcXFxudHJpYW5nbGVsZWZ0XCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIyRUNcIiwgXCJcXFxcbnRyaWFuZ2xlbGVmdGVxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIyOEFcIiwgXCJcXFxcc3Vic2V0bmVxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdUUwMUFcIiwgXCJcXFxcQHZhcnN1YnNldG5lcVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyQUNCXCIsIFwiXFxcXHN1YnNldG5lcXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1RTAxN1wiLCBcIlxcXFxAdmFyc3Vic2V0bmVxcVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjZGXCIsIFwiXFxcXG5ndHJcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1RTAwRlwiLCBcIlxcXFxAbmdlcXNsYW50XCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdUUwMEVcIiwgXCJcXFxcQG5nZXFxXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTJBODhcIiwgXCJcXFxcZ25lcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjY5XCIsIFwiXFxcXGduZXFxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdUUwMERcIiwgXCJcXFxcQGd2ZXJ0bmVxcVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkU3XCIsIFwiXFxcXGduc2ltXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTJBOEFcIiwgXCJcXFxcZ25hcHByb3hcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjI4MVwiLCBcIlxcXFxuc3VjY1wiLCB0cnVlKTsgLy8gdW5pY29kZS1tYXRoIG1hcHMgXFx1MjJlMSB0byBcXG5zdWNjY3VybHllcS4gV2UnbGwgdXNlIHRoZSBBTVMgc3lub255bS5cblxuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIyRTFcIiwgXCJcXFxcbnN1Y2NlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkU5XCIsIFwiXFxcXHN1Y2Nuc2ltXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTJBQkFcIiwgXCJcXFxcc3VjY25hcHByb3hcIiwgdHJ1ZSk7IC8vIHVuaWNvZGUtbWF0aCBtYXBzIFxcdTIyNDYgdG8gXFxzaW1uZXFxLiBXZSdsbCB1c2UgdGhlIEFNUyBzeW5vbnltLlxuXG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjI0NlwiLCBcIlxcXFxuY29uZ1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHVFMDA3XCIsIFwiXFxcXEBuc2hvcnRwYXJhbGxlbFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjI2XCIsIFwiXFxcXG5wYXJhbGxlbFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkFGXCIsIFwiXFxcXG5WRGFzaFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkVCXCIsIFwiXFxcXG50cmlhbmdsZXJpZ2h0XCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIyRURcIiwgXCJcXFxcbnRyaWFuZ2xlcmlnaHRlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHVFMDE4XCIsIFwiXFxcXEBuc3Vwc2V0ZXFxXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIyOEJcIiwgXCJcXFxcc3Vwc2V0bmVxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdUUwMUJcIiwgXCJcXFxcQHZhcnN1cHNldG5lcVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyQUNDXCIsIFwiXFxcXHN1cHNldG5lcXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1RTAxOVwiLCBcIlxcXFxAdmFyc3Vwc2V0bmVxcVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkFFXCIsIFwiXFxcXG5WZGFzaFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyQUI1XCIsIFwiXFxcXHByZWNuZXFxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTJBQjZcIiwgXCJcXFxcc3VjY25lcXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1RTAxNlwiLCBcIlxcXFxAbnN1YnNldGVxcVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkI0XCIsIFwiXFxcXHVubGhkXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgYmluLCBcIlxcdTIyQjVcIiwgXCJcXFxcdW5yaGRcIik7IC8vIEFNUyBOZWdhdGVkIEFycm93c1xuXG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjE5QVwiLCBcIlxcXFxubGVmdGFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIxOUJcIiwgXCJcXFxcbnJpZ2h0YXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjFDRFwiLCBcIlxcXFxuTGVmdGFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIxQ0ZcIiwgXCJcXFxcblJpZ2h0YXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjFBRVwiLCBcIlxcXFxubGVmdHJpZ2h0YXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjFDRVwiLCBcIlxcXFxuTGVmdHJpZ2h0YXJyb3dcIiwgdHJ1ZSk7IC8vIEFNUyBNaXNjXG5cbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyNUIzXCIsIFwiXFxcXHZhcnRyaWFuZ2xlXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgdGV4dG9yZCwgXCJcXHUyMTBGXCIsIFwiXFxcXGhzbGFzaFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHRleHRvcmQsIFwiXFx1MjVCRFwiLCBcIlxcXFx0cmlhbmdsZWRvd25cIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCB0ZXh0b3JkLCBcIlxcdTI1Q0FcIiwgXCJcXFxcbG96ZW5nZVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHRleHRvcmQsIFwiXFx1MjRDOFwiLCBcIlxcXFxjaXJjbGVkU1wiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHRleHRvcmQsIFwiXFx4QUVcIiwgXCJcXFxcY2lyY2xlZFJcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBhbXMsIHRleHRvcmQsIFwiXFx4QUVcIiwgXCJcXFxcY2lyY2xlZFJcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCB0ZXh0b3JkLCBcIlxcdTIyMjFcIiwgXCJcXFxcbWVhc3VyZWRhbmdsZVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHRleHRvcmQsIFwiXFx1MjIwNFwiLCBcIlxcXFxuZXhpc3RzXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgdGV4dG9yZCwgXCJcXHUyMTI3XCIsIFwiXFxcXG1ob1wiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHRleHRvcmQsIFwiXFx1MjEzMlwiLCBcIlxcXFxGaW52XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgdGV4dG9yZCwgXCJcXHUyMTQxXCIsIFwiXFxcXEdhbWVcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCB0ZXh0b3JkLCBcIlxcdTIwMzVcIiwgXCJcXFxcYmFja3ByaW1lXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgdGV4dG9yZCwgXCJcXHUyNUIyXCIsIFwiXFxcXGJsYWNrdHJpYW5nbGVcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCB0ZXh0b3JkLCBcIlxcdTI1QkNcIiwgXCJcXFxcYmxhY2t0cmlhbmdsZWRvd25cIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCB0ZXh0b3JkLCBcIlxcdTI1QTBcIiwgXCJcXFxcYmxhY2tzcXVhcmVcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCB0ZXh0b3JkLCBcIlxcdTI5RUJcIiwgXCJcXFxcYmxhY2tsb3plbmdlXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgdGV4dG9yZCwgXCJcXHUyNjA1XCIsIFwiXFxcXGJpZ3N0YXJcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCB0ZXh0b3JkLCBcIlxcdTIyMjJcIiwgXCJcXFxcc3BoZXJpY2FsYW5nbGVcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCB0ZXh0b3JkLCBcIlxcdTIyMDFcIiwgXCJcXFxcY29tcGxlbWVudFwiLCB0cnVlKTsgLy8gdW5pY29kZS1tYXRoIG1hcHMgVStGMCB0byBcXG1hdGhldGguIFdlIG1hcCB0byBBTVMgZnVuY3Rpb24gXFxldGhcblxuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgdGV4dG9yZCwgXCJcXHhGMFwiLCBcIlxcXFxldGhcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBcIlxceEYwXCIsIFwiXFx4RjBcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCB0ZXh0b3JkLCBcIlxcdTI1NzFcIiwgXCJcXFxcZGlhZ3VwXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgdGV4dG9yZCwgXCJcXHUyNTcyXCIsIFwiXFxcXGRpYWdkb3duXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgdGV4dG9yZCwgXCJcXHUyNUExXCIsIFwiXFxcXHNxdWFyZVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHRleHRvcmQsIFwiXFx1MjVBMVwiLCBcIlxcXFxCb3hcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCB0ZXh0b3JkLCBcIlxcdTI1Q0FcIiwgXCJcXFxcRGlhbW9uZFwiKTsgLy8gdW5pY29kZS1tYXRoIG1hcHMgVStBNSB0byBcXG1hdGh5ZW4uIFdlIG1hcCB0byBBTVMgZnVuY3Rpb24gXFx5ZW5cblxuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgdGV4dG9yZCwgXCJcXHhBNVwiLCBcIlxcXFx5ZW5cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBhbXMsIHRleHRvcmQsIFwiXFx4QTVcIiwgXCJcXFxceWVuXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgdGV4dG9yZCwgXCJcXHUyNzEzXCIsIFwiXFxcXGNoZWNrbWFya1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIGFtcywgdGV4dG9yZCwgXCJcXHUyNzEzXCIsIFwiXFxcXGNoZWNrbWFya1wiKTsgLy8gQU1TIEhlYnJld1xuXG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCB0ZXh0b3JkLCBcIlxcdTIxMzZcIiwgXCJcXFxcYmV0aFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHRleHRvcmQsIFwiXFx1MjEzOFwiLCBcIlxcXFxkYWxldGhcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCB0ZXh0b3JkLCBcIlxcdTIxMzdcIiwgXCJcXFxcZ2ltZWxcIiwgdHJ1ZSk7IC8vIEFNUyBHcmVla1xuXG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCB0ZXh0b3JkLCBcIlxcdTAzRERcIiwgXCJcXFxcZGlnYW1tYVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHRleHRvcmQsIFwiXFx1MDNGMFwiLCBcIlxcXFx2YXJrYXBwYVwiKTsgLy8gQU1TIERlbGltaXRlcnNcblxuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgc3ltYm9sc19vcGVuLCBcIlxcdTI1MENcIiwgXCJcXFxcQHVsY29ybmVyXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgc3ltYm9sc19jbG9zZSwgXCJcXHUyNTEwXCIsIFwiXFxcXEB1cmNvcm5lclwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHN5bWJvbHNfb3BlbiwgXCJcXHUyNTE0XCIsIFwiXFxcXEBsbGNvcm5lclwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHN5bWJvbHNfY2xvc2UsIFwiXFx1MjUxOFwiLCBcIlxcXFxAbHJjb3JuZXJcIiwgdHJ1ZSk7IC8vIEFNUyBCaW5hcnkgUmVsYXRpb25zXG5cbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjY2XCIsIFwiXFxcXGxlcXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MkE3RFwiLCBcIlxcXFxsZXFzbGFudFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyQTk1XCIsIFwiXFxcXGVxc2xhbnRsZXNzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIyNzJcIiwgXCJcXFxcbGVzc3NpbVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyQTg1XCIsIFwiXFxcXGxlc3NhcHByb3hcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjI0QVwiLCBcIlxcXFxhcHByb3hlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkQ2XCIsIFwiXFxcXGxlc3Nkb3RcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjJEOFwiLCBcIlxcXFxsbGxcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjI3NlwiLCBcIlxcXFxsZXNzZ3RyXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIyREFcIiwgXCJcXFxcbGVzc2VxZ3RyXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTJBOEJcIiwgXCJcXFxcbGVzc2VxcWd0clwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjUxXCIsIFwiXFxcXGRvdGVxZG90XCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIyNTNcIiwgXCJcXFxccmlzaW5nZG90c2VxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIyNTJcIiwgXCJcXFxcZmFsbGluZ2RvdHNlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjNEXCIsIFwiXFxcXGJhY2tzaW1cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjJDRFwiLCBcIlxcXFxiYWNrc2ltZXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MkFDNVwiLCBcIlxcXFxzdWJzZXRlcXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjJEMFwiLCBcIlxcXFxTdWJzZXRcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjI4RlwiLCBcIlxcXFxzcXN1YnNldFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjdDXCIsIFwiXFxcXHByZWNjdXJseWVxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIyREVcIiwgXCJcXFxcY3VybHllcXByZWNcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjI3RVwiLCBcIlxcXFxwcmVjc2ltXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTJBQjdcIiwgXCJcXFxccHJlY2FwcHJveFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkIyXCIsIFwiXFxcXHZhcnRyaWFuZ2xlbGVmdFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkI0XCIsIFwiXFxcXHRyaWFuZ2xlbGVmdGVxXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIyQThcIiwgXCJcXFxcdkRhc2hcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjJBQVwiLCBcIlxcXFxWdmRhc2hcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjMyM1wiLCBcIlxcXFxzbWFsbHNtaWxlXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIzMjJcIiwgXCJcXFxcc21hbGxmcm93blwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjRGXCIsIFwiXFxcXGJ1bXBlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjRFXCIsIFwiXFxcXEJ1bXBlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjY3XCIsIFwiXFxcXGdlcXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MkE3RVwiLCBcIlxcXFxnZXFzbGFudFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyQTk2XCIsIFwiXFxcXGVxc2xhbnRndHJcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjI3M1wiLCBcIlxcXFxndHJzaW1cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MkE4NlwiLCBcIlxcXFxndHJhcHByb3hcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCBiaW4sIFwiXFx1MjJEN1wiLCBcIlxcXFxndHJkb3RcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjJEOVwiLCBcIlxcXFxnZ2dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjI3N1wiLCBcIlxcXFxndHJsZXNzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIyREJcIiwgXCJcXFxcZ3RyZXFsZXNzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTJBOENcIiwgXCJcXFxcZ3RyZXFxbGVzc1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjU2XCIsIFwiXFxcXGVxY2lyY1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjU3XCIsIFwiXFxcXGNpcmNlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjVDXCIsIFwiXFxcXHRyaWFuZ2xlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjNDXCIsIFwiXFxcXHRoaWNrc2ltXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIyNDhcIiwgXCJcXFxcdGhpY2thcHByb3hcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MkFDNlwiLCBcIlxcXFxzdXBzZXRlcXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjJEMVwiLCBcIlxcXFxTdXBzZXRcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjI5MFwiLCBcIlxcXFxzcXN1cHNldFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjdEXCIsIFwiXFxcXHN1Y2NjdXJseWVxXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIyREZcIiwgXCJcXFxcY3VybHllcXN1Y2NcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjI3RlwiLCBcIlxcXFxzdWNjc2ltXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTJBQjhcIiwgXCJcXFxcc3VjY2FwcHJveFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkIzXCIsIFwiXFxcXHZhcnRyaWFuZ2xlcmlnaHRcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjJCNVwiLCBcIlxcXFx0cmlhbmdsZXJpZ2h0ZXFcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjJBOVwiLCBcIlxcXFxWZGFzaFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjIzXCIsIFwiXFxcXHNob3J0bWlkXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIyMjVcIiwgXCJcXFxcc2hvcnRwYXJhbGxlbFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjZDXCIsIFwiXFxcXGJldHdlZW5cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjJENFwiLCBcIlxcXFxwaXRjaGZvcmtcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjIxRFwiLCBcIlxcXFx2YXJwcm9wdG9cIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjVDMFwiLCBcIlxcXFxibGFja3RyaWFuZ2xlbGVmdFwiKTsgLy8gdW5pY29kZS1tYXRoIHNheXMgdGhhdCBcXHRoZXJlZm9yZSBpcyBhIG1hdGhvcmQgYXRvbS5cbi8vIFdlIGtlcHQgdGhlIGFtc3N5bWIgYXRvbSB0eXBlLCB3aGljaCBpcyByZWwuXG5cbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjM0XCIsIFwiXFxcXHRoZXJlZm9yZVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjBEXCIsIFwiXFxcXGJhY2tlcHNpbG9uXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTI1QjZcIiwgXCJcXFxcYmxhY2t0cmlhbmdsZXJpZ2h0XCIpOyAvLyB1bmljb2RlLW1hdGggc2F5cyB0aGF0IFxcYmVjYXVzZSBpcyBhIG1hdGhvcmQgYXRvbS5cbi8vIFdlIGtlcHQgdGhlIGFtc3N5bWIgYXRvbSB0eXBlLCB3aGljaCBpcyByZWwuXG5cbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjM1XCIsIFwiXFxcXGJlY2F1c2VcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjJEOFwiLCBcIlxcXFxsbGxlc3NcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjJEOVwiLCBcIlxcXFxnZ2d0clwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkIyXCIsIFwiXFxcXGxoZFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkIzXCIsIFwiXFxcXHJoZFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjQyXCIsIFwiXFxcXGVxc2ltXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMkM4XCIsIFwiXFxcXEpvaW5cIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjI1MVwiLCBcIlxcXFxEb3RlcVwiLCB0cnVlKTsgLy8gQU1TIEJpbmFyeSBPcGVyYXRvcnNcblxuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgYmluLCBcIlxcdTIyMTRcIiwgXCJcXFxcZG90cGx1c1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIGJpbiwgXCJcXHUyMjE2XCIsIFwiXFxcXHNtYWxsc2V0bWludXNcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCBiaW4sIFwiXFx1MjJEMlwiLCBcIlxcXFxDYXBcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCBiaW4sIFwiXFx1MjJEM1wiLCBcIlxcXFxDdXBcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCBiaW4sIFwiXFx1MkE1RVwiLCBcIlxcXFxkb3VibGViYXJ3ZWRnZVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIGJpbiwgXCJcXHUyMjlGXCIsIFwiXFxcXGJveG1pbnVzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgYmluLCBcIlxcdTIyOUVcIiwgXCJcXFxcYm94cGx1c1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkM3XCIsIFwiXFxcXGRpdmlkZW9udGltZXNcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCBiaW4sIFwiXFx1MjJDOVwiLCBcIlxcXFxsdGltZXNcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCBiaW4sIFwiXFx1MjJDQVwiLCBcIlxcXFxydGltZXNcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCBiaW4sIFwiXFx1MjJDQlwiLCBcIlxcXFxsZWZ0dGhyZWV0aW1lc1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkNDXCIsIFwiXFxcXHJpZ2h0dGhyZWV0aW1lc1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkNGXCIsIFwiXFxcXGN1cmx5d2VkZ2VcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCBiaW4sIFwiXFx1MjJDRVwiLCBcIlxcXFxjdXJseXZlZVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIGJpbiwgXCJcXHUyMjlEXCIsIFwiXFxcXGNpcmNsZWRkYXNoXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgYmluLCBcIlxcdTIyOUJcIiwgXCJcXFxcY2lyY2xlZGFzdFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkM1XCIsIFwiXFxcXGNlbnRlcmRvdFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkJBXCIsIFwiXFxcXGludGVyY2FsXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgYmluLCBcIlxcdTIyRDJcIiwgXCJcXFxcZG91YmxlY2FwXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgYmluLCBcIlxcdTIyRDNcIiwgXCJcXFxcZG91YmxlY3VwXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgYmluLCBcIlxcdTIyQTBcIiwgXCJcXFxcYm94dGltZXNcIiwgdHJ1ZSk7IC8vIEFNUyBBcnJvd3Ncbi8vIE5vdGU6IHVuaWNvZGUtbWF0aCBtYXBzIFxcdTIxZTIgdG8gdGhlaXIgb3duIGZ1bmN0aW9uIFxccmlnaHRkYXNoYXJyb3cuXG4vLyBXZSdsbCBtYXAgaXQgdG8gQU1TIGZ1bmN0aW9uIFxcZGFzaHJpZ2h0YXJyb3cuIEl0IHByb2R1Y2VzIHRoZSBzYW1lIGF0b20uXG5cbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUUyXCIsIFwiXFxcXGRhc2hyaWdodGFycm93XCIsIHRydWUpOyAvLyB1bmljb2RlLW1hdGggbWFwcyBcXHUyMWUwIHRvIFxcbGVmdGRhc2hhcnJvdy4gV2UnbGwgdXNlIHRoZSBBTVMgc3lub255bS5cblxuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIxRTBcIiwgXCJcXFxcZGFzaGxlZnRhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUM3XCIsIFwiXFxcXGxlZnRsZWZ0YXJyb3dzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIxQzZcIiwgXCJcXFxcbGVmdHJpZ2h0YXJyb3dzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIxREFcIiwgXCJcXFxcTGxlZnRhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMTlFXCIsIFwiXFxcXHR3b2hlYWRsZWZ0YXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjFBMlwiLCBcIlxcXFxsZWZ0YXJyb3d0YWlsXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIxQUJcIiwgXCJcXFxcbG9vcGFycm93bGVmdFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUNCXCIsIFwiXFxcXGxlZnRyaWdodGhhcnBvb25zXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIxQjZcIiwgXCJcXFxcY3VydmVhcnJvd2xlZnRcIiwgdHJ1ZSk7IC8vIHVuaWNvZGUtbWF0aCBtYXBzIFxcdTIxYmEgdG8gXFxhY3dvcGVuY2lyY2xlYXJyb3cuIFdlJ2xsIHVzZSB0aGUgQU1TIHN5bm9ueW0uXG5cbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUJBXCIsIFwiXFxcXGNpcmNsZWFycm93bGVmdFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUIwXCIsIFwiXFxcXExzaFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUM4XCIsIFwiXFxcXHVwdXBhcnJvd3NcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjFCRlwiLCBcIlxcXFx1cGhhcnBvb25sZWZ0XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIxQzNcIiwgXCJcXFxcZG93bmhhcnBvb25sZWZ0XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMkI2XCIsIFwiXFxcXG9yaWdvZlwiLCB0cnVlKTsgLy8gbm90IGluIGZvbnRcblxuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMkI3XCIsIFwiXFxcXGltYWdlb2ZcIiwgdHJ1ZSk7IC8vIG5vdCBpbiBmb250XG5cbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMkI4XCIsIFwiXFxcXG11bHRpbWFwXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIxQURcIiwgXCJcXFxcbGVmdHJpZ2h0c3F1aWdhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUM5XCIsIFwiXFxcXHJpZ2h0cmlnaHRhcnJvd3NcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjFDNFwiLCBcIlxcXFxyaWdodGxlZnRhcnJvd3NcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjFBMFwiLCBcIlxcXFx0d29oZWFkcmlnaHRhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUEzXCIsIFwiXFxcXHJpZ2h0YXJyb3d0YWlsXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIxQUNcIiwgXCJcXFxcbG9vcGFycm93cmlnaHRcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjFCN1wiLCBcIlxcXFxjdXJ2ZWFycm93cmlnaHRcIiwgdHJ1ZSk7IC8vIHVuaWNvZGUtbWF0aCBtYXBzIFxcdTIxYmIgdG8gXFxjd29wZW5jaXJjbGVhcnJvdy4gV2UnbGwgdXNlIHRoZSBBTVMgc3lub255bS5cblxuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIxQkJcIiwgXCJcXFxcY2lyY2xlYXJyb3dyaWdodFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUIxXCIsIFwiXFxcXFJzaFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMUNBXCIsIFwiXFxcXGRvd25kb3duYXJyb3dzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIxQkVcIiwgXCJcXFxcdXBoYXJwb29ucmlnaHRcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCByZWwsIFwiXFx1MjFDMlwiLCBcIlxcXFxkb3duaGFycG9vbnJpZ2h0XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIxRERcIiwgXCJcXFxccmlnaHRzcXVpZ2Fycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIxRERcIiwgXCJcXFxcbGVhZHN0b1wiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMURCXCIsIFwiXFxcXFJyaWdodGFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIxQkVcIiwgXCJcXFxccmVzdHJpY3Rpb25cIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJcXHUyMDE4XCIsIFwiYFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIiRcIiwgXCJcXFxcJFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwiJFwiLCBcIlxcXFwkXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgXCIkXCIsIFwiXFxcXHRleHRkb2xsYXJcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCIlXCIsIFwiXFxcXCVcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBcIiVcIiwgXCJcXFxcJVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIl9cIiwgXCJcXFxcX1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwiX1wiLCBcIlxcXFxfXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgXCJfXCIsIFwiXFxcXHRleHR1bmRlcnNjb3JlXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiXFx1MjIyMFwiLCBcIlxcXFxhbmdsZVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTIyMUVcIiwgXCJcXFxcaW5mdHlcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJcXHUyMDMyXCIsIFwiXFxcXHByaW1lXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiXFx1MjVCM1wiLCBcIlxcXFx0cmlhbmdsZVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTAzOTNcIiwgXCJcXFxcR2FtbWFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJcXHUwMzk0XCIsIFwiXFxcXERlbHRhXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiXFx1MDM5OFwiLCBcIlxcXFxUaGV0YVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTAzOUJcIiwgXCJcXFxcTGFtYmRhXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiXFx1MDM5RVwiLCBcIlxcXFxYaVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTAzQTBcIiwgXCJcXFxcUGlcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJcXHUwM0EzXCIsIFwiXFxcXFNpZ21hXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiXFx1MDNBNVwiLCBcIlxcXFxVcHNpbG9uXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiXFx1MDNBNlwiLCBcIlxcXFxQaGlcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJcXHUwM0E4XCIsIFwiXFxcXFBzaVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTAzQTlcIiwgXCJcXFxcT21lZ2FcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJBXCIsIFwiXFx1MDM5MVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIkJcIiwgXCJcXHUwMzkyXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiRVwiLCBcIlxcdTAzOTVcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJaXCIsIFwiXFx1MDM5NlwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIkhcIiwgXCJcXHUwMzk3XCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiSVwiLCBcIlxcdTAzOTlcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJLXCIsIFwiXFx1MDM5QVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIk1cIiwgXCJcXHUwMzlDXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiTlwiLCBcIlxcdTAzOURcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJPXCIsIFwiXFx1MDM5RlwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlBcIiwgXCJcXHUwM0ExXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiVFwiLCBcIlxcdTAzQTRcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJYXCIsIFwiXFx1MDNBN1wiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxceEFDXCIsIFwiXFxcXG5lZ1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxceEFDXCIsIFwiXFxcXGxub3RcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJcXHUyMkE0XCIsIFwiXFxcXHRvcFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTIyQTVcIiwgXCJcXFxcYm90XCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiXFx1MjIwNVwiLCBcIlxcXFxlbXB0eXNldFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHRleHRvcmQsIFwiXFx1MjIwNVwiLCBcIlxcXFx2YXJub3RoaW5nXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNCMVwiLCBcIlxcXFxhbHBoYVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBtYXRob3JkLCBcIlxcdTAzQjJcIiwgXCJcXFxcYmV0YVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBtYXRob3JkLCBcIlxcdTAzQjNcIiwgXCJcXFxcZ2FtbWFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJcXHUwM0I0XCIsIFwiXFxcXGRlbHRhXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNGNVwiLCBcIlxcXFxlcHNpbG9uXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNCNlwiLCBcIlxcXFx6ZXRhXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNCN1wiLCBcIlxcXFxldGFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJcXHUwM0I4XCIsIFwiXFxcXHRoZXRhXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNCOVwiLCBcIlxcXFxpb3RhXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNCQVwiLCBcIlxcXFxrYXBwYVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBtYXRob3JkLCBcIlxcdTAzQkJcIiwgXCJcXFxcbGFtYmRhXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNCQ1wiLCBcIlxcXFxtdVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBtYXRob3JkLCBcIlxcdTAzQkRcIiwgXCJcXFxcbnVcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJcXHUwM0JFXCIsIFwiXFxcXHhpXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNCRlwiLCBcIlxcXFxvbWljcm9uXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNDMFwiLCBcIlxcXFxwaVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBtYXRob3JkLCBcIlxcdTAzQzFcIiwgXCJcXFxccmhvXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNDM1wiLCBcIlxcXFxzaWdtYVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBtYXRob3JkLCBcIlxcdTAzQzRcIiwgXCJcXFxcdGF1XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNDNVwiLCBcIlxcXFx1cHNpbG9uXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNENVwiLCBcIlxcXFxwaGlcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJcXHUwM0M3XCIsIFwiXFxcXGNoaVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBtYXRob3JkLCBcIlxcdTAzQzhcIiwgXCJcXFxccHNpXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNDOVwiLCBcIlxcXFxvbWVnYVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBtYXRob3JkLCBcIlxcdTAzQjVcIiwgXCJcXFxcdmFyZXBzaWxvblwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBtYXRob3JkLCBcIlxcdTAzRDFcIiwgXCJcXFxcdmFydGhldGFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJcXHUwM0Q2XCIsIFwiXFxcXHZhcnBpXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNGMVwiLCBcIlxcXFx2YXJyaG9cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJcXHUwM0MyXCIsIFwiXFxcXHZhcnNpZ21hXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1MDNDNlwiLCBcIlxcXFx2YXJwaGlcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgYmluLCBcIlxcdTIyMTdcIiwgXCIqXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCIrXCIsIFwiK1wiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBiaW4sIFwiXFx1MjIxMlwiLCBcIi1cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgYmluLCBcIlxcdTIyQzVcIiwgXCJcXFxcY2RvdFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBiaW4sIFwiXFx1MjIxOFwiLCBcIlxcXFxjaXJjXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCJcXHhGN1wiLCBcIlxcXFxkaXZcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgYmluLCBcIlxceEIxXCIsIFwiXFxcXHBtXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCJcXHhEN1wiLCBcIlxcXFx0aW1lc1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBiaW4sIFwiXFx1MjIyOVwiLCBcIlxcXFxjYXBcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgYmluLCBcIlxcdTIyMkFcIiwgXCJcXFxcY3VwXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCJcXHUyMjE2XCIsIFwiXFxcXHNldG1pbnVzXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCJcXHUyMjI3XCIsIFwiXFxcXGxhbmRcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgYmluLCBcIlxcdTIyMjhcIiwgXCJcXFxcbG9yXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCJcXHUyMjI3XCIsIFwiXFxcXHdlZGdlXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCJcXHUyMjI4XCIsIFwiXFxcXHZlZVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTIyMUFcIiwgXCJcXFxcc3VyZFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBzeW1ib2xzX29wZW4sIFwiXFx1MjdFOFwiLCBcIlxcXFxsYW5nbGVcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgc3ltYm9sc19vcGVuLCBcIlxcdTIyMjNcIiwgXCJcXFxcbHZlcnRcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgc3ltYm9sc19vcGVuLCBcIlxcdTIyMjVcIiwgXCJcXFxcbFZlcnRcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgc3ltYm9sc19jbG9zZSwgXCI/XCIsIFwiP1wiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBzeW1ib2xzX2Nsb3NlLCBcIiFcIiwgXCIhXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHN5bWJvbHNfY2xvc2UsIFwiXFx1MjdFOVwiLCBcIlxcXFxyYW5nbGVcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgc3ltYm9sc19jbG9zZSwgXCJcXHUyMjIzXCIsIFwiXFxcXHJ2ZXJ0XCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHN5bWJvbHNfY2xvc2UsIFwiXFx1MjIyNVwiLCBcIlxcXFxyVmVydFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiPVwiLCBcIj1cIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcmVsLCBcIjpcIiwgXCI6XCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjQ4XCIsIFwiXFxcXGFwcHJveFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjI0NVwiLCBcIlxcXFxjb25nXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjY1XCIsIFwiXFxcXGdlXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjY1XCIsIFwiXFxcXGdlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjE5MFwiLCBcIlxcXFxnZXRzXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCI+XCIsIFwiXFxcXGd0XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjA4XCIsIFwiXFxcXGluXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHVFMDIwXCIsIFwiXFxcXEBub3RcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIyODJcIiwgXCJcXFxcc3Vic2V0XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjgzXCIsIFwiXFxcXHN1cHNldFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjI4NlwiLCBcIlxcXFxzdWJzZXRlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjI4N1wiLCBcIlxcXFxzdXBzZXRlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjg4XCIsIFwiXFxcXG5zdWJzZXRlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjg5XCIsIFwiXFxcXG5zdXBzZXRlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjJBOFwiLCBcIlxcXFxtb2RlbHNcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIxOTBcIiwgXCJcXFxcbGVmdGFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjY0XCIsIFwiXFxcXGxlXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMjY0XCIsIFwiXFxcXGxlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiPFwiLCBcIlxcXFxsdFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjE5MlwiLCBcIlxcXFxyaWdodGFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMTkyXCIsIFwiXFxcXHRvXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgcmVsLCBcIlxcdTIyNzFcIiwgXCJcXFxcbmdlcVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHJlbCwgXCJcXHUyMjcwXCIsIFwiXFxcXG5sZXFcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgc3BhY2luZywgXCJcXHhBMFwiLCBcIlxcXFwgXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHNwYWNpbmcsIFwiXFx4QTBcIiwgXCJcXFxcc3BhY2VcIik7IC8vIFJlZjogTGFUZVggU291cmNlIDJlOiBcXERlY2xhcmVSb2J1c3RDb21tYW5ke1xcbm9icmVha3NwYWNlfXslXG5cbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBzcGFjaW5nLCBcIlxceEEwXCIsIFwiXFxcXG5vYnJlYWtzcGFjZVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHNwYWNpbmcsIFwiXFx4QTBcIiwgXCJcXFxcIFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHNwYWNpbmcsIFwiXFx4QTBcIiwgXCIgXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgc3BhY2luZywgXCJcXHhBMFwiLCBcIlxcXFxzcGFjZVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHNwYWNpbmcsIFwiXFx4QTBcIiwgXCJcXFxcbm9icmVha3NwYWNlXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHNwYWNpbmcsIG51bGwsIFwiXFxcXG5vYnJlYWtcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgc3BhY2luZywgbnVsbCwgXCJcXFxcYWxsb3dicmVha1wiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBwdW5jdCwgXCIsXCIsIFwiLFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBwdW5jdCwgXCI7XCIsIFwiO1wiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIGJpbiwgXCJcXHUyMkJDXCIsIFwiXFxcXGJhcndlZGdlXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgYmluLCBcIlxcdTIyQkJcIiwgXCJcXFxcdmVlYmFyXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCJcXHUyMjk5XCIsIFwiXFxcXG9kb3RcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgYmluLCBcIlxcdTIyOTVcIiwgXCJcXFxcb3BsdXNcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgYmluLCBcIlxcdTIyOTdcIiwgXCJcXFxcb3RpbWVzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiXFx1MjIwMlwiLCBcIlxcXFxwYXJ0aWFsXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCJcXHUyMjk4XCIsIFwiXFxcXG9zbGFzaFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIGJpbiwgXCJcXHUyMjlBXCIsIFwiXFxcXGNpcmNsZWRjaXJjXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgYmluLCBcIlxcdTIyQTFcIiwgXCJcXFxcYm94ZG90XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCJcXHUyNUIzXCIsIFwiXFxcXGJpZ3RyaWFuZ2xldXBcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgYmluLCBcIlxcdTI1QkRcIiwgXCJcXFxcYmlndHJpYW5nbGVkb3duXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCJcXHUyMDIwXCIsIFwiXFxcXGRhZ2dlclwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBiaW4sIFwiXFx1MjJDNFwiLCBcIlxcXFxkaWFtb25kXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCJcXHUyMkM2XCIsIFwiXFxcXHN0YXJcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgYmluLCBcIlxcdTI1QzNcIiwgXCJcXFxcdHJpYW5nbGVsZWZ0XCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGJpbiwgXCJcXHUyNUI5XCIsIFwiXFxcXHRyaWFuZ2xlcmlnaHRcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgc3ltYm9sc19vcGVuLCBcIntcIiwgXCJcXFxce1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwie1wiLCBcIlxcXFx7XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgXCJ7XCIsIFwiXFxcXHRleHRicmFjZWxlZnRcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgc3ltYm9sc19jbG9zZSwgXCJ9XCIsIFwiXFxcXH1cIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBcIn1cIiwgXCJcXFxcfVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwifVwiLCBcIlxcXFx0ZXh0YnJhY2VyaWdodFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBzeW1ib2xzX29wZW4sIFwie1wiLCBcIlxcXFxsYnJhY2VcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgc3ltYm9sc19jbG9zZSwgXCJ9XCIsIFwiXFxcXHJicmFjZVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBzeW1ib2xzX29wZW4sIFwiW1wiLCBcIlxcXFxsYnJhY2tcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBcIltcIiwgXCJcXFxcbGJyYWNrXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHN5bWJvbHNfY2xvc2UsIFwiXVwiLCBcIlxcXFxyYnJhY2tcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBcIl1cIiwgXCJcXFxccmJyYWNrXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHN5bWJvbHNfb3BlbiwgXCIoXCIsIFwiXFxcXGxwYXJlblwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBzeW1ib2xzX2Nsb3NlLCBcIilcIiwgXCJcXFxccnBhcmVuXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgXCI8XCIsIFwiXFxcXHRleHRsZXNzXCIsIHRydWUpOyAvLyBpbiBUMSBmb250ZW5jXG5cbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwiPlwiLCBcIlxcXFx0ZXh0Z3JlYXRlclwiLCB0cnVlKTsgLy8gaW4gVDEgZm9udGVuY1xuXG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgc3ltYm9sc19vcGVuLCBcIlxcdTIzMEFcIiwgXCJcXFxcbGZsb29yXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHN5bWJvbHNfY2xvc2UsIFwiXFx1MjMwQlwiLCBcIlxcXFxyZmxvb3JcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgc3ltYm9sc19vcGVuLCBcIlxcdTIzMDhcIiwgXCJcXFxcbGNlaWxcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgc3ltYm9sc19jbG9zZSwgXCJcXHUyMzA5XCIsIFwiXFxcXHJjZWlsXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiXFxcXFwiLCBcIlxcXFxiYWNrc2xhc2hcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJcXHUyMjIzXCIsIFwifFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTIyMjNcIiwgXCJcXFxcdmVydFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwifFwiLCBcIlxcXFx0ZXh0YmFyXCIsIHRydWUpOyAvLyBpbiBUMSBmb250ZW5jXG5cbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTIyMjVcIiwgXCJcXFxcfFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTIyMjVcIiwgXCJcXFxcVmVydFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwiXFx1MjIyNVwiLCBcIlxcXFx0ZXh0YmFyZGJsXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgXCJ+XCIsIFwiXFxcXHRleHRhc2NpaXRpbGRlXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgXCJcXFxcXCIsIFwiXFxcXHRleHRiYWNrc2xhc2hcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBcIl5cIiwgXCJcXFxcdGV4dGFzY2lpY2lyY3VtXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMTkxXCIsIFwiXFxcXHVwYXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIxRDFcIiwgXCJcXFxcVXBhcnJvd1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCByZWwsIFwiXFx1MjE5M1wiLCBcIlxcXFxkb3duYXJyb3dcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgcmVsLCBcIlxcdTIxRDNcIiwgXCJcXFxcRG93bmFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMTk1XCIsIFwiXFxcXHVwZG93bmFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHJlbCwgXCJcXHUyMUQ1XCIsIFwiXFxcXFVwZG93bmFycm93XCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG9wLCBcIlxcdTIyMTBcIiwgXCJcXFxcY29wcm9kXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG9wLCBcIlxcdTIyQzFcIiwgXCJcXFxcYmlndmVlXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG9wLCBcIlxcdTIyQzBcIiwgXCJcXFxcYmlnd2VkZ2VcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgb3AsIFwiXFx1MkEwNFwiLCBcIlxcXFxiaWd1cGx1c1wiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBvcCwgXCJcXHUyMkMyXCIsIFwiXFxcXGJpZ2NhcFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBvcCwgXCJcXHUyMkMzXCIsIFwiXFxcXGJpZ2N1cFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBvcCwgXCJcXHUyMjJCXCIsIFwiXFxcXGludFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBvcCwgXCJcXHUyMjJCXCIsIFwiXFxcXGludG9wXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG9wLCBcIlxcdTIyMkNcIiwgXCJcXFxcaWludFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBvcCwgXCJcXHUyMjJEXCIsIFwiXFxcXGlpaW50XCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG9wLCBcIlxcdTIyMEZcIiwgXCJcXFxccHJvZFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBvcCwgXCJcXHUyMjExXCIsIFwiXFxcXHN1bVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBvcCwgXCJcXHUyQTAyXCIsIFwiXFxcXGJpZ290aW1lc1wiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBvcCwgXCJcXHUyQTAxXCIsIFwiXFxcXGJpZ29wbHVzXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG9wLCBcIlxcdTJBMDBcIiwgXCJcXFxcYmlnb2RvdFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBvcCwgXCJcXHUyMjJFXCIsIFwiXFxcXG9pbnRcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgb3AsIFwiXFx1MjIyRlwiLCBcIlxcXFxvaWludFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBvcCwgXCJcXHUyMjMwXCIsIFwiXFxcXG9paWludFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBvcCwgXCJcXHUyQTA2XCIsIFwiXFxcXGJpZ3NxY3VwXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG9wLCBcIlxcdTIyMkJcIiwgXCJcXFxcc21hbGxpbnRcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBpbm5lciwgXCJcXHUyMDI2XCIsIFwiXFxcXHRleHRlbGxpcHNpc1wiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBpbm5lciwgXCJcXHUyMDI2XCIsIFwiXFxcXG1hdGhlbGxpcHNpc1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIGlubmVyLCBcIlxcdTIwMjZcIiwgXCJcXFxcbGRvdHNcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgaW5uZXIsIFwiXFx1MjAyNlwiLCBcIlxcXFxsZG90c1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBpbm5lciwgXCJcXHUyMkVGXCIsIFwiXFxcXEBjZG90c1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBpbm5lciwgXCJcXHUyMkYxXCIsIFwiXFxcXGRkb3RzXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiXFx1MjJFRVwiLCBcIlxcXFx2YXJ2ZG90c1wiKTsgLy8gXFx2ZG90cyBpcyBhIG1hY3JvXG5cbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBhY2NlbnQsIFwiXFx1MDJDQVwiLCBcIlxcXFxhY3V0ZVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBhY2NlbnQsIFwiXFx1MDJDQlwiLCBcIlxcXFxncmF2ZVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBhY2NlbnQsIFwiXFx4QThcIiwgXCJcXFxcZGRvdFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBhY2NlbnQsIFwiflwiLCBcIlxcXFx0aWxkZVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBhY2NlbnQsIFwiXFx1MDJDOVwiLCBcIlxcXFxiYXJcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgYWNjZW50LCBcIlxcdTAyRDhcIiwgXCJcXFxcYnJldmVcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgYWNjZW50LCBcIlxcdTAyQzdcIiwgXCJcXFxcY2hlY2tcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgYWNjZW50LCBcIl5cIiwgXCJcXFxcaGF0XCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIGFjY2VudCwgXCJcXHUyMEQ3XCIsIFwiXFxcXHZlY1wiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBhY2NlbnQsIFwiXFx1MDJEOVwiLCBcIlxcXFxkb3RcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgYWNjZW50LCBcIlxcdTAyREFcIiwgXCJcXFxcbWF0aHJpbmdcIik7IC8vIFxcaW1hdGggYW5kIFxcam1hdGggc2hvdWxkIGJlIGludmFyaWFudCB0byBcXG1hdGhybSwgXFxtYXRoYmYsIGV0Yy4sIHNvIHVzZSBQVUFcblxuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIFwiXFx1RTEzMVwiLCBcIlxcXFxAaW1hdGhcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJcXHVFMjM3XCIsIFwiXFxcXEBqbWF0aFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxcdTAxMzFcIiwgXCJcXHUwMTMxXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIHRleHRvcmQsIFwiXFx1MDIzN1wiLCBcIlxcdTAyMzdcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBcIlxcdTAxMzFcIiwgXCJcXFxcaVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwiXFx1MDIzN1wiLCBcIlxcXFxqXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgXCJcXHhERlwiLCBcIlxcXFxzc1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwiXFx4RTZcIiwgXCJcXFxcYWVcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBcIlxcdTAxNTNcIiwgXCJcXFxcb2VcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBcIlxceEY4XCIsIFwiXFxcXG9cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBcIlxceEM2XCIsIFwiXFxcXEFFXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgXCJcXHUwMTUyXCIsIFwiXFxcXE9FXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgXCJcXHhEOFwiLCBcIlxcXFxPXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgYWNjZW50LCBcIlxcdTAyQ0FcIiwgXCJcXFxcJ1wiKTsgLy8gYWN1dGVcblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgYWNjZW50LCBcIlxcdTAyQ0JcIiwgXCJcXFxcYFwiKTsgLy8gZ3JhdmVcblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgYWNjZW50LCBcIlxcdTAyQzZcIiwgXCJcXFxcXlwiKTsgLy8gY2lyY3VtZmxleFxuXG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBhY2NlbnQsIFwiXFx1MDJEQ1wiLCBcIlxcXFx+XCIpOyAvLyB0aWxkZVxuXG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBhY2NlbnQsIFwiXFx1MDJDOVwiLCBcIlxcXFw9XCIpOyAvLyBtYWNyb25cblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgYWNjZW50LCBcIlxcdTAyRDhcIiwgXCJcXFxcdVwiKTsgLy8gYnJldmVcblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgYWNjZW50LCBcIlxcdTAyRDlcIiwgXCJcXFxcLlwiKTsgLy8gZG90IGFib3ZlXG5cbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIGFjY2VudCwgXCJcXHhCOFwiLCBcIlxcXFxjXCIpOyAvLyBjZWRpbGxhXG5cbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIGFjY2VudCwgXCJcXHUwMkRBXCIsIFwiXFxcXHJcIik7IC8vIHJpbmcgYWJvdmVcblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgYWNjZW50LCBcIlxcdTAyQzdcIiwgXCJcXFxcdlwiKTsgLy8gY2Fyb25cblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgYWNjZW50LCBcIlxceEE4XCIsICdcXFxcXCInKTsgLy8gZGlhcmVzaXNcblxuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgYWNjZW50LCBcIlxcdTAyRERcIiwgXCJcXFxcSFwiKTsgLy8gZG91YmxlIGFjdXRlXG5cbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIGFjY2VudCwgXCJcXHUyNUVGXCIsIFwiXFxcXHRleHRjaXJjbGVkXCIpOyAvLyBcXGJpZ2NpcmMgZ2x5cGhcbi8vIFRoZXNlIGxpZ2F0dXJlcyBhcmUgZGV0ZWN0ZWQgYW5kIGNyZWF0ZWQgaW4gUGFyc2VyLmpzJ3MgYGZvcm1MaWdhdHVyZXNgLlxuXG52YXIgbGlnYXR1cmVzID0ge1xuICBcIi0tXCI6IHRydWUsXG4gIFwiLS0tXCI6IHRydWUsXG4gIFwiYGBcIjogdHJ1ZSxcbiAgXCInJ1wiOiB0cnVlXG59O1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgXCJcXHUyMDEzXCIsIFwiLS1cIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBcIlxcdTIwMTNcIiwgXCJcXFxcdGV4dGVuZGFzaFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwiXFx1MjAxNFwiLCBcIi0tLVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwiXFx1MjAxNFwiLCBcIlxcXFx0ZXh0ZW1kYXNoXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgXCJcXHUyMDE4XCIsIFwiYFwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwiXFx1MjAxOFwiLCBcIlxcXFx0ZXh0cXVvdGVsZWZ0XCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgXCJcXHUyMDE5XCIsIFwiJ1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwiXFx1MjAxOVwiLCBcIlxcXFx0ZXh0cXVvdGVyaWdodFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwiXFx1MjAxQ1wiLCBcImBgXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgXCJcXHUyMDFDXCIsIFwiXFxcXHRleHRxdW90ZWRibGxlZnRcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBcIlxcdTIwMURcIiwgXCInJ1wiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwiXFx1MjAxRFwiLCBcIlxcXFx0ZXh0cXVvdGVkYmxyaWdodFwiKTsgLy8gIFxcZGVncmVlIGZyb20gZ2Vuc3ltYiBwYWNrYWdlXG5cbmRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBcIlxceEIwXCIsIFwiXFxcXGRlZ3JlZVwiLCB0cnVlKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwiXFx4QjBcIiwgXCJcXFxcZGVncmVlXCIpOyAvLyBcXHRleHRkZWdyZWUgZnJvbSBpbnB1dGVuYyBwYWNrYWdlXG5cbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwiXFx4QjBcIiwgXCJcXFxcdGV4dGRlZ3JlZVwiLCB0cnVlKTsgLy8gVE9ETzogSW4gTGFUZVgsIFxccG91bmRzIGNhbiBnZW5lcmF0ZSBhIGRpZmZlcmVudCBjaGFyYWN0ZXIgaW4gdGV4dCBhbmQgbWF0aFxuLy8gbW9kZSwgYnV0IGFtb25nIG91ciBmb250cywgb25seSBNYWluLVJlZ3VsYXIgZGVmaW5lcyB0aGlzIGNoYXJhY3RlciBcIjE2M1wiLlxuXG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJcXHhBM1wiLCBcIlxcXFxwb3VuZHNcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgdGV4dG9yZCwgXCJcXHhBM1wiLCBcIlxcXFxtYXRoc3RlcmxpbmdcIiwgdHJ1ZSk7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBcIlxceEEzXCIsIFwiXFxcXHBvdW5kc1wiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIFwiXFx4QTNcIiwgXCJcXFxcdGV4dHN0ZXJsaW5nXCIsIHRydWUpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgdGV4dG9yZCwgXCJcXHUyNzIwXCIsIFwiXFxcXG1hbHRlc2VcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBhbXMsIHRleHRvcmQsIFwiXFx1MjcyMFwiLCBcIlxcXFxtYWx0ZXNlXCIpOyAvLyBUaGVyZSBhcmUgbG90cyBvZiBzeW1ib2xzIHdoaWNoIGFyZSB0aGUgc2FtZSwgc28gd2UgYWRkIHRoZW0gaW4gYWZ0ZXJ3YXJkcy5cbi8vIEFsbCBvZiB0aGVzZSBhcmUgdGV4dG9yZHMgaW4gbWF0aCBtb2RlXG5cbnZhciBtYXRoVGV4dFN5bWJvbHMgPSBcIjAxMjM0NTY3ODkvQC5cXFwiXCI7XG5cbmZvciAodmFyIGkgPSAwOyBpIDwgbWF0aFRleHRTeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBjaCA9IG1hdGhUZXh0U3ltYm9scy5jaGFyQXQoaSk7XG4gIGRlZmluZVN5bWJvbChtYXRoLCBtYWluLCB0ZXh0b3JkLCBjaCwgY2gpO1xufSAvLyBBbGwgb2YgdGhlc2UgYXJlIHRleHRvcmRzIGluIHRleHQgbW9kZVxuXG5cbnZhciB0ZXh0U3ltYm9scyA9IFwiMDEyMzQ1Njc4OSFAKigpLT0rXFxcIjs6Py8uLFwiO1xuXG5mb3IgKHZhciBfaSA9IDA7IF9pIDwgdGV4dFN5bWJvbHMubGVuZ3RoOyBfaSsrKSB7XG4gIHZhciBfY2ggPSB0ZXh0U3ltYm9scy5jaGFyQXQoX2kpO1xuXG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIF9jaCwgX2NoKTtcbn0gLy8gQWxsIG9mIHRoZXNlIGFyZSB0ZXh0b3JkcyBpbiB0ZXh0IG1vZGUsIGFuZCBtYXRob3JkcyBpbiBtYXRoIG1vZGVcblxuXG52YXIgbGV0dGVycyA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiO1xuXG5mb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBsZXR0ZXJzLmxlbmd0aDsgX2kyKyspIHtcbiAgdmFyIF9jaDIgPSBsZXR0ZXJzLmNoYXJBdChfaTIpO1xuXG4gIGRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBtYXRob3JkLCBfY2gyLCBfY2gyKTtcbiAgZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgX2NoMiwgX2NoMik7XG59IC8vIEJsYWNrYm9hcmQgYm9sZCBhbmQgc2NyaXB0IGxldHRlcnMgaW4gVW5pY29kZSByYW5nZVxuXG5cbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHRleHRvcmQsIFwiQ1wiLCBcIlxcdTIxMDJcIik7IC8vIGJsYWNrYm9hcmQgYm9sZFxuXG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBhbXMsIHRleHRvcmQsIFwiQ1wiLCBcIlxcdTIxMDJcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCB0ZXh0b3JkLCBcIkhcIiwgXCJcXHUyMTBEXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgYW1zLCB0ZXh0b3JkLCBcIkhcIiwgXCJcXHUyMTBEXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgdGV4dG9yZCwgXCJOXCIsIFwiXFx1MjExNVwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIGFtcywgdGV4dG9yZCwgXCJOXCIsIFwiXFx1MjExNVwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHRleHRvcmQsIFwiUFwiLCBcIlxcdTIxMTlcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBhbXMsIHRleHRvcmQsIFwiUFwiLCBcIlxcdTIxMTlcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgYW1zLCB0ZXh0b3JkLCBcIlFcIiwgXCJcXHUyMTFBXCIpO1xuZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgYW1zLCB0ZXh0b3JkLCBcIlFcIiwgXCJcXHUyMTFBXCIpO1xuZGVmaW5lU3ltYm9sKG1hdGgsIGFtcywgdGV4dG9yZCwgXCJSXCIsIFwiXFx1MjExRFwiKTtcbmRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIGFtcywgdGV4dG9yZCwgXCJSXCIsIFwiXFx1MjExRFwiKTtcbmRlZmluZVN5bWJvbChtYXRoLCBhbXMsIHRleHRvcmQsIFwiWlwiLCBcIlxcdTIxMjRcIik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBhbXMsIHRleHRvcmQsIFwiWlwiLCBcIlxcdTIxMjRcIik7XG5kZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgbWF0aG9yZCwgXCJoXCIsIFwiXFx1MjEwRVwiKTsgLy8gaXRhbGljIGgsIFBsYW5jayBjb25zdGFudFxuXG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCBtYXRob3JkLCBcImhcIiwgXCJcXHUyMTBFXCIpOyAvLyBUaGUgbmV4dCBsb29wIGxvYWRzIHdpZGUgKHN1cnJvZ2F0ZSBwYWlyKSBjaGFyYWN0ZXJzLlxuLy8gV2Ugc3VwcG9ydCBzb21lIGxldHRlcnMgaW4gdGhlIFVuaWNvZGUgcmFuZ2UgVSsxRDQwMCB0byBVKzFEN0ZGLFxuLy8gTWF0aGVtYXRpY2FsIEFscGhhbnVtZXJpYyBTeW1ib2xzLlxuLy8gU29tZSBlZGl0b3JzIGRvIG5vdCBkZWFsIHdlbGwgd2l0aCB3aWRlIGNoYXJhY3RlcnMuIFNvIGRvbid0IHdyaXRlIHRoZVxuLy8gc3RyaW5nIGludG8gdGhpcyBmaWxlLiBJbnN0ZWFkLCBjcmVhdGUgdGhlIHN0cmluZyBmcm9tIHRoZSBzdXJyb2dhdGUgcGFpci5cblxudmFyIHdpZGVDaGFyID0gXCJcIjtcblxuZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgbGV0dGVycy5sZW5ndGg7IF9pMysrKSB7XG4gIHZhciBfY2gzID0gbGV0dGVycy5jaGFyQXQoX2kzKTsgLy8gVGhlIGhleCBudW1iZXJzIGluIHRoZSBuZXh0IGxpbmUgYXJlIGEgc3Vycm9nYXRlIHBhaXIuXG4gIC8vIDB4RDgzNSBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgZm9yIGFsbCBsZXR0ZXJzIGluIHRoZSByYW5nZSB3ZSBzdXBwb3J0LlxuICAvLyAweERDMDAgaXMgdGhlIGxvdyBzdXJyb2dhdGUgZm9yIGJvbGQgQS5cblxuXG4gIHdpZGVDaGFyID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEQ4MzUsIDB4REMwMCArIF9pMyk7IC8vIEEtWiBhLXogYm9sZFxuXG4gIGRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBtYXRob3JkLCBfY2gzLCB3aWRlQ2hhcik7XG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIF9jaDMsIHdpZGVDaGFyKTtcbiAgd2lkZUNoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RDgzNSwgMHhEQzM0ICsgX2kzKTsgLy8gQS1aIGEteiBpdGFsaWNcblxuICBkZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgbWF0aG9yZCwgX2NoMywgd2lkZUNoYXIpO1xuICBkZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBfY2gzLCB3aWRlQ2hhcik7XG4gIHdpZGVDaGFyID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEQ4MzUsIDB4REM2OCArIF9pMyk7IC8vIEEtWiBhLXogYm9sZCBpdGFsaWNcblxuICBkZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgbWF0aG9yZCwgX2NoMywgd2lkZUNoYXIpO1xuICBkZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBfY2gzLCB3aWRlQ2hhcik7XG4gIHdpZGVDaGFyID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEQ4MzUsIDB4REQwNCArIF9pMyk7IC8vIEEtWiBhLXogRnJhY3R1clxuXG4gIGRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBtYXRob3JkLCBfY2gzLCB3aWRlQ2hhcik7XG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIF9jaDMsIHdpZGVDaGFyKTtcbiAgd2lkZUNoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RDgzNSwgMHhEREEwICsgX2kzKTsgLy8gQS1aIGEteiBzYW5zLXNlcmlmXG5cbiAgZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIF9jaDMsIHdpZGVDaGFyKTtcbiAgZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgX2NoMywgd2lkZUNoYXIpO1xuICB3aWRlQ2hhciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODM1LCAweERERDQgKyBfaTMpOyAvLyBBLVogYS16IHNhbnMgYm9sZFxuXG4gIGRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBtYXRob3JkLCBfY2gzLCB3aWRlQ2hhcik7XG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIF9jaDMsIHdpZGVDaGFyKTtcbiAgd2lkZUNoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RDgzNSwgMHhERTA4ICsgX2kzKTsgLy8gQS1aIGEteiBzYW5zIGl0YWxpY1xuXG4gIGRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBtYXRob3JkLCBfY2gzLCB3aWRlQ2hhcik7XG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIF9jaDMsIHdpZGVDaGFyKTtcbiAgd2lkZUNoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RDgzNSwgMHhERTcwICsgX2kzKTsgLy8gQS1aIGEteiBtb25vc3BhY2VcblxuICBkZWZpbmVTeW1ib2wobWF0aCwgbWFpbiwgbWF0aG9yZCwgX2NoMywgd2lkZUNoYXIpO1xuICBkZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBfY2gzLCB3aWRlQ2hhcik7XG5cbiAgaWYgKF9pMyA8IDI2KSB7XG4gICAgLy8gS2FUZVggZm9udHMgaGF2ZSBvbmx5IGNhcGl0YWwgbGV0dGVycyBmb3IgYmxhY2tib2FyZCBib2xkIGFuZCBzY3JpcHQuXG4gICAgLy8gU2VlIGV4Y2VwdGlvbiBmb3IgayBiZWxvdy5cbiAgICB3aWRlQ2hhciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODM1LCAweEREMzggKyBfaTMpOyAvLyBBLVogZG91YmxlIHN0cnVja1xuXG4gICAgZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIF9jaDMsIHdpZGVDaGFyKTtcbiAgICBkZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBfY2gzLCB3aWRlQ2hhcik7XG4gICAgd2lkZUNoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RDgzNSwgMHhEQzlDICsgX2kzKTsgLy8gQS1aIHNjcmlwdFxuXG4gICAgZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIF9jaDMsIHdpZGVDaGFyKTtcbiAgICBkZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBfY2gzLCB3aWRlQ2hhcik7XG4gIH0gLy8gVE9ETzogQWRkIGJvbGQgc2NyaXB0IHdoZW4gaXQgaXMgc3VwcG9ydGVkIGJ5IGEgS2FUZVggZm9udC5cblxufSAvLyBcImtcIiBpcyB0aGUgb25seSBkb3VibGUgc3RydWNrIGxvd2VyIGNhc2UgbGV0dGVyIGluIHRoZSBLYVRlWCBmb250cy5cblxuXG53aWRlQ2hhciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODM1LCAweERENUMpOyAvLyBrIGRvdWJsZSBzdHJ1Y2tcblxuZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIFwia1wiLCB3aWRlQ2hhcik7XG5kZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBcImtcIiwgd2lkZUNoYXIpOyAvLyBOZXh0LCBzb21lIHdpZGUgY2hhcmFjdGVyIG51bWVyYWxzXG5cbmZvciAodmFyIF9pNCA9IDA7IF9pNCA8IDEwOyBfaTQrKykge1xuICB2YXIgX2NoNCA9IF9pNC50b1N0cmluZygpO1xuXG4gIHdpZGVDaGFyID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEQ4MzUsIDB4REZDRSArIF9pNCk7IC8vIDAtOSBib2xkXG5cbiAgZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIF9jaDQsIHdpZGVDaGFyKTtcbiAgZGVmaW5lU3ltYm9sKHN5bWJvbHNfdGV4dCwgbWFpbiwgdGV4dG9yZCwgX2NoNCwgd2lkZUNoYXIpO1xuICB3aWRlQ2hhciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhEODM1LCAweERGRTIgKyBfaTQpOyAvLyAwLTkgc2FucyBzZXJpZlxuXG4gIGRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBtYXRob3JkLCBfY2g0LCB3aWRlQ2hhcik7XG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIF9jaDQsIHdpZGVDaGFyKTtcbiAgd2lkZUNoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RDgzNSwgMHhERkVDICsgX2k0KTsgLy8gMC05IGJvbGQgc2Fuc1xuXG4gIGRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBtYXRob3JkLCBfY2g0LCB3aWRlQ2hhcik7XG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIF9jaDQsIHdpZGVDaGFyKTtcbiAgd2lkZUNoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4RDgzNSwgMHhERkY2ICsgX2k0KTsgLy8gMC05IG1vbm9zcGFjZVxuXG4gIGRlZmluZVN5bWJvbChtYXRoLCBtYWluLCBtYXRob3JkLCBfY2g0LCB3aWRlQ2hhcik7XG4gIGRlZmluZVN5bWJvbChzeW1ib2xzX3RleHQsIG1haW4sIHRleHRvcmQsIF9jaDQsIHdpZGVDaGFyKTtcbn0gLy8gV2UgYWRkIHRoZXNlIExhdGluLTEgbGV0dGVycyBhcyBzeW1ib2xzIGZvciBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSxcbi8vIGJ1dCB0aGV5IGFyZSBub3QgYWN0dWFsbHkgaW4gdGhlIGZvbnQsIG5vciBhcmUgdGhleSBzdXBwb3J0ZWQgYnkgdGhlXG4vLyBVbmljb2RlIGFjY2VudCBtZWNoYW5pc20sIHNvIHRoZXkgZmFsbCBiYWNrIHRvIFRpbWVzIGZvbnQgYW5kIGxvb2sgdWdseS5cbi8vIFRPRE8oZWRlbWFpbmUpOiBGaXggdGhpcy5cblxuXG52YXIgZXh0cmFMYXRpbiA9IFwiXFx4RDBcXHhERVxceEZFXCI7XG5cbmZvciAodmFyIF9pNSA9IDA7IF9pNSA8IGV4dHJhTGF0aW4ubGVuZ3RoOyBfaTUrKykge1xuICB2YXIgX2NoNSA9IGV4dHJhTGF0aW4uY2hhckF0KF9pNSk7XG5cbiAgZGVmaW5lU3ltYm9sKG1hdGgsIG1haW4sIG1hdGhvcmQsIF9jaDUsIF9jaDUpO1xuICBkZWZpbmVTeW1ib2woc3ltYm9sc190ZXh0LCBtYWluLCB0ZXh0b3JkLCBfY2g1LCBfY2g1KTtcbn1cbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy93aWRlLWNoYXJhY3Rlci5qc1xuLyoqXG4gKiBUaGlzIGZpbGUgcHJvdmlkZXMgc3VwcG9ydCBmb3IgVW5pY29kZSByYW5nZSBVKzFENDAwIHRvIFUrMUQ3RkYsXG4gKiBNYXRoZW1hdGljYWwgQWxwaGFudW1lcmljIFN5bWJvbHMuXG4gKlxuICogRnVuY3Rpb24gd2lkZUNoYXJhY3RlckZvbnQgdGFrZXMgYSB3aWRlIGNoYXJhY3RlciBhcyBpbnB1dCBhbmQgcmV0dXJuc1xuICogdGhlIGZvbnQgaW5mb3JtYXRpb24gbmVjZXNzYXJ5IHRvIHJlbmRlciBpdCBwcm9wZXJseS5cbiAqL1xuXG4vKipcbiAqIERhdGEgYmVsb3cgaXMgZnJvbSBodHRwczovL3d3dy51bmljb2RlLm9yZy9jaGFydHMvUERGL1UxRDQwMC5wZGZcbiAqIFRoYXQgZG9jdW1lbnQgc29ydHMgY2hhcmFjdGVycyBpbnRvIGdyb3VwcyBieSBmb250IHR5cGUsIHNheSBib2xkIG9yIGl0YWxpYy5cbiAqXG4gKiBJbiB0aGUgYXJyYXlzIGJlbG93LCBlYWNoIHN1YmFycmF5IGNvbnNpc3RzIHRocmVlIGVsZW1lbnRzOlxuICogICAgICAqIFRoZSBDU1MgY2xhc3Mgb2YgdGhhdCBncm91cCB3aGVuIGluIG1hdGggbW9kZS5cbiAqICAgICAgKiBUaGUgQ1NTIGNsYXNzIG9mIHRoYXQgZ3JvdXAgd2hlbiBpbiB0ZXh0IG1vZGUuXG4gKiAgICAgICogVGhlIGZvbnQgbmFtZSwgc28gdGhhdCBLYVRlWCBjYW4gZ2V0IGZvbnQgbWV0cmljcy5cbiAqL1xuXG52YXIgd2lkZUxhdGluTGV0dGVyRGF0YSA9IFtbXCJtYXRoYmZcIiwgXCJ0ZXh0YmZcIiwgXCJNYWluLUJvbGRcIl0sIC8vIEEtWiBib2xkIHVwcmlnaHRcbltcIm1hdGhiZlwiLCBcInRleHRiZlwiLCBcIk1haW4tQm9sZFwiXSwgLy8gYS16IGJvbGQgdXByaWdodFxuW1wibWF0aG5vcm1hbFwiLCBcInRleHRpdFwiLCBcIk1hdGgtSXRhbGljXCJdLCAvLyBBLVogaXRhbGljXG5bXCJtYXRobm9ybWFsXCIsIFwidGV4dGl0XCIsIFwiTWF0aC1JdGFsaWNcIl0sIC8vIGEteiBpdGFsaWNcbltcImJvbGRzeW1ib2xcIiwgXCJib2xkc3ltYm9sXCIsIFwiTWFpbi1Cb2xkSXRhbGljXCJdLCAvLyBBLVogYm9sZCBpdGFsaWNcbltcImJvbGRzeW1ib2xcIiwgXCJib2xkc3ltYm9sXCIsIFwiTWFpbi1Cb2xkSXRhbGljXCJdLCAvLyBhLXogYm9sZCBpdGFsaWNcbi8vIE1hcCBmYW5jeSBBLVogbGV0dGVycyB0byBzY3JpcHQsIG5vdCBjYWxsaWdyYXBoaWMuXG4vLyBUaGlzIGFsaWducyB3aXRoIHVuaWNvZGUtbWF0aCBhbmQgbWF0aCBmb250cyAoZXhjZXB0IENhbWJyaWEgTWF0aCkuXG5bXCJtYXRoc2NyXCIsIFwidGV4dHNjclwiLCBcIlNjcmlwdC1SZWd1bGFyXCJdLCAvLyBBLVogc2NyaXB0XG5bXCJcIiwgXCJcIiwgXCJcIl0sIC8vIGEteiBzY3JpcHQuICBObyBmb250XG5bXCJcIiwgXCJcIiwgXCJcIl0sIC8vIEEtWiBib2xkIHNjcmlwdC4gTm8gZm9udFxuW1wiXCIsIFwiXCIsIFwiXCJdLCAvLyBhLXogYm9sZCBzY3JpcHQuIE5vIGZvbnRcbltcIm1hdGhmcmFrXCIsIFwidGV4dGZyYWtcIiwgXCJGcmFrdHVyLVJlZ3VsYXJcIl0sIC8vIEEtWiBGcmFrdHVyXG5bXCJtYXRoZnJha1wiLCBcInRleHRmcmFrXCIsIFwiRnJha3R1ci1SZWd1bGFyXCJdLCAvLyBhLXogRnJha3R1clxuW1wibWF0aGJiXCIsIFwidGV4dGJiXCIsIFwiQU1TLVJlZ3VsYXJcIl0sIC8vIEEtWiBkb3VibGUtc3RydWNrXG5bXCJtYXRoYmJcIiwgXCJ0ZXh0YmJcIiwgXCJBTVMtUmVndWxhclwiXSwgLy8gayBkb3VibGUtc3RydWNrXG5bXCJcIiwgXCJcIiwgXCJcIl0sIC8vIEEtWiBib2xkIEZyYWt0dXIgTm8gZm9udCBtZXRyaWNzXG5bXCJcIiwgXCJcIiwgXCJcIl0sIC8vIGEteiBib2xkIEZyYWt0dXIuICAgTm8gZm9udC5cbltcIm1hdGhzZlwiLCBcInRleHRzZlwiLCBcIlNhbnNTZXJpZi1SZWd1bGFyXCJdLCAvLyBBLVogc2Fucy1zZXJpZlxuW1wibWF0aHNmXCIsIFwidGV4dHNmXCIsIFwiU2Fuc1NlcmlmLVJlZ3VsYXJcIl0sIC8vIGEteiBzYW5zLXNlcmlmXG5bXCJtYXRoYm9sZHNmXCIsIFwidGV4dGJvbGRzZlwiLCBcIlNhbnNTZXJpZi1Cb2xkXCJdLCAvLyBBLVogYm9sZCBzYW5zLXNlcmlmXG5bXCJtYXRoYm9sZHNmXCIsIFwidGV4dGJvbGRzZlwiLCBcIlNhbnNTZXJpZi1Cb2xkXCJdLCAvLyBhLXogYm9sZCBzYW5zLXNlcmlmXG5bXCJtYXRoaXRzZlwiLCBcInRleHRpdHNmXCIsIFwiU2Fuc1NlcmlmLUl0YWxpY1wiXSwgLy8gQS1aIGl0YWxpYyBzYW5zLXNlcmlmXG5bXCJtYXRoaXRzZlwiLCBcInRleHRpdHNmXCIsIFwiU2Fuc1NlcmlmLUl0YWxpY1wiXSwgLy8gYS16IGl0YWxpYyBzYW5zLXNlcmlmXG5bXCJcIiwgXCJcIiwgXCJcIl0sIC8vIEEtWiBib2xkIGl0YWxpYyBzYW5zLiBObyBmb250XG5bXCJcIiwgXCJcIiwgXCJcIl0sIC8vIGEteiBib2xkIGl0YWxpYyBzYW5zLiBObyBmb250XG5bXCJtYXRodHRcIiwgXCJ0ZXh0dHRcIiwgXCJUeXBld3JpdGVyLVJlZ3VsYXJcIl0sIC8vIEEtWiBtb25vc3BhY2VcbltcIm1hdGh0dFwiLCBcInRleHR0dFwiLCBcIlR5cGV3cml0ZXItUmVndWxhclwiXSAvLyBhLXogbW9ub3NwYWNlXG5dO1xudmFyIHdpZGVOdW1lcmFsRGF0YSA9IFtbXCJtYXRoYmZcIiwgXCJ0ZXh0YmZcIiwgXCJNYWluLUJvbGRcIl0sIC8vIDAtOSBib2xkXG5bXCJcIiwgXCJcIiwgXCJcIl0sIC8vIDAtOSBkb3VibGUtc3RydWNrLiBObyBLYVRlWCBmb250LlxuW1wibWF0aHNmXCIsIFwidGV4dHNmXCIsIFwiU2Fuc1NlcmlmLVJlZ3VsYXJcIl0sIC8vIDAtOSBzYW5zLXNlcmlmXG5bXCJtYXRoYm9sZHNmXCIsIFwidGV4dGJvbGRzZlwiLCBcIlNhbnNTZXJpZi1Cb2xkXCJdLCAvLyAwLTkgYm9sZCBzYW5zLXNlcmlmXG5bXCJtYXRodHRcIiwgXCJ0ZXh0dHRcIiwgXCJUeXBld3JpdGVyLVJlZ3VsYXJcIl0gLy8gMC05IG1vbm9zcGFjZVxuXTtcbnZhciB3aWRlQ2hhcmFjdGVyRm9udCA9IGZ1bmN0aW9uIHdpZGVDaGFyYWN0ZXJGb250KHdpZGVDaGFyLCBtb2RlKSB7XG4gIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBjb2RlUG9pbnRBdCgpLiBTbyB3b3JrIHdpdGggdGhlIHN1cnJvZ2F0ZSBwYWlyLlxuICB2YXIgSCA9IHdpZGVDaGFyLmNoYXJDb2RlQXQoMCk7IC8vIGhpZ2ggc3Vycm9nYXRlXG5cbiAgdmFyIEwgPSB3aWRlQ2hhci5jaGFyQ29kZUF0KDEpOyAvLyBsb3cgc3Vycm9nYXRlXG5cbiAgdmFyIGNvZGVQb2ludCA9IChIIC0gMHhEODAwKSAqIDB4NDAwICsgKEwgLSAweERDMDApICsgMHgxMDAwMDtcbiAgdmFyIGogPSBtb2RlID09PSBcIm1hdGhcIiA/IDAgOiAxOyAvLyBjb2x1bW4gaW5kZXggZm9yIENTUyBjbGFzcy5cblxuICBpZiAoMHgxRDQwMCA8PSBjb2RlUG9pbnQgJiYgY29kZVBvaW50IDwgMHgxRDZBNCkge1xuICAgIC8vIHdpZGVMYXRpbkxldHRlckRhdGEgY29udGFpbnMgZXhhY3RseSAyNiBjaGFycyBvbiBlYWNoIHJvdy5cbiAgICAvLyBTbyB3ZSBjYW4gY2FsY3VsYXRlIHRoZSByZWxldmFudCByb3cuIE5vIHRyYXZlcnNlIG5lY2Vzc2FyeS5cbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoKGNvZGVQb2ludCAtIDB4MUQ0MDApIC8gMjYpO1xuICAgIHJldHVybiBbd2lkZUxhdGluTGV0dGVyRGF0YVtpXVsyXSwgd2lkZUxhdGluTGV0dGVyRGF0YVtpXVtqXV07XG4gIH0gZWxzZSBpZiAoMHgxRDdDRSA8PSBjb2RlUG9pbnQgJiYgY29kZVBvaW50IDw9IDB4MUQ3RkYpIHtcbiAgICAvLyBOdW1lcmFscywgdGVuIHBlciByb3cuXG4gICAgdmFyIF9pID0gTWF0aC5mbG9vcigoY29kZVBvaW50IC0gMHgxRDdDRSkgLyAxMCk7XG5cbiAgICByZXR1cm4gW3dpZGVOdW1lcmFsRGF0YVtfaV1bMl0sIHdpZGVOdW1lcmFsRGF0YVtfaV1bal1dO1xuICB9IGVsc2UgaWYgKGNvZGVQb2ludCA9PT0gMHgxRDZBNSB8fCBjb2RlUG9pbnQgPT09IDB4MUQ2QTYpIHtcbiAgICAvLyBkb3RsZXNzIGkgb3IgalxuICAgIHJldHVybiBbd2lkZUxhdGluTGV0dGVyRGF0YVswXVsyXSwgd2lkZUxhdGluTGV0dGVyRGF0YVswXVtqXV07XG4gIH0gZWxzZSBpZiAoMHgxRDZBNiA8IGNvZGVQb2ludCAmJiBjb2RlUG9pbnQgPCAweDFEN0NFKSB7XG4gICAgLy8gR3JlZWsgbGV0dGVycy4gTm90IHN1cHBvcnRlZCwgeWV0LlxuICAgIHJldHVybiBbXCJcIiwgXCJcIl07XG4gIH0gZWxzZSB7XG4gICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCBhbnkgd2lkZSBjaGFyYWN0ZXJzIG91dHNpZGUgMUQ0MDDigJMxRDdGRi5cbiAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJVbnN1cHBvcnRlZCBjaGFyYWN0ZXI6IFwiICsgd2lkZUNoYXIpO1xuICB9XG59O1xuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL09wdGlvbnMuanNcbi8qKlxuICogVGhpcyBmaWxlIGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvcHRpb25zIHRoYXQgdGhlIFBhcnNlciBjYXJyaWVzXG4gKiBhcm91bmQgd2l0aCBpdCB3aGlsZSBwYXJzaW5nLiBEYXRhIGlzIGhlbGQgaW4gYW4gYE9wdGlvbnNgIG9iamVjdCwgYW5kIHdoZW5cbiAqIHJlY3Vyc2luZywgYSBuZXcgYE9wdGlvbnNgIG9iamVjdCBjYW4gYmUgY3JlYXRlZCB3aXRoIHRoZSBgLndpdGgqYCBhbmRcbiAqIGAucmVzZXRgIGZ1bmN0aW9ucy5cbiAqL1xuXG52YXIgc2l6ZVN0eWxlTWFwID0gWy8vIEVhY2ggZWxlbWVudCBjb250YWlucyBbdGV4dHNpemUsIHNjcmlwdHNpemUsIHNjcmlwdHNjcmlwdHNpemVdLlxuLy8gVGhlIHNpemUgbWFwcGluZ3MgYXJlIHRha2VuIGZyb20gVGVYIHdpdGggXFxub3JtYWxzaXplPTEwcHQuXG5bMSwgMSwgMV0sIC8vIHNpemUxOiBbNSwgNSwgNV0gICAgICAgICAgICAgIFxcdGlueVxuWzIsIDEsIDFdLCAvLyBzaXplMjogWzYsIDUsIDVdXG5bMywgMSwgMV0sIC8vIHNpemUzOiBbNywgNSwgNV0gICAgICAgICAgICAgIFxcc2NyaXB0c2l6ZVxuWzQsIDIsIDFdLCAvLyBzaXplNDogWzgsIDYsIDVdICAgICAgICAgICAgICBcXGZvb3Rub3Rlc2l6ZVxuWzUsIDIsIDFdLCAvLyBzaXplNTogWzksIDYsIDVdICAgICAgICAgICAgICBcXHNtYWxsXG5bNiwgMywgMV0sIC8vIHNpemU2OiBbMTAsIDcsIDVdICAgICAgICAgICAgIFxcbm9ybWFsc2l6ZVxuWzcsIDQsIDJdLCAvLyBzaXplNzogWzEyLCA4LCA2XSAgICAgICAgICAgICBcXGxhcmdlXG5bOCwgNiwgM10sIC8vIHNpemU4OiBbMTQuNCwgMTAsIDddICAgICAgICAgIFxcTGFyZ2Vcbls5LCA3LCA2XSwgLy8gc2l6ZTk6IFsxNy4yOCwgMTIsIDEwXSAgICAgICAgXFxMQVJHRVxuWzEwLCA4LCA3XSwgLy8gc2l6ZTEwOiBbMjAuNzQsIDE0LjQsIDEyXSAgICAgXFxodWdlXG5bMTEsIDEwLCA5XSAvLyBzaXplMTE6IFsyNC44OCwgMjAuNzQsIDE3LjI4XSBcXEhVR0Vcbl07XG52YXIgc2l6ZU11bHRpcGxpZXJzID0gWy8vIGZvbnRNZXRyaWNzLmpzOmdldEdsb2JhbE1ldHJpY3MgYWxzbyB1c2VzIHNpemUgaW5kZXhlcywgc28gaWZcbi8vIHlvdSBjaGFuZ2Ugc2l6ZSBpbmRleGVzLCBjaGFuZ2UgdGhhdCBmdW5jdGlvbi5cbjAuNSwgMC42LCAwLjcsIDAuOCwgMC45LCAxLjAsIDEuMiwgMS40NCwgMS43MjgsIDIuMDc0LCAyLjQ4OF07XG5cbnZhciBzaXplQXRTdHlsZSA9IGZ1bmN0aW9uIHNpemVBdFN0eWxlKHNpemUsIHN0eWxlKSB7XG4gIHJldHVybiBzdHlsZS5zaXplIDwgMiA/IHNpemUgOiBzaXplU3R5bGVNYXBbc2l6ZSAtIDFdW3N0eWxlLnNpemUgLSAxXTtcbn07IC8vIEluIHRoZXNlIHR5cGVzLCBcIlwiIChlbXB0eSBzdHJpbmcpIG1lYW5zIFwibm8gY2hhbmdlXCIuXG5cblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBtYWluIG9wdGlvbnMgY2xhc3MuIEl0IGNvbnRhaW5zIHRoZSBjdXJyZW50IHN0eWxlLCBzaXplLCBjb2xvcixcbiAqIGFuZCBmb250LlxuICpcbiAqIE9wdGlvbnMgb2JqZWN0cyBzaG91bGQgbm90IGJlIG1vZGlmaWVkLiBUbyBjcmVhdGUgYSBuZXcgT3B0aW9ucyB3aXRoXG4gKiBkaWZmZXJlbnQgcHJvcGVydGllcywgY2FsbCBhIGAuaGF2aW5nKmAgbWV0aG9kLlxuICovXG52YXIgT3B0aW9ucyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8vIEEgZm9udCBmYW1pbHkgYXBwbGllcyB0byBhIGdyb3VwIG9mIGZvbnRzIChpLmUuIFNhbnNTZXJpZiksIHdoaWxlIGEgZm9udFxuICAvLyByZXByZXNlbnRzIGEgc3BlY2lmaWMgZm9udCAoaS5lLiBTYW5zU2VyaWYgQm9sZCkuXG4gIC8vIFNlZTogaHR0cHM6Ly90ZXguc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzIyMzUwL2RpZmZlcmVuY2UtYmV0d2Vlbi10ZXh0cm0tYW5kLW1hdGhybVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBzaXplIGluZGV4LlxuICAgKi9cbiAgZnVuY3Rpb24gT3B0aW9ucyhkYXRhKSB7XG4gICAgdGhpcy5zdHlsZSA9IHZvaWQgMDtcbiAgICB0aGlzLmNvbG9yID0gdm9pZCAwO1xuICAgIHRoaXMuc2l6ZSA9IHZvaWQgMDtcbiAgICB0aGlzLnRleHRTaXplID0gdm9pZCAwO1xuICAgIHRoaXMucGhhbnRvbSA9IHZvaWQgMDtcbiAgICB0aGlzLmZvbnQgPSB2b2lkIDA7XG4gICAgdGhpcy5mb250RmFtaWx5ID0gdm9pZCAwO1xuICAgIHRoaXMuZm9udFdlaWdodCA9IHZvaWQgMDtcbiAgICB0aGlzLmZvbnRTaGFwZSA9IHZvaWQgMDtcbiAgICB0aGlzLnNpemVNdWx0aXBsaWVyID0gdm9pZCAwO1xuICAgIHRoaXMubWF4U2l6ZSA9IHZvaWQgMDtcbiAgICB0aGlzLm1pblJ1bGVUaGlja25lc3MgPSB2b2lkIDA7XG4gICAgdGhpcy5fZm9udE1ldHJpY3MgPSB2b2lkIDA7XG4gICAgdGhpcy5zdHlsZSA9IGRhdGEuc3R5bGU7XG4gICAgdGhpcy5jb2xvciA9IGRhdGEuY29sb3I7XG4gICAgdGhpcy5zaXplID0gZGF0YS5zaXplIHx8IE9wdGlvbnMuQkFTRVNJWkU7XG4gICAgdGhpcy50ZXh0U2l6ZSA9IGRhdGEudGV4dFNpemUgfHwgdGhpcy5zaXplO1xuICAgIHRoaXMucGhhbnRvbSA9ICEhZGF0YS5waGFudG9tO1xuICAgIHRoaXMuZm9udCA9IGRhdGEuZm9udCB8fCBcIlwiO1xuICAgIHRoaXMuZm9udEZhbWlseSA9IGRhdGEuZm9udEZhbWlseSB8fCBcIlwiO1xuICAgIHRoaXMuZm9udFdlaWdodCA9IGRhdGEuZm9udFdlaWdodCB8fCAnJztcbiAgICB0aGlzLmZvbnRTaGFwZSA9IGRhdGEuZm9udFNoYXBlIHx8ICcnO1xuICAgIHRoaXMuc2l6ZU11bHRpcGxpZXIgPSBzaXplTXVsdGlwbGllcnNbdGhpcy5zaXplIC0gMV07XG4gICAgdGhpcy5tYXhTaXplID0gZGF0YS5tYXhTaXplO1xuICAgIHRoaXMubWluUnVsZVRoaWNrbmVzcyA9IGRhdGEubWluUnVsZVRoaWNrbmVzcztcbiAgICB0aGlzLl9mb250TWV0cmljcyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBvcHRpb25zIG9iamVjdCB3aXRoIHRoZSBzYW1lIHByb3BlcnRpZXMgYXMgXCJ0aGlzXCIuICBQcm9wZXJ0aWVzXG4gICAqIGZyb20gXCJleHRlbnNpb25cIiB3aWxsIGJlIGNvcGllZCB0byB0aGUgbmV3IG9wdGlvbnMgb2JqZWN0LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBPcHRpb25zLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZXh0ZW5kID0gZnVuY3Rpb24gZXh0ZW5kKGV4dGVuc2lvbikge1xuICAgIHZhciBkYXRhID0ge1xuICAgICAgc3R5bGU6IHRoaXMuc3R5bGUsXG4gICAgICBzaXplOiB0aGlzLnNpemUsXG4gICAgICB0ZXh0U2l6ZTogdGhpcy50ZXh0U2l6ZSxcbiAgICAgIGNvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgcGhhbnRvbTogdGhpcy5waGFudG9tLFxuICAgICAgZm9udDogdGhpcy5mb250LFxuICAgICAgZm9udEZhbWlseTogdGhpcy5mb250RmFtaWx5LFxuICAgICAgZm9udFdlaWdodDogdGhpcy5mb250V2VpZ2h0LFxuICAgICAgZm9udFNoYXBlOiB0aGlzLmZvbnRTaGFwZSxcbiAgICAgIG1heFNpemU6IHRoaXMubWF4U2l6ZSxcbiAgICAgIG1pblJ1bGVUaGlja25lc3M6IHRoaXMubWluUnVsZVRoaWNrbmVzc1xuICAgIH07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gZXh0ZW5zaW9uKSB7XG4gICAgICBpZiAoZXh0ZW5zaW9uLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgZGF0YVtrZXldID0gZXh0ZW5zaW9uW2tleV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBPcHRpb25zKGRhdGEpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gb3B0aW9ucyBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gc3R5bGUuIElmIGB0aGlzLnN0eWxlID09PSBzdHlsZWAsXG4gICAqIHJldHVybnMgYHRoaXNgLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYXZpbmdTdHlsZSA9IGZ1bmN0aW9uIGhhdmluZ1N0eWxlKHN0eWxlKSB7XG4gICAgaWYgKHRoaXMuc3R5bGUgPT09IHN0eWxlKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5kKHtcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICBzaXplOiBzaXplQXRTdHlsZSh0aGlzLnRleHRTaXplLCBzdHlsZSlcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFuIG9wdGlvbnMgb2JqZWN0IHdpdGggYSBjcmFtcGVkIHZlcnNpb24gb2YgdGhlIGN1cnJlbnQgc3R5bGUuIElmXG4gICAqIHRoZSBjdXJyZW50IHN0eWxlIGlzIGNyYW1wZWQsIHJldHVybnMgYHRoaXNgLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYXZpbmdDcmFtcGVkU3R5bGUgPSBmdW5jdGlvbiBoYXZpbmdDcmFtcGVkU3R5bGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGF2aW5nU3R5bGUodGhpcy5zdHlsZS5jcmFtcCgpKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIGFuIG9wdGlvbnMgb2JqZWN0IHdpdGggdGhlIGdpdmVuIHNpemUgYW5kIGluIGF0IGxlYXN0IGBcXHRleHRzdHlsZWAuXG4gICAqIFJldHVybnMgYHRoaXNgIGlmIGFwcHJvcHJpYXRlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYXZpbmdTaXplID0gZnVuY3Rpb24gaGF2aW5nU2l6ZShzaXplKSB7XG4gICAgaWYgKHRoaXMuc2l6ZSA9PT0gc2l6ZSAmJiB0aGlzLnRleHRTaXplID09PSBzaXplKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5kKHtcbiAgICAgICAgc3R5bGU6IHRoaXMuc3R5bGUudGV4dCgpLFxuICAgICAgICBzaXplOiBzaXplLFxuICAgICAgICB0ZXh0U2l6ZTogc2l6ZSxcbiAgICAgICAgc2l6ZU11bHRpcGxpZXI6IHNpemVNdWx0aXBsaWVyc1tzaXplIC0gMV1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogTGlrZSBgdGhpcy5oYXZpbmdTaXplKEJBU0VTSVpFKS5oYXZpbmdTdHlsZShzdHlsZSlgLiBJZiBgc3R5bGVgIGlzIG9taXR0ZWQsXG4gICAqIGNoYW5nZXMgdG8gYXQgbGVhc3QgYFxcdGV4dHN0eWxlYC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGF2aW5nQmFzZVN0eWxlID0gZnVuY3Rpb24gaGF2aW5nQmFzZVN0eWxlKHN0eWxlKSB7XG4gICAgc3R5bGUgPSBzdHlsZSB8fCB0aGlzLnN0eWxlLnRleHQoKTtcbiAgICB2YXIgd2FudFNpemUgPSBzaXplQXRTdHlsZShPcHRpb25zLkJBU0VTSVpFLCBzdHlsZSk7XG5cbiAgICBpZiAodGhpcy5zaXplID09PSB3YW50U2l6ZSAmJiB0aGlzLnRleHRTaXplID09PSBPcHRpb25zLkJBU0VTSVpFICYmIHRoaXMuc3R5bGUgPT09IHN0eWxlKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5kKHtcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICBzaXplOiB3YW50U2l6ZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIGVmZmVjdCBvZiBzaXppbmcgY2hhbmdlcyBzdWNoIGFzIFxcSHVnZS5cbiAgICogS2VlcCB0aGUgZWZmZWN0IG9mIHRoZSBjdXJyZW50IHN0eWxlLCBzdWNoIGFzIFxcc2NyaXB0c3R5bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhdmluZ0Jhc2VTaXppbmcgPSBmdW5jdGlvbiBoYXZpbmdCYXNlU2l6aW5nKCkge1xuICAgIHZhciBzaXplO1xuXG4gICAgc3dpdGNoICh0aGlzLnN0eWxlLmlkKSB7XG4gICAgICBjYXNlIDQ6XG4gICAgICBjYXNlIDU6XG4gICAgICAgIHNpemUgPSAzOyAvLyBub3JtYWxzaXplIGluIHNjcmlwdHN0eWxlXG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgNjpcbiAgICAgIGNhc2UgNzpcbiAgICAgICAgc2l6ZSA9IDE7IC8vIG5vcm1hbHNpemUgaW4gc2NyaXB0c2NyaXB0c3R5bGVcblxuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgc2l6ZSA9IDY7XG4gICAgICAvLyBub3JtYWxzaXplIGluIHRleHRzdHlsZSBvciBkaXNwbGF5c3R5bGVcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5leHRlbmQoe1xuICAgICAgc3R5bGU6IHRoaXMuc3R5bGUudGV4dCgpLFxuICAgICAgc2l6ZTogc2l6ZVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgb3B0aW9ucyBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gY29sb3IuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLndpdGhDb2xvciA9IGZ1bmN0aW9uIHdpdGhDb2xvcihjb2xvcikge1xuICAgIHJldHVybiB0aGlzLmV4dGVuZCh7XG4gICAgICBjb2xvcjogY29sb3JcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IG9wdGlvbnMgb2JqZWN0IHdpdGggXCJwaGFudG9tXCIgc2V0IHRvIHRydWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLndpdGhQaGFudG9tID0gZnVuY3Rpb24gd2l0aFBoYW50b20oKSB7XG4gICAgcmV0dXJuIHRoaXMuZXh0ZW5kKHtcbiAgICAgIHBoYW50b206IHRydWVcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBvcHRpb25zIG9iamVjdCB3aXRoIHRoZSBnaXZlbiBtYXRoIGZvbnQgb3Igb2xkIHRleHQgZm9udC5cbiAgICogQHR5cGUge1t0eXBlXX1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ud2l0aEZvbnQgPSBmdW5jdGlvbiB3aXRoRm9udChmb250KSB7XG4gICAgcmV0dXJuIHRoaXMuZXh0ZW5kKHtcbiAgICAgIGZvbnQ6IGZvbnRcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IG9wdGlvbnMgb2JqZWN0cyB3aXRoIHRoZSBnaXZlbiBmb250RmFtaWx5LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by53aXRoVGV4dEZvbnRGYW1pbHkgPSBmdW5jdGlvbiB3aXRoVGV4dEZvbnRGYW1pbHkoZm9udEZhbWlseSkge1xuICAgIHJldHVybiB0aGlzLmV4dGVuZCh7XG4gICAgICBmb250RmFtaWx5OiBmb250RmFtaWx5LFxuICAgICAgZm9udDogXCJcIlxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IG9wdGlvbnMgb2JqZWN0IHdpdGggdGhlIGdpdmVuIGZvbnQgd2VpZ2h0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLndpdGhUZXh0Rm9udFdlaWdodCA9IGZ1bmN0aW9uIHdpdGhUZXh0Rm9udFdlaWdodChmb250V2VpZ2h0KSB7XG4gICAgcmV0dXJuIHRoaXMuZXh0ZW5kKHtcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHQsXG4gICAgICBmb250OiBcIlwiXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgb3B0aW9ucyBvYmplY3Qgd2l0aCB0aGUgZ2l2ZW4gZm9udCB3ZWlnaHRcbiAgICovXG4gIDtcblxuICBfcHJvdG8ud2l0aFRleHRGb250U2hhcGUgPSBmdW5jdGlvbiB3aXRoVGV4dEZvbnRTaGFwZShmb250U2hhcGUpIHtcbiAgICByZXR1cm4gdGhpcy5leHRlbmQoe1xuICAgICAgZm9udFNoYXBlOiBmb250U2hhcGUsXG4gICAgICBmb250OiBcIlwiXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgQ1NTIHNpemluZyBjbGFzc2VzIHJlcXVpcmVkIHRvIHN3aXRjaCBmcm9tIGVuY2xvc2luZyBvcHRpb25zXG4gICAqIGBvbGRPcHRpb25zYCB0byBgdGhpc2AuIFJldHVybnMgYW4gYXJyYXkgb2YgY2xhc3Nlcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc2l6aW5nQ2xhc3NlcyA9IGZ1bmN0aW9uIHNpemluZ0NsYXNzZXMob2xkT3B0aW9ucykge1xuICAgIGlmIChvbGRPcHRpb25zLnNpemUgIT09IHRoaXMuc2l6ZSkge1xuICAgICAgcmV0dXJuIFtcInNpemluZ1wiLCBcInJlc2V0LXNpemVcIiArIG9sZE9wdGlvbnMuc2l6ZSwgXCJzaXplXCIgKyB0aGlzLnNpemVdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIENTUyBzaXppbmcgY2xhc3NlcyByZXF1aXJlZCB0byBzd2l0Y2ggdG8gdGhlIGJhc2Ugc2l6ZS4gTGlrZVxuICAgKiBgdGhpcy5oYXZpbmdTaXplKEJBU0VTSVpFKS5zaXppbmdDbGFzc2VzKHRoaXMpYC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYmFzZVNpemluZ0NsYXNzZXMgPSBmdW5jdGlvbiBiYXNlU2l6aW5nQ2xhc3NlcygpIHtcbiAgICBpZiAodGhpcy5zaXplICE9PSBPcHRpb25zLkJBU0VTSVpFKSB7XG4gICAgICByZXR1cm4gW1wic2l6aW5nXCIsIFwicmVzZXQtc2l6ZVwiICsgdGhpcy5zaXplLCBcInNpemVcIiArIE9wdGlvbnMuQkFTRVNJWkVdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGZvbnQgbWV0cmljcyBmb3IgdGhpcyBzaXplLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5mb250TWV0cmljcyA9IGZ1bmN0aW9uIGZvbnRNZXRyaWNzKCkge1xuICAgIGlmICghdGhpcy5fZm9udE1ldHJpY3MpIHtcbiAgICAgIHRoaXMuX2ZvbnRNZXRyaWNzID0gZ2V0R2xvYmFsTWV0cmljcyh0aGlzLnNpemUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9mb250TWV0cmljcztcbiAgfVxuICAvKipcbiAgICogR2V0cyB0aGUgQ1NTIGNvbG9yIG9mIHRoZSBjdXJyZW50IG9wdGlvbnMgb2JqZWN0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldENvbG9yID0gZnVuY3Rpb24gZ2V0Q29sb3IoKSB7XG4gICAgaWYgKHRoaXMucGhhbnRvbSkge1xuICAgICAgcmV0dXJuIFwidHJhbnNwYXJlbnRcIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuY29sb3I7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBPcHRpb25zO1xufSgpO1xuXG5PcHRpb25zLkJBU0VTSVpFID0gNjtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gdmFyIHNyY19PcHRpb25zID0gKE9wdGlvbnMpO1xuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3VuaXRzLmpzXG4vKipcbiAqIFRoaXMgZmlsZSBkb2VzIGNvbnZlcnNpb24gYmV0d2VlbiB1bml0cy4gIEluIHBhcnRpY3VsYXIsIGl0IHByb3ZpZGVzXG4gKiBjYWxjdWxhdGVTaXplIHRvIGNvbnZlcnQgb3RoZXIgdW5pdHMgaW50byBlbXMuXG4gKi9cblxuIC8vIFRoaXMgdGFibGUgZ2l2ZXMgdGhlIG51bWJlciBvZiBUZVggcHRzIGluIG9uZSBvZiBlYWNoICphYnNvbHV0ZSogVGVYIHVuaXQuXG4vLyBUaHVzLCBtdWx0aXBseWluZyBhIGxlbmd0aCBieSB0aGlzIG51bWJlciBjb252ZXJ0cyB0aGUgbGVuZ3RoIGZyb20gdW5pdHNcbi8vIGludG8gcHRzLiAgRGl2aWRpbmcgdGhlIHJlc3VsdCBieSBwdFBlckVtIGdpdmVzIHRoZSBudW1iZXIgb2YgZW1zXG4vLyAqYXNzdW1pbmcqIGEgZm9udCBzaXplIG9mIHB0UGVyRW0gKG5vcm1hbCBzaXplLCBub3JtYWwgc3R5bGUpLlxuXG52YXIgcHRQZXJVbml0ID0ge1xuICAvLyBodHRwczovL2VuLndpa2lib29rcy5vcmcvd2lraS9MYVRlWC9MZW5ndGhzIGFuZFxuICAvLyBodHRwczovL3RleC5zdGFja2V4Y2hhbmdlLmNvbS9hLzgyNjNcbiAgXCJwdFwiOiAxLFxuICAvLyBUZVggcG9pbnRcbiAgXCJtbVwiOiA3MjI3IC8gMjU0MCxcbiAgLy8gbWlsbGltZXRlclxuICBcImNtXCI6IDcyMjcgLyAyNTQsXG4gIC8vIGNlbnRpbWV0ZXJcbiAgXCJpblwiOiA3Mi4yNyxcbiAgLy8gaW5jaFxuICBcImJwXCI6IDgwMyAvIDgwMCxcbiAgLy8gYmlnIChQb3N0U2NyaXB0KSBwb2ludHNcbiAgXCJwY1wiOiAxMixcbiAgLy8gcGljYVxuICBcImRkXCI6IDEyMzggLyAxMTU3LFxuICAvLyBkaWRvdFxuICBcImNjXCI6IDE0ODU2IC8gMTE1NyxcbiAgLy8gY2ljZXJvICgxMiBkaWRvdClcbiAgXCJuZFwiOiA2ODUgLyA2NDIsXG4gIC8vIG5ldyBkaWRvdFxuICBcIm5jXCI6IDEzNzAgLyAxMDcsXG4gIC8vIG5ldyBjaWNlcm8gKDEyIG5ldyBkaWRvdClcbiAgXCJzcFwiOiAxIC8gNjU1MzYsXG4gIC8vIHNjYWxlZCBwb2ludCAoVGVYJ3MgaW50ZXJuYWwgc21hbGxlc3QgdW5pdClcbiAgLy8gaHR0cHM6Ly90ZXguc3RhY2tleGNoYW5nZS5jb20vYS80MTM3MVxuICBcInB4XCI6IDgwMyAvIDgwMCAvLyBcXHBkZnB4ZGltZW4gZGVmYXVsdHMgdG8gMSBicCBpbiBwZGZUZVggYW5kIEx1YVRlWFxuXG59OyAvLyBEaWN0aW9uYXJ5IG9mIHJlbGF0aXZlIHVuaXRzLCBmb3IgZmFzdCB2YWxpZGl0eSB0ZXN0aW5nLlxuXG52YXIgcmVsYXRpdmVVbml0ID0ge1xuICBcImV4XCI6IHRydWUsXG4gIFwiZW1cIjogdHJ1ZSxcbiAgXCJtdVwiOiB0cnVlXG59O1xuXG4vKipcbiAqIERldGVybWluZSB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgdW5pdCAoZWl0aGVyIGEgc3RyaW5nIGRlZmluaW5nIHRoZSB1bml0XG4gKiBvciBhIFwic2l6ZVwiIHBhcnNlIG5vZGUgY29udGFpbmluZyBhIHVuaXQgZmllbGQpIGlzIHZhbGlkLlxuICovXG52YXIgdmFsaWRVbml0ID0gZnVuY3Rpb24gdmFsaWRVbml0KHVuaXQpIHtcbiAgaWYgKHR5cGVvZiB1bml0ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdW5pdCA9IHVuaXQudW5pdDtcbiAgfVxuXG4gIHJldHVybiB1bml0IGluIHB0UGVyVW5pdCB8fCB1bml0IGluIHJlbGF0aXZlVW5pdCB8fCB1bml0ID09PSBcImV4XCI7XG59O1xuLypcbiAqIENvbnZlcnQgYSBcInNpemVcIiBwYXJzZSBub2RlICh3aXRoIG51bWVyaWMgXCJudW1iZXJcIiBhbmQgc3RyaW5nIFwidW5pdFwiIGZpZWxkcyxcbiAqIGFzIHBhcnNlZCBieSBmdW5jdGlvbnMuanMgYXJnVHlwZSBcInNpemVcIikgaW50byBhIENTUyBlbSB2YWx1ZSBmb3IgdGhlXG4gKiBjdXJyZW50IHN0eWxlL3NjYWxlLiAgYG9wdGlvbnNgIGdpdmVzIHRoZSBjdXJyZW50IG9wdGlvbnMuXG4gKi9cblxudmFyIGNhbGN1bGF0ZVNpemUgPSBmdW5jdGlvbiBjYWxjdWxhdGVTaXplKHNpemVWYWx1ZSwgb3B0aW9ucykge1xuICB2YXIgc2NhbGU7XG5cbiAgaWYgKHNpemVWYWx1ZS51bml0IGluIHB0UGVyVW5pdCkge1xuICAgIC8vIEFic29sdXRlIHVuaXRzXG4gICAgc2NhbGUgPSBwdFBlclVuaXRbc2l6ZVZhbHVlLnVuaXRdIC8vIENvbnZlcnQgdW5pdCB0byBwdFxuICAgIC8gb3B0aW9ucy5mb250TWV0cmljcygpLnB0UGVyRW0gLy8gQ29udmVydCBwdCB0byBDU1MgZW1cbiAgICAvIG9wdGlvbnMuc2l6ZU11bHRpcGxpZXI7IC8vIFVuc2NhbGUgdG8gbWFrZSBhYnNvbHV0ZSB1bml0c1xuICB9IGVsc2UgaWYgKHNpemVWYWx1ZS51bml0ID09PSBcIm11XCIpIHtcbiAgICAvLyBgbXVgIHVuaXRzIHNjYWxlIHdpdGggc2NyaXB0c3R5bGUvc2NyaXB0c2NyaXB0c3R5bGUuXG4gICAgc2NhbGUgPSBvcHRpb25zLmZvbnRNZXRyaWNzKCkuY3NzRW1QZXJNdTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPdGhlciByZWxhdGl2ZSB1bml0cyBhbHdheXMgcmVmZXIgdG8gdGhlICp0ZXh0c3R5bGUqIGZvbnRcbiAgICAvLyBpbiB0aGUgY3VycmVudCBzaXplLlxuICAgIHZhciB1bml0T3B0aW9ucztcblxuICAgIGlmIChvcHRpb25zLnN0eWxlLmlzVGlnaHQoKSkge1xuICAgICAgLy8gaXNUaWdodCgpIG1lYW5zIGN1cnJlbnQgc3R5bGUgaXMgc2NyaXB0L3NjcmlwdHNjcmlwdC5cbiAgICAgIHVuaXRPcHRpb25zID0gb3B0aW9ucy5oYXZpbmdTdHlsZShvcHRpb25zLnN0eWxlLnRleHQoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVuaXRPcHRpb25zID0gb3B0aW9ucztcbiAgICB9IC8vIFRPRE86IEluIFRlWCB0aGVzZSB1bml0cyBhcmUgcmVsYXRpdmUgdG8gdGhlIHF1YWQgb2YgdGhlIGN1cnJlbnRcbiAgICAvLyAqdGV4dCogZm9udCwgZS5nLiBjbXIxMC4gS2FUZVggaW5zdGVhZCB1c2VzIHZhbHVlcyBmcm9tIHRoZVxuICAgIC8vIGNvbXBhcmFibHktc2l6ZWQgKkNvbXB1dGVyIE1vZGVybiBzeW1ib2wqIGZvbnQuIEF0IDEwcHQsIHRoZXNlXG4gICAgLy8gbWF0Y2guIEF0IDdwdCBhbmQgNXB0LCB0aGV5IGRpZmZlcjogY21yNz0xLjEzODg5NCwgY21zeTc9MS4xNzA2NDE7XG4gICAgLy8gY21yNT0xLjM2MTEzMywgY21zeTU9MS40NzIyNDEuIENvbnNpZGVyICRcXHNjcmlwdHNpemUgYVxca2VybjFlbWIkLlxuICAgIC8vIFRlWCBcXHNob3dsaXN0cyBzaG93cyBhIGtlcm4gb2YgMS4xMzg4OSAqIGZvbnRzaXplO1xuICAgIC8vIEthVGVYIHNob3dzIGEga2VybiBvZiAxLjE3MSAqIGZvbnRzaXplLlxuXG5cbiAgICBpZiAoc2l6ZVZhbHVlLnVuaXQgPT09IFwiZXhcIikge1xuICAgICAgc2NhbGUgPSB1bml0T3B0aW9ucy5mb250TWV0cmljcygpLnhIZWlnaHQ7XG4gICAgfSBlbHNlIGlmIChzaXplVmFsdWUudW5pdCA9PT0gXCJlbVwiKSB7XG4gICAgICBzY2FsZSA9IHVuaXRPcHRpb25zLmZvbnRNZXRyaWNzKCkucXVhZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiSW52YWxpZCB1bml0OiAnXCIgKyBzaXplVmFsdWUudW5pdCArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICBpZiAodW5pdE9wdGlvbnMgIT09IG9wdGlvbnMpIHtcbiAgICAgIHNjYWxlICo9IHVuaXRPcHRpb25zLnNpemVNdWx0aXBsaWVyIC8gb3B0aW9ucy5zaXplTXVsdGlwbGllcjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gTWF0aC5taW4oc2l6ZVZhbHVlLm51bWJlciAqIHNjYWxlLCBvcHRpb25zLm1heFNpemUpO1xufTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9idWlsZENvbW1vbi5qc1xuLyogZXNsaW50IG5vLWNvbnNvbGU6MCAqL1xuXG4vKipcbiAqIFRoaXMgbW9kdWxlIGNvbnRhaW5zIGdlbmVyYWwgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgZm9yIGJ1aWxkaW5nXG4gKiBkaWZmZXJlbnQga2luZHMgb2YgZG9tVHJlZSBub2RlcyBpbiBhIGNvbnNpc3RlbnQgbWFubmVyLlxuICovXG5cblxuXG5cblxuXG5cbi8qKlxuICogTG9va3MgdXAgdGhlIGdpdmVuIHN5bWJvbCBpbiBmb250TWV0cmljcywgYWZ0ZXIgYXBwbHlpbmcgYW55IHN5bWJvbFxuICogcmVwbGFjZW1lbnRzIGRlZmluZWQgaW4gc3ltYm9sLmpzXG4gKi9cbnZhciBsb29rdXBTeW1ib2wgPSBmdW5jdGlvbiBsb29rdXBTeW1ib2wodmFsdWUsIC8vIFRPRE8oIzk2Myk6IFVzZSBhIHVuaW9uIHR5cGUgZm9yIHRoaXMuXG5mb250TmFtZSwgbW9kZSkge1xuICAvLyBSZXBsYWNlIHRoZSB2YWx1ZSB3aXRoIGl0cyByZXBsYWNlZCB2YWx1ZSBmcm9tIHN5bWJvbC5qc1xuICBpZiAoc3JjX3N5bWJvbHNbbW9kZV1bdmFsdWVdICYmIHNyY19zeW1ib2xzW21vZGVdW3ZhbHVlXS5yZXBsYWNlKSB7XG4gICAgdmFsdWUgPSBzcmNfc3ltYm9sc1ttb2RlXVt2YWx1ZV0ucmVwbGFjZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIG1ldHJpY3M6IGdldENoYXJhY3Rlck1ldHJpY3ModmFsdWUsIGZvbnROYW1lLCBtb2RlKVxuICB9O1xufTtcbi8qKlxuICogTWFrZXMgYSBzeW1ib2xOb2RlIGFmdGVyIHRyYW5zbGF0aW9uIHZpYSB0aGUgbGlzdCBvZiBzeW1ib2xzIGluIHN5bWJvbHMuanMuXG4gKiBDb3JyZWN0bHkgcHVsbHMgb3V0IG1ldHJpY3MgZm9yIHRoZSBjaGFyYWN0ZXIsIGFuZCBvcHRpb25hbGx5IHRha2VzIGEgbGlzdCBvZlxuICogY2xhc3NlcyB0byBiZSBhdHRhY2hlZCB0byB0aGUgbm9kZS5cbiAqXG4gKiBUT0RPOiBtYWtlIGFyZ3VtZW50IG9yZGVyIGNsb3NlciB0byBtYWtlU3BhblxuICogVE9ETzogYWRkIGEgc2VwYXJhdGUgYXJndW1lbnQgZm9yIG1hdGggY2xhc3MgKGUuZy4gYG1vcGAsIGBtYmluYCksIHdoaWNoXG4gKiBzaG91bGQgaWYgcHJlc2VudCBjb21lIGZpcnN0IGluIGBjbGFzc2VzYC5cbiAqIFRPRE8oIzk1Myk6IE1ha2UgYG9wdGlvbnNgIG1hbmRhdG9yeSBhbmQgYWx3YXlzIHBhc3MgaXQgaW4uXG4gKi9cblxuXG52YXIgbWFrZVN5bWJvbCA9IGZ1bmN0aW9uIG1ha2VTeW1ib2wodmFsdWUsIGZvbnROYW1lLCBtb2RlLCBvcHRpb25zLCBjbGFzc2VzKSB7XG4gIHZhciBsb29rdXAgPSBsb29rdXBTeW1ib2wodmFsdWUsIGZvbnROYW1lLCBtb2RlKTtcbiAgdmFyIG1ldHJpY3MgPSBsb29rdXAubWV0cmljcztcbiAgdmFsdWUgPSBsb29rdXAudmFsdWU7XG4gIHZhciBzeW1ib2xOb2RlO1xuXG4gIGlmIChtZXRyaWNzKSB7XG4gICAgdmFyIGl0YWxpYyA9IG1ldHJpY3MuaXRhbGljO1xuXG4gICAgaWYgKG1vZGUgPT09IFwidGV4dFwiIHx8IG9wdGlvbnMgJiYgb3B0aW9ucy5mb250ID09PSBcIm1hdGhpdFwiKSB7XG4gICAgICBpdGFsaWMgPSAwO1xuICAgIH1cblxuICAgIHN5bWJvbE5vZGUgPSBuZXcgU3ltYm9sTm9kZSh2YWx1ZSwgbWV0cmljcy5oZWlnaHQsIG1ldHJpY3MuZGVwdGgsIGl0YWxpYywgbWV0cmljcy5za2V3LCBtZXRyaWNzLndpZHRoLCBjbGFzc2VzKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUT0RPKGVtaWx5KTogRmlndXJlIG91dCBhIGdvb2Qgd2F5IHRvIG9ubHkgcHJpbnQgdGhpcyBpbiBkZXZlbG9wbWVudFxuICAgIHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIGNvbnNvbGUud2FybihcIk5vIGNoYXJhY3RlciBtZXRyaWNzIFwiICsgKFwiZm9yICdcIiArIHZhbHVlICsgXCInIGluIHN0eWxlICdcIiArIGZvbnROYW1lICsgXCInIGFuZCBtb2RlICdcIiArIG1vZGUgKyBcIidcIikpO1xuICAgIHN5bWJvbE5vZGUgPSBuZXcgU3ltYm9sTm9kZSh2YWx1ZSwgMCwgMCwgMCwgMCwgMCwgY2xhc3Nlcyk7XG4gIH1cblxuICBpZiAob3B0aW9ucykge1xuICAgIHN5bWJvbE5vZGUubWF4Rm9udFNpemUgPSBvcHRpb25zLnNpemVNdWx0aXBsaWVyO1xuXG4gICAgaWYgKG9wdGlvbnMuc3R5bGUuaXNUaWdodCgpKSB7XG4gICAgICBzeW1ib2xOb2RlLmNsYXNzZXMucHVzaChcIm10aWdodFwiKTtcbiAgICB9XG5cbiAgICB2YXIgY29sb3IgPSBvcHRpb25zLmdldENvbG9yKCk7XG5cbiAgICBpZiAoY29sb3IpIHtcbiAgICAgIHN5bWJvbE5vZGUuc3R5bGUuY29sb3IgPSBjb2xvcjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3ltYm9sTm9kZTtcbn07XG4vKipcbiAqIE1ha2VzIGEgc3ltYm9sIGluIE1haW4tUmVndWxhciBvciBBTVMtUmVndWxhci5cbiAqIFVzZWQgZm9yIHJlbCwgYmluLCBvcGVuLCBjbG9zZSwgaW5uZXIsIGFuZCBwdW5jdC5cbiAqL1xuXG5cbnZhciBtYXRoc3ltID0gZnVuY3Rpb24gbWF0aHN5bSh2YWx1ZSwgbW9kZSwgb3B0aW9ucywgY2xhc3Nlcykge1xuICBpZiAoY2xhc3NlcyA9PT0gdm9pZCAwKSB7XG4gICAgY2xhc3NlcyA9IFtdO1xuICB9XG5cbiAgLy8gRGVjaWRlIHdoYXQgZm9udCB0byByZW5kZXIgdGhlIHN5bWJvbCBpbiBieSBpdHMgZW50cnkgaW4gdGhlIHN5bWJvbHNcbiAgLy8gdGFibGUuXG4gIC8vIEhhdmUgYSBzcGVjaWFsIGNhc2UgZm9yIHdoZW4gdGhlIHZhbHVlID0gXFwgYmVjYXVzZSB0aGUgXFwgaXMgdXNlZCBhcyBhXG4gIC8vIHRleHRvcmQgaW4gdW5zdXBwb3J0ZWQgY29tbWFuZCBlcnJvcnMgYnV0IGNhbm5vdCBiZSBwYXJzZWQgYXMgYSByZWd1bGFyXG4gIC8vIHRleHQgb3JkaW5hbCBhbmQgaXMgdGhlcmVmb3JlIG5vdCBwcmVzZW50IGFzIGEgc3ltYm9sIGluIHRoZSBzeW1ib2xzXG4gIC8vIHRhYmxlIGZvciB0ZXh0LCBhcyB3ZWxsIGFzIGEgc3BlY2lhbCBjYXNlIGZvciBib2xkc3ltYm9sIGJlY2F1c2UgaXRcbiAgLy8gY2FuIGJlIHVzZWQgZm9yIGJvbGQgKyBhbmQgLVxuICBpZiAob3B0aW9ucy5mb250ID09PSBcImJvbGRzeW1ib2xcIiAmJiBsb29rdXBTeW1ib2wodmFsdWUsIFwiTWFpbi1Cb2xkXCIsIG1vZGUpLm1ldHJpY3MpIHtcbiAgICByZXR1cm4gbWFrZVN5bWJvbCh2YWx1ZSwgXCJNYWluLUJvbGRcIiwgbW9kZSwgb3B0aW9ucywgY2xhc3Nlcy5jb25jYXQoW1wibWF0aGJmXCJdKSk7XG4gIH0gZWxzZSBpZiAodmFsdWUgPT09IFwiXFxcXFwiIHx8IHNyY19zeW1ib2xzW21vZGVdW3ZhbHVlXS5mb250ID09PSBcIm1haW5cIikge1xuICAgIHJldHVybiBtYWtlU3ltYm9sKHZhbHVlLCBcIk1haW4tUmVndWxhclwiLCBtb2RlLCBvcHRpb25zLCBjbGFzc2VzKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbWFrZVN5bWJvbCh2YWx1ZSwgXCJBTVMtUmVndWxhclwiLCBtb2RlLCBvcHRpb25zLCBjbGFzc2VzLmNvbmNhdChbXCJhbXNybVwiXSkpO1xuICB9XG59O1xuLyoqXG4gKiBEZXRlcm1pbmVzIHdoaWNoIG9mIHRoZSB0d28gZm9udCBuYW1lcyAoTWFpbi1Cb2xkIGFuZCBNYXRoLUJvbGRJdGFsaWMpIGFuZFxuICogY29ycmVzcG9uZGluZyBzdHlsZSB0YWdzIChtYXRoYmYgb3IgYm9sZHN5bWJvbCkgdG8gdXNlIGZvciBmb250IFwiYm9sZHN5bWJvbFwiLFxuICogZGVwZW5kaW5nIG9uIHRoZSBzeW1ib2wuICBVc2UgdGhpcyBmdW5jdGlvbiBpbnN0ZWFkIG9mIGZvbnRNYXAgZm9yIGZvbnRcbiAqIFwiYm9sZHN5bWJvbFwiLlxuICovXG5cblxudmFyIGJvbGRzeW1ib2wgPSBmdW5jdGlvbiBib2xkc3ltYm9sKHZhbHVlLCBtb2RlLCBvcHRpb25zLCBjbGFzc2VzLCB0eXBlKSB7XG4gIGlmICh0eXBlICE9PSBcInRleHRvcmRcIiAmJiBsb29rdXBTeW1ib2wodmFsdWUsIFwiTWF0aC1Cb2xkSXRhbGljXCIsIG1vZGUpLm1ldHJpY3MpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9udE5hbWU6IFwiTWF0aC1Cb2xkSXRhbGljXCIsXG4gICAgICBmb250Q2xhc3M6IFwiYm9sZHN5bWJvbFwiXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTb21lIGdseXBocyBkbyBub3QgZXhpc3QgaW4gTWF0aC1Cb2xkSXRhbGljIHNvIHdlIG5lZWQgdG8gdXNlXG4gICAgLy8gTWFpbi1Cb2xkIGluc3RlYWQuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZvbnROYW1lOiBcIk1haW4tQm9sZFwiLFxuICAgICAgZm9udENsYXNzOiBcIm1hdGhiZlwiXG4gICAgfTtcbiAgfVxufTtcbi8qKlxuICogTWFrZXMgZWl0aGVyIGEgbWF0aG9yZCBvciB0ZXh0b3JkIGluIHRoZSBjb3JyZWN0IGZvbnQgYW5kIGNvbG9yLlxuICovXG5cblxudmFyIG1ha2VPcmQgPSBmdW5jdGlvbiBtYWtlT3JkKGdyb3VwLCBvcHRpb25zLCB0eXBlKSB7XG4gIHZhciBtb2RlID0gZ3JvdXAubW9kZTtcbiAgdmFyIHRleHQgPSBncm91cC50ZXh0O1xuICB2YXIgY2xhc3NlcyA9IFtcIm1vcmRcIl07IC8vIE1hdGggbW9kZSBvciBPbGQgZm9udCAoaS5lLiBcXHJtKVxuXG4gIHZhciBpc0ZvbnQgPSBtb2RlID09PSBcIm1hdGhcIiB8fCBtb2RlID09PSBcInRleHRcIiAmJiBvcHRpb25zLmZvbnQ7XG4gIHZhciBmb250T3JGYW1pbHkgPSBpc0ZvbnQgPyBvcHRpb25zLmZvbnQgOiBvcHRpb25zLmZvbnRGYW1pbHk7XG5cbiAgaWYgKHRleHQuY2hhckNvZGVBdCgwKSA9PT0gMHhEODM1KSB7XG4gICAgLy8gc3Vycm9nYXRlIHBhaXJzIGdldCBzcGVjaWFsIHRyZWF0bWVudFxuICAgIHZhciBfd2lkZUNoYXJhY3RlckZvbnQgPSB3aWRlQ2hhcmFjdGVyRm9udCh0ZXh0LCBtb2RlKSxcbiAgICAgICAgd2lkZUZvbnROYW1lID0gX3dpZGVDaGFyYWN0ZXJGb250WzBdLFxuICAgICAgICB3aWRlRm9udENsYXNzID0gX3dpZGVDaGFyYWN0ZXJGb250WzFdO1xuXG4gICAgcmV0dXJuIG1ha2VTeW1ib2wodGV4dCwgd2lkZUZvbnROYW1lLCBtb2RlLCBvcHRpb25zLCBjbGFzc2VzLmNvbmNhdCh3aWRlRm9udENsYXNzKSk7XG4gIH0gZWxzZSBpZiAoZm9udE9yRmFtaWx5KSB7XG4gICAgdmFyIGZvbnROYW1lO1xuICAgIHZhciBmb250Q2xhc3NlcztcblxuICAgIGlmIChmb250T3JGYW1pbHkgPT09IFwiYm9sZHN5bWJvbFwiKSB7XG4gICAgICB2YXIgZm9udERhdGEgPSBib2xkc3ltYm9sKHRleHQsIG1vZGUsIG9wdGlvbnMsIGNsYXNzZXMsIHR5cGUpO1xuICAgICAgZm9udE5hbWUgPSBmb250RGF0YS5mb250TmFtZTtcbiAgICAgIGZvbnRDbGFzc2VzID0gW2ZvbnREYXRhLmZvbnRDbGFzc107XG4gICAgfSBlbHNlIGlmIChpc0ZvbnQpIHtcbiAgICAgIGZvbnROYW1lID0gZm9udE1hcFtmb250T3JGYW1pbHldLmZvbnROYW1lO1xuICAgICAgZm9udENsYXNzZXMgPSBbZm9udE9yRmFtaWx5XTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9udE5hbWUgPSByZXRyaWV2ZVRleHRGb250TmFtZShmb250T3JGYW1pbHksIG9wdGlvbnMuZm9udFdlaWdodCwgb3B0aW9ucy5mb250U2hhcGUpO1xuICAgICAgZm9udENsYXNzZXMgPSBbZm9udE9yRmFtaWx5LCBvcHRpb25zLmZvbnRXZWlnaHQsIG9wdGlvbnMuZm9udFNoYXBlXTtcbiAgICB9XG5cbiAgICBpZiAobG9va3VwU3ltYm9sKHRleHQsIGZvbnROYW1lLCBtb2RlKS5tZXRyaWNzKSB7XG4gICAgICByZXR1cm4gbWFrZVN5bWJvbCh0ZXh0LCBmb250TmFtZSwgbW9kZSwgb3B0aW9ucywgY2xhc3Nlcy5jb25jYXQoZm9udENsYXNzZXMpKTtcbiAgICB9IGVsc2UgaWYgKGxpZ2F0dXJlcy5oYXNPd25Qcm9wZXJ0eSh0ZXh0KSAmJiBmb250TmFtZS5zdWJzdHIoMCwgMTApID09PSBcIlR5cGV3cml0ZXJcIikge1xuICAgICAgLy8gRGVjb25zdHJ1Y3QgbGlnYXR1cmVzIGluIG1vbm9zcGFjZSBmb250cyAoXFx0ZXh0dHQsIFxcdHQpLlxuICAgICAgdmFyIHBhcnRzID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xuICAgICAgICBwYXJ0cy5wdXNoKG1ha2VTeW1ib2wodGV4dFtpXSwgZm9udE5hbWUsIG1vZGUsIG9wdGlvbnMsIGNsYXNzZXMuY29uY2F0KGZvbnRDbGFzc2VzKSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWFrZUZyYWdtZW50KHBhcnRzKTtcbiAgICB9XG4gIH0gLy8gTWFrZXMgYSBzeW1ib2wgaW4gdGhlIGRlZmF1bHQgZm9udCBmb3IgbWF0aG9yZHMgYW5kIHRleHRvcmRzLlxuXG5cbiAgaWYgKHR5cGUgPT09IFwibWF0aG9yZFwiKSB7XG4gICAgcmV0dXJuIG1ha2VTeW1ib2wodGV4dCwgXCJNYXRoLUl0YWxpY1wiLCBtb2RlLCBvcHRpb25zLCBjbGFzc2VzLmNvbmNhdChbXCJtYXRobm9ybWFsXCJdKSk7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJ0ZXh0b3JkXCIpIHtcbiAgICB2YXIgZm9udCA9IHNyY19zeW1ib2xzW21vZGVdW3RleHRdICYmIHNyY19zeW1ib2xzW21vZGVdW3RleHRdLmZvbnQ7XG5cbiAgICBpZiAoZm9udCA9PT0gXCJhbXNcIikge1xuICAgICAgdmFyIF9mb250TmFtZSA9IHJldHJpZXZlVGV4dEZvbnROYW1lKFwiYW1zcm1cIiwgb3B0aW9ucy5mb250V2VpZ2h0LCBvcHRpb25zLmZvbnRTaGFwZSk7XG5cbiAgICAgIHJldHVybiBtYWtlU3ltYm9sKHRleHQsIF9mb250TmFtZSwgbW9kZSwgb3B0aW9ucywgY2xhc3Nlcy5jb25jYXQoXCJhbXNybVwiLCBvcHRpb25zLmZvbnRXZWlnaHQsIG9wdGlvbnMuZm9udFNoYXBlKSk7XG4gICAgfSBlbHNlIGlmIChmb250ID09PSBcIm1haW5cIiB8fCAhZm9udCkge1xuICAgICAgdmFyIF9mb250TmFtZTIgPSByZXRyaWV2ZVRleHRGb250TmFtZShcInRleHRybVwiLCBvcHRpb25zLmZvbnRXZWlnaHQsIG9wdGlvbnMuZm9udFNoYXBlKTtcblxuICAgICAgcmV0dXJuIG1ha2VTeW1ib2wodGV4dCwgX2ZvbnROYW1lMiwgbW9kZSwgb3B0aW9ucywgY2xhc3Nlcy5jb25jYXQob3B0aW9ucy5mb250V2VpZ2h0LCBvcHRpb25zLmZvbnRTaGFwZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmb250cyBhZGRlZCBieSBwbHVnaW5zXG4gICAgICB2YXIgX2ZvbnROYW1lMyA9IHJldHJpZXZlVGV4dEZvbnROYW1lKGZvbnQsIG9wdGlvbnMuZm9udFdlaWdodCwgb3B0aW9ucy5mb250U2hhcGUpOyAvLyBXZSBhZGQgZm9udCBuYW1lIGFzIGEgY3NzIGNsYXNzXG5cblxuICAgICAgcmV0dXJuIG1ha2VTeW1ib2wodGV4dCwgX2ZvbnROYW1lMywgbW9kZSwgb3B0aW9ucywgY2xhc3Nlcy5jb25jYXQoX2ZvbnROYW1lMywgb3B0aW9ucy5mb250V2VpZ2h0LCBvcHRpb25zLmZvbnRTaGFwZSkpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmV4cGVjdGVkIHR5cGU6IFwiICsgdHlwZSArIFwiIGluIG1ha2VPcmRcIik7XG4gIH1cbn07XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBzdWJzZXF1ZW50IHN5bWJvbE5vZGVzIGhhdmUgdGhlIHNhbWUgY2xhc3Nlcywgc2tldywgbWF4Rm9udCxcbiAqIGFuZCBzdHlsZXMuXG4gKi9cblxuXG52YXIgY2FuQ29tYmluZSA9IGZ1bmN0aW9uIGNhbkNvbWJpbmUocHJldiwgbmV4dCkge1xuICBpZiAoY3JlYXRlQ2xhc3MocHJldi5jbGFzc2VzKSAhPT0gY3JlYXRlQ2xhc3MobmV4dC5jbGFzc2VzKSB8fCBwcmV2LnNrZXcgIT09IG5leHQuc2tldyB8fCBwcmV2Lm1heEZvbnRTaXplICE9PSBuZXh0Lm1heEZvbnRTaXplKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIElmIHByZXYgYW5kIG5leHQgYm90aCBhcmUganVzdCBcIm1iaW5cInMgb3IgXCJtb3JkXCJzIHdlIGRvbid0IGNvbWJpbmUgdGhlbVxuICAvLyBzbyB0aGF0IHRoZSBwcm9wZXIgc3BhY2luZyBjYW4gYmUgcHJlc2VydmVkLlxuXG5cbiAgaWYgKHByZXYuY2xhc3Nlcy5sZW5ndGggPT09IDEpIHtcbiAgICB2YXIgY2xzID0gcHJldi5jbGFzc2VzWzBdO1xuXG4gICAgaWYgKGNscyA9PT0gXCJtYmluXCIgfHwgY2xzID09PSBcIm1vcmRcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIHN0eWxlIGluIHByZXYuc3R5bGUpIHtcbiAgICBpZiAocHJldi5zdHlsZS5oYXNPd25Qcm9wZXJ0eShzdHlsZSkgJiYgcHJldi5zdHlsZVtzdHlsZV0gIT09IG5leHQuc3R5bGVbc3R5bGVdKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgX3N0eWxlIGluIG5leHQuc3R5bGUpIHtcbiAgICBpZiAobmV4dC5zdHlsZS5oYXNPd25Qcm9wZXJ0eShfc3R5bGUpICYmIHByZXYuc3R5bGVbX3N0eWxlXSAhPT0gbmV4dC5zdHlsZVtfc3R5bGVdKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuLyoqXG4gKiBDb21iaW5lIGNvbnNlY3V0aXZlIGRvbVRyZWUuc3ltYm9sTm9kZXMgaW50byBhIHNpbmdsZSBzeW1ib2xOb2RlLlxuICogTm90ZTogdGhpcyBmdW5jdGlvbiBtdXRhdGVzIHRoZSBhcmd1bWVudC5cbiAqL1xuXG5cbnZhciB0cnlDb21iaW5lQ2hhcnMgPSBmdW5jdGlvbiB0cnlDb21iaW5lQ2hhcnMoY2hhcnMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICB2YXIgcHJldiA9IGNoYXJzW2ldO1xuICAgIHZhciBuZXh0ID0gY2hhcnNbaSArIDFdO1xuXG4gICAgaWYgKHByZXYgaW5zdGFuY2VvZiBTeW1ib2xOb2RlICYmIG5leHQgaW5zdGFuY2VvZiBTeW1ib2xOb2RlICYmIGNhbkNvbWJpbmUocHJldiwgbmV4dCkpIHtcbiAgICAgIHByZXYudGV4dCArPSBuZXh0LnRleHQ7XG4gICAgICBwcmV2LmhlaWdodCA9IE1hdGgubWF4KHByZXYuaGVpZ2h0LCBuZXh0LmhlaWdodCk7XG4gICAgICBwcmV2LmRlcHRoID0gTWF0aC5tYXgocHJldi5kZXB0aCwgbmV4dC5kZXB0aCk7IC8vIFVzZSB0aGUgbGFzdCBjaGFyYWN0ZXIncyBpdGFsaWMgY29ycmVjdGlvbiBzaW5jZSB3ZSB1c2VcbiAgICAgIC8vIGl0IHRvIGFkZCBwYWRkaW5nIHRvIHRoZSByaWdodCBvZiB0aGUgc3BhbiBjcmVhdGVkIGZyb21cbiAgICAgIC8vIHRoZSBjb21iaW5lZCBjaGFyYWN0ZXJzLlxuXG4gICAgICBwcmV2Lml0YWxpYyA9IG5leHQuaXRhbGljO1xuICAgICAgY2hhcnMuc3BsaWNlKGkgKyAxLCAxKTtcbiAgICAgIGktLTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2hhcnM7XG59O1xuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIGhlaWdodCwgZGVwdGgsIGFuZCBtYXhGb250U2l6ZSBvZiBhbiBlbGVtZW50IGJhc2VkIG9uIGl0c1xuICogY2hpbGRyZW4uXG4gKi9cblxuXG52YXIgc2l6ZUVsZW1lbnRGcm9tQ2hpbGRyZW4gPSBmdW5jdGlvbiBzaXplRWxlbWVudEZyb21DaGlsZHJlbihlbGVtKSB7XG4gIHZhciBoZWlnaHQgPSAwO1xuICB2YXIgZGVwdGggPSAwO1xuICB2YXIgbWF4Rm9udFNpemUgPSAwO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IGVsZW0uY2hpbGRyZW5baV07XG5cbiAgICBpZiAoY2hpbGQuaGVpZ2h0ID4gaGVpZ2h0KSB7XG4gICAgICBoZWlnaHQgPSBjaGlsZC5oZWlnaHQ7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkLmRlcHRoID4gZGVwdGgpIHtcbiAgICAgIGRlcHRoID0gY2hpbGQuZGVwdGg7XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkLm1heEZvbnRTaXplID4gbWF4Rm9udFNpemUpIHtcbiAgICAgIG1heEZvbnRTaXplID0gY2hpbGQubWF4Rm9udFNpemU7XG4gICAgfVxuICB9XG5cbiAgZWxlbS5oZWlnaHQgPSBoZWlnaHQ7XG4gIGVsZW0uZGVwdGggPSBkZXB0aDtcbiAgZWxlbS5tYXhGb250U2l6ZSA9IG1heEZvbnRTaXplO1xufTtcbi8qKlxuICogTWFrZXMgYSBzcGFuIHdpdGggdGhlIGdpdmVuIGxpc3Qgb2YgY2xhc3NlcywgbGlzdCBvZiBjaGlsZHJlbiwgYW5kIG9wdGlvbnMuXG4gKlxuICogVE9ETygjOTUzKTogRW5zdXJlIHRoYXQgYG9wdGlvbnNgIGlzIGFsd2F5cyBwcm92aWRlZCAoY3VycmVudGx5IHNvbWUgY2FsbFxuICogc2l0ZXMgZG9uJ3QgcGFzcyBpdCkgYW5kIG1ha2UgdGhlIHR5cGUgYmVsb3cgbWFuZGF0b3J5LlxuICogVE9ETzogYWRkIGEgc2VwYXJhdGUgYXJndW1lbnQgZm9yIG1hdGggY2xhc3MgKGUuZy4gYG1vcGAsIGBtYmluYCksIHdoaWNoXG4gKiBzaG91bGQgaWYgcHJlc2VudCBjb21lIGZpcnN0IGluIGBjbGFzc2VzYC5cbiAqL1xuXG5cbnZhciBtYWtlU3BhbiA9IGZ1bmN0aW9uIG1ha2VTcGFuKGNsYXNzZXMsIGNoaWxkcmVuLCBvcHRpb25zLCBzdHlsZSkge1xuICB2YXIgc3BhbiA9IG5ldyBTcGFuKGNsYXNzZXMsIGNoaWxkcmVuLCBvcHRpb25zLCBzdHlsZSk7XG4gIHNpemVFbGVtZW50RnJvbUNoaWxkcmVuKHNwYW4pO1xuICByZXR1cm4gc3Bhbjtcbn07IC8vIFNWRyBvbmUgaXMgc2ltcGxlciAtLSBkb2Vzbid0IHJlcXVpcmUgaGVpZ2h0LCBkZXB0aCwgbWF4LWZvbnQgc2V0dGluZy5cbi8vIFRoaXMgaXMgYWxzbyBhIHNlcGFyYXRlIG1ldGhvZCBmb3IgdHlwZXNhZmV0eS5cblxuXG52YXIgbWFrZVN2Z1NwYW4gPSBmdW5jdGlvbiBtYWtlU3ZnU3BhbihjbGFzc2VzLCBjaGlsZHJlbiwgb3B0aW9ucywgc3R5bGUpIHtcbiAgcmV0dXJuIG5ldyBTcGFuKGNsYXNzZXMsIGNoaWxkcmVuLCBvcHRpb25zLCBzdHlsZSk7XG59O1xuXG52YXIgbWFrZUxpbmVTcGFuID0gZnVuY3Rpb24gbWFrZUxpbmVTcGFuKGNsYXNzTmFtZSwgb3B0aW9ucywgdGhpY2tuZXNzKSB7XG4gIHZhciBsaW5lID0gbWFrZVNwYW4oW2NsYXNzTmFtZV0sIFtdLCBvcHRpb25zKTtcbiAgbGluZS5oZWlnaHQgPSBNYXRoLm1heCh0aGlja25lc3MgfHwgb3B0aW9ucy5mb250TWV0cmljcygpLmRlZmF1bHRSdWxlVGhpY2tuZXNzLCBvcHRpb25zLm1pblJ1bGVUaGlja25lc3MpO1xuICBsaW5lLnN0eWxlLmJvcmRlckJvdHRvbVdpZHRoID0gbGluZS5oZWlnaHQgKyBcImVtXCI7XG4gIGxpbmUubWF4Rm9udFNpemUgPSAxLjA7XG4gIHJldHVybiBsaW5lO1xufTtcbi8qKlxuICogTWFrZXMgYW4gYW5jaG9yIHdpdGggdGhlIGdpdmVuIGhyZWYsIGxpc3Qgb2YgY2xhc3NlcywgbGlzdCBvZiBjaGlsZHJlbixcbiAqIGFuZCBvcHRpb25zLlxuICovXG5cblxudmFyIG1ha2VBbmNob3IgPSBmdW5jdGlvbiBtYWtlQW5jaG9yKGhyZWYsIGNsYXNzZXMsIGNoaWxkcmVuLCBvcHRpb25zKSB7XG4gIHZhciBhbmNob3IgPSBuZXcgQW5jaG9yKGhyZWYsIGNsYXNzZXMsIGNoaWxkcmVuLCBvcHRpb25zKTtcbiAgc2l6ZUVsZW1lbnRGcm9tQ2hpbGRyZW4oYW5jaG9yKTtcbiAgcmV0dXJuIGFuY2hvcjtcbn07XG4vKipcbiAqIE1ha2VzIGEgZG9jdW1lbnQgZnJhZ21lbnQgd2l0aCB0aGUgZ2l2ZW4gbGlzdCBvZiBjaGlsZHJlbi5cbiAqL1xuXG5cbnZhciBtYWtlRnJhZ21lbnQgPSBmdW5jdGlvbiBtYWtlRnJhZ21lbnQoY2hpbGRyZW4pIHtcbiAgdmFyIGZyYWdtZW50ID0gbmV3IERvY3VtZW50RnJhZ21lbnQoY2hpbGRyZW4pO1xuICBzaXplRWxlbWVudEZyb21DaGlsZHJlbihmcmFnbWVudCk7XG4gIHJldHVybiBmcmFnbWVudDtcbn07XG4vKipcbiAqIFdyYXBzIGdyb3VwIGluIGEgc3BhbiBpZiBpdCdzIGEgZG9jdW1lbnQgZnJhZ21lbnQsIGFsbG93aW5nIHRvIGFwcGx5IGNsYXNzZXNcbiAqIGFuZCBzdHlsZXNcbiAqL1xuXG5cbnZhciB3cmFwRnJhZ21lbnQgPSBmdW5jdGlvbiB3cmFwRnJhZ21lbnQoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgaWYgKGdyb3VwIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCkge1xuICAgIHJldHVybiBtYWtlU3BhbihbXSwgW2dyb3VwXSwgb3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4gZ3JvdXA7XG59OyAvLyBUaGVzZSBhcmUgZXhhY3Qgb2JqZWN0IHR5cGVzIHRvIGNhdGNoIHR5cG9zIGluIHRoZSBuYW1lcyBvZiB0aGUgb3B0aW9uYWwgZmllbGRzLlxuXG5cbi8vIENvbXB1dGVzIHRoZSB1cGRhdGVkIGBjaGlsZHJlbmAgbGlzdCBhbmQgdGhlIG92ZXJhbGwgZGVwdGguXG4vL1xuLy8gVGhpcyBoZWxwZXIgZnVuY3Rpb24gZm9yIG1ha2VWTGlzdCBtYWtlcyBpdCBlYXNpZXIgdG8gZW5mb3JjZSB0eXBlIHNhZmV0eSBieVxuLy8gYWxsb3dpbmcgZWFybHkgZXhpdHMgKHJldHVybnMpIGluIHRoZSBsb2dpYy5cbnZhciBnZXRWTGlzdENoaWxkcmVuQW5kRGVwdGggPSBmdW5jdGlvbiBnZXRWTGlzdENoaWxkcmVuQW5kRGVwdGgocGFyYW1zKSB7XG4gIGlmIChwYXJhbXMucG9zaXRpb25UeXBlID09PSBcImluZGl2aWR1YWxTaGlmdFwiKSB7XG4gICAgdmFyIG9sZENoaWxkcmVuID0gcGFyYW1zLmNoaWxkcmVuO1xuICAgIHZhciBjaGlsZHJlbiA9IFtvbGRDaGlsZHJlblswXV07IC8vIEFkZCBpbiBrZXJucyB0byB0aGUgbGlzdCBvZiBwYXJhbXMuY2hpbGRyZW4gdG8gZ2V0IGVhY2ggZWxlbWVudCB0byBiZVxuICAgIC8vIHNoaWZ0ZWQgdG8gdGhlIGNvcnJlY3Qgc3BlY2lmaWVkIHNoaWZ0XG5cbiAgICB2YXIgX2RlcHRoID0gLW9sZENoaWxkcmVuWzBdLnNoaWZ0IC0gb2xkQ2hpbGRyZW5bMF0uZWxlbS5kZXB0aDtcblxuICAgIHZhciBjdXJyUG9zID0gX2RlcHRoO1xuXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBvbGRDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRpZmYgPSAtb2xkQ2hpbGRyZW5baV0uc2hpZnQgLSBjdXJyUG9zIC0gb2xkQ2hpbGRyZW5baV0uZWxlbS5kZXB0aDtcbiAgICAgIHZhciBzaXplID0gZGlmZiAtIChvbGRDaGlsZHJlbltpIC0gMV0uZWxlbS5oZWlnaHQgKyBvbGRDaGlsZHJlbltpIC0gMV0uZWxlbS5kZXB0aCk7XG4gICAgICBjdXJyUG9zID0gY3VyclBvcyArIGRpZmY7XG4gICAgICBjaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgdHlwZTogXCJrZXJuXCIsXG4gICAgICAgIHNpemU6IHNpemVcbiAgICAgIH0pO1xuICAgICAgY2hpbGRyZW4ucHVzaChvbGRDaGlsZHJlbltpXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICAgIGRlcHRoOiBfZGVwdGhcbiAgICB9O1xuICB9XG5cbiAgdmFyIGRlcHRoO1xuXG4gIGlmIChwYXJhbXMucG9zaXRpb25UeXBlID09PSBcInRvcFwiKSB7XG4gICAgLy8gV2UgYWx3YXlzIHN0YXJ0IGF0IHRoZSBib3R0b20sIHNvIGNhbGN1bGF0ZSB0aGUgYm90dG9tIGJ5IGFkZGluZyB1cFxuICAgIC8vIGFsbCB0aGUgc2l6ZXNcbiAgICB2YXIgYm90dG9tID0gcGFyYW1zLnBvc2l0aW9uRGF0YTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBwYXJhbXMuY2hpbGRyZW4ubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBwYXJhbXMuY2hpbGRyZW5bX2ldO1xuICAgICAgYm90dG9tIC09IGNoaWxkLnR5cGUgPT09IFwia2VyblwiID8gY2hpbGQuc2l6ZSA6IGNoaWxkLmVsZW0uaGVpZ2h0ICsgY2hpbGQuZWxlbS5kZXB0aDtcbiAgICB9XG5cbiAgICBkZXB0aCA9IGJvdHRvbTtcbiAgfSBlbHNlIGlmIChwYXJhbXMucG9zaXRpb25UeXBlID09PSBcImJvdHRvbVwiKSB7XG4gICAgZGVwdGggPSAtcGFyYW1zLnBvc2l0aW9uRGF0YTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZmlyc3RDaGlsZCA9IHBhcmFtcy5jaGlsZHJlblswXTtcblxuICAgIGlmIChmaXJzdENoaWxkLnR5cGUgIT09IFwiZWxlbVwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZpcnN0IGNoaWxkIG11c3QgaGF2ZSB0eXBlIFwiZWxlbVwiLicpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMucG9zaXRpb25UeXBlID09PSBcInNoaWZ0XCIpIHtcbiAgICAgIGRlcHRoID0gLWZpcnN0Q2hpbGQuZWxlbS5kZXB0aCAtIHBhcmFtcy5wb3NpdGlvbkRhdGE7XG4gICAgfSBlbHNlIGlmIChwYXJhbXMucG9zaXRpb25UeXBlID09PSBcImZpcnN0QmFzZWxpbmVcIikge1xuICAgICAgZGVwdGggPSAtZmlyc3RDaGlsZC5lbGVtLmRlcHRoO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHBvc2l0aW9uVHlwZSBcIiArIHBhcmFtcy5wb3NpdGlvblR5cGUgKyBcIi5cIik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjaGlsZHJlbjogcGFyYW1zLmNoaWxkcmVuLFxuICAgIGRlcHRoOiBkZXB0aFxuICB9O1xufTtcbi8qKlxuICogTWFrZXMgYSB2ZXJ0aWNhbCBsaXN0IGJ5IHN0YWNraW5nIGVsZW1lbnRzIGFuZCBrZXJucyBvbiB0b3Agb2YgZWFjaCBvdGhlci5cbiAqIEFsbG93cyBmb3IgbWFueSBkaWZmZXJlbnQgd2F5cyBvZiBzcGVjaWZ5aW5nIHRoZSBwb3NpdGlvbmluZyBtZXRob2QuXG4gKlxuICogU2VlIFZMaXN0UGFyYW0gZG9jdW1lbnRhdGlvbiBhYm92ZS5cbiAqL1xuXG5cbnZhciBtYWtlVkxpc3QgPSBmdW5jdGlvbiBtYWtlVkxpc3QocGFyYW1zLCBvcHRpb25zKSB7XG4gIHZhciBfZ2V0Vkxpc3RDaGlsZHJlbkFuZEQgPSBnZXRWTGlzdENoaWxkcmVuQW5kRGVwdGgocGFyYW1zKSxcbiAgICAgIGNoaWxkcmVuID0gX2dldFZMaXN0Q2hpbGRyZW5BbmRELmNoaWxkcmVuLFxuICAgICAgZGVwdGggPSBfZ2V0Vkxpc3RDaGlsZHJlbkFuZEQuZGVwdGg7IC8vIENyZWF0ZSBhIHN0cnV0IHRoYXQgaXMgdGFsbGVyIHRoYW4gYW55IGxpc3QgaXRlbS4gVGhlIHN0cnV0IGlzIGFkZGVkIHRvXG4gIC8vIGVhY2ggaXRlbSwgd2hlcmUgaXQgd2lsbCBkZXRlcm1pbmUgdGhlIGl0ZW0ncyBiYXNlbGluZS4gU2luY2UgaXQgaGFzXG4gIC8vIGBvdmVyZmxvdzpoaWRkZW5gLCB0aGUgc3RydXQncyB0b3AgZWRnZSB3aWxsIHNpdCBvbiB0aGUgaXRlbSdzIGxpbmUgYm94J3NcbiAgLy8gdG9wIGVkZ2UgYW5kIHRoZSBzdHJ1dCdzIGJvdHRvbSBlZGdlIHdpbGwgc2l0IG9uIHRoZSBpdGVtJ3MgYmFzZWxpbmUsXG4gIC8vIHdpdGggbm8gYWRkaXRpb25hbCBsaW5lLWhlaWdodCBzcGFjaW5nLiBUaGlzIGFsbG93cyB0aGUgaXRlbSBiYXNlbGluZSB0b1xuICAvLyBiZSBwb3NpdGlvbmVkIHByZWNpc2VseSB3aXRob3V0IHdvcnJ5aW5nIGFib3V0IGZvbnQgYXNjZW50IGFuZFxuICAvLyBsaW5lLWhlaWdodC5cblxuXG4gIHZhciBwc3RydXRTaXplID0gMDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG5cbiAgICBpZiAoY2hpbGQudHlwZSA9PT0gXCJlbGVtXCIpIHtcbiAgICAgIHZhciBlbGVtID0gY2hpbGQuZWxlbTtcbiAgICAgIHBzdHJ1dFNpemUgPSBNYXRoLm1heChwc3RydXRTaXplLCBlbGVtLm1heEZvbnRTaXplLCBlbGVtLmhlaWdodCk7XG4gICAgfVxuICB9XG5cbiAgcHN0cnV0U2l6ZSArPSAyO1xuICB2YXIgcHN0cnV0ID0gbWFrZVNwYW4oW1wicHN0cnV0XCJdLCBbXSk7XG4gIHBzdHJ1dC5zdHlsZS5oZWlnaHQgPSBwc3RydXRTaXplICsgXCJlbVwiOyAvLyBDcmVhdGUgYSBuZXcgbGlzdCBvZiBhY3R1YWwgY2hpbGRyZW4gYXQgdGhlIGNvcnJlY3Qgb2Zmc2V0c1xuXG4gIHZhciByZWFsQ2hpbGRyZW4gPSBbXTtcbiAgdmFyIG1pblBvcyA9IGRlcHRoO1xuICB2YXIgbWF4UG9zID0gZGVwdGg7XG4gIHZhciBjdXJyUG9zID0gZGVwdGg7XG5cbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgY2hpbGRyZW4ubGVuZ3RoOyBfaTIrKykge1xuICAgIHZhciBfY2hpbGQgPSBjaGlsZHJlbltfaTJdO1xuXG4gICAgaWYgKF9jaGlsZC50eXBlID09PSBcImtlcm5cIikge1xuICAgICAgY3VyclBvcyArPSBfY2hpbGQuc2l6ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9lbGVtID0gX2NoaWxkLmVsZW07XG4gICAgICB2YXIgY2xhc3NlcyA9IF9jaGlsZC53cmFwcGVyQ2xhc3NlcyB8fCBbXTtcbiAgICAgIHZhciBzdHlsZSA9IF9jaGlsZC53cmFwcGVyU3R5bGUgfHwge307XG4gICAgICB2YXIgY2hpbGRXcmFwID0gbWFrZVNwYW4oY2xhc3NlcywgW3BzdHJ1dCwgX2VsZW1dLCB1bmRlZmluZWQsIHN0eWxlKTtcbiAgICAgIGNoaWxkV3JhcC5zdHlsZS50b3AgPSAtcHN0cnV0U2l6ZSAtIGN1cnJQb3MgLSBfZWxlbS5kZXB0aCArIFwiZW1cIjtcblxuICAgICAgaWYgKF9jaGlsZC5tYXJnaW5MZWZ0KSB7XG4gICAgICAgIGNoaWxkV3JhcC5zdHlsZS5tYXJnaW5MZWZ0ID0gX2NoaWxkLm1hcmdpbkxlZnQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChfY2hpbGQubWFyZ2luUmlnaHQpIHtcbiAgICAgICAgY2hpbGRXcmFwLnN0eWxlLm1hcmdpblJpZ2h0ID0gX2NoaWxkLm1hcmdpblJpZ2h0O1xuICAgICAgfVxuXG4gICAgICByZWFsQ2hpbGRyZW4ucHVzaChjaGlsZFdyYXApO1xuICAgICAgY3VyclBvcyArPSBfZWxlbS5oZWlnaHQgKyBfZWxlbS5kZXB0aDtcbiAgICB9XG5cbiAgICBtaW5Qb3MgPSBNYXRoLm1pbihtaW5Qb3MsIGN1cnJQb3MpO1xuICAgIG1heFBvcyA9IE1hdGgubWF4KG1heFBvcywgY3VyclBvcyk7XG4gIH0gLy8gVGhlIHZsaXN0IGNvbnRlbnRzIGdvIGluIGEgdGFibGUtY2VsbCB3aXRoIGB2ZXJ0aWNhbC1hbGlnbjpib3R0b21gLlxuICAvLyBUaGlzIGNlbGwncyBib3R0b20gZWRnZSB3aWxsIGRldGVybWluZSB0aGUgY29udGFpbmluZyB0YWJsZSdzIGJhc2VsaW5lXG4gIC8vIHdpdGhvdXQgb3Zlcmx5IGV4cGFuZGluZyB0aGUgY29udGFpbmluZyBsaW5lLWJveC5cblxuXG4gIHZhciB2bGlzdCA9IG1ha2VTcGFuKFtcInZsaXN0XCJdLCByZWFsQ2hpbGRyZW4pO1xuICB2bGlzdC5zdHlsZS5oZWlnaHQgPSBtYXhQb3MgKyBcImVtXCI7IC8vIEEgc2Vjb25kIHJvdyBpcyB1c2VkIGlmIG5lY2Vzc2FyeSB0byByZXByZXNlbnQgdGhlIHZsaXN0J3MgZGVwdGguXG5cbiAgdmFyIHJvd3M7XG5cbiAgaWYgKG1pblBvcyA8IDApIHtcbiAgICAvLyBXZSB3aWxsIGRlZmluZSBkZXB0aCBpbiBhbiBlbXB0eSBzcGFuIHdpdGggZGlzcGxheTogdGFibGUtY2VsbC5cbiAgICAvLyBJdCBzaG91bGQgcmVuZGVyIHdpdGggdGhlIGhlaWdodCB0aGF0IHdlIGRlZmluZS4gQnV0IENocm9tZSwgaW5cbiAgICAvLyBjb250ZW50ZWRpdGFibGUgbW9kZSBvbmx5LCB0cmVhdHMgdGhhdCBzcGFuIGFzIGlmIGl0IGNvbnRhaW5zIHNvbWVcbiAgICAvLyB0ZXh0IGNvbnRlbnQuIEFuZCB0aGF0IG1pbi1oZWlnaHQgb3Zlci1yaWRlcyBvdXIgZGVzaXJlZCBoZWlnaHQuXG4gICAgLy8gU28gd2UgcHV0IGFub3RoZXIgZW1wdHkgc3BhbiBpbnNpZGUgdGhlIGRlcHRoIHN0cnV0IHNwYW4uXG4gICAgdmFyIGVtcHR5U3BhbiA9IG1ha2VTcGFuKFtdLCBbXSk7XG4gICAgdmFyIGRlcHRoU3RydXQgPSBtYWtlU3BhbihbXCJ2bGlzdFwiXSwgW2VtcHR5U3Bhbl0pO1xuICAgIGRlcHRoU3RydXQuc3R5bGUuaGVpZ2h0ID0gLW1pblBvcyArIFwiZW1cIjsgLy8gU2FmYXJpIHdhbnRzIHRoZSBmaXJzdCByb3cgdG8gaGF2ZSBpbmxpbmUgY29udGVudDsgb3RoZXJ3aXNlIGl0XG4gICAgLy8gcHV0cyB0aGUgYm90dG9tIG9mIHRoZSAqc2Vjb25kKiByb3cgb24gdGhlIGJhc2VsaW5lLlxuXG4gICAgdmFyIHRvcFN0cnV0ID0gbWFrZVNwYW4oW1widmxpc3Qtc1wiXSwgW25ldyBTeW1ib2xOb2RlKFwiXFx1MjAwQlwiKV0pO1xuICAgIHJvd3MgPSBbbWFrZVNwYW4oW1widmxpc3QtclwiXSwgW3ZsaXN0LCB0b3BTdHJ1dF0pLCBtYWtlU3BhbihbXCJ2bGlzdC1yXCJdLCBbZGVwdGhTdHJ1dF0pXTtcbiAgfSBlbHNlIHtcbiAgICByb3dzID0gW21ha2VTcGFuKFtcInZsaXN0LXJcIl0sIFt2bGlzdF0pXTtcbiAgfVxuXG4gIHZhciB2dGFibGUgPSBtYWtlU3BhbihbXCJ2bGlzdC10XCJdLCByb3dzKTtcblxuICBpZiAocm93cy5sZW5ndGggPT09IDIpIHtcbiAgICB2dGFibGUuY2xhc3Nlcy5wdXNoKFwidmxpc3QtdDJcIik7XG4gIH1cblxuICB2dGFibGUuaGVpZ2h0ID0gbWF4UG9zO1xuICB2dGFibGUuZGVwdGggPSAtbWluUG9zO1xuICByZXR1cm4gdnRhYmxlO1xufTsgLy8gR2x1ZSBpcyBhIGNvbmNlcHQgZnJvbSBUZVggd2hpY2ggaXMgYSBmbGV4aWJsZSBzcGFjZSBiZXR3ZWVuIGVsZW1lbnRzIGluXG4vLyBlaXRoZXIgYSB2ZXJ0aWNhbCBvciBob3Jpem9udGFsIGxpc3QuIEluIEthVGVYLCBhdCBsZWFzdCBmb3Igbm93LCBpdCdzXG4vLyBzdGF0aWMgc3BhY2UgYmV0d2VlbiBlbGVtZW50cyBpbiBhIGhvcml6b250YWwgbGF5b3V0LlxuXG5cbnZhciBtYWtlR2x1ZSA9IGZ1bmN0aW9uIG1ha2VHbHVlKG1lYXN1cmVtZW50LCBvcHRpb25zKSB7XG4gIC8vIE1ha2UgYW4gZW1wdHkgc3BhbiBmb3IgdGhlIHNwYWNlXG4gIHZhciBydWxlID0gbWFrZVNwYW4oW1wibXNwYWNlXCJdLCBbXSwgb3B0aW9ucyk7XG4gIHZhciBzaXplID0gY2FsY3VsYXRlU2l6ZShtZWFzdXJlbWVudCwgb3B0aW9ucyk7XG4gIHJ1bGUuc3R5bGUubWFyZ2luUmlnaHQgPSBzaXplICsgXCJlbVwiO1xuICByZXR1cm4gcnVsZTtcbn07IC8vIFRha2VzIGZvbnQgb3B0aW9ucywgYW5kIHJldHVybnMgdGhlIGFwcHJvcHJpYXRlIGZvbnRMb29rdXAgbmFtZVxuXG5cbnZhciByZXRyaWV2ZVRleHRGb250TmFtZSA9IGZ1bmN0aW9uIHJldHJpZXZlVGV4dEZvbnROYW1lKGZvbnRGYW1pbHksIGZvbnRXZWlnaHQsIGZvbnRTaGFwZSkge1xuICB2YXIgYmFzZUZvbnROYW1lID0gXCJcIjtcblxuICBzd2l0Y2ggKGZvbnRGYW1pbHkpIHtcbiAgICBjYXNlIFwiYW1zcm1cIjpcbiAgICAgIGJhc2VGb250TmFtZSA9IFwiQU1TXCI7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgXCJ0ZXh0cm1cIjpcbiAgICAgIGJhc2VGb250TmFtZSA9IFwiTWFpblwiO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFwidGV4dHNmXCI6XG4gICAgICBiYXNlRm9udE5hbWUgPSBcIlNhbnNTZXJpZlwiO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFwidGV4dHR0XCI6XG4gICAgICBiYXNlRm9udE5hbWUgPSBcIlR5cGV3cml0ZXJcIjtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIGJhc2VGb250TmFtZSA9IGZvbnRGYW1pbHk7XG4gICAgLy8gdXNlIGZvbnRzIGFkZGVkIGJ5IGEgcGx1Z2luXG4gIH1cblxuICB2YXIgZm9udFN0eWxlc05hbWU7XG5cbiAgaWYgKGZvbnRXZWlnaHQgPT09IFwidGV4dGJmXCIgJiYgZm9udFNoYXBlID09PSBcInRleHRpdFwiKSB7XG4gICAgZm9udFN0eWxlc05hbWUgPSBcIkJvbGRJdGFsaWNcIjtcbiAgfSBlbHNlIGlmIChmb250V2VpZ2h0ID09PSBcInRleHRiZlwiKSB7XG4gICAgZm9udFN0eWxlc05hbWUgPSBcIkJvbGRcIjtcbiAgfSBlbHNlIGlmIChmb250V2VpZ2h0ID09PSBcInRleHRpdFwiKSB7XG4gICAgZm9udFN0eWxlc05hbWUgPSBcIkl0YWxpY1wiO1xuICB9IGVsc2Uge1xuICAgIGZvbnRTdHlsZXNOYW1lID0gXCJSZWd1bGFyXCI7XG4gIH1cblxuICByZXR1cm4gYmFzZUZvbnROYW1lICsgXCItXCIgKyBmb250U3R5bGVzTmFtZTtcbn07XG4vKipcbiAqIE1hcHMgVGVYIGZvbnQgY29tbWFuZHMgdG8gb2JqZWN0cyBjb250YWluaW5nOlxuICogLSB2YXJpYW50OiBzdHJpbmcgdXNlZCBmb3IgXCJtYXRodmFyaWFudFwiIGF0dHJpYnV0ZSBpbiBidWlsZE1hdGhNTC5qc1xuICogLSBmb250TmFtZTogdGhlIFwic3R5bGVcIiBwYXJhbWV0ZXIgdG8gZm9udE1ldHJpY3MuZ2V0Q2hhcmFjdGVyTWV0cmljc1xuICovXG4vLyBBIG1hcCBiZXR3ZWVuIHRleCBmb250IGNvbW1hbmRzIGFuIE1hdGhNTCBtYXRodmFyaWFudCBhdHRyaWJ1dGUgdmFsdWVzXG5cblxudmFyIGZvbnRNYXAgPSB7XG4gIC8vIHN0eWxlc1xuICBcIm1hdGhiZlwiOiB7XG4gICAgdmFyaWFudDogXCJib2xkXCIsXG4gICAgZm9udE5hbWU6IFwiTWFpbi1Cb2xkXCJcbiAgfSxcbiAgXCJtYXRocm1cIjoge1xuICAgIHZhcmlhbnQ6IFwibm9ybWFsXCIsXG4gICAgZm9udE5hbWU6IFwiTWFpbi1SZWd1bGFyXCJcbiAgfSxcbiAgXCJ0ZXh0aXRcIjoge1xuICAgIHZhcmlhbnQ6IFwiaXRhbGljXCIsXG4gICAgZm9udE5hbWU6IFwiTWFpbi1JdGFsaWNcIlxuICB9LFxuICBcIm1hdGhpdFwiOiB7XG4gICAgdmFyaWFudDogXCJpdGFsaWNcIixcbiAgICBmb250TmFtZTogXCJNYWluLUl0YWxpY1wiXG4gIH0sXG4gIFwibWF0aG5vcm1hbFwiOiB7XG4gICAgdmFyaWFudDogXCJpdGFsaWNcIixcbiAgICBmb250TmFtZTogXCJNYXRoLUl0YWxpY1wiXG4gIH0sXG4gIC8vIFwiYm9sZHN5bWJvbFwiIGlzIG1pc3NpbmcgYmVjYXVzZSB0aGV5IHJlcXVpcmUgdGhlIHVzZSBvZiBtdWx0aXBsZSBmb250czpcbiAgLy8gTWF0aC1Cb2xkSXRhbGljIGFuZCBNYWluLUJvbGQuICBUaGlzIGlzIGhhbmRsZWQgYnkgYSBzcGVjaWFsIGNhc2UgaW5cbiAgLy8gbWFrZU9yZCB3aGljaCBlbmRzIHVwIGNhbGxpbmcgYm9sZHN5bWJvbC5cbiAgLy8gZmFtaWxpZXNcbiAgXCJtYXRoYmJcIjoge1xuICAgIHZhcmlhbnQ6IFwiZG91YmxlLXN0cnVja1wiLFxuICAgIGZvbnROYW1lOiBcIkFNUy1SZWd1bGFyXCJcbiAgfSxcbiAgXCJtYXRoY2FsXCI6IHtcbiAgICB2YXJpYW50OiBcInNjcmlwdFwiLFxuICAgIGZvbnROYW1lOiBcIkNhbGlncmFwaGljLVJlZ3VsYXJcIlxuICB9LFxuICBcIm1hdGhmcmFrXCI6IHtcbiAgICB2YXJpYW50OiBcImZyYWt0dXJcIixcbiAgICBmb250TmFtZTogXCJGcmFrdHVyLVJlZ3VsYXJcIlxuICB9LFxuICBcIm1hdGhzY3JcIjoge1xuICAgIHZhcmlhbnQ6IFwic2NyaXB0XCIsXG4gICAgZm9udE5hbWU6IFwiU2NyaXB0LVJlZ3VsYXJcIlxuICB9LFxuICBcIm1hdGhzZlwiOiB7XG4gICAgdmFyaWFudDogXCJzYW5zLXNlcmlmXCIsXG4gICAgZm9udE5hbWU6IFwiU2Fuc1NlcmlmLVJlZ3VsYXJcIlxuICB9LFxuICBcIm1hdGh0dFwiOiB7XG4gICAgdmFyaWFudDogXCJtb25vc3BhY2VcIixcbiAgICBmb250TmFtZTogXCJUeXBld3JpdGVyLVJlZ3VsYXJcIlxuICB9XG59O1xudmFyIHN2Z0RhdGEgPSB7XG4gIC8vICAgcGF0aCwgd2lkdGgsIGhlaWdodFxuICB2ZWM6IFtcInZlY1wiLCAwLjQ3MSwgMC43MTRdLFxuICAvLyB2YWx1ZXMgZnJvbSB0aGUgZm9udCBnbHlwaFxuICBvaWludFNpemUxOiBbXCJvaWludFNpemUxXCIsIDAuOTU3LCAwLjQ5OV0sXG4gIC8vIG92YWwgdG8gb3ZlcmxheSB0aGUgaW50ZWdyYW5kXG4gIG9paW50U2l6ZTI6IFtcIm9paW50U2l6ZTJcIiwgMS40NzIsIDAuNjU5XSxcbiAgb2lpaW50U2l6ZTE6IFtcIm9paWludFNpemUxXCIsIDEuMzA0LCAwLjQ5OV0sXG4gIG9paWludFNpemUyOiBbXCJvaWlpbnRTaXplMlwiLCAxLjk4LCAwLjY1OV1cbn07XG5cbnZhciBzdGF0aWNTdmcgPSBmdW5jdGlvbiBzdGF0aWNTdmcodmFsdWUsIG9wdGlvbnMpIHtcbiAgLy8gQ3JlYXRlIGEgc3BhbiB3aXRoIGlubGluZSBTVkcgZm9yIHRoZSBlbGVtZW50LlxuICB2YXIgX3N2Z0RhdGEkdmFsdWUgPSBzdmdEYXRhW3ZhbHVlXSxcbiAgICAgIHBhdGhOYW1lID0gX3N2Z0RhdGEkdmFsdWVbMF0sXG4gICAgICB3aWR0aCA9IF9zdmdEYXRhJHZhbHVlWzFdLFxuICAgICAgaGVpZ2h0ID0gX3N2Z0RhdGEkdmFsdWVbMl07XG4gIHZhciBwYXRoID0gbmV3IFBhdGhOb2RlKHBhdGhOYW1lKTtcbiAgdmFyIHN2Z05vZGUgPSBuZXcgU3ZnTm9kZShbcGF0aF0sIHtcbiAgICBcIndpZHRoXCI6IHdpZHRoICsgXCJlbVwiLFxuICAgIFwiaGVpZ2h0XCI6IGhlaWdodCArIFwiZW1cIixcbiAgICAvLyBPdmVycmlkZSBDU1MgcnVsZSBgLmthdGV4IHN2ZyB7IHdpZHRoOiAxMDAlIH1gXG4gICAgXCJzdHlsZVwiOiBcIndpZHRoOlwiICsgd2lkdGggKyBcImVtXCIsXG4gICAgXCJ2aWV3Qm94XCI6IFwiMCAwIFwiICsgMTAwMCAqIHdpZHRoICsgXCIgXCIgKyAxMDAwICogaGVpZ2h0LFxuICAgIFwicHJlc2VydmVBc3BlY3RSYXRpb1wiOiBcInhNaW5ZTWluXCJcbiAgfSk7XG4gIHZhciBzcGFuID0gbWFrZVN2Z1NwYW4oW1wib3ZlcmxheVwiXSwgW3N2Z05vZGVdLCBvcHRpb25zKTtcbiAgc3Bhbi5oZWlnaHQgPSBoZWlnaHQ7XG4gIHNwYW4uc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgXCJlbVwiO1xuICBzcGFuLnN0eWxlLndpZHRoID0gd2lkdGggKyBcImVtXCI7XG4gIHJldHVybiBzcGFuO1xufTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgYnVpbGRDb21tb24gPSAoe1xuICBmb250TWFwOiBmb250TWFwLFxuICBtYWtlU3ltYm9sOiBtYWtlU3ltYm9sLFxuICBtYXRoc3ltOiBtYXRoc3ltLFxuICBtYWtlU3BhbjogbWFrZVNwYW4sXG4gIG1ha2VTdmdTcGFuOiBtYWtlU3ZnU3BhbixcbiAgbWFrZUxpbmVTcGFuOiBtYWtlTGluZVNwYW4sXG4gIG1ha2VBbmNob3I6IG1ha2VBbmNob3IsXG4gIG1ha2VGcmFnbWVudDogbWFrZUZyYWdtZW50LFxuICB3cmFwRnJhZ21lbnQ6IHdyYXBGcmFnbWVudCxcbiAgbWFrZVZMaXN0OiBtYWtlVkxpc3QsXG4gIG1ha2VPcmQ6IG1ha2VPcmQsXG4gIG1ha2VHbHVlOiBtYWtlR2x1ZSxcbiAgc3RhdGljU3ZnOiBzdGF0aWNTdmcsXG4gIHN2Z0RhdGE6IHN2Z0RhdGEsXG4gIHRyeUNvbWJpbmVDaGFyczogdHJ5Q29tYmluZUNoYXJzXG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9zcGFjaW5nRGF0YS5qc1xuLyoqXG4gKiBEZXNjcmliZXMgc3BhY2VzIGJldHdlZW4gZGlmZmVyZW50IGNsYXNzZXMgb2YgYXRvbXMuXG4gKi9cbnZhciB0aGluc3BhY2UgPSB7XG4gIG51bWJlcjogMyxcbiAgdW5pdDogXCJtdVwiXG59O1xudmFyIG1lZGl1bXNwYWNlID0ge1xuICBudW1iZXI6IDQsXG4gIHVuaXQ6IFwibXVcIlxufTtcbnZhciB0aGlja3NwYWNlID0ge1xuICBudW1iZXI6IDUsXG4gIHVuaXQ6IFwibXVcIlxufTsgLy8gTWFraW5nIHRoZSB0eXBlIGJlbG93IGV4YWN0IHdpdGggYWxsIG9wdGlvbmFsIGZpZWxkcyBkb2Vzbid0IHdvcmsgZHVlIHRvXG4vLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy80NTgyXG4vLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy81Njg4XG4vLyBIb3dldmVyLCBzaW5jZSAqYWxsKiBmaWVsZHMgYXJlIG9wdGlvbmFsLCAkU2hhcGU8PiB3b3JrcyBhcyBzdWdnZXN0ZWQgaW4gNTY4OFxuLy8gYWJvdmUuXG5cbi8vIFNwYWNpbmcgcmVsYXRpb25zaGlwcyBmb3IgZGlzcGxheSBhbmQgdGV4dCBzdHlsZXNcbnZhciBzcGFjaW5ncyA9IHtcbiAgbW9yZDoge1xuICAgIG1vcDogdGhpbnNwYWNlLFxuICAgIG1iaW46IG1lZGl1bXNwYWNlLFxuICAgIG1yZWw6IHRoaWNrc3BhY2UsXG4gICAgbWlubmVyOiB0aGluc3BhY2VcbiAgfSxcbiAgbW9wOiB7XG4gICAgbW9yZDogdGhpbnNwYWNlLFxuICAgIG1vcDogdGhpbnNwYWNlLFxuICAgIG1yZWw6IHRoaWNrc3BhY2UsXG4gICAgbWlubmVyOiB0aGluc3BhY2VcbiAgfSxcbiAgbWJpbjoge1xuICAgIG1vcmQ6IG1lZGl1bXNwYWNlLFxuICAgIG1vcDogbWVkaXVtc3BhY2UsXG4gICAgbW9wZW46IG1lZGl1bXNwYWNlLFxuICAgIG1pbm5lcjogbWVkaXVtc3BhY2VcbiAgfSxcbiAgbXJlbDoge1xuICAgIG1vcmQ6IHRoaWNrc3BhY2UsXG4gICAgbW9wOiB0aGlja3NwYWNlLFxuICAgIG1vcGVuOiB0aGlja3NwYWNlLFxuICAgIG1pbm5lcjogdGhpY2tzcGFjZVxuICB9LFxuICBtb3Blbjoge30sXG4gIG1jbG9zZToge1xuICAgIG1vcDogdGhpbnNwYWNlLFxuICAgIG1iaW46IG1lZGl1bXNwYWNlLFxuICAgIG1yZWw6IHRoaWNrc3BhY2UsXG4gICAgbWlubmVyOiB0aGluc3BhY2VcbiAgfSxcbiAgbXB1bmN0OiB7XG4gICAgbW9yZDogdGhpbnNwYWNlLFxuICAgIG1vcDogdGhpbnNwYWNlLFxuICAgIG1yZWw6IHRoaWNrc3BhY2UsXG4gICAgbW9wZW46IHRoaW5zcGFjZSxcbiAgICBtY2xvc2U6IHRoaW5zcGFjZSxcbiAgICBtcHVuY3Q6IHRoaW5zcGFjZSxcbiAgICBtaW5uZXI6IHRoaW5zcGFjZVxuICB9LFxuICBtaW5uZXI6IHtcbiAgICBtb3JkOiB0aGluc3BhY2UsXG4gICAgbW9wOiB0aGluc3BhY2UsXG4gICAgbWJpbjogbWVkaXVtc3BhY2UsXG4gICAgbXJlbDogdGhpY2tzcGFjZSxcbiAgICBtb3BlbjogdGhpbnNwYWNlLFxuICAgIG1wdW5jdDogdGhpbnNwYWNlLFxuICAgIG1pbm5lcjogdGhpbnNwYWNlXG4gIH1cbn07IC8vIFNwYWNpbmcgcmVsYXRpb25zaGlwcyBmb3Igc2NyaXB0IGFuZCBzY3JpcHRzY3JpcHQgc3R5bGVzXG5cbnZhciB0aWdodFNwYWNpbmdzID0ge1xuICBtb3JkOiB7XG4gICAgbW9wOiB0aGluc3BhY2VcbiAgfSxcbiAgbW9wOiB7XG4gICAgbW9yZDogdGhpbnNwYWNlLFxuICAgIG1vcDogdGhpbnNwYWNlXG4gIH0sXG4gIG1iaW46IHt9LFxuICBtcmVsOiB7fSxcbiAgbW9wZW46IHt9LFxuICBtY2xvc2U6IHtcbiAgICBtb3A6IHRoaW5zcGFjZVxuICB9LFxuICBtcHVuY3Q6IHt9LFxuICBtaW5uZXI6IHtcbiAgICBtb3A6IHRoaW5zcGFjZVxuICB9XG59O1xuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2RlZmluZUZ1bmN0aW9uLmpzXG4vKiogQ29udGV4dCBwcm92aWRlZCB0byBmdW5jdGlvbiBoYW5kbGVycyBmb3IgZXJyb3IgbWVzc2FnZXMuICovXG4vLyBOb3RlOiByZXZlcnNlIHRoZSBvcmRlciBvZiB0aGUgcmV0dXJuIHR5cGUgdW5pb24gd2lsbCBjYXVzZSBhIGZsb3cgZXJyb3IuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzM2NjMuXG4vLyBNb3JlIGdlbmVyYWwgdmVyc2lvbiBvZiBgSHRtbEJ1aWxkZXJgIGZvciBub2RlcyAoZS5nLiBcXHN1bSwgYWNjZW50IHR5cGVzKVxuLy8gd2hvc2UgcHJlc2VuY2UgaW1wYWN0cyBzdXBlci9zdWJzY3JpcHRpbmcuIEluIHRoaXMgY2FzZSwgUGFyc2VOb2RlPFwic3Vwc3ViXCI+XG4vLyBkZWxlZ2F0ZXMgaXRzIEhUTUwgYnVpbGRpbmcgdG8gdGhlIEh0bWxCdWlsZGVyIGNvcnJlc3BvbmRpbmcgdG8gdGhlc2Ugbm9kZXMuXG5cbi8qKlxuICogRmluYWwgZnVuY3Rpb24gc3BlYyBmb3IgdXNlIGF0IHBhcnNlIHRpbWUuXG4gKiBUaGlzIGlzIGFsbW9zdCBpZGVudGljYWwgdG8gYEZ1bmN0aW9uUHJvcFNwZWNgLCBleGNlcHQgaXRcbiAqIDEuIGluY2x1ZGVzIHRoZSBmdW5jdGlvbiBoYW5kbGVyLCBhbmRcbiAqIDIuIHJlcXVpcmVzIGFsbCBhcmd1bWVudHMgZXhjZXB0IGFyZ1R5cGVzLlxuICogSXQgaXMgZ2VuZXJhdGVkIGJ5IGBkZWZpbmVGdW5jdGlvbigpYCBiZWxvdy5cbiAqL1xuXG4vKipcbiAqIEFsbCByZWdpc3RlcmVkIGZ1bmN0aW9ucy5cbiAqIGBmdW5jdGlvbnMuanNgIGp1c3QgZXhwb3J0cyB0aGlzIHNhbWUgZGljdGlvbmFyeSBhZ2FpbiBhbmQgbWFrZXMgaXQgcHVibGljLlxuICogYFBhcnNlci5qc2AgcmVxdWlyZXMgdGhpcyBkaWN0aW9uYXJ5LlxuICovXG52YXIgX2Z1bmN0aW9ucyA9IHt9O1xuLyoqXG4gKiBBbGwgSFRNTCBidWlsZGVycy4gU2hvdWxkIGJlIG9ubHkgdXNlZCBpbiB0aGUgYGRlZmluZSpgIGFuZCB0aGUgYGJ1aWxkKk1MYFxuICogZnVuY3Rpb25zLlxuICovXG5cbnZhciBfaHRtbEdyb3VwQnVpbGRlcnMgPSB7fTtcbi8qKlxuICogQWxsIE1hdGhNTCBidWlsZGVycy4gU2hvdWxkIGJlIG9ubHkgdXNlZCBpbiB0aGUgYGRlZmluZSpgIGFuZCB0aGUgYGJ1aWxkKk1MYFxuICogZnVuY3Rpb25zLlxuICovXG5cbnZhciBfbWF0aG1sR3JvdXBCdWlsZGVycyA9IHt9O1xuZnVuY3Rpb24gZGVmaW5lRnVuY3Rpb24oX3JlZikge1xuICB2YXIgdHlwZSA9IF9yZWYudHlwZSxcbiAgICAgIG5hbWVzID0gX3JlZi5uYW1lcyxcbiAgICAgIHByb3BzID0gX3JlZi5wcm9wcyxcbiAgICAgIGhhbmRsZXIgPSBfcmVmLmhhbmRsZXIsXG4gICAgICBodG1sQnVpbGRlciA9IF9yZWYuaHRtbEJ1aWxkZXIsXG4gICAgICBtYXRobWxCdWlsZGVyID0gX3JlZi5tYXRobWxCdWlsZGVyO1xuICAvLyBTZXQgZGVmYXVsdCB2YWx1ZXMgb2YgZnVuY3Rpb25zXG4gIHZhciBkYXRhID0ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgbnVtQXJnczogcHJvcHMubnVtQXJncyxcbiAgICBhcmdUeXBlczogcHJvcHMuYXJnVHlwZXMsXG4gICAgYWxsb3dlZEluQXJndW1lbnQ6ICEhcHJvcHMuYWxsb3dlZEluQXJndW1lbnQsXG4gICAgYWxsb3dlZEluVGV4dDogISFwcm9wcy5hbGxvd2VkSW5UZXh0LFxuICAgIGFsbG93ZWRJbk1hdGg6IHByb3BzLmFsbG93ZWRJbk1hdGggPT09IHVuZGVmaW5lZCA/IHRydWUgOiBwcm9wcy5hbGxvd2VkSW5NYXRoLFxuICAgIG51bU9wdGlvbmFsQXJnczogcHJvcHMubnVtT3B0aW9uYWxBcmdzIHx8IDAsXG4gICAgaW5maXg6ICEhcHJvcHMuaW5maXgsXG4gICAgcHJpbWl0aXZlOiAhIXByb3BzLnByaW1pdGl2ZSxcbiAgICBoYW5kbGVyOiBoYW5kbGVyXG4gIH07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7ICsraSkge1xuICAgIF9mdW5jdGlvbnNbbmFtZXNbaV1dID0gZGF0YTtcbiAgfVxuXG4gIGlmICh0eXBlKSB7XG4gICAgaWYgKGh0bWxCdWlsZGVyKSB7XG4gICAgICBfaHRtbEdyb3VwQnVpbGRlcnNbdHlwZV0gPSBodG1sQnVpbGRlcjtcbiAgICB9XG5cbiAgICBpZiAobWF0aG1sQnVpbGRlcikge1xuICAgICAgX21hdGhtbEdyb3VwQnVpbGRlcnNbdHlwZV0gPSBtYXRobWxCdWlsZGVyO1xuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBVc2UgdGhpcyB0byByZWdpc3RlciBvbmx5IHRoZSBIVE1MIGFuZCBNYXRoTUwgYnVpbGRlcnMgZm9yIGEgZnVuY3Rpb24gKGUuZy5cbiAqIGlmIHRoZSBmdW5jdGlvbidzIFBhcnNlTm9kZSBpcyBnZW5lcmF0ZWQgaW4gUGFyc2VyLmpzIHJhdGhlciB0aGFuIHZpYSBhXG4gKiBzdGFuZC1hbG9uZSBoYW5kbGVyIHByb3ZpZGVkIHRvIGBkZWZpbmVGdW5jdGlvbmApLlxuICovXG5cbmZ1bmN0aW9uIGRlZmluZUZ1bmN0aW9uQnVpbGRlcnMoX3JlZjIpIHtcbiAgdmFyIHR5cGUgPSBfcmVmMi50eXBlLFxuICAgICAgaHRtbEJ1aWxkZXIgPSBfcmVmMi5odG1sQnVpbGRlcixcbiAgICAgIG1hdGhtbEJ1aWxkZXIgPSBfcmVmMi5tYXRobWxCdWlsZGVyO1xuICBkZWZpbmVGdW5jdGlvbih7XG4gICAgdHlwZTogdHlwZSxcbiAgICBuYW1lczogW10sXG4gICAgcHJvcHM6IHtcbiAgICAgIG51bUFyZ3M6IDBcbiAgICB9LFxuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Nob3VsZCBuZXZlciBiZSBjYWxsZWQuJyk7XG4gICAgfSxcbiAgICBodG1sQnVpbGRlcjogaHRtbEJ1aWxkZXIsXG4gICAgbWF0aG1sQnVpbGRlcjogbWF0aG1sQnVpbGRlclxuICB9KTtcbn1cbnZhciBub3JtYWxpemVBcmd1bWVudCA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUFyZ3VtZW50KGFyZykge1xuICByZXR1cm4gYXJnLnR5cGUgPT09IFwib3JkZ3JvdXBcIiAmJiBhcmcuYm9keS5sZW5ndGggPT09IDEgPyBhcmcuYm9keVswXSA6IGFyZztcbn07IC8vIFNpbmNlIHRoZSBjb3JyZXNwb25kaW5nIGJ1aWxkSFRNTC9idWlsZE1hdGhNTCBmdW5jdGlvbiBleHBlY3RzIGFcbi8vIGxpc3Qgb2YgZWxlbWVudHMsIHdlIG5vcm1hbGl6ZSBmb3IgZGlmZmVyZW50IGtpbmRzIG9mIGFyZ3VtZW50c1xuXG52YXIgb3JkYXJndW1lbnQgPSBmdW5jdGlvbiBvcmRhcmd1bWVudChhcmcpIHtcbiAgcmV0dXJuIGFyZy50eXBlID09PSBcIm9yZGdyb3VwXCIgPyBhcmcuYm9keSA6IFthcmddO1xufTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9idWlsZEhUTUwuanNcbi8qKlxuICogVGhpcyBmaWxlIGRvZXMgdGhlIG1haW4gd29yayBvZiBidWlsZGluZyBhIGRvbVRyZWUgc3RydWN0dXJlIGZyb20gYSBwYXJzZVxuICogdHJlZS4gVGhlIGVudHJ5IHBvaW50IGlzIHRoZSBgYnVpbGRIVE1MYCBmdW5jdGlvbiwgd2hpY2ggdGFrZXMgYSBwYXJzZSB0cmVlLlxuICogVGhlbiwgdGhlIGJ1aWxkRXhwcmVzc2lvbiwgYnVpbGRHcm91cCwgYW5kIHZhcmlvdXMgZ3JvdXBCdWlsZGVycyBmdW5jdGlvbnNcbiAqIGFyZSBjYWxsZWQsIHRvIHByb2R1Y2UgYSBmaW5hbCBIVE1MIHRyZWUuXG4gKi9cblxuXG5cblxuXG5cblxuXG52YXIgYnVpbGRIVE1MX21ha2VTcGFuID0gYnVpbGRDb21tb24ubWFrZVNwYW47IC8vIEJpbmFyeSBhdG9tcyAoZmlyc3QgY2xhc3MgYG1iaW5gKSBjaGFuZ2UgaW50byBvcmRpbmFyeSBhdG9tcyAoYG1vcmRgKVxuLy8gZGVwZW5kaW5nIG9uIHRoZWlyIHN1cnJvdW5kaW5ncy4gU2VlIFRlWGJvb2sgcGcuIDQ0Mi00NDYsIFJ1bGVzIDUgYW5kIDYsXG4vLyBhbmQgdGhlIHRleHQgYmVmb3JlIFJ1bGUgMTkuXG5cbnZhciBiaW5MZWZ0Q2FuY2VsbGVyID0gW1wibGVmdG1vc3RcIiwgXCJtYmluXCIsIFwibW9wZW5cIiwgXCJtcmVsXCIsIFwibW9wXCIsIFwibXB1bmN0XCJdO1xudmFyIGJpblJpZ2h0Q2FuY2VsbGVyID0gW1wicmlnaHRtb3N0XCIsIFwibXJlbFwiLCBcIm1jbG9zZVwiLCBcIm1wdW5jdFwiXTtcbnZhciBzdHlsZU1hcCA9IHtcbiAgXCJkaXNwbGF5XCI6IHNyY19TdHlsZS5ESVNQTEFZLFxuICBcInRleHRcIjogc3JjX1N0eWxlLlRFWFQsXG4gIFwic2NyaXB0XCI6IHNyY19TdHlsZS5TQ1JJUFQsXG4gIFwic2NyaXB0c2NyaXB0XCI6IHNyY19TdHlsZS5TQ1JJUFRTQ1JJUFRcbn07XG52YXIgRG9tRW51bSA9IHtcbiAgbW9yZDogXCJtb3JkXCIsXG4gIG1vcDogXCJtb3BcIixcbiAgbWJpbjogXCJtYmluXCIsXG4gIG1yZWw6IFwibXJlbFwiLFxuICBtb3BlbjogXCJtb3BlblwiLFxuICBtY2xvc2U6IFwibWNsb3NlXCIsXG4gIG1wdW5jdDogXCJtcHVuY3RcIixcbiAgbWlubmVyOiBcIm1pbm5lclwiXG59O1xuXG4vKipcbiAqIFRha2UgYSBsaXN0IG9mIG5vZGVzLCBidWlsZCB0aGVtIGluIG9yZGVyLCBhbmQgcmV0dXJuIGEgbGlzdCBvZiB0aGUgYnVpbHRcbiAqIG5vZGVzLiBkb2N1bWVudEZyYWdtZW50cyBhcmUgZmxhdHRlbmVkIGludG8gdGhlaXIgY29udGVudHMsIHNvIHRoZVxuICogcmV0dXJuZWQgbGlzdCBjb250YWlucyBubyBmcmFnbWVudHMuIGBpc1JlYWxHcm91cGAgaXMgdHJ1ZSBpZiBgZXhwcmVzc2lvbmBcbiAqIGlzIGEgcmVhbCBncm91cCAobm8gYXRvbXMgd2lsbCBiZSBhZGRlZCBvbiBlaXRoZXIgc2lkZSksIGFzIG9wcG9zZWQgdG9cbiAqIGEgcGFydGlhbCBncm91cCAoZS5nLiBvbmUgY3JlYXRlZCBieSBcXGNvbG9yKS4gYHN1cnJvdW5kaW5nYCBpcyBhbiBhcnJheVxuICogY29uc2lzdGluZyB0eXBlIG9mIG5vZGVzIHRoYXQgd2lsbCBiZSBhZGRlZCB0byB0aGUgbGVmdCBhbmQgcmlnaHQuXG4gKi9cbnZhciBidWlsZEV4cHJlc3Npb24gPSBmdW5jdGlvbiBidWlsZEV4cHJlc3Npb24oZXhwcmVzc2lvbiwgb3B0aW9ucywgaXNSZWFsR3JvdXAsIHN1cnJvdW5kaW5nKSB7XG4gIGlmIChzdXJyb3VuZGluZyA9PT0gdm9pZCAwKSB7XG4gICAgc3Vycm91bmRpbmcgPSBbbnVsbCwgbnVsbF07XG4gIH1cblxuICAvLyBQYXJzZSBleHByZXNzaW9ucyBpbnRvIGBncm91cHNgLlxuICB2YXIgZ3JvdXBzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHByZXNzaW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG91dHB1dCA9IGJ1aWxkR3JvdXAoZXhwcmVzc2lvbltpXSwgb3B0aW9ucyk7XG5cbiAgICBpZiAob3V0cHV0IGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gb3V0cHV0LmNoaWxkcmVuO1xuICAgICAgZ3JvdXBzLnB1c2guYXBwbHkoZ3JvdXBzLCBjaGlsZHJlbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdyb3Vwcy5wdXNoKG91dHB1dCk7XG4gICAgfVxuICB9IC8vIENvbWJpbmUgY29uc2VjdXRpdmUgZG9tVHJlZS5zeW1ib2xOb2RlcyBpbnRvIGEgc2luZ2xlIHN5bWJvbE5vZGUuXG5cblxuICBidWlsZENvbW1vbi50cnlDb21iaW5lQ2hhcnMoZ3JvdXBzKTsgLy8gSWYgYGV4cHJlc3Npb25gIGlzIGEgcGFydGlhbCBncm91cCwgbGV0IHRoZSBwYXJlbnQgaGFuZGxlIHNwYWNpbmdzXG4gIC8vIHRvIGF2b2lkIHByb2Nlc3NpbmcgZ3JvdXBzIG11bHRpcGxlIHRpbWVzLlxuXG4gIGlmICghaXNSZWFsR3JvdXApIHtcbiAgICByZXR1cm4gZ3JvdXBzO1xuICB9XG5cbiAgdmFyIGdsdWVPcHRpb25zID0gb3B0aW9ucztcblxuICBpZiAoZXhwcmVzc2lvbi5sZW5ndGggPT09IDEpIHtcbiAgICB2YXIgbm9kZSA9IGV4cHJlc3Npb25bMF07XG5cbiAgICBpZiAobm9kZS50eXBlID09PSBcInNpemluZ1wiKSB7XG4gICAgICBnbHVlT3B0aW9ucyA9IG9wdGlvbnMuaGF2aW5nU2l6ZShub2RlLnNpemUpO1xuICAgIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSBcInN0eWxpbmdcIikge1xuICAgICAgZ2x1ZU9wdGlvbnMgPSBvcHRpb25zLmhhdmluZ1N0eWxlKHN0eWxlTWFwW25vZGUuc3R5bGVdKTtcbiAgICB9XG4gIH0gLy8gRHVtbXkgc3BhbnMgZm9yIGRldGVybWluaW5nIHNwYWNpbmdzIGJldHdlZW4gc3Vycm91bmRpbmcgYXRvbXMuXG4gIC8vIElmIGBleHByZXNzaW9uYCBoYXMgbm8gYXRvbXMgb24gdGhlIGxlZnQgb3IgcmlnaHQsIGNsYXNzIFwibGVmdG1vc3RcIlxuICAvLyBvciBcInJpZ2h0bW9zdFwiLCByZXNwZWN0aXZlbHksIGlzIHVzZWQgdG8gaW5kaWNhdGUgaXQuXG5cblxuICB2YXIgZHVtbXlQcmV2ID0gYnVpbGRIVE1MX21ha2VTcGFuKFtzdXJyb3VuZGluZ1swXSB8fCBcImxlZnRtb3N0XCJdLCBbXSwgb3B0aW9ucyk7XG4gIHZhciBkdW1teU5leHQgPSBidWlsZEhUTUxfbWFrZVNwYW4oW3N1cnJvdW5kaW5nWzFdIHx8IFwicmlnaHRtb3N0XCJdLCBbXSwgb3B0aW9ucyk7IC8vIFRPRE86IFRoZXNlIGNvZGUgYXNzdW1lcyB0aGF0IGEgbm9kZSdzIG1hdGggY2xhc3MgaXMgdGhlIGZpcnN0IGVsZW1lbnRcbiAgLy8gb2YgaXRzIGBjbGFzc2VzYCBhcnJheS4gQSBsYXRlciBjbGVhbnVwIHNob3VsZCBlbnN1cmUgdGhpcywgZm9yXG4gIC8vIGluc3RhbmNlIGJ5IGNoYW5naW5nIHRoZSBzaWduYXR1cmUgb2YgYG1ha2VTcGFuYC5cbiAgLy8gQmVmb3JlIGRldGVybWluaW5nIHdoYXQgc3BhY2VzIHRvIGluc2VydCwgcGVyZm9ybSBiaW4gY2FuY2VsbGF0aW9uLlxuICAvLyBCaW5hcnkgb3BlcmF0b3JzIGNoYW5nZSB0byBvcmRpbmFyeSBzeW1ib2xzIGluIHNvbWUgY29udGV4dHMuXG5cbiAgdmFyIGlzUm9vdCA9IGlzUmVhbEdyb3VwID09PSBcInJvb3RcIjtcbiAgdHJhdmVyc2VOb25TcGFjZU5vZGVzKGdyb3VwcywgZnVuY3Rpb24gKG5vZGUsIHByZXYpIHtcbiAgICB2YXIgcHJldlR5cGUgPSBwcmV2LmNsYXNzZXNbMF07XG4gICAgdmFyIHR5cGUgPSBub2RlLmNsYXNzZXNbMF07XG5cbiAgICBpZiAocHJldlR5cGUgPT09IFwibWJpblwiICYmIHV0aWxzLmNvbnRhaW5zKGJpblJpZ2h0Q2FuY2VsbGVyLCB0eXBlKSkge1xuICAgICAgcHJldi5jbGFzc2VzWzBdID0gXCJtb3JkXCI7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBcIm1iaW5cIiAmJiB1dGlscy5jb250YWlucyhiaW5MZWZ0Q2FuY2VsbGVyLCBwcmV2VHlwZSkpIHtcbiAgICAgIG5vZGUuY2xhc3Nlc1swXSA9IFwibW9yZFwiO1xuICAgIH1cbiAgfSwge1xuICAgIG5vZGU6IGR1bW15UHJldlxuICB9LCBkdW1teU5leHQsIGlzUm9vdCk7XG4gIHRyYXZlcnNlTm9uU3BhY2VOb2Rlcyhncm91cHMsIGZ1bmN0aW9uIChub2RlLCBwcmV2KSB7XG4gICAgdmFyIHByZXZUeXBlID0gZ2V0VHlwZU9mRG9tVHJlZShwcmV2KTtcbiAgICB2YXIgdHlwZSA9IGdldFR5cGVPZkRvbVRyZWUobm9kZSk7IC8vICdtdGlnaHQnIGluZGljYXRlcyB0aGF0IHRoZSBub2RlIGlzIHNjcmlwdCBvciBzY3JpcHRzY3JpcHQgc3R5bGUuXG5cbiAgICB2YXIgc3BhY2UgPSBwcmV2VHlwZSAmJiB0eXBlID8gbm9kZS5oYXNDbGFzcyhcIm10aWdodFwiKSA/IHRpZ2h0U3BhY2luZ3NbcHJldlR5cGVdW3R5cGVdIDogc3BhY2luZ3NbcHJldlR5cGVdW3R5cGVdIDogbnVsbDtcblxuICAgIGlmIChzcGFjZSkge1xuICAgICAgLy8gSW5zZXJ0IGdsdWUgKHNwYWNpbmcpIGFmdGVyIHRoZSBgcHJldmAuXG4gICAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZUdsdWUoc3BhY2UsIGdsdWVPcHRpb25zKTtcbiAgICB9XG4gIH0sIHtcbiAgICBub2RlOiBkdW1teVByZXZcbiAgfSwgZHVtbXlOZXh0LCBpc1Jvb3QpO1xuICByZXR1cm4gZ3JvdXBzO1xufTsgLy8gRGVwdGgtZmlyc3QgdHJhdmVyc2Ugbm9uLXNwYWNlIGBub2Rlc2AsIGNhbGxpbmcgYGNhbGxiYWNrYCB3aXRoIHRoZSBjdXJyZW50IGFuZFxuLy8gcHJldmlvdXMgbm9kZSBhcyBhcmd1bWVudHMsIG9wdGlvbmFsbHkgcmV0dXJuaW5nIGEgbm9kZSB0byBpbnNlcnQgYWZ0ZXIgdGhlXG4vLyBwcmV2aW91cyBub2RlLiBgcHJldmAgaXMgYW4gb2JqZWN0IHdpdGggdGhlIHByZXZpb3VzIG5vZGUgYW5kIGBpbnNlcnRBZnRlcmBcbi8vIGZ1bmN0aW9uIHRvIGluc2VydCBhZnRlciBpdC4gYG5leHRgIGlzIGEgbm9kZSB0aGF0IHdpbGwgYmUgYWRkZWQgdG8gdGhlIHJpZ2h0LlxuLy8gVXNlZCBmb3IgYmluIGNhbmNlbGxhdGlvbiBhbmQgaW5zZXJ0aW5nIHNwYWNpbmdzLlxuXG52YXIgdHJhdmVyc2VOb25TcGFjZU5vZGVzID0gZnVuY3Rpb24gdHJhdmVyc2VOb25TcGFjZU5vZGVzKG5vZGVzLCBjYWxsYmFjaywgcHJldiwgbmV4dCwgaXNSb290KSB7XG4gIGlmIChuZXh0KSB7XG4gICAgLy8gdGVtcG9yYXJpbHkgYXBwZW5kIHRoZSByaWdodCBub2RlLCBpZiBleGlzdHNcbiAgICBub2Rlcy5wdXNoKG5leHQpO1xuICB9XG5cbiAgdmFyIGkgPSAwO1xuXG4gIGZvciAoOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xuICAgIHZhciBwYXJ0aWFsR3JvdXAgPSBjaGVja1BhcnRpYWxHcm91cChub2RlKTtcblxuICAgIGlmIChwYXJ0aWFsR3JvdXApIHtcbiAgICAgIC8vIFJlY3Vyc2l2ZSBERlNcbiAgICAgIC8vICRGbG93Rml4TWU6IG1ha2Ugbm9kZXMgYSAkUmVhZE9ubHlBcnJheSBieSByZXR1cm5pbmcgYSBuZXcgYXJyYXlcbiAgICAgIHRyYXZlcnNlTm9uU3BhY2VOb2RlcyhwYXJ0aWFsR3JvdXAuY2hpbGRyZW4sIGNhbGxiYWNrLCBwcmV2LCBudWxsLCBpc1Jvb3QpO1xuICAgICAgY29udGludWU7XG4gICAgfSAvLyBJZ25vcmUgZXhwbGljaXQgc3BhY2VzIChlLmcuLCBcXDssIFxcLCkgd2hlbiBkZXRlcm1pbmluZyB3aGF0IGltcGxpY2l0XG4gICAgLy8gc3BhY2luZyBzaG91bGQgZ28gYmV0d2VlbiBhdG9tcyBvZiBkaWZmZXJlbnQgY2xhc3Nlc1xuXG5cbiAgICB2YXIgbm9uc3BhY2UgPSAhbm9kZS5oYXNDbGFzcyhcIm1zcGFjZVwiKTtcblxuICAgIGlmIChub25zcGFjZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrKG5vZGUsIHByZXYubm9kZSk7XG5cbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgaWYgKHByZXYuaW5zZXJ0QWZ0ZXIpIHtcbiAgICAgICAgICBwcmV2Lmluc2VydEFmdGVyKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gaW5zZXJ0IGF0IGZyb250XG4gICAgICAgICAgbm9kZXMudW5zaGlmdChyZXN1bHQpO1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChub25zcGFjZSkge1xuICAgICAgcHJldi5ub2RlID0gbm9kZTtcbiAgICB9IGVsc2UgaWYgKGlzUm9vdCAmJiBub2RlLmhhc0NsYXNzKFwibmV3bGluZVwiKSkge1xuICAgICAgcHJldi5ub2RlID0gYnVpbGRIVE1MX21ha2VTcGFuKFtcImxlZnRtb3N0XCJdKTsgLy8gdHJlYXQgbGlrZSBiZWdpbm5pbmcgb2YgbGluZVxuICAgIH1cblxuICAgIHByZXYuaW5zZXJ0QWZ0ZXIgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAobikge1xuICAgICAgICBub2Rlcy5zcGxpY2UoaW5kZXggKyAxLCAwLCBuKTtcbiAgICAgICAgaSsrO1xuICAgICAgfTtcbiAgICB9KGkpO1xuICB9XG5cbiAgaWYgKG5leHQpIHtcbiAgICBub2Rlcy5wb3AoKTtcbiAgfVxufTsgLy8gQ2hlY2sgaWYgZ2l2ZW4gbm9kZSBpcyBhIHBhcnRpYWwgZ3JvdXAsIGkuZS4sIGRvZXMgbm90IGFmZmVjdCBzcGFjaW5nIGFyb3VuZC5cblxuXG52YXIgY2hlY2tQYXJ0aWFsR3JvdXAgPSBmdW5jdGlvbiBjaGVja1BhcnRpYWxHcm91cChub2RlKSB7XG4gIGlmIChub2RlIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCB8fCBub2RlIGluc3RhbmNlb2YgQW5jaG9yIHx8IG5vZGUgaW5zdGFuY2VvZiBTcGFuICYmIG5vZGUuaGFzQ2xhc3MoXCJlbmNsb3NpbmdcIikpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTsgLy8gUmV0dXJuIHRoZSBvdXRlcm1vc3Qgbm9kZSBvZiBhIGRvbVRyZWUuXG5cblxudmFyIGdldE91dGVybW9zdE5vZGUgPSBmdW5jdGlvbiBnZXRPdXRlcm1vc3ROb2RlKG5vZGUsIHNpZGUpIHtcbiAgdmFyIHBhcnRpYWxHcm91cCA9IGNoZWNrUGFydGlhbEdyb3VwKG5vZGUpO1xuXG4gIGlmIChwYXJ0aWFsR3JvdXApIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBwYXJ0aWFsR3JvdXAuY2hpbGRyZW47XG5cbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICBpZiAoc2lkZSA9PT0gXCJyaWdodFwiKSB7XG4gICAgICAgIHJldHVybiBnZXRPdXRlcm1vc3ROb2RlKGNoaWxkcmVuW2NoaWxkcmVuLmxlbmd0aCAtIDFdLCBcInJpZ2h0XCIpO1xuICAgICAgfSBlbHNlIGlmIChzaWRlID09PSBcImxlZnRcIikge1xuICAgICAgICByZXR1cm4gZ2V0T3V0ZXJtb3N0Tm9kZShjaGlsZHJlblswXSwgXCJsZWZ0XCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBub2RlO1xufTsgLy8gUmV0dXJuIG1hdGggYXRvbSBjbGFzcyAobWNsYXNzKSBvZiBhIGRvbVRyZWUuXG4vLyBJZiBgc2lkZWAgaXMgZ2l2ZW4sIGl0IHdpbGwgZ2V0IHRoZSB0eXBlIG9mIHRoZSBvdXRlcm1vc3Qgbm9kZSBhdCBnaXZlbiBzaWRlLlxuXG5cbnZhciBnZXRUeXBlT2ZEb21UcmVlID0gZnVuY3Rpb24gZ2V0VHlwZU9mRG9tVHJlZShub2RlLCBzaWRlKSB7XG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHNpZGUpIHtcbiAgICBub2RlID0gZ2V0T3V0ZXJtb3N0Tm9kZShub2RlLCBzaWRlKTtcbiAgfSAvLyBUaGlzIG1ha2VzIGEgbG90IG9mIGFzc3VtcHRpb25zIGFzIHRvIHdoZXJlIHRoZSB0eXBlIG9mIGF0b21cbiAgLy8gYXBwZWFycy4gIFdlIHNob3VsZCBkbyBhIGJldHRlciBqb2Igb2YgZW5mb3JjaW5nIHRoaXMuXG5cblxuICByZXR1cm4gRG9tRW51bVtub2RlLmNsYXNzZXNbMF1dIHx8IG51bGw7XG59O1xudmFyIG1ha2VOdWxsRGVsaW1pdGVyID0gZnVuY3Rpb24gbWFrZU51bGxEZWxpbWl0ZXIob3B0aW9ucywgY2xhc3Nlcykge1xuICB2YXIgbW9yZUNsYXNzZXMgPSBbXCJudWxsZGVsaW1pdGVyXCJdLmNvbmNhdChvcHRpb25zLmJhc2VTaXppbmdDbGFzc2VzKCkpO1xuICByZXR1cm4gYnVpbGRIVE1MX21ha2VTcGFuKGNsYXNzZXMuY29uY2F0KG1vcmVDbGFzc2VzKSk7XG59O1xuLyoqXG4gKiBidWlsZEdyb3VwIGlzIHRoZSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgZ3JvdXAgYW5kIGNhbGxzIHRoZSBjb3JyZWN0IGdyb3VwVHlwZVxuICogZnVuY3Rpb24gZm9yIGl0LiBJdCBhbHNvIGhhbmRsZXMgdGhlIGludGVyYWN0aW9uIG9mIHNpemUgYW5kIHN0eWxlIGNoYW5nZXNcbiAqIGJldHdlZW4gcGFyZW50cyBhbmQgY2hpbGRyZW4uXG4gKi9cblxudmFyIGJ1aWxkR3JvdXAgPSBmdW5jdGlvbiBidWlsZEdyb3VwKGdyb3VwLCBvcHRpb25zLCBiYXNlT3B0aW9ucykge1xuICBpZiAoIWdyb3VwKSB7XG4gICAgcmV0dXJuIGJ1aWxkSFRNTF9tYWtlU3BhbigpO1xuICB9XG5cbiAgaWYgKF9odG1sR3JvdXBCdWlsZGVyc1tncm91cC50eXBlXSkge1xuICAgIC8vIENhbGwgdGhlIGdyb3VwQnVpbGRlcnMgZnVuY3Rpb25cbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgdmFyIGdyb3VwTm9kZSA9IF9odG1sR3JvdXBCdWlsZGVyc1tncm91cC50eXBlXShncm91cCwgb3B0aW9ucyk7IC8vIElmIHRoZSBzaXplIGNoYW5nZWQgYmV0d2VlbiB0aGUgcGFyZW50IGFuZCB0aGUgY3VycmVudCBncm91cCwgYWNjb3VudFxuICAgIC8vIGZvciB0aGF0IHNpemUgZGlmZmVyZW5jZS5cblxuICAgIGlmIChiYXNlT3B0aW9ucyAmJiBvcHRpb25zLnNpemUgIT09IGJhc2VPcHRpb25zLnNpemUpIHtcbiAgICAgIGdyb3VwTm9kZSA9IGJ1aWxkSFRNTF9tYWtlU3BhbihvcHRpb25zLnNpemluZ0NsYXNzZXMoYmFzZU9wdGlvbnMpLCBbZ3JvdXBOb2RlXSwgb3B0aW9ucyk7XG4gICAgICB2YXIgbXVsdGlwbGllciA9IG9wdGlvbnMuc2l6ZU11bHRpcGxpZXIgLyBiYXNlT3B0aW9ucy5zaXplTXVsdGlwbGllcjtcbiAgICAgIGdyb3VwTm9kZS5oZWlnaHQgKj0gbXVsdGlwbGllcjtcbiAgICAgIGdyb3VwTm9kZS5kZXB0aCAqPSBtdWx0aXBsaWVyO1xuICAgIH1cblxuICAgIHJldHVybiBncm91cE5vZGU7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiR290IGdyb3VwIG9mIHVua25vd24gdHlwZTogJ1wiICsgZ3JvdXAudHlwZSArIFwiJ1wiKTtcbiAgfVxufTtcbi8qKlxuICogQ29tYmluZSBhbiBhcnJheSBvZiBIVE1MIERPTSBub2RlcyAoZS5nLiwgdGhlIG91dHB1dCBvZiBgYnVpbGRFeHByZXNzaW9uYClcbiAqIGludG8gYW4gdW5icmVha2FibGUgSFRNTCBub2RlIG9mIGNsYXNzIC5iYXNlLCB3aXRoIHByb3BlciBzdHJ1dHMgdG9cbiAqIGd1YXJhbnRlZSBjb3JyZWN0IHZlcnRpY2FsIGV4dGVudC4gIGBidWlsZEhUTUxgIGNhbGxzIHRoaXMgcmVwZWF0ZWRseSB0b1xuICogbWFrZSB1cCB0aGUgZW50aXJlIGV4cHJlc3Npb24gYXMgYSBzZXF1ZW5jZSBvZiB1bmJyZWFrYWJsZSB1bml0cy5cbiAqL1xuXG5mdW5jdGlvbiBidWlsZEhUTUxVbmJyZWFrYWJsZShjaGlsZHJlbiwgb3B0aW9ucykge1xuICAvLyBDb21wdXRlIGhlaWdodCBhbmQgZGVwdGggb2YgdGhpcyBjaHVuay5cbiAgdmFyIGJvZHkgPSBidWlsZEhUTUxfbWFrZVNwYW4oW1wiYmFzZVwiXSwgY2hpbGRyZW4sIG9wdGlvbnMpOyAvLyBBZGQgc3RydXQsIHdoaWNoIGVuc3VyZXMgdGhhdCB0aGUgdG9wIG9mIHRoZSBIVE1MIGVsZW1lbnQgZmFsbHMgYXRcbiAgLy8gdGhlIGhlaWdodCBvZiB0aGUgZXhwcmVzc2lvbiwgYW5kIHRoZSBib3R0b20gb2YgdGhlIEhUTUwgZWxlbWVudFxuICAvLyBmYWxscyBhdCB0aGUgZGVwdGggb2YgdGhlIGV4cHJlc3Npb24uXG5cbiAgdmFyIHN0cnV0ID0gYnVpbGRIVE1MX21ha2VTcGFuKFtcInN0cnV0XCJdKTtcbiAgc3RydXQuc3R5bGUuaGVpZ2h0ID0gYm9keS5oZWlnaHQgKyBib2R5LmRlcHRoICsgXCJlbVwiO1xuICBzdHJ1dC5zdHlsZS52ZXJ0aWNhbEFsaWduID0gLWJvZHkuZGVwdGggKyBcImVtXCI7XG4gIGJvZHkuY2hpbGRyZW4udW5zaGlmdChzdHJ1dCk7XG4gIHJldHVybiBib2R5O1xufVxuLyoqXG4gKiBUYWtlIGFuIGVudGlyZSBwYXJzZSB0cmVlLCBhbmQgYnVpbGQgaXQgaW50byBhbiBhcHByb3ByaWF0ZSBzZXQgb2YgSFRNTFxuICogbm9kZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBidWlsZEhUTUwodHJlZSwgb3B0aW9ucykge1xuICAvLyBTdHJpcCBvZmYgb3V0ZXIgdGFnIHdyYXBwZXIgZm9yIHByb2Nlc3NpbmcgYmVsb3cuXG4gIHZhciB0YWcgPSBudWxsO1xuXG4gIGlmICh0cmVlLmxlbmd0aCA9PT0gMSAmJiB0cmVlWzBdLnR5cGUgPT09IFwidGFnXCIpIHtcbiAgICB0YWcgPSB0cmVlWzBdLnRhZztcbiAgICB0cmVlID0gdHJlZVswXS5ib2R5O1xuICB9IC8vIEJ1aWxkIHRoZSBleHByZXNzaW9uIGNvbnRhaW5lZCBpbiB0aGUgdHJlZVxuXG5cbiAgdmFyIGV4cHJlc3Npb24gPSBidWlsZEV4cHJlc3Npb24odHJlZSwgb3B0aW9ucywgXCJyb290XCIpO1xuICB2YXIgZXFuTnVtO1xuXG4gIGlmIChleHByZXNzaW9uLmxlbmd0aCA9PT0gMiAmJiBleHByZXNzaW9uWzFdLmhhc0NsYXNzKFwidGFnXCIpKSB7XG4gICAgLy8gQW4gZW52aXJvbm1lbnQgd2l0aCBhdXRvbWF0aWMgZXF1YXRpb24gbnVtYmVycywgZS5nLiB7Z2F0aGVyfS5cbiAgICBlcW5OdW0gPSBleHByZXNzaW9uLnBvcCgpO1xuICB9XG5cbiAgdmFyIGNoaWxkcmVuID0gW107IC8vIENyZWF0ZSBvbmUgYmFzZSBub2RlIGZvciBlYWNoIGNodW5rIGJldHdlZW4gcG90ZW50aWFsIGxpbmUgYnJlYWtzLlxuICAvLyBUaGUgVGVYQm9vayBbcC4xNzNdIHNheXMgXCJBIGZvcm11bGEgd2lsbCBiZSBicm9rZW4gb25seSBhZnRlciBhXG4gIC8vIHJlbGF0aW9uIHN5bWJvbCBsaWtlICQ9JCBvciAkPCQgb3IgJFxccmlnaHRhcnJvdyQsIG9yIGFmdGVyIGEgYmluYXJ5XG4gIC8vIG9wZXJhdGlvbiBzeW1ib2wgbGlrZSAkKyQgb3IgJC0kIG9yICRcXHRpbWVzJCwgd2hlcmUgdGhlIHJlbGF0aW9uIG9yXG4gIC8vIGJpbmFyeSBvcGVyYXRpb24gaXMgb24gdGhlIGBgb3V0ZXIgbGV2ZWwnJyBvZiB0aGUgZm9ybXVsYSAoaS5lLiwgbm90XG4gIC8vIGVuY2xvc2VkIGluIHsuLi59IGFuZCBub3QgcGFydCBvZiBhbiBcXG92ZXIgY29uc3RydWN0aW9uKS5cIlxuXG4gIHZhciBwYXJ0cyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwcmVzc2lvbi5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2goZXhwcmVzc2lvbltpXSk7XG5cbiAgICBpZiAoZXhwcmVzc2lvbltpXS5oYXNDbGFzcyhcIm1iaW5cIikgfHwgZXhwcmVzc2lvbltpXS5oYXNDbGFzcyhcIm1yZWxcIikgfHwgZXhwcmVzc2lvbltpXS5oYXNDbGFzcyhcImFsbG93YnJlYWtcIikpIHtcbiAgICAgIC8vIFB1dCBhbnkgcG9zdC1vcGVyYXRvciBnbHVlIG9uIHNhbWUgbGluZSBhcyBvcGVyYXRvci5cbiAgICAgIC8vIFdhdGNoIGZvciBcXG5vYnJlYWsgYWxvbmcgdGhlIHdheSwgYW5kIHN0b3AgYXQgXFxuZXdsaW5lLlxuICAgICAgdmFyIG5vYnJlYWsgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKGkgPCBleHByZXNzaW9uLmxlbmd0aCAtIDEgJiYgZXhwcmVzc2lvbltpICsgMV0uaGFzQ2xhc3MoXCJtc3BhY2VcIikgJiYgIWV4cHJlc3Npb25baSArIDFdLmhhc0NsYXNzKFwibmV3bGluZVwiKSkge1xuICAgICAgICBpKys7XG4gICAgICAgIHBhcnRzLnB1c2goZXhwcmVzc2lvbltpXSk7XG5cbiAgICAgICAgaWYgKGV4cHJlc3Npb25baV0uaGFzQ2xhc3MoXCJub2JyZWFrXCIpKSB7XG4gICAgICAgICAgbm9icmVhayA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gRG9uJ3QgYWxsb3cgYnJlYWsgaWYgXFxub2JyZWFrIGFtb25nIHRoZSBwb3N0LW9wZXJhdG9yIGdsdWUuXG5cblxuICAgICAgaWYgKCFub2JyZWFrKSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goYnVpbGRIVE1MVW5icmVha2FibGUocGFydHMsIG9wdGlvbnMpKTtcbiAgICAgICAgcGFydHMgPSBbXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGV4cHJlc3Npb25baV0uaGFzQ2xhc3MoXCJuZXdsaW5lXCIpKSB7XG4gICAgICAvLyBXcml0ZSB0aGUgbGluZSBleGNlcHQgdGhlIG5ld2xpbmVcbiAgICAgIHBhcnRzLnBvcCgpO1xuXG4gICAgICBpZiAocGFydHMubGVuZ3RoID4gMCkge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKGJ1aWxkSFRNTFVuYnJlYWthYmxlKHBhcnRzLCBvcHRpb25zKSk7XG4gICAgICAgIHBhcnRzID0gW107XG4gICAgICB9IC8vIFB1dCB0aGUgbmV3bGluZSBhdCB0aGUgdG9wIGxldmVsXG5cblxuICAgICAgY2hpbGRyZW4ucHVzaChleHByZXNzaW9uW2ldKTtcbiAgICB9XG4gIH1cblxuICBpZiAocGFydHMubGVuZ3RoID4gMCkge1xuICAgIGNoaWxkcmVuLnB1c2goYnVpbGRIVE1MVW5icmVha2FibGUocGFydHMsIG9wdGlvbnMpKTtcbiAgfSAvLyBOb3csIGlmIHRoZXJlIHdhcyBhIHRhZywgYnVpbGQgaXQgdG9vIGFuZCBhcHBlbmQgaXQgYXMgYSBmaW5hbCBjaGlsZC5cblxuXG4gIHZhciB0YWdDaGlsZDtcblxuICBpZiAodGFnKSB7XG4gICAgdGFnQ2hpbGQgPSBidWlsZEhUTUxVbmJyZWFrYWJsZShidWlsZEV4cHJlc3Npb24odGFnLCBvcHRpb25zLCB0cnVlKSk7XG4gICAgdGFnQ2hpbGQuY2xhc3NlcyA9IFtcInRhZ1wiXTtcbiAgICBjaGlsZHJlbi5wdXNoKHRhZ0NoaWxkKTtcbiAgfSBlbHNlIGlmIChlcW5OdW0pIHtcbiAgICBjaGlsZHJlbi5wdXNoKGVxbk51bSk7XG4gIH1cblxuICB2YXIgaHRtbE5vZGUgPSBidWlsZEhUTUxfbWFrZVNwYW4oW1wia2F0ZXgtaHRtbFwiXSwgY2hpbGRyZW4pO1xuICBodG1sTm9kZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCBcInRydWVcIik7IC8vIEFkanVzdCB0aGUgc3RydXQgb2YgdGhlIHRhZyB0byBiZSB0aGUgbWF4aW11bSBoZWlnaHQgb2YgYWxsIGNoaWxkcmVuXG4gIC8vICh0aGUgaGVpZ2h0IG9mIHRoZSBlbmNsb3NpbmcgaHRtbE5vZGUpIGZvciBwcm9wZXIgdmVydGljYWwgYWxpZ25tZW50LlxuXG4gIGlmICh0YWdDaGlsZCkge1xuICAgIHZhciBzdHJ1dCA9IHRhZ0NoaWxkLmNoaWxkcmVuWzBdO1xuICAgIHN0cnV0LnN0eWxlLmhlaWdodCA9IGh0bWxOb2RlLmhlaWdodCArIGh0bWxOb2RlLmRlcHRoICsgXCJlbVwiO1xuICAgIHN0cnV0LnN0eWxlLnZlcnRpY2FsQWxpZ24gPSAtaHRtbE5vZGUuZGVwdGggKyBcImVtXCI7XG4gIH1cblxuICByZXR1cm4gaHRtbE5vZGU7XG59XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvbWF0aE1MVHJlZS5qc1xuLyoqXG4gKiBUaGVzZSBvYmplY3RzIHN0b3JlIGRhdGEgYWJvdXQgTWF0aE1MIG5vZGVzLiBUaGlzIGlzIHRoZSBNYXRoTUwgZXF1aXZhbGVudFxuICogb2YgdGhlIHR5cGVzIGluIGRvbVRyZWUuanMuIFNpbmNlIE1hdGhNTCBoYW5kbGVzIGl0cyBvd24gcmVuZGVyaW5nLCBhbmRcbiAqIHNpbmNlIHdlJ3JlIG1haW5seSB1c2luZyBNYXRoTUwgdG8gaW1wcm92ZSBhY2Nlc3NpYmlsaXR5LCB3ZSBkb24ndCBtYW5hZ2VcbiAqIGFueSBvZiB0aGUgc3R5bGluZyBzdGF0ZSB0aGF0IHRoZSBwbGFpbiBET00gbm9kZXMgZG8uXG4gKlxuICogVGhlIGB0b05vZGVgIGFuZCBgdG9NYXJrdXBgIGZ1bmN0aW9ucyB3b3JrIHNpbWxhcmx5IHRvIGhvdyB0aGV5IGRvIGluXG4gKiBkb21UcmVlLmpzLCBjcmVhdGluZyBuYW1lc3BhY2VkIERPTSBub2RlcyBhbmQgSFRNTCB0ZXh0IG1hcmt1cCByZXNwZWN0aXZlbHkuXG4gKi9cblxuXG5cbmZ1bmN0aW9uIG5ld0RvY3VtZW50RnJhZ21lbnQoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIG5ldyBEb2N1bWVudEZyYWdtZW50KGNoaWxkcmVuKTtcbn1cbi8qKlxuICogVGhpcyBub2RlIHJlcHJlc2VudHMgYSBnZW5lcmFsIHB1cnBvc2UgTWF0aE1MIG5vZGUgb2YgYW55IHR5cGUuIFRoZVxuICogY29uc3RydWN0b3IgcmVxdWlyZXMgdGhlIHR5cGUgb2Ygbm9kZSB0byBjcmVhdGUgKGZvciBleGFtcGxlLCBgXCJtb1wiYCBvclxuICogYFwibXNwYWNlXCJgLCBjb3JyZXNwb25kaW5nIHRvIGA8bW8+YCBhbmQgYDxtc3BhY2U+YCB0YWdzKS5cbiAqL1xuXG52YXIgTWF0aE5vZGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNYXRoTm9kZSh0eXBlLCBjaGlsZHJlbiwgY2xhc3Nlcykge1xuICAgIHRoaXMudHlwZSA9IHZvaWQgMDtcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5jaGlsZHJlbiA9IHZvaWQgMDtcbiAgICB0aGlzLmNsYXNzZXMgPSB2b2lkIDA7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcbiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW4gfHwgW107XG4gICAgdGhpcy5jbGFzc2VzID0gY2xhc3NlcyB8fCBbXTtcbiAgfVxuICAvKipcbiAgICogU2V0cyBhbiBhdHRyaWJ1dGUgb24gYSBNYXRoTUwgbm9kZS4gTWF0aE1MIGRlcGVuZHMgb24gYXR0cmlidXRlcyB0byBjb252ZXkgYVxuICAgKiBzZW1hbnRpYyBjb250ZW50LCBzbyB0aGlzIGlzIHVzZWQgaGVhdmlseS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gTWF0aE5vZGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5zZXRBdHRyaWJ1dGUgPSBmdW5jdGlvbiBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLmF0dHJpYnV0ZXNbbmFtZV0gPSB2YWx1ZTtcbiAgfVxuICAvKipcbiAgICogR2V0cyBhbiBhdHRyaWJ1dGUgb24gYSBNYXRoTUwgbm9kZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0QXR0cmlidXRlID0gZnVuY3Rpb24gZ2V0QXR0cmlidXRlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzW25hbWVdO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgbWF0aCBub2RlIGludG8gYSBNYXRoTUwtbmFtZXNwYWNlZCBET00gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9Ob2RlID0gZnVuY3Rpb24gdG9Ob2RlKCkge1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLCB0aGlzLnR5cGUpO1xuXG4gICAgZm9yICh2YXIgYXR0ciBpbiB0aGlzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5hdHRyaWJ1dGVzLCBhdHRyKSkge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyLCB0aGlzLmF0dHJpYnV0ZXNbYXR0cl0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmNsYXNzZXMubGVuZ3RoID4gMCkge1xuICAgICAgbm9kZS5jbGFzc05hbWUgPSBjcmVhdGVDbGFzcyh0aGlzLmNsYXNzZXMpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgbm9kZS5hcHBlbmRDaGlsZCh0aGlzLmNoaWxkcmVuW2ldLnRvTm9kZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgdGhlIG1hdGggbm9kZSBpbnRvIGFuIEhUTUwgbWFya3VwIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9NYXJrdXAgPSBmdW5jdGlvbiB0b01hcmt1cCgpIHtcbiAgICB2YXIgbWFya3VwID0gXCI8XCIgKyB0aGlzLnR5cGU7IC8vIEFkZCB0aGUgYXR0cmlidXRlc1xuXG4gICAgZm9yICh2YXIgYXR0ciBpbiB0aGlzLmF0dHJpYnV0ZXMpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5hdHRyaWJ1dGVzLCBhdHRyKSkge1xuICAgICAgICBtYXJrdXAgKz0gXCIgXCIgKyBhdHRyICsgXCI9XFxcIlwiO1xuICAgICAgICBtYXJrdXAgKz0gdXRpbHMuZXNjYXBlKHRoaXMuYXR0cmlidXRlc1thdHRyXSk7XG4gICAgICAgIG1hcmt1cCArPSBcIlxcXCJcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5jbGFzc2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIG1hcmt1cCArPSBcIiBjbGFzcyA9XFxcIlwiICsgdXRpbHMuZXNjYXBlKGNyZWF0ZUNsYXNzKHRoaXMuY2xhc3NlcykpICsgXCJcXFwiXCI7XG4gICAgfVxuXG4gICAgbWFya3VwICs9IFwiPlwiO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBtYXJrdXAgKz0gdGhpcy5jaGlsZHJlbltpXS50b01hcmt1cCgpO1xuICAgIH1cblxuICAgIG1hcmt1cCArPSBcIjwvXCIgKyB0aGlzLnR5cGUgKyBcIj5cIjtcbiAgICByZXR1cm4gbWFya3VwO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgbWF0aCBub2RlIGludG8gYSBzdHJpbmcsIHNpbWlsYXIgdG8gaW5uZXJUZXh0LCBidXQgZXNjYXBlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9UZXh0ID0gZnVuY3Rpb24gdG9UZXh0KCkge1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLm1hcChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgIHJldHVybiBjaGlsZC50b1RleHQoKTtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9O1xuXG4gIHJldHVybiBNYXRoTm9kZTtcbn0oKTtcbi8qKlxuICogVGhpcyBub2RlIHJlcHJlc2VudHMgYSBwaWVjZSBvZiB0ZXh0LlxuICovXG5cbnZhciBUZXh0Tm9kZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFRleHROb2RlKHRleHQpIHtcbiAgICB0aGlzLnRleHQgPSB2b2lkIDA7XG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgdGhlIHRleHQgbm9kZSBpbnRvIGEgRE9NIHRleHQgbm9kZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvMiA9IFRleHROb2RlLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLnRvTm9kZSA9IGZ1bmN0aW9uIHRvTm9kZSgpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy50ZXh0KTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgdGhlIHRleHQgbm9kZSBpbnRvIGVzY2FwZWQgSFRNTCBtYXJrdXBcbiAgICogKHJlcHJlc2VudGluZyB0aGUgdGV4dCBpdHNlbGYpLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90bzIudG9NYXJrdXAgPSBmdW5jdGlvbiB0b01hcmt1cCgpIHtcbiAgICByZXR1cm4gdXRpbHMuZXNjYXBlKHRoaXMudG9UZXh0KCkpO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0cyB0aGUgdGV4dCBub2RlIGludG8gYSBzdHJpbmdcbiAgICogKHJlcHJlc2VudGluZyB0aGUgdGV4dCBpdGVzZWxmKS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8yLnRvVGV4dCA9IGZ1bmN0aW9uIHRvVGV4dCgpIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0O1xuICB9O1xuXG4gIHJldHVybiBUZXh0Tm9kZTtcbn0oKTtcbi8qKlxuICogVGhpcyBub2RlIHJlcHJlc2VudHMgYSBzcGFjZSwgYnV0IG1heSByZW5kZXIgYXMgPG1zcGFjZS4uLi8+IG9yIGFzIHRleHQsXG4gKiBkZXBlbmRpbmcgb24gdGhlIHdpZHRoLlxuICovXG5cbnZhciBTcGFjZU5vZGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlIGEgU3BhY2Ugbm9kZSB3aXRoIHdpZHRoIGdpdmVuIGluIENTUyBlbXMuXG4gICAqL1xuICBmdW5jdGlvbiBTcGFjZU5vZGUod2lkdGgpIHtcbiAgICB0aGlzLndpZHRoID0gdm9pZCAwO1xuICAgIHRoaXMuY2hhcmFjdGVyID0gdm9pZCAwO1xuICAgIHRoaXMud2lkdGggPSB3aWR0aDsgLy8gU2VlIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAwL1dELU1hdGhNTDItMjAwMDAzMjgvY2hhcHRlcjYuaHRtbFxuICAgIC8vIGZvciBhIHRhYmxlIG9mIHNwYWNlLWxpa2UgY2hhcmFjdGVycy4gIFdlIHVzZSBVbmljb2RlXG4gICAgLy8gcmVwcmVzZW50YXRpb25zIGluc3RlYWQgb2YgJkxvbmdOYW1lczsgYXMgaXQncyBub3QgY2xlYXIgaG93IHRvXG4gICAgLy8gbWFrZSB0aGUgbGF0dGVyIHZpYSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZS5cblxuICAgIGlmICh3aWR0aCA+PSAwLjA1NTU1ICYmIHdpZHRoIDw9IDAuMDU1NTYpIHtcbiAgICAgIHRoaXMuY2hhcmFjdGVyID0gXCJcXHUyMDBBXCI7IC8vICZWZXJ5VGhpblNwYWNlO1xuICAgIH0gZWxzZSBpZiAod2lkdGggPj0gMC4xNjY2ICYmIHdpZHRoIDw9IDAuMTY2Nykge1xuICAgICAgdGhpcy5jaGFyYWN0ZXIgPSBcIlxcdTIwMDlcIjsgLy8gJlRoaW5TcGFjZTtcbiAgICB9IGVsc2UgaWYgKHdpZHRoID49IDAuMjIyMiAmJiB3aWR0aCA8PSAwLjIyMjMpIHtcbiAgICAgIHRoaXMuY2hhcmFjdGVyID0gXCJcXHUyMDA1XCI7IC8vICZNZWRpdW1TcGFjZTtcbiAgICB9IGVsc2UgaWYgKHdpZHRoID49IDAuMjc3NyAmJiB3aWR0aCA8PSAwLjI3NzgpIHtcbiAgICAgIHRoaXMuY2hhcmFjdGVyID0gXCJcXHUyMDA1XFx1MjAwQVwiOyAvLyAmVGhpY2tTcGFjZTtcbiAgICB9IGVsc2UgaWYgKHdpZHRoID49IC0wLjA1NTU2ICYmIHdpZHRoIDw9IC0wLjA1NTU1KSB7XG4gICAgICB0aGlzLmNoYXJhY3RlciA9IFwiXFx1MjAwQVxcdTIwNjNcIjsgLy8gJk5lZ2F0aXZlVmVyeVRoaW5TcGFjZTtcbiAgICB9IGVsc2UgaWYgKHdpZHRoID49IC0wLjE2NjcgJiYgd2lkdGggPD0gLTAuMTY2Nikge1xuICAgICAgdGhpcy5jaGFyYWN0ZXIgPSBcIlxcdTIwMDlcXHUyMDYzXCI7IC8vICZOZWdhdGl2ZVRoaW5TcGFjZTtcbiAgICB9IGVsc2UgaWYgKHdpZHRoID49IC0wLjIyMjMgJiYgd2lkdGggPD0gLTAuMjIyMikge1xuICAgICAgdGhpcy5jaGFyYWN0ZXIgPSBcIlxcdTIwNUZcXHUyMDYzXCI7IC8vICZOZWdhdGl2ZU1lZGl1bVNwYWNlO1xuICAgIH0gZWxzZSBpZiAod2lkdGggPj0gLTAuMjc3OCAmJiB3aWR0aCA8PSAtMC4yNzc3KSB7XG4gICAgICB0aGlzLmNoYXJhY3RlciA9IFwiXFx1MjAwNVxcdTIwNjNcIjsgLy8gJk5lZ2F0aXZlVGhpY2tTcGFjZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jaGFyYWN0ZXIgPSBudWxsO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgdGhlIG1hdGggbm9kZSBpbnRvIGEgTWF0aE1MLW5hbWVzcGFjZWQgRE9NIGVsZW1lbnQuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90bzMgPSBTcGFjZU5vZGUucHJvdG90eXBlO1xuXG4gIF9wcm90bzMudG9Ob2RlID0gZnVuY3Rpb24gdG9Ob2RlKCkge1xuICAgIGlmICh0aGlzLmNoYXJhY3Rlcikge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMuY2hhcmFjdGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsIFwibXNwYWNlXCIpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCB0aGlzLndpZHRoICsgXCJlbVwiKTtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgdGhlIG1hdGggbm9kZSBpbnRvIGFuIEhUTUwgbWFya3VwIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8zLnRvTWFya3VwID0gZnVuY3Rpb24gdG9NYXJrdXAoKSB7XG4gICAgaWYgKHRoaXMuY2hhcmFjdGVyKSB7XG4gICAgICByZXR1cm4gXCI8bXRleHQ+XCIgKyB0aGlzLmNoYXJhY3RlciArIFwiPC9tdGV4dD5cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiPG1zcGFjZSB3aWR0aD1cXFwiXCIgKyB0aGlzLndpZHRoICsgXCJlbVxcXCIvPlwiO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgdGhlIG1hdGggbm9kZSBpbnRvIGEgc3RyaW5nLCBzaW1pbGFyIHRvIGlubmVyVGV4dC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8zLnRvVGV4dCA9IGZ1bmN0aW9uIHRvVGV4dCgpIHtcbiAgICBpZiAodGhpcy5jaGFyYWN0ZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNoYXJhY3RlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFwiIFwiO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU3BhY2VOb2RlO1xufSgpO1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBtYXRoTUxUcmVlID0gKHtcbiAgTWF0aE5vZGU6IE1hdGhOb2RlLFxuICBUZXh0Tm9kZTogVGV4dE5vZGUsXG4gIFNwYWNlTm9kZTogU3BhY2VOb2RlLFxuICBuZXdEb2N1bWVudEZyYWdtZW50OiBuZXdEb2N1bWVudEZyYWdtZW50XG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9idWlsZE1hdGhNTC5qc1xuLyoqXG4gKiBUaGlzIGZpbGUgY29udmVydHMgYSBwYXJzZSB0cmVlIGludG8gYSBjb29yZXNwb25kaW5nIE1hdGhNTCB0cmVlLiBUaGUgbWFpblxuICogZW50cnkgcG9pbnQgaXMgdGhlIGBidWlsZE1hdGhNTGAgZnVuY3Rpb24sIHdoaWNoIHRha2VzIGEgcGFyc2UgdHJlZSBmcm9tIHRoZVxuICogcGFyc2VyLlxuICovXG5cblxuXG5cblxuXG5cblxuXG4vKipcbiAqIFRha2VzIGEgc3ltYm9sIGFuZCBjb252ZXJ0cyBpdCBpbnRvIGEgTWF0aE1MIHRleHQgbm9kZSBhZnRlciBwZXJmb3JtaW5nXG4gKiBvcHRpb25hbCByZXBsYWNlbWVudCBmcm9tIHN5bWJvbHMuanMuXG4gKi9cbnZhciBtYWtlVGV4dCA9IGZ1bmN0aW9uIG1ha2VUZXh0KHRleHQsIG1vZGUsIG9wdGlvbnMpIHtcbiAgaWYgKHNyY19zeW1ib2xzW21vZGVdW3RleHRdICYmIHNyY19zeW1ib2xzW21vZGVdW3RleHRdLnJlcGxhY2UgJiYgdGV4dC5jaGFyQ29kZUF0KDApICE9PSAweEQ4MzUgJiYgIShsaWdhdHVyZXMuaGFzT3duUHJvcGVydHkodGV4dCkgJiYgb3B0aW9ucyAmJiAob3B0aW9ucy5mb250RmFtaWx5ICYmIG9wdGlvbnMuZm9udEZhbWlseS5zdWJzdHIoNCwgMikgPT09IFwidHRcIiB8fCBvcHRpb25zLmZvbnQgJiYgb3B0aW9ucy5mb250LnN1YnN0cig0LCAyKSA9PT0gXCJ0dFwiKSkpIHtcbiAgICB0ZXh0ID0gc3JjX3N5bWJvbHNbbW9kZV1bdGV4dF0ucmVwbGFjZTtcbiAgfVxuXG4gIHJldHVybiBuZXcgbWF0aE1MVHJlZS5UZXh0Tm9kZSh0ZXh0KTtcbn07XG4vKipcbiAqIFdyYXAgdGhlIGdpdmVuIGFycmF5IG9mIG5vZGVzIGluIGFuIDxtcm93PiBub2RlIGlmIG5lZWRlZCwgaS5lLixcbiAqIHVubGVzcyB0aGUgYXJyYXkgaGFzIGxlbmd0aCAxLiAgQWx3YXlzIHJldHVybnMgYSBzaW5nbGUgbm9kZS5cbiAqL1xuXG52YXIgbWFrZVJvdyA9IGZ1bmN0aW9uIG1ha2VSb3coYm9keSkge1xuICBpZiAoYm9keS5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gYm9keVswXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtcm93XCIsIGJvZHkpO1xuICB9XG59O1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBtYXRoIHZhcmlhbnQgYXMgYSBzdHJpbmcgb3IgbnVsbCBpZiBub25lIGlzIHJlcXVpcmVkLlxuICovXG5cbnZhciBnZXRWYXJpYW50ID0gZnVuY3Rpb24gZ2V0VmFyaWFudChncm91cCwgb3B0aW9ucykge1xuICAvLyBIYW5kbGUgXFx0ZXh0Li4uIGZvbnQgc3BlY2lmaWVycyBhcyBiZXN0IHdlIGNhbi5cbiAgLy8gTWF0aE1MIGhhcyBhIGxpbWl0ZWQgbGlzdCBvZiBhbGxvd2FibGUgbWF0aHZhcmlhbnQgc3BlY2lmaWVyczsgc2VlXG4gIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9NYXRoTUwzL2NoYXB0ZXIzLmh0bWwjcHJlc20uY29tbWF0dFxuICBpZiAob3B0aW9ucy5mb250RmFtaWx5ID09PSBcInRleHR0dFwiKSB7XG4gICAgcmV0dXJuIFwibW9ub3NwYWNlXCI7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5mb250RmFtaWx5ID09PSBcInRleHRzZlwiKSB7XG4gICAgaWYgKG9wdGlvbnMuZm9udFNoYXBlID09PSBcInRleHRpdFwiICYmIG9wdGlvbnMuZm9udFdlaWdodCA9PT0gXCJ0ZXh0YmZcIikge1xuICAgICAgcmV0dXJuIFwic2Fucy1zZXJpZi1ib2xkLWl0YWxpY1wiO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5mb250U2hhcGUgPT09IFwidGV4dGl0XCIpIHtcbiAgICAgIHJldHVybiBcInNhbnMtc2VyaWYtaXRhbGljXCI7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmZvbnRXZWlnaHQgPT09IFwidGV4dGJmXCIpIHtcbiAgICAgIHJldHVybiBcImJvbGQtc2Fucy1zZXJpZlwiO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gXCJzYW5zLXNlcmlmXCI7XG4gICAgfVxuICB9IGVsc2UgaWYgKG9wdGlvbnMuZm9udFNoYXBlID09PSBcInRleHRpdFwiICYmIG9wdGlvbnMuZm9udFdlaWdodCA9PT0gXCJ0ZXh0YmZcIikge1xuICAgIHJldHVybiBcImJvbGQtaXRhbGljXCI7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5mb250U2hhcGUgPT09IFwidGV4dGl0XCIpIHtcbiAgICByZXR1cm4gXCJpdGFsaWNcIjtcbiAgfSBlbHNlIGlmIChvcHRpb25zLmZvbnRXZWlnaHQgPT09IFwidGV4dGJmXCIpIHtcbiAgICByZXR1cm4gXCJib2xkXCI7XG4gIH1cblxuICB2YXIgZm9udCA9IG9wdGlvbnMuZm9udDtcblxuICBpZiAoIWZvbnQgfHwgZm9udCA9PT0gXCJtYXRobm9ybWFsXCIpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBtb2RlID0gZ3JvdXAubW9kZTtcblxuICBpZiAoZm9udCA9PT0gXCJtYXRoaXRcIikge1xuICAgIHJldHVybiBcIml0YWxpY1wiO1xuICB9IGVsc2UgaWYgKGZvbnQgPT09IFwiYm9sZHN5bWJvbFwiKSB7XG4gICAgcmV0dXJuIGdyb3VwLnR5cGUgPT09IFwidGV4dG9yZFwiID8gXCJib2xkXCIgOiBcImJvbGQtaXRhbGljXCI7XG4gIH0gZWxzZSBpZiAoZm9udCA9PT0gXCJtYXRoYmZcIikge1xuICAgIHJldHVybiBcImJvbGRcIjtcbiAgfSBlbHNlIGlmIChmb250ID09PSBcIm1hdGhiYlwiKSB7XG4gICAgcmV0dXJuIFwiZG91YmxlLXN0cnVja1wiO1xuICB9IGVsc2UgaWYgKGZvbnQgPT09IFwibWF0aGZyYWtcIikge1xuICAgIHJldHVybiBcImZyYWt0dXJcIjtcbiAgfSBlbHNlIGlmIChmb250ID09PSBcIm1hdGhzY3JcIiB8fCBmb250ID09PSBcIm1hdGhjYWxcIikge1xuICAgIC8vIE1hdGhNTCBtYWtlcyBubyBkaXN0aW5jdGlvbiBiZXR3ZWVuIHNjcmlwdCBhbmQgY2FsaWdyYWhwaWNcbiAgICByZXR1cm4gXCJzY3JpcHRcIjtcbiAgfSBlbHNlIGlmIChmb250ID09PSBcIm1hdGhzZlwiKSB7XG4gICAgcmV0dXJuIFwic2Fucy1zZXJpZlwiO1xuICB9IGVsc2UgaWYgKGZvbnQgPT09IFwibWF0aHR0XCIpIHtcbiAgICByZXR1cm4gXCJtb25vc3BhY2VcIjtcbiAgfVxuXG4gIHZhciB0ZXh0ID0gZ3JvdXAudGV4dDtcblxuICBpZiAodXRpbHMuY29udGFpbnMoW1wiXFxcXGltYXRoXCIsIFwiXFxcXGptYXRoXCJdLCB0ZXh0KSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHNyY19zeW1ib2xzW21vZGVdW3RleHRdICYmIHNyY19zeW1ib2xzW21vZGVdW3RleHRdLnJlcGxhY2UpIHtcbiAgICB0ZXh0ID0gc3JjX3N5bWJvbHNbbW9kZV1bdGV4dF0ucmVwbGFjZTtcbiAgfVxuXG4gIHZhciBmb250TmFtZSA9IGJ1aWxkQ29tbW9uLmZvbnRNYXBbZm9udF0uZm9udE5hbWU7XG5cbiAgaWYgKGdldENoYXJhY3Rlck1ldHJpY3ModGV4dCwgZm9udE5hbWUsIG1vZGUpKSB7XG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLmZvbnRNYXBbZm9udF0udmFyaWFudDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufTtcbi8qKlxuICogVGFrZXMgYSBsaXN0IG9mIG5vZGVzLCBidWlsZHMgdGhlbSwgYW5kIHJldHVybnMgYSBsaXN0IG9mIHRoZSBnZW5lcmF0ZWRcbiAqIE1hdGhNTCBub2Rlcy4gIEFsc28gY29tYmluZSBjb25zZWN1dGl2ZSA8bXRleHQ+IG91dHB1dHMgaW50byBhIHNpbmdsZVxuICogPG10ZXh0PiB0YWcuXG4gKi9cblxudmFyIGJ1aWxkTWF0aE1MX2J1aWxkRXhwcmVzc2lvbiA9IGZ1bmN0aW9uIGJ1aWxkRXhwcmVzc2lvbihleHByZXNzaW9uLCBvcHRpb25zLCBpc09yZGdyb3VwKSB7XG4gIGlmIChleHByZXNzaW9uLmxlbmd0aCA9PT0gMSkge1xuICAgIHZhciBncm91cCA9IGJ1aWxkTWF0aE1MX2J1aWxkR3JvdXAoZXhwcmVzc2lvblswXSwgb3B0aW9ucyk7XG5cbiAgICBpZiAoaXNPcmRncm91cCAmJiBncm91cCBpbnN0YW5jZW9mIE1hdGhOb2RlICYmIGdyb3VwLnR5cGUgPT09IFwibW9cIikge1xuICAgICAgLy8gV2hlbiBUZVggd3JpdGVycyB3YW50IHRvIHN1cHByZXNzIHNwYWNpbmcgb24gYW4gb3BlcmF0b3IsXG4gICAgICAvLyB0aGV5IG9mdGVuIHB1dCB0aGUgb3BlcmF0b3IgYnkgaXRzZWxmIGluc2lkZSBicmFjZXMuXG4gICAgICBncm91cC5zZXRBdHRyaWJ1dGUoXCJsc3BhY2VcIiwgXCIwZW1cIik7XG4gICAgICBncm91cC5zZXRBdHRyaWJ1dGUoXCJyc3BhY2VcIiwgXCIwZW1cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtncm91cF07XG4gIH1cblxuICB2YXIgZ3JvdXBzID0gW107XG4gIHZhciBsYXN0R3JvdXA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHByZXNzaW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIF9ncm91cCA9IGJ1aWxkTWF0aE1MX2J1aWxkR3JvdXAoZXhwcmVzc2lvbltpXSwgb3B0aW9ucyk7XG5cbiAgICBpZiAoX2dyb3VwIGluc3RhbmNlb2YgTWF0aE5vZGUgJiYgbGFzdEdyb3VwIGluc3RhbmNlb2YgTWF0aE5vZGUpIHtcbiAgICAgIC8vIENvbmNhdGVuYXRlIGFkamFjZW50IDxtdGV4dD5zXG4gICAgICBpZiAoX2dyb3VwLnR5cGUgPT09ICdtdGV4dCcgJiYgbGFzdEdyb3VwLnR5cGUgPT09ICdtdGV4dCcgJiYgX2dyb3VwLmdldEF0dHJpYnV0ZSgnbWF0aHZhcmlhbnQnKSA9PT0gbGFzdEdyb3VwLmdldEF0dHJpYnV0ZSgnbWF0aHZhcmlhbnQnKSkge1xuICAgICAgICB2YXIgX2xhc3RHcm91cCRjaGlsZHJlbjtcblxuICAgICAgICAoX2xhc3RHcm91cCRjaGlsZHJlbiA9IGxhc3RHcm91cC5jaGlsZHJlbikucHVzaC5hcHBseShfbGFzdEdyb3VwJGNoaWxkcmVuLCBfZ3JvdXAuY2hpbGRyZW4pO1xuXG4gICAgICAgIGNvbnRpbnVlOyAvLyBDb25jYXRlbmF0ZSBhZGphY2VudCA8bW4+c1xuICAgICAgfSBlbHNlIGlmIChfZ3JvdXAudHlwZSA9PT0gJ21uJyAmJiBsYXN0R3JvdXAudHlwZSA9PT0gJ21uJykge1xuICAgICAgICB2YXIgX2xhc3RHcm91cCRjaGlsZHJlbjI7XG5cbiAgICAgICAgKF9sYXN0R3JvdXAkY2hpbGRyZW4yID0gbGFzdEdyb3VwLmNoaWxkcmVuKS5wdXNoLmFwcGx5KF9sYXN0R3JvdXAkY2hpbGRyZW4yLCBfZ3JvdXAuY2hpbGRyZW4pO1xuXG4gICAgICAgIGNvbnRpbnVlOyAvLyBDb25jYXRlbmF0ZSA8bW4+Li4uPC9tbj4gZm9sbG93ZWQgYnkgPG1pPi48L21pPlxuICAgICAgfSBlbHNlIGlmIChfZ3JvdXAudHlwZSA9PT0gJ21pJyAmJiBfZ3JvdXAuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIGxhc3RHcm91cC50eXBlID09PSAnbW4nKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IF9ncm91cC5jaGlsZHJlblswXTtcblxuICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBUZXh0Tm9kZSAmJiBjaGlsZC50ZXh0ID09PSAnLicpIHtcbiAgICAgICAgICB2YXIgX2xhc3RHcm91cCRjaGlsZHJlbjM7XG5cbiAgICAgICAgICAoX2xhc3RHcm91cCRjaGlsZHJlbjMgPSBsYXN0R3JvdXAuY2hpbGRyZW4pLnB1c2guYXBwbHkoX2xhc3RHcm91cCRjaGlsZHJlbjMsIF9ncm91cC5jaGlsZHJlbik7XG5cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChsYXN0R3JvdXAudHlwZSA9PT0gJ21pJyAmJiBsYXN0R3JvdXAuY2hpbGRyZW4ubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHZhciBsYXN0Q2hpbGQgPSBsYXN0R3JvdXAuY2hpbGRyZW5bMF07XG5cbiAgICAgICAgaWYgKGxhc3RDaGlsZCBpbnN0YW5jZW9mIFRleHROb2RlICYmIGxhc3RDaGlsZC50ZXh0ID09PSBcIlxcdTAzMzhcIiAmJiAoX2dyb3VwLnR5cGUgPT09ICdtbycgfHwgX2dyb3VwLnR5cGUgPT09ICdtaScgfHwgX2dyb3VwLnR5cGUgPT09ICdtbicpKSB7XG4gICAgICAgICAgdmFyIF9jaGlsZCA9IF9ncm91cC5jaGlsZHJlblswXTtcblxuICAgICAgICAgIGlmIChfY2hpbGQgaW5zdGFuY2VvZiBUZXh0Tm9kZSAmJiBfY2hpbGQudGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBPdmVybGF5IHdpdGggY29tYmluaW5nIGNoYXJhY3RlciBsb25nIHNvbGlkdXNcbiAgICAgICAgICAgIF9jaGlsZC50ZXh0ID0gX2NoaWxkLnRleHQuc2xpY2UoMCwgMSkgKyBcIlxcdTAzMzhcIiArIF9jaGlsZC50ZXh0LnNsaWNlKDEpO1xuICAgICAgICAgICAgZ3JvdXBzLnBvcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGdyb3Vwcy5wdXNoKF9ncm91cCk7XG4gICAgbGFzdEdyb3VwID0gX2dyb3VwO1xuICB9XG5cbiAgcmV0dXJuIGdyb3Vwcztcbn07XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gYnVpbGRFeHByZXNzaW9uLCBidXQgd3JhcHMgdGhlIGVsZW1lbnRzIGluIGFuIDxtcm93PlxuICogaWYgdGhlcmUncyBtb3JlIHRoYW4gb25lLiAgUmV0dXJucyBhIHNpbmdsZSBub2RlIGluc3RlYWQgb2YgYW4gYXJyYXkuXG4gKi9cblxudmFyIGJ1aWxkRXhwcmVzc2lvblJvdyA9IGZ1bmN0aW9uIGJ1aWxkRXhwcmVzc2lvblJvdyhleHByZXNzaW9uLCBvcHRpb25zLCBpc09yZGdyb3VwKSB7XG4gIHJldHVybiBtYWtlUm93KGJ1aWxkTWF0aE1MX2J1aWxkRXhwcmVzc2lvbihleHByZXNzaW9uLCBvcHRpb25zLCBpc09yZGdyb3VwKSk7XG59O1xuLyoqXG4gKiBUYWtlcyBhIGdyb3VwIGZyb20gdGhlIHBhcnNlciBhbmQgY2FsbHMgdGhlIGFwcHJvcHJpYXRlIGdyb3VwQnVpbGRlcnMgZnVuY3Rpb25cbiAqIG9uIGl0IHRvIHByb2R1Y2UgYSBNYXRoTUwgbm9kZS5cbiAqL1xuXG52YXIgYnVpbGRNYXRoTUxfYnVpbGRHcm91cCA9IGZ1bmN0aW9uIGJ1aWxkR3JvdXAoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgaWYgKCFncm91cCkge1xuICAgIHJldHVybiBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1yb3dcIik7XG4gIH1cblxuICBpZiAoX21hdGhtbEdyb3VwQnVpbGRlcnNbZ3JvdXAudHlwZV0pIHtcbiAgICAvLyBDYWxsIHRoZSBncm91cEJ1aWxkZXJzIGZ1bmN0aW9uXG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHZhciByZXN1bHQgPSBfbWF0aG1sR3JvdXBCdWlsZGVyc1tncm91cC50eXBlXShncm91cCwgb3B0aW9ucyk7IC8vICRGbG93Rml4TWVcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiR290IGdyb3VwIG9mIHVua25vd24gdHlwZTogJ1wiICsgZ3JvdXAudHlwZSArIFwiJ1wiKTtcbiAgfVxufTtcbi8qKlxuICogVGFrZXMgYSBmdWxsIHBhcnNlIHRyZWUgYW5kIHNldHRpbmdzIGFuZCBidWlsZHMgYSBNYXRoTUwgcmVwcmVzZW50YXRpb24gb2ZcbiAqIGl0LiBJbiBwYXJ0aWN1bGFyLCB3ZSBwdXQgdGhlIGVsZW1lbnRzIGZyb20gYnVpbGRpbmcgdGhlIHBhcnNlIHRyZWUgaW50byBhXG4gKiA8c2VtYW50aWNzPiB0YWcgc28gd2UgY2FuIGFsc28gaW5jbHVkZSB0aGF0IFRlWCBzb3VyY2UgYXMgYW4gYW5ub3RhdGlvbi5cbiAqXG4gKiBOb3RlIHRoYXQgd2UgYWN0dWFsbHkgcmV0dXJuIGEgZG9tVHJlZSBlbGVtZW50IHdpdGggYSBgPG1hdGg+YCBpbnNpZGUgaXQgc29cbiAqIHdlIGNhbiBkbyBhcHByb3ByaWF0ZSBzdHlsaW5nLlxuICovXG5cbmZ1bmN0aW9uIGJ1aWxkTWF0aE1MKHRyZWUsIHRleEV4cHJlc3Npb24sIG9wdGlvbnMsIGlzRGlzcGxheU1vZGUsIGZvck1hdGhtbE9ubHkpIHtcbiAgdmFyIGV4cHJlc3Npb24gPSBidWlsZE1hdGhNTF9idWlsZEV4cHJlc3Npb24odHJlZSwgb3B0aW9ucyk7IC8vIFRPRE86IE1ha2UgYSBwYXNzIHRocnUgdGhlIE1hdGhNTCBzaW1pbGFyIHRvIGJ1aWxkSFRNTC50cmF2ZXJzZU5vblNwYWNlTm9kZXNcbiAgLy8gYW5kIGFkZCBzcGFjaW5nIG5vZGVzLiBUaGlzIGlzIG5lY2Vzc2FyeSBvbmx5IGFkamFjZW50IHRvIG1hdGggb3BlcmF0b3JzXG4gIC8vIGxpa2UgXFxzaW4gb3IgXFxsaW0gb3IgdG8gc3Vic3VwIGVsZW1lbnRzIHRoYXQgY29udGFpbiBtYXRoIG9wZXJhdG9ycy5cbiAgLy8gTWF0aE1MIHRha2VzIGNhcmUgb2YgdGhlIG90aGVyIHNwYWNpbmcgaXNzdWVzLlxuICAvLyBXcmFwIHVwIHRoZSBleHByZXNzaW9uIGluIGFuIG1yb3cgc28gaXQgaXMgcHJlc2VudGVkIGluIHRoZSBzZW1hbnRpY3NcbiAgLy8gdGFnIGNvcnJlY3RseSwgdW5sZXNzIGl0J3MgYSBzaW5nbGUgPG1yb3c+IG9yIDxtdGFibGU+LlxuXG4gIHZhciB3cmFwcGVyO1xuXG4gIGlmIChleHByZXNzaW9uLmxlbmd0aCA9PT0gMSAmJiBleHByZXNzaW9uWzBdIGluc3RhbmNlb2YgTWF0aE5vZGUgJiYgdXRpbHMuY29udGFpbnMoW1wibXJvd1wiLCBcIm10YWJsZVwiXSwgZXhwcmVzc2lvblswXS50eXBlKSkge1xuICAgIHdyYXBwZXIgPSBleHByZXNzaW9uWzBdO1xuICB9IGVsc2Uge1xuICAgIHdyYXBwZXIgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1yb3dcIiwgZXhwcmVzc2lvbik7XG4gIH0gLy8gQnVpbGQgYSBUZVggYW5ub3RhdGlvbiBvZiB0aGUgc291cmNlXG5cblxuICB2YXIgYW5ub3RhdGlvbiA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwiYW5ub3RhdGlvblwiLCBbbmV3IG1hdGhNTFRyZWUuVGV4dE5vZGUodGV4RXhwcmVzc2lvbildKTtcbiAgYW5ub3RhdGlvbi5zZXRBdHRyaWJ1dGUoXCJlbmNvZGluZ1wiLCBcImFwcGxpY2F0aW9uL3gtdGV4XCIpO1xuICB2YXIgc2VtYW50aWNzID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJzZW1hbnRpY3NcIiwgW3dyYXBwZXIsIGFubm90YXRpb25dKTtcbiAgdmFyIG1hdGggPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1hdGhcIiwgW3NlbWFudGljc10pO1xuICBtYXRoLnNldEF0dHJpYnV0ZShcInhtbG5zXCIsIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiKTtcblxuICBpZiAoaXNEaXNwbGF5TW9kZSkge1xuICAgIG1hdGguc2V0QXR0cmlidXRlKFwiZGlzcGxheVwiLCBcImJsb2NrXCIpO1xuICB9IC8vIFlvdSBjYW4ndCBzdHlsZSA8bWF0aD4gbm9kZXMsIHNvIHdlIHdyYXAgdGhlIG5vZGUgaW4gYSBzcGFuLlxuICAvLyBOT1RFOiBUaGUgc3BhbiBjbGFzcyBpcyBub3QgdHlwZWQgdG8gaGF2ZSA8bWF0aD4gbm9kZXMgYXMgY2hpbGRyZW4sIGFuZFxuICAvLyB3ZSBkb24ndCB3YW50IHRvIG1ha2UgdGhlIGNoaWxkcmVuIHR5cGUgbW9yZSBnZW5lcmljIHNpbmNlIHRoZSBjaGlsZHJlblxuICAvLyBvZiBzcGFuIGFyZSBleHBlY3RlZCB0byBoYXZlIG1vcmUgZmllbGRzIGluIGBidWlsZEh0bWxgIGNvbnRleHRzLlxuXG5cbiAgdmFyIHdyYXBwZXJDbGFzcyA9IGZvck1hdGhtbE9ubHkgPyBcImthdGV4XCIgOiBcImthdGV4LW1hdGhtbFwiOyAvLyAkRmxvd0ZpeE1lXG5cbiAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFt3cmFwcGVyQ2xhc3NdLCBbbWF0aF0pO1xufVxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2J1aWxkVHJlZS5qc1xuXG5cblxuXG5cblxuXG52YXIgb3B0aW9uc0Zyb21TZXR0aW5ncyA9IGZ1bmN0aW9uIG9wdGlvbnNGcm9tU2V0dGluZ3Moc2V0dGluZ3MpIHtcbiAgcmV0dXJuIG5ldyBzcmNfT3B0aW9ucyh7XG4gICAgc3R5bGU6IHNldHRpbmdzLmRpc3BsYXlNb2RlID8gc3JjX1N0eWxlLkRJU1BMQVkgOiBzcmNfU3R5bGUuVEVYVCxcbiAgICBtYXhTaXplOiBzZXR0aW5ncy5tYXhTaXplLFxuICAgIG1pblJ1bGVUaGlja25lc3M6IHNldHRpbmdzLm1pblJ1bGVUaGlja25lc3NcbiAgfSk7XG59O1xuXG52YXIgZGlzcGxheVdyYXAgPSBmdW5jdGlvbiBkaXNwbGF5V3JhcChub2RlLCBzZXR0aW5ncykge1xuICBpZiAoc2V0dGluZ3MuZGlzcGxheU1vZGUpIHtcbiAgICB2YXIgY2xhc3NlcyA9IFtcImthdGV4LWRpc3BsYXlcIl07XG5cbiAgICBpZiAoc2V0dGluZ3MubGVxbm8pIHtcbiAgICAgIGNsYXNzZXMucHVzaChcImxlcW5vXCIpO1xuICAgIH1cblxuICAgIGlmIChzZXR0aW5ncy5mbGVxbikge1xuICAgICAgY2xhc3Nlcy5wdXNoKFwiZmxlcW5cIik7XG4gICAgfVxuXG4gICAgbm9kZSA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKGNsYXNzZXMsIFtub2RlXSk7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn07XG5cbnZhciBidWlsZFRyZWUgPSBmdW5jdGlvbiBidWlsZFRyZWUodHJlZSwgZXhwcmVzc2lvbiwgc2V0dGluZ3MpIHtcbiAgdmFyIG9wdGlvbnMgPSBvcHRpb25zRnJvbVNldHRpbmdzKHNldHRpbmdzKTtcbiAgdmFyIGthdGV4Tm9kZTtcblxuICBpZiAoc2V0dGluZ3Mub3V0cHV0ID09PSBcIm1hdGhtbFwiKSB7XG4gICAgcmV0dXJuIGJ1aWxkTWF0aE1MKHRyZWUsIGV4cHJlc3Npb24sIG9wdGlvbnMsIHNldHRpbmdzLmRpc3BsYXlNb2RlLCB0cnVlKTtcbiAgfSBlbHNlIGlmIChzZXR0aW5ncy5vdXRwdXQgPT09IFwiaHRtbFwiKSB7XG4gICAgdmFyIGh0bWxOb2RlID0gYnVpbGRIVE1MKHRyZWUsIG9wdGlvbnMpO1xuICAgIGthdGV4Tm9kZSA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcImthdGV4XCJdLCBbaHRtbE5vZGVdKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbWF0aE1MTm9kZSA9IGJ1aWxkTWF0aE1MKHRyZWUsIGV4cHJlc3Npb24sIG9wdGlvbnMsIHNldHRpbmdzLmRpc3BsYXlNb2RlLCBmYWxzZSk7XG5cbiAgICB2YXIgX2h0bWxOb2RlID0gYnVpbGRIVE1MKHRyZWUsIG9wdGlvbnMpO1xuXG4gICAga2F0ZXhOb2RlID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wia2F0ZXhcIl0sIFttYXRoTUxOb2RlLCBfaHRtbE5vZGVdKTtcbiAgfVxuXG4gIHJldHVybiBkaXNwbGF5V3JhcChrYXRleE5vZGUsIHNldHRpbmdzKTtcbn07XG52YXIgYnVpbGRIVE1MVHJlZSA9IGZ1bmN0aW9uIGJ1aWxkSFRNTFRyZWUodHJlZSwgZXhwcmVzc2lvbiwgc2V0dGluZ3MpIHtcbiAgdmFyIG9wdGlvbnMgPSBvcHRpb25zRnJvbVNldHRpbmdzKHNldHRpbmdzKTtcbiAgdmFyIGh0bWxOb2RlID0gYnVpbGRIVE1MKHRyZWUsIG9wdGlvbnMpO1xuICB2YXIga2F0ZXhOb2RlID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wia2F0ZXhcIl0sIFtodG1sTm9kZV0pO1xuICByZXR1cm4gZGlzcGxheVdyYXAoa2F0ZXhOb2RlLCBzZXR0aW5ncyk7XG59O1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgc3JjX2J1aWxkVHJlZSA9ICgoLyogdW51c2VkIHB1cmUgZXhwcmVzc2lvbiBvciBzdXBlciAqLyBudWxsICYmIChidWlsZFRyZWUpKSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvc3RyZXRjaHkuanNcbi8qKlxuICogVGhpcyBmaWxlIHByb3ZpZGVzIHN1cHBvcnQgdG8gYnVpbGRNYXRoTUwuanMgYW5kIGJ1aWxkSFRNTC5qc1xuICogZm9yIHN0cmV0Y2h5IHdpZGUgZWxlbWVudHMgcmVuZGVyZWQgZnJvbSBTVkcgZmlsZXNcbiAqIGFuZCBvdGhlciBDU1MgdHJpY2tlcnkuXG4gKi9cblxuXG5cblxudmFyIHN0cmV0Y2h5Q29kZVBvaW50ID0ge1xuICB3aWRlaGF0OiBcIl5cIixcbiAgd2lkZWNoZWNrOiBcIsuHXCIsXG4gIHdpZGV0aWxkZTogXCJ+XCIsXG4gIHV0aWxkZTogXCJ+XCIsXG4gIG92ZXJsZWZ0YXJyb3c6IFwiXFx1MjE5MFwiLFxuICB1bmRlcmxlZnRhcnJvdzogXCJcXHUyMTkwXCIsXG4gIHhsZWZ0YXJyb3c6IFwiXFx1MjE5MFwiLFxuICBvdmVycmlnaHRhcnJvdzogXCJcXHUyMTkyXCIsXG4gIHVuZGVycmlnaHRhcnJvdzogXCJcXHUyMTkyXCIsXG4gIHhyaWdodGFycm93OiBcIlxcdTIxOTJcIixcbiAgdW5kZXJicmFjZTogXCJcXHUyM0RGXCIsXG4gIG92ZXJicmFjZTogXCJcXHUyM0RFXCIsXG4gIG92ZXJncm91cDogXCJcXHUyM0UwXCIsXG4gIHVuZGVyZ3JvdXA6IFwiXFx1MjNFMVwiLFxuICBvdmVybGVmdHJpZ2h0YXJyb3c6IFwiXFx1MjE5NFwiLFxuICB1bmRlcmxlZnRyaWdodGFycm93OiBcIlxcdTIxOTRcIixcbiAgeGxlZnRyaWdodGFycm93OiBcIlxcdTIxOTRcIixcbiAgT3ZlcnJpZ2h0YXJyb3c6IFwiXFx1MjFEMlwiLFxuICB4UmlnaHRhcnJvdzogXCJcXHUyMUQyXCIsXG4gIG92ZXJsZWZ0aGFycG9vbjogXCJcXHUyMUJDXCIsXG4gIHhsZWZ0aGFycG9vbnVwOiBcIlxcdTIxQkNcIixcbiAgb3ZlcnJpZ2h0aGFycG9vbjogXCJcXHUyMUMwXCIsXG4gIHhyaWdodGhhcnBvb251cDogXCJcXHUyMUMwXCIsXG4gIHhMZWZ0YXJyb3c6IFwiXFx1MjFEMFwiLFxuICB4TGVmdHJpZ2h0YXJyb3c6IFwiXFx1MjFENFwiLFxuICB4aG9va2xlZnRhcnJvdzogXCJcXHUyMUE5XCIsXG4gIHhob29rcmlnaHRhcnJvdzogXCJcXHUyMUFBXCIsXG4gIHhtYXBzdG86IFwiXFx1MjFBNlwiLFxuICB4cmlnaHRoYXJwb29uZG93bjogXCJcXHUyMUMxXCIsXG4gIHhsZWZ0aGFycG9vbmRvd246IFwiXFx1MjFCRFwiLFxuICB4cmlnaHRsZWZ0aGFycG9vbnM6IFwiXFx1MjFDQ1wiLFxuICB4bGVmdHJpZ2h0aGFycG9vbnM6IFwiXFx1MjFDQlwiLFxuICB4dHdvaGVhZGxlZnRhcnJvdzogXCJcXHUyMTlFXCIsXG4gIHh0d29oZWFkcmlnaHRhcnJvdzogXCJcXHUyMUEwXCIsXG4gIHhsb25nZXF1YWw6IFwiPVwiLFxuICB4dG9mcm9tOiBcIlxcdTIxQzRcIixcbiAgeHJpZ2h0bGVmdGFycm93czogXCJcXHUyMUM0XCIsXG4gIHhyaWdodGVxdWlsaWJyaXVtOiBcIlxcdTIxQ0NcIixcbiAgLy8gTm90IGEgcGVyZmVjdCBtYXRjaC5cbiAgeGxlZnRlcXVpbGlicml1bTogXCJcXHUyMUNCXCIsXG4gIC8vIE5vbmUgYmV0dGVyIGF2YWlsYWJsZS5cbiAgXCJcXFxcY2RyaWdodGFycm93XCI6IFwiXFx1MjE5MlwiLFxuICBcIlxcXFxjZGxlZnRhcnJvd1wiOiBcIlxcdTIxOTBcIixcbiAgXCJcXFxcY2Rsb25nZXF1YWxcIjogXCI9XCJcbn07XG5cbnZhciBtYXRoTUxub2RlID0gZnVuY3Rpb24gbWF0aE1Mbm9kZShsYWJlbCkge1xuICB2YXIgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibW9cIiwgW25ldyBtYXRoTUxUcmVlLlRleHROb2RlKHN0cmV0Y2h5Q29kZVBvaW50W2xhYmVsLnJlcGxhY2UoL15cXFxcLywgJycpXSldKTtcbiAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJzdHJldGNoeVwiLCBcInRydWVcIik7XG4gIHJldHVybiBub2RlO1xufTsgLy8gTWFueSBvZiB0aGUgS2FUZVggU1ZHIGltYWdlcyBoYXZlIGJlZW4gYWRhcHRlZCBmcm9tIGdseXBocyBpbiBLYVRlWCBmb250cy5cbi8vIENvcHlyaWdodCAoYykgMjAwOS0yMDEwLCBEZXNpZ24gU2NpZW5jZSwgSW5jLiAoPHd3dy5tYXRoamF4Lm9yZz4pXG4vLyBDb3B5cmlnaHQgKGMpIDIwMTQtMjAxNyBLaGFuIEFjYWRlbXkgKDx3d3cua2hhbmFjYWRlbXkub3JnPilcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBTSUwgT3BlbiBGb250IExpY2Vuc2UsIFZlcnNpb24gMS4xLlxuLy8gU2VlIFxcbmh0dHA6Ly9zY3JpcHRzLnNpbC5vcmcvT0ZMXG4vLyBWZXJ5IExvbmcgU1ZHc1xuLy8gICAgTWFueSBvZiB0aGUgS2FUZVggc3RyZXRjaHkgd2lkZSBlbGVtZW50cyB1c2UgYSBsb25nIFNWRyBpbWFnZSBhbmQgYW5cbi8vICAgIG92ZXJmbG93OiBoaWRkZW4gdGFjdGljIHRvIGFjaGlldmUgYSBzdHJldGNoeSBpbWFnZSB3aGlsZSBhdm9pZGluZ1xuLy8gICAgZGlzdG9ydGlvbiBvZiBhcnJvd2hlYWRzIG9yIGJyYWNlIGNvcm5lcnMuXG4vLyAgICBUaGUgU1ZHIHR5cGljYWxseSBjb250YWlucyBhIHZlcnkgbG9uZyAoNDAwIGVtKSBhcnJvdy5cbi8vICAgIFRoZSBTVkcgaXMgaW4gYSBjb250YWluZXIgc3BhbiB0aGF0IGhhcyBvdmVyZmxvdzogaGlkZGVuLCBzbyB0aGUgc3BhblxuLy8gICAgYWN0cyBsaWtlIGEgd2luZG93IHRoYXQgZXhwb3NlcyBvbmx5IHBhcnQgb2YgdGhlICBTVkcuXG4vLyAgICBUaGUgU1ZHIGFsd2F5cyBoYXMgYSBsb25nZXIsIHRoaW5uZXIgYXNwZWN0IHJhdGlvIHRoYW4gdGhlIGNvbnRhaW5lciBzcGFuLlxuLy8gICAgQWZ0ZXIgdGhlIFNWRyBmaWxscyAxMDAlIG9mIHRoZSBoZWlnaHQgb2YgdGhlIGNvbnRhaW5lciBzcGFuLFxuLy8gICAgdGhlcmUgaXMgYSBsb25nIGFycm93IHNoYWZ0IGxlZnQgb3Zlci4gVGhhdCBsZWZ0LW92ZXIgc2hhZnQgaXMgbm90IHNob3duLlxuLy8gICAgSW5zdGVhZCwgaXQgaXMgc2xpY2VkIG9mZiBiZWNhdXNlIHRoZSBzcGFuJ3MgQ1NTIGhhcyBvdmVyZmxvdzogaGlkZGVuLlxuLy8gICAgVGh1cywgdGhlIHJlYWRlciBzZWVzIGFuIGFycm93IHRoYXQgbWF0Y2hlcyB0aGUgc3ViamVjdCBtYXR0ZXIgd2lkdGhcbi8vICAgIHdpdGhvdXQgZGlzdG9ydGlvbi5cbi8vICAgIFNvbWUgZnVuY3Rpb25zLCBzdWNoIGFzIFxcY2FuY2VsLCBuZWVkIHRvIHZhcnkgdGhlaXIgYXNwZWN0IHJhdGlvLiBUaGVzZVxuLy8gICAgZnVuY3Rpb25zIGRvIG5vdCBnZXQgdGhlIG92ZXJmbG93IFNWRyB0cmVhdG1lbnQuXG4vLyBTZWNvbmQgQnJ1c2ggU3Ryb2tlXG4vLyAgICBMb3cgcmVzb2x1dGlvbiBtb25pdG9ycyBzdHJ1Z2dsZSB0byBkaXNwbGF5IGltYWdlcyBpbiBmaW5lIGRldGFpbC5cbi8vICAgIFNvIGJyb3dzZXJzIGFwcGx5IGFudGktYWxpYXNpbmcuIEEgbG9uZyBzdHJhaWdodCBhcnJvdyBzaGFmdCB0aGVyZWZvcmVcbi8vICAgIHdpbGwgc29tZXRpbWVzIGFwcGVhciBhcyBpZiBpdCBoYXMgYSBibHVycmVkIGVkZ2UuXG4vLyAgICBUbyBtaXRpZ2F0ZSB0aGlzLCB0aGVzZSBTVkcgZmlsZXMgY29udGFpbiBhIHNlY29uZCBcImJydXNoLXN0cm9rZVwiIG9uIHRoZVxuLy8gICAgYXJyb3cgc2hhZnRzLiBUaGF0IGlzLCBhIHNlY29uZCBsb25nIHRoaW4gcmVjdGFuZ3VsYXIgU1ZHIHBhdGggaGFzIGJlZW5cbi8vICAgIHdyaXR0ZW4gZGlyZWN0bHkgb24gdG9wIG9mIGVhY2ggYXJyb3cgc2hhZnQuIFRoaXMgcmVpbmZvcmNlbWVudCBjYXVzZXNcbi8vICAgIHNvbWUgb2YgdGhlIHNjcmVlbiBwaXhlbHMgdG8gZGlzcGxheSBhcyBibGFjayBpbnN0ZWFkIG9mIHRoZSBhbnRpLWFsaWFzZWRcbi8vICAgIGdyYXkgcGl4ZWwgdGhhdCBhICBzaW5nbGUgcGF0aCB3b3VsZCBnZW5lcmF0ZS4gU28gd2UgZ2V0IGFycm93IHNoYWZ0c1xuLy8gICAgd2hvc2UgZWRnZXMgYXBwZWFyIHRvIGJlIHNoYXJwZXIuXG4vLyBJbiB0aGUga2F0ZXhJbWFnZXNEYXRhIG9iamVjdCBqdXN0IGJlbG93LCB0aGUgZGltZW5zaW9ucyBhbGxcbi8vIGNvcnJlc3BvbmQgdG8gcGF0aCBnZW9tZXRyeSBpbnNpZGUgdGhlIHJlbGV2YW50IFNWRy5cbi8vIEZvciBleGFtcGxlLCBcXG92ZXJyaWdodGFycm93IHVzZXMgdGhlIHNhbWUgYXJyb3doZWFkIGFzIGdseXBoIFUrMjE5MlxuLy8gZnJvbSB0aGUgS2FUZVggTWFpbiBmb250LiBUaGUgc2NhbGluZyBmYWN0b3IgaXMgMTAwMC5cbi8vIFRoYXQgaXMsIGluc2lkZSB0aGUgZm9udCwgdGhhdCBhcnJvd2hlYWQgaXMgNTIyIHVuaXRzIHRhbGwsIHdoaWNoXG4vLyBjb3JyZXNwb25kcyB0byAwLjUyMiBlbSBpbnNpZGUgdGhlIGRvY3VtZW50LlxuXG5cbnZhciBrYXRleEltYWdlc0RhdGEgPSB7XG4gIC8vICAgcGF0aChzKSwgbWluV2lkdGgsIGhlaWdodCwgYWxpZ25cbiAgb3ZlcnJpZ2h0YXJyb3c6IFtbXCJyaWdodGFycm93XCJdLCAwLjg4OCwgNTIyLCBcInhNYXhZTWluXCJdLFxuICBvdmVybGVmdGFycm93OiBbW1wibGVmdGFycm93XCJdLCAwLjg4OCwgNTIyLCBcInhNaW5ZTWluXCJdLFxuICB1bmRlcnJpZ2h0YXJyb3c6IFtbXCJyaWdodGFycm93XCJdLCAwLjg4OCwgNTIyLCBcInhNYXhZTWluXCJdLFxuICB1bmRlcmxlZnRhcnJvdzogW1tcImxlZnRhcnJvd1wiXSwgMC44ODgsIDUyMiwgXCJ4TWluWU1pblwiXSxcbiAgeHJpZ2h0YXJyb3c6IFtbXCJyaWdodGFycm93XCJdLCAxLjQ2OSwgNTIyLCBcInhNYXhZTWluXCJdLFxuICBcIlxcXFxjZHJpZ2h0YXJyb3dcIjogW1tcInJpZ2h0YXJyb3dcIl0sIDMuMCwgNTIyLCBcInhNYXhZTWluXCJdLFxuICAvLyBDRCBtaW53d2lkdGgyLjVwY1xuICB4bGVmdGFycm93OiBbW1wibGVmdGFycm93XCJdLCAxLjQ2OSwgNTIyLCBcInhNaW5ZTWluXCJdLFxuICBcIlxcXFxjZGxlZnRhcnJvd1wiOiBbW1wibGVmdGFycm93XCJdLCAzLjAsIDUyMiwgXCJ4TWluWU1pblwiXSxcbiAgT3ZlcnJpZ2h0YXJyb3c6IFtbXCJkb3VibGVyaWdodGFycm93XCJdLCAwLjg4OCwgNTYwLCBcInhNYXhZTWluXCJdLFxuICB4UmlnaHRhcnJvdzogW1tcImRvdWJsZXJpZ2h0YXJyb3dcIl0sIDEuNTI2LCA1NjAsIFwieE1heFlNaW5cIl0sXG4gIHhMZWZ0YXJyb3c6IFtbXCJkb3VibGVsZWZ0YXJyb3dcIl0sIDEuNTI2LCA1NjAsIFwieE1pbllNaW5cIl0sXG4gIG92ZXJsZWZ0aGFycG9vbjogW1tcImxlZnRoYXJwb29uXCJdLCAwLjg4OCwgNTIyLCBcInhNaW5ZTWluXCJdLFxuICB4bGVmdGhhcnBvb251cDogW1tcImxlZnRoYXJwb29uXCJdLCAwLjg4OCwgNTIyLCBcInhNaW5ZTWluXCJdLFxuICB4bGVmdGhhcnBvb25kb3duOiBbW1wibGVmdGhhcnBvb25kb3duXCJdLCAwLjg4OCwgNTIyLCBcInhNaW5ZTWluXCJdLFxuICBvdmVycmlnaHRoYXJwb29uOiBbW1wicmlnaHRoYXJwb29uXCJdLCAwLjg4OCwgNTIyLCBcInhNYXhZTWluXCJdLFxuICB4cmlnaHRoYXJwb29udXA6IFtbXCJyaWdodGhhcnBvb25cIl0sIDAuODg4LCA1MjIsIFwieE1heFlNaW5cIl0sXG4gIHhyaWdodGhhcnBvb25kb3duOiBbW1wicmlnaHRoYXJwb29uZG93blwiXSwgMC44ODgsIDUyMiwgXCJ4TWF4WU1pblwiXSxcbiAgeGxvbmdlcXVhbDogW1tcImxvbmdlcXVhbFwiXSwgMC44ODgsIDMzNCwgXCJ4TWluWU1pblwiXSxcbiAgXCJcXFxcY2Rsb25nZXF1YWxcIjogW1tcImxvbmdlcXVhbFwiXSwgMy4wLCAzMzQsIFwieE1pbllNaW5cIl0sXG4gIHh0d29oZWFkbGVmdGFycm93OiBbW1widHdvaGVhZGxlZnRhcnJvd1wiXSwgMC44ODgsIDMzNCwgXCJ4TWluWU1pblwiXSxcbiAgeHR3b2hlYWRyaWdodGFycm93OiBbW1widHdvaGVhZHJpZ2h0YXJyb3dcIl0sIDAuODg4LCAzMzQsIFwieE1heFlNaW5cIl0sXG4gIG92ZXJsZWZ0cmlnaHRhcnJvdzogW1tcImxlZnRhcnJvd1wiLCBcInJpZ2h0YXJyb3dcIl0sIDAuODg4LCA1MjJdLFxuICBvdmVyYnJhY2U6IFtbXCJsZWZ0YnJhY2VcIiwgXCJtaWRicmFjZVwiLCBcInJpZ2h0YnJhY2VcIl0sIDEuNiwgNTQ4XSxcbiAgdW5kZXJicmFjZTogW1tcImxlZnRicmFjZXVuZGVyXCIsIFwibWlkYnJhY2V1bmRlclwiLCBcInJpZ2h0YnJhY2V1bmRlclwiXSwgMS42LCA1NDhdLFxuICB1bmRlcmxlZnRyaWdodGFycm93OiBbW1wibGVmdGFycm93XCIsIFwicmlnaHRhcnJvd1wiXSwgMC44ODgsIDUyMl0sXG4gIHhsZWZ0cmlnaHRhcnJvdzogW1tcImxlZnRhcnJvd1wiLCBcInJpZ2h0YXJyb3dcIl0sIDEuNzUsIDUyMl0sXG4gIHhMZWZ0cmlnaHRhcnJvdzogW1tcImRvdWJsZWxlZnRhcnJvd1wiLCBcImRvdWJsZXJpZ2h0YXJyb3dcIl0sIDEuNzUsIDU2MF0sXG4gIHhyaWdodGxlZnRoYXJwb29uczogW1tcImxlZnRoYXJwb29uZG93bnBsdXNcIiwgXCJyaWdodGhhcnBvb25wbHVzXCJdLCAxLjc1LCA3MTZdLFxuICB4bGVmdHJpZ2h0aGFycG9vbnM6IFtbXCJsZWZ0aGFycG9vbnBsdXNcIiwgXCJyaWdodGhhcnBvb25kb3ducGx1c1wiXSwgMS43NSwgNzE2XSxcbiAgeGhvb2tsZWZ0YXJyb3c6IFtbXCJsZWZ0YXJyb3dcIiwgXCJyaWdodGhvb2tcIl0sIDEuMDgsIDUyMl0sXG4gIHhob29rcmlnaHRhcnJvdzogW1tcImxlZnRob29rXCIsIFwicmlnaHRhcnJvd1wiXSwgMS4wOCwgNTIyXSxcbiAgb3ZlcmxpbmVzZWdtZW50OiBbW1wibGVmdGxpbmVzZWdtZW50XCIsIFwicmlnaHRsaW5lc2VnbWVudFwiXSwgMC44ODgsIDUyMl0sXG4gIHVuZGVybGluZXNlZ21lbnQ6IFtbXCJsZWZ0bGluZXNlZ21lbnRcIiwgXCJyaWdodGxpbmVzZWdtZW50XCJdLCAwLjg4OCwgNTIyXSxcbiAgb3Zlcmdyb3VwOiBbW1wibGVmdGdyb3VwXCIsIFwicmlnaHRncm91cFwiXSwgMC44ODgsIDM0Ml0sXG4gIHVuZGVyZ3JvdXA6IFtbXCJsZWZ0Z3JvdXB1bmRlclwiLCBcInJpZ2h0Z3JvdXB1bmRlclwiXSwgMC44ODgsIDM0Ml0sXG4gIHhtYXBzdG86IFtbXCJsZWZ0bWFwc3RvXCIsIFwicmlnaHRhcnJvd1wiXSwgMS41LCA1MjJdLFxuICB4dG9mcm9tOiBbW1wibGVmdFRvRnJvbVwiLCBcInJpZ2h0VG9Gcm9tXCJdLCAxLjc1LCA1MjhdLFxuICAvLyBUaGUgbmV4dCB0aHJlZSBhcnJvd3MgYXJlIGZyb20gdGhlIG1oY2hlbSBwYWNrYWdlLlxuICAvLyBJbiBtaGNoZW0uc3R5LCBtaW4tbGVuZ3RoIGlzIDIuMGVtLiBCdXQgdGhlc2UgYXJyb3dzIG1pZ2h0IGFwcGVhciBpbiB0aGVcbiAgLy8gZG9jdW1lbnQgYXMgXFx4cmlnaHRhcnJvdyBvciBcXHhyaWdodGxlZnRoYXJwb29ucy4gVGhvc2UgaGF2ZVxuICAvLyBtaW4tbGVuZ3RoID0gMS43NWVtLCBzbyB3ZSBzZXQgbWluLWxlbmd0aCBvbiB0aGVzZSBuZXh0IHRocmVlIHRvIG1hdGNoLlxuICB4cmlnaHRsZWZ0YXJyb3dzOiBbW1wiYmFyYWJvdmVsZWZ0YXJyb3dcIiwgXCJyaWdodGFycm93YWJvdmViYXJcIl0sIDEuNzUsIDkwMV0sXG4gIHhyaWdodGVxdWlsaWJyaXVtOiBbW1wiYmFyYWJvdmVzaG9ydGxlZnRoYXJwb29uXCIsIFwicmlnaHRoYXJwb29uYWJvdmVzaG9ydGJhclwiXSwgMS43NSwgNzE2XSxcbiAgeGxlZnRlcXVpbGlicml1bTogW1tcInNob3J0YmFyYWJvdmVsZWZ0aGFycG9vblwiLCBcInNob3J0cmlnaHRoYXJwb29uYWJvdmViYXJcIl0sIDEuNzUsIDcxNl1cbn07XG5cbnZhciBncm91cExlbmd0aCA9IGZ1bmN0aW9uIGdyb3VwTGVuZ3RoKGFyZykge1xuICBpZiAoYXJnLnR5cGUgPT09IFwib3JkZ3JvdXBcIikge1xuICAgIHJldHVybiBhcmcuYm9keS5sZW5ndGg7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn07XG5cbnZhciBzdmdTcGFuID0gZnVuY3Rpb24gc3ZnU3Bhbihncm91cCwgb3B0aW9ucykge1xuICAvLyBDcmVhdGUgYSBzcGFuIHdpdGggaW5saW5lIFNWRyBmb3IgdGhlIGVsZW1lbnQuXG4gIGZ1bmN0aW9uIGJ1aWxkU3ZnU3Bhbl8oKSB7XG4gICAgdmFyIHZpZXdCb3hXaWR0aCA9IDQwMDAwMDsgLy8gZGVmYXVsdFxuXG4gICAgdmFyIGxhYmVsID0gZ3JvdXAubGFiZWwuc3Vic3RyKDEpO1xuXG4gICAgaWYgKHV0aWxzLmNvbnRhaW5zKFtcIndpZGVoYXRcIiwgXCJ3aWRlY2hlY2tcIiwgXCJ3aWRldGlsZGVcIiwgXCJ1dGlsZGVcIl0sIGxhYmVsKSkge1xuICAgICAgLy8gRWFjaCB0eXBlIGluIHRoZSBgaWZgIHN0YXRlbWVudCBjb3JyZXNwb25kcyB0byBvbmUgb2YgdGhlIFBhcnNlTm9kZVxuICAgICAgLy8gdHlwZXMgYmVsb3cuIFRoaXMgbmFycm93aW5nIGlzIHJlcXVpcmVkIHRvIGFjY2VzcyBgZ3JwLmJhc2VgLlxuICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgdmFyIGdycCA9IGdyb3VwOyAvLyBUaGVyZSBhcmUgZm91ciBTVkcgaW1hZ2VzIGF2YWlsYWJsZSBmb3IgZWFjaCBmdW5jdGlvbi5cbiAgICAgIC8vIENob29zZSBhIHRhbGxlciBpbWFnZSB3aGVuIHRoZXJlIGFyZSBtb3JlIGNoYXJhY3RlcnMuXG5cbiAgICAgIHZhciBudW1DaGFycyA9IGdyb3VwTGVuZ3RoKGdycC5iYXNlKTtcbiAgICAgIHZhciB2aWV3Qm94SGVpZ2h0O1xuICAgICAgdmFyIHBhdGhOYW1lO1xuXG4gICAgICB2YXIgX2hlaWdodDtcblxuICAgICAgaWYgKG51bUNoYXJzID4gNSkge1xuICAgICAgICBpZiAobGFiZWwgPT09IFwid2lkZWhhdFwiIHx8IGxhYmVsID09PSBcIndpZGVjaGVja1wiKSB7XG4gICAgICAgICAgdmlld0JveEhlaWdodCA9IDQyMDtcbiAgICAgICAgICB2aWV3Qm94V2lkdGggPSAyMzY0O1xuICAgICAgICAgIF9oZWlnaHQgPSAwLjQyO1xuICAgICAgICAgIHBhdGhOYW1lID0gbGFiZWwgKyBcIjRcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2aWV3Qm94SGVpZ2h0ID0gMzEyO1xuICAgICAgICAgIHZpZXdCb3hXaWR0aCA9IDIzNDA7XG4gICAgICAgICAgX2hlaWdodCA9IDAuMzQ7XG4gICAgICAgICAgcGF0aE5hbWUgPSBcInRpbGRlNFwiO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaW1nSW5kZXggPSBbMSwgMSwgMiwgMiwgMywgM11bbnVtQ2hhcnNdO1xuXG4gICAgICAgIGlmIChsYWJlbCA9PT0gXCJ3aWRlaGF0XCIgfHwgbGFiZWwgPT09IFwid2lkZWNoZWNrXCIpIHtcbiAgICAgICAgICB2aWV3Qm94V2lkdGggPSBbMCwgMTA2MiwgMjM2NCwgMjM2NCwgMjM2NF1baW1nSW5kZXhdO1xuICAgICAgICAgIHZpZXdCb3hIZWlnaHQgPSBbMCwgMjM5LCAzMDAsIDM2MCwgNDIwXVtpbWdJbmRleF07XG4gICAgICAgICAgX2hlaWdodCA9IFswLCAwLjI0LCAwLjMsIDAuMywgMC4zNiwgMC40Ml1baW1nSW5kZXhdO1xuICAgICAgICAgIHBhdGhOYW1lID0gbGFiZWwgKyBpbWdJbmRleDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2aWV3Qm94V2lkdGggPSBbMCwgNjAwLCAxMDMzLCAyMzM5LCAyMzQwXVtpbWdJbmRleF07XG4gICAgICAgICAgdmlld0JveEhlaWdodCA9IFswLCAyNjAsIDI4NiwgMzA2LCAzMTJdW2ltZ0luZGV4XTtcbiAgICAgICAgICBfaGVpZ2h0ID0gWzAsIDAuMjYsIDAuMjg2LCAwLjMsIDAuMzA2LCAwLjM0XVtpbWdJbmRleF07XG4gICAgICAgICAgcGF0aE5hbWUgPSBcInRpbGRlXCIgKyBpbWdJbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgcGF0aCA9IG5ldyBQYXRoTm9kZShwYXRoTmFtZSk7XG4gICAgICB2YXIgc3ZnTm9kZSA9IG5ldyBTdmdOb2RlKFtwYXRoXSwge1xuICAgICAgICBcIndpZHRoXCI6IFwiMTAwJVwiLFxuICAgICAgICBcImhlaWdodFwiOiBfaGVpZ2h0ICsgXCJlbVwiLFxuICAgICAgICBcInZpZXdCb3hcIjogXCIwIDAgXCIgKyB2aWV3Qm94V2lkdGggKyBcIiBcIiArIHZpZXdCb3hIZWlnaHQsXG4gICAgICAgIFwicHJlc2VydmVBc3BlY3RSYXRpb1wiOiBcIm5vbmVcIlxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzcGFuOiBidWlsZENvbW1vbi5tYWtlU3ZnU3BhbihbXSwgW3N2Z05vZGVdLCBvcHRpb25zKSxcbiAgICAgICAgbWluV2lkdGg6IDAsXG4gICAgICAgIGhlaWdodDogX2hlaWdodFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHNwYW5zID0gW107XG4gICAgICB2YXIgZGF0YSA9IGthdGV4SW1hZ2VzRGF0YVtsYWJlbF07XG4gICAgICB2YXIgcGF0aHMgPSBkYXRhWzBdLFxuICAgICAgICAgIF9taW5XaWR0aCA9IGRhdGFbMV0sXG4gICAgICAgICAgX3ZpZXdCb3hIZWlnaHQgPSBkYXRhWzJdO1xuXG4gICAgICB2YXIgX2hlaWdodDIgPSBfdmlld0JveEhlaWdodCAvIDEwMDA7XG5cbiAgICAgIHZhciBudW1TdmdDaGlsZHJlbiA9IHBhdGhzLmxlbmd0aDtcbiAgICAgIHZhciB3aWR0aENsYXNzZXM7XG4gICAgICB2YXIgYWxpZ25zO1xuXG4gICAgICBpZiAobnVtU3ZnQ2hpbGRyZW4gPT09IDEpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZTogQWxsIHRoZXNlIGNhc2VzIG11c3QgYmUgb2YgdGhlIDQtdHVwbGUgdHlwZS5cbiAgICAgICAgdmFyIGFsaWduMSA9IGRhdGFbM107XG4gICAgICAgIHdpZHRoQ2xhc3NlcyA9IFtcImhpZGUtdGFpbFwiXTtcbiAgICAgICAgYWxpZ25zID0gW2FsaWduMV07XG4gICAgICB9IGVsc2UgaWYgKG51bVN2Z0NoaWxkcmVuID09PSAyKSB7XG4gICAgICAgIHdpZHRoQ2xhc3NlcyA9IFtcImhhbGZhcnJvdy1sZWZ0XCIsIFwiaGFsZmFycm93LXJpZ2h0XCJdO1xuICAgICAgICBhbGlnbnMgPSBbXCJ4TWluWU1pblwiLCBcInhNYXhZTWluXCJdO1xuICAgICAgfSBlbHNlIGlmIChudW1TdmdDaGlsZHJlbiA9PT0gMykge1xuICAgICAgICB3aWR0aENsYXNzZXMgPSBbXCJicmFjZS1sZWZ0XCIsIFwiYnJhY2UtY2VudGVyXCIsIFwiYnJhY2UtcmlnaHRcIl07XG4gICAgICAgIGFsaWducyA9IFtcInhNaW5ZTWluXCIsIFwieE1pZFlNaW5cIiwgXCJ4TWF4WU1pblwiXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvcnJlY3Qga2F0ZXhJbWFnZXNEYXRhIG9yIHVwZGF0ZSBjb2RlIGhlcmUgdG8gc3VwcG9ydFxcbiAgICAgICAgICAgICAgICAgICAgXCIgKyBudW1TdmdDaGlsZHJlbiArIFwiIGNoaWxkcmVuLlwiKTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1TdmdDaGlsZHJlbjsgaSsrKSB7XG4gICAgICAgIHZhciBfcGF0aCA9IG5ldyBQYXRoTm9kZShwYXRoc1tpXSk7XG5cbiAgICAgICAgdmFyIF9zdmdOb2RlID0gbmV3IFN2Z05vZGUoW19wYXRoXSwge1xuICAgICAgICAgIFwid2lkdGhcIjogXCI0MDBlbVwiLFxuICAgICAgICAgIFwiaGVpZ2h0XCI6IF9oZWlnaHQyICsgXCJlbVwiLFxuICAgICAgICAgIFwidmlld0JveFwiOiBcIjAgMCBcIiArIHZpZXdCb3hXaWR0aCArIFwiIFwiICsgX3ZpZXdCb3hIZWlnaHQsXG4gICAgICAgICAgXCJwcmVzZXJ2ZUFzcGVjdFJhdGlvXCI6IGFsaWduc1tpXSArIFwiIHNsaWNlXCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIF9zcGFuID0gYnVpbGRDb21tb24ubWFrZVN2Z1NwYW4oW3dpZHRoQ2xhc3Nlc1tpXV0sIFtfc3ZnTm9kZV0sIG9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChudW1TdmdDaGlsZHJlbiA9PT0gMSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzcGFuOiBfc3BhbixcbiAgICAgICAgICAgIG1pbldpZHRoOiBfbWluV2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IF9oZWlnaHQyXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfc3Bhbi5zdHlsZS5oZWlnaHQgPSBfaGVpZ2h0MiArIFwiZW1cIjtcbiAgICAgICAgICBzcGFucy5wdXNoKF9zcGFuKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzcGFuOiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJzdHJldGNoeVwiXSwgc3BhbnMsIG9wdGlvbnMpLFxuICAgICAgICBtaW5XaWR0aDogX21pbldpZHRoLFxuICAgICAgICBoZWlnaHQ6IF9oZWlnaHQyXG4gICAgICB9O1xuICAgIH1cbiAgfSAvLyBidWlsZFN2Z1NwYW5fKClcblxuXG4gIHZhciBfYnVpbGRTdmdTcGFuXyA9IGJ1aWxkU3ZnU3Bhbl8oKSxcbiAgICAgIHNwYW4gPSBfYnVpbGRTdmdTcGFuXy5zcGFuLFxuICAgICAgbWluV2lkdGggPSBfYnVpbGRTdmdTcGFuXy5taW5XaWR0aCxcbiAgICAgIGhlaWdodCA9IF9idWlsZFN2Z1NwYW5fLmhlaWdodDsgLy8gTm90ZSB0aGF0IHdlIGFyZSByZXR1cm5pbmcgc3Bhbi5kZXB0aCA9IDAuXG4gIC8vIEFueSBhZGp1c3RtZW50cyByZWxhdGl2ZSB0byB0aGUgYmFzZWxpbmUgbXVzdCBiZSBkb25lIGluIGJ1aWxkSFRNTC5cblxuXG4gIHNwYW4uaGVpZ2h0ID0gaGVpZ2h0O1xuICBzcGFuLnN0eWxlLmhlaWdodCA9IGhlaWdodCArIFwiZW1cIjtcblxuICBpZiAobWluV2lkdGggPiAwKSB7XG4gICAgc3Bhbi5zdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoICsgXCJlbVwiO1xuICB9XG5cbiAgcmV0dXJuIHNwYW47XG59O1xuXG52YXIgZW5jbG9zZVNwYW4gPSBmdW5jdGlvbiBlbmNsb3NlU3Bhbihpbm5lciwgbGFiZWwsIHRvcFBhZCwgYm90dG9tUGFkLCBvcHRpb25zKSB7XG4gIC8vIFJldHVybiBhbiBpbWFnZSBzcGFuIGZvciBcXGNhbmNlbCwgXFxiY2FuY2VsLCBcXHhjYW5jZWwsIFxcZmJveCwgb3IgXFxhbmdsXG4gIHZhciBpbWc7XG4gIHZhciB0b3RhbEhlaWdodCA9IGlubmVyLmhlaWdodCArIGlubmVyLmRlcHRoICsgdG9wUGFkICsgYm90dG9tUGFkO1xuXG4gIGlmICgvZmJveHxjb2xvcnxhbmdsLy50ZXN0KGxhYmVsKSkge1xuICAgIGltZyA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcInN0cmV0Y2h5XCIsIGxhYmVsXSwgW10sIG9wdGlvbnMpO1xuXG4gICAgaWYgKGxhYmVsID09PSBcImZib3hcIikge1xuICAgICAgdmFyIGNvbG9yID0gb3B0aW9ucy5jb2xvciAmJiBvcHRpb25zLmdldENvbG9yKCk7XG5cbiAgICAgIGlmIChjb2xvcikge1xuICAgICAgICBpbWcuc3R5bGUuYm9yZGVyQ29sb3IgPSBjb2xvcjtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gXFxjYW5jZWwsIFxcYmNhbmNlbCwgb3IgXFx4Y2FuY2VsXG4gICAgLy8gU2luY2UgXFxjYW5jZWwncyBTVkcgaXMgaW5saW5lIGFuZCBpdCBvbWl0cyB0aGUgdmlld0JveCBhdHRyaWJ1dGUsXG4gICAgLy8gaXRzIHN0cm9rZS13aWR0aCB3aWxsIG5vdCB2YXJ5IHdpdGggc3BhbiBhcmVhLlxuICAgIHZhciBsaW5lcyA9IFtdO1xuXG4gICAgaWYgKC9eW2J4XWNhbmNlbCQvLnRlc3QobGFiZWwpKSB7XG4gICAgICBsaW5lcy5wdXNoKG5ldyBMaW5lTm9kZSh7XG4gICAgICAgIFwieDFcIjogXCIwXCIsXG4gICAgICAgIFwieTFcIjogXCIwXCIsXG4gICAgICAgIFwieDJcIjogXCIxMDAlXCIsXG4gICAgICAgIFwieTJcIjogXCIxMDAlXCIsXG4gICAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IFwiMC4wNDZlbVwiXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgaWYgKC9eeD9jYW5jZWwkLy50ZXN0KGxhYmVsKSkge1xuICAgICAgbGluZXMucHVzaChuZXcgTGluZU5vZGUoe1xuICAgICAgICBcIngxXCI6IFwiMFwiLFxuICAgICAgICBcInkxXCI6IFwiMTAwJVwiLFxuICAgICAgICBcIngyXCI6IFwiMTAwJVwiLFxuICAgICAgICBcInkyXCI6IFwiMFwiLFxuICAgICAgICBcInN0cm9rZS13aWR0aFwiOiBcIjAuMDQ2ZW1cIlxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHZhciBzdmdOb2RlID0gbmV3IFN2Z05vZGUobGluZXMsIHtcbiAgICAgIFwid2lkdGhcIjogXCIxMDAlXCIsXG4gICAgICBcImhlaWdodFwiOiB0b3RhbEhlaWdodCArIFwiZW1cIlxuICAgIH0pO1xuICAgIGltZyA9IGJ1aWxkQ29tbW9uLm1ha2VTdmdTcGFuKFtdLCBbc3ZnTm9kZV0sIG9wdGlvbnMpO1xuICB9XG5cbiAgaW1nLmhlaWdodCA9IHRvdGFsSGVpZ2h0O1xuICBpbWcuc3R5bGUuaGVpZ2h0ID0gdG90YWxIZWlnaHQgKyBcImVtXCI7XG4gIHJldHVybiBpbWc7XG59O1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBzdHJldGNoeSA9ICh7XG4gIGVuY2xvc2VTcGFuOiBlbmNsb3NlU3BhbixcbiAgbWF0aE1Mbm9kZTogbWF0aE1Mbm9kZSxcbiAgc3ZnU3Bhbjogc3ZnU3BhblxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvcGFyc2VOb2RlLmpzXG5cblxuLyoqXG4gKiBBc3NlcnRzIHRoYXQgdGhlIG5vZGUgaXMgb2YgdGhlIGdpdmVuIHR5cGUgYW5kIHJldHVybnMgaXQgd2l0aCBzdHJpY3RlclxuICogdHlwaW5nLiBUaHJvd3MgaWYgdGhlIG5vZGUncyB0eXBlIGRvZXMgbm90IG1hdGNoLlxuICovXG5mdW5jdGlvbiBhc3NlcnROb2RlVHlwZShub2RlLCB0eXBlKSB7XG4gIGlmICghbm9kZSB8fCBub2RlLnR5cGUgIT09IHR5cGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBub2RlIG9mIHR5cGUgXCIgKyB0eXBlICsgXCIsIGJ1dCBnb3QgXCIgKyAobm9kZSA/IFwibm9kZSBvZiB0eXBlIFwiICsgbm9kZS50eXBlIDogU3RyaW5nKG5vZGUpKSk7XG4gIH0gLy8gJEZsb3dGaXhNZSwgPj0wLjEyNVxuXG5cbiAgcmV0dXJuIG5vZGU7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG5vZGUgbW9yZSBzdHJpY3RseSB0eXBlZCBpZmYgaXQgaXMgb2YgdGhlIGdpdmVuIHR5cGUuIE90aGVyd2lzZSxcbiAqIHJldHVybnMgbnVsbC5cbiAqL1xuXG5mdW5jdGlvbiBhc3NlcnRTeW1ib2xOb2RlVHlwZShub2RlKSB7XG4gIHZhciB0eXBlZE5vZGUgPSBjaGVja1N5bWJvbE5vZGVUeXBlKG5vZGUpO1xuXG4gIGlmICghdHlwZWROb2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgbm9kZSBvZiBzeW1ib2wgZ3JvdXAgdHlwZSwgYnV0IGdvdCBcIiArIChub2RlID8gXCJub2RlIG9mIHR5cGUgXCIgKyBub2RlLnR5cGUgOiBTdHJpbmcobm9kZSkpKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlZE5vZGU7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG5vZGUgbW9yZSBzdHJpY3RseSB0eXBlZCBpZmYgaXQgaXMgb2YgdGhlIGdpdmVuIHR5cGUuIE90aGVyd2lzZSxcbiAqIHJldHVybnMgbnVsbC5cbiAqL1xuXG5mdW5jdGlvbiBjaGVja1N5bWJvbE5vZGVUeXBlKG5vZGUpIHtcbiAgaWYgKG5vZGUgJiYgKG5vZGUudHlwZSA9PT0gXCJhdG9tXCIgfHwgTk9OX0FUT01TLmhhc093blByb3BlcnR5KG5vZGUudHlwZSkpKSB7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL2FjY2VudC5qc1xuXG5cblxuXG5cblxuXG5cblxuLy8gTk9URTogVW5saWtlIG1vc3QgYGh0bWxCdWlsZGVyYHMsIHRoaXMgb25lIGhhbmRsZXMgbm90IG9ubHkgXCJhY2NlbnRcIiwgYnV0XG4vLyBhbHNvIFwic3Vwc3ViXCIgc2luY2UgYW4gYWNjZW50IGNhbiBhZmZlY3Qgc3VwZXIvc3Vic2NyaXB0aW5nLlxudmFyIGh0bWxCdWlsZGVyID0gZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JwLCBvcHRpb25zKSB7XG4gIC8vIEFjY2VudHMgYXJlIGhhbmRsZWQgaW4gdGhlIFRlWGJvb2sgcGcuIDQ0MywgcnVsZSAxMi5cbiAgdmFyIGJhc2U7XG4gIHZhciBncm91cDtcbiAgdmFyIHN1cFN1Ykdyb3VwO1xuXG4gIGlmIChncnAgJiYgZ3JwLnR5cGUgPT09IFwic3Vwc3ViXCIpIHtcbiAgICAvLyBJZiBvdXIgYmFzZSBpcyBhIGNoYXJhY3RlciBib3gsIGFuZCB3ZSBoYXZlIHN1cGVyc2NyaXB0cyBhbmRcbiAgICAvLyBzdWJzY3JpcHRzLCB0aGUgc3Vwc3ViIHdpbGwgZGVmZXIgdG8gdXMuIEluIHBhcnRpY3VsYXIsIHdlIHdhbnRcbiAgICAvLyB0byBhdHRhY2ggdGhlIHN1cGVyc2NyaXB0cyBhbmQgc3Vic2NyaXB0cyB0byB0aGUgaW5uZXIgYm9keSAoc29cbiAgICAvLyB0aGF0IHRoZSBwb3NpdGlvbiBvZiB0aGUgc3VwZXJzY3JpcHRzIGFuZCBzdWJzY3JpcHRzIHdvbid0IGJlXG4gICAgLy8gYWZmZWN0ZWQgYnkgdGhlIGhlaWdodCBvZiB0aGUgYWNjZW50KS4gV2UgYWNjb21wbGlzaCB0aGlzIGJ5XG4gICAgLy8gc3RpY2tpbmcgdGhlIGJhc2Ugb2YgdGhlIGFjY2VudCBpbnRvIHRoZSBiYXNlIG9mIHRoZSBzdXBzdWIsIGFuZFxuICAgIC8vIHJlbmRlcmluZyB0aGF0LCB3aGlsZSBrZWVwaW5nIHRyYWNrIG9mIHdoZXJlIHRoZSBhY2NlbnQgaXMuXG4gICAgLy8gVGhlIHJlYWwgYWNjZW50IGdyb3VwIGlzIHRoZSBiYXNlIG9mIHRoZSBzdXBzdWIgZ3JvdXBcbiAgICBncm91cCA9IGFzc2VydE5vZGVUeXBlKGdycC5iYXNlLCBcImFjY2VudFwiKTsgLy8gVGhlIGNoYXJhY3RlciBib3ggaXMgdGhlIGJhc2Ugb2YgdGhlIGFjY2VudCBncm91cFxuXG4gICAgYmFzZSA9IGdyb3VwLmJhc2U7IC8vIFN0aWNrIHRoZSBjaGFyYWN0ZXIgYm94IGludG8gdGhlIGJhc2Ugb2YgdGhlIHN1cHN1YiBncm91cFxuXG4gICAgZ3JwLmJhc2UgPSBiYXNlOyAvLyBSZXJlbmRlciB0aGUgc3Vwc3ViIGdyb3VwIHdpdGggaXRzIG5ldyBiYXNlLCBhbmQgc3RvcmUgdGhhdFxuICAgIC8vIHJlc3VsdC5cblxuICAgIHN1cFN1Ykdyb3VwID0gYXNzZXJ0U3BhbihidWlsZEdyb3VwKGdycCwgb3B0aW9ucykpOyAvLyByZXNldCBvcmlnaW5hbCBiYXNlXG5cbiAgICBncnAuYmFzZSA9IGdyb3VwO1xuICB9IGVsc2Uge1xuICAgIGdyb3VwID0gYXNzZXJ0Tm9kZVR5cGUoZ3JwLCBcImFjY2VudFwiKTtcbiAgICBiYXNlID0gZ3JvdXAuYmFzZTtcbiAgfSAvLyBCdWlsZCB0aGUgYmFzZSBncm91cFxuXG5cbiAgdmFyIGJvZHkgPSBidWlsZEdyb3VwKGJhc2UsIG9wdGlvbnMuaGF2aW5nQ3JhbXBlZFN0eWxlKCkpOyAvLyBEb2VzIHRoZSBhY2NlbnQgbmVlZCB0byBzaGlmdCBmb3IgdGhlIHNrZXcgb2YgYSBjaGFyYWN0ZXI/XG5cbiAgdmFyIG11c3RTaGlmdCA9IGdyb3VwLmlzU2hpZnR5ICYmIHV0aWxzLmlzQ2hhcmFjdGVyQm94KGJhc2UpOyAvLyBDYWxjdWxhdGUgdGhlIHNrZXcgb2YgdGhlIGFjY2VudC4gVGhpcyBpcyBiYXNlZCBvbiB0aGUgbGluZSBcIklmIHRoZVxuICAvLyBudWNsZXVzIGlzIG5vdCBhIHNpbmdsZSBjaGFyYWN0ZXIsIGxldCBzID0gMDsgb3RoZXJ3aXNlIHNldCBzIHRvIHRoZVxuICAvLyBrZXJuIGFtb3VudCBmb3IgdGhlIG51Y2xldXMgZm9sbG93ZWQgYnkgdGhlIFxcc2tld2NoYXIgb2YgaXRzIGZvbnQuXCJcbiAgLy8gTm90ZSB0aGF0IG91ciBza2V3IG1ldHJpY3MgYXJlIGp1c3QgdGhlIGtlcm4gYmV0d2VlbiBlYWNoIGNoYXJhY3RlclxuICAvLyBhbmQgdGhlIHNrZXdjaGFyLlxuXG4gIHZhciBza2V3ID0gMDtcblxuICBpZiAobXVzdFNoaWZ0KSB7XG4gICAgLy8gSWYgdGhlIGJhc2UgaXMgYSBjaGFyYWN0ZXIgYm94LCB0aGVuIHdlIHdhbnQgdGhlIHNrZXcgb2YgdGhlXG4gICAgLy8gaW5uZXJtb3N0IGNoYXJhY3Rlci4gVG8gZG8gdGhhdCwgd2UgZmluZCB0aGUgaW5uZXJtb3N0IGNoYXJhY3RlcjpcbiAgICB2YXIgYmFzZUNoYXIgPSB1dGlscy5nZXRCYXNlRWxlbShiYXNlKTsgLy8gVGhlbiwgd2UgcmVuZGVyIGl0cyBncm91cCB0byBnZXQgdGhlIHN5bWJvbCBpbnNpZGUgaXRcblxuICAgIHZhciBiYXNlR3JvdXAgPSBidWlsZEdyb3VwKGJhc2VDaGFyLCBvcHRpb25zLmhhdmluZ0NyYW1wZWRTdHlsZSgpKTsgLy8gRmluYWxseSwgd2UgcHVsbCB0aGUgc2tldyBvZmYgb2YgdGhlIHN5bWJvbC5cblxuICAgIHNrZXcgPSBhc3NlcnRTeW1ib2xEb21Ob2RlKGJhc2VHcm91cCkuc2tldzsgLy8gTm90ZSB0aGF0IHdlIG5vdyB0aHJvdyBhd2F5IGJhc2VHcm91cCwgYmVjYXVzZSB0aGUgbGF5ZXJzIHdlXG4gICAgLy8gcmVtb3ZlZCB3aXRoIGdldEJhc2VFbGVtIG1pZ2h0IGNvbnRhaW4gdGhpbmdzIGxpa2UgXFxjb2xvciB3aGljaFxuICAgIC8vIHdlIGNhbid0IGdldCByaWQgb2YuXG4gICAgLy8gVE9ETyhlbWlseSk6IEZpbmQgYSBiZXR0ZXIgd2F5IHRvIGdldCB0aGUgc2tld1xuICB9XG5cbiAgdmFyIGFjY2VudEJlbG93ID0gZ3JvdXAubGFiZWwgPT09IFwiXFxcXGNcIjsgLy8gY2FsY3VsYXRlIHRoZSBhbW91bnQgb2Ygc3BhY2UgYmV0d2VlbiB0aGUgYm9keSBhbmQgdGhlIGFjY2VudFxuXG4gIHZhciBjbGVhcmFuY2UgPSBhY2NlbnRCZWxvdyA/IGJvZHkuaGVpZ2h0ICsgYm9keS5kZXB0aCA6IE1hdGgubWluKGJvZHkuaGVpZ2h0LCBvcHRpb25zLmZvbnRNZXRyaWNzKCkueEhlaWdodCk7IC8vIEJ1aWxkIHRoZSBhY2NlbnRcblxuICB2YXIgYWNjZW50Qm9keTtcblxuICBpZiAoIWdyb3VwLmlzU3RyZXRjaHkpIHtcbiAgICB2YXIgYWNjZW50O1xuICAgIHZhciB3aWR0aDtcblxuICAgIGlmIChncm91cC5sYWJlbCA9PT0gXCJcXFxcdmVjXCIpIHtcbiAgICAgIC8vIEJlZm9yZSB2ZXJzaW9uIDAuOSwgXFx2ZWMgdXNlZCB0aGUgY29tYmluaW5nIGZvbnQgZ2x5cGggVSsyMEQ3LlxuICAgICAgLy8gQnV0IGJyb3dzZXJzLCBlc3BlY2lhbGx5IFNhZmFyaSwgYXJlIG5vdCBjb25zaXN0ZW50IGluIGhvdyB0aGV5XG4gICAgICAvLyByZW5kZXIgY29tYmluaW5nIGNoYXJhY3RlcnMgd2hlbiBub3QgcHJlY2VkZWQgYnkgYSBjaGFyYWN0ZXIuXG4gICAgICAvLyBTbyBub3cgd2UgdXNlIGFuIFNWRy5cbiAgICAgIC8vIElmIFNhZmFyaSByZWZvcm1zLCB3ZSBzaG91bGQgY29uc2lkZXIgcmV2ZXJ0aW5nIHRvIHRoZSBnbHlwaC5cbiAgICAgIGFjY2VudCA9IGJ1aWxkQ29tbW9uLnN0YXRpY1N2ZyhcInZlY1wiLCBvcHRpb25zKTtcbiAgICAgIHdpZHRoID0gYnVpbGRDb21tb24uc3ZnRGF0YS52ZWNbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjY2VudCA9IGJ1aWxkQ29tbW9uLm1ha2VPcmQoe1xuICAgICAgICBtb2RlOiBncm91cC5tb2RlLFxuICAgICAgICB0ZXh0OiBncm91cC5sYWJlbFxuICAgICAgfSwgb3B0aW9ucywgXCJ0ZXh0b3JkXCIpO1xuICAgICAgYWNjZW50ID0gYXNzZXJ0U3ltYm9sRG9tTm9kZShhY2NlbnQpOyAvLyBSZW1vdmUgdGhlIGl0YWxpYyBjb3JyZWN0aW9uIG9mIHRoZSBhY2NlbnQsIGJlY2F1c2UgaXQgb25seSBzZXJ2ZXMgdG9cbiAgICAgIC8vIHNoaWZ0IHRoZSBhY2NlbnQgb3ZlciB0byBhIHBsYWNlIHdlIGRvbid0IHdhbnQuXG5cbiAgICAgIGFjY2VudC5pdGFsaWMgPSAwO1xuICAgICAgd2lkdGggPSBhY2NlbnQud2lkdGg7XG5cbiAgICAgIGlmIChhY2NlbnRCZWxvdykge1xuICAgICAgICBjbGVhcmFuY2UgKz0gYWNjZW50LmRlcHRoO1xuICAgICAgfVxuICAgIH1cblxuICAgIGFjY2VudEJvZHkgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJhY2NlbnQtYm9keVwiXSwgW2FjY2VudF0pOyAvLyBcIkZ1bGxcIiBhY2NlbnRzIGV4cGFuZCB0aGUgd2lkdGggb2YgdGhlIHJlc3VsdGluZyBzeW1ib2wgdG8gYmVcbiAgICAvLyBhdCBsZWFzdCB0aGUgd2lkdGggb2YgdGhlIGFjY2VudCwgYW5kIG92ZXJsYXAgZGlyZWN0bHkgb250byB0aGVcbiAgICAvLyBjaGFyYWN0ZXIgd2l0aG91dCBhbnkgdmVydGljYWwgb2Zmc2V0LlxuXG4gICAgdmFyIGFjY2VudEZ1bGwgPSBncm91cC5sYWJlbCA9PT0gXCJcXFxcdGV4dGNpcmNsZWRcIjtcblxuICAgIGlmIChhY2NlbnRGdWxsKSB7XG4gICAgICBhY2NlbnRCb2R5LmNsYXNzZXMucHVzaCgnYWNjZW50LWZ1bGwnKTtcbiAgICAgIGNsZWFyYW5jZSA9IGJvZHkuaGVpZ2h0O1xuICAgIH0gLy8gU2hpZnQgdGhlIGFjY2VudCBvdmVyIGJ5IHRoZSBza2V3LlxuXG5cbiAgICB2YXIgbGVmdCA9IHNrZXc7IC8vIENTUyBkZWZpbmVzIGAua2F0ZXggLmFjY2VudCAuYWNjZW50LWJvZHk6bm90KC5hY2NlbnQtZnVsbCkgeyB3aWR0aDogMCB9YFxuICAgIC8vIHNvIHRoYXQgdGhlIGFjY2VudCBkb2Vzbid0IGNvbnRyaWJ1dGUgdG8gdGhlIGJvdW5kaW5nIGJveC5cbiAgICAvLyBXZSBuZWVkIHRvIHNoaWZ0IHRoZSBjaGFyYWN0ZXIgYnkgaXRzIHdpZHRoIChlZmZlY3RpdmVseSBoYWxmXG4gICAgLy8gaXRzIHdpZHRoKSB0byBjb21wZW5zYXRlLlxuXG4gICAgaWYgKCFhY2NlbnRGdWxsKSB7XG4gICAgICBsZWZ0IC09IHdpZHRoIC8gMjtcbiAgICB9XG5cbiAgICBhY2NlbnRCb2R5LnN0eWxlLmxlZnQgPSBsZWZ0ICsgXCJlbVwiOyAvLyBcXHRleHRjaXJjbGVkIHVzZXMgdGhlIFxcYmlnY2lyYyBnbHlwaCwgc28gaXQgbmVlZHMgc29tZVxuICAgIC8vIHZlcnRpY2FsIGFkanVzdG1lbnQgdG8gbWF0Y2ggTGFUZVguXG5cbiAgICBpZiAoZ3JvdXAubGFiZWwgPT09IFwiXFxcXHRleHRjaXJjbGVkXCIpIHtcbiAgICAgIGFjY2VudEJvZHkuc3R5bGUudG9wID0gXCIuMmVtXCI7XG4gICAgfVxuXG4gICAgYWNjZW50Qm9keSA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICBwb3NpdGlvblR5cGU6IFwiZmlyc3RCYXNlbGluZVwiLFxuICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBib2R5XG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwia2VyblwiLFxuICAgICAgICBzaXplOiAtY2xlYXJhbmNlXG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBhY2NlbnRCb2R5XG4gICAgICB9XVxuICAgIH0sIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIGFjY2VudEJvZHkgPSBzdHJldGNoeS5zdmdTcGFuKGdyb3VwLCBvcHRpb25zKTtcbiAgICBhY2NlbnRCb2R5ID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgIHBvc2l0aW9uVHlwZTogXCJmaXJzdEJhc2VsaW5lXCIsXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGJvZHlcbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGFjY2VudEJvZHksXG4gICAgICAgIHdyYXBwZXJDbGFzc2VzOiBbXCJzdmctYWxpZ25cIl0sXG4gICAgICAgIHdyYXBwZXJTdHlsZTogc2tldyA+IDAgPyB7XG4gICAgICAgICAgd2lkdGg6IFwiY2FsYygxMDAlIC0gXCIgKyAyICogc2tldyArIFwiZW0pXCIsXG4gICAgICAgICAgbWFyZ2luTGVmdDogMiAqIHNrZXcgKyBcImVtXCJcbiAgICAgICAgfSA6IHVuZGVmaW5lZFxuICAgICAgfV1cbiAgICB9LCBvcHRpb25zKTtcbiAgfVxuXG4gIHZhciBhY2NlbnRXcmFwID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wibW9yZFwiLCBcImFjY2VudFwiXSwgW2FjY2VudEJvZHldLCBvcHRpb25zKTtcblxuICBpZiAoc3VwU3ViR3JvdXApIHtcbiAgICAvLyBIZXJlLCB3ZSByZXBsYWNlIHRoZSBcImJhc2VcIiBjaGlsZCBvZiB0aGUgc3Vwc3ViIHdpdGggb3VyIG5ld2x5XG4gICAgLy8gZ2VuZXJhdGVkIGFjY2VudC5cbiAgICBzdXBTdWJHcm91cC5jaGlsZHJlblswXSA9IGFjY2VudFdyYXA7IC8vIFNpbmNlIHdlIGRvbid0IHJlcnVuIHRoZSBoZWlnaHQgY2FsY3VsYXRpb24gYWZ0ZXIgcmVwbGFjaW5nIHRoZVxuICAgIC8vIGFjY2VudCwgd2UgbWFudWFsbHkgcmVjYWxjdWxhdGUgaGVpZ2h0LlxuXG4gICAgc3VwU3ViR3JvdXAuaGVpZ2h0ID0gTWF0aC5tYXgoYWNjZW50V3JhcC5oZWlnaHQsIHN1cFN1Ykdyb3VwLmhlaWdodCk7IC8vIEFjY2VudHMgc2hvdWxkIGFsd2F5cyBiZSBvcmRzLCBldmVuIHdoZW4gdGhlaXIgaW5uYXJkcyBhcmUgbm90LlxuXG4gICAgc3VwU3ViR3JvdXAuY2xhc3Nlc1swXSA9IFwibW9yZFwiO1xuICAgIHJldHVybiBzdXBTdWJHcm91cDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYWNjZW50V3JhcDtcbiAgfVxufTtcblxudmFyIG1hdGhtbEJ1aWxkZXIgPSBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gIHZhciBhY2NlbnROb2RlID0gZ3JvdXAuaXNTdHJldGNoeSA/IHN0cmV0Y2h5Lm1hdGhNTG5vZGUoZ3JvdXAubGFiZWwpIDogbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtb1wiLCBbbWFrZVRleHQoZ3JvdXAubGFiZWwsIGdyb3VwLm1vZGUpXSk7XG4gIHZhciBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtb3ZlclwiLCBbYnVpbGRNYXRoTUxfYnVpbGRHcm91cChncm91cC5iYXNlLCBvcHRpb25zKSwgYWNjZW50Tm9kZV0pO1xuICBub2RlLnNldEF0dHJpYnV0ZShcImFjY2VudFwiLCBcInRydWVcIik7XG4gIHJldHVybiBub2RlO1xufTtcblxudmFyIE5PTl9TVFJFVENIWV9BQ0NFTlRfUkVHRVggPSBuZXcgUmVnRXhwKFtcIlxcXFxhY3V0ZVwiLCBcIlxcXFxncmF2ZVwiLCBcIlxcXFxkZG90XCIsIFwiXFxcXHRpbGRlXCIsIFwiXFxcXGJhclwiLCBcIlxcXFxicmV2ZVwiLCBcIlxcXFxjaGVja1wiLCBcIlxcXFxoYXRcIiwgXCJcXFxcdmVjXCIsIFwiXFxcXGRvdFwiLCBcIlxcXFxtYXRocmluZ1wiXS5tYXAoZnVuY3Rpb24gKGFjY2VudCkge1xuICByZXR1cm4gXCJcXFxcXCIgKyBhY2NlbnQ7XG59KS5qb2luKFwifFwiKSk7IC8vIEFjY2VudHNcblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImFjY2VudFwiLFxuICBuYW1lczogW1wiXFxcXGFjdXRlXCIsIFwiXFxcXGdyYXZlXCIsIFwiXFxcXGRkb3RcIiwgXCJcXFxcdGlsZGVcIiwgXCJcXFxcYmFyXCIsIFwiXFxcXGJyZXZlXCIsIFwiXFxcXGNoZWNrXCIsIFwiXFxcXGhhdFwiLCBcIlxcXFx2ZWNcIiwgXCJcXFxcZG90XCIsIFwiXFxcXG1hdGhyaW5nXCIsIFwiXFxcXHdpZGVjaGVja1wiLCBcIlxcXFx3aWRlaGF0XCIsIFwiXFxcXHdpZGV0aWxkZVwiLCBcIlxcXFxvdmVycmlnaHRhcnJvd1wiLCBcIlxcXFxvdmVybGVmdGFycm93XCIsIFwiXFxcXE92ZXJyaWdodGFycm93XCIsIFwiXFxcXG92ZXJsZWZ0cmlnaHRhcnJvd1wiLCBcIlxcXFxvdmVyZ3JvdXBcIiwgXCJcXFxcb3ZlcmxpbmVzZWdtZW50XCIsIFwiXFxcXG92ZXJsZWZ0aGFycG9vblwiLCBcIlxcXFxvdmVycmlnaHRoYXJwb29uXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDFcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihjb250ZXh0LCBhcmdzKSB7XG4gICAgdmFyIGJhc2UgPSBub3JtYWxpemVBcmd1bWVudChhcmdzWzBdKTtcbiAgICB2YXIgaXNTdHJldGNoeSA9ICFOT05fU1RSRVRDSFlfQUNDRU5UX1JFR0VYLnRlc3QoY29udGV4dC5mdW5jTmFtZSk7XG4gICAgdmFyIGlzU2hpZnR5ID0gIWlzU3RyZXRjaHkgfHwgY29udGV4dC5mdW5jTmFtZSA9PT0gXCJcXFxcd2lkZWhhdFwiIHx8IGNvbnRleHQuZnVuY05hbWUgPT09IFwiXFxcXHdpZGV0aWxkZVwiIHx8IGNvbnRleHQuZnVuY05hbWUgPT09IFwiXFxcXHdpZGVjaGVja1wiO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImFjY2VudFwiLFxuICAgICAgbW9kZTogY29udGV4dC5wYXJzZXIubW9kZSxcbiAgICAgIGxhYmVsOiBjb250ZXh0LmZ1bmNOYW1lLFxuICAgICAgaXNTdHJldGNoeTogaXNTdHJldGNoeSxcbiAgICAgIGlzU2hpZnR5OiBpc1NoaWZ0eSxcbiAgICAgIGJhc2U6IGJhc2VcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogaHRtbEJ1aWxkZXIsXG4gIG1hdGhtbEJ1aWxkZXI6IG1hdGhtbEJ1aWxkZXJcbn0pOyAvLyBUZXh0LW1vZGUgYWNjZW50c1xuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiYWNjZW50XCIsXG4gIG5hbWVzOiBbXCJcXFxcJ1wiLCBcIlxcXFxgXCIsIFwiXFxcXF5cIiwgXCJcXFxcflwiLCBcIlxcXFw9XCIsIFwiXFxcXHVcIiwgXCJcXFxcLlwiLCAnXFxcXFwiJywgXCJcXFxcY1wiLCBcIlxcXFxyXCIsIFwiXFxcXEhcIiwgXCJcXFxcdlwiLCBcIlxcXFx0ZXh0Y2lyY2xlZFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWUsXG4gICAgYWxsb3dlZEluTWF0aDogdHJ1ZSxcbiAgICAvLyB1bmxlc3MgaW4gc3RyaWN0IG1vZGVcbiAgICBhcmdUeXBlczogW1wicHJpbWl0aXZlXCJdXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoY29udGV4dCwgYXJncykge1xuICAgIHZhciBiYXNlID0gYXJnc1swXTtcbiAgICB2YXIgbW9kZSA9IGNvbnRleHQucGFyc2VyLm1vZGU7XG5cbiAgICBpZiAobW9kZSA9PT0gXCJtYXRoXCIpIHtcbiAgICAgIGNvbnRleHQucGFyc2VyLnNldHRpbmdzLnJlcG9ydE5vbnN0cmljdChcIm1hdGhWc1RleHRBY2NlbnRzXCIsIFwiTGFUZVgncyBhY2NlbnQgXCIgKyBjb250ZXh0LmZ1bmNOYW1lICsgXCIgd29ya3Mgb25seSBpbiB0ZXh0IG1vZGVcIik7XG4gICAgICBtb2RlID0gXCJ0ZXh0XCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiYWNjZW50XCIsXG4gICAgICBtb2RlOiBtb2RlLFxuICAgICAgbGFiZWw6IGNvbnRleHQuZnVuY05hbWUsXG4gICAgICBpc1N0cmV0Y2h5OiBmYWxzZSxcbiAgICAgIGlzU2hpZnR5OiB0cnVlLFxuICAgICAgYmFzZTogYmFzZVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBodG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogbWF0aG1sQnVpbGRlclxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL2FjY2VudHVuZGVyLmpzXG4vLyBIb3Jpem9udGFsIG92ZXJsYXAgZnVuY3Rpb25zXG5cblxuXG5cblxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiYWNjZW50VW5kZXJcIixcbiAgbmFtZXM6IFtcIlxcXFx1bmRlcmxlZnRhcnJvd1wiLCBcIlxcXFx1bmRlcnJpZ2h0YXJyb3dcIiwgXCJcXFxcdW5kZXJsZWZ0cmlnaHRhcnJvd1wiLCBcIlxcXFx1bmRlcmdyb3VwXCIsIFwiXFxcXHVuZGVybGluZXNlZ21lbnRcIiwgXCJcXFxcdXRpbGRlXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDFcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyLFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWYuZnVuY05hbWU7XG4gICAgdmFyIGJhc2UgPSBhcmdzWzBdO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImFjY2VudFVuZGVyXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGxhYmVsOiBmdW5jTmFtZSxcbiAgICAgIGJhc2U6IGJhc2VcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICAvLyBUcmVhdCB1bmRlciBhY2NlbnRzIG11Y2ggbGlrZSB1bmRlcmxpbmVzLlxuICAgIHZhciBpbm5lckdyb3VwID0gYnVpbGRHcm91cChncm91cC5iYXNlLCBvcHRpb25zKTtcbiAgICB2YXIgYWNjZW50Qm9keSA9IHN0cmV0Y2h5LnN2Z1NwYW4oZ3JvdXAsIG9wdGlvbnMpO1xuICAgIHZhciBrZXJuID0gZ3JvdXAubGFiZWwgPT09IFwiXFxcXHV0aWxkZVwiID8gMC4xMiA6IDA7IC8vIEdlbmVyYXRlIHRoZSB2bGlzdCwgd2l0aCB0aGUgYXBwcm9wcmlhdGUga2VybnNcblxuICAgIHZhciB2bGlzdCA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICBwb3NpdGlvblR5cGU6IFwidG9wXCIsXG4gICAgICBwb3NpdGlvbkRhdGE6IGlubmVyR3JvdXAuaGVpZ2h0LFxuICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBhY2NlbnRCb2R5LFxuICAgICAgICB3cmFwcGVyQ2xhc3NlczogW1wic3ZnLWFsaWduXCJdXG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwia2VyblwiLFxuICAgICAgICBzaXplOiBrZXJuXG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBpbm5lckdyb3VwXG4gICAgICB9XVxuICAgIH0sIG9wdGlvbnMpO1xuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtb3JkXCIsIFwiYWNjZW50dW5kZXJcIl0sIFt2bGlzdF0sIG9wdGlvbnMpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIGFjY2VudE5vZGUgPSBzdHJldGNoeS5tYXRoTUxub2RlKGdyb3VwLmxhYmVsKTtcbiAgICB2YXIgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXVuZGVyXCIsIFtidWlsZE1hdGhNTF9idWlsZEdyb3VwKGdyb3VwLmJhc2UsIG9wdGlvbnMpLCBhY2NlbnROb2RlXSk7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJhY2NlbnR1bmRlclwiLCBcInRydWVcIik7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn0pO1xuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy9hcnJvdy5qc1xuXG5cblxuXG5cblxuXG4vLyBIZWxwZXIgZnVuY3Rpb25cbnZhciBwYWRkZWROb2RlID0gZnVuY3Rpb24gcGFkZGVkTm9kZShncm91cCkge1xuICB2YXIgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXBhZGRlZFwiLCBncm91cCA/IFtncm91cF0gOiBbXSk7XG4gIG5vZGUuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgXCIrMC42ZW1cIik7XG4gIG5vZGUuc2V0QXR0cmlidXRlKFwibHNwYWNlXCIsIFwiMC4zZW1cIik7XG4gIHJldHVybiBub2RlO1xufTsgLy8gU3RyZXRjaHkgYXJyb3dzIHdpdGggYW4gb3B0aW9uYWwgYXJndW1lbnRcblxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwieEFycm93XCIsXG4gIG5hbWVzOiBbXCJcXFxceGxlZnRhcnJvd1wiLCBcIlxcXFx4cmlnaHRhcnJvd1wiLCBcIlxcXFx4TGVmdGFycm93XCIsIFwiXFxcXHhSaWdodGFycm93XCIsIFwiXFxcXHhsZWZ0cmlnaHRhcnJvd1wiLCBcIlxcXFx4TGVmdHJpZ2h0YXJyb3dcIiwgXCJcXFxceGhvb2tsZWZ0YXJyb3dcIiwgXCJcXFxceGhvb2tyaWdodGFycm93XCIsIFwiXFxcXHhtYXBzdG9cIiwgXCJcXFxceHJpZ2h0aGFycG9vbmRvd25cIiwgXCJcXFxceHJpZ2h0aGFycG9vbnVwXCIsIFwiXFxcXHhsZWZ0aGFycG9vbmRvd25cIiwgXCJcXFxceGxlZnRoYXJwb29udXBcIiwgXCJcXFxceHJpZ2h0bGVmdGhhcnBvb25zXCIsIFwiXFxcXHhsZWZ0cmlnaHRoYXJwb29uc1wiLCBcIlxcXFx4bG9uZ2VxdWFsXCIsIFwiXFxcXHh0d29oZWFkcmlnaHRhcnJvd1wiLCBcIlxcXFx4dHdvaGVhZGxlZnRhcnJvd1wiLCBcIlxcXFx4dG9mcm9tXCIsIC8vIFRoZSBuZXh0IDMgZnVuY3Rpb25zIGFyZSBoZXJlIHRvIHN1cHBvcnQgdGhlIG1oY2hlbSBleHRlbnNpb24uXG4gIC8vIERpcmVjdCB1c2Ugb2YgdGhlc2UgZnVuY3Rpb25zIGlzIGRpc2NvdXJhZ2VkIGFuZCBtYXkgYnJlYWsgc29tZWRheS5cbiAgXCJcXFxceHJpZ2h0bGVmdGFycm93c1wiLCBcIlxcXFx4cmlnaHRlcXVpbGlicml1bVwiLCBcIlxcXFx4bGVmdGVxdWlsaWJyaXVtXCIsIC8vIFRoZSBuZXh0IDMgZnVuY3Rpb25zIGFyZSBoZXJlIG9ubHkgdG8gc3VwcG9ydCB0aGUge0NEfSBlbnZpcm9ubWVudC5cbiAgXCJcXFxcXFxcXGNkcmlnaHRhcnJvd1wiLCBcIlxcXFxcXFxcY2RsZWZ0YXJyb3dcIiwgXCJcXFxcXFxcXGNkbG9uZ2VxdWFsXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgbnVtT3B0aW9uYWxBcmdzOiAxXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncywgb3B0QXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmLnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmLmZ1bmNOYW1lO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcInhBcnJvd1wiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBsYWJlbDogZnVuY05hbWUsXG4gICAgICBib2R5OiBhcmdzWzBdLFxuICAgICAgYmVsb3c6IG9wdEFyZ3NbMF1cbiAgICB9O1xuICB9LFxuICAvLyBGbG93IGlzIHVuYWJsZSB0byBjb3JyZWN0bHkgaW5mZXIgdGhlIHR5cGUgb2YgYGdyb3VwYCwgZXZlbiB0aG91Z2ggaXQnc1xuICAvLyB1bmFtaWJpZ3VvdXNseSBkZXRlcm1pbmVkIGZyb20gdGhlIHBhc3NlZC1pbiBgdHlwZWAgYWJvdmUuXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBzdHlsZSA9IG9wdGlvbnMuc3R5bGU7IC8vIEJ1aWxkIHRoZSBhcmd1bWVudCBncm91cHMgaW4gdGhlIGFwcHJvcHJpYXRlIHN0eWxlLlxuICAgIC8vIFJlZjogYW1zbWF0aC5kdHg6ICAgXFxoYm94eyRcXHNjcmlwdHN0eWxlXFxta2VybiMzbXV7IzZ9XFxta2VybiM0bXUkfSVcbiAgICAvLyBTb21lIGdyb3VwcyBjYW4gcmV0dXJuIGRvY3VtZW50IGZyYWdtZW50cy4gIEhhbmRsZSB0aG9zZSBieSB3cmFwcGluZ1xuICAgIC8vIHRoZW0gaW4gYSBzcGFuLlxuXG4gICAgdmFyIG5ld09wdGlvbnMgPSBvcHRpb25zLmhhdmluZ1N0eWxlKHN0eWxlLnN1cCgpKTtcbiAgICB2YXIgdXBwZXJHcm91cCA9IGJ1aWxkQ29tbW9uLndyYXBGcmFnbWVudChidWlsZEdyb3VwKGdyb3VwLmJvZHksIG5ld09wdGlvbnMsIG9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICB2YXIgYXJyb3dQcmVmaXggPSBncm91cC5sYWJlbC5zbGljZSgwLCAyKSA9PT0gXCJcXFxceFwiID8gXCJ4XCIgOiBcImNkXCI7XG4gICAgdXBwZXJHcm91cC5jbGFzc2VzLnB1c2goYXJyb3dQcmVmaXggKyBcIi1hcnJvdy1wYWRcIik7XG4gICAgdmFyIGxvd2VyR3JvdXA7XG5cbiAgICBpZiAoZ3JvdXAuYmVsb3cpIHtcbiAgICAgIC8vIEJ1aWxkIHRoZSBsb3dlciBncm91cFxuICAgICAgbmV3T3B0aW9ucyA9IG9wdGlvbnMuaGF2aW5nU3R5bGUoc3R5bGUuc3ViKCkpO1xuICAgICAgbG93ZXJHcm91cCA9IGJ1aWxkQ29tbW9uLndyYXBGcmFnbWVudChidWlsZEdyb3VwKGdyb3VwLmJlbG93LCBuZXdPcHRpb25zLCBvcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICBsb3dlckdyb3VwLmNsYXNzZXMucHVzaChhcnJvd1ByZWZpeCArIFwiLWFycm93LXBhZFwiKTtcbiAgICB9XG5cbiAgICB2YXIgYXJyb3dCb2R5ID0gc3RyZXRjaHkuc3ZnU3Bhbihncm91cCwgb3B0aW9ucyk7IC8vIFJlIHNoaWZ0OiBOb3RlIHRoYXQgc3RyZXRjaHkuc3ZnU3BhbiByZXR1cm5lZCBhcnJvd0JvZHkuZGVwdGggPSAwLlxuICAgIC8vIFRoZSBwb2ludCB3ZSB3YW50IG9uIHRoZSBtYXRoIGF4aXMgaXMgYXQgMC41ICogYXJyb3dCb2R5LmhlaWdodC5cblxuICAgIHZhciBhcnJvd1NoaWZ0ID0gLW9wdGlvbnMuZm9udE1ldHJpY3MoKS5heGlzSGVpZ2h0ICsgMC41ICogYXJyb3dCb2R5LmhlaWdodDsgLy8gMiBtdSBrZXJuLiBSZWY6IGFtc21hdGguZHR4OiAjN1xcaWYwIzJcXGVsc2VcXG1rZXJuIzJtdVxcZmlcblxuICAgIHZhciB1cHBlclNoaWZ0ID0gLW9wdGlvbnMuZm9udE1ldHJpY3MoKS5heGlzSGVpZ2h0IC0gMC41ICogYXJyb3dCb2R5LmhlaWdodCAtIDAuMTExOyAvLyAwLjExMSBlbSA9IDIgbXVcblxuICAgIGlmICh1cHBlckdyb3VwLmRlcHRoID4gMC4yNSB8fCBncm91cC5sYWJlbCA9PT0gXCJcXFxceGxlZnRlcXVpbGlicml1bVwiKSB7XG4gICAgICB1cHBlclNoaWZ0IC09IHVwcGVyR3JvdXAuZGVwdGg7IC8vIHNoaWZ0IHVwIGlmIGRlcHRoIGVuY3JvYWNoZXNcbiAgICB9IC8vIEdlbmVyYXRlIHRoZSB2bGlzdFxuXG5cbiAgICB2YXIgdmxpc3Q7XG5cbiAgICBpZiAobG93ZXJHcm91cCkge1xuICAgICAgdmFyIGxvd2VyU2hpZnQgPSAtb3B0aW9ucy5mb250TWV0cmljcygpLmF4aXNIZWlnaHQgKyBsb3dlckdyb3VwLmhlaWdodCArIDAuNSAqIGFycm93Qm9keS5oZWlnaHQgKyAwLjExMTtcbiAgICAgIHZsaXN0ID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgICAgcG9zaXRpb25UeXBlOiBcImluZGl2aWR1YWxTaGlmdFwiLFxuICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgICBlbGVtOiB1cHBlckdyb3VwLFxuICAgICAgICAgIHNoaWZ0OiB1cHBlclNoaWZ0XG4gICAgICAgIH0sIHtcbiAgICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgICBlbGVtOiBhcnJvd0JvZHksXG4gICAgICAgICAgc2hpZnQ6IGFycm93U2hpZnRcbiAgICAgICAgfSwge1xuICAgICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICAgIGVsZW06IGxvd2VyR3JvdXAsXG4gICAgICAgICAgc2hpZnQ6IGxvd2VyU2hpZnRcbiAgICAgICAgfV1cbiAgICAgIH0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bGlzdCA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICAgIHBvc2l0aW9uVHlwZTogXCJpbmRpdmlkdWFsU2hpZnRcIixcbiAgICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgICAgZWxlbTogdXBwZXJHcm91cCxcbiAgICAgICAgICBzaGlmdDogdXBwZXJTaGlmdFxuICAgICAgICB9LCB7XG4gICAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgICAgZWxlbTogYXJyb3dCb2R5LFxuICAgICAgICAgIHNoaWZ0OiBhcnJvd1NoaWZ0XG4gICAgICAgIH1dXG4gICAgICB9LCBvcHRpb25zKTtcbiAgICB9IC8vICRGbG93Rml4TWU6IFJlcGxhY2UgdGhpcyB3aXRoIHBhc3NpbmcgXCJzdmctYWxpZ25cIiBpbnRvIG1ha2VWTGlzdC5cblxuXG4gICAgdmxpc3QuY2hpbGRyZW5bMF0uY2hpbGRyZW5bMF0uY2hpbGRyZW5bMV0uY2xhc3Nlcy5wdXNoKFwic3ZnLWFsaWduXCIpO1xuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtcmVsXCIsIFwieC1hcnJvd1wiXSwgW3ZsaXN0XSwgb3B0aW9ucyk7XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgYXJyb3dOb2RlID0gc3RyZXRjaHkubWF0aE1Mbm9kZShncm91cC5sYWJlbCk7XG4gICAgYXJyb3dOb2RlLnNldEF0dHJpYnV0ZShcIm1pbnNpemVcIiwgZ3JvdXAubGFiZWwuY2hhckF0KDApID09PSBcInhcIiA/IFwiMS43NWVtXCIgOiBcIjMuMGVtXCIpO1xuICAgIHZhciBub2RlO1xuXG4gICAgaWYgKGdyb3VwLmJvZHkpIHtcbiAgICAgIHZhciB1cHBlck5vZGUgPSBwYWRkZWROb2RlKGJ1aWxkTWF0aE1MX2J1aWxkR3JvdXAoZ3JvdXAuYm9keSwgb3B0aW9ucykpO1xuXG4gICAgICBpZiAoZ3JvdXAuYmVsb3cpIHtcbiAgICAgICAgdmFyIGxvd2VyTm9kZSA9IHBhZGRlZE5vZGUoYnVpbGRNYXRoTUxfYnVpbGRHcm91cChncm91cC5iZWxvdywgb3B0aW9ucykpO1xuICAgICAgICBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtdW5kZXJvdmVyXCIsIFthcnJvd05vZGUsIGxvd2VyTm9kZSwgdXBwZXJOb2RlXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtb3ZlclwiLCBbYXJyb3dOb2RlLCB1cHBlck5vZGVdKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGdyb3VwLmJlbG93KSB7XG4gICAgICB2YXIgX2xvd2VyTm9kZSA9IHBhZGRlZE5vZGUoYnVpbGRNYXRoTUxfYnVpbGRHcm91cChncm91cC5iZWxvdywgb3B0aW9ucykpO1xuXG4gICAgICBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtdW5kZXJcIiwgW2Fycm93Tm9kZSwgX2xvd2VyTm9kZV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4uXG4gICAgICAvLyBQYXJzZXIuanMgdGhyb3dzIGFuIGVycm9yIGlmIHRoZXJlIGlzIG5vIGFyZ3VtZW50LlxuICAgICAgbm9kZSA9IHBhZGRlZE5vZGUoKTtcbiAgICAgIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1vdmVyXCIsIFthcnJvd05vZGUsIG5vZGVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZW52aXJvbm1lbnRzL2NkLmpzXG5cblxuXG5cblxuXG5cbnZhciBjZEFycm93RnVuY3Rpb25OYW1lID0ge1xuICBcIj5cIjogXCJcXFxcXFxcXGNkcmlnaHRhcnJvd1wiLFxuICBcIjxcIjogXCJcXFxcXFxcXGNkbGVmdGFycm93XCIsXG4gIFwiPVwiOiBcIlxcXFxcXFxcY2Rsb25nZXF1YWxcIixcbiAgXCJBXCI6IFwiXFxcXHVwYXJyb3dcIixcbiAgXCJWXCI6IFwiXFxcXGRvd25hcnJvd1wiLFxuICBcInxcIjogXCJcXFxcVmVydFwiLFxuICBcIi5cIjogXCJubyBhcnJvd1wiXG59O1xuXG52YXIgbmV3Q2VsbCA9IGZ1bmN0aW9uIG5ld0NlbGwoKSB7XG4gIC8vIENyZWF0ZSBhbiBlbXB0eSBjZWxsLCB0byBiZSBmaWxsZWQgYmVsb3cgd2l0aCBwYXJzZSBub2Rlcy5cbiAgLy8gVGhlIHBhcnNlVHJlZSBmcm9tIHRoaXMgbW9kdWxlIG11c3QgYmUgY29uc3RydWN0ZWQgbGlrZSB0aGVcbiAgLy8gb25lIGNyZWF0ZWQgYnkgcGFyc2VBcnJheSgpLCBzbyBhbiBlbXB0eSBDRCBjZWxsIG11c3RcbiAgLy8gYmUgYSBQYXJzZU5vZGU8XCJzdHlsaW5nXCI+LiBBbmQgQ0QgaXMgYWx3YXlzIGRpc3BsYXlzdHlsZS5cbiAgLy8gU28gdGhlc2UgdmFsdWVzIGFyZSBmaXhlZCBhbmQgZmxvdyBjYW4gZG8gaW1wbGljaXQgdHlwaW5nLlxuICByZXR1cm4ge1xuICAgIHR5cGU6IFwic3R5bGluZ1wiLFxuICAgIGJvZHk6IFtdLFxuICAgIG1vZGU6IFwibWF0aFwiLFxuICAgIHN0eWxlOiBcImRpc3BsYXlcIlxuICB9O1xufTtcblxudmFyIGlzU3RhcnRPZkFycm93ID0gZnVuY3Rpb24gaXNTdGFydE9mQXJyb3cobm9kZSkge1xuICByZXR1cm4gbm9kZS50eXBlID09PSBcInRleHRvcmRcIiAmJiBub2RlLnRleHQgPT09IFwiQFwiO1xufTtcblxudmFyIGlzTGFiZWxFbmQgPSBmdW5jdGlvbiBpc0xhYmVsRW5kKG5vZGUsIGVuZENoYXIpIHtcbiAgcmV0dXJuIChub2RlLnR5cGUgPT09IFwibWF0aG9yZFwiIHx8IG5vZGUudHlwZSA9PT0gXCJhdG9tXCIpICYmIG5vZGUudGV4dCA9PT0gZW5kQ2hhcjtcbn07XG5cbmZ1bmN0aW9uIGNkQXJyb3coYXJyb3dDaGFyLCBsYWJlbHMsIHBhcnNlcikge1xuICAvLyBSZXR1cm4gYSBwYXJzZSB0cmVlIG9mIGFuIGFycm93IGFuZCBpdHMgbGFiZWxzLlxuICAvLyBUaGlzIGFjdHMgaW4gYSB3YXkgc2ltaWxhciB0byBhIG1hY3JvIGV4cGFuc2lvbi5cbiAgdmFyIGZ1bmNOYW1lID0gY2RBcnJvd0Z1bmN0aW9uTmFtZVthcnJvd0NoYXJdO1xuXG4gIHN3aXRjaCAoZnVuY05hbWUpIHtcbiAgICBjYXNlIFwiXFxcXFxcXFxjZHJpZ2h0YXJyb3dcIjpcbiAgICBjYXNlIFwiXFxcXFxcXFxjZGxlZnRhcnJvd1wiOlxuICAgICAgcmV0dXJuIHBhcnNlci5jYWxsRnVuY3Rpb24oZnVuY05hbWUsIFtsYWJlbHNbMF1dLCBbbGFiZWxzWzFdXSk7XG5cbiAgICBjYXNlIFwiXFxcXHVwYXJyb3dcIjpcbiAgICBjYXNlIFwiXFxcXGRvd25hcnJvd1wiOlxuICAgICAge1xuICAgICAgICB2YXIgbGVmdExhYmVsID0gcGFyc2VyLmNhbGxGdW5jdGlvbihcIlxcXFxcXFxcY2RsZWZ0XCIsIFtsYWJlbHNbMF1dLCBbXSk7XG4gICAgICAgIHZhciBiYXJlQXJyb3cgPSB7XG4gICAgICAgICAgdHlwZTogXCJhdG9tXCIsXG4gICAgICAgICAgdGV4dDogZnVuY05hbWUsXG4gICAgICAgICAgbW9kZTogXCJtYXRoXCIsXG4gICAgICAgICAgZmFtaWx5OiBcInJlbFwiXG4gICAgICAgIH07XG4gICAgICAgIHZhciBzaXplZEFycm93ID0gcGFyc2VyLmNhbGxGdW5jdGlvbihcIlxcXFxCaWdcIiwgW2JhcmVBcnJvd10sIFtdKTtcbiAgICAgICAgdmFyIHJpZ2h0TGFiZWwgPSBwYXJzZXIuY2FsbEZ1bmN0aW9uKFwiXFxcXFxcXFxjZHJpZ2h0XCIsIFtsYWJlbHNbMV1dLCBbXSk7XG4gICAgICAgIHZhciBhcnJvd0dyb3VwID0ge1xuICAgICAgICAgIHR5cGU6IFwib3JkZ3JvdXBcIixcbiAgICAgICAgICBtb2RlOiBcIm1hdGhcIixcbiAgICAgICAgICBib2R5OiBbbGVmdExhYmVsLCBzaXplZEFycm93LCByaWdodExhYmVsXVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcGFyc2VyLmNhbGxGdW5jdGlvbihcIlxcXFxcXFxcY2RwYXJlbnRcIiwgW2Fycm93R3JvdXBdLCBbXSk7XG4gICAgICB9XG5cbiAgICBjYXNlIFwiXFxcXFxcXFxjZGxvbmdlcXVhbFwiOlxuICAgICAgcmV0dXJuIHBhcnNlci5jYWxsRnVuY3Rpb24oXCJcXFxcXFxcXGNkbG9uZ2VxdWFsXCIsIFtdLCBbXSk7XG5cbiAgICBjYXNlIFwiXFxcXFZlcnRcIjpcbiAgICAgIHtcbiAgICAgICAgdmFyIGFycm93ID0ge1xuICAgICAgICAgIHR5cGU6IFwidGV4dG9yZFwiLFxuICAgICAgICAgIHRleHQ6IFwiXFxcXFZlcnRcIixcbiAgICAgICAgICBtb2RlOiBcIm1hdGhcIlxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gcGFyc2VyLmNhbGxGdW5jdGlvbihcIlxcXFxCaWdcIiwgW2Fycm93XSwgW10pO1xuICAgICAgfVxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwidGV4dG9yZFwiLFxuICAgICAgICB0ZXh0OiBcIiBcIixcbiAgICAgICAgbW9kZTogXCJtYXRoXCJcbiAgICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2VDRChwYXJzZXIpIHtcbiAgLy8gR2V0IHRoZSBhcnJheSdzIHBhcnNlIG5vZGVzIHdpdGggXFxcXCB0ZW1wb3JhcmlseSBtYXBwZWQgdG8gXFxjci5cbiAgdmFyIHBhcnNlZFJvd3MgPSBbXTtcbiAgcGFyc2VyLmd1bGxldC5iZWdpbkdyb3VwKCk7XG4gIHBhcnNlci5ndWxsZXQubWFjcm9zLnNldChcIlxcXFxjclwiLCBcIlxcXFxcXFxcXFxcXHJlbGF4XCIpO1xuICBwYXJzZXIuZ3VsbGV0LmJlZ2luR3JvdXAoKTtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gICAgLy8gR2V0IHRoZSBwYXJzZSBub2RlcyBmb3IgdGhlIG5leHQgcm93LlxuICAgIHBhcnNlZFJvd3MucHVzaChwYXJzZXIucGFyc2VFeHByZXNzaW9uKGZhbHNlLCBcIlxcXFxcXFxcXCIpKTtcbiAgICBwYXJzZXIuZ3VsbGV0LmVuZEdyb3VwKCk7XG4gICAgcGFyc2VyLmd1bGxldC5iZWdpbkdyb3VwKCk7XG4gICAgdmFyIG5leHQgPSBwYXJzZXIuZmV0Y2goKS50ZXh0O1xuXG4gICAgaWYgKG5leHQgPT09IFwiJlwiIHx8IG5leHQgPT09IFwiXFxcXFxcXFxcIikge1xuICAgICAgcGFyc2VyLmNvbnN1bWUoKTtcbiAgICB9IGVsc2UgaWYgKG5leHQgPT09IFwiXFxcXGVuZFwiKSB7XG4gICAgICBpZiAocGFyc2VkUm93c1twYXJzZWRSb3dzLmxlbmd0aCAtIDFdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBwYXJzZWRSb3dzLnBvcCgpOyAvLyBmaW5hbCByb3cgZW5kZWQgaW4gXFxcXFxuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiRXhwZWN0ZWQgXFxcXFxcXFwgb3IgXFxcXGNyIG9yIFxcXFxlbmRcIiwgcGFyc2VyLm5leHRUb2tlbik7XG4gICAgfVxuICB9XG5cbiAgdmFyIHJvdyA9IFtdO1xuICB2YXIgYm9keSA9IFtyb3ddOyAvLyBMb29wIHRocnUgdGhlIHBhcnNlIG5vZGVzLiBDb2xsZWN0IHRoZW0gaW50byBjZWxscyBhbmQgYXJyb3dzLlxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyc2VkUm93cy5sZW5ndGg7IGkrKykge1xuICAgIC8vIFN0YXJ0IGEgbmV3IHJvdy5cbiAgICB2YXIgcm93Tm9kZXMgPSBwYXJzZWRSb3dzW2ldOyAvLyBDcmVhdGUgdGhlIGZpcnN0IGNlbGwuXG5cbiAgICB2YXIgY2VsbCA9IG5ld0NlbGwoKTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcm93Tm9kZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGlmICghaXNTdGFydE9mQXJyb3cocm93Tm9kZXNbal0pKSB7XG4gICAgICAgIC8vIElmIGEgcGFyc2VOb2RlIGlzIG5vdCBhbiBhcnJvdywgaXQgZ29lcyBpbnRvIGEgY2VsbC5cbiAgICAgICAgY2VsbC5ib2R5LnB1c2gocm93Tm9kZXNbal0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUGFyc2Ugbm9kZSBqIGlzIGFuIFwiQFwiLCB0aGUgc3RhcnQgb2YgYW4gYXJyb3cuXG4gICAgICAgIC8vIEJlZm9yZSBzdGFydGluZyBvbiB0aGUgYXJyb3csIHB1c2ggdGhlIGNlbGwgaW50byBgcm93YC5cbiAgICAgICAgcm93LnB1c2goY2VsbCk7IC8vIE5vdyBjb2xsZWN0IHBhcnNlTm9kZXMgaW50byBhbiBhcnJvdy5cbiAgICAgICAgLy8gVGhlIGNoYXJhY3RlciBhZnRlciBcIkBcIiBkZWZpbmVzIHRoZSBhcnJvdyB0eXBlLlxuXG4gICAgICAgIGogKz0gMTtcbiAgICAgICAgdmFyIGFycm93Q2hhciA9IGFzc2VydFN5bWJvbE5vZGVUeXBlKHJvd05vZGVzW2pdKS50ZXh0OyAvLyBDcmVhdGUgdHdvIGVtcHR5IGxhYmVsIG5vZGVzLiBXZSBtYXkgb3IgbWF5IG5vdCB1c2UgdGhlbS5cblxuICAgICAgICB2YXIgbGFiZWxzID0gbmV3IEFycmF5KDIpO1xuICAgICAgICBsYWJlbHNbMF0gPSB7XG4gICAgICAgICAgdHlwZTogXCJvcmRncm91cFwiLFxuICAgICAgICAgIG1vZGU6IFwibWF0aFwiLFxuICAgICAgICAgIGJvZHk6IFtdXG4gICAgICAgIH07XG4gICAgICAgIGxhYmVsc1sxXSA9IHtcbiAgICAgICAgICB0eXBlOiBcIm9yZGdyb3VwXCIsXG4gICAgICAgICAgbW9kZTogXCJtYXRoXCIsXG4gICAgICAgICAgYm9keTogW11cbiAgICAgICAgfTsgLy8gUHJvY2VzcyB0aGUgYXJyb3cuXG5cbiAgICAgICAgaWYgKFwiPXwuXCIuaW5kZXhPZihhcnJvd0NoYXIpID4gLTEpIHsvLyBUaHJlZSBcImFycm93c1wiLCBgYEA9YCwgYEB8YCwgYW5kIGBALmAsIGRvIG5vdCB0YWtlIGxhYmVscy5cbiAgICAgICAgICAvLyBEbyBub3RoaW5nIGhlcmUuXG4gICAgICAgIH0gZWxzZSBpZiAoXCI8PkFWXCIuaW5kZXhPZihhcnJvd0NoYXIpID4gLTEpIHtcbiAgICAgICAgICAvLyBGb3VyIGFycm93cywgYEA+Pj5gLCBgQDw8PGAsIGBAQUFBYCwgYW5kIGBAVlZWYCwgZWFjaCB0YWtlXG4gICAgICAgICAgLy8gdHdvIG9wdGlvbmFsIGxhYmVscy4gRS5nLiB0aGUgcmlnaHQtcG9pbnQgYXJyb3cgc3ludGF4IGlzXG4gICAgICAgICAgLy8gcmVhbGx5OiAgQD57b3B0aW9uYWwgbGFiZWx9PntvcHRpb25hbCBsYWJlbH0+XG4gICAgICAgICAgLy8gQ29sbGVjdCBwYXJzZU5vZGVzIGludG8gbGFiZWxzLlxuICAgICAgICAgIGZvciAodmFyIGxhYmVsTnVtID0gMDsgbGFiZWxOdW0gPCAyOyBsYWJlbE51bSsrKSB7XG4gICAgICAgICAgICB2YXIgaW5MYWJlbCA9IHRydWU7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGsgPSBqICsgMTsgayA8IHJvd05vZGVzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgIGlmIChpc0xhYmVsRW5kKHJvd05vZGVzW2tdLCBhcnJvd0NoYXIpKSB7XG4gICAgICAgICAgICAgICAgaW5MYWJlbCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGogPSBrO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGlzU3RhcnRPZkFycm93KHJvd05vZGVzW2tdKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIk1pc3NpbmcgYSBcIiArIGFycm93Q2hhciArIFwiIGNoYXJhY3RlciB0byBjb21wbGV0ZSBhIENEIGFycm93LlwiLCByb3dOb2Rlc1trXSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBsYWJlbHNbbGFiZWxOdW1dLmJvZHkucHVzaChyb3dOb2Rlc1trXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbkxhYmVsKSB7XG4gICAgICAgICAgICAgIC8vIGlzTGFiZWxFbmQgbmV2ZXIgcmV0dXJuZWQgYSB0cnVlLlxuICAgICAgICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJNaXNzaW5nIGEgXCIgKyBhcnJvd0NoYXIgKyBcIiBjaGFyYWN0ZXIgdG8gY29tcGxldGUgYSBDRCBhcnJvdy5cIiwgcm93Tm9kZXNbal0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJFeHBlY3RlZCBvbmUgb2YgXFxcIjw+QVY9fC5cXFwiIGFmdGVyIEBcIiwgcm93Tm9kZXNbal0pO1xuICAgICAgICB9IC8vIE5vdyBqb2luIHRoZSBhcnJvdyB0byBpdHMgbGFiZWxzLlxuXG5cbiAgICAgICAgdmFyIGFycm93ID0gY2RBcnJvdyhhcnJvd0NoYXIsIGxhYmVscywgcGFyc2VyKTsgLy8gV3JhcCB0aGUgYXJyb3cgaW4gIFBhcnNlTm9kZTxcInN0eWxpbmdcIj4uXG4gICAgICAgIC8vIFRoaXMgaXMgZG9uZSB0byBtYXRjaCBwYXJzZUFycmF5KCkgYmVoYXZpb3IuXG5cbiAgICAgICAgdmFyIHdyYXBwZWRBcnJvdyA9IHtcbiAgICAgICAgICB0eXBlOiBcInN0eWxpbmdcIixcbiAgICAgICAgICBib2R5OiBbYXJyb3ddLFxuICAgICAgICAgIG1vZGU6IFwibWF0aFwiLFxuICAgICAgICAgIHN0eWxlOiBcImRpc3BsYXlcIiAvLyBDRCBpcyBhbHdheXMgZGlzcGxheXN0eWxlLlxuXG4gICAgICAgIH07XG4gICAgICAgIHJvdy5wdXNoKHdyYXBwZWRBcnJvdyk7IC8vIEluIENEJ3Mgc3ludGF4LCBjZWxscyBhcmUgaW1wbGljaXQuIFRoYXQgaXMsIGV2ZXJ5dGhpbmcgdGhhdFxuICAgICAgICAvLyBpcyBub3QgYW4gYXJyb3cgZ2V0cyBjb2xsZWN0ZWQgaW50byBhIGNlbGwuIFNvIGNyZWF0ZSBhbiBlbXB0eVxuICAgICAgICAvLyBjZWxsIG5vdy4gSXQgd2lsbCBjb2xsZWN0IHVwY29taW5nIHBhcnNlTm9kZXMuXG5cbiAgICAgICAgY2VsbCA9IG5ld0NlbGwoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaSAlIDIgPT09IDApIHtcbiAgICAgIC8vIEV2ZW4tbnVtYmVyZWQgcm93cyBjb25zaXN0IG9mOiBjZWxsLCBhcnJvdywgY2VsbCwgYXJyb3csIC4uLiBjZWxsXG4gICAgICAvLyBUaGUgbGFzdCBjZWxsIGlzIG5vdCB5ZXQgcHVzaGVkIGludG8gYHJvd2AsIHNvOlxuICAgICAgcm93LnB1c2goY2VsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9kZC1udW1iZXJlZCByb3dzIGNvbnNpc3Qgb2Y6IHZlcnQgYXJyb3csIGVtcHR5IGNlbGwsIC4uLiB2ZXJ0IGFycm93XG4gICAgICAvLyBSZW1vdmUgdGhlIGVtcHR5IGNlbGwgdGhhdCB3YXMgcGxhY2VkIGF0IHRoZSBiZWdpbm5pbmcgb2YgYHJvd2AuXG4gICAgICByb3cuc2hpZnQoKTtcbiAgICB9XG5cbiAgICByb3cgPSBbXTtcbiAgICBib2R5LnB1c2gocm93KTtcbiAgfSAvLyBFbmQgcm93IGdyb3VwXG5cblxuICBwYXJzZXIuZ3VsbGV0LmVuZEdyb3VwKCk7IC8vIEVuZCBhcnJheSBncm91cCBkZWZpbmluZyBcXFxcXG5cbiAgcGFyc2VyLmd1bGxldC5lbmRHcm91cCgpOyAvLyBkZWZpbmUgY29sdW1uIHNlcGFyYXRpb24uXG5cbiAgdmFyIGNvbHMgPSBuZXcgQXJyYXkoYm9keVswXS5sZW5ndGgpLmZpbGwoe1xuICAgIHR5cGU6IFwiYWxpZ25cIixcbiAgICBhbGlnbjogXCJjXCIsXG4gICAgcHJlZ2FwOiAwLjI1LFxuICAgIC8vIENEIHBhY2thZ2Ugc2V0cyBcXGVuc2tpcCBiZXR3ZWVuIGNvbHVtbnMuXG4gICAgcG9zdGdhcDogMC4yNSAvLyBTbyBwcmUgYW5kIHBvc3QgZWFjaCBnZXQgaGFsZiBhbiBcXGVuc2tpcCwgaS5lLiAwLjI1ZW0uXG5cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJhcnJheVwiLFxuICAgIG1vZGU6IFwibWF0aFwiLFxuICAgIGJvZHk6IGJvZHksXG4gICAgYXJyYXlzdHJldGNoOiAxLFxuICAgIGFkZEpvdDogdHJ1ZSxcbiAgICByb3dHYXBzOiBbbnVsbF0sXG4gICAgY29sczogY29scyxcbiAgICBjb2xTZXBhcmF0aW9uVHlwZTogXCJDRFwiLFxuICAgIGhMaW5lc0JlZm9yZVJvdzogbmV3IEFycmF5KGJvZHkubGVuZ3RoICsgMSkuZmlsbChbXSlcbiAgfTtcbn0gLy8gVGhlIGZ1bmN0aW9ucyBiZWxvdyBhcmUgbm90IGF2YWlsYWJsZSBmb3IgZ2VuZXJhbCB1c2UuXG4vLyBUaGV5IGFyZSBoZXJlIG9ubHkgZm9yIGludGVybmFsIHVzZSBieSB0aGUge0NEfSBlbnZpcm9ubWVudCBpbiBwbGFjaW5nIGxhYmVsc1xuLy8gbmV4dCB0byB2ZXJ0aWNhbCBhcnJvd3MuXG4vLyBXZSBkb24ndCBuZWVkIGFueSBzdWNoIGZ1bmN0aW9ucyBmb3IgaG9yaXpvbnRhbCBhcnJvd3MgYmVjYXVzZSB3ZSBjYW4gcmV1c2Vcbi8vIHRoZSBmdW5jdGlvbmFsaXR5IHRoYXQgYWxyZWFkeSBleGlzdHMgZm9yIGV4dGVuc2libGUgYXJyb3dzLlxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiY2RsYWJlbFwiLFxuICBuYW1lczogW1wiXFxcXFxcXFxjZGxlZnRcIiwgXCJcXFxcXFxcXGNkcmlnaHRcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXIsXG4gICAgICAgIGZ1bmNOYW1lID0gX3JlZi5mdW5jTmFtZTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJjZGxhYmVsXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIHNpZGU6IGZ1bmNOYW1lLnNsaWNlKDQpLFxuICAgICAgbGFiZWw6IGFyZ3NbMF1cbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgbmV3T3B0aW9ucyA9IG9wdGlvbnMuaGF2aW5nU3R5bGUob3B0aW9ucy5zdHlsZS5zdXAoKSk7XG4gICAgdmFyIGxhYmVsID0gYnVpbGRDb21tb24ud3JhcEZyYWdtZW50KGJ1aWxkR3JvdXAoZ3JvdXAubGFiZWwsIG5ld09wdGlvbnMsIG9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICBsYWJlbC5jbGFzc2VzLnB1c2goXCJjZC1sYWJlbC1cIiArIGdyb3VwLnNpZGUpO1xuICAgIGxhYmVsLnN0eWxlLmJvdHRvbSA9IDAuOCAtIGxhYmVsLmRlcHRoICsgXCJlbVwiOyAvLyBaZXJvIG91dCBsYWJlbCBoZWlnaHQgJiBkZXB0aCwgc28gdmVydGljYWwgYWxpZ24gb2YgYXJyb3cgaXMgc2V0XG4gICAgLy8gYnkgdGhlIGFycm93IGhlaWdodCwgbm90IGJ5IHRoZSBsYWJlbC5cblxuICAgIGxhYmVsLmhlaWdodCA9IDA7XG4gICAgbGFiZWwuZGVwdGggPSAwO1xuICAgIHJldHVybiBsYWJlbDtcbiAgfSxcbiAgbWF0aG1sQnVpbGRlcjogZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBsYWJlbCA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXJvd1wiLCBbYnVpbGRNYXRoTUxfYnVpbGRHcm91cChncm91cC5sYWJlbCwgb3B0aW9ucyldKTtcbiAgICBsYWJlbCA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXBhZGRlZFwiLCBbbGFiZWxdKTtcbiAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBcIjBcIik7XG5cbiAgICBpZiAoZ3JvdXAuc2lkZSA9PT0gXCJsZWZ0XCIpIHtcbiAgICAgIGxhYmVsLnNldEF0dHJpYnV0ZShcImxzcGFjZVwiLCBcIi0xd2lkdGhcIik7XG4gICAgfSAvLyBXZSBoYXZlIHRvIGd1ZXNzIGF0IHZlcnRpY2FsIGFsaWdubWVudC4gV2Uga25vdyB0aGUgYXJyb3cgaXMgMS44ZW0gdGFsbCxcbiAgICAvLyBCdXQgd2UgZG9uJ3Qga25vdyB0aGUgaGVpZ2h0IG9yIGRlcHRoIG9mIHRoZSBsYWJlbC5cblxuXG4gICAgbGFiZWwuc2V0QXR0cmlidXRlKFwidm9mZnNldFwiLCBcIjAuN2VtXCIpO1xuICAgIGxhYmVsID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtc3R5bGVcIiwgW2xhYmVsXSk7XG4gICAgbGFiZWwuc2V0QXR0cmlidXRlKFwiZGlzcGxheXN0eWxlXCIsIFwiZmFsc2VcIik7XG4gICAgbGFiZWwuc2V0QXR0cmlidXRlKFwic2NyaXB0bGV2ZWxcIiwgXCIxXCIpO1xuICAgIHJldHVybiBsYWJlbDtcbiAgfVxufSk7XG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiY2RsYWJlbHBhcmVudFwiLFxuICBuYW1lczogW1wiXFxcXFxcXFxjZHBhcmVudFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZjIsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZjIucGFyc2VyO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImNkbGFiZWxwYXJlbnRcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgZnJhZ21lbnQ6IGFyZ3NbMF1cbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICAvLyBXcmFwIHRoZSB2ZXJ0aWNhbCBhcnJvdyBhbmQgaXRzIGxhYmVscy5cbiAgICAvLyBUaGUgcGFyZW50IGdldHMgcG9zaXRpb246IHJlbGF0aXZlLiBUaGUgY2hpbGQgZ2V0cyBwb3NpdGlvbjogYWJzb2x1dGUuXG4gICAgLy8gU28gQ1NTIGNhbiBsb2NhdGUgdGhlIGxhYmVsIGNvcnJlY3RseS5cbiAgICB2YXIgcGFyZW50ID0gYnVpbGRDb21tb24ud3JhcEZyYWdtZW50KGJ1aWxkR3JvdXAoZ3JvdXAuZnJhZ21lbnQsIG9wdGlvbnMpLCBvcHRpb25zKTtcbiAgICBwYXJlbnQuY2xhc3Nlcy5wdXNoKFwiY2QtdmVydC1hcnJvd1wiKTtcbiAgICByZXR1cm4gcGFyZW50O1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXJvd1wiLCBbYnVpbGRNYXRoTUxfYnVpbGRHcm91cChncm91cC5mcmFnbWVudCwgb3B0aW9ucyldKTtcbiAgfVxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL2NoYXIuanNcblxuXG4gLy8gXFxAY2hhciBpcyBhbiBpbnRlcm5hbCBmdW5jdGlvbiB0aGF0IHRha2VzIGEgZ3JvdXBlZCBkZWNpbWFsIGFyZ3VtZW50IGxpa2Vcbi8vIHsxMjN9IGFuZCBjb252ZXJ0cyBpbnRvIHN5bWJvbCB3aXRoIGNvZGUgMTIzLiAgSXQgaXMgdXNlZCBieSB0aGUgKm1hY3JvKlxuLy8gXFxjaGFyIGRlZmluZWQgaW4gbWFjcm9zLmpzLlxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwidGV4dG9yZFwiLFxuICBuYW1lczogW1wiXFxcXEBjaGFyXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXI7XG4gICAgdmFyIGFyZyA9IGFzc2VydE5vZGVUeXBlKGFyZ3NbMF0sIFwib3JkZ3JvdXBcIik7XG4gICAgdmFyIGdyb3VwID0gYXJnLmJvZHk7XG4gICAgdmFyIG51bWJlciA9IFwiXCI7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3VwLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbm9kZSA9IGFzc2VydE5vZGVUeXBlKGdyb3VwW2ldLCBcInRleHRvcmRcIik7XG4gICAgICBudW1iZXIgKz0gbm9kZS50ZXh0O1xuICAgIH1cblxuICAgIHZhciBjb2RlID0gcGFyc2VJbnQobnVtYmVyKTtcbiAgICB2YXIgdGV4dDtcblxuICAgIGlmIChpc05hTihjb2RlKSkge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiXFxcXEBjaGFyIGhhcyBub24tbnVtZXJpYyBhcmd1bWVudCBcIiArIG51bWJlcik7IC8vIElmIHdlIGRyb3AgSUUgc3VwcG9ydCwgdGhlIGZvbGxvd2luZyBjb2RlIGNvdWxkIGJlIHJlcGxhY2VkIHdpdGhcbiAgICAgIC8vIHRleHQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludChjb2RlKVxuICAgIH0gZWxzZSBpZiAoY29kZSA8IDAgfHwgY29kZSA+PSAweDEwZmZmZikge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiXFxcXEBjaGFyIHdpdGggaW52YWxpZCBjb2RlIHBvaW50IFwiICsgbnVtYmVyKTtcbiAgICB9IGVsc2UgaWYgKGNvZGUgPD0gMHhmZmZmKSB7XG4gICAgICB0ZXh0ID0gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQXN0cmFsIGNvZGUgcG9pbnQ7IHNwbGl0IGludG8gc3Vycm9nYXRlIGhhbHZlc1xuICAgICAgY29kZSAtPSAweDEwMDAwO1xuICAgICAgdGV4dCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoKGNvZGUgPj4gMTApICsgMHhkODAwLCAoY29kZSAmIDB4M2ZmKSArIDB4ZGMwMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwidGV4dG9yZFwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICB0ZXh0OiB0ZXh0XG4gICAgfTtcbiAgfVxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL2NvbG9yLmpzXG5cblxuXG5cblxuXG5cbnZhciBjb2xvcl9odG1sQnVpbGRlciA9IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50cyA9IGJ1aWxkRXhwcmVzc2lvbihncm91cC5ib2R5LCBvcHRpb25zLndpdGhDb2xvcihncm91cC5jb2xvciksIGZhbHNlKTsgLy8gXFxjb2xvciBpc24ndCBzdXBwb3NlZCB0byBhZmZlY3QgdGhlIHR5cGUgb2YgdGhlIGVsZW1lbnRzIGl0IGNvbnRhaW5zLlxuICAvLyBUbyBhY2NvbXBsaXNoIHRoaXMsIHdlIHdyYXAgdGhlIHJlc3VsdHMgaW4gYSBmcmFnbWVudCwgc28gdGhlIGlubmVyXG4gIC8vIGVsZW1lbnRzIHdpbGwgYmUgYWJsZSB0byBkaXJlY3RseSBpbnRlcmFjdCB3aXRoIHRoZWlyIG5laWdoYm9ycy4gRm9yXG4gIC8vIGV4YW1wbGUsIGBcXGNvbG9ye3JlZH17MiArfSAzYCBoYXMgdGhlIHNhbWUgc3BhY2luZyBhcyBgMiArIDNgXG5cbiAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VGcmFnbWVudChlbGVtZW50cyk7XG59O1xuXG52YXIgY29sb3JfbWF0aG1sQnVpbGRlciA9IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgdmFyIGlubmVyID0gYnVpbGRNYXRoTUxfYnVpbGRFeHByZXNzaW9uKGdyb3VwLmJvZHksIG9wdGlvbnMud2l0aENvbG9yKGdyb3VwLmNvbG9yKSk7XG4gIHZhciBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtc3R5bGVcIiwgaW5uZXIpO1xuICBub2RlLnNldEF0dHJpYnV0ZShcIm1hdGhjb2xvclwiLCBncm91cC5jb2xvcik7XG4gIHJldHVybiBub2RlO1xufTtcblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImNvbG9yXCIsXG4gIG5hbWVzOiBbXCJcXFxcdGV4dGNvbG9yXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDIsXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZSxcbiAgICBhcmdUeXBlczogW1wiY29sb3JcIiwgXCJvcmlnaW5hbFwiXVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXI7XG4gICAgdmFyIGNvbG9yID0gYXNzZXJ0Tm9kZVR5cGUoYXJnc1swXSwgXCJjb2xvci10b2tlblwiKS5jb2xvcjtcbiAgICB2YXIgYm9keSA9IGFyZ3NbMV07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiY29sb3JcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgYm9keTogb3JkYXJndW1lbnQoYm9keSlcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogY29sb3JfaHRtbEJ1aWxkZXIsXG4gIG1hdGhtbEJ1aWxkZXI6IGNvbG9yX21hdGhtbEJ1aWxkZXJcbn0pO1xuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImNvbG9yXCIsXG4gIG5hbWVzOiBbXCJcXFxcY29sb3JcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMSxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlLFxuICAgIGFyZ1R5cGVzOiBbXCJjb2xvclwiXVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYyLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYyLnBhcnNlcixcbiAgICAgICAgYnJlYWtPblRva2VuVGV4dCA9IF9yZWYyLmJyZWFrT25Ub2tlblRleHQ7XG4gICAgdmFyIGNvbG9yID0gYXNzZXJ0Tm9kZVR5cGUoYXJnc1swXSwgXCJjb2xvci10b2tlblwiKS5jb2xvcjsgLy8gU2V0IG1hY3JvIFxcY3VycmVudEBjb2xvciBpbiBjdXJyZW50IG5hbWVzcGFjZSB0byBzdG9yZSB0aGUgY3VycmVudFxuICAgIC8vIGNvbG9yLCBtaW1pY2tpbmcgdGhlIGJlaGF2aW9yIG9mIGNvbG9yLnN0eS5cbiAgICAvLyBUaGlzIGlzIGN1cnJlbnRseSB1c2VkIGp1c3QgdG8gY29ycmVjdGx5IGNvbG9yIGEgXFxyaWdodFxuICAgIC8vIHRoYXQgZm9sbG93cyBhIFxcY29sb3IgY29tbWFuZC5cblxuICAgIHBhcnNlci5ndWxsZXQubWFjcm9zLnNldChcIlxcXFxjdXJyZW50QGNvbG9yXCIsIGNvbG9yKTsgLy8gUGFyc2Ugb3V0IHRoZSBpbXBsaWNpdCBib2R5IHRoYXQgc2hvdWxkIGJlIGNvbG9yZWQuXG5cbiAgICB2YXIgYm9keSA9IHBhcnNlci5wYXJzZUV4cHJlc3Npb24odHJ1ZSwgYnJlYWtPblRva2VuVGV4dCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiY29sb3JcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgYm9keTogYm9keVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBjb2xvcl9odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogY29sb3JfbWF0aG1sQnVpbGRlclxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL2NyLmpzXG4vLyBSb3cgYnJlYWtzIHdpdGhpbiB0YWJ1bGFyIGVudmlyb25tZW50cywgYW5kIGxpbmUgYnJlYWtzIGF0IHRvcCBsZXZlbFxuXG5cblxuXG4gLy8gXFxEZWNsYXJlUm9idXN0Q29tbWFuZFxcXFx7Li4uXFxAeG5ld2xpbmV9XG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJjclwiLFxuICBuYW1lczogW1wiXFxcXFxcXFxcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMCxcbiAgICBudW1PcHRpb25hbEFyZ3M6IDEsXG4gICAgYXJnVHlwZXM6IFtcInNpemVcIl0sXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MsIG9wdEFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXI7XG4gICAgdmFyIHNpemUgPSBvcHRBcmdzWzBdO1xuICAgIHZhciBuZXdMaW5lID0gIXBhcnNlci5zZXR0aW5ncy5kaXNwbGF5TW9kZSB8fCAhcGFyc2VyLnNldHRpbmdzLnVzZVN0cmljdEJlaGF2aW9yKFwibmV3TGluZUluRGlzcGxheU1vZGVcIiwgXCJJbiBMYVRlWCwgXFxcXFxcXFwgb3IgXFxcXG5ld2xpbmUgXCIgKyBcImRvZXMgbm90aGluZyBpbiBkaXNwbGF5IG1vZGVcIik7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiY3JcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgbmV3TGluZTogbmV3TGluZSxcbiAgICAgIHNpemU6IHNpemUgJiYgYXNzZXJ0Tm9kZVR5cGUoc2l6ZSwgXCJzaXplXCIpLnZhbHVlXG4gICAgfTtcbiAgfSxcbiAgLy8gVGhlIGZvbGxvd2luZyBidWlsZGVycyBhcmUgY2FsbGVkIG9ubHkgYXQgdGhlIHRvcCBsZXZlbCxcbiAgLy8gbm90IHdpdGhpbiB0YWJ1bGFyL2FycmF5IGVudmlyb25tZW50cy5cbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIHNwYW4gPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtc3BhY2VcIl0sIFtdLCBvcHRpb25zKTtcblxuICAgIGlmIChncm91cC5uZXdMaW5lKSB7XG4gICAgICBzcGFuLmNsYXNzZXMucHVzaChcIm5ld2xpbmVcIik7XG5cbiAgICAgIGlmIChncm91cC5zaXplKSB7XG4gICAgICAgIHNwYW4uc3R5bGUubWFyZ2luVG9wID0gY2FsY3VsYXRlU2l6ZShncm91cC5zaXplLCBvcHRpb25zKSArIFwiZW1cIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3BhbjtcbiAgfSxcbiAgbWF0aG1sQnVpbGRlcjogZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtc3BhY2VcIik7XG5cbiAgICBpZiAoZ3JvdXAubmV3TGluZSkge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJsaW5lYnJlYWtcIiwgXCJuZXdsaW5lXCIpO1xuXG4gICAgICBpZiAoZ3JvdXAuc2l6ZSkge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBjYWxjdWxhdGVTaXplKGdyb3VwLnNpemUsIG9wdGlvbnMpICsgXCJlbVwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL2RlZi5qc1xuXG5cblxudmFyIGdsb2JhbE1hcCA9IHtcbiAgXCJcXFxcZ2xvYmFsXCI6IFwiXFxcXGdsb2JhbFwiLFxuICBcIlxcXFxsb25nXCI6IFwiXFxcXFxcXFxnbG9iYWxsb25nXCIsXG4gIFwiXFxcXFxcXFxnbG9iYWxsb25nXCI6IFwiXFxcXFxcXFxnbG9iYWxsb25nXCIsXG4gIFwiXFxcXGRlZlwiOiBcIlxcXFxnZGVmXCIsXG4gIFwiXFxcXGdkZWZcIjogXCJcXFxcZ2RlZlwiLFxuICBcIlxcXFxlZGVmXCI6IFwiXFxcXHhkZWZcIixcbiAgXCJcXFxceGRlZlwiOiBcIlxcXFx4ZGVmXCIsXG4gIFwiXFxcXGxldFwiOiBcIlxcXFxcXFxcZ2xvYmFsbGV0XCIsXG4gIFwiXFxcXGZ1dHVyZWxldFwiOiBcIlxcXFxcXFxcZ2xvYmFsZnV0dXJlXCJcbn07XG5cbnZhciBjaGVja0NvbnRyb2xTZXF1ZW5jZSA9IGZ1bmN0aW9uIGNoZWNrQ29udHJvbFNlcXVlbmNlKHRvaykge1xuICB2YXIgbmFtZSA9IHRvay50ZXh0O1xuXG4gIGlmICgvXig/OltcXFxce30kJiNeX118RU9GKSQvLnRlc3QobmFtZSkpIHtcbiAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJFeHBlY3RlZCBhIGNvbnRyb2wgc2VxdWVuY2VcIiwgdG9rKTtcbiAgfVxuXG4gIHJldHVybiBuYW1lO1xufTtcblxudmFyIGdldFJIUyA9IGZ1bmN0aW9uIGdldFJIUyhwYXJzZXIpIHtcbiAgdmFyIHRvayA9IHBhcnNlci5ndWxsZXQucG9wVG9rZW4oKTtcblxuICBpZiAodG9rLnRleHQgPT09IFwiPVwiKSB7XG4gICAgLy8gY29uc3VtZSBvcHRpb25hbCBlcXVhbHNcbiAgICB0b2sgPSBwYXJzZXIuZ3VsbGV0LnBvcFRva2VuKCk7XG5cbiAgICBpZiAodG9rLnRleHQgPT09IFwiIFwiKSB7XG4gICAgICAvLyBjb25zdW1lIG9uZSBvcHRpb25hbCBzcGFjZVxuICAgICAgdG9rID0gcGFyc2VyLmd1bGxldC5wb3BUb2tlbigpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0b2s7XG59O1xuXG52YXIgbGV0Q29tbWFuZCA9IGZ1bmN0aW9uIGxldENvbW1hbmQocGFyc2VyLCBuYW1lLCB0b2ssIGdsb2JhbCkge1xuICB2YXIgbWFjcm8gPSBwYXJzZXIuZ3VsbGV0Lm1hY3Jvcy5nZXQodG9rLnRleHQpO1xuXG4gIGlmIChtYWNybyA9PSBudWxsKSB7XG4gICAgLy8gZG9uJ3QgZXhwYW5kIGl0IGxhdGVyIGV2ZW4gaWYgYSBtYWNybyB3aXRoIHRoZSBzYW1lIG5hbWUgaXMgZGVmaW5lZFxuICAgIC8vIGUuZy4sIFxcbGV0XFxmb289XFxmcmFjIFxcZGVmXFxmcmFje1xccmVsYXh9IFxcZnJhYzEyXG4gICAgdG9rLm5vZXhwYW5kID0gdHJ1ZTtcbiAgICBtYWNybyA9IHtcbiAgICAgIHRva2VuczogW3Rva10sXG4gICAgICBudW1BcmdzOiAwLFxuICAgICAgLy8gcmVwcm9kdWNlIHRoZSBzYW1lIGJlaGF2aW9yIGluIGV4cGFuc2lvblxuICAgICAgdW5leHBhbmRhYmxlOiAhcGFyc2VyLmd1bGxldC5pc0V4cGFuZGFibGUodG9rLnRleHQpXG4gICAgfTtcbiAgfVxuXG4gIHBhcnNlci5ndWxsZXQubWFjcm9zLnNldChuYW1lLCBtYWNybywgZ2xvYmFsKTtcbn07IC8vIDxhc3NpZ25tZW50PiAtPiA8bm9uLW1hY3JvIGFzc2lnbm1lbnQ+fDxtYWNybyBhc3NpZ25tZW50PlxuLy8gPG5vbi1tYWNybyBhc3NpZ25tZW50PiAtPiA8c2ltcGxlIGFzc2lnbm1lbnQ+fFxcZ2xvYmFsPG5vbi1tYWNybyBhc3NpZ25tZW50PlxuLy8gPG1hY3JvIGFzc2lnbm1lbnQ+IC0+IDxkZWZpbml0aW9uPnw8cHJlZml4PjxtYWNybyBhc3NpZ25tZW50PlxuLy8gPHByZWZpeD4gLT4gXFxnbG9iYWx8XFxsb25nfFxcb3V0ZXJcblxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiaW50ZXJuYWxcIixcbiAgbmFtZXM6IFtcIlxcXFxnbG9iYWxcIiwgXCJcXFxcbG9uZ1wiLCBcIlxcXFxcXFxcZ2xvYmFsbG9uZ1wiIC8vIGNhbuKAmXQgYmUgZW50ZXJlZCBkaXJlY3RseVxuICBdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDAsXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXIsXG4gICAgICAgIGZ1bmNOYW1lID0gX3JlZi5mdW5jTmFtZTtcbiAgICBwYXJzZXIuY29uc3VtZVNwYWNlcygpO1xuICAgIHZhciB0b2tlbiA9IHBhcnNlci5mZXRjaCgpO1xuXG4gICAgaWYgKGdsb2JhbE1hcFt0b2tlbi50ZXh0XSkge1xuICAgICAgLy8gS2FUZVggZG9lc24ndCBoYXZlIFxccGFyLCBzbyBpZ25vcmUgXFxsb25nXG4gICAgICBpZiAoZnVuY05hbWUgPT09IFwiXFxcXGdsb2JhbFwiIHx8IGZ1bmNOYW1lID09PSBcIlxcXFxcXFxcZ2xvYmFsbG9uZ1wiKSB7XG4gICAgICAgIHRva2VuLnRleHQgPSBnbG9iYWxNYXBbdG9rZW4udGV4dF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhc3NlcnROb2RlVHlwZShwYXJzZXIucGFyc2VGdW5jdGlvbigpLCBcImludGVybmFsXCIpO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkludmFsaWQgdG9rZW4gYWZ0ZXIgbWFjcm8gcHJlZml4XCIsIHRva2VuKTtcbiAgfVxufSk7IC8vIEJhc2ljIHN1cHBvcnQgZm9yIG1hY3JvIGRlZmluaXRpb25zOiBcXGRlZiwgXFxnZGVmLCBcXGVkZWYsIFxceGRlZlxuLy8gPGRlZmluaXRpb24+IC0+IDxkZWY+PGNvbnRyb2wgc2VxdWVuY2U+PGRlZmluaXRpb24gdGV4dD5cbi8vIDxkZWY+IC0+IFxcZGVmfFxcZ2RlZnxcXGVkZWZ8XFx4ZGVmXG4vLyA8ZGVmaW5pdGlvbiB0ZXh0PiAtPiA8cGFyYW1ldGVyIHRleHQ+PGxlZnQgYnJhY2U+PGJhbGFuY2VkIHRleHQ+PHJpZ2h0IGJyYWNlPlxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiaW50ZXJuYWxcIixcbiAgbmFtZXM6IFtcIlxcXFxkZWZcIiwgXCJcXFxcZ2RlZlwiLCBcIlxcXFxlZGVmXCIsIFwiXFxcXHhkZWZcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMCxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlLFxuICAgIHByaW1pdGl2ZTogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYyKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYyLnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmMi5mdW5jTmFtZTtcbiAgICB2YXIgdG9rID0gcGFyc2VyLmd1bGxldC5wb3BUb2tlbigpO1xuICAgIHZhciBuYW1lID0gdG9rLnRleHQ7XG5cbiAgICBpZiAoL14oPzpbXFxcXHt9JCYjXl9dfEVPRikkLy50ZXN0KG5hbWUpKSB7XG4gICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJFeHBlY3RlZCBhIGNvbnRyb2wgc2VxdWVuY2VcIiwgdG9rKTtcbiAgICB9XG5cbiAgICB2YXIgbnVtQXJncyA9IDA7XG4gICAgdmFyIGluc2VydDtcbiAgICB2YXIgZGVsaW1pdGVycyA9IFtbXV07IC8vIDxwYXJhbWV0ZXIgdGV4dD4gY29udGFpbnMgbm8gYnJhY2VzXG5cbiAgICB3aGlsZSAocGFyc2VyLmd1bGxldC5mdXR1cmUoKS50ZXh0ICE9PSBcIntcIikge1xuICAgICAgdG9rID0gcGFyc2VyLmd1bGxldC5wb3BUb2tlbigpO1xuXG4gICAgICBpZiAodG9rLnRleHQgPT09IFwiI1wiKSB7XG4gICAgICAgIC8vIElmIHRoZSB2ZXJ5IGxhc3QgY2hhcmFjdGVyIG9mIHRoZSA8cGFyYW1ldGVyIHRleHQ+IGlzICMsIHNvIHRoYXRcbiAgICAgICAgLy8gdGhpcyAjIGlzIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IHssIFRlWCB3aWxsIGJlaGF2ZSBhcyBpZiB0aGUge1xuICAgICAgICAvLyBoYWQgYmVlbiBpbnNlcnRlZCBhdCB0aGUgcmlnaHQgZW5kIG9mIGJvdGggdGhlIHBhcmFtZXRlciB0ZXh0XG4gICAgICAgIC8vIGFuZCB0aGUgcmVwbGFjZW1lbnQgdGV4dC5cbiAgICAgICAgaWYgKHBhcnNlci5ndWxsZXQuZnV0dXJlKCkudGV4dCA9PT0gXCJ7XCIpIHtcbiAgICAgICAgICBpbnNlcnQgPSBwYXJzZXIuZ3VsbGV0LmZ1dHVyZSgpO1xuICAgICAgICAgIGRlbGltaXRlcnNbbnVtQXJnc10ucHVzaChcIntcIik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gLy8gQSBwYXJhbWV0ZXIsIHRoZSBmaXJzdCBhcHBlYXJhbmNlIG9mICMgbXVzdCBiZSBmb2xsb3dlZCBieSAxLFxuICAgICAgICAvLyB0aGUgbmV4dCBieSAyLCBhbmQgc28gb247IHVwIHRvIG5pbmUgI+KAmXMgYXJlIGFsbG93ZWRcblxuXG4gICAgICAgIHRvayA9IHBhcnNlci5ndWxsZXQucG9wVG9rZW4oKTtcblxuICAgICAgICBpZiAoIS9eWzEtOV0kLy50ZXN0KHRvay50ZXh0KSkge1xuICAgICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkludmFsaWQgYXJndW1lbnQgbnVtYmVyIFxcXCJcIiArIHRvay50ZXh0ICsgXCJcXFwiXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlSW50KHRvay50ZXh0KSAhPT0gbnVtQXJncyArIDEpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJBcmd1bWVudCBudW1iZXIgXFxcIlwiICsgdG9rLnRleHQgKyBcIlxcXCIgb3V0IG9mIG9yZGVyXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbnVtQXJncysrO1xuICAgICAgICBkZWxpbWl0ZXJzLnB1c2goW10pO1xuICAgICAgfSBlbHNlIGlmICh0b2sudGV4dCA9PT0gXCJFT0ZcIikge1xuICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJFeHBlY3RlZCBhIG1hY3JvIGRlZmluaXRpb25cIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxpbWl0ZXJzW251bUFyZ3NdLnB1c2godG9rLnRleHQpO1xuICAgICAgfVxuICAgIH0gLy8gcmVwbGFjZW1lbnQgdGV4dCwgZW5jbG9zZWQgaW4gJ3snIGFuZCAnfScgYW5kIHByb3Blcmx5IG5lc3RlZFxuXG5cbiAgICB2YXIgX3BhcnNlciRndWxsZXQkY29uc3VtID0gcGFyc2VyLmd1bGxldC5jb25zdW1lQXJnKCksXG4gICAgICAgIHRva2VucyA9IF9wYXJzZXIkZ3VsbGV0JGNvbnN1bS50b2tlbnM7XG5cbiAgICBpZiAoaW5zZXJ0KSB7XG4gICAgICB0b2tlbnMudW5zaGlmdChpbnNlcnQpO1xuICAgIH1cblxuICAgIGlmIChmdW5jTmFtZSA9PT0gXCJcXFxcZWRlZlwiIHx8IGZ1bmNOYW1lID09PSBcIlxcXFx4ZGVmXCIpIHtcbiAgICAgIHRva2VucyA9IHBhcnNlci5ndWxsZXQuZXhwYW5kVG9rZW5zKHRva2Vucyk7XG4gICAgICB0b2tlbnMucmV2ZXJzZSgpOyAvLyB0byBmaXQgaW4gd2l0aCBzdGFjayBvcmRlclxuICAgIH0gLy8gRmluYWwgYXJnIGlzIHRoZSBleHBhbnNpb24gb2YgdGhlIG1hY3JvXG5cblxuICAgIHBhcnNlci5ndWxsZXQubWFjcm9zLnNldChuYW1lLCB7XG4gICAgICB0b2tlbnM6IHRva2VucyxcbiAgICAgIG51bUFyZ3M6IG51bUFyZ3MsXG4gICAgICBkZWxpbWl0ZXJzOiBkZWxpbWl0ZXJzXG4gICAgfSwgZnVuY05hbWUgPT09IGdsb2JhbE1hcFtmdW5jTmFtZV0pO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImludGVybmFsXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZVxuICAgIH07XG4gIH1cbn0pOyAvLyA8c2ltcGxlIGFzc2lnbm1lbnQ+IC0+IDxsZXQgYXNzaWdubWVudD5cbi8vIDxsZXQgYXNzaWdubWVudD4gLT4gXFxmdXR1cmVsZXQ8Y29udHJvbCBzZXF1ZW5jZT48dG9rZW4+PHRva2VuPlxuLy8gICAgIHwgXFxsZXQ8Y29udHJvbCBzZXF1ZW5jZT48ZXF1YWxzPjxvbmUgb3B0aW9uYWwgc3BhY2U+PHRva2VuPlxuLy8gPGVxdWFscz4gLT4gPG9wdGlvbmFsIHNwYWNlcz58PG9wdGlvbmFsIHNwYWNlcz49XG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJpbnRlcm5hbFwiLFxuICBuYW1lczogW1wiXFxcXGxldFwiLCBcIlxcXFxcXFxcZ2xvYmFsbGV0XCIgLy8gY2Fu4oCZdCBiZSBlbnRlcmVkIGRpcmVjdGx5XG4gIF0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMCxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlLFxuICAgIHByaW1pdGl2ZTogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYzLnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmMy5mdW5jTmFtZTtcbiAgICB2YXIgbmFtZSA9IGNoZWNrQ29udHJvbFNlcXVlbmNlKHBhcnNlci5ndWxsZXQucG9wVG9rZW4oKSk7XG4gICAgcGFyc2VyLmd1bGxldC5jb25zdW1lU3BhY2VzKCk7XG4gICAgdmFyIHRvayA9IGdldFJIUyhwYXJzZXIpO1xuICAgIGxldENvbW1hbmQocGFyc2VyLCBuYW1lLCB0b2ssIGZ1bmNOYW1lID09PSBcIlxcXFxcXFxcZ2xvYmFsbGV0XCIpO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImludGVybmFsXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZVxuICAgIH07XG4gIH1cbn0pOyAvLyByZWY6IGh0dHBzOi8vd3d3LnR1Zy5vcmcvVFVHYm9hdC90YjA5LTMvdGIyMmJlY2h0b2xzaGVpbS5wZGZcblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImludGVybmFsXCIsXG4gIG5hbWVzOiBbXCJcXFxcZnV0dXJlbGV0XCIsIFwiXFxcXFxcXFxnbG9iYWxmdXR1cmVcIiAvLyBjYW7igJl0IGJlIGVudGVyZWQgZGlyZWN0bHlcbiAgXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAwLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWUsXG4gICAgcHJpbWl0aXZlOiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZjQpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZjQucGFyc2VyLFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWY0LmZ1bmNOYW1lO1xuICAgIHZhciBuYW1lID0gY2hlY2tDb250cm9sU2VxdWVuY2UocGFyc2VyLmd1bGxldC5wb3BUb2tlbigpKTtcbiAgICB2YXIgbWlkZGxlID0gcGFyc2VyLmd1bGxldC5wb3BUb2tlbigpO1xuICAgIHZhciB0b2sgPSBwYXJzZXIuZ3VsbGV0LnBvcFRva2VuKCk7XG4gICAgbGV0Q29tbWFuZChwYXJzZXIsIG5hbWUsIHRvaywgZnVuY05hbWUgPT09IFwiXFxcXFxcXFxnbG9iYWxmdXR1cmVcIik7XG4gICAgcGFyc2VyLmd1bGxldC5wdXNoVG9rZW4odG9rKTtcbiAgICBwYXJzZXIuZ3VsbGV0LnB1c2hUb2tlbihtaWRkbGUpO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImludGVybmFsXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZVxuICAgIH07XG4gIH1cbn0pO1xuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2RlbGltaXRlci5qc1xuLyoqXG4gKiBUaGlzIGZpbGUgZGVhbHMgd2l0aCBjcmVhdGluZyBkZWxpbWl0ZXJzIG9mIHZhcmlvdXMgc2l6ZXMuIFRoZSBUZVhib29rXG4gKiBkaXNjdXNzZXMgdGhlc2Ugcm91dGluZXMgb24gcGFnZSA0NDEtNDQyLCBpbiB0aGUgXCJBbm90aGVyIHN1YnJvdXRpbmUgc2V0cyBib3hcbiAqIHggdG8gYSBzcGVjaWZpZWQgdmFyaWFibGUgZGVsaW1pdGVyXCIgcGFyYWdyYXBoLlxuICpcbiAqIFRoZXJlIGFyZSB0aHJlZSBtYWluIHJvdXRpbmVzIGhlcmUuIGBtYWtlU21hbGxEZWxpbWAgbWFrZXMgYSBkZWxpbWl0ZXIgaW4gdGhlXG4gKiBub3JtYWwgZm9udCwgYnV0IGluIGVpdGhlciB0ZXh0LCBzY3JpcHQsIG9yIHNjcmlwdHNjcmlwdCBzdHlsZS5cbiAqIGBtYWtlTGFyZ2VEZWxpbWAgbWFrZXMgYSBkZWxpbWl0ZXIgaW4gdGV4dHN0eWxlLCBidXQgaW4gb25lIG9mIHRoZSBTaXplMSxcbiAqIFNpemUyLCBTaXplMywgb3IgU2l6ZTQgZm9udHMuIGBtYWtlU3RhY2tlZERlbGltYCBtYWtlcyBhIGRlbGltaXRlciBvdXQgb2ZcbiAqIHNtYWxsZXIgcGllY2VzIHRoYXQgYXJlIHN0YWNrZWQgb24gdG9wIG9mIG9uZSBhbm90aGVyLlxuICpcbiAqIFRoZSBmdW5jdGlvbnMgdGFrZSBhIHBhcmFtZXRlciBgY2VudGVyYCwgd2hpY2ggZGV0ZXJtaW5lcyBpZiB0aGUgZGVsaW1pdGVyXG4gKiBzaG91bGQgYmUgY2VudGVyZWQgYXJvdW5kIHRoZSBheGlzLlxuICpcbiAqIFRoZW4sIHRoZXJlIGFyZSB0aHJlZSBleHBvc2VkIGZ1bmN0aW9ucy4gYHNpemVkRGVsaW1gIG1ha2VzIGEgZGVsaW1pdGVyIGluXG4gKiBvbmUgb2YgdGhlIGdpdmVuIHNpemVzLiBUaGlzIGlzIHVzZWQgZm9yIHRoaW5ncyBsaWtlIGBcXGJpZ2xgLlxuICogYGN1c3RvbVNpemVkRGVsaW1gIG1ha2VzIGEgZGVsaW1pdGVyIHdpdGggYSBnaXZlbiB0b3RhbCBoZWlnaHQrZGVwdGguIEl0IGlzXG4gKiBjYWxsZWQgaW4gcGxhY2VzIGxpa2UgYFxcc3FydGAuIGBsZWZ0UmlnaHREZWxpbWAgbWFrZXMgYW4gYXBwcm9wcmlhdGVcbiAqIGRlbGltaXRlciB3aGljaCBzdXJyb3VuZHMgYW4gZXhwcmVzc2lvbiBvZiBhIGdpdmVuIGhlaWdodCBhbiBkZXB0aC4gSXQgaXNcbiAqIHVzZWQgaW4gYFxcbGVmdGAgYW5kIGBcXHJpZ2h0YC5cbiAqL1xuXG5cblxuXG5cblxuXG5cblxuXG4vKipcbiAqIEdldCB0aGUgbWV0cmljcyBmb3IgYSBnaXZlbiBzeW1ib2wgYW5kIGZvbnQsIGFmdGVyIHRyYW5zZm9ybWF0aW9uIChpLmUuXG4gKiBhZnRlciBmb2xsb3dpbmcgcmVwbGFjZW1lbnQgZnJvbSBzeW1ib2xzLmpzKVxuICovXG52YXIgZ2V0TWV0cmljcyA9IGZ1bmN0aW9uIGdldE1ldHJpY3Moc3ltYm9sLCBmb250LCBtb2RlKSB7XG4gIHZhciByZXBsYWNlID0gc3JjX3N5bWJvbHMubWF0aFtzeW1ib2xdICYmIHNyY19zeW1ib2xzLm1hdGhbc3ltYm9sXS5yZXBsYWNlO1xuICB2YXIgbWV0cmljcyA9IGdldENoYXJhY3Rlck1ldHJpY3MocmVwbGFjZSB8fCBzeW1ib2wsIGZvbnQsIG1vZGUpO1xuXG4gIGlmICghbWV0cmljcykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIHN5bWJvbCBcIiArIHN5bWJvbCArIFwiIGFuZCBmb250IHNpemUgXCIgKyBmb250ICsgXCIuXCIpO1xuICB9XG5cbiAgcmV0dXJuIG1ldHJpY3M7XG59O1xuLyoqXG4gKiBQdXRzIGEgZGVsaW1pdGVyIHNwYW4gaW4gYSBnaXZlbiBzdHlsZSwgYW5kIGFkZHMgYXBwcm9wcmlhdGUgaGVpZ2h0LCBkZXB0aCxcbiAqIGFuZCBtYXhGb250U2l6ZXMuXG4gKi9cblxuXG52YXIgc3R5bGVXcmFwID0gZnVuY3Rpb24gc3R5bGVXcmFwKGRlbGltLCB0b1N0eWxlLCBvcHRpb25zLCBjbGFzc2VzKSB7XG4gIHZhciBuZXdPcHRpb25zID0gb3B0aW9ucy5oYXZpbmdCYXNlU3R5bGUodG9TdHlsZSk7XG4gIHZhciBzcGFuID0gYnVpbGRDb21tb24ubWFrZVNwYW4oY2xhc3Nlcy5jb25jYXQobmV3T3B0aW9ucy5zaXppbmdDbGFzc2VzKG9wdGlvbnMpKSwgW2RlbGltXSwgb3B0aW9ucyk7XG4gIHZhciBkZWxpbVNpemVNdWx0aXBsaWVyID0gbmV3T3B0aW9ucy5zaXplTXVsdGlwbGllciAvIG9wdGlvbnMuc2l6ZU11bHRpcGxpZXI7XG4gIHNwYW4uaGVpZ2h0ICo9IGRlbGltU2l6ZU11bHRpcGxpZXI7XG4gIHNwYW4uZGVwdGggKj0gZGVsaW1TaXplTXVsdGlwbGllcjtcbiAgc3Bhbi5tYXhGb250U2l6ZSA9IG5ld09wdGlvbnMuc2l6ZU11bHRpcGxpZXI7XG4gIHJldHVybiBzcGFuO1xufTtcblxudmFyIGNlbnRlclNwYW4gPSBmdW5jdGlvbiBjZW50ZXJTcGFuKHNwYW4sIG9wdGlvbnMsIHN0eWxlKSB7XG4gIHZhciBuZXdPcHRpb25zID0gb3B0aW9ucy5oYXZpbmdCYXNlU3R5bGUoc3R5bGUpO1xuICB2YXIgc2hpZnQgPSAoMSAtIG9wdGlvbnMuc2l6ZU11bHRpcGxpZXIgLyBuZXdPcHRpb25zLnNpemVNdWx0aXBsaWVyKSAqIG9wdGlvbnMuZm9udE1ldHJpY3MoKS5heGlzSGVpZ2h0O1xuICBzcGFuLmNsYXNzZXMucHVzaChcImRlbGltY2VudGVyXCIpO1xuICBzcGFuLnN0eWxlLnRvcCA9IHNoaWZ0ICsgXCJlbVwiO1xuICBzcGFuLmhlaWdodCAtPSBzaGlmdDtcbiAgc3Bhbi5kZXB0aCArPSBzaGlmdDtcbn07XG4vKipcbiAqIE1ha2VzIGEgc21hbGwgZGVsaW1pdGVyLiBUaGlzIGlzIGEgZGVsaW1pdGVyIHRoYXQgY29tZXMgaW4gdGhlIE1haW4tUmVndWxhclxuICogZm9udCwgYnV0IGlzIHJlc3R5bGVkIHRvIGVpdGhlciBiZSBpbiB0ZXh0c3R5bGUsIHNjcmlwdHN0eWxlLCBvclxuICogc2NyaXB0c2NyaXB0c3R5bGUuXG4gKi9cblxuXG52YXIgbWFrZVNtYWxsRGVsaW0gPSBmdW5jdGlvbiBtYWtlU21hbGxEZWxpbShkZWxpbSwgc3R5bGUsIGNlbnRlciwgb3B0aW9ucywgbW9kZSwgY2xhc3Nlcykge1xuICB2YXIgdGV4dCA9IGJ1aWxkQ29tbW9uLm1ha2VTeW1ib2woZGVsaW0sIFwiTWFpbi1SZWd1bGFyXCIsIG1vZGUsIG9wdGlvbnMpO1xuICB2YXIgc3BhbiA9IHN0eWxlV3JhcCh0ZXh0LCBzdHlsZSwgb3B0aW9ucywgY2xhc3Nlcyk7XG5cbiAgaWYgKGNlbnRlcikge1xuICAgIGNlbnRlclNwYW4oc3Bhbiwgb3B0aW9ucywgc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHNwYW47XG59O1xuLyoqXG4gKiBCdWlsZHMgYSBzeW1ib2wgaW4gdGhlIGdpdmVuIGZvbnQgc2l6ZSAobm90ZSBzaXplIGlzIGFuIGludGVnZXIpXG4gKi9cblxuXG52YXIgbWF0aHJtU2l6ZSA9IGZ1bmN0aW9uIG1hdGhybVNpemUodmFsdWUsIHNpemUsIG1vZGUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTeW1ib2wodmFsdWUsIFwiU2l6ZVwiICsgc2l6ZSArIFwiLVJlZ3VsYXJcIiwgbW9kZSwgb3B0aW9ucyk7XG59O1xuLyoqXG4gKiBNYWtlcyBhIGxhcmdlIGRlbGltaXRlci4gVGhpcyBpcyBhIGRlbGltaXRlciB0aGF0IGNvbWVzIGluIHRoZSBTaXplMSwgU2l6ZTIsXG4gKiBTaXplMywgb3IgU2l6ZTQgZm9udHMuIEl0IGlzIGFsd2F5cyByZW5kZXJlZCBpbiB0ZXh0c3R5bGUuXG4gKi9cblxuXG52YXIgbWFrZUxhcmdlRGVsaW0gPSBmdW5jdGlvbiBtYWtlTGFyZ2VEZWxpbShkZWxpbSwgc2l6ZSwgY2VudGVyLCBvcHRpb25zLCBtb2RlLCBjbGFzc2VzKSB7XG4gIHZhciBpbm5lciA9IG1hdGhybVNpemUoZGVsaW0sIHNpemUsIG1vZGUsIG9wdGlvbnMpO1xuICB2YXIgc3BhbiA9IHN0eWxlV3JhcChidWlsZENvbW1vbi5tYWtlU3BhbihbXCJkZWxpbXNpemluZ1wiLCBcInNpemVcIiArIHNpemVdLCBbaW5uZXJdLCBvcHRpb25zKSwgc3JjX1N0eWxlLlRFWFQsIG9wdGlvbnMsIGNsYXNzZXMpO1xuXG4gIGlmIChjZW50ZXIpIHtcbiAgICBjZW50ZXJTcGFuKHNwYW4sIG9wdGlvbnMsIHNyY19TdHlsZS5URVhUKTtcbiAgfVxuXG4gIHJldHVybiBzcGFuO1xufTtcbi8qKlxuICogTWFrZSBhIHNwYW4gZnJvbSBhIGZvbnQgZ2x5cGggd2l0aCB0aGUgZ2l2ZW4gb2Zmc2V0IGFuZCBpbiB0aGUgZ2l2ZW4gZm9udC5cbiAqIFRoaXMgaXMgdXNlZCBpbiBtYWtlU3RhY2tlZERlbGltIHRvIG1ha2UgdGhlIHN0YWNraW5nIHBpZWNlcyBmb3IgdGhlIGRlbGltaXRlci5cbiAqL1xuXG5cbnZhciBtYWtlR2x5cGhTcGFuID0gZnVuY3Rpb24gbWFrZUdseXBoU3BhbihzeW1ib2wsIGZvbnQsIG1vZGUpIHtcbiAgdmFyIHNpemVDbGFzczsgLy8gQXBwbHkgdGhlIGNvcnJlY3QgQ1NTIGNsYXNzIHRvIGNob29zZSB0aGUgcmlnaHQgZm9udC5cblxuICBpZiAoZm9udCA9PT0gXCJTaXplMS1SZWd1bGFyXCIpIHtcbiAgICBzaXplQ2xhc3MgPSBcImRlbGltLXNpemUxXCI7XG4gIH0gZWxzZVxuICAgIC8qIGlmIChmb250ID09PSBcIlNpemU0LVJlZ3VsYXJcIikgKi9cbiAgICB7XG4gICAgICBzaXplQ2xhc3MgPSBcImRlbGltLXNpemU0XCI7XG4gICAgfVxuXG4gIHZhciBjb3JuZXIgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJkZWxpbXNpemluZ2lubmVyXCIsIHNpemVDbGFzc10sIFtidWlsZENvbW1vbi5tYWtlU3BhbihbXSwgW2J1aWxkQ29tbW9uLm1ha2VTeW1ib2woc3ltYm9sLCBmb250LCBtb2RlKV0pXSk7IC8vIFNpbmNlIHRoaXMgd2lsbCBiZSBwYXNzZWQgaW50byBgbWFrZVZMaXN0YCBpbiB0aGUgZW5kLCB3cmFwIHRoZSBlbGVtZW50XG4gIC8vIGluIHRoZSBhcHByb3ByaWF0ZSB0YWcgdGhhdCBWTGlzdCB1c2VzLlxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJlbGVtXCIsXG4gICAgZWxlbTogY29ybmVyXG4gIH07XG59O1xuXG52YXIgbWFrZUlubmVyID0gZnVuY3Rpb24gbWFrZUlubmVyKGNoLCBoZWlnaHQsIG9wdGlvbnMpIHtcbiAgLy8gQ3JlYXRlIGEgc3BhbiB3aXRoIGlubGluZSBTVkcgZm9yIHRoZSBpbm5lciBwYXJ0IG9mIGEgdGFsbCBzdGFja2VkIGRlbGltaXRlci5cbiAgdmFyIHdpZHRoID0gZm9udE1ldHJpY3NEYXRhW1wiU2l6ZTQtUmVndWxhclwiXVtjaC5jaGFyQ29kZUF0KDApXSA/IGZvbnRNZXRyaWNzRGF0YVtcIlNpemU0LVJlZ3VsYXJcIl1bY2guY2hhckNvZGVBdCgwKV1bNF0udG9GaXhlZCgzKSA6IGZvbnRNZXRyaWNzRGF0YVtcIlNpemUxLVJlZ3VsYXJcIl1bY2guY2hhckNvZGVBdCgwKV1bNF0udG9GaXhlZCgzKTtcbiAgdmFyIHBhdGggPSBuZXcgUGF0aE5vZGUoXCJpbm5lclwiLCBpbm5lclBhdGgoY2gsIE1hdGgucm91bmQoMTAwMCAqIGhlaWdodCkpKTtcbiAgdmFyIHN2Z05vZGUgPSBuZXcgU3ZnTm9kZShbcGF0aF0sIHtcbiAgICBcIndpZHRoXCI6IHdpZHRoICsgXCJlbVwiLFxuICAgIFwiaGVpZ2h0XCI6IGhlaWdodCArIFwiZW1cIixcbiAgICAvLyBPdmVycmlkZSBDU1MgcnVsZSBgLmthdGV4IHN2ZyB7IHdpZHRoOiAxMDAlIH1gXG4gICAgXCJzdHlsZVwiOiBcIndpZHRoOlwiICsgd2lkdGggKyBcImVtXCIsXG4gICAgXCJ2aWV3Qm94XCI6IFwiMCAwIFwiICsgMTAwMCAqIHdpZHRoICsgXCIgXCIgKyBNYXRoLnJvdW5kKDEwMDAgKiBoZWlnaHQpLFxuICAgIFwicHJlc2VydmVBc3BlY3RSYXRpb1wiOiBcInhNaW5ZTWluXCJcbiAgfSk7XG4gIHZhciBzcGFuID0gYnVpbGRDb21tb24ubWFrZVN2Z1NwYW4oW10sIFtzdmdOb2RlXSwgb3B0aW9ucyk7XG4gIHNwYW4uaGVpZ2h0ID0gaGVpZ2h0O1xuICBzcGFuLnN0eWxlLmhlaWdodCA9IGhlaWdodCArIFwiZW1cIjtcbiAgc3Bhbi5zdHlsZS53aWR0aCA9IHdpZHRoICsgXCJlbVwiO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgIGVsZW06IHNwYW5cbiAgfTtcbn07IC8vIEhlbHBlcnMgZm9yIG1ha2VTdGFja2VkRGVsaW1cblxuXG52YXIgbGFwSW5FbXMgPSAwLjAwODtcbnZhciBsYXAgPSB7XG4gIHR5cGU6IFwia2VyblwiLFxuICBzaXplOiAtMSAqIGxhcEluRW1zXG59O1xudmFyIHZlcnRzID0gW1wifFwiLCBcIlxcXFxsdmVydFwiLCBcIlxcXFxydmVydFwiLCBcIlxcXFx2ZXJ0XCJdO1xudmFyIGRvdWJsZVZlcnRzID0gW1wiXFxcXHxcIiwgXCJcXFxcbFZlcnRcIiwgXCJcXFxcclZlcnRcIiwgXCJcXFxcVmVydFwiXTtcbi8qKlxuICogTWFrZSBhIHN0YWNrZWQgZGVsaW1pdGVyIG91dCBvZiBhIGdpdmVuIGRlbGltaXRlciwgd2l0aCB0aGUgdG90YWwgaGVpZ2h0IGF0XG4gKiBsZWFzdCBgaGVpZ2h0VG90YWxgLiBUaGlzIHJvdXRpbmUgaXMgbWVudGlvbmVkIG9uIHBhZ2UgNDQyIG9mIHRoZSBUZVhib29rLlxuICovXG5cbnZhciBtYWtlU3RhY2tlZERlbGltID0gZnVuY3Rpb24gbWFrZVN0YWNrZWREZWxpbShkZWxpbSwgaGVpZ2h0VG90YWwsIGNlbnRlciwgb3B0aW9ucywgbW9kZSwgY2xhc3Nlcykge1xuICAvLyBUaGVyZSBhcmUgZm91ciBwYXJ0cywgdGhlIHRvcCwgYW4gb3B0aW9uYWwgbWlkZGxlLCBhIHJlcGVhdGVkIHBhcnQsIGFuZCBhXG4gIC8vIGJvdHRvbS5cbiAgdmFyIHRvcDtcbiAgdmFyIG1pZGRsZTtcbiAgdmFyIHJlcGVhdDtcbiAgdmFyIGJvdHRvbTtcbiAgdG9wID0gcmVwZWF0ID0gYm90dG9tID0gZGVsaW07XG4gIG1pZGRsZSA9IG51bGw7IC8vIEFsc28ga2VlcCB0cmFjayBvZiB3aGF0IGZvbnQgdGhlIGRlbGltaXRlcnMgYXJlIGluXG5cbiAgdmFyIGZvbnQgPSBcIlNpemUxLVJlZ3VsYXJcIjsgLy8gV2Ugc2V0IHRoZSBwYXJ0cyBhbmQgZm9udCBiYXNlZCBvbiB0aGUgc3ltYm9sLiBOb3RlIHRoYXQgd2UgdXNlXG4gIC8vICdcXHUyM2QwJyBpbnN0ZWFkIG9mICd8JyBhbmQgJ1xcdTIwMTYnIGluc3RlYWQgb2YgJ1xcXFx8JyBmb3IgdGhlXG4gIC8vIHJlcGVhdHMgb2YgdGhlIGFycm93c1xuXG4gIGlmIChkZWxpbSA9PT0gXCJcXFxcdXBhcnJvd1wiKSB7XG4gICAgcmVwZWF0ID0gYm90dG9tID0gXCJcXHUyM0QwXCI7XG4gIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiXFxcXFVwYXJyb3dcIikge1xuICAgIHJlcGVhdCA9IGJvdHRvbSA9IFwiXFx1MjAxNlwiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFxkb3duYXJyb3dcIikge1xuICAgIHRvcCA9IHJlcGVhdCA9IFwiXFx1MjNEMFwiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFxEb3duYXJyb3dcIikge1xuICAgIHRvcCA9IHJlcGVhdCA9IFwiXFx1MjAxNlwiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFx1cGRvd25hcnJvd1wiKSB7XG4gICAgdG9wID0gXCJcXFxcdXBhcnJvd1wiO1xuICAgIHJlcGVhdCA9IFwiXFx1MjNEMFwiO1xuICAgIGJvdHRvbSA9IFwiXFxcXGRvd25hcnJvd1wiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFxVcGRvd25hcnJvd1wiKSB7XG4gICAgdG9wID0gXCJcXFxcVXBhcnJvd1wiO1xuICAgIHJlcGVhdCA9IFwiXFx1MjAxNlwiO1xuICAgIGJvdHRvbSA9IFwiXFxcXERvd25hcnJvd1wiO1xuICB9IGVsc2UgaWYgKHV0aWxzLmNvbnRhaW5zKHZlcnRzLCBkZWxpbSkpIHtcbiAgICByZXBlYXQgPSBcIlxcdTIyMjNcIjtcbiAgfSBlbHNlIGlmICh1dGlscy5jb250YWlucyhkb3VibGVWZXJ0cywgZGVsaW0pKSB7XG4gICAgcmVwZWF0ID0gXCJcXHUyMjI1XCI7XG4gIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiW1wiIHx8IGRlbGltID09PSBcIlxcXFxsYnJhY2tcIikge1xuICAgIHRvcCA9IFwiXFx1MjNBMVwiO1xuICAgIHJlcGVhdCA9IFwiXFx1MjNBMlwiO1xuICAgIGJvdHRvbSA9IFwiXFx1MjNBM1wiO1xuICAgIGZvbnQgPSBcIlNpemU0LVJlZ3VsYXJcIjtcbiAgfSBlbHNlIGlmIChkZWxpbSA9PT0gXCJdXCIgfHwgZGVsaW0gPT09IFwiXFxcXHJicmFja1wiKSB7XG4gICAgdG9wID0gXCJcXHUyM0E0XCI7XG4gICAgcmVwZWF0ID0gXCJcXHUyM0E1XCI7XG4gICAgYm90dG9tID0gXCJcXHUyM0E2XCI7XG4gICAgZm9udCA9IFwiU2l6ZTQtUmVndWxhclwiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFxsZmxvb3JcIiB8fCBkZWxpbSA9PT0gXCJcXHUyMzBBXCIpIHtcbiAgICByZXBlYXQgPSB0b3AgPSBcIlxcdTIzQTJcIjtcbiAgICBib3R0b20gPSBcIlxcdTIzQTNcIjtcbiAgICBmb250ID0gXCJTaXplNC1SZWd1bGFyXCI7XG4gIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiXFxcXGxjZWlsXCIgfHwgZGVsaW0gPT09IFwiXFx1MjMwOFwiKSB7XG4gICAgdG9wID0gXCJcXHUyM0ExXCI7XG4gICAgcmVwZWF0ID0gYm90dG9tID0gXCJcXHUyM0EyXCI7XG4gICAgZm9udCA9IFwiU2l6ZTQtUmVndWxhclwiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFxyZmxvb3JcIiB8fCBkZWxpbSA9PT0gXCJcXHUyMzBCXCIpIHtcbiAgICByZXBlYXQgPSB0b3AgPSBcIlxcdTIzQTVcIjtcbiAgICBib3R0b20gPSBcIlxcdTIzQTZcIjtcbiAgICBmb250ID0gXCJTaXplNC1SZWd1bGFyXCI7XG4gIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiXFxcXHJjZWlsXCIgfHwgZGVsaW0gPT09IFwiXFx1MjMwOVwiKSB7XG4gICAgdG9wID0gXCJcXHUyM0E0XCI7XG4gICAgcmVwZWF0ID0gYm90dG9tID0gXCJcXHUyM0E1XCI7XG4gICAgZm9udCA9IFwiU2l6ZTQtUmVndWxhclwiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIihcIiB8fCBkZWxpbSA9PT0gXCJcXFxcbHBhcmVuXCIpIHtcbiAgICB0b3AgPSBcIlxcdTIzOUJcIjtcbiAgICByZXBlYXQgPSBcIlxcdTIzOUNcIjtcbiAgICBib3R0b20gPSBcIlxcdTIzOURcIjtcbiAgICBmb250ID0gXCJTaXplNC1SZWd1bGFyXCI7XG4gIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiKVwiIHx8IGRlbGltID09PSBcIlxcXFxycGFyZW5cIikge1xuICAgIHRvcCA9IFwiXFx1MjM5RVwiO1xuICAgIHJlcGVhdCA9IFwiXFx1MjM5RlwiO1xuICAgIGJvdHRvbSA9IFwiXFx1MjNBMFwiO1xuICAgIGZvbnQgPSBcIlNpemU0LVJlZ3VsYXJcIjtcbiAgfSBlbHNlIGlmIChkZWxpbSA9PT0gXCJcXFxce1wiIHx8IGRlbGltID09PSBcIlxcXFxsYnJhY2VcIikge1xuICAgIHRvcCA9IFwiXFx1MjNBN1wiO1xuICAgIG1pZGRsZSA9IFwiXFx1MjNBOFwiO1xuICAgIGJvdHRvbSA9IFwiXFx1MjNBOVwiO1xuICAgIHJlcGVhdCA9IFwiXFx1MjNBQVwiO1xuICAgIGZvbnQgPSBcIlNpemU0LVJlZ3VsYXJcIjtcbiAgfSBlbHNlIGlmIChkZWxpbSA9PT0gXCJcXFxcfVwiIHx8IGRlbGltID09PSBcIlxcXFxyYnJhY2VcIikge1xuICAgIHRvcCA9IFwiXFx1MjNBQlwiO1xuICAgIG1pZGRsZSA9IFwiXFx1MjNBQ1wiO1xuICAgIGJvdHRvbSA9IFwiXFx1MjNBRFwiO1xuICAgIHJlcGVhdCA9IFwiXFx1MjNBQVwiO1xuICAgIGZvbnQgPSBcIlNpemU0LVJlZ3VsYXJcIjtcbiAgfSBlbHNlIGlmIChkZWxpbSA9PT0gXCJcXFxcbGdyb3VwXCIgfHwgZGVsaW0gPT09IFwiXFx1MjdFRVwiKSB7XG4gICAgdG9wID0gXCJcXHUyM0E3XCI7XG4gICAgYm90dG9tID0gXCJcXHUyM0E5XCI7XG4gICAgcmVwZWF0ID0gXCJcXHUyM0FBXCI7XG4gICAgZm9udCA9IFwiU2l6ZTQtUmVndWxhclwiO1xuICB9IGVsc2UgaWYgKGRlbGltID09PSBcIlxcXFxyZ3JvdXBcIiB8fCBkZWxpbSA9PT0gXCJcXHUyN0VGXCIpIHtcbiAgICB0b3AgPSBcIlxcdTIzQUJcIjtcbiAgICBib3R0b20gPSBcIlxcdTIzQURcIjtcbiAgICByZXBlYXQgPSBcIlxcdTIzQUFcIjtcbiAgICBmb250ID0gXCJTaXplNC1SZWd1bGFyXCI7XG4gIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiXFxcXGxtb3VzdGFjaGVcIiB8fCBkZWxpbSA9PT0gXCJcXHUyM0IwXCIpIHtcbiAgICB0b3AgPSBcIlxcdTIzQTdcIjtcbiAgICBib3R0b20gPSBcIlxcdTIzQURcIjtcbiAgICByZXBlYXQgPSBcIlxcdTIzQUFcIjtcbiAgICBmb250ID0gXCJTaXplNC1SZWd1bGFyXCI7XG4gIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiXFxcXHJtb3VzdGFjaGVcIiB8fCBkZWxpbSA9PT0gXCJcXHUyM0IxXCIpIHtcbiAgICB0b3AgPSBcIlxcdTIzQUJcIjtcbiAgICBib3R0b20gPSBcIlxcdTIzQTlcIjtcbiAgICByZXBlYXQgPSBcIlxcdTIzQUFcIjtcbiAgICBmb250ID0gXCJTaXplNC1SZWd1bGFyXCI7XG4gIH0gLy8gR2V0IHRoZSBtZXRyaWNzIG9mIHRoZSBmb3VyIHNlY3Rpb25zXG5cblxuICB2YXIgdG9wTWV0cmljcyA9IGdldE1ldHJpY3ModG9wLCBmb250LCBtb2RlKTtcbiAgdmFyIHRvcEhlaWdodFRvdGFsID0gdG9wTWV0cmljcy5oZWlnaHQgKyB0b3BNZXRyaWNzLmRlcHRoO1xuICB2YXIgcmVwZWF0TWV0cmljcyA9IGdldE1ldHJpY3MocmVwZWF0LCBmb250LCBtb2RlKTtcbiAgdmFyIHJlcGVhdEhlaWdodFRvdGFsID0gcmVwZWF0TWV0cmljcy5oZWlnaHQgKyByZXBlYXRNZXRyaWNzLmRlcHRoO1xuICB2YXIgYm90dG9tTWV0cmljcyA9IGdldE1ldHJpY3MoYm90dG9tLCBmb250LCBtb2RlKTtcbiAgdmFyIGJvdHRvbUhlaWdodFRvdGFsID0gYm90dG9tTWV0cmljcy5oZWlnaHQgKyBib3R0b21NZXRyaWNzLmRlcHRoO1xuICB2YXIgbWlkZGxlSGVpZ2h0VG90YWwgPSAwO1xuICB2YXIgbWlkZGxlRmFjdG9yID0gMTtcblxuICBpZiAobWlkZGxlICE9PSBudWxsKSB7XG4gICAgdmFyIG1pZGRsZU1ldHJpY3MgPSBnZXRNZXRyaWNzKG1pZGRsZSwgZm9udCwgbW9kZSk7XG4gICAgbWlkZGxlSGVpZ2h0VG90YWwgPSBtaWRkbGVNZXRyaWNzLmhlaWdodCArIG1pZGRsZU1ldHJpY3MuZGVwdGg7XG4gICAgbWlkZGxlRmFjdG9yID0gMjsgLy8gcmVwZWF0IHN5bW1ldHJpY2FsbHkgYWJvdmUgYW5kIGJlbG93IG1pZGRsZVxuICB9IC8vIENhbGN1YXRlIHRoZSBtaW5pbWFsIGhlaWdodCB0aGF0IHRoZSBkZWxpbWl0ZXIgY2FuIGhhdmUuXG4gIC8vIEl0IGlzIGF0IGxlYXN0IHRoZSBzaXplIG9mIHRoZSB0b3AsIGJvdHRvbSwgYW5kIG9wdGlvbmFsIG1pZGRsZSBjb21iaW5lZC5cblxuXG4gIHZhciBtaW5IZWlnaHQgPSB0b3BIZWlnaHRUb3RhbCArIGJvdHRvbUhlaWdodFRvdGFsICsgbWlkZGxlSGVpZ2h0VG90YWw7IC8vIENvbXB1dGUgdGhlIG51bWJlciBvZiBjb3BpZXMgb2YgdGhlIHJlcGVhdCBzeW1ib2wgd2Ugd2lsbCBuZWVkXG5cbiAgdmFyIHJlcGVhdENvdW50ID0gTWF0aC5tYXgoMCwgTWF0aC5jZWlsKChoZWlnaHRUb3RhbCAtIG1pbkhlaWdodCkgLyAobWlkZGxlRmFjdG9yICogcmVwZWF0SGVpZ2h0VG90YWwpKSk7IC8vIENvbXB1dGUgdGhlIHRvdGFsIGhlaWdodCBvZiB0aGUgZGVsaW1pdGVyIGluY2x1ZGluZyBhbGwgdGhlIHN5bWJvbHNcblxuICB2YXIgcmVhbEhlaWdodFRvdGFsID0gbWluSGVpZ2h0ICsgcmVwZWF0Q291bnQgKiBtaWRkbGVGYWN0b3IgKiByZXBlYXRIZWlnaHRUb3RhbDsgLy8gVGhlIGNlbnRlciBvZiB0aGUgZGVsaW1pdGVyIGlzIHBsYWNlZCBhdCB0aGUgY2VudGVyIG9mIHRoZSBheGlzLiBOb3RlXG4gIC8vIHRoYXQgaW4gdGhpcyBjb250ZXh0LCBcImNlbnRlclwiIG1lYW5zIHRoYXQgdGhlIGRlbGltaXRlciBzaG91bGQgYmVcbiAgLy8gY2VudGVyZWQgYXJvdW5kIHRoZSBheGlzIGluIHRoZSBjdXJyZW50IHN0eWxlLCB3aGlsZSBub3JtYWxseSBpdCBpc1xuICAvLyBjZW50ZXJlZCBhcm91bmQgdGhlIGF4aXMgaW4gdGV4dHN0eWxlLlxuXG4gIHZhciBheGlzSGVpZ2h0ID0gb3B0aW9ucy5mb250TWV0cmljcygpLmF4aXNIZWlnaHQ7XG5cbiAgaWYgKGNlbnRlcikge1xuICAgIGF4aXNIZWlnaHQgKj0gb3B0aW9ucy5zaXplTXVsdGlwbGllcjtcbiAgfSAvLyBDYWxjdWxhdGUgdGhlIGRlcHRoXG5cblxuICB2YXIgZGVwdGggPSByZWFsSGVpZ2h0VG90YWwgLyAyIC0gYXhpc0hlaWdodDsgLy8gTm93LCB3ZSBzdGFydCBidWlsZGluZyB0aGUgcGllY2VzIHRoYXQgd2lsbCBnbyBpbnRvIHRoZSB2bGlzdFxuICAvLyBLZWVwIGEgbGlzdCBvZiB0aGUgcGllY2VzIG9mIHRoZSBzdGFja2VkIGRlbGltaXRlclxuXG4gIHZhciBzdGFjayA9IFtdOyAvLyBBZGQgdGhlIGJvdHRvbSBzeW1ib2xcblxuICBzdGFjay5wdXNoKG1ha2VHbHlwaFNwYW4oYm90dG9tLCBmb250LCBtb2RlKSk7XG4gIHN0YWNrLnB1c2gobGFwKTsgLy8gb3ZlcmxhcFxuXG4gIGlmIChtaWRkbGUgPT09IG51bGwpIHtcbiAgICAvLyBUaGUgbWlkZGxlIHNlY3Rpb24gd2lsbCBiZSBhbiBTVkcuIE1ha2UgaXQgYW4gZXh0cmEgMC4wMTZlbSB0YWxsLlxuICAgIC8vIFdlJ2xsIG92ZXJsYXAgYnkgMC4wMDhlbSBhdCB0b3AgYW5kIGJvdHRvbS5cbiAgICB2YXIgaW5uZXJIZWlnaHQgPSByZWFsSGVpZ2h0VG90YWwgLSB0b3BIZWlnaHRUb3RhbCAtIGJvdHRvbUhlaWdodFRvdGFsICsgMiAqIGxhcEluRW1zO1xuICAgIHN0YWNrLnB1c2gobWFrZUlubmVyKHJlcGVhdCwgaW5uZXJIZWlnaHQsIG9wdGlvbnMpKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIGEgbWlkZGxlIGJpdCwgd2UgbmVlZCB0aGUgbWlkZGxlIHBhcnQgYW5kIHR3byByZXBlYXRlZFxuICAgIC8vIHNlY3Rpb25zXG4gICAgdmFyIF9pbm5lckhlaWdodCA9IChyZWFsSGVpZ2h0VG90YWwgLSB0b3BIZWlnaHRUb3RhbCAtIGJvdHRvbUhlaWdodFRvdGFsIC0gbWlkZGxlSGVpZ2h0VG90YWwpIC8gMiArIDIgKiBsYXBJbkVtcztcblxuICAgIHN0YWNrLnB1c2gobWFrZUlubmVyKHJlcGVhdCwgX2lubmVySGVpZ2h0LCBvcHRpb25zKSk7IC8vIE5vdyBpbnNlcnQgdGhlIG1pZGRsZSBvZiB0aGUgYnJhY2UuXG5cbiAgICBzdGFjay5wdXNoKGxhcCk7XG4gICAgc3RhY2sucHVzaChtYWtlR2x5cGhTcGFuKG1pZGRsZSwgZm9udCwgbW9kZSkpO1xuICAgIHN0YWNrLnB1c2gobGFwKTtcbiAgICBzdGFjay5wdXNoKG1ha2VJbm5lcihyZXBlYXQsIF9pbm5lckhlaWdodCwgb3B0aW9ucykpO1xuICB9IC8vIEFkZCB0aGUgdG9wIHN5bWJvbFxuXG5cbiAgc3RhY2sucHVzaChsYXApO1xuICBzdGFjay5wdXNoKG1ha2VHbHlwaFNwYW4odG9wLCBmb250LCBtb2RlKSk7IC8vIEZpbmFsbHksIGJ1aWxkIHRoZSB2bGlzdFxuXG4gIHZhciBuZXdPcHRpb25zID0gb3B0aW9ucy5oYXZpbmdCYXNlU3R5bGUoc3JjX1N0eWxlLlRFWFQpO1xuICB2YXIgaW5uZXIgPSBidWlsZENvbW1vbi5tYWtlVkxpc3Qoe1xuICAgIHBvc2l0aW9uVHlwZTogXCJib3R0b21cIixcbiAgICBwb3NpdGlvbkRhdGE6IGRlcHRoLFxuICAgIGNoaWxkcmVuOiBzdGFja1xuICB9LCBuZXdPcHRpb25zKTtcbiAgcmV0dXJuIHN0eWxlV3JhcChidWlsZENvbW1vbi5tYWtlU3BhbihbXCJkZWxpbXNpemluZ1wiLCBcIm11bHRcIl0sIFtpbm5lcl0sIG5ld09wdGlvbnMpLCBzcmNfU3R5bGUuVEVYVCwgb3B0aW9ucywgY2xhc3Nlcyk7XG59OyAvLyBBbGwgc3VyZHMgaGF2ZSAwLjA4ZW0gcGFkZGluZyBhYm92ZSB0aGUgdmluaWN1bHVtIGluc2lkZSB0aGUgU1ZHLlxuLy8gVGhhdCBrZWVwcyBicm93c2VyIHNwYW4gaGVpZ2h0IHJvdW5kaW5nIGVycm9yIGZyb20gcGluY2hpbmcgdGhlIGxpbmUuXG5cblxudmFyIHZiUGFkID0gODA7IC8vIHBhZGRpbmcgYWJvdmUgdGhlIHN1cmQsIG1lYXN1cmVkIGluc2lkZSB0aGUgdmlld0JveC5cblxudmFyIGVtUGFkID0gMC4wODsgLy8gcGFkZGluZywgaW4gZW1zLCBtZWFzdXJlZCBpbiB0aGUgZG9jdW1lbnQuXG5cbnZhciBzcXJ0U3ZnID0gZnVuY3Rpb24gc3FydFN2ZyhzcXJ0TmFtZSwgaGVpZ2h0LCB2aWV3Qm94SGVpZ2h0LCBleHRyYVZpbmljdWx1bSwgb3B0aW9ucykge1xuICB2YXIgcGF0aCA9IHNxcnRQYXRoKHNxcnROYW1lLCBleHRyYVZpbmljdWx1bSwgdmlld0JveEhlaWdodCk7XG4gIHZhciBwYXRoTm9kZSA9IG5ldyBQYXRoTm9kZShzcXJ0TmFtZSwgcGF0aCk7XG4gIHZhciBzdmcgPSBuZXcgU3ZnTm9kZShbcGF0aE5vZGVdLCB7XG4gICAgLy8gTm90ZTogMTAwMDoxIHJhdGlvIG9mIHZpZXdCb3ggdG8gZG9jdW1lbnQgZW0gd2lkdGguXG4gICAgXCJ3aWR0aFwiOiBcIjQwMGVtXCIsXG4gICAgXCJoZWlnaHRcIjogaGVpZ2h0ICsgXCJlbVwiLFxuICAgIFwidmlld0JveFwiOiBcIjAgMCA0MDAwMDAgXCIgKyB2aWV3Qm94SGVpZ2h0LFxuICAgIFwicHJlc2VydmVBc3BlY3RSYXRpb1wiOiBcInhNaW5ZTWluIHNsaWNlXCJcbiAgfSk7XG4gIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3ZnU3BhbihbXCJoaWRlLXRhaWxcIl0sIFtzdmddLCBvcHRpb25zKTtcbn07XG4vKipcbiAqIE1ha2UgYSBzcXJ0IGltYWdlIG9mIHRoZSBnaXZlbiBoZWlnaHQsXG4gKi9cblxuXG52YXIgbWFrZVNxcnRJbWFnZSA9IGZ1bmN0aW9uIG1ha2VTcXJ0SW1hZ2UoaGVpZ2h0LCBvcHRpb25zKSB7XG4gIC8vIERlZmluZSBhIG5ld09wdGlvbnMgdGhhdCByZW1vdmVzIHRoZSBlZmZlY3Qgb2Ygc2l6ZSBjaGFuZ2VzIHN1Y2ggYXMgXFxIdWdlLlxuICAvLyBXZSBkb24ndCBwaWNrIGRpZmZlcmVudCBhIGhlaWdodCBzdXJkIGZvciBcXEh1Z2UuIEZvciBpdCwgd2Ugc2NhbGUgdXAuXG4gIHZhciBuZXdPcHRpb25zID0gb3B0aW9ucy5oYXZpbmdCYXNlU2l6aW5nKCk7IC8vIFBpY2sgdGhlIGRlc2lyZWQgc3VyZCBnbHlwaCBmcm9tIGEgc2VxdWVuY2Ugb2Ygc3VyZHMuXG5cbiAgdmFyIGRlbGltID0gdHJhdmVyc2VTZXF1ZW5jZShcIlxcXFxzdXJkXCIsIGhlaWdodCAqIG5ld09wdGlvbnMuc2l6ZU11bHRpcGxpZXIsIHN0YWNrTGFyZ2VEZWxpbWl0ZXJTZXF1ZW5jZSwgbmV3T3B0aW9ucyk7XG4gIHZhciBzaXplTXVsdGlwbGllciA9IG5ld09wdGlvbnMuc2l6ZU11bHRpcGxpZXI7IC8vIGRlZmF1bHRcbiAgLy8gVGhlIHN0YW5kYXJkIHNxcnQgU1ZHcyBlYWNoIGhhdmUgYSAwLjA0ZW0gdGhpY2sgdmluaWN1bHVtLlxuICAvLyBJZiBTZXR0aW5ncy5taW5SdWxlVGhpY2tuZXNzIGlzIGxhcmdlciB0aGFuIHRoYXQsIHdlIGFkZCBleHRyYVZpbmljdWx1bS5cblxuICB2YXIgZXh0cmFWaW5pY3VsdW0gPSBNYXRoLm1heCgwLCBvcHRpb25zLm1pblJ1bGVUaGlja25lc3MgLSBvcHRpb25zLmZvbnRNZXRyaWNzKCkuc3FydFJ1bGVUaGlja25lc3MpOyAvLyBDcmVhdGUgYSBzcGFuIGNvbnRhaW5pbmcgYW4gU1ZHIGltYWdlIG9mIGEgc3FydCBzeW1ib2wuXG5cbiAgdmFyIHNwYW47XG4gIHZhciBzcGFuSGVpZ2h0ID0gMDtcbiAgdmFyIHRleEhlaWdodCA9IDA7XG4gIHZhciB2aWV3Qm94SGVpZ2h0ID0gMDtcbiAgdmFyIGFkdmFuY2VXaWR0aDsgLy8gV2UgY3JlYXRlIHZpZXdCb3hlcyB3aXRoIDgwIHVuaXRzIG9mIFwicGFkZGluZ1wiIGFib3ZlIGVhY2ggc3VyZC5cbiAgLy8gVGhlbiBicm93c2VyIHJvdW5kaW5nIGVycm9yIG9uIHRoZSBwYXJlbnQgc3BhbiBoZWlnaHQgd2lsbCBub3RcbiAgLy8gZW5jcm9hY2ggb24gdGhlIGluayBvZiB0aGUgdmluaWN1bHVtLiBCdXQgdGhhdCBwYWRkaW5nIGlzIG5vdFxuICAvLyBpbmNsdWRlZCBpbiB0aGUgVGVYLWxpa2UgYGhlaWdodGAgdXNlZCBmb3IgY2FsY3VsYXRpb24gb2ZcbiAgLy8gdmVydGljYWwgYWxpZ25tZW50LiBTbyB0ZXhIZWlnaHQgPSBzcGFuLmhlaWdodCA8IHNwYW4uc3R5bGUuaGVpZ2h0LlxuXG4gIGlmIChkZWxpbS50eXBlID09PSBcInNtYWxsXCIpIHtcbiAgICAvLyBHZXQgYW4gU1ZHIHRoYXQgaXMgZGVyaXZlZCBmcm9tIGdseXBoIFUrMjIxQSBpbiBmb250IEthVGVYLU1haW4uXG4gICAgLy8gMTAwMCB1bml0IG5vcm1hbCBnbHlwaCBoZWlnaHQuXG4gICAgdmlld0JveEhlaWdodCA9IDEwMDAgKyAxMDAwICogZXh0cmFWaW5pY3VsdW0gKyB2YlBhZDtcblxuICAgIGlmIChoZWlnaHQgPCAxLjApIHtcbiAgICAgIHNpemVNdWx0aXBsaWVyID0gMS4wOyAvLyBtaW1pYyBhIFxcdGV4dGZvbnQgcmFkaWNhbFxuICAgIH0gZWxzZSBpZiAoaGVpZ2h0IDwgMS40KSB7XG4gICAgICBzaXplTXVsdGlwbGllciA9IDAuNzsgLy8gbWltaWMgYSBcXHNjcmlwdGZvbnQgcmFkaWNhbFxuICAgIH1cblxuICAgIHNwYW5IZWlnaHQgPSAoMS4wICsgZXh0cmFWaW5pY3VsdW0gKyBlbVBhZCkgLyBzaXplTXVsdGlwbGllcjtcbiAgICB0ZXhIZWlnaHQgPSAoMS4wMCArIGV4dHJhVmluaWN1bHVtKSAvIHNpemVNdWx0aXBsaWVyO1xuICAgIHNwYW4gPSBzcXJ0U3ZnKFwic3FydE1haW5cIiwgc3BhbkhlaWdodCwgdmlld0JveEhlaWdodCwgZXh0cmFWaW5pY3VsdW0sIG9wdGlvbnMpO1xuICAgIHNwYW4uc3R5bGUubWluV2lkdGggPSBcIjAuODUzZW1cIjtcbiAgICBhZHZhbmNlV2lkdGggPSAwLjgzMyAvIHNpemVNdWx0aXBsaWVyOyAvLyBmcm9tIHRoZSBmb250LlxuICB9IGVsc2UgaWYgKGRlbGltLnR5cGUgPT09IFwibGFyZ2VcIikge1xuICAgIC8vIFRoZXNlIFNWR3MgY29tZSBmcm9tIGZvbnRzOiBLYVRlWF9TaXplMSwgX1NpemUyLCBldGMuXG4gICAgdmlld0JveEhlaWdodCA9ICgxMDAwICsgdmJQYWQpICogc2l6ZVRvTWF4SGVpZ2h0W2RlbGltLnNpemVdO1xuICAgIHRleEhlaWdodCA9IChzaXplVG9NYXhIZWlnaHRbZGVsaW0uc2l6ZV0gKyBleHRyYVZpbmljdWx1bSkgLyBzaXplTXVsdGlwbGllcjtcbiAgICBzcGFuSGVpZ2h0ID0gKHNpemVUb01heEhlaWdodFtkZWxpbS5zaXplXSArIGV4dHJhVmluaWN1bHVtICsgZW1QYWQpIC8gc2l6ZU11bHRpcGxpZXI7XG4gICAgc3BhbiA9IHNxcnRTdmcoXCJzcXJ0U2l6ZVwiICsgZGVsaW0uc2l6ZSwgc3BhbkhlaWdodCwgdmlld0JveEhlaWdodCwgZXh0cmFWaW5pY3VsdW0sIG9wdGlvbnMpO1xuICAgIHNwYW4uc3R5bGUubWluV2lkdGggPSBcIjEuMDJlbVwiO1xuICAgIGFkdmFuY2VXaWR0aCA9IDEuMCAvIHNpemVNdWx0aXBsaWVyOyAvLyAxLjAgZnJvbSB0aGUgZm9udC5cbiAgfSBlbHNlIHtcbiAgICAvLyBUYWxsIHNxcnQuIEluIFRlWCwgdGhpcyB3b3VsZCBiZSBzdGFja2VkIHVzaW5nIG11bHRpcGxlIGdseXBocy5cbiAgICAvLyBXZSdsbCB1c2UgYSBzaW5nbGUgU1ZHIHRvIGFjY29tcGxpc2ggdGhlIHNhbWUgdGhpbmcuXG4gICAgc3BhbkhlaWdodCA9IGhlaWdodCArIGV4dHJhVmluaWN1bHVtICsgZW1QYWQ7XG4gICAgdGV4SGVpZ2h0ID0gaGVpZ2h0ICsgZXh0cmFWaW5pY3VsdW07XG4gICAgdmlld0JveEhlaWdodCA9IE1hdGguZmxvb3IoMTAwMCAqIGhlaWdodCArIGV4dHJhVmluaWN1bHVtKSArIHZiUGFkO1xuICAgIHNwYW4gPSBzcXJ0U3ZnKFwic3FydFRhbGxcIiwgc3BhbkhlaWdodCwgdmlld0JveEhlaWdodCwgZXh0cmFWaW5pY3VsdW0sIG9wdGlvbnMpO1xuICAgIHNwYW4uc3R5bGUubWluV2lkdGggPSBcIjAuNzQyZW1cIjtcbiAgICBhZHZhbmNlV2lkdGggPSAxLjA1NjtcbiAgfVxuXG4gIHNwYW4uaGVpZ2h0ID0gdGV4SGVpZ2h0O1xuICBzcGFuLnN0eWxlLmhlaWdodCA9IHNwYW5IZWlnaHQgKyBcImVtXCI7XG4gIHJldHVybiB7XG4gICAgc3Bhbjogc3BhbixcbiAgICBhZHZhbmNlV2lkdGg6IGFkdmFuY2VXaWR0aCxcbiAgICAvLyBDYWxjdWxhdGUgdGhlIGFjdHVhbCBsaW5lIHdpZHRoLlxuICAgIC8vIFRoaXMgYWN0dWFsbHkgc2hvdWxkIGRlcGVuZCBvbiB0aGUgY2hvc2VuIGZvbnQgLS0gZS5nLiBcXGJvbGRtYXRoXG4gICAgLy8gc2hvdWxkIHVzZSB0aGUgdGhpY2tlciBzdXJkIHN5bWJvbHMgZnJvbSBlLmcuIEthVGVYX01haW4tQm9sZCwgYW5kXG4gICAgLy8gaGF2ZSB0aGlja2VyIHJ1bGVzLlxuICAgIHJ1bGVXaWR0aDogKG9wdGlvbnMuZm9udE1ldHJpY3MoKS5zcXJ0UnVsZVRoaWNrbmVzcyArIGV4dHJhVmluaWN1bHVtKSAqIHNpemVNdWx0aXBsaWVyXG4gIH07XG59OyAvLyBUaGVyZSBhcmUgdGhyZWUga2luZHMgb2YgZGVsaW1pdGVycywgZGVsaW1pdGVycyB0aGF0IHN0YWNrIHdoZW4gdGhleSBiZWNvbWVcbi8vIHRvbyBsYXJnZVxuXG5cbnZhciBzdGFja0xhcmdlRGVsaW1pdGVycyA9IFtcIihcIiwgXCJcXFxcbHBhcmVuXCIsIFwiKVwiLCBcIlxcXFxycGFyZW5cIiwgXCJbXCIsIFwiXFxcXGxicmFja1wiLCBcIl1cIiwgXCJcXFxccmJyYWNrXCIsIFwiXFxcXHtcIiwgXCJcXFxcbGJyYWNlXCIsIFwiXFxcXH1cIiwgXCJcXFxccmJyYWNlXCIsIFwiXFxcXGxmbG9vclwiLCBcIlxcXFxyZmxvb3JcIiwgXCJcXHUyMzBBXCIsIFwiXFx1MjMwQlwiLCBcIlxcXFxsY2VpbFwiLCBcIlxcXFxyY2VpbFwiLCBcIlxcdTIzMDhcIiwgXCJcXHUyMzA5XCIsIFwiXFxcXHN1cmRcIl07IC8vIGRlbGltaXRlcnMgdGhhdCBhbHdheXMgc3RhY2tcblxudmFyIHN0YWNrQWx3YXlzRGVsaW1pdGVycyA9IFtcIlxcXFx1cGFycm93XCIsIFwiXFxcXGRvd25hcnJvd1wiLCBcIlxcXFx1cGRvd25hcnJvd1wiLCBcIlxcXFxVcGFycm93XCIsIFwiXFxcXERvd25hcnJvd1wiLCBcIlxcXFxVcGRvd25hcnJvd1wiLCBcInxcIiwgXCJcXFxcfFwiLCBcIlxcXFx2ZXJ0XCIsIFwiXFxcXFZlcnRcIiwgXCJcXFxcbHZlcnRcIiwgXCJcXFxccnZlcnRcIiwgXCJcXFxcbFZlcnRcIiwgXCJcXFxcclZlcnRcIiwgXCJcXFxcbGdyb3VwXCIsIFwiXFxcXHJncm91cFwiLCBcIlxcdTI3RUVcIiwgXCJcXHUyN0VGXCIsIFwiXFxcXGxtb3VzdGFjaGVcIiwgXCJcXFxccm1vdXN0YWNoZVwiLCBcIlxcdTIzQjBcIiwgXCJcXHUyM0IxXCJdOyAvLyBhbmQgZGVsaW1pdGVycyB0aGF0IG5ldmVyIHN0YWNrXG5cbnZhciBzdGFja05ldmVyRGVsaW1pdGVycyA9IFtcIjxcIiwgXCI+XCIsIFwiXFxcXGxhbmdsZVwiLCBcIlxcXFxyYW5nbGVcIiwgXCIvXCIsIFwiXFxcXGJhY2tzbGFzaFwiLCBcIlxcXFxsdFwiLCBcIlxcXFxndFwiXTsgLy8gTWV0cmljcyBvZiB0aGUgZGlmZmVyZW50IHNpemVzLiBGb3VuZCBieSBsb29raW5nIGF0IFRlWCdzIG91dHB1dCBvZlxuLy8gJFxcYmlnbHwgLy8gXFxCaWdsfCBcXGJpZ2dsfCBcXEJpZ2dsfCBcXHNob3dsaXN0cyRcbi8vIFVzZWQgdG8gY3JlYXRlIHN0YWNrZWQgZGVsaW1pdGVycyBvZiBhcHByb3ByaWF0ZSBzaXplcyBpbiBtYWtlU2l6ZWREZWxpbS5cblxudmFyIHNpemVUb01heEhlaWdodCA9IFswLCAxLjIsIDEuOCwgMi40LCAzLjBdO1xuLyoqXG4gKiBVc2VkIHRvIGNyZWF0ZSBhIGRlbGltaXRlciBvZiBhIHNwZWNpZmljIHNpemUsIHdoZXJlIGBzaXplYCBpcyAxLCAyLCAzLCBvciA0LlxuICovXG5cbnZhciBtYWtlU2l6ZWREZWxpbSA9IGZ1bmN0aW9uIG1ha2VTaXplZERlbGltKGRlbGltLCBzaXplLCBvcHRpb25zLCBtb2RlLCBjbGFzc2VzKSB7XG4gIC8vIDwgYW5kID4gdHVybiBpbnRvIFxcbGFuZ2xlIGFuZCBcXHJhbmdsZSBpbiBkZWxpbWl0ZXJzXG4gIGlmIChkZWxpbSA9PT0gXCI8XCIgfHwgZGVsaW0gPT09IFwiXFxcXGx0XCIgfHwgZGVsaW0gPT09IFwiXFx1MjdFOFwiKSB7XG4gICAgZGVsaW0gPSBcIlxcXFxsYW5nbGVcIjtcbiAgfSBlbHNlIGlmIChkZWxpbSA9PT0gXCI+XCIgfHwgZGVsaW0gPT09IFwiXFxcXGd0XCIgfHwgZGVsaW0gPT09IFwiXFx1MjdFOVwiKSB7XG4gICAgZGVsaW0gPSBcIlxcXFxyYW5nbGVcIjtcbiAgfSAvLyBTaXplZCBkZWxpbWl0ZXJzIGFyZSBuZXZlciBjZW50ZXJlZC5cblxuXG4gIGlmICh1dGlscy5jb250YWlucyhzdGFja0xhcmdlRGVsaW1pdGVycywgZGVsaW0pIHx8IHV0aWxzLmNvbnRhaW5zKHN0YWNrTmV2ZXJEZWxpbWl0ZXJzLCBkZWxpbSkpIHtcbiAgICByZXR1cm4gbWFrZUxhcmdlRGVsaW0oZGVsaW0sIHNpemUsIGZhbHNlLCBvcHRpb25zLCBtb2RlLCBjbGFzc2VzKTtcbiAgfSBlbHNlIGlmICh1dGlscy5jb250YWlucyhzdGFja0Fsd2F5c0RlbGltaXRlcnMsIGRlbGltKSkge1xuICAgIHJldHVybiBtYWtlU3RhY2tlZERlbGltKGRlbGltLCBzaXplVG9NYXhIZWlnaHRbc2l6ZV0sIGZhbHNlLCBvcHRpb25zLCBtb2RlLCBjbGFzc2VzKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJJbGxlZ2FsIGRlbGltaXRlcjogJ1wiICsgZGVsaW0gKyBcIidcIik7XG4gIH1cbn07XG4vKipcbiAqIFRoZXJlIGFyZSB0aHJlZSBkaWZmZXJlbnQgc2VxdWVuY2VzIG9mIGRlbGltaXRlciBzaXplcyB0aGF0IHRoZSBkZWxpbWl0ZXJzXG4gKiBmb2xsb3cgZGVwZW5kaW5nIG9uIHRoZSBraW5kIG9mIGRlbGltaXRlci4gVGhpcyBpcyB1c2VkIHdoZW4gY3JlYXRpbmcgY3VzdG9tXG4gKiBzaXplZCBkZWxpbWl0ZXJzIHRvIGRlY2lkZSB3aGV0aGVyIHRvIGNyZWF0ZSBhIHNtYWxsLCBsYXJnZSwgb3Igc3RhY2tlZFxuICogZGVsaW1pdGVyLlxuICpcbiAqIEluIHJlYWwgVGVYLCB0aGVzZSBzZXF1ZW5jZXMgYXJlbid0IGV4cGxpY2l0bHkgZGVmaW5lZCwgYnV0IGFyZSBpbnN0ZWFkXG4gKiBkZWZpbmVkIGluc2lkZSB0aGUgZm9udCBtZXRyaWNzLiBTaW5jZSB0aGVyZSBhcmUgb25seSB0aHJlZSBzZXF1ZW5jZXMgdGhhdFxuICogYXJlIHBvc3NpYmxlIGZvciB0aGUgZGVsaW1pdGVycyB0aGF0IFRlWCBkZWZpbmVzLCBpdCBpcyBlYXNpZXIgdG8ganVzdCBlbmNvZGVcbiAqIHRoZW0gZXhwbGljaXRseSBoZXJlLlxuICovXG5cblxuLy8gRGVsaW1pdGVycyB0aGF0IG5ldmVyIHN0YWNrIHRyeSBzbWFsbCBkZWxpbWl0ZXJzIGFuZCBsYXJnZSBkZWxpbWl0ZXJzIG9ubHlcbnZhciBzdGFja05ldmVyRGVsaW1pdGVyU2VxdWVuY2UgPSBbe1xuICB0eXBlOiBcInNtYWxsXCIsXG4gIHN0eWxlOiBzcmNfU3R5bGUuU0NSSVBUU0NSSVBUXG59LCB7XG4gIHR5cGU6IFwic21hbGxcIixcbiAgc3R5bGU6IHNyY19TdHlsZS5TQ1JJUFRcbn0sIHtcbiAgdHlwZTogXCJzbWFsbFwiLFxuICBzdHlsZTogc3JjX1N0eWxlLlRFWFRcbn0sIHtcbiAgdHlwZTogXCJsYXJnZVwiLFxuICBzaXplOiAxXG59LCB7XG4gIHR5cGU6IFwibGFyZ2VcIixcbiAgc2l6ZTogMlxufSwge1xuICB0eXBlOiBcImxhcmdlXCIsXG4gIHNpemU6IDNcbn0sIHtcbiAgdHlwZTogXCJsYXJnZVwiLFxuICBzaXplOiA0XG59XTsgLy8gRGVsaW1pdGVycyB0aGF0IGFsd2F5cyBzdGFjayB0cnkgdGhlIHNtYWxsIGRlbGltaXRlcnMgZmlyc3QsIHRoZW4gc3RhY2tcblxudmFyIHN0YWNrQWx3YXlzRGVsaW1pdGVyU2VxdWVuY2UgPSBbe1xuICB0eXBlOiBcInNtYWxsXCIsXG4gIHN0eWxlOiBzcmNfU3R5bGUuU0NSSVBUU0NSSVBUXG59LCB7XG4gIHR5cGU6IFwic21hbGxcIixcbiAgc3R5bGU6IHNyY19TdHlsZS5TQ1JJUFRcbn0sIHtcbiAgdHlwZTogXCJzbWFsbFwiLFxuICBzdHlsZTogc3JjX1N0eWxlLlRFWFRcbn0sIHtcbiAgdHlwZTogXCJzdGFja1wiXG59XTsgLy8gRGVsaW1pdGVycyB0aGF0IHN0YWNrIHdoZW4gbGFyZ2UgdHJ5IHRoZSBzbWFsbCBhbmQgdGhlbiBsYXJnZSBkZWxpbWl0ZXJzLCBhbmRcbi8vIHN0YWNrIGFmdGVyd2FyZHNcblxudmFyIHN0YWNrTGFyZ2VEZWxpbWl0ZXJTZXF1ZW5jZSA9IFt7XG4gIHR5cGU6IFwic21hbGxcIixcbiAgc3R5bGU6IHNyY19TdHlsZS5TQ1JJUFRTQ1JJUFRcbn0sIHtcbiAgdHlwZTogXCJzbWFsbFwiLFxuICBzdHlsZTogc3JjX1N0eWxlLlNDUklQVFxufSwge1xuICB0eXBlOiBcInNtYWxsXCIsXG4gIHN0eWxlOiBzcmNfU3R5bGUuVEVYVFxufSwge1xuICB0eXBlOiBcImxhcmdlXCIsXG4gIHNpemU6IDFcbn0sIHtcbiAgdHlwZTogXCJsYXJnZVwiLFxuICBzaXplOiAyXG59LCB7XG4gIHR5cGU6IFwibGFyZ2VcIixcbiAgc2l6ZTogM1xufSwge1xuICB0eXBlOiBcImxhcmdlXCIsXG4gIHNpemU6IDRcbn0sIHtcbiAgdHlwZTogXCJzdGFja1wiXG59XTtcbi8qKlxuICogR2V0IHRoZSBmb250IHVzZWQgaW4gYSBkZWxpbWl0ZXIgYmFzZWQgb24gd2hhdCBraW5kIG9mIGRlbGltaXRlciBpdCBpcy5cbiAqIFRPRE8oIzk2MykgVXNlIG1vcmUgc3BlY2lmaWMgZm9udCBmYW1pbHkgcmV0dXJuIHR5cGUgb25jZSB0aGF0IGlzIGludHJvZHVjZWQuXG4gKi9cblxudmFyIGRlbGltVHlwZVRvRm9udCA9IGZ1bmN0aW9uIGRlbGltVHlwZVRvRm9udCh0eXBlKSB7XG4gIGlmICh0eXBlLnR5cGUgPT09IFwic21hbGxcIikge1xuICAgIHJldHVybiBcIk1haW4tUmVndWxhclwiO1xuICB9IGVsc2UgaWYgKHR5cGUudHlwZSA9PT0gXCJsYXJnZVwiKSB7XG4gICAgcmV0dXJuIFwiU2l6ZVwiICsgdHlwZS5zaXplICsgXCItUmVndWxhclwiO1xuICB9IGVsc2UgaWYgKHR5cGUudHlwZSA9PT0gXCJzdGFja1wiKSB7XG4gICAgcmV0dXJuIFwiU2l6ZTQtUmVndWxhclwiO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkFkZCBzdXBwb3J0IGZvciBkZWxpbSB0eXBlICdcIiArIHR5cGUudHlwZSArIFwiJyBoZXJlLlwiKTtcbiAgfVxufTtcbi8qKlxuICogVHJhdmVyc2UgYSBzZXF1ZW5jZSBvZiB0eXBlcyBvZiBkZWxpbWl0ZXJzIHRvIGRlY2lkZSB3aGF0IGtpbmQgb2YgZGVsaW1pdGVyXG4gKiBzaG91bGQgYmUgdXNlZCB0byBjcmVhdGUgYSBkZWxpbWl0ZXIgb2YgdGhlIGdpdmVuIGhlaWdodCtkZXB0aC5cbiAqL1xuXG5cbnZhciB0cmF2ZXJzZVNlcXVlbmNlID0gZnVuY3Rpb24gdHJhdmVyc2VTZXF1ZW5jZShkZWxpbSwgaGVpZ2h0LCBzZXF1ZW5jZSwgb3B0aW9ucykge1xuICAvLyBIZXJlLCB3ZSBjaG9vc2UgdGhlIGluZGV4IHdlIHNob3VsZCBzdGFydCBhdCBpbiB0aGUgc2VxdWVuY2VzLiBJbiBzbWFsbGVyXG4gIC8vIHNpemVzICh3aGljaCBjb3JyZXNwb25kIHRvIGxhcmdlciBudW1iZXJzIGluIHN0eWxlLnNpemUpIHdlIHN0YXJ0IGVhcmxpZXJcbiAgLy8gaW4gdGhlIHNlcXVlbmNlLiBUaHVzLCBzY3JpcHRzY3JpcHQgc3RhcnRzIGF0IGluZGV4IDMtMz0wLCBzY3JpcHQgc3RhcnRzXG4gIC8vIGF0IGluZGV4IDMtMj0xLCB0ZXh0IHN0YXJ0cyBhdCAzLTE9MiwgYW5kIGRpc3BsYXkgc3RhcnRzIGF0IG1pbigyLDMtMCk9MlxuICB2YXIgc3RhcnQgPSBNYXRoLm1pbigyLCAzIC0gb3B0aW9ucy5zdHlsZS5zaXplKTtcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBzZXF1ZW5jZS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzZXF1ZW5jZVtpXS50eXBlID09PSBcInN0YWNrXCIpIHtcbiAgICAgIC8vIFRoaXMgaXMgYWx3YXlzIHRoZSBsYXN0IGRlbGltaXRlciwgc28gd2UganVzdCBicmVhayB0aGUgbG9vcCBub3cuXG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICB2YXIgbWV0cmljcyA9IGdldE1ldHJpY3MoZGVsaW0sIGRlbGltVHlwZVRvRm9udChzZXF1ZW5jZVtpXSksIFwibWF0aFwiKTtcbiAgICB2YXIgaGVpZ2h0RGVwdGggPSBtZXRyaWNzLmhlaWdodCArIG1ldHJpY3MuZGVwdGg7IC8vIFNtYWxsIGRlbGltaXRlcnMgYXJlIHNjYWxlZCBkb3duIHZlcnNpb25zIG9mIHRoZSBzYW1lIGZvbnQsIHNvIHdlXG4gICAgLy8gYWNjb3VudCBmb3IgdGhlIHN0eWxlIGNoYW5nZSBzaXplLlxuXG4gICAgaWYgKHNlcXVlbmNlW2ldLnR5cGUgPT09IFwic21hbGxcIikge1xuICAgICAgdmFyIG5ld09wdGlvbnMgPSBvcHRpb25zLmhhdmluZ0Jhc2VTdHlsZShzZXF1ZW5jZVtpXS5zdHlsZSk7XG4gICAgICBoZWlnaHREZXB0aCAqPSBuZXdPcHRpb25zLnNpemVNdWx0aXBsaWVyO1xuICAgIH0gLy8gQ2hlY2sgaWYgdGhlIGRlbGltaXRlciBhdCB0aGlzIHNpemUgd29ya3MgZm9yIHRoZSBnaXZlbiBoZWlnaHQuXG5cblxuICAgIGlmIChoZWlnaHREZXB0aCA+IGhlaWdodCkge1xuICAgICAgcmV0dXJuIHNlcXVlbmNlW2ldO1xuICAgIH1cbiAgfSAvLyBJZiB3ZSByZWFjaGVkIHRoZSBlbmQgb2YgdGhlIHNlcXVlbmNlLCByZXR1cm4gdGhlIGxhc3Qgc2VxdWVuY2UgZWxlbWVudC5cblxuXG4gIHJldHVybiBzZXF1ZW5jZVtzZXF1ZW5jZS5sZW5ndGggLSAxXTtcbn07XG4vKipcbiAqIE1ha2UgYSBkZWxpbWl0ZXIgb2YgYSBnaXZlbiBoZWlnaHQrZGVwdGgsIHdpdGggb3B0aW9uYWwgY2VudGVyaW5nLiBIZXJlLCB3ZVxuICogdHJhdmVyc2UgdGhlIHNlcXVlbmNlcywgYW5kIGNyZWF0ZSBhIGRlbGltaXRlciB0aGF0IHRoZSBzZXF1ZW5jZSB0ZWxscyB1cyB0by5cbiAqL1xuXG5cbnZhciBtYWtlQ3VzdG9tU2l6ZWREZWxpbSA9IGZ1bmN0aW9uIG1ha2VDdXN0b21TaXplZERlbGltKGRlbGltLCBoZWlnaHQsIGNlbnRlciwgb3B0aW9ucywgbW9kZSwgY2xhc3Nlcykge1xuICBpZiAoZGVsaW0gPT09IFwiPFwiIHx8IGRlbGltID09PSBcIlxcXFxsdFwiIHx8IGRlbGltID09PSBcIlxcdTI3RThcIikge1xuICAgIGRlbGltID0gXCJcXFxcbGFuZ2xlXCI7XG4gIH0gZWxzZSBpZiAoZGVsaW0gPT09IFwiPlwiIHx8IGRlbGltID09PSBcIlxcXFxndFwiIHx8IGRlbGltID09PSBcIlxcdTI3RTlcIikge1xuICAgIGRlbGltID0gXCJcXFxccmFuZ2xlXCI7XG4gIH0gLy8gRGVjaWRlIHdoYXQgc2VxdWVuY2UgdG8gdXNlXG5cblxuICB2YXIgc2VxdWVuY2U7XG5cbiAgaWYgKHV0aWxzLmNvbnRhaW5zKHN0YWNrTmV2ZXJEZWxpbWl0ZXJzLCBkZWxpbSkpIHtcbiAgICBzZXF1ZW5jZSA9IHN0YWNrTmV2ZXJEZWxpbWl0ZXJTZXF1ZW5jZTtcbiAgfSBlbHNlIGlmICh1dGlscy5jb250YWlucyhzdGFja0xhcmdlRGVsaW1pdGVycywgZGVsaW0pKSB7XG4gICAgc2VxdWVuY2UgPSBzdGFja0xhcmdlRGVsaW1pdGVyU2VxdWVuY2U7XG4gIH0gZWxzZSB7XG4gICAgc2VxdWVuY2UgPSBzdGFja0Fsd2F5c0RlbGltaXRlclNlcXVlbmNlO1xuICB9IC8vIExvb2sgdGhyb3VnaCB0aGUgc2VxdWVuY2VcblxuXG4gIHZhciBkZWxpbVR5cGUgPSB0cmF2ZXJzZVNlcXVlbmNlKGRlbGltLCBoZWlnaHQsIHNlcXVlbmNlLCBvcHRpb25zKTsgLy8gR2V0IHRoZSBkZWxpbWl0ZXIgZnJvbSBmb250IGdseXBocy5cbiAgLy8gRGVwZW5kaW5nIG9uIHRoZSBzZXF1ZW5jZSBlbGVtZW50IHdlIGRlY2lkZWQgb24sIGNhbGwgdGhlXG4gIC8vIGFwcHJvcHJpYXRlIGZ1bmN0aW9uLlxuXG4gIGlmIChkZWxpbVR5cGUudHlwZSA9PT0gXCJzbWFsbFwiKSB7XG4gICAgcmV0dXJuIG1ha2VTbWFsbERlbGltKGRlbGltLCBkZWxpbVR5cGUuc3R5bGUsIGNlbnRlciwgb3B0aW9ucywgbW9kZSwgY2xhc3Nlcyk7XG4gIH0gZWxzZSBpZiAoZGVsaW1UeXBlLnR5cGUgPT09IFwibGFyZ2VcIikge1xuICAgIHJldHVybiBtYWtlTGFyZ2VEZWxpbShkZWxpbSwgZGVsaW1UeXBlLnNpemUsIGNlbnRlciwgb3B0aW9ucywgbW9kZSwgY2xhc3Nlcyk7XG4gIH0gZWxzZVxuICAgIC8qIGlmIChkZWxpbVR5cGUudHlwZSA9PT0gXCJzdGFja1wiKSAqL1xuICAgIHtcbiAgICAgIHJldHVybiBtYWtlU3RhY2tlZERlbGltKGRlbGltLCBoZWlnaHQsIGNlbnRlciwgb3B0aW9ucywgbW9kZSwgY2xhc3Nlcyk7XG4gICAgfVxufTtcbi8qKlxuICogTWFrZSBhIGRlbGltaXRlciBmb3IgdXNlIHdpdGggYFxcbGVmdGAgYW5kIGBcXHJpZ2h0YCwgZ2l2ZW4gYSBoZWlnaHQgYW5kIGRlcHRoXG4gKiBvZiBhbiBleHByZXNzaW9uIHRoYXQgdGhlIGRlbGltaXRlcnMgc3Vycm91bmQuXG4gKi9cblxuXG52YXIgbWFrZUxlZnRSaWdodERlbGltID0gZnVuY3Rpb24gbWFrZUxlZnRSaWdodERlbGltKGRlbGltLCBoZWlnaHQsIGRlcHRoLCBvcHRpb25zLCBtb2RlLCBjbGFzc2VzKSB7XG4gIC8vIFdlIGFsd2F5cyBjZW50ZXIgXFxsZWZ0L1xccmlnaHQgZGVsaW1pdGVycywgc28gdGhlIGF4aXMgaXMgYWx3YXlzIHNoaWZ0ZWRcbiAgdmFyIGF4aXNIZWlnaHQgPSBvcHRpb25zLmZvbnRNZXRyaWNzKCkuYXhpc0hlaWdodCAqIG9wdGlvbnMuc2l6ZU11bHRpcGxpZXI7IC8vIFRha2VuIGZyb20gVGVYIHNvdXJjZSwgdGV4LndlYiwgZnVuY3Rpb24gbWFrZV9sZWZ0X3JpZ2h0XG5cbiAgdmFyIGRlbGltaXRlckZhY3RvciA9IDkwMTtcbiAgdmFyIGRlbGltaXRlckV4dGVuZCA9IDUuMCAvIG9wdGlvbnMuZm9udE1ldHJpY3MoKS5wdFBlckVtO1xuICB2YXIgbWF4RGlzdEZyb21BeGlzID0gTWF0aC5tYXgoaGVpZ2h0IC0gYXhpc0hlaWdodCwgZGVwdGggKyBheGlzSGVpZ2h0KTtcbiAgdmFyIHRvdGFsSGVpZ2h0ID0gTWF0aC5tYXgoIC8vIEluIHJlYWwgVGVYLCBjYWxjdWxhdGlvbnMgYXJlIGRvbmUgdXNpbmcgaW50ZWdyYWwgdmFsdWVzIHdoaWNoIGFyZVxuICAvLyA2NTUzNiBwZXIgcHQsIG9yIDY1NTM2MCBwZXIgZW0uIFNvLCB0aGUgZGl2aXNpb24gaGVyZSB0cnVuY2F0ZXMgaW5cbiAgLy8gVGVYIGJ1dCBkb2Vzbid0IGhlcmUsIHByb2R1Y2luZyBkaWZmZXJlbnQgcmVzdWx0cy4gSWYgd2Ugd2FudGVkIHRvXG4gIC8vIGV4YWN0bHkgbWF0Y2ggVGVYJ3MgY2FsY3VsYXRpb24sIHdlIGNvdWxkIGRvXG4gIC8vICAgTWF0aC5mbG9vcig2NTUzNjAgKiBtYXhEaXN0RnJvbUF4aXMgLyA1MDApICpcbiAgLy8gICAgZGVsaW1pdGVyRmFjdG9yIC8gNjU1MzYwXG4gIC8vIChUbyBzZWUgdGhlIGRpZmZlcmVuY2UsIGNvbXBhcmVcbiAgLy8gICAgeF57eF57XFxsZWZ0KFxccnVsZXswLjFlbX17MC42OGVtfVxccmlnaHQpfX1cbiAgLy8gaW4gVGVYIGFuZCBLYVRlWClcbiAgbWF4RGlzdEZyb21BeGlzIC8gNTAwICogZGVsaW1pdGVyRmFjdG9yLCAyICogbWF4RGlzdEZyb21BeGlzIC0gZGVsaW1pdGVyRXh0ZW5kKTsgLy8gRmluYWxseSwgd2UgZGVmZXIgdG8gYG1ha2VDdXN0b21TaXplZERlbGltYCB3aXRoIG91ciBjYWxjdWxhdGVkIHRvdGFsXG4gIC8vIGhlaWdodFxuXG4gIHJldHVybiBtYWtlQ3VzdG9tU2l6ZWREZWxpbShkZWxpbSwgdG90YWxIZWlnaHQsIHRydWUsIG9wdGlvbnMsIG1vZGUsIGNsYXNzZXMpO1xufTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgZGVsaW1pdGVyID0gKHtcbiAgc3FydEltYWdlOiBtYWtlU3FydEltYWdlLFxuICBzaXplZERlbGltOiBtYWtlU2l6ZWREZWxpbSxcbiAgc2l6ZVRvTWF4SGVpZ2h0OiBzaXplVG9NYXhIZWlnaHQsXG4gIGN1c3RvbVNpemVkRGVsaW06IG1ha2VDdXN0b21TaXplZERlbGltLFxuICBsZWZ0UmlnaHREZWxpbTogbWFrZUxlZnRSaWdodERlbGltXG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvZGVsaW1zaXppbmcuanNcblxuXG5cblxuXG5cblxuXG5cbi8vIEV4dHJhIGRhdGEgbmVlZGVkIGZvciB0aGUgZGVsaW1pdGVyIGhhbmRsZXIgZG93biBiZWxvd1xudmFyIGRlbGltaXRlclNpemVzID0ge1xuICBcIlxcXFxiaWdsXCI6IHtcbiAgICBtY2xhc3M6IFwibW9wZW5cIixcbiAgICBzaXplOiAxXG4gIH0sXG4gIFwiXFxcXEJpZ2xcIjoge1xuICAgIG1jbGFzczogXCJtb3BlblwiLFxuICAgIHNpemU6IDJcbiAgfSxcbiAgXCJcXFxcYmlnZ2xcIjoge1xuICAgIG1jbGFzczogXCJtb3BlblwiLFxuICAgIHNpemU6IDNcbiAgfSxcbiAgXCJcXFxcQmlnZ2xcIjoge1xuICAgIG1jbGFzczogXCJtb3BlblwiLFxuICAgIHNpemU6IDRcbiAgfSxcbiAgXCJcXFxcYmlnclwiOiB7XG4gICAgbWNsYXNzOiBcIm1jbG9zZVwiLFxuICAgIHNpemU6IDFcbiAgfSxcbiAgXCJcXFxcQmlnclwiOiB7XG4gICAgbWNsYXNzOiBcIm1jbG9zZVwiLFxuICAgIHNpemU6IDJcbiAgfSxcbiAgXCJcXFxcYmlnZ3JcIjoge1xuICAgIG1jbGFzczogXCJtY2xvc2VcIixcbiAgICBzaXplOiAzXG4gIH0sXG4gIFwiXFxcXEJpZ2dyXCI6IHtcbiAgICBtY2xhc3M6IFwibWNsb3NlXCIsXG4gICAgc2l6ZTogNFxuICB9LFxuICBcIlxcXFxiaWdtXCI6IHtcbiAgICBtY2xhc3M6IFwibXJlbFwiLFxuICAgIHNpemU6IDFcbiAgfSxcbiAgXCJcXFxcQmlnbVwiOiB7XG4gICAgbWNsYXNzOiBcIm1yZWxcIixcbiAgICBzaXplOiAyXG4gIH0sXG4gIFwiXFxcXGJpZ2dtXCI6IHtcbiAgICBtY2xhc3M6IFwibXJlbFwiLFxuICAgIHNpemU6IDNcbiAgfSxcbiAgXCJcXFxcQmlnZ21cIjoge1xuICAgIG1jbGFzczogXCJtcmVsXCIsXG4gICAgc2l6ZTogNFxuICB9LFxuICBcIlxcXFxiaWdcIjoge1xuICAgIG1jbGFzczogXCJtb3JkXCIsXG4gICAgc2l6ZTogMVxuICB9LFxuICBcIlxcXFxCaWdcIjoge1xuICAgIG1jbGFzczogXCJtb3JkXCIsXG4gICAgc2l6ZTogMlxuICB9LFxuICBcIlxcXFxiaWdnXCI6IHtcbiAgICBtY2xhc3M6IFwibW9yZFwiLFxuICAgIHNpemU6IDNcbiAgfSxcbiAgXCJcXFxcQmlnZ1wiOiB7XG4gICAgbWNsYXNzOiBcIm1vcmRcIixcbiAgICBzaXplOiA0XG4gIH1cbn07XG52YXIgZGVsaW1pdGVycyA9IFtcIihcIiwgXCJcXFxcbHBhcmVuXCIsIFwiKVwiLCBcIlxcXFxycGFyZW5cIiwgXCJbXCIsIFwiXFxcXGxicmFja1wiLCBcIl1cIiwgXCJcXFxccmJyYWNrXCIsIFwiXFxcXHtcIiwgXCJcXFxcbGJyYWNlXCIsIFwiXFxcXH1cIiwgXCJcXFxccmJyYWNlXCIsIFwiXFxcXGxmbG9vclwiLCBcIlxcXFxyZmxvb3JcIiwgXCJcXHUyMzBBXCIsIFwiXFx1MjMwQlwiLCBcIlxcXFxsY2VpbFwiLCBcIlxcXFxyY2VpbFwiLCBcIlxcdTIzMDhcIiwgXCJcXHUyMzA5XCIsIFwiPFwiLCBcIj5cIiwgXCJcXFxcbGFuZ2xlXCIsIFwiXFx1MjdFOFwiLCBcIlxcXFxyYW5nbGVcIiwgXCJcXHUyN0U5XCIsIFwiXFxcXGx0XCIsIFwiXFxcXGd0XCIsIFwiXFxcXGx2ZXJ0XCIsIFwiXFxcXHJ2ZXJ0XCIsIFwiXFxcXGxWZXJ0XCIsIFwiXFxcXHJWZXJ0XCIsIFwiXFxcXGxncm91cFwiLCBcIlxcXFxyZ3JvdXBcIiwgXCJcXHUyN0VFXCIsIFwiXFx1MjdFRlwiLCBcIlxcXFxsbW91c3RhY2hlXCIsIFwiXFxcXHJtb3VzdGFjaGVcIiwgXCJcXHUyM0IwXCIsIFwiXFx1MjNCMVwiLCBcIi9cIiwgXCJcXFxcYmFja3NsYXNoXCIsIFwifFwiLCBcIlxcXFx2ZXJ0XCIsIFwiXFxcXHxcIiwgXCJcXFxcVmVydFwiLCBcIlxcXFx1cGFycm93XCIsIFwiXFxcXFVwYXJyb3dcIiwgXCJcXFxcZG93bmFycm93XCIsIFwiXFxcXERvd25hcnJvd1wiLCBcIlxcXFx1cGRvd25hcnJvd1wiLCBcIlxcXFxVcGRvd25hcnJvd1wiLCBcIi5cIl07XG5cbi8vIERlbGltaXRlciBmdW5jdGlvbnNcbmZ1bmN0aW9uIGNoZWNrRGVsaW1pdGVyKGRlbGltLCBjb250ZXh0KSB7XG4gIHZhciBzeW1EZWxpbSA9IGNoZWNrU3ltYm9sTm9kZVR5cGUoZGVsaW0pO1xuXG4gIGlmIChzeW1EZWxpbSAmJiB1dGlscy5jb250YWlucyhkZWxpbWl0ZXJzLCBzeW1EZWxpbS50ZXh0KSkge1xuICAgIHJldHVybiBzeW1EZWxpbTtcbiAgfSBlbHNlIGlmIChzeW1EZWxpbSkge1xuICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkludmFsaWQgZGVsaW1pdGVyICdcIiArIHN5bURlbGltLnRleHQgKyBcIicgYWZ0ZXIgJ1wiICsgY29udGV4dC5mdW5jTmFtZSArIFwiJ1wiLCBkZWxpbSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiSW52YWxpZCBkZWxpbWl0ZXIgdHlwZSAnXCIgKyBkZWxpbS50eXBlICsgXCInXCIsIGRlbGltKTtcbiAgfVxufVxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiZGVsaW1zaXppbmdcIixcbiAgbmFtZXM6IFtcIlxcXFxiaWdsXCIsIFwiXFxcXEJpZ2xcIiwgXCJcXFxcYmlnZ2xcIiwgXCJcXFxcQmlnZ2xcIiwgXCJcXFxcYmlnclwiLCBcIlxcXFxCaWdyXCIsIFwiXFxcXGJpZ2dyXCIsIFwiXFxcXEJpZ2dyXCIsIFwiXFxcXGJpZ21cIiwgXCJcXFxcQmlnbVwiLCBcIlxcXFxiaWdnbVwiLCBcIlxcXFxCaWdnbVwiLCBcIlxcXFxiaWdcIiwgXCJcXFxcQmlnXCIsIFwiXFxcXGJpZ2dcIiwgXCJcXFxcQmlnZ1wiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxLFxuICAgIGFyZ1R5cGVzOiBbXCJwcmltaXRpdmVcIl1cbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihjb250ZXh0LCBhcmdzKSB7XG4gICAgdmFyIGRlbGltID0gY2hlY2tEZWxpbWl0ZXIoYXJnc1swXSwgY29udGV4dCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiZGVsaW1zaXppbmdcIixcbiAgICAgIG1vZGU6IGNvbnRleHQucGFyc2VyLm1vZGUsXG4gICAgICBzaXplOiBkZWxpbWl0ZXJTaXplc1tjb250ZXh0LmZ1bmNOYW1lXS5zaXplLFxuICAgICAgbWNsYXNzOiBkZWxpbWl0ZXJTaXplc1tjb250ZXh0LmZ1bmNOYW1lXS5tY2xhc3MsXG4gICAgICBkZWxpbTogZGVsaW0udGV4dFxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIGlmIChncm91cC5kZWxpbSA9PT0gXCIuXCIpIHtcbiAgICAgIC8vIEVtcHR5IGRlbGltaXRlcnMgc3RpbGwgY291bnQgYXMgZWxlbWVudHMsIGV2ZW4gdGhvdWdoIHRoZXkgZG9uJ3RcbiAgICAgIC8vIHNob3cgYW55dGhpbmcuXG4gICAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZVNwYW4oW2dyb3VwLm1jbGFzc10pO1xuICAgIH0gLy8gVXNlIGRlbGltaXRlci5zaXplZERlbGltIHRvIGdlbmVyYXRlIHRoZSBkZWxpbWl0ZXIuXG5cblxuICAgIHJldHVybiBkZWxpbWl0ZXIuc2l6ZWREZWxpbShncm91cC5kZWxpbSwgZ3JvdXAuc2l6ZSwgb3B0aW9ucywgZ3JvdXAubW9kZSwgW2dyb3VwLm1jbGFzc10pO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gW107XG5cbiAgICBpZiAoZ3JvdXAuZGVsaW0gIT09IFwiLlwiKSB7XG4gICAgICBjaGlsZHJlbi5wdXNoKG1ha2VUZXh0KGdyb3VwLmRlbGltLCBncm91cC5tb2RlKSk7XG4gICAgfVxuXG4gICAgdmFyIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1vXCIsIGNoaWxkcmVuKTtcblxuICAgIGlmIChncm91cC5tY2xhc3MgPT09IFwibW9wZW5cIiB8fCBncm91cC5tY2xhc3MgPT09IFwibWNsb3NlXCIpIHtcbiAgICAgIC8vIE9ubHkgc29tZSBvZiB0aGUgZGVsaW1zaXppbmcgZnVuY3Rpb25zIGFjdCBhcyBmZW5jZXMsIGFuZCB0aGV5XG4gICAgICAvLyByZXR1cm4gXCJtb3BlblwiIG9yIFwibWNsb3NlXCIgbWNsYXNzLlxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJmZW5jZVwiLCBcInRydWVcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEV4cGxpY2l0bHkgZGlzYWJsZSBmZW5jaW5nIGlmIGl0J3Mgbm90IGEgZmVuY2UsIHRvIG92ZXJyaWRlIHRoZVxuICAgICAgLy8gZGVmYXVsdHMuXG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcImZlbmNlXCIsIFwiZmFsc2VcIik7XG4gICAgfVxuXG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJzdHJldGNoeVwiLCBcInRydWVcIik7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJtaW5zaXplXCIsIGRlbGltaXRlci5zaXplVG9NYXhIZWlnaHRbZ3JvdXAuc2l6ZV0gKyBcImVtXCIpO1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKFwibWF4c2l6ZVwiLCBkZWxpbWl0ZXIuc2l6ZVRvTWF4SGVpZ2h0W2dyb3VwLnNpemVdICsgXCJlbVwiKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGFzc2VydFBhcnNlZChncm91cCkge1xuICBpZiAoIWdyb3VwLmJvZHkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJCdWc6IFRoZSBsZWZ0cmlnaHQgUGFyc2VOb2RlIHdhc24ndCBmdWxseSBwYXJzZWQuXCIpO1xuICB9XG59XG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJsZWZ0cmlnaHQtcmlnaHRcIixcbiAgbmFtZXM6IFtcIlxcXFxyaWdodFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxLFxuICAgIHByaW1pdGl2ZTogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKGNvbnRleHQsIGFyZ3MpIHtcbiAgICAvLyBcXGxlZnQgY2FzZSBiZWxvdyB0cmlnZ2VycyBwYXJzaW5nIG9mIFxccmlnaHQgaW5cbiAgICAvLyAgIGBjb25zdCByaWdodCA9IHBhcnNlci5wYXJzZUZ1bmN0aW9uKCk7YFxuICAgIC8vIHVzZXMgdGhpcyByZXR1cm4gdmFsdWUuXG4gICAgdmFyIGNvbG9yID0gY29udGV4dC5wYXJzZXIuZ3VsbGV0Lm1hY3Jvcy5nZXQoXCJcXFxcY3VycmVudEBjb2xvclwiKTtcblxuICAgIGlmIChjb2xvciAmJiB0eXBlb2YgY29sb3IgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlxcXFxjdXJyZW50QGNvbG9yIHNldCB0byBub24tc3RyaW5nIGluIFxcXFxyaWdodFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJsZWZ0cmlnaHQtcmlnaHRcIixcbiAgICAgIG1vZGU6IGNvbnRleHQucGFyc2VyLm1vZGUsXG4gICAgICBkZWxpbTogY2hlY2tEZWxpbWl0ZXIoYXJnc1swXSwgY29udGV4dCkudGV4dCxcbiAgICAgIGNvbG9yOiBjb2xvciAvLyB1bmRlZmluZWQgaWYgbm90IHNldCB2aWEgXFxjb2xvclxuXG4gICAgfTtcbiAgfVxufSk7XG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwibGVmdHJpZ2h0XCIsXG4gIG5hbWVzOiBbXCJcXFxcbGVmdFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxLFxuICAgIHByaW1pdGl2ZTogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKGNvbnRleHQsIGFyZ3MpIHtcbiAgICB2YXIgZGVsaW0gPSBjaGVja0RlbGltaXRlcihhcmdzWzBdLCBjb250ZXh0KTtcbiAgICB2YXIgcGFyc2VyID0gY29udGV4dC5wYXJzZXI7IC8vIFBhcnNlIG91dCB0aGUgaW1wbGljaXQgYm9keVxuXG4gICAgKytwYXJzZXIubGVmdHJpZ2h0RGVwdGg7IC8vIHBhcnNlRXhwcmVzc2lvbiBzdG9wcyBiZWZvcmUgJ1xcXFxyaWdodCdcblxuICAgIHZhciBib2R5ID0gcGFyc2VyLnBhcnNlRXhwcmVzc2lvbihmYWxzZSk7XG4gICAgLS1wYXJzZXIubGVmdHJpZ2h0RGVwdGg7IC8vIENoZWNrIHRoZSBuZXh0IHRva2VuXG5cbiAgICBwYXJzZXIuZXhwZWN0KFwiXFxcXHJpZ2h0XCIsIGZhbHNlKTtcbiAgICB2YXIgcmlnaHQgPSBhc3NlcnROb2RlVHlwZShwYXJzZXIucGFyc2VGdW5jdGlvbigpLCBcImxlZnRyaWdodC1yaWdodFwiKTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJsZWZ0cmlnaHRcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgYm9keTogYm9keSxcbiAgICAgIGxlZnQ6IGRlbGltLnRleHQsXG4gICAgICByaWdodDogcmlnaHQuZGVsaW0sXG4gICAgICByaWdodENvbG9yOiByaWdodC5jb2xvclxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIGFzc2VydFBhcnNlZChncm91cCk7IC8vIEJ1aWxkIHRoZSBpbm5lciBleHByZXNzaW9uXG5cbiAgICB2YXIgaW5uZXIgPSBidWlsZEV4cHJlc3Npb24oZ3JvdXAuYm9keSwgb3B0aW9ucywgdHJ1ZSwgW1wibW9wZW5cIiwgXCJtY2xvc2VcIl0pO1xuICAgIHZhciBpbm5lckhlaWdodCA9IDA7XG4gICAgdmFyIGlubmVyRGVwdGggPSAwO1xuICAgIHZhciBoYWRNaWRkbGUgPSBmYWxzZTsgLy8gQ2FsY3VsYXRlIGl0cyBoZWlnaHQgYW5kIGRlcHRoXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlubmVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBQcm9wZXJ0eSBgaXNNaWRkbGVgIG5vdCBkZWZpbmVkIG9uIGBzcGFuYC4gU2VlIGNvbW1lbnQgaW5cbiAgICAgIC8vIFwibWlkZGxlXCIncyBodG1sQnVpbGRlci5cbiAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgIGlmIChpbm5lcltpXS5pc01pZGRsZSkge1xuICAgICAgICBoYWRNaWRkbGUgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5uZXJIZWlnaHQgPSBNYXRoLm1heChpbm5lcltpXS5oZWlnaHQsIGlubmVySGVpZ2h0KTtcbiAgICAgICAgaW5uZXJEZXB0aCA9IE1hdGgubWF4KGlubmVyW2ldLmRlcHRoLCBpbm5lckRlcHRoKTtcbiAgICAgIH1cbiAgICB9IC8vIFRoZSBzaXplIG9mIGRlbGltaXRlcnMgaXMgdGhlIHNhbWUsIHJlZ2FyZGxlc3Mgb2Ygd2hhdCBzdHlsZSB3ZSBhcmVcbiAgICAvLyBpbi4gVGh1cywgdG8gY29ycmVjdGx5IGNhbGN1bGF0ZSB0aGUgc2l6ZSBvZiBkZWxpbWl0ZXIgd2UgbmVlZCBhcm91bmRcbiAgICAvLyBhIGdyb3VwLCB3ZSBzY2FsZSBkb3duIHRoZSBpbm5lciBzaXplIGJhc2VkIG9uIHRoZSBzaXplLlxuXG5cbiAgICBpbm5lckhlaWdodCAqPSBvcHRpb25zLnNpemVNdWx0aXBsaWVyO1xuICAgIGlubmVyRGVwdGggKj0gb3B0aW9ucy5zaXplTXVsdGlwbGllcjtcbiAgICB2YXIgbGVmdERlbGltO1xuXG4gICAgaWYgKGdyb3VwLmxlZnQgPT09IFwiLlwiKSB7XG4gICAgICAvLyBFbXB0eSBkZWxpbWl0ZXJzIGluIFxcbGVmdCBhbmQgXFxyaWdodCBtYWtlIG51bGwgZGVsaW1pdGVyIHNwYWNlcy5cbiAgICAgIGxlZnREZWxpbSA9IG1ha2VOdWxsRGVsaW1pdGVyKG9wdGlvbnMsIFtcIm1vcGVuXCJdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlLCB1c2UgbGVmdFJpZ2h0RGVsaW0gdG8gZ2VuZXJhdGUgdGhlIGNvcnJlY3Qgc2l6ZWRcbiAgICAgIC8vIGRlbGltaXRlci5cbiAgICAgIGxlZnREZWxpbSA9IGRlbGltaXRlci5sZWZ0UmlnaHREZWxpbShncm91cC5sZWZ0LCBpbm5lckhlaWdodCwgaW5uZXJEZXB0aCwgb3B0aW9ucywgZ3JvdXAubW9kZSwgW1wibW9wZW5cIl0pO1xuICAgIH0gLy8gQWRkIGl0IHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGV4cHJlc3Npb25cblxuXG4gICAgaW5uZXIudW5zaGlmdChsZWZ0RGVsaW0pOyAvLyBIYW5kbGUgbWlkZGxlIGRlbGltaXRlcnNcblxuICAgIGlmIChoYWRNaWRkbGUpIHtcbiAgICAgIGZvciAodmFyIF9pID0gMTsgX2kgPCBpbm5lci5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIG1pZGRsZURlbGltID0gaW5uZXJbX2ldOyAvLyBQcm9wZXJ0eSBgaXNNaWRkbGVgIG5vdCBkZWZpbmVkIG9uIGBzcGFuYC4gU2VlIGNvbW1lbnQgaW5cbiAgICAgICAgLy8gXCJtaWRkbGVcIidzIGh0bWxCdWlsZGVyLlxuICAgICAgICAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgICAgdmFyIGlzTWlkZGxlID0gbWlkZGxlRGVsaW0uaXNNaWRkbGU7XG5cbiAgICAgICAgaWYgKGlzTWlkZGxlKSB7XG4gICAgICAgICAgLy8gQXBwbHkgdGhlIG9wdGlvbnMgdGhhdCB3ZXJlIGFjdGl2ZSB3aGVuIFxcbWlkZGxlIHdhcyBjYWxsZWRcbiAgICAgICAgICBpbm5lcltfaV0gPSBkZWxpbWl0ZXIubGVmdFJpZ2h0RGVsaW0oaXNNaWRkbGUuZGVsaW0sIGlubmVySGVpZ2h0LCBpbm5lckRlcHRoLCBpc01pZGRsZS5vcHRpb25zLCBncm91cC5tb2RlLCBbXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmlnaHREZWxpbTsgLy8gU2FtZSBmb3IgdGhlIHJpZ2h0IGRlbGltaXRlciwgYnV0IHVzaW5nIGNvbG9yIHNwZWNpZmllZCBieSBcXGNvbG9yXG5cbiAgICBpZiAoZ3JvdXAucmlnaHQgPT09IFwiLlwiKSB7XG4gICAgICByaWdodERlbGltID0gbWFrZU51bGxEZWxpbWl0ZXIob3B0aW9ucywgW1wibWNsb3NlXCJdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNvbG9yT3B0aW9ucyA9IGdyb3VwLnJpZ2h0Q29sb3IgPyBvcHRpb25zLndpdGhDb2xvcihncm91cC5yaWdodENvbG9yKSA6IG9wdGlvbnM7XG4gICAgICByaWdodERlbGltID0gZGVsaW1pdGVyLmxlZnRSaWdodERlbGltKGdyb3VwLnJpZ2h0LCBpbm5lckhlaWdodCwgaW5uZXJEZXB0aCwgY29sb3JPcHRpb25zLCBncm91cC5tb2RlLCBbXCJtY2xvc2VcIl0pO1xuICAgIH0gLy8gQWRkIGl0IHRvIHRoZSBlbmQgb2YgdGhlIGV4cHJlc3Npb24uXG5cblxuICAgIGlubmVyLnB1c2gocmlnaHREZWxpbSk7XG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1pbm5lclwiXSwgaW5uZXIsIG9wdGlvbnMpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgYXNzZXJ0UGFyc2VkKGdyb3VwKTtcbiAgICB2YXIgaW5uZXIgPSBidWlsZE1hdGhNTF9idWlsZEV4cHJlc3Npb24oZ3JvdXAuYm9keSwgb3B0aW9ucyk7XG5cbiAgICBpZiAoZ3JvdXAubGVmdCAhPT0gXCIuXCIpIHtcbiAgICAgIHZhciBsZWZ0Tm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibW9cIiwgW21ha2VUZXh0KGdyb3VwLmxlZnQsIGdyb3VwLm1vZGUpXSk7XG4gICAgICBsZWZ0Tm9kZS5zZXRBdHRyaWJ1dGUoXCJmZW5jZVwiLCBcInRydWVcIik7XG4gICAgICBpbm5lci51bnNoaWZ0KGxlZnROb2RlKTtcbiAgICB9XG5cbiAgICBpZiAoZ3JvdXAucmlnaHQgIT09IFwiLlwiKSB7XG4gICAgICB2YXIgcmlnaHROb2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtb1wiLCBbbWFrZVRleHQoZ3JvdXAucmlnaHQsIGdyb3VwLm1vZGUpXSk7XG4gICAgICByaWdodE5vZGUuc2V0QXR0cmlidXRlKFwiZmVuY2VcIiwgXCJ0cnVlXCIpO1xuXG4gICAgICBpZiAoZ3JvdXAucmlnaHRDb2xvcikge1xuICAgICAgICByaWdodE5vZGUuc2V0QXR0cmlidXRlKFwibWF0aGNvbG9yXCIsIGdyb3VwLnJpZ2h0Q29sb3IpO1xuICAgICAgfVxuXG4gICAgICBpbm5lci5wdXNoKHJpZ2h0Tm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1ha2VSb3coaW5uZXIpO1xuICB9XG59KTtcbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJtaWRkbGVcIixcbiAgbmFtZXM6IFtcIlxcXFxtaWRkbGVcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMSxcbiAgICBwcmltaXRpdmU6IHRydWVcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihjb250ZXh0LCBhcmdzKSB7XG4gICAgdmFyIGRlbGltID0gY2hlY2tEZWxpbWl0ZXIoYXJnc1swXSwgY29udGV4dCk7XG5cbiAgICBpZiAoIWNvbnRleHQucGFyc2VyLmxlZnRyaWdodERlcHRoKSB7XG4gICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJcXFxcbWlkZGxlIHdpdGhvdXQgcHJlY2VkaW5nIFxcXFxsZWZ0XCIsIGRlbGltKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJtaWRkbGVcIixcbiAgICAgIG1vZGU6IGNvbnRleHQucGFyc2VyLm1vZGUsXG4gICAgICBkZWxpbTogZGVsaW0udGV4dFxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBtaWRkbGVEZWxpbTtcblxuICAgIGlmIChncm91cC5kZWxpbSA9PT0gXCIuXCIpIHtcbiAgICAgIG1pZGRsZURlbGltID0gbWFrZU51bGxEZWxpbWl0ZXIob3B0aW9ucywgW10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBtaWRkbGVEZWxpbSA9IGRlbGltaXRlci5zaXplZERlbGltKGdyb3VwLmRlbGltLCAxLCBvcHRpb25zLCBncm91cC5tb2RlLCBbXSk7XG4gICAgICB2YXIgaXNNaWRkbGUgPSB7XG4gICAgICAgIGRlbGltOiBncm91cC5kZWxpbSxcbiAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgfTsgLy8gUHJvcGVydHkgYGlzTWlkZGxlYCBub3QgZGVmaW5lZCBvbiBgc3BhbmAuIEl0IGlzIG9ubHkgdXNlZCBpblxuICAgICAgLy8gdGhpcyBmaWxlIGFib3ZlLlxuICAgICAgLy8gVE9ETzogRml4IHRoaXMgdmlvbGF0aW9uIG9mIHRoZSBgc3BhbmAgdHlwZSBhbmQgcG9zc2libHkgcmVuYW1lXG4gICAgICAvLyB0aGluZ3Mgc2luY2UgYGlzTWlkZGxlYCBzb3VuZHMgbGlrZSBhIGJvb2xlYW4sIGJ1dCBpcyBhIHN0cnVjdC5cbiAgICAgIC8vICRGbG93Rml4TWVcblxuICAgICAgbWlkZGxlRGVsaW0uaXNNaWRkbGUgPSBpc01pZGRsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWlkZGxlRGVsaW07XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICAvLyBBIEZpcmVmb3ggXFxtaWRkbGUgd2lsbCBzdHJlY2ggYSBjaGFyYWN0ZXIgdmVydGljYWxseSBvbmx5IGlmIGl0XG4gICAgLy8gaXMgaW4gdGhlIGZlbmNlIHBhcnQgb2YgdGhlIG9wZXJhdG9yIGRpY3Rpb25hcnkgYXQ6XG4gICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL01hdGhNTDMvYXBwZW5kaXhjLmh0bWwuXG4gICAgLy8gU28gd2UgbmVlZCB0byBhdm9pZCBVKzIyMjMgYW5kIHVzZSBwbGFpbiBcInxcIiBpbnN0ZWFkLlxuICAgIHZhciB0ZXh0Tm9kZSA9IGdyb3VwLmRlbGltID09PSBcIlxcXFx2ZXJ0XCIgfHwgZ3JvdXAuZGVsaW0gPT09IFwifFwiID8gbWFrZVRleHQoXCJ8XCIsIFwidGV4dFwiKSA6IG1ha2VUZXh0KGdyb3VwLmRlbGltLCBncm91cC5tb2RlKTtcbiAgICB2YXIgbWlkZGxlTm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibW9cIiwgW3RleHROb2RlXSk7XG4gICAgbWlkZGxlTm9kZS5zZXRBdHRyaWJ1dGUoXCJmZW5jZVwiLCBcInRydWVcIik7IC8vIE1hdGhNTCBnaXZlcyA1LzE4ZW0gc3BhY2luZyB0byBlYWNoIDxtbz4gZWxlbWVudC5cbiAgICAvLyBcXG1pZGRsZSBzaG91bGQgZ2V0IGRlbGltaXRlciBzcGFjaW5nIGluc3RlYWQuXG5cbiAgICBtaWRkbGVOb2RlLnNldEF0dHJpYnV0ZShcImxzcGFjZVwiLCBcIjAuMDVlbVwiKTtcbiAgICBtaWRkbGVOb2RlLnNldEF0dHJpYnV0ZShcInJzcGFjZVwiLCBcIjAuMDVlbVwiKTtcbiAgICByZXR1cm4gbWlkZGxlTm9kZTtcbiAgfVxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL2VuY2xvc2UuanNcblxuXG5cblxuXG5cblxuXG5cblxuXG5cbnZhciBlbmNsb3NlX2h0bWxCdWlsZGVyID0gZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgLy8gXFxjYW5jZWwsIFxcYmNhbmNlbCwgXFx4Y2FuY2VsLCBcXHNvdXQsIFxcZmJveCwgXFxjb2xvcmJveCwgXFxmY29sb3Jib3gsIFxccGhhc2VcbiAgLy8gU29tZSBncm91cHMgY2FuIHJldHVybiBkb2N1bWVudCBmcmFnbWVudHMuICBIYW5kbGUgdGhvc2UgYnkgd3JhcHBpbmdcbiAgLy8gdGhlbSBpbiBhIHNwYW4uXG4gIHZhciBpbm5lciA9IGJ1aWxkQ29tbW9uLndyYXBGcmFnbWVudChidWlsZEdyb3VwKGdyb3VwLmJvZHksIG9wdGlvbnMpLCBvcHRpb25zKTtcbiAgdmFyIGxhYmVsID0gZ3JvdXAubGFiZWwuc3Vic3RyKDEpO1xuICB2YXIgc2NhbGUgPSBvcHRpb25zLnNpemVNdWx0aXBsaWVyO1xuICB2YXIgaW1nO1xuICB2YXIgaW1nU2hpZnQgPSAwOyAvLyBJbiB0aGUgTGFUZVggY2FuY2VsIHBhY2thZ2UsIGxpbmUgZ2VvbWV0cnkgaXMgc2xpZ2h0bHkgZGlmZmVyZW50XG4gIC8vIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBzdWJqZWN0IGlzIHdpZGVyIHRoYW4gaXQgaXMgdGFsbCwgb3IgdmljZSB2ZXJzYS5cbiAgLy8gV2UgZG9uJ3Qga25vdyB0aGUgd2lkdGggb2YgYSBncm91cCwgc28gYXMgYSBwcm94eSwgd2UgdGVzdCBpZlxuICAvLyB0aGUgc3ViamVjdCBpcyBhIHNpbmdsZSBjaGFyYWN0ZXIuIFRoaXMgY2FwdHVyZXMgbW9zdCBvZiB0aGVcbiAgLy8gc3ViamVjdHMgdGhhdCBzaG91bGQgZ2V0IHRoZSBcInRhbGxcIiB0cmVhdG1lbnQuXG5cbiAgdmFyIGlzU2luZ2xlQ2hhciA9IHV0aWxzLmlzQ2hhcmFjdGVyQm94KGdyb3VwLmJvZHkpO1xuXG4gIGlmIChsYWJlbCA9PT0gXCJzb3V0XCIpIHtcbiAgICBpbWcgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJzdHJldGNoeVwiLCBcInNvdXRcIl0pO1xuICAgIGltZy5oZWlnaHQgPSBvcHRpb25zLmZvbnRNZXRyaWNzKCkuZGVmYXVsdFJ1bGVUaGlja25lc3MgLyBzY2FsZTtcbiAgICBpbWdTaGlmdCA9IC0wLjUgKiBvcHRpb25zLmZvbnRNZXRyaWNzKCkueEhlaWdodDtcbiAgfSBlbHNlIGlmIChsYWJlbCA9PT0gXCJwaGFzZVwiKSB7XG4gICAgLy8gU2V0IGEgY291cGxlIG9mIGRpbWVuc2lvbnMgZnJvbSB0aGUgc3RlaW5tZXR6IHBhY2thZ2UuXG4gICAgdmFyIGxpbmVXZWlnaHQgPSBjYWxjdWxhdGVTaXplKHtcbiAgICAgIG51bWJlcjogMC42LFxuICAgICAgdW5pdDogXCJwdFwiXG4gICAgfSwgb3B0aW9ucyk7XG4gICAgdmFyIGNsZWFyYW5jZSA9IGNhbGN1bGF0ZVNpemUoe1xuICAgICAgbnVtYmVyOiAwLjM1LFxuICAgICAgdW5pdDogXCJleFwiXG4gICAgfSwgb3B0aW9ucyk7IC8vIFByZXZlbnQgc2l6ZSBjaGFuZ2VzIGxpa2UgXFxIdWdlIGZyb20gYWZmZWN0aW5nIGxpbmUgdGhpY2tuZXNzXG5cbiAgICB2YXIgbmV3T3B0aW9ucyA9IG9wdGlvbnMuaGF2aW5nQmFzZVNpemluZygpO1xuICAgIHNjYWxlID0gc2NhbGUgLyBuZXdPcHRpb25zLnNpemVNdWx0aXBsaWVyO1xuICAgIHZhciBhbmdsZUhlaWdodCA9IGlubmVyLmhlaWdodCArIGlubmVyLmRlcHRoICsgbGluZVdlaWdodCArIGNsZWFyYW5jZTsgLy8gUmVzZXJ2ZSBhIGxlZnQgcGFkIGZvciB0aGUgYW5nbGUuXG5cbiAgICBpbm5lci5zdHlsZS5wYWRkaW5nTGVmdCA9IGFuZ2xlSGVpZ2h0IC8gMiArIGxpbmVXZWlnaHQgKyBcImVtXCI7IC8vIENyZWF0ZSBhbiBTVkdcblxuICAgIHZhciB2aWV3Qm94SGVpZ2h0ID0gTWF0aC5mbG9vcigxMDAwICogYW5nbGVIZWlnaHQgKiBzY2FsZSk7XG4gICAgdmFyIHBhdGggPSBwaGFzZVBhdGgodmlld0JveEhlaWdodCk7XG4gICAgdmFyIHN2Z05vZGUgPSBuZXcgU3ZnTm9kZShbbmV3IFBhdGhOb2RlKFwicGhhc2VcIiwgcGF0aCldLCB7XG4gICAgICBcIndpZHRoXCI6IFwiNDAwZW1cIixcbiAgICAgIFwiaGVpZ2h0XCI6IHZpZXdCb3hIZWlnaHQgLyAxMDAwICsgXCJlbVwiLFxuICAgICAgXCJ2aWV3Qm94XCI6IFwiMCAwIDQwMDAwMCBcIiArIHZpZXdCb3hIZWlnaHQsXG4gICAgICBcInByZXNlcnZlQXNwZWN0UmF0aW9cIjogXCJ4TWluWU1pbiBzbGljZVwiXG4gICAgfSk7IC8vIFdyYXAgaXQgaW4gYSBzcGFuIHdpdGggb3ZlcmZsb3c6IGhpZGRlbi5cblxuICAgIGltZyA9IGJ1aWxkQ29tbW9uLm1ha2VTdmdTcGFuKFtcImhpZGUtdGFpbFwiXSwgW3N2Z05vZGVdLCBvcHRpb25zKTtcbiAgICBpbWcuc3R5bGUuaGVpZ2h0ID0gYW5nbGVIZWlnaHQgKyBcImVtXCI7XG4gICAgaW1nU2hpZnQgPSBpbm5lci5kZXB0aCArIGxpbmVXZWlnaHQgKyBjbGVhcmFuY2U7XG4gIH0gZWxzZSB7XG4gICAgLy8gQWRkIGhvcml6b250YWwgcGFkZGluZ1xuICAgIGlmICgvY2FuY2VsLy50ZXN0KGxhYmVsKSkge1xuICAgICAgaWYgKCFpc1NpbmdsZUNoYXIpIHtcbiAgICAgICAgaW5uZXIuY2xhc3Nlcy5wdXNoKFwiY2FuY2VsLXBhZFwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxhYmVsID09PSBcImFuZ2xcIikge1xuICAgICAgaW5uZXIuY2xhc3Nlcy5wdXNoKFwiYW5nbHBhZFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5uZXIuY2xhc3Nlcy5wdXNoKFwiYm94cGFkXCIpO1xuICAgIH0gLy8gQWRkIHZlcnRpY2FsIHBhZGRpbmdcblxuXG4gICAgdmFyIHRvcFBhZCA9IDA7XG4gICAgdmFyIGJvdHRvbVBhZCA9IDA7XG4gICAgdmFyIHJ1bGVUaGlja25lc3MgPSAwOyAvLyByZWY6IGNhbmNlbCBwYWNrYWdlOiBcXGFkdmFuY2VcXHRvdGFsaGVpZ2h0MlxccEAgJSBcIisyXCJcblxuICAgIGlmICgvYm94Ly50ZXN0KGxhYmVsKSkge1xuICAgICAgcnVsZVRoaWNrbmVzcyA9IE1hdGgubWF4KG9wdGlvbnMuZm9udE1ldHJpY3MoKS5mYm94cnVsZSwgLy8gZGVmYXVsdFxuICAgICAgb3B0aW9ucy5taW5SdWxlVGhpY2tuZXNzIC8vIFVzZXIgb3ZlcnJpZGUuXG4gICAgICApO1xuICAgICAgdG9wUGFkID0gb3B0aW9ucy5mb250TWV0cmljcygpLmZib3hzZXAgKyAobGFiZWwgPT09IFwiY29sb3Jib3hcIiA/IDAgOiBydWxlVGhpY2tuZXNzKTtcbiAgICAgIGJvdHRvbVBhZCA9IHRvcFBhZDtcbiAgICB9IGVsc2UgaWYgKGxhYmVsID09PSBcImFuZ2xcIikge1xuICAgICAgcnVsZVRoaWNrbmVzcyA9IE1hdGgubWF4KG9wdGlvbnMuZm9udE1ldHJpY3MoKS5kZWZhdWx0UnVsZVRoaWNrbmVzcywgb3B0aW9ucy5taW5SdWxlVGhpY2tuZXNzKTtcbiAgICAgIHRvcFBhZCA9IDQgKiBydWxlVGhpY2tuZXNzOyAvLyBnYXAgPSAzIMOXIGxpbmUsIHBsdXMgdGhlIGxpbmUgaXRzZWxmLlxuXG4gICAgICBib3R0b21QYWQgPSBNYXRoLm1heCgwLCAwLjI1IC0gaW5uZXIuZGVwdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b3BQYWQgPSBpc1NpbmdsZUNoYXIgPyAwLjIgOiAwO1xuICAgICAgYm90dG9tUGFkID0gdG9wUGFkO1xuICAgIH1cblxuICAgIGltZyA9IHN0cmV0Y2h5LmVuY2xvc2VTcGFuKGlubmVyLCBsYWJlbCwgdG9wUGFkLCBib3R0b21QYWQsIG9wdGlvbnMpO1xuXG4gICAgaWYgKC9mYm94fGJveGVkfGZjb2xvcmJveC8udGVzdChsYWJlbCkpIHtcbiAgICAgIGltZy5zdHlsZS5ib3JkZXJTdHlsZSA9IFwic29saWRcIjtcbiAgICAgIGltZy5zdHlsZS5ib3JkZXJXaWR0aCA9IHJ1bGVUaGlja25lc3MgKyBcImVtXCI7XG4gICAgfSBlbHNlIGlmIChsYWJlbCA9PT0gXCJhbmdsXCIgJiYgcnVsZVRoaWNrbmVzcyAhPT0gMC4wNDkpIHtcbiAgICAgIGltZy5zdHlsZS5ib3JkZXJUb3BXaWR0aCA9IHJ1bGVUaGlja25lc3MgKyBcImVtXCI7XG4gICAgICBpbWcuc3R5bGUuYm9yZGVyUmlnaHRXaWR0aCA9IHJ1bGVUaGlja25lc3MgKyBcImVtXCI7XG4gICAgfVxuXG4gICAgaW1nU2hpZnQgPSBpbm5lci5kZXB0aCArIGJvdHRvbVBhZDtcblxuICAgIGlmIChncm91cC5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICAgIGltZy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBncm91cC5iYWNrZ3JvdW5kQ29sb3I7XG5cbiAgICAgIGlmIChncm91cC5ib3JkZXJDb2xvcikge1xuICAgICAgICBpbWcuc3R5bGUuYm9yZGVyQ29sb3IgPSBncm91cC5ib3JkZXJDb2xvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgdmxpc3Q7XG5cbiAgaWYgKGdyb3VwLmJhY2tncm91bmRDb2xvcikge1xuICAgIHZsaXN0ID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgIHBvc2l0aW9uVHlwZTogXCJpbmRpdmlkdWFsU2hpZnRcIixcbiAgICAgIGNoaWxkcmVuOiBbLy8gUHV0IHRoZSBjb2xvciBiYWNrZ3JvdW5kIGJlaGluZCBpbm5lcjtcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGltZyxcbiAgICAgICAgc2hpZnQ6IGltZ1NoaWZ0XG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBpbm5lcixcbiAgICAgICAgc2hpZnQ6IDBcbiAgICAgIH1dXG4gICAgfSwgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNsYXNzZXMgPSAvY2FuY2VsfHBoYXNlLy50ZXN0KGxhYmVsKSA/IFtcInN2Zy1hbGlnblwiXSA6IFtdO1xuICAgIHZsaXN0ID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgIHBvc2l0aW9uVHlwZTogXCJpbmRpdmlkdWFsU2hpZnRcIixcbiAgICAgIGNoaWxkcmVuOiBbLy8gV3JpdGUgdGhlIFxcY2FuY2VsIHN0cm9rZSBvbiB0b3Agb2YgaW5uZXIuXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBpbm5lcixcbiAgICAgICAgc2hpZnQ6IDBcbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGltZyxcbiAgICAgICAgc2hpZnQ6IGltZ1NoaWZ0LFxuICAgICAgICB3cmFwcGVyQ2xhc3NlczogY2xhc3Nlc1xuICAgICAgfV1cbiAgICB9LCBvcHRpb25zKTtcbiAgfVxuXG4gIGlmICgvY2FuY2VsLy50ZXN0KGxhYmVsKSkge1xuICAgIC8vIFRoZSBjYW5jZWwgcGFja2FnZSBkb2N1bWVudGF0aW9uIHNheXMgdGhhdCBjYW5jZWwgbGluZXMgYWRkIHRoZWlyIGhlaWdodFxuICAgIC8vIHRvIHRoZSBleHByZXNzaW9uLCBidXQgdGVzdHMgc2hvdyB0aGF0IGlzbid0IGhvdyBpdCBhY3R1YWxseSB3b3Jrcy5cbiAgICB2bGlzdC5oZWlnaHQgPSBpbm5lci5oZWlnaHQ7XG4gICAgdmxpc3QuZGVwdGggPSBpbm5lci5kZXB0aDtcbiAgfVxuXG4gIGlmICgvY2FuY2VsLy50ZXN0KGxhYmVsKSAmJiAhaXNTaW5nbGVDaGFyKSB7XG4gICAgLy8gY2FuY2VsIGRvZXMgbm90IGNyZWF0ZSBob3JpeiBzcGFjZSBmb3IgaXRzIGxpbmUgZXh0ZW5zaW9uLlxuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtb3JkXCIsIFwiY2FuY2VsLWxhcFwiXSwgW3ZsaXN0XSwgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcmRcIl0sIFt2bGlzdF0sIG9wdGlvbnMpO1xuICB9XG59O1xuXG52YXIgZW5jbG9zZV9tYXRobWxCdWlsZGVyID0gZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICB2YXIgZmJveHNlcCA9IDA7XG4gIHZhciBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoZ3JvdXAubGFiZWwuaW5kZXhPZihcImNvbG9yYm94XCIpID4gLTEgPyBcIm1wYWRkZWRcIiA6IFwibWVuY2xvc2VcIiwgW2J1aWxkTWF0aE1MX2J1aWxkR3JvdXAoZ3JvdXAuYm9keSwgb3B0aW9ucyldKTtcblxuICBzd2l0Y2ggKGdyb3VwLmxhYmVsKSB7XG4gICAgY2FzZSBcIlxcXFxjYW5jZWxcIjpcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwibm90YXRpb25cIiwgXCJ1cGRpYWdvbmFsc3RyaWtlXCIpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFwiXFxcXGJjYW5jZWxcIjpcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwibm90YXRpb25cIiwgXCJkb3duZGlhZ29uYWxzdHJpa2VcIik7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgXCJcXFxccGhhc2VcIjpcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwibm90YXRpb25cIiwgXCJwaGFzb3JhbmdsZVwiKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBcIlxcXFxzb3V0XCI6XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcIm5vdGF0aW9uXCIsIFwiaG9yaXpvbnRhbHN0cmlrZVwiKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBcIlxcXFxmYm94XCI6XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcIm5vdGF0aW9uXCIsIFwiYm94XCIpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFwiXFxcXGFuZ2xcIjpcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwibm90YXRpb25cIiwgXCJhY3R1YXJpYWxcIik7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgXCJcXFxcZmNvbG9yYm94XCI6XG4gICAgY2FzZSBcIlxcXFxjb2xvcmJveFwiOlxuICAgICAgLy8gPG1lbmNsb3NlPiBkb2Vzbid0IGhhdmUgYSBnb29kIG5vdGF0aW9uIG9wdGlvbi4gU28gdXNlIDxtcGFkZGVkPlxuICAgICAgLy8gaW5zdGVhZC4gU2V0IHNvbWUgYXR0cmlidXRlcyB0aGF0IGNvbWUgaW5jbHVkZWQgd2l0aCA8bWVuY2xvc2U+LlxuICAgICAgZmJveHNlcCA9IG9wdGlvbnMuZm9udE1ldHJpY3MoKS5mYm94c2VwICogb3B0aW9ucy5mb250TWV0cmljcygpLnB0UGVyRW07XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIFwiK1wiICsgMiAqIGZib3hzZXAgKyBcInB0XCIpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgXCIrXCIgKyAyICogZmJveHNlcCArIFwicHRcIik7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcImxzcGFjZVwiLCBmYm94c2VwICsgXCJwdFwiKTsgLy9cblxuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJ2b2Zmc2V0XCIsIGZib3hzZXAgKyBcInB0XCIpO1xuXG4gICAgICBpZiAoZ3JvdXAubGFiZWwgPT09IFwiXFxcXGZjb2xvcmJveFwiKSB7XG4gICAgICAgIHZhciB0aGsgPSBNYXRoLm1heChvcHRpb25zLmZvbnRNZXRyaWNzKCkuZmJveHJ1bGUsIC8vIGRlZmF1bHRcbiAgICAgICAgb3B0aW9ucy5taW5SdWxlVGhpY2tuZXNzIC8vIHVzZXIgb3ZlcnJpZGVcbiAgICAgICAgKTtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBcImJvcmRlcjogXCIgKyB0aGsgKyBcImVtIHNvbGlkIFwiICsgU3RyaW5nKGdyb3VwLmJvcmRlckNvbG9yKSk7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBcIlxcXFx4Y2FuY2VsXCI6XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcIm5vdGF0aW9uXCIsIFwidXBkaWFnb25hbHN0cmlrZSBkb3duZGlhZ29uYWxzdHJpa2VcIik7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGlmIChncm91cC5iYWNrZ3JvdW5kQ29sb3IpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShcIm1hdGhiYWNrZ3JvdW5kXCIsIGdyb3VwLmJhY2tncm91bmRDb2xvcik7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn07XG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJlbmNsb3NlXCIsXG4gIG5hbWVzOiBbXCJcXFxcY29sb3Jib3hcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMixcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlLFxuICAgIGFyZ1R5cGVzOiBbXCJjb2xvclwiLCBcInRleHRcIl1cbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzLCBvcHRBcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyLFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWYuZnVuY05hbWU7XG4gICAgdmFyIGNvbG9yID0gYXNzZXJ0Tm9kZVR5cGUoYXJnc1swXSwgXCJjb2xvci10b2tlblwiKS5jb2xvcjtcbiAgICB2YXIgYm9keSA9IGFyZ3NbMV07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiZW5jbG9zZVwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBsYWJlbDogZnVuY05hbWUsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yLFxuICAgICAgYm9keTogYm9keVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBlbmNsb3NlX2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBlbmNsb3NlX21hdGhtbEJ1aWxkZXJcbn0pO1xuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImVuY2xvc2VcIixcbiAgbmFtZXM6IFtcIlxcXFxmY29sb3Jib3hcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMyxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlLFxuICAgIGFyZ1R5cGVzOiBbXCJjb2xvclwiLCBcImNvbG9yXCIsIFwidGV4dFwiXVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYyLCBhcmdzLCBvcHRBcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYyLnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmMi5mdW5jTmFtZTtcbiAgICB2YXIgYm9yZGVyQ29sb3IgPSBhc3NlcnROb2RlVHlwZShhcmdzWzBdLCBcImNvbG9yLXRva2VuXCIpLmNvbG9yO1xuICAgIHZhciBiYWNrZ3JvdW5kQ29sb3IgPSBhc3NlcnROb2RlVHlwZShhcmdzWzFdLCBcImNvbG9yLXRva2VuXCIpLmNvbG9yO1xuICAgIHZhciBib2R5ID0gYXJnc1syXTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJlbmNsb3NlXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGxhYmVsOiBmdW5jTmFtZSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yLFxuICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yLFxuICAgICAgYm9keTogYm9keVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBlbmNsb3NlX2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBlbmNsb3NlX21hdGhtbEJ1aWxkZXJcbn0pO1xuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImVuY2xvc2VcIixcbiAgbmFtZXM6IFtcIlxcXFxmYm94XCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgYXJnVHlwZXM6IFtcImhib3hcIl0sXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYzLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYzLnBhcnNlcjtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJlbmNsb3NlXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGxhYmVsOiBcIlxcXFxmYm94XCIsXG4gICAgICBib2R5OiBhcmdzWzBdXG4gICAgfTtcbiAgfVxufSk7XG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiZW5jbG9zZVwiLFxuICBuYW1lczogW1wiXFxcXGNhbmNlbFwiLCBcIlxcXFxiY2FuY2VsXCIsIFwiXFxcXHhjYW5jZWxcIiwgXCJcXFxcc291dFwiLCBcIlxcXFxwaGFzZVwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZjQsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZjQucGFyc2VyLFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWY0LmZ1bmNOYW1lO1xuICAgIHZhciBib2R5ID0gYXJnc1swXTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJlbmNsb3NlXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGxhYmVsOiBmdW5jTmFtZSxcbiAgICAgIGJvZHk6IGJvZHlcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZW5jbG9zZV9odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogZW5jbG9zZV9tYXRobWxCdWlsZGVyXG59KTtcbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJlbmNsb3NlXCIsXG4gIG5hbWVzOiBbXCJcXFxcYW5nbFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxLFxuICAgIGFyZ1R5cGVzOiBbXCJoYm94XCJdLFxuICAgIGFsbG93ZWRJblRleHQ6IGZhbHNlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZjUsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZjUucGFyc2VyO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImVuY2xvc2VcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgbGFiZWw6IFwiXFxcXGFuZ2xcIixcbiAgICAgIGJvZHk6IGFyZ3NbMF1cbiAgICB9O1xuICB9XG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9kZWZpbmVFbnZpcm9ubWVudC5qc1xuXG5cbi8qKlxuICogQWxsIHJlZ2lzdGVyZWQgZW52aXJvbm1lbnRzLlxuICogYGVudmlyb25tZW50cy5qc2AgZXhwb3J0cyB0aGlzIHNhbWUgZGljdGlvbmFyeSBhZ2FpbiBhbmQgbWFrZXMgaXQgcHVibGljLlxuICogYFBhcnNlci5qc2AgcmVxdWlyZXMgdGhpcyBkaWN0aW9uYXJ5IHZpYSBgZW52aXJvbm1lbnRzLmpzYC5cbiAqL1xudmFyIF9lbnZpcm9ubWVudHMgPSB7fTtcbmZ1bmN0aW9uIGRlZmluZUVudmlyb25tZW50KF9yZWYpIHtcbiAgdmFyIHR5cGUgPSBfcmVmLnR5cGUsXG4gICAgICBuYW1lcyA9IF9yZWYubmFtZXMsXG4gICAgICBwcm9wcyA9IF9yZWYucHJvcHMsXG4gICAgICBoYW5kbGVyID0gX3JlZi5oYW5kbGVyLFxuICAgICAgaHRtbEJ1aWxkZXIgPSBfcmVmLmh0bWxCdWlsZGVyLFxuICAgICAgbWF0aG1sQnVpbGRlciA9IF9yZWYubWF0aG1sQnVpbGRlcjtcbiAgLy8gU2V0IGRlZmF1bHQgdmFsdWVzIG9mIGVudmlyb25tZW50cy5cbiAgdmFyIGRhdGEgPSB7XG4gICAgdHlwZTogdHlwZSxcbiAgICBudW1BcmdzOiBwcm9wcy5udW1BcmdzIHx8IDAsXG4gICAgYWxsb3dlZEluVGV4dDogZmFsc2UsXG4gICAgbnVtT3B0aW9uYWxBcmdzOiAwLFxuICAgIGhhbmRsZXI6IGhhbmRsZXJcbiAgfTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gVE9ETzogVGhlIHZhbHVlIHR5cGUgb2YgX2Vudmlyb25tZW50cyBzaG91bGQgYmUgYSB0eXBlIHVuaW9uIG9mIGFsbFxuICAgIC8vIHBvc3NpYmxlIGBFbnZTcGVjPD5gIHBvc3NpYmlsaXRpZXMgaW5zdGVhZCBvZiBgRW52U3BlYzwqPmAsIHdoaWNoIGlzXG4gICAgLy8gYW4gZXhpc3RlbnRpYWwgdHlwZS5cbiAgICBfZW52aXJvbm1lbnRzW25hbWVzW2ldXSA9IGRhdGE7XG4gIH1cblxuICBpZiAoaHRtbEJ1aWxkZXIpIHtcbiAgICBfaHRtbEdyb3VwQnVpbGRlcnNbdHlwZV0gPSBodG1sQnVpbGRlcjtcbiAgfVxuXG4gIGlmIChtYXRobWxCdWlsZGVyKSB7XG4gICAgX21hdGhtbEdyb3VwQnVpbGRlcnNbdHlwZV0gPSBtYXRobWxCdWlsZGVyO1xuICB9XG59XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZW52aXJvbm1lbnRzL2FycmF5LmpzXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuLy8gSGVscGVyIGZ1bmN0aW9uc1xuZnVuY3Rpb24gZ2V0SExpbmVzKHBhcnNlcikge1xuICAvLyBSZXR1cm4gYW4gYXJyYXkuIFRoZSBhcnJheSBsZW5ndGggPSBudW1iZXIgb2YgaGxpbmVzLlxuICAvLyBFYWNoIGVsZW1lbnQgaW4gdGhlIGFycmF5IHRlbGxzIGlmIHRoZSBsaW5lIGlzIGRhc2hlZC5cbiAgdmFyIGhsaW5lSW5mbyA9IFtdO1xuICBwYXJzZXIuY29uc3VtZVNwYWNlcygpO1xuICB2YXIgbnh0ID0gcGFyc2VyLmZldGNoKCkudGV4dDtcblxuICB3aGlsZSAobnh0ID09PSBcIlxcXFxobGluZVwiIHx8IG54dCA9PT0gXCJcXFxcaGRhc2hsaW5lXCIpIHtcbiAgICBwYXJzZXIuY29uc3VtZSgpO1xuICAgIGhsaW5lSW5mby5wdXNoKG54dCA9PT0gXCJcXFxcaGRhc2hsaW5lXCIpO1xuICAgIHBhcnNlci5jb25zdW1lU3BhY2VzKCk7XG4gICAgbnh0ID0gcGFyc2VyLmZldGNoKCkudGV4dDtcbiAgfVxuXG4gIHJldHVybiBobGluZUluZm87XG59XG5cbnZhciB2YWxpZGF0ZUFtc0Vudmlyb25tZW50Q29udGV4dCA9IGZ1bmN0aW9uIHZhbGlkYXRlQW1zRW52aXJvbm1lbnRDb250ZXh0KGNvbnRleHQpIHtcbiAgdmFyIHNldHRpbmdzID0gY29udGV4dC5wYXJzZXIuc2V0dGluZ3M7XG5cbiAgaWYgKCFzZXR0aW5ncy5kaXNwbGF5TW9kZSkge1xuICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIntcIiArIGNvbnRleHQuZW52TmFtZSArIFwifSBjYW4gYmUgdXNlZCBvbmx5IGluXCIgKyBcIiBkaXNwbGF5IG1vZGUuXCIpO1xuICB9XG59O1xuLyoqXG4gKiBQYXJzZSB0aGUgYm9keSBvZiB0aGUgZW52aXJvbm1lbnQsIHdpdGggcm93cyBkZWxpbWl0ZWQgYnkgXFxcXCBhbmRcbiAqIGNvbHVtbnMgZGVsaW1pdGVkIGJ5ICYsIGFuZCBjcmVhdGUgYSBuZXN0ZWQgbGlzdCBpbiByb3ctbWFqb3Igb3JkZXJcbiAqIHdpdGggb25lIGdyb3VwIHBlciBjZWxsLiAgSWYgZ2l2ZW4gYW4gb3B0aW9uYWwgYXJndW1lbnQgc3R5bGVcbiAqIChcInRleHRcIiwgXCJkaXNwbGF5XCIsIGV0Yy4pLCB0aGVuIGVhY2ggY2VsbCBpcyBjYXN0IGludG8gdGhhdCBzdHlsZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlQXJyYXkocGFyc2VyLCBfcmVmLCBzdHlsZSkge1xuICB2YXIgaHNraXBCZWZvcmVBbmRBZnRlciA9IF9yZWYuaHNraXBCZWZvcmVBbmRBZnRlcixcbiAgICAgIGFkZEpvdCA9IF9yZWYuYWRkSm90LFxuICAgICAgY29scyA9IF9yZWYuY29scyxcbiAgICAgIGFycmF5c3RyZXRjaCA9IF9yZWYuYXJyYXlzdHJldGNoLFxuICAgICAgY29sU2VwYXJhdGlvblR5cGUgPSBfcmVmLmNvbFNlcGFyYXRpb25UeXBlLFxuICAgICAgYWRkRXFuTnVtID0gX3JlZi5hZGRFcW5OdW0sXG4gICAgICBzaW5nbGVSb3cgPSBfcmVmLnNpbmdsZVJvdyxcbiAgICAgIGVtcHR5U2luZ2xlUm93ID0gX3JlZi5lbXB0eVNpbmdsZVJvdyxcbiAgICAgIG1heE51bUNvbHMgPSBfcmVmLm1heE51bUNvbHMsXG4gICAgICBsZXFubyA9IF9yZWYubGVxbm87XG4gIHBhcnNlci5ndWxsZXQuYmVnaW5Hcm91cCgpO1xuXG4gIGlmICghc2luZ2xlUm93KSB7XG4gICAgLy8gXFxjciBpcyBlcXVpdmFsZW50IHRvIFxcXFwgd2l0aG91dCB0aGUgb3B0aW9uYWwgc2l6ZSBhcmd1bWVudCAoc2VlIGJlbG93KVxuICAgIC8vIFRPRE86IHByb3ZpZGUgaGVscGZ1bCBlcnJvciB3aGVuIFxcY3IgaXMgdXNlZCBvdXRzaWRlIGFycmF5IGVudmlyb25tZW50XG4gICAgcGFyc2VyLmd1bGxldC5tYWNyb3Muc2V0KFwiXFxcXGNyXCIsIFwiXFxcXFxcXFxcXFxccmVsYXhcIik7XG4gIH0gLy8gR2V0IGN1cnJlbnQgYXJyYXlzdHJldGNoIGlmIGl0J3Mgbm90IHNldCBieSB0aGUgZW52aXJvbm1lbnRcblxuXG4gIGlmICghYXJyYXlzdHJldGNoKSB7XG4gICAgdmFyIHN0cmV0Y2ggPSBwYXJzZXIuZ3VsbGV0LmV4cGFuZE1hY3JvQXNUZXh0KFwiXFxcXGFycmF5c3RyZXRjaFwiKTtcblxuICAgIGlmIChzdHJldGNoID09IG51bGwpIHtcbiAgICAgIC8vIERlZmF1bHQgXFxhcnJheXN0cmV0Y2ggZnJvbSBsdHRhYi5kdHhcbiAgICAgIGFycmF5c3RyZXRjaCA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFycmF5c3RyZXRjaCA9IHBhcnNlRmxvYXQoc3RyZXRjaCk7XG5cbiAgICAgIGlmICghYXJyYXlzdHJldGNoIHx8IGFycmF5c3RyZXRjaCA8IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiSW52YWxpZCBcXFxcYXJyYXlzdHJldGNoOiBcIiArIHN0cmV0Y2gpO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBTdGFydCBncm91cCBmb3IgZmlyc3QgY2VsbFxuXG5cbiAgcGFyc2VyLmd1bGxldC5iZWdpbkdyb3VwKCk7XG4gIHZhciByb3cgPSBbXTtcbiAgdmFyIGJvZHkgPSBbcm93XTtcbiAgdmFyIHJvd0dhcHMgPSBbXTtcbiAgdmFyIGhMaW5lc0JlZm9yZVJvdyA9IFtdOyAvLyBUZXN0IGZvciBcXGhsaW5lIGF0IHRoZSB0b3Agb2YgdGhlIGFycmF5LlxuXG4gIGhMaW5lc0JlZm9yZVJvdy5wdXNoKGdldEhMaW5lcyhwYXJzZXIpKTtcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc3RhbnQtY29uZGl0aW9uXG4gICAgLy8gUGFyc2UgZWFjaCBjZWxsIGluIGl0cyBvd24gZ3JvdXAgKG5hbWVzcGFjZSlcbiAgICB2YXIgY2VsbCA9IHBhcnNlci5wYXJzZUV4cHJlc3Npb24oZmFsc2UsIHNpbmdsZVJvdyA/IFwiXFxcXGVuZFwiIDogXCJcXFxcXFxcXFwiKTtcbiAgICBwYXJzZXIuZ3VsbGV0LmVuZEdyb3VwKCk7XG4gICAgcGFyc2VyLmd1bGxldC5iZWdpbkdyb3VwKCk7XG4gICAgY2VsbCA9IHtcbiAgICAgIHR5cGU6IFwib3JkZ3JvdXBcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgYm9keTogY2VsbFxuICAgIH07XG5cbiAgICBpZiAoc3R5bGUpIHtcbiAgICAgIGNlbGwgPSB7XG4gICAgICAgIHR5cGU6IFwic3R5bGluZ1wiLFxuICAgICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICBib2R5OiBbY2VsbF1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgcm93LnB1c2goY2VsbCk7XG4gICAgdmFyIG5leHQgPSBwYXJzZXIuZmV0Y2goKS50ZXh0O1xuXG4gICAgaWYgKG5leHQgPT09IFwiJlwiKSB7XG4gICAgICBpZiAobWF4TnVtQ29scyAmJiByb3cubGVuZ3RoID09PSBtYXhOdW1Db2xzKSB7XG4gICAgICAgIGlmIChzaW5nbGVSb3cgfHwgY29sU2VwYXJhdGlvblR5cGUpIHtcbiAgICAgICAgICAvLyB7ZXF1YXRpb259IG9yIHtzcGxpdH1cbiAgICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJUb28gbWFueSB0YWIgY2hhcmFjdGVyczogJlwiLCBwYXJzZXIubmV4dFRva2VuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB7YXJyYXl9IGVudmlyb25tZW50XG4gICAgICAgICAgcGFyc2VyLnNldHRpbmdzLnJlcG9ydE5vbnN0cmljdChcInRleHRFbnZcIiwgXCJUb28gZmV3IGNvbHVtbnMgXCIgKyBcInNwZWNpZmllZCBpbiB0aGUge2FycmF5fSBjb2x1bW4gYXJndW1lbnQuXCIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHBhcnNlci5jb25zdW1lKCk7XG4gICAgfSBlbHNlIGlmIChuZXh0ID09PSBcIlxcXFxlbmRcIikge1xuICAgICAgLy8gQXJyYXlzIHRlcm1pbmF0ZSBuZXdsaW5lcyB3aXRoIGBcXGNyY3JgIHdoaWNoIGNvbnN1bWVzIGEgYFxcY3JgIGlmXG4gICAgICAvLyB0aGUgbGFzdCBsaW5lIGlzIGVtcHR5LiAgSG93ZXZlciwgQU1TIGVudmlyb25tZW50cyBrZWVwIHRoZVxuICAgICAgLy8gZW1wdHkgcm93IGlmIGl0J3MgdGhlIG9ubHkgb25lLlxuICAgICAgLy8gTk9URTogQ3VycmVudGx5LCBgY2VsbGAgaXMgdGhlIGxhc3QgaXRlbSBhZGRlZCBpbnRvIGByb3dgLlxuICAgICAgaWYgKHJvdy5sZW5ndGggPT09IDEgJiYgY2VsbC50eXBlID09PSBcInN0eWxpbmdcIiAmJiBjZWxsLmJvZHlbMF0uYm9keS5sZW5ndGggPT09IDAgJiYgKGJvZHkubGVuZ3RoID4gMSB8fCAhZW1wdHlTaW5nbGVSb3cpKSB7XG4gICAgICAgIGJvZHkucG9wKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChoTGluZXNCZWZvcmVSb3cubGVuZ3RoIDwgYm9keS5sZW5ndGggKyAxKSB7XG4gICAgICAgIGhMaW5lc0JlZm9yZVJvdy5wdXNoKFtdKTtcbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmIChuZXh0ID09PSBcIlxcXFxcXFxcXCIpIHtcbiAgICAgIHBhcnNlci5jb25zdW1lKCk7XG4gICAgICB2YXIgc2l6ZSA9IHZvaWQgMDsgLy8gXFxkZWZcXExldEB7XFxsZXRcXFxcXFxtYXRoQGNyfVxuICAgICAgLy8gXFxkZWZcXG1hdGhAY3J7Li4uXFxtYXRoQGNyQH1cbiAgICAgIC8vIFxcZGVmXFxtYXRoQGNyQHtcXG5ld0BpZm5leHRjaGFyW1xcbWF0aEBjckBAe1xcbWF0aEBjckBAW1xcekBdfX1cbiAgICAgIC8vIFxcZGVmXFxtYXRoQGNyQEBbIzFdey4uLlxcbWF0aEBjckBAQC4uLn1cbiAgICAgIC8vIFxcZGVmXFxtYXRoQGNyQEBAe1xcY3J9XG5cbiAgICAgIGlmIChwYXJzZXIuZ3VsbGV0LmZ1dHVyZSgpLnRleHQgIT09IFwiIFwiKSB7XG4gICAgICAgIHNpemUgPSBwYXJzZXIucGFyc2VTaXplR3JvdXAodHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJvd0dhcHMucHVzaChzaXplID8gc2l6ZS52YWx1ZSA6IG51bGwpOyAvLyBjaGVjayBmb3IgXFxobGluZShzKSBmb2xsb3dpbmcgdGhlIHJvdyBzZXBhcmF0b3JcblxuICAgICAgaExpbmVzQmVmb3JlUm93LnB1c2goZ2V0SExpbmVzKHBhcnNlcikpO1xuICAgICAgcm93ID0gW107XG4gICAgICBib2R5LnB1c2gocm93KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiRXhwZWN0ZWQgJiBvciBcXFxcXFxcXCBvciBcXFxcY3Igb3IgXFxcXGVuZFwiLCBwYXJzZXIubmV4dFRva2VuKTtcbiAgICB9XG4gIH0gLy8gRW5kIGNlbGwgZ3JvdXBcblxuXG4gIHBhcnNlci5ndWxsZXQuZW5kR3JvdXAoKTsgLy8gRW5kIGFycmF5IGdyb3VwIGRlZmluaW5nIFxcY3JcblxuICBwYXJzZXIuZ3VsbGV0LmVuZEdyb3VwKCk7XG4gIHJldHVybiB7XG4gICAgdHlwZTogXCJhcnJheVwiLFxuICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgIGFkZEpvdDogYWRkSm90LFxuICAgIGFycmF5c3RyZXRjaDogYXJyYXlzdHJldGNoLFxuICAgIGJvZHk6IGJvZHksXG4gICAgY29sczogY29scyxcbiAgICByb3dHYXBzOiByb3dHYXBzLFxuICAgIGhza2lwQmVmb3JlQW5kQWZ0ZXI6IGhza2lwQmVmb3JlQW5kQWZ0ZXIsXG4gICAgaExpbmVzQmVmb3JlUm93OiBoTGluZXNCZWZvcmVSb3csXG4gICAgY29sU2VwYXJhdGlvblR5cGU6IGNvbFNlcGFyYXRpb25UeXBlLFxuICAgIGFkZEVxbk51bTogYWRkRXFuTnVtLFxuICAgIGxlcW5vOiBsZXFub1xuICB9O1xufSAvLyBEZWNpZGVzIG9uIGEgc3R5bGUgZm9yIGNlbGxzIGluIGFuIGFycmF5IGFjY29yZGluZyB0byB3aGV0aGVyIHRoZSBnaXZlblxuLy8gZW52aXJvbm1lbnQgbmFtZSBzdGFydHMgd2l0aCB0aGUgbGV0dGVyICdkJy5cblxuXG5mdW5jdGlvbiBkQ2VsbFN0eWxlKGVudk5hbWUpIHtcbiAgaWYgKGVudk5hbWUuc3Vic3RyKDAsIDEpID09PSBcImRcIikge1xuICAgIHJldHVybiBcImRpc3BsYXlcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJ0ZXh0XCI7XG4gIH1cbn1cblxudmFyIGFycmF5X2h0bWxCdWlsZGVyID0gZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgdmFyIHI7XG4gIHZhciBjO1xuICB2YXIgbnIgPSBncm91cC5ib2R5Lmxlbmd0aDtcbiAgdmFyIGhMaW5lc0JlZm9yZVJvdyA9IGdyb3VwLmhMaW5lc0JlZm9yZVJvdztcbiAgdmFyIG5jID0gMDtcbiAgdmFyIGJvZHkgPSBuZXcgQXJyYXkobnIpO1xuICB2YXIgaGxpbmVzID0gW107XG4gIHZhciBydWxlVGhpY2tuZXNzID0gTWF0aC5tYXgob3B0aW9ucy5mb250TWV0cmljcygpLmFycmF5UnVsZVdpZHRoLCBvcHRpb25zLm1pblJ1bGVUaGlja25lc3MgLy8gVXNlciBvdmVycmlkZS5cbiAgKTsgLy8gSG9yaXpvbnRhbCBzcGFjaW5nXG5cbiAgdmFyIHB0ID0gMSAvIG9wdGlvbnMuZm9udE1ldHJpY3MoKS5wdFBlckVtO1xuICB2YXIgYXJyYXljb2xzZXAgPSA1ICogcHQ7IC8vIGRlZmF1bHQgdmFsdWUsIGkuZS4gXFxhcnJheWNvbHNlcCBpbiBhcnRpY2xlLmNsc1xuXG4gIGlmIChncm91cC5jb2xTZXBhcmF0aW9uVHlwZSAmJiBncm91cC5jb2xTZXBhcmF0aW9uVHlwZSA9PT0gXCJzbWFsbFwiKSB7XG4gICAgLy8gV2UncmUgaW4gYSB7c21hbGxtYXRyaXh9LiBEZWZhdWx0IGNvbHVtbiBzcGFjZSBpcyBcXHRoaWNrc3BhY2UsXG4gICAgLy8gaS5lLiA1LzE4ZW0gPSAwLjI3NzhlbSwgcGVyIGFtc21hdGguZHR4IGZvciB7c21hbGxtYXRyaXh9LlxuICAgIC8vIEJ1dCB0aGF0IG5lZWRzIGFkanVzdG1lbnQgYmVjYXVzZSBMYVRlWCBhcHBsaWVzIFxcc2NyaXB0c3R5bGUgdG8gdGhlXG4gICAgLy8gZW50aXJlIGFycmF5LCBpbmNsdWRpbmcgdGhlIGNvbHNwYWNlLCBidXQgdGhpcyBmdW5jdGlvbiBhcHBsaWVzXG4gICAgLy8gXFxzY3JpcHRzdHlsZSBvbmx5IGluc2lkZSBlYWNoIGVsZW1lbnQuXG4gICAgdmFyIGxvY2FsTXVsdGlwbGllciA9IG9wdGlvbnMuaGF2aW5nU3R5bGUoc3JjX1N0eWxlLlNDUklQVCkuc2l6ZU11bHRpcGxpZXI7XG4gICAgYXJyYXljb2xzZXAgPSAwLjI3NzggKiAobG9jYWxNdWx0aXBsaWVyIC8gb3B0aW9ucy5zaXplTXVsdGlwbGllcik7XG4gIH0gLy8gVmVydGljYWwgc3BhY2luZ1xuXG5cbiAgdmFyIGJhc2VsaW5lc2tpcCA9IGdyb3VwLmNvbFNlcGFyYXRpb25UeXBlID09PSBcIkNEXCIgPyBjYWxjdWxhdGVTaXplKHtcbiAgICBudW1iZXI6IDMsXG4gICAgdW5pdDogXCJleFwiXG4gIH0sIG9wdGlvbnMpIDogMTIgKiBwdDsgLy8gc2VlIHNpemUxMC5jbG9cbiAgLy8gRGVmYXVsdCBcXGpvdCBmcm9tIGx0bWF0aC5kdHhcbiAgLy8gVE9ETyhlZGVtYWluZSk6IGFsbG93IG92ZXJyaWRpbmcgXFxqb3QgdmlhIFxcc2V0bGVuZ3RoICgjNjg3KVxuXG4gIHZhciBqb3QgPSAzICogcHQ7XG4gIHZhciBhcnJheXNraXAgPSBncm91cC5hcnJheXN0cmV0Y2ggKiBiYXNlbGluZXNraXA7XG4gIHZhciBhcnN0cnV0SGVpZ2h0ID0gMC43ICogYXJyYXlza2lwOyAvLyBcXHN0cnV0Ym94IGluIGx0ZnNzdHJjLmR0eCBhbmRcblxuICB2YXIgYXJzdHJ1dERlcHRoID0gMC4zICogYXJyYXlza2lwOyAvLyBcXEBhcnN0cnV0Ym94IGluIGx0dGFiLmR0eFxuXG4gIHZhciB0b3RhbEhlaWdodCA9IDA7IC8vIFNldCBhIHBvc2l0aW9uIGZvciBcXGhsaW5lKHMpIGF0IHRoZSB0b3Agb2YgdGhlIGFycmF5LCBpZiBhbnkuXG5cbiAgZnVuY3Rpb24gc2V0SExpbmVQb3MoaGxpbmVzSW5HYXApIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhsaW5lc0luR2FwLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgdG90YWxIZWlnaHQgKz0gMC4yNTtcbiAgICAgIH1cblxuICAgICAgaGxpbmVzLnB1c2goe1xuICAgICAgICBwb3M6IHRvdGFsSGVpZ2h0LFxuICAgICAgICBpc0Rhc2hlZDogaGxpbmVzSW5HYXBbaV1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHNldEhMaW5lUG9zKGhMaW5lc0JlZm9yZVJvd1swXSk7XG5cbiAgZm9yIChyID0gMDsgciA8IGdyb3VwLmJvZHkubGVuZ3RoOyArK3IpIHtcbiAgICB2YXIgaW5yb3cgPSBncm91cC5ib2R5W3JdO1xuICAgIHZhciBoZWlnaHQgPSBhcnN0cnV0SGVpZ2h0OyAvLyBcXEBhcnJheSBhZGRzIGFuIFxcQGFyc3RydXRcblxuICAgIHZhciBkZXB0aCA9IGFyc3RydXREZXB0aDsgLy8gdG8gZWFjaCB0b3cgKHZpYSB0aGUgdGVtcGxhdGUpXG5cbiAgICBpZiAobmMgPCBpbnJvdy5sZW5ndGgpIHtcbiAgICAgIG5jID0gaW5yb3cubGVuZ3RoO1xuICAgIH1cblxuICAgIHZhciBvdXRyb3cgPSBuZXcgQXJyYXkoaW5yb3cubGVuZ3RoKTtcblxuICAgIGZvciAoYyA9IDA7IGMgPCBpbnJvdy5sZW5ndGg7ICsrYykge1xuICAgICAgdmFyIGVsdCA9IGJ1aWxkR3JvdXAoaW5yb3dbY10sIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoZGVwdGggPCBlbHQuZGVwdGgpIHtcbiAgICAgICAgZGVwdGggPSBlbHQuZGVwdGg7XG4gICAgICB9XG5cbiAgICAgIGlmIChoZWlnaHQgPCBlbHQuaGVpZ2h0KSB7XG4gICAgICAgIGhlaWdodCA9IGVsdC5oZWlnaHQ7XG4gICAgICB9XG5cbiAgICAgIG91dHJvd1tjXSA9IGVsdDtcbiAgICB9XG5cbiAgICB2YXIgcm93R2FwID0gZ3JvdXAucm93R2Fwc1tyXTtcbiAgICB2YXIgZ2FwID0gMDtcblxuICAgIGlmIChyb3dHYXApIHtcbiAgICAgIGdhcCA9IGNhbGN1bGF0ZVNpemUocm93R2FwLCBvcHRpb25zKTtcblxuICAgICAgaWYgKGdhcCA+IDApIHtcbiAgICAgICAgLy8gXFxAYXJnYXJyYXljclxuICAgICAgICBnYXAgKz0gYXJzdHJ1dERlcHRoO1xuXG4gICAgICAgIGlmIChkZXB0aCA8IGdhcCkge1xuICAgICAgICAgIGRlcHRoID0gZ2FwOyAvLyBcXEB4YXJnYXJyYXljclxuICAgICAgICB9XG5cbiAgICAgICAgZ2FwID0gMDtcbiAgICAgIH1cbiAgICB9IC8vIEluIEFNUyBtdWx0aWxpbmUgZW52aXJvbm1lbnRzIHN1Y2ggYXMgYWxpZ25lZCBhbmQgZ2F0aGVyZWQsIHJvd3NcbiAgICAvLyBjb3JyZXNwb25kIHRvIGxpbmVzIHRoYXQgaGF2ZSBhZGRpdGlvbmFsIFxcam90IGFkZGVkIHRvIHRoZVxuICAgIC8vIFxcYmFzZWxpbmVza2lwIHZpYSBcXG9wZW51cC5cblxuXG4gICAgaWYgKGdyb3VwLmFkZEpvdCkge1xuICAgICAgZGVwdGggKz0gam90O1xuICAgIH1cblxuICAgIG91dHJvdy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgb3V0cm93LmRlcHRoID0gZGVwdGg7XG4gICAgdG90YWxIZWlnaHQgKz0gaGVpZ2h0O1xuICAgIG91dHJvdy5wb3MgPSB0b3RhbEhlaWdodDtcbiAgICB0b3RhbEhlaWdodCArPSBkZXB0aCArIGdhcDsgLy8gXFxAeWFyZ2FycmF5Y3JcblxuICAgIGJvZHlbcl0gPSBvdXRyb3c7IC8vIFNldCBhIHBvc2l0aW9uIGZvciBcXGhsaW5lKHMpLCBpZiBhbnkuXG5cbiAgICBzZXRITGluZVBvcyhoTGluZXNCZWZvcmVSb3dbciArIDFdKTtcbiAgfVxuXG4gIHZhciBvZmZzZXQgPSB0b3RhbEhlaWdodCAvIDIgKyBvcHRpb25zLmZvbnRNZXRyaWNzKCkuYXhpc0hlaWdodDtcbiAgdmFyIGNvbERlc2NyaXB0aW9ucyA9IGdyb3VwLmNvbHMgfHwgW107XG4gIHZhciBjb2xzID0gW107XG4gIHZhciBjb2xTZXA7XG4gIHZhciBjb2xEZXNjck51bTtcbiAgdmFyIGVxbk51bVNwYW5zID0gW107XG5cbiAgaWYgKGdyb3VwLmFkZEVxbk51bSkge1xuICAgIC8vIEFuIGVudmlyb25tZW50IHdpdGggYXV0b21hdGljIGVxdWF0aW9uIG51bWJlcnMuXG4gICAgLy8gQ3JlYXRlIG5vZGUocykgdGhhdCB3aWxsIHRyaWdnZXIgQ1NTIGNvdW50ZXIgaW5jcmVtZW50LlxuICAgIGZvciAociA9IDA7IHIgPCBucjsgKytyKSB7XG4gICAgICB2YXIgcncgPSBib2R5W3JdO1xuICAgICAgdmFyIHNoaWZ0ID0gcncucG9zIC0gb2Zmc2V0O1xuICAgICAgdmFyIGVxblRhZyA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcImVxbi1udW1cIl0sIFtdLCBvcHRpb25zKTtcbiAgICAgIGVxblRhZy5kZXB0aCA9IHJ3LmRlcHRoO1xuICAgICAgZXFuVGFnLmhlaWdodCA9IHJ3LmhlaWdodDtcbiAgICAgIGVxbk51bVNwYW5zLnB1c2goe1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogZXFuVGFnLFxuICAgICAgICBzaGlmdDogc2hpZnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoYyA9IDAsIGNvbERlc2NyTnVtID0gMDsgLy8gQ29udGludWUgd2hpbGUgZWl0aGVyIHRoZXJlIGFyZSBtb3JlIGNvbHVtbnMgb3IgbW9yZSBjb2x1bW5cbiAgLy8gZGVzY3JpcHRpb25zLCBzbyB0cmFpbGluZyBzZXBhcmF0b3JzIGRvbid0IGdldCBsb3N0LlxuICBjIDwgbmMgfHwgY29sRGVzY3JOdW0gPCBjb2xEZXNjcmlwdGlvbnMubGVuZ3RoOyArK2MsICsrY29sRGVzY3JOdW0pIHtcbiAgICB2YXIgY29sRGVzY3IgPSBjb2xEZXNjcmlwdGlvbnNbY29sRGVzY3JOdW1dIHx8IHt9O1xuICAgIHZhciBmaXJzdFNlcGFyYXRvciA9IHRydWU7XG5cbiAgICB3aGlsZSAoY29sRGVzY3IudHlwZSA9PT0gXCJzZXBhcmF0b3JcIikge1xuICAgICAgLy8gSWYgdGhlcmUgaXMgbW9yZSB0aGFuIG9uZSBzZXBhcmF0b3IgaW4gYSByb3csIGFkZCBhIHNwYWNlXG4gICAgICAvLyBiZXR3ZWVuIHRoZW0uXG4gICAgICBpZiAoIWZpcnN0U2VwYXJhdG9yKSB7XG4gICAgICAgIGNvbFNlcCA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcImFycmF5Y29sc2VwXCJdLCBbXSk7XG4gICAgICAgIGNvbFNlcC5zdHlsZS53aWR0aCA9IG9wdGlvbnMuZm9udE1ldHJpY3MoKS5kb3VibGVSdWxlU2VwICsgXCJlbVwiO1xuICAgICAgICBjb2xzLnB1c2goY29sU2VwKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvbERlc2NyLnNlcGFyYXRvciA9PT0gXCJ8XCIgfHwgY29sRGVzY3Iuc2VwYXJhdG9yID09PSBcIjpcIikge1xuICAgICAgICB2YXIgbGluZVR5cGUgPSBjb2xEZXNjci5zZXBhcmF0b3IgPT09IFwifFwiID8gXCJzb2xpZFwiIDogXCJkYXNoZWRcIjtcbiAgICAgICAgdmFyIHNlcGFyYXRvciA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcInZlcnRpY2FsLXNlcGFyYXRvclwiXSwgW10sIG9wdGlvbnMpO1xuICAgICAgICBzZXBhcmF0b3Iuc3R5bGUuaGVpZ2h0ID0gdG90YWxIZWlnaHQgKyBcImVtXCI7XG4gICAgICAgIHNlcGFyYXRvci5zdHlsZS5ib3JkZXJSaWdodFdpZHRoID0gcnVsZVRoaWNrbmVzcyArIFwiZW1cIjtcbiAgICAgICAgc2VwYXJhdG9yLnN0eWxlLmJvcmRlclJpZ2h0U3R5bGUgPSBsaW5lVHlwZTtcbiAgICAgICAgc2VwYXJhdG9yLnN0eWxlLm1hcmdpbiA9IFwiMCAtXCIgKyBydWxlVGhpY2tuZXNzIC8gMiArIFwiZW1cIjtcbiAgICAgICAgc2VwYXJhdG9yLnN0eWxlLnZlcnRpY2FsQWxpZ24gPSAtKHRvdGFsSGVpZ2h0IC0gb2Zmc2V0KSArIFwiZW1cIjtcbiAgICAgICAgY29scy5wdXNoKHNlcGFyYXRvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJJbnZhbGlkIHNlcGFyYXRvciB0eXBlOiBcIiArIGNvbERlc2NyLnNlcGFyYXRvcik7XG4gICAgICB9XG5cbiAgICAgIGNvbERlc2NyTnVtKys7XG4gICAgICBjb2xEZXNjciA9IGNvbERlc2NyaXB0aW9uc1tjb2xEZXNjck51bV0gfHwge307XG4gICAgICBmaXJzdFNlcGFyYXRvciA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChjID49IG5jKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgc2Vwd2lkdGggPSB2b2lkIDA7XG5cbiAgICBpZiAoYyA+IDAgfHwgZ3JvdXAuaHNraXBCZWZvcmVBbmRBZnRlcikge1xuICAgICAgc2Vwd2lkdGggPSB1dGlscy5kZWZsdChjb2xEZXNjci5wcmVnYXAsIGFycmF5Y29sc2VwKTtcblxuICAgICAgaWYgKHNlcHdpZHRoICE9PSAwKSB7XG4gICAgICAgIGNvbFNlcCA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcImFycmF5Y29sc2VwXCJdLCBbXSk7XG4gICAgICAgIGNvbFNlcC5zdHlsZS53aWR0aCA9IHNlcHdpZHRoICsgXCJlbVwiO1xuICAgICAgICBjb2xzLnB1c2goY29sU2VwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY29sID0gW107XG5cbiAgICBmb3IgKHIgPSAwOyByIDwgbnI7ICsrcikge1xuICAgICAgdmFyIHJvdyA9IGJvZHlbcl07XG4gICAgICB2YXIgZWxlbSA9IHJvd1tjXTtcblxuICAgICAgaWYgKCFlbGVtKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3NoaWZ0ID0gcm93LnBvcyAtIG9mZnNldDtcblxuICAgICAgZWxlbS5kZXB0aCA9IHJvdy5kZXB0aDtcbiAgICAgIGVsZW0uaGVpZ2h0ID0gcm93LmhlaWdodDtcbiAgICAgIGNvbC5wdXNoKHtcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGVsZW0sXG4gICAgICAgIHNoaWZ0OiBfc2hpZnRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbCA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICBwb3NpdGlvblR5cGU6IFwiaW5kaXZpZHVhbFNoaWZ0XCIsXG4gICAgICBjaGlsZHJlbjogY29sXG4gICAgfSwgb3B0aW9ucyk7XG4gICAgY29sID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wiY29sLWFsaWduLVwiICsgKGNvbERlc2NyLmFsaWduIHx8IFwiY1wiKV0sIFtjb2xdKTtcbiAgICBjb2xzLnB1c2goY29sKTtcblxuICAgIGlmIChjIDwgbmMgLSAxIHx8IGdyb3VwLmhza2lwQmVmb3JlQW5kQWZ0ZXIpIHtcbiAgICAgIHNlcHdpZHRoID0gdXRpbHMuZGVmbHQoY29sRGVzY3IucG9zdGdhcCwgYXJyYXljb2xzZXApO1xuXG4gICAgICBpZiAoc2Vwd2lkdGggIT09IDApIHtcbiAgICAgICAgY29sU2VwID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wiYXJyYXljb2xzZXBcIl0sIFtdKTtcbiAgICAgICAgY29sU2VwLnN0eWxlLndpZHRoID0gc2Vwd2lkdGggKyBcImVtXCI7XG4gICAgICAgIGNvbHMucHVzaChjb2xTZXApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGJvZHkgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtdGFibGVcIl0sIGNvbHMpOyAvLyBBZGQgXFxobGluZShzKSwgaWYgYW55LlxuXG4gIGlmIChobGluZXMubGVuZ3RoID4gMCkge1xuICAgIHZhciBsaW5lID0gYnVpbGRDb21tb24ubWFrZUxpbmVTcGFuKFwiaGxpbmVcIiwgb3B0aW9ucywgcnVsZVRoaWNrbmVzcyk7XG4gICAgdmFyIGRhc2hlcyA9IGJ1aWxkQ29tbW9uLm1ha2VMaW5lU3BhbihcImhkYXNobGluZVwiLCBvcHRpb25zLCBydWxlVGhpY2tuZXNzKTtcbiAgICB2YXIgdkxpc3RFbGVtcyA9IFt7XG4gICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgIGVsZW06IGJvZHksXG4gICAgICBzaGlmdDogMFxuICAgIH1dO1xuXG4gICAgd2hpbGUgKGhsaW5lcy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgaGxpbmUgPSBobGluZXMucG9wKCk7XG4gICAgICB2YXIgbGluZVNoaWZ0ID0gaGxpbmUucG9zIC0gb2Zmc2V0O1xuXG4gICAgICBpZiAoaGxpbmUuaXNEYXNoZWQpIHtcbiAgICAgICAgdkxpc3RFbGVtcy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgICBlbGVtOiBkYXNoZXMsXG4gICAgICAgICAgc2hpZnQ6IGxpbmVTaGlmdFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZMaXN0RWxlbXMucHVzaCh7XG4gICAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgICAgZWxlbTogbGluZSxcbiAgICAgICAgICBzaGlmdDogbGluZVNoaWZ0XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGJvZHkgPSBidWlsZENvbW1vbi5tYWtlVkxpc3Qoe1xuICAgICAgcG9zaXRpb25UeXBlOiBcImluZGl2aWR1YWxTaGlmdFwiLFxuICAgICAgY2hpbGRyZW46IHZMaXN0RWxlbXNcbiAgICB9LCBvcHRpb25zKTtcbiAgfVxuXG4gIGlmICghZ3JvdXAuYWRkRXFuTnVtKSB7XG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcmRcIl0sIFtib2R5XSwgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGVxbk51bUNvbCA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICBwb3NpdGlvblR5cGU6IFwiaW5kaXZpZHVhbFNoaWZ0XCIsXG4gICAgICBjaGlsZHJlbjogZXFuTnVtU3BhbnNcbiAgICB9LCBvcHRpb25zKTtcbiAgICBlcW5OdW1Db2wgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJ0YWdcIl0sIFtlcW5OdW1Db2xdLCBvcHRpb25zKTtcbiAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZUZyYWdtZW50KFtib2R5LCBlcW5OdW1Db2xdKTtcbiAgfVxufTtcblxudmFyIGFsaWduTWFwID0ge1xuICBjOiBcImNlbnRlciBcIixcbiAgbDogXCJsZWZ0IFwiLFxuICByOiBcInJpZ2h0IFwiXG59O1xuXG52YXIgYXJyYXlfbWF0aG1sQnVpbGRlciA9IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgdmFyIHRibCA9IFtdO1xuICB2YXIgZ2x1ZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXRkXCIsIFtdLCBbXCJtdHItZ2x1ZVwiXSk7XG4gIHZhciB0YWcgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm10ZFwiLCBbXSwgW1wibW1sLWVxbi1udW1cIl0pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXAuYm9keS5sZW5ndGg7IGkrKykge1xuICAgIHZhciBydyA9IGdyb3VwLmJvZHlbaV07XG4gICAgdmFyIHJvdyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBydy5sZW5ndGg7IGorKykge1xuICAgICAgcm93LnB1c2gobmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtdGRcIiwgW2J1aWxkTWF0aE1MX2J1aWxkR3JvdXAocndbal0sIG9wdGlvbnMpXSkpO1xuICAgIH1cblxuICAgIGlmIChncm91cC5hZGRFcW5OdW0pIHtcbiAgICAgIHJvdy51bnNoaWZ0KGdsdWUpO1xuICAgICAgcm93LnB1c2goZ2x1ZSk7XG5cbiAgICAgIGlmIChncm91cC5sZXFubykge1xuICAgICAgICByb3cudW5zaGlmdCh0YWcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm93LnB1c2godGFnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0YmwucHVzaChuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm10clwiLCByb3cpKTtcbiAgfVxuXG4gIHZhciB0YWJsZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXRhYmxlXCIsIHRibCk7IC8vIFNldCBjb2x1bW4gYWxpZ25tZW50LCByb3cgc3BhY2luZywgY29sdW1uIHNwYWNpbmcsIGFuZFxuICAvLyBhcnJheSBsaW5lcyBieSBzZXR0aW5nIGF0dHJpYnV0ZXMgb24gdGhlIHRhYmxlIGVsZW1lbnQuXG4gIC8vIFNldCB0aGUgcm93IHNwYWNpbmcuIEluIE1hdGhNTCwgd2Ugc3BlY2lmeSBhIGdhcCBkaXN0YW5jZS5cbiAgLy8gV2UgZG8gbm90IHVzZSByb3dHYXBbXSBiZWNhdXNlIE1hdGhNTCBhdXRvbWF0aWNhbGx5IGluY3JlYXNlc1xuICAvLyBjZWxsIGhlaWdodCB3aXRoIHRoZSBoZWlnaHQvZGVwdGggb2YgdGhlIGVsZW1lbnQgY29udGVudC5cbiAgLy8gTGFUZVggXFxhcnJheXN0cmV0Y2ggbXVsdGlwbGllcyB0aGUgcm93IGJhc2VsaW5lLXRvLWJhc2VsaW5lIGRpc3RhbmNlLlxuICAvLyBXZSBzaW11bGF0ZSB0aGlzIGJ5IGFkZGluZyAoYXJyYXlzdHJldGNoIC0gMSllbSB0byB0aGUgZ2FwLiBUaGlzXG4gIC8vIGRvZXMgYSByZWFzb25hYmxlIGpvYiBvZiBhZGp1c3RpbmcgYXJyYXlzIGNvbnRhaW5pbmcgMSBlbSB0YWxsIGNvbnRlbnQuXG4gIC8vIFRoZSAwLjE2IGFuZCAwLjA5IHZhbHVlcyBhcmUgZm91bmQgZW1wcmljYWxseS4gVGhleSBwcm9kdWNlIGFuIGFycmF5XG4gIC8vIHNpbWlsYXIgdG8gTGFUZVggYW5kIGluIHdoaWNoIGNvbnRlbnQgZG9lcyBub3QgaW50ZXJmZXJlIHdpdGggXFxoaW5lcy5cblxuICB2YXIgZ2FwID0gZ3JvdXAuYXJyYXlzdHJldGNoID09PSAwLjUgPyAwLjEgLy8ge3NtYWxsbWF0cml4fSwge3N1YmFycmF5fVxuICA6IDAuMTYgKyBncm91cC5hcnJheXN0cmV0Y2ggLSAxICsgKGdyb3VwLmFkZEpvdCA/IDAuMDkgOiAwKTtcbiAgdGFibGUuc2V0QXR0cmlidXRlKFwicm93c3BhY2luZ1wiLCBnYXAudG9GaXhlZCg0KSArIFwiZW1cIik7IC8vIE1hdGhNTCB0YWJsZSBsaW5lcyBnbyBvbmx5IGJldHdlZW4gY2VsbHMuXG4gIC8vIFRvIHBsYWNlIGEgbGluZSBvbiBhbiBlZGdlIHdlJ2xsIHVzZSA8bWVuY2xvc2U+LCBpZiBuZWNlc3NhcnkuXG5cbiAgdmFyIG1lbmNsb3NlID0gXCJcIjtcbiAgdmFyIGFsaWduID0gXCJcIjtcblxuICBpZiAoZ3JvdXAuY29scyAmJiBncm91cC5jb2xzLmxlbmd0aCA+IDApIHtcbiAgICAvLyBGaW5kIGNvbHVtbiBhbGlnbm1lbnQsIGNvbHVtbiBzcGFjaW5nLCBhbmQgIHZlcnRpY2FsIGxpbmVzLlxuICAgIHZhciBjb2xzID0gZ3JvdXAuY29scztcbiAgICB2YXIgY29sdW1uTGluZXMgPSBcIlwiO1xuICAgIHZhciBwcmV2VHlwZVdhc0FsaWduID0gZmFsc2U7XG4gICAgdmFyIGlTdGFydCA9IDA7XG4gICAgdmFyIGlFbmQgPSBjb2xzLmxlbmd0aDtcblxuICAgIGlmIChjb2xzWzBdLnR5cGUgPT09IFwic2VwYXJhdG9yXCIpIHtcbiAgICAgIG1lbmNsb3NlICs9IFwidG9wIFwiO1xuICAgICAgaVN0YXJ0ID0gMTtcbiAgICB9XG5cbiAgICBpZiAoY29sc1tjb2xzLmxlbmd0aCAtIDFdLnR5cGUgPT09IFwic2VwYXJhdG9yXCIpIHtcbiAgICAgIG1lbmNsb3NlICs9IFwiYm90dG9tIFwiO1xuICAgICAgaUVuZCAtPSAxO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gaVN0YXJ0OyBfaSA8IGlFbmQ7IF9pKyspIHtcbiAgICAgIGlmIChjb2xzW19pXS50eXBlID09PSBcImFsaWduXCIpIHtcbiAgICAgICAgYWxpZ24gKz0gYWxpZ25NYXBbY29sc1tfaV0uYWxpZ25dO1xuXG4gICAgICAgIGlmIChwcmV2VHlwZVdhc0FsaWduKSB7XG4gICAgICAgICAgY29sdW1uTGluZXMgKz0gXCJub25lIFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldlR5cGVXYXNBbGlnbiA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGNvbHNbX2ldLnR5cGUgPT09IFwic2VwYXJhdG9yXCIpIHtcbiAgICAgICAgLy8gTWF0aE1MIGFjY2VwdHMgb25seSBzaW5nbGUgbGluZXMgYmV0d2VlbiBjZWxscy5cbiAgICAgICAgLy8gU28gd2UgcmVhZCBvbmx5IHRoZSBmaXJzdCBvZiBjb25zZWN1dGl2ZSBzZXBhcmF0b3JzLlxuICAgICAgICBpZiAocHJldlR5cGVXYXNBbGlnbikge1xuICAgICAgICAgIGNvbHVtbkxpbmVzICs9IGNvbHNbX2ldLnNlcGFyYXRvciA9PT0gXCJ8XCIgPyBcInNvbGlkIFwiIDogXCJkYXNoZWQgXCI7XG4gICAgICAgICAgcHJldlR5cGVXYXNBbGlnbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGFibGUuc2V0QXR0cmlidXRlKFwiY29sdW1uYWxpZ25cIiwgYWxpZ24udHJpbSgpKTtcblxuICAgIGlmICgvW3NkXS8udGVzdChjb2x1bW5MaW5lcykpIHtcbiAgICAgIHRhYmxlLnNldEF0dHJpYnV0ZShcImNvbHVtbmxpbmVzXCIsIGNvbHVtbkxpbmVzLnRyaW0oKSk7XG4gICAgfVxuICB9IC8vIFNldCBjb2x1bW4gc3BhY2luZy5cblxuXG4gIGlmIChncm91cC5jb2xTZXBhcmF0aW9uVHlwZSA9PT0gXCJhbGlnblwiKSB7XG4gICAgdmFyIF9jb2xzID0gZ3JvdXAuY29scyB8fCBbXTtcblxuICAgIHZhciBzcGFjaW5nID0gXCJcIjtcblxuICAgIGZvciAodmFyIF9pMiA9IDE7IF9pMiA8IF9jb2xzLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgIHNwYWNpbmcgKz0gX2kyICUgMiA/IFwiMGVtIFwiIDogXCIxZW0gXCI7XG4gICAgfVxuXG4gICAgdGFibGUuc2V0QXR0cmlidXRlKFwiY29sdW1uc3BhY2luZ1wiLCBzcGFjaW5nLnRyaW0oKSk7XG4gIH0gZWxzZSBpZiAoZ3JvdXAuY29sU2VwYXJhdGlvblR5cGUgPT09IFwiYWxpZ25hdFwiIHx8IGdyb3VwLmNvbFNlcGFyYXRpb25UeXBlID09PSBcImdhdGhlclwiKSB7XG4gICAgdGFibGUuc2V0QXR0cmlidXRlKFwiY29sdW1uc3BhY2luZ1wiLCBcIjBlbVwiKTtcbiAgfSBlbHNlIGlmIChncm91cC5jb2xTZXBhcmF0aW9uVHlwZSA9PT0gXCJzbWFsbFwiKSB7XG4gICAgdGFibGUuc2V0QXR0cmlidXRlKFwiY29sdW1uc3BhY2luZ1wiLCBcIjAuMjc3OGVtXCIpO1xuICB9IGVsc2UgaWYgKGdyb3VwLmNvbFNlcGFyYXRpb25UeXBlID09PSBcIkNEXCIpIHtcbiAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoXCJjb2x1bW5zcGFjaW5nXCIsIFwiMC41ZW1cIik7XG4gIH0gZWxzZSB7XG4gICAgdGFibGUuc2V0QXR0cmlidXRlKFwiY29sdW1uc3BhY2luZ1wiLCBcIjFlbVwiKTtcbiAgfSAvLyBBZGRyZXNzIFxcaGxpbmUgYW5kIFxcaGRhc2hsaW5lXG5cblxuICB2YXIgcm93TGluZXMgPSBcIlwiO1xuICB2YXIgaGxpbmVzID0gZ3JvdXAuaExpbmVzQmVmb3JlUm93O1xuICBtZW5jbG9zZSArPSBobGluZXNbMF0ubGVuZ3RoID4gMCA/IFwibGVmdCBcIiA6IFwiXCI7XG4gIG1lbmNsb3NlICs9IGhsaW5lc1tobGluZXMubGVuZ3RoIC0gMV0ubGVuZ3RoID4gMCA/IFwicmlnaHQgXCIgOiBcIlwiO1xuXG4gIGZvciAodmFyIF9pMyA9IDE7IF9pMyA8IGhsaW5lcy5sZW5ndGggLSAxOyBfaTMrKykge1xuICAgIHJvd0xpbmVzICs9IGhsaW5lc1tfaTNdLmxlbmd0aCA9PT0gMCA/IFwibm9uZSBcIiAvLyBNYXRoTUwgYWNjZXB0cyBvbmx5IGEgc2luZ2xlIGxpbmUgYmV0d2VlbiByb3dzLiBSZWFkIG9uZSBlbGVtZW50LlxuICAgIDogaGxpbmVzW19pM11bMF0gPyBcImRhc2hlZCBcIiA6IFwic29saWQgXCI7XG4gIH1cblxuICBpZiAoL1tzZF0vLnRlc3Qocm93TGluZXMpKSB7XG4gICAgdGFibGUuc2V0QXR0cmlidXRlKFwicm93bGluZXNcIiwgcm93TGluZXMudHJpbSgpKTtcbiAgfVxuXG4gIGlmIChtZW5jbG9zZSAhPT0gXCJcIikge1xuICAgIHRhYmxlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtZW5jbG9zZVwiLCBbdGFibGVdKTtcbiAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoXCJub3RhdGlvblwiLCBtZW5jbG9zZS50cmltKCkpO1xuICB9XG5cbiAgaWYgKGdyb3VwLmFycmF5c3RyZXRjaCAmJiBncm91cC5hcnJheXN0cmV0Y2ggPCAxKSB7XG4gICAgLy8gQSBzbWFsbCBhcnJheS4gV3JhcCBpbiBzY3JpcHRzdHlsZSBzbyByb3cgZ2FwIGlzIG5vdCB0b28gbGFyZ2UuXG4gICAgdGFibGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1zdHlsZVwiLCBbdGFibGVdKTtcbiAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoXCJzY3JpcHRsZXZlbFwiLCBcIjFcIik7XG4gIH1cblxuICByZXR1cm4gdGFibGU7XG59OyAvLyBDb252ZW5pZW5jZSBmdW5jdGlvbiBmb3IgYWxpZ24sIGFsaWduKiwgYWxpZ25lZCwgYWxpZ25hdCwgYWxpZ25hdCosIGFsaWduZWRhdC5cblxuXG52YXIgYWxpZ25lZEhhbmRsZXIgPSBmdW5jdGlvbiBhbGlnbmVkSGFuZGxlcihjb250ZXh0LCBhcmdzKSB7XG4gIGlmIChjb250ZXh0LmVudk5hbWUuaW5kZXhPZihcImVkXCIpID09PSAtMSkge1xuICAgIHZhbGlkYXRlQW1zRW52aXJvbm1lbnRDb250ZXh0KGNvbnRleHQpO1xuICB9XG5cbiAgdmFyIGNvbHMgPSBbXTtcbiAgdmFyIHNlcGFyYXRpb25UeXBlID0gY29udGV4dC5lbnZOYW1lLmluZGV4T2YoXCJhdFwiKSA+IC0xID8gXCJhbGlnbmF0XCIgOiBcImFsaWduXCI7XG4gIHZhciByZXMgPSBwYXJzZUFycmF5KGNvbnRleHQucGFyc2VyLCB7XG4gICAgY29sczogY29scyxcbiAgICBhZGRKb3Q6IHRydWUsXG4gICAgYWRkRXFuTnVtOiBjb250ZXh0LmVudk5hbWUgPT09IFwiYWxpZ25cIiB8fCBjb250ZXh0LmVudk5hbWUgPT09IFwiYWxpZ25hdFwiLFxuICAgIGVtcHR5U2luZ2xlUm93OiB0cnVlLFxuICAgIGNvbFNlcGFyYXRpb25UeXBlOiBzZXBhcmF0aW9uVHlwZSxcbiAgICBtYXhOdW1Db2xzOiBjb250ZXh0LmVudk5hbWUgPT09IFwic3BsaXRcIiA/IDIgOiB1bmRlZmluZWQsXG4gICAgbGVxbm86IGNvbnRleHQucGFyc2VyLnNldHRpbmdzLmxlcW5vXG4gIH0sIFwiZGlzcGxheVwiKTsgLy8gRGV0ZXJtaW5pbmcgbnVtYmVyIG9mIGNvbHVtbnMuXG4gIC8vIDEuIElmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBnaXZlbiwgd2UgdXNlIGl0IGFzIGEgbnVtYmVyIG9mIGNvbHVtbnMsXG4gIC8vICAgIGFuZCBtYWtlcyBzdXJlIHRoYXQgZWFjaCByb3cgZG9lc24ndCBleGNlZWQgdGhhdCBudW1iZXIuXG4gIC8vIDIuIE90aGVyd2lzZSwganVzdCBjb3VudCBudW1iZXIgb2YgY29sdW1ucyA9IG1heGltdW0gbnVtYmVyXG4gIC8vICAgIG9mIGNlbGxzIGluIGVhY2ggcm93IChcImFsaWduZWRcIiBtb2RlIC0tIGlzQWxpZ25lZCB3aWxsIGJlIHRydWUpLlxuICAvL1xuICAvLyBBdCB0aGUgc2FtZSB0aW1lLCBwcmVwZW5kIGVtcHR5IGdyb3VwIHt9IGF0IGJlZ2lubmluZyBvZiBldmVyeSBzZWNvbmRcbiAgLy8gY2VsbCBpbiBlYWNoIHJvdyAoc3RhcnRpbmcgd2l0aCBzZWNvbmQgY2VsbCkgc28gdGhhdCBvcGVyYXRvcnMgYmVjb21lXG4gIC8vIGJpbmFyeS4gIFRoaXMgYmVoYXZpb3IgaXMgaW1wbGVtZW50ZWQgaW4gYW1zbWF0aCdzIFxcc3RhcnRAYWxpZ25lZC5cblxuICB2YXIgbnVtTWF0aHM7XG4gIHZhciBudW1Db2xzID0gMDtcbiAgdmFyIGVtcHR5R3JvdXAgPSB7XG4gICAgdHlwZTogXCJvcmRncm91cFwiLFxuICAgIG1vZGU6IGNvbnRleHQubW9kZSxcbiAgICBib2R5OiBbXVxuICB9O1xuXG4gIGlmIChhcmdzWzBdICYmIGFyZ3NbMF0udHlwZSA9PT0gXCJvcmRncm91cFwiKSB7XG4gICAgdmFyIGFyZzAgPSBcIlwiO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzWzBdLmJvZHkubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0ZXh0b3JkID0gYXNzZXJ0Tm9kZVR5cGUoYXJnc1swXS5ib2R5W2ldLCBcInRleHRvcmRcIik7XG4gICAgICBhcmcwICs9IHRleHRvcmQudGV4dDtcbiAgICB9XG5cbiAgICBudW1NYXRocyA9IE51bWJlcihhcmcwKTtcbiAgICBudW1Db2xzID0gbnVtTWF0aHMgKiAyO1xuICB9XG5cbiAgdmFyIGlzQWxpZ25lZCA9ICFudW1Db2xzO1xuICByZXMuYm9keS5mb3JFYWNoKGZ1bmN0aW9uIChyb3cpIHtcbiAgICBmb3IgKHZhciBfaTQgPSAxOyBfaTQgPCByb3cubGVuZ3RoOyBfaTQgKz0gMikge1xuICAgICAgLy8gTW9kaWZ5IG9yZGdyb3VwIG5vZGUgd2l0aGluIHN0eWxpbmcgbm9kZVxuICAgICAgdmFyIHN0eWxpbmcgPSBhc3NlcnROb2RlVHlwZShyb3dbX2k0XSwgXCJzdHlsaW5nXCIpO1xuICAgICAgdmFyIG9yZGdyb3VwID0gYXNzZXJ0Tm9kZVR5cGUoc3R5bGluZy5ib2R5WzBdLCBcIm9yZGdyb3VwXCIpO1xuICAgICAgb3JkZ3JvdXAuYm9keS51bnNoaWZ0KGVtcHR5R3JvdXApO1xuICAgIH1cblxuICAgIGlmICghaXNBbGlnbmVkKSB7XG4gICAgICAvLyBDYXNlIDFcbiAgICAgIHZhciBjdXJNYXRocyA9IHJvdy5sZW5ndGggLyAyO1xuXG4gICAgICBpZiAobnVtTWF0aHMgPCBjdXJNYXRocykge1xuICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJUb28gbWFueSBtYXRoIGluIGEgcm93OiBcIiArIChcImV4cGVjdGVkIFwiICsgbnVtTWF0aHMgKyBcIiwgYnV0IGdvdCBcIiArIGN1ck1hdGhzKSwgcm93WzBdKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG51bUNvbHMgPCByb3cubGVuZ3RoKSB7XG4gICAgICAvLyBDYXNlIDJcbiAgICAgIG51bUNvbHMgPSByb3cubGVuZ3RoO1xuICAgIH1cbiAgfSk7IC8vIEFkanVzdGluZyBhbGlnbm1lbnQuXG4gIC8vIEluIGFsaWduZWQgbW9kZSwgd2UgYWRkIG9uZSBcXHFxdWFkIGJldHdlZW4gY29sdW1ucztcbiAgLy8gb3RoZXJ3aXNlIHdlIGFkZCBub3RoaW5nLlxuXG4gIGZvciAodmFyIF9pNSA9IDA7IF9pNSA8IG51bUNvbHM7ICsrX2k1KSB7XG4gICAgdmFyIGFsaWduID0gXCJyXCI7XG4gICAgdmFyIHByZWdhcCA9IDA7XG5cbiAgICBpZiAoX2k1ICUgMiA9PT0gMSkge1xuICAgICAgYWxpZ24gPSBcImxcIjtcbiAgICB9IGVsc2UgaWYgKF9pNSA+IDAgJiYgaXNBbGlnbmVkKSB7XG4gICAgICAvLyBcImFsaWduZWRcIiBtb2RlLlxuICAgICAgcHJlZ2FwID0gMTsgLy8gYWRkIG9uZSBcXHF1YWRcbiAgICB9XG5cbiAgICBjb2xzW19pNV0gPSB7XG4gICAgICB0eXBlOiBcImFsaWduXCIsXG4gICAgICBhbGlnbjogYWxpZ24sXG4gICAgICBwcmVnYXA6IHByZWdhcCxcbiAgICAgIHBvc3RnYXA6IDBcbiAgICB9O1xuICB9XG5cbiAgcmVzLmNvbFNlcGFyYXRpb25UeXBlID0gaXNBbGlnbmVkID8gXCJhbGlnblwiIDogXCJhbGlnbmF0XCI7XG4gIHJldHVybiByZXM7XG59OyAvLyBBcnJheXMgYXJlIHBhcnQgb2YgTGFUZVgsIGRlZmluZWQgaW4gbHR0YWIuZHR4IHNvIGl0cyBkb2N1bWVudGF0aW9uXG4vLyBpcyBwYXJ0IG9mIHRoZSBzb3VyY2UyZS5wZGYgZmlsZSBvZiBMYVRlWDJlIHNvdXJjZSBkb2N1bWVudGF0aW9uLlxuLy8ge2RhcnJheX0gaXMgYW4ge2FycmF5fSBlbnZpcm9ubWVudCB3aGVyZSBjZWxscyBhcmUgc2V0IGluIFxcZGlzcGxheXN0eWxlLFxuLy8gYXMgZGVmaW5lZCBpbiBuY2NtYXRoLnN0eS5cblxuXG5kZWZpbmVFbnZpcm9ubWVudCh7XG4gIHR5cGU6IFwiYXJyYXlcIixcbiAgbmFtZXM6IFtcImFycmF5XCIsIFwiZGFycmF5XCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDFcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihjb250ZXh0LCBhcmdzKSB7XG4gICAgLy8gU2luY2Ugbm8gdHlwZXMgYXJlIHNwZWNpZmllZCBhYm92ZSwgdGhlIHR3byBwb3NzaWJpbGl0aWVzIGFyZVxuICAgIC8vIC0gVGhlIGFyZ3VtZW50IGlzIHdyYXBwZWQgaW4ge30gb3IgW10sIGluIHdoaWNoIGNhc2UgUGFyc2VyJ3NcbiAgICAvLyAgIHBhcnNlR3JvdXAoKSByZXR1cm5zIGFuIFwib3JkZ3JvdXBcIiB3cmFwcGluZyBzb21lIHN5bWJvbCBub2RlLlxuICAgIC8vIC0gVGhlIGFyZ3VtZW50IGlzIGEgYmFyZSBzeW1ib2wgbm9kZS5cbiAgICB2YXIgc3ltTm9kZSA9IGNoZWNrU3ltYm9sTm9kZVR5cGUoYXJnc1swXSk7XG4gICAgdmFyIGNvbGFsaWduID0gc3ltTm9kZSA/IFthcmdzWzBdXSA6IGFzc2VydE5vZGVUeXBlKGFyZ3NbMF0sIFwib3JkZ3JvdXBcIikuYm9keTtcbiAgICB2YXIgY29scyA9IGNvbGFsaWduLm1hcChmdW5jdGlvbiAobmRlKSB7XG4gICAgICB2YXIgbm9kZSA9IGFzc2VydFN5bWJvbE5vZGVUeXBlKG5kZSk7XG4gICAgICB2YXIgY2EgPSBub2RlLnRleHQ7XG5cbiAgICAgIGlmIChcImxjclwiLmluZGV4T2YoY2EpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IFwiYWxpZ25cIixcbiAgICAgICAgICBhbGlnbjogY2FcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoY2EgPT09IFwifFwiKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdHlwZTogXCJzZXBhcmF0b3JcIixcbiAgICAgICAgICBzZXBhcmF0b3I6IFwifFwiXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKGNhID09PSBcIjpcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IFwic2VwYXJhdG9yXCIsXG4gICAgICAgICAgc2VwYXJhdG9yOiBcIjpcIlxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJVbmtub3duIGNvbHVtbiBhbGlnbm1lbnQ6IFwiICsgY2EsIG5kZSk7XG4gICAgfSk7XG4gICAgdmFyIHJlcyA9IHtcbiAgICAgIGNvbHM6IGNvbHMsXG4gICAgICBoc2tpcEJlZm9yZUFuZEFmdGVyOiB0cnVlLFxuICAgICAgLy8gXFxAcHJlYW1ibGUgaW4gbHR0YWIuZHR4XG4gICAgICBtYXhOdW1Db2xzOiBjb2xzLmxlbmd0aFxuICAgIH07XG4gICAgcmV0dXJuIHBhcnNlQXJyYXkoY29udGV4dC5wYXJzZXIsIHJlcywgZENlbGxTdHlsZShjb250ZXh0LmVudk5hbWUpKTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGFycmF5X2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBhcnJheV9tYXRobWxCdWlsZGVyXG59KTsgLy8gVGhlIG1hdHJpeCBlbnZpcm9ubWVudHMgb2YgYW1zbWF0aCBidWlsZHMgb24gdGhlIGFycmF5IGVudmlyb25tZW50XG4vLyBvZiBMYVRlWCwgd2hpY2ggaXMgZGlzY3Vzc2VkIGFib3ZlLlxuLy8gVGhlIG1hdGh0b29scyBwYWNrYWdlIGFkZHMgc3RhcnJlZCB2ZXJzaW9ucyBvZiB0aGUgc2FtZSBlbnZpcm9ubWVudHMuXG4vLyBUaGVzZSBoYXZlIGFuIG9wdGlvbmFsIGFyZ3VtZW50IHRvIGNob29zZSBsZWZ0fGNlbnRlcnxyaWdodCBqdXN0aWZpY2F0aW9uLlxuXG5kZWZpbmVFbnZpcm9ubWVudCh7XG4gIHR5cGU6IFwiYXJyYXlcIixcbiAgbmFtZXM6IFtcIm1hdHJpeFwiLCBcInBtYXRyaXhcIiwgXCJibWF0cml4XCIsIFwiQm1hdHJpeFwiLCBcInZtYXRyaXhcIiwgXCJWbWF0cml4XCIsIFwibWF0cml4KlwiLCBcInBtYXRyaXgqXCIsIFwiYm1hdHJpeCpcIiwgXCJCbWF0cml4KlwiLCBcInZtYXRyaXgqXCIsIFwiVm1hdHJpeCpcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMFxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKGNvbnRleHQpIHtcbiAgICB2YXIgZGVsaW1pdGVycyA9IHtcbiAgICAgIFwibWF0cml4XCI6IG51bGwsXG4gICAgICBcInBtYXRyaXhcIjogW1wiKFwiLCBcIilcIl0sXG4gICAgICBcImJtYXRyaXhcIjogW1wiW1wiLCBcIl1cIl0sXG4gICAgICBcIkJtYXRyaXhcIjogW1wiXFxcXHtcIiwgXCJcXFxcfVwiXSxcbiAgICAgIFwidm1hdHJpeFwiOiBbXCJ8XCIsIFwifFwiXSxcbiAgICAgIFwiVm1hdHJpeFwiOiBbXCJcXFxcVmVydFwiLCBcIlxcXFxWZXJ0XCJdXG4gICAgfVtjb250ZXh0LmVudk5hbWUucmVwbGFjZShcIipcIiwgXCJcIildOyAvLyBcXGhza2lwIC1cXGFycmF5Y29sc2VwIGluIGFtc21hdGhcblxuICAgIHZhciBjb2xBbGlnbiA9IFwiY1wiO1xuICAgIHZhciBwYXlsb2FkID0ge1xuICAgICAgaHNraXBCZWZvcmVBbmRBZnRlcjogZmFsc2UsXG4gICAgICBjb2xzOiBbe1xuICAgICAgICB0eXBlOiBcImFsaWduXCIsXG4gICAgICAgIGFsaWduOiBjb2xBbGlnblxuICAgICAgfV1cbiAgICB9O1xuXG4gICAgaWYgKGNvbnRleHQuZW52TmFtZS5jaGFyQXQoY29udGV4dC5lbnZOYW1lLmxlbmd0aCAtIDEpID09PSBcIipcIikge1xuICAgICAgLy8gSXQncyBvbmUgb2YgdGhlIG1hdGh0b29scyBzdGFycmVkIGZ1bmN0aW9ucy5cbiAgICAgIC8vIFBhcnNlIHRoZSBvcHRpb25hbCBhbGlnbm1lbnQgYXJndW1lbnQuXG4gICAgICB2YXIgcGFyc2VyID0gY29udGV4dC5wYXJzZXI7XG4gICAgICBwYXJzZXIuY29uc3VtZVNwYWNlcygpO1xuXG4gICAgICBpZiAocGFyc2VyLmZldGNoKCkudGV4dCA9PT0gXCJbXCIpIHtcbiAgICAgICAgcGFyc2VyLmNvbnN1bWUoKTtcbiAgICAgICAgcGFyc2VyLmNvbnN1bWVTcGFjZXMoKTtcbiAgICAgICAgY29sQWxpZ24gPSBwYXJzZXIuZmV0Y2goKS50ZXh0O1xuXG4gICAgICAgIGlmIChcImxjclwiLmluZGV4T2YoY29sQWxpZ24pID09PSAtMSkge1xuICAgICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkV4cGVjdGVkIGwgb3IgYyBvciByXCIsIHBhcnNlci5uZXh0VG9rZW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VyLmNvbnN1bWUoKTtcbiAgICAgICAgcGFyc2VyLmNvbnN1bWVTcGFjZXMoKTtcbiAgICAgICAgcGFyc2VyLmV4cGVjdChcIl1cIik7XG4gICAgICAgIHBhcnNlci5jb25zdW1lKCk7XG4gICAgICAgIHBheWxvYWQuY29scyA9IFt7XG4gICAgICAgICAgdHlwZTogXCJhbGlnblwiLFxuICAgICAgICAgIGFsaWduOiBjb2xBbGlnblxuICAgICAgICB9XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVzID0gcGFyc2VBcnJheShjb250ZXh0LnBhcnNlciwgcGF5bG9hZCwgZENlbGxTdHlsZShjb250ZXh0LmVudk5hbWUpKTsgLy8gUG9wdWxhdGUgY29scyB3aXRoIHRoZSBjb3JyZWN0IG51bWJlciBvZiBjb2x1bW4gYWxpZ25tZW50IHNwZWNzLlxuXG4gICAgdmFyIG51bUNvbHMgPSBNYXRoLm1heC5hcHBseShNYXRoLCBbMF0uY29uY2F0KHJlcy5ib2R5Lm1hcChmdW5jdGlvbiAocm93KSB7XG4gICAgICByZXR1cm4gcm93Lmxlbmd0aDtcbiAgICB9KSkpO1xuICAgIHJlcy5jb2xzID0gbmV3IEFycmF5KG51bUNvbHMpLmZpbGwoe1xuICAgICAgdHlwZTogXCJhbGlnblwiLFxuICAgICAgYWxpZ246IGNvbEFsaWduXG4gICAgfSk7XG4gICAgcmV0dXJuIGRlbGltaXRlcnMgPyB7XG4gICAgICB0eXBlOiBcImxlZnRyaWdodFwiLFxuICAgICAgbW9kZTogY29udGV4dC5tb2RlLFxuICAgICAgYm9keTogW3Jlc10sXG4gICAgICBsZWZ0OiBkZWxpbWl0ZXJzWzBdLFxuICAgICAgcmlnaHQ6IGRlbGltaXRlcnNbMV0sXG4gICAgICByaWdodENvbG9yOiB1bmRlZmluZWQgLy8gXFxyaWdodCB1bmluZmx1ZW5jZWQgYnkgXFxjb2xvciBpbiBhcnJheVxuXG4gICAgfSA6IHJlcztcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGFycmF5X2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBhcnJheV9tYXRobWxCdWlsZGVyXG59KTtcbmRlZmluZUVudmlyb25tZW50KHtcbiAgdHlwZTogXCJhcnJheVwiLFxuICBuYW1lczogW1wic21hbGxtYXRyaXhcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMFxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKGNvbnRleHQpIHtcbiAgICB2YXIgcGF5bG9hZCA9IHtcbiAgICAgIGFycmF5c3RyZXRjaDogMC41XG4gICAgfTtcbiAgICB2YXIgcmVzID0gcGFyc2VBcnJheShjb250ZXh0LnBhcnNlciwgcGF5bG9hZCwgXCJzY3JpcHRcIik7XG4gICAgcmVzLmNvbFNlcGFyYXRpb25UeXBlID0gXCJzbWFsbFwiO1xuICAgIHJldHVybiByZXM7XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBhcnJheV9odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogYXJyYXlfbWF0aG1sQnVpbGRlclxufSk7XG5kZWZpbmVFbnZpcm9ubWVudCh7XG4gIHR5cGU6IFwiYXJyYXlcIixcbiAgbmFtZXM6IFtcInN1YmFycmF5XCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDFcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihjb250ZXh0LCBhcmdzKSB7XG4gICAgLy8gUGFyc2luZyBvZiB7c3ViYXJyYXl9IGlzIHNpbWlsYXIgdG8ge2FycmF5fVxuICAgIHZhciBzeW1Ob2RlID0gY2hlY2tTeW1ib2xOb2RlVHlwZShhcmdzWzBdKTtcbiAgICB2YXIgY29sYWxpZ24gPSBzeW1Ob2RlID8gW2FyZ3NbMF1dIDogYXNzZXJ0Tm9kZVR5cGUoYXJnc1swXSwgXCJvcmRncm91cFwiKS5ib2R5O1xuICAgIHZhciBjb2xzID0gY29sYWxpZ24ubWFwKGZ1bmN0aW9uIChuZGUpIHtcbiAgICAgIHZhciBub2RlID0gYXNzZXJ0U3ltYm9sTm9kZVR5cGUobmRlKTtcbiAgICAgIHZhciBjYSA9IG5vZGUudGV4dDsgLy8ge3N1YmFycmF5fSBvbmx5IHJlY29nbml6ZXMgXCJsXCIgJiBcImNcIlxuXG4gICAgICBpZiAoXCJsY1wiLmluZGV4T2YoY2EpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IFwiYWxpZ25cIixcbiAgICAgICAgICBhbGlnbjogY2FcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiVW5rbm93biBjb2x1bW4gYWxpZ25tZW50OiBcIiArIGNhLCBuZGUpO1xuICAgIH0pO1xuXG4gICAgaWYgKGNvbHMubGVuZ3RoID4gMSkge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwie3N1YmFycmF5fSBjYW4gY29udGFpbiBvbmx5IG9uZSBjb2x1bW5cIik7XG4gICAgfVxuXG4gICAgdmFyIHJlcyA9IHtcbiAgICAgIGNvbHM6IGNvbHMsXG4gICAgICBoc2tpcEJlZm9yZUFuZEFmdGVyOiBmYWxzZSxcbiAgICAgIGFycmF5c3RyZXRjaDogMC41XG4gICAgfTtcbiAgICByZXMgPSBwYXJzZUFycmF5KGNvbnRleHQucGFyc2VyLCByZXMsIFwic2NyaXB0XCIpO1xuXG4gICAgaWYgKHJlcy5ib2R5Lmxlbmd0aCA+IDAgJiYgcmVzLmJvZHlbMF0ubGVuZ3RoID4gMSkge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwie3N1YmFycmF5fSBjYW4gY29udGFpbiBvbmx5IG9uZSBjb2x1bW5cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGFycmF5X2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBhcnJheV9tYXRobWxCdWlsZGVyXG59KTsgLy8gQSBjYXNlcyBlbnZpcm9ubWVudCAoaW4gYW1zbWF0aC5zdHkpIGlzIGFsbW9zdCBlcXVpdmFsZW50IHRvXG4vLyBcXGRlZlxcYXJyYXlzdHJldGNoezEuMn0lXG4vLyBcXGxlZnRcXHtcXGJlZ2lue2FycmF5fXtAe31sQHtcXHF1YWR9bEB7fX0g4oCmIFxcZW5ke2FycmF5fVxccmlnaHQuXG4vLyB7ZGNhc2VzfSBpcyBhIHtjYXNlc30gZW52aXJvbm1lbnQgd2hlcmUgY2VsbHMgYXJlIHNldCBpbiBcXGRpc3BsYXlzdHlsZSxcbi8vIGFzIGRlZmluZWQgaW4gbWF0aHRvb2xzLnN0eS5cbi8vIHtyY2FzZXN9IGlzIGFub3RoZXIgbWF0aHRvb2xzIGVudmlyb25tZW50LiBJdCdzIGJyYWNlIGlzIG9uIHRoZSByaWdodCBzaWRlLlxuXG5kZWZpbmVFbnZpcm9ubWVudCh7XG4gIHR5cGU6IFwiYXJyYXlcIixcbiAgbmFtZXM6IFtcImNhc2VzXCIsIFwiZGNhc2VzXCIsIFwicmNhc2VzXCIsIFwiZHJjYXNlc1wiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAwXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoY29udGV4dCkge1xuICAgIHZhciBwYXlsb2FkID0ge1xuICAgICAgYXJyYXlzdHJldGNoOiAxLjIsXG4gICAgICBjb2xzOiBbe1xuICAgICAgICB0eXBlOiBcImFsaWduXCIsXG4gICAgICAgIGFsaWduOiBcImxcIixcbiAgICAgICAgcHJlZ2FwOiAwLFxuICAgICAgICAvLyBUT0RPKGtldmluYikgZ2V0IHRoZSBjdXJyZW50IHN0eWxlLlxuICAgICAgICAvLyBGb3Igbm93IHdlIHVzZSB0aGUgbWV0cmljcyBmb3IgVEVYVCBzdHlsZSB3aGljaCBpcyB3aGF0IHdlIHdlcmVcbiAgICAgICAgLy8gZG9pbmcgYmVmb3JlLiAgQmVmb3JlIGF0dGVtcHRpbmcgdG8gZ2V0IHRoZSBjdXJyZW50IHN0eWxlIHdlXG4gICAgICAgIC8vIHNob3VsZCBsb29rIGF0IFRlWCdzIGJlaGF2aW9yIGVzcGVjaWFsbHkgZm9yIFxcb3ZlciBhbmQgbWF0cmljZXMuXG4gICAgICAgIHBvc3RnYXA6IDEuMFxuICAgICAgICAvKiAxZW0gcXVhZCAqL1xuXG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwiYWxpZ25cIixcbiAgICAgICAgYWxpZ246IFwibFwiLFxuICAgICAgICBwcmVnYXA6IDAsXG4gICAgICAgIHBvc3RnYXA6IDBcbiAgICAgIH1dXG4gICAgfTtcbiAgICB2YXIgcmVzID0gcGFyc2VBcnJheShjb250ZXh0LnBhcnNlciwgcGF5bG9hZCwgZENlbGxTdHlsZShjb250ZXh0LmVudk5hbWUpKTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJsZWZ0cmlnaHRcIixcbiAgICAgIG1vZGU6IGNvbnRleHQubW9kZSxcbiAgICAgIGJvZHk6IFtyZXNdLFxuICAgICAgbGVmdDogY29udGV4dC5lbnZOYW1lLmluZGV4T2YoXCJyXCIpID4gLTEgPyBcIi5cIiA6IFwiXFxcXHtcIixcbiAgICAgIHJpZ2h0OiBjb250ZXh0LmVudk5hbWUuaW5kZXhPZihcInJcIikgPiAtMSA/IFwiXFxcXH1cIiA6IFwiLlwiLFxuICAgICAgcmlnaHRDb2xvcjogdW5kZWZpbmVkXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGFycmF5X2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBhcnJheV9tYXRobWxCdWlsZGVyXG59KTsgLy8gSW4gdGhlIGFsaWduIGVudmlyb25tZW50LCBvbmUgdXNlcyBhbXBlcnNhbmRzLCAmLCB0byBzcGVjaWZ5IG51bWJlciBvZlxuLy8gY29sdW1ucyBpbiBlYWNoIHJvdywgYW5kIHRvIGxvY2F0ZSBzcGFjaW5nIGJldHdlZW4gZWFjaCBjb2x1bW4uXG4vLyBhbGlnbiBnZXRzIGF1dG9tYXRpYyBudW1iZXJpbmcuIGFsaWduKiBhbmQgYWxpZ25lZCBkbyBub3QuXG4vLyBUaGUgYWxpZ25lZGF0IGVudmlyb25tZW50IGNhbiBiZSB1c2VkIGluIG1hdGggbW9kZS5cbi8vIE5vdGUgdGhhdCB3ZSBhc3N1bWUgXFxub21hbGxpbmVza2lwbGltaXQgdG8gYmUgemVybyxcbi8vIHNvIHRoYXQgXFxzdHJ1dEAgaXMgdGhlIHNhbWUgYXMgXFxzdHJ1dC5cblxuZGVmaW5lRW52aXJvbm1lbnQoe1xuICB0eXBlOiBcImFycmF5XCIsXG4gIG5hbWVzOiBbXCJhbGlnblwiLCBcImFsaWduKlwiLCBcImFsaWduZWRcIiwgXCJzcGxpdFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAwXG4gIH0sXG4gIGhhbmRsZXI6IGFsaWduZWRIYW5kbGVyLFxuICBodG1sQnVpbGRlcjogYXJyYXlfaHRtbEJ1aWxkZXIsXG4gIG1hdGhtbEJ1aWxkZXI6IGFycmF5X21hdGhtbEJ1aWxkZXJcbn0pOyAvLyBBIGdhdGhlcmVkIGVudmlyb25tZW50IGlzIGxpa2UgYW4gYXJyYXkgZW52aXJvbm1lbnQgd2l0aCBvbmUgY2VudGVyZWRcbi8vIGNvbHVtbiwgYnV0IHdoZXJlIHJvd3MgYXJlIGNvbnNpZGVyZWQgbGluZXMgc28gZ2V0IFxcam90IGxpbmUgc3BhY2luZ1xuLy8gYW5kIGNvbnRlbnRzIGFyZSBzZXQgaW4gXFxkaXNwbGF5c3R5bGUuXG5cbmRlZmluZUVudmlyb25tZW50KHtcbiAgdHlwZTogXCJhcnJheVwiLFxuICBuYW1lczogW1wiZ2F0aGVyZWRcIiwgXCJnYXRoZXJcIiwgXCJnYXRoZXIqXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDBcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihjb250ZXh0KSB7XG4gICAgaWYgKHV0aWxzLmNvbnRhaW5zKFtcImdhdGhlclwiLCBcImdhdGhlcipcIl0sIGNvbnRleHQuZW52TmFtZSkpIHtcbiAgICAgIHZhbGlkYXRlQW1zRW52aXJvbm1lbnRDb250ZXh0KGNvbnRleHQpO1xuICAgIH1cblxuICAgIHZhciByZXMgPSB7XG4gICAgICBjb2xzOiBbe1xuICAgICAgICB0eXBlOiBcImFsaWduXCIsXG4gICAgICAgIGFsaWduOiBcImNcIlxuICAgICAgfV0sXG4gICAgICBhZGRKb3Q6IHRydWUsXG4gICAgICBjb2xTZXBhcmF0aW9uVHlwZTogXCJnYXRoZXJcIixcbiAgICAgIGFkZEVxbk51bTogY29udGV4dC5lbnZOYW1lID09PSBcImdhdGhlclwiLFxuICAgICAgZW1wdHlTaW5nbGVSb3c6IHRydWUsXG4gICAgICBsZXFubzogY29udGV4dC5wYXJzZXIuc2V0dGluZ3MubGVxbm9cbiAgICB9O1xuICAgIHJldHVybiBwYXJzZUFycmF5KGNvbnRleHQucGFyc2VyLCByZXMsIFwiZGlzcGxheVwiKTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGFycmF5X2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBhcnJheV9tYXRobWxCdWlsZGVyXG59KTsgLy8gYWxpZ25hdCBlbnZpcm9ubWVudCBpcyBsaWtlIGFuIGFsaWduIGVudmlyb25tZW50LCBidXQgb25lIG11c3QgZXhwbGljaXRseVxuLy8gc3BlY2lmeSBtYXhpbXVtIG51bWJlciBvZiBjb2x1bW5zIGluIGVhY2ggcm93LCBhbmQgY2FuIGFkanVzdCBzcGFjaW5nIGJldHdlZW5cbi8vIGVhY2ggY29sdW1ucy5cblxuZGVmaW5lRW52aXJvbm1lbnQoe1xuICB0eXBlOiBcImFycmF5XCIsXG4gIG5hbWVzOiBbXCJhbGlnbmF0XCIsIFwiYWxpZ25hdCpcIiwgXCJhbGlnbmVkYXRcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMVxuICB9LFxuICBoYW5kbGVyOiBhbGlnbmVkSGFuZGxlcixcbiAgaHRtbEJ1aWxkZXI6IGFycmF5X2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBhcnJheV9tYXRobWxCdWlsZGVyXG59KTtcbmRlZmluZUVudmlyb25tZW50KHtcbiAgdHlwZTogXCJhcnJheVwiLFxuICBuYW1lczogW1wiZXF1YXRpb25cIiwgXCJlcXVhdGlvbipcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMFxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKGNvbnRleHQpIHtcbiAgICB2YWxpZGF0ZUFtc0Vudmlyb25tZW50Q29udGV4dChjb250ZXh0KTtcbiAgICB2YXIgcmVzID0ge1xuICAgICAgYWRkRXFuTnVtOiBjb250ZXh0LmVudk5hbWUgPT09IFwiZXF1YXRpb25cIixcbiAgICAgIGVtcHR5U2luZ2xlUm93OiB0cnVlLFxuICAgICAgc2luZ2xlUm93OiB0cnVlLFxuICAgICAgbWF4TnVtQ29sczogMSxcbiAgICAgIGxlcW5vOiBjb250ZXh0LnBhcnNlci5zZXR0aW5ncy5sZXFub1xuICAgIH07XG4gICAgcmV0dXJuIHBhcnNlQXJyYXkoY29udGV4dC5wYXJzZXIsIHJlcywgXCJkaXNwbGF5XCIpO1xuICB9LFxuICBodG1sQnVpbGRlcjogYXJyYXlfaHRtbEJ1aWxkZXIsXG4gIG1hdGhtbEJ1aWxkZXI6IGFycmF5X21hdGhtbEJ1aWxkZXJcbn0pO1xuZGVmaW5lRW52aXJvbm1lbnQoe1xuICB0eXBlOiBcImFycmF5XCIsXG4gIG5hbWVzOiBbXCJDRFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAwXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoY29udGV4dCkge1xuICAgIHZhbGlkYXRlQW1zRW52aXJvbm1lbnRDb250ZXh0KGNvbnRleHQpO1xuICAgIHJldHVybiBwYXJzZUNEKGNvbnRleHQucGFyc2VyKTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGFycmF5X2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBhcnJheV9tYXRobWxCdWlsZGVyXG59KTsgLy8gQ2F0Y2ggXFxobGluZSBvdXRzaWRlIGFycmF5IGVudmlyb25tZW50XG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJ0ZXh0XCIsXG4gIC8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhpcyBpcy5cbiAgbmFtZXM6IFtcIlxcXFxobGluZVwiLCBcIlxcXFxoZGFzaGxpbmVcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMCxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlLFxuICAgIGFsbG93ZWRJbk1hdGg6IHRydWVcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihjb250ZXh0LCBhcmdzKSB7XG4gICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKGNvbnRleHQuZnVuY05hbWUgKyBcIiB2YWxpZCBvbmx5IHdpdGhpbiBhcnJheSBlbnZpcm9ubWVudFwiKTtcbiAgfVxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZW52aXJvbm1lbnRzLmpzXG5cbnZhciBlbnZpcm9ubWVudHMgPSBfZW52aXJvbm1lbnRzO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgc3JjX2Vudmlyb25tZW50cyA9IChlbnZpcm9ubWVudHMpOyAvLyBBbGwgZW52aXJvbm1lbnQgZGVmaW5pdGlvbnMgc2hvdWxkIGJlIGltcG9ydGVkIGJlbG93XG5cblxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy9lbnZpcm9ubWVudC5qc1xuXG5cblxuIC8vIEVudmlyb25tZW50IGRlbGltaXRlcnMuIEhUTUwvTWF0aE1MIHJlbmRlcmluZyBpcyBkZWZpbmVkIGluIHRoZSBjb3JyZXNwb25kaW5nXG4vLyBkZWZpbmVFbnZpcm9ubWVudCBkZWZpbml0aW9ucy5cblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImVudmlyb25tZW50XCIsXG4gIG5hbWVzOiBbXCJcXFxcYmVnaW5cIiwgXCJcXFxcZW5kXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgYXJnVHlwZXM6IFtcInRleHRcIl1cbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyLFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWYuZnVuY05hbWU7XG4gICAgdmFyIG5hbWVHcm91cCA9IGFyZ3NbMF07XG5cbiAgICBpZiAobmFtZUdyb3VwLnR5cGUgIT09IFwib3JkZ3JvdXBcIikge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiSW52YWxpZCBlbnZpcm9ubWVudCBuYW1lXCIsIG5hbWVHcm91cCk7XG4gICAgfVxuXG4gICAgdmFyIGVudk5hbWUgPSBcIlwiO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYW1lR3JvdXAuYm9keS5sZW5ndGg7ICsraSkge1xuICAgICAgZW52TmFtZSArPSBhc3NlcnROb2RlVHlwZShuYW1lR3JvdXAuYm9keVtpXSwgXCJ0ZXh0b3JkXCIpLnRleHQ7XG4gICAgfVxuXG4gICAgaWYgKGZ1bmNOYW1lID09PSBcIlxcXFxiZWdpblwiKSB7XG4gICAgICAvLyBiZWdpbi4uLmVuZCBpcyBzaW1pbGFyIHRvIGxlZnQuLi5yaWdodFxuICAgICAgaWYgKCFzcmNfZW52aXJvbm1lbnRzLmhhc093blByb3BlcnR5KGVudk5hbWUpKSB7XG4gICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIk5vIHN1Y2ggZW52aXJvbm1lbnQ6IFwiICsgZW52TmFtZSwgbmFtZUdyb3VwKTtcbiAgICAgIH0gLy8gQnVpbGQgdGhlIGVudmlyb25tZW50IG9iamVjdC4gQXJndW1lbnRzIGFuZCBvdGhlciBpbmZvcm1hdGlvbiB3aWxsXG4gICAgICAvLyBiZSBtYWRlIGF2YWlsYWJsZSB0byB0aGUgYmVnaW4gYW5kIGVuZCBtZXRob2RzIHVzaW5nIHByb3BlcnRpZXMuXG5cblxuICAgICAgdmFyIGVudiA9IHNyY19lbnZpcm9ubWVudHNbZW52TmFtZV07XG5cbiAgICAgIHZhciBfcGFyc2VyJHBhcnNlQXJndW1lbnQgPSBwYXJzZXIucGFyc2VBcmd1bWVudHMoXCJcXFxcYmVnaW57XCIgKyBlbnZOYW1lICsgXCJ9XCIsIGVudiksXG4gICAgICAgICAgX2FyZ3MgPSBfcGFyc2VyJHBhcnNlQXJndW1lbnQuYXJncyxcbiAgICAgICAgICBvcHRBcmdzID0gX3BhcnNlciRwYXJzZUFyZ3VtZW50Lm9wdEFyZ3M7XG5cbiAgICAgIHZhciBjb250ZXh0ID0ge1xuICAgICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgICAgZW52TmFtZTogZW52TmFtZSxcbiAgICAgICAgcGFyc2VyOiBwYXJzZXJcbiAgICAgIH07XG4gICAgICB2YXIgcmVzdWx0ID0gZW52LmhhbmRsZXIoY29udGV4dCwgX2FyZ3MsIG9wdEFyZ3MpO1xuICAgICAgcGFyc2VyLmV4cGVjdChcIlxcXFxlbmRcIiwgZmFsc2UpO1xuICAgICAgdmFyIGVuZE5hbWVUb2tlbiA9IHBhcnNlci5uZXh0VG9rZW47XG4gICAgICB2YXIgZW5kID0gYXNzZXJ0Tm9kZVR5cGUocGFyc2VyLnBhcnNlRnVuY3Rpb24oKSwgXCJlbnZpcm9ubWVudFwiKTtcblxuICAgICAgaWYgKGVuZC5uYW1lICE9PSBlbnZOYW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIk1pc21hdGNoOiBcXFxcYmVnaW57XCIgKyBlbnZOYW1lICsgXCJ9IG1hdGNoZWQgYnkgXFxcXGVuZHtcIiArIGVuZC5uYW1lICsgXCJ9XCIsIGVuZE5hbWVUb2tlbik7XG4gICAgICB9IC8vICRGbG93Rml4TWUsIFwiZW52aXJvbm1lbnRcIiBoYW5kbGVyIHJldHVybnMgYW4gZW52aXJvbm1lbnQgUGFyc2VOb2RlXG5cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJlbnZpcm9ubWVudFwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBuYW1lOiBlbnZOYW1lLFxuICAgICAgbmFtZUdyb3VwOiBuYW1lR3JvdXBcbiAgICB9O1xuICB9XG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvbWNsYXNzLmpzXG5cblxuXG5cblxuXG52YXIgbWNsYXNzX21ha2VTcGFuID0gYnVpbGRDb21tb24ubWFrZVNwYW47XG5cbmZ1bmN0aW9uIG1jbGFzc19odG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICB2YXIgZWxlbWVudHMgPSBidWlsZEV4cHJlc3Npb24oZ3JvdXAuYm9keSwgb3B0aW9ucywgdHJ1ZSk7XG4gIHJldHVybiBtY2xhc3NfbWFrZVNwYW4oW2dyb3VwLm1jbGFzc10sIGVsZW1lbnRzLCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gbWNsYXNzX21hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgdmFyIG5vZGU7XG4gIHZhciBpbm5lciA9IGJ1aWxkTWF0aE1MX2J1aWxkRXhwcmVzc2lvbihncm91cC5ib2R5LCBvcHRpb25zKTtcblxuICBpZiAoZ3JvdXAubWNsYXNzID09PSBcIm1pbm5lclwiKSB7XG4gICAgcmV0dXJuIG1hdGhNTFRyZWUubmV3RG9jdW1lbnRGcmFnbWVudChpbm5lcik7XG4gIH0gZWxzZSBpZiAoZ3JvdXAubWNsYXNzID09PSBcIm1vcmRcIikge1xuICAgIGlmIChncm91cC5pc0NoYXJhY3RlckJveCkge1xuICAgICAgbm9kZSA9IGlubmVyWzBdO1xuICAgICAgbm9kZS50eXBlID0gXCJtaVwiO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtaVwiLCBpbm5lcik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChncm91cC5pc0NoYXJhY3RlckJveCkge1xuICAgICAgbm9kZSA9IGlubmVyWzBdO1xuICAgICAgbm9kZS50eXBlID0gXCJtb1wiO1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtb1wiLCBpbm5lcik7XG4gICAgfSAvLyBTZXQgc3BhY2luZyBiYXNlZCBvbiB3aGF0IGlzIHRoZSBtb3N0IGxpa2VseSBhZGphY2VudCBhdG9tIHR5cGUuXG4gICAgLy8gU2VlIFRlWGJvb2sgcDE3MC5cblxuXG4gICAgaWYgKGdyb3VwLm1jbGFzcyA9PT0gXCJtYmluXCIpIHtcbiAgICAgIG5vZGUuYXR0cmlidXRlcy5sc3BhY2UgPSBcIjAuMjJlbVwiOyAvLyBtZWRpdW0gc3BhY2VcblxuICAgICAgbm9kZS5hdHRyaWJ1dGVzLnJzcGFjZSA9IFwiMC4yMmVtXCI7XG4gICAgfSBlbHNlIGlmIChncm91cC5tY2xhc3MgPT09IFwibXB1bmN0XCIpIHtcbiAgICAgIG5vZGUuYXR0cmlidXRlcy5sc3BhY2UgPSBcIjBlbVwiO1xuICAgICAgbm9kZS5hdHRyaWJ1dGVzLnJzcGFjZSA9IFwiMC4xN2VtXCI7IC8vIHRoaW5zcGFjZVxuICAgIH0gZWxzZSBpZiAoZ3JvdXAubWNsYXNzID09PSBcIm1vcGVuXCIgfHwgZ3JvdXAubWNsYXNzID09PSBcIm1jbG9zZVwiKSB7XG4gICAgICBub2RlLmF0dHJpYnV0ZXMubHNwYWNlID0gXCIwZW1cIjtcbiAgICAgIG5vZGUuYXR0cmlidXRlcy5yc3BhY2UgPSBcIjBlbVwiO1xuICAgIH0gLy8gTWF0aE1MIDxtbz4gZGVmYXVsdCBzcGFjZSBpcyA1LzE4IGVtLCBzbyA8bXJlbD4gbmVlZHMgbm8gYWN0aW9uLlxuICAgIC8vIFJlZjogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvTWF0aE1ML0VsZW1lbnQvbW9cblxuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59IC8vIE1hdGggY2xhc3MgY29tbWFuZHMgZXhjZXB0IFxcbWF0aG9wXG5cblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcIm1jbGFzc1wiLFxuICBuYW1lczogW1wiXFxcXG1hdGhvcmRcIiwgXCJcXFxcbWF0aGJpblwiLCBcIlxcXFxtYXRocmVsXCIsIFwiXFxcXG1hdGhvcGVuXCIsIFwiXFxcXG1hdGhjbG9zZVwiLCBcIlxcXFxtYXRocHVuY3RcIiwgXCJcXFxcbWF0aGlubmVyXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgcHJpbWl0aXZlOiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmLnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmLmZ1bmNOYW1lO1xuICAgIHZhciBib2R5ID0gYXJnc1swXTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJtY2xhc3NcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgbWNsYXNzOiBcIm1cIiArIGZ1bmNOYW1lLnN1YnN0cig1KSxcbiAgICAgIC8vIFRPRE8oa2V2aW5iKTogZG9uJ3QgcHJlZml4IHdpdGggJ20nXG4gICAgICBib2R5OiBvcmRhcmd1bWVudChib2R5KSxcbiAgICAgIGlzQ2hhcmFjdGVyQm94OiB1dGlscy5pc0NoYXJhY3RlckJveChib2R5KVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBtY2xhc3NfaHRtbEJ1aWxkZXIsXG4gIG1hdGhtbEJ1aWxkZXI6IG1jbGFzc19tYXRobWxCdWlsZGVyXG59KTtcbnZhciBiaW5yZWxDbGFzcyA9IGZ1bmN0aW9uIGJpbnJlbENsYXNzKGFyZykge1xuICAvLyBcXGJpbnJlbEAgc3BhY2luZyB2YXJpZXMgd2l0aCAoYmlufHJlbHxvcmQpIG9mIHRoZSBhdG9tIGluIHRoZSBhcmd1bWVudC5cbiAgLy8gKGJ5IHJlbmRlcmluZyBzZXBhcmF0ZWx5IGFuZCB3aXRoIHt9cyBiZWZvcmUgYW5kIGFmdGVyLCBhbmQgbWVhc3VyaW5nXG4gIC8vIHRoZSBjaGFuZ2UgaW4gc3BhY2luZykuICBXZSdsbCBkbyByb3VnaGx5IHRoZSBzYW1lIGJ5IGRldGVjdGluZyB0aGVcbiAgLy8gYXRvbSB0eXBlIGRpcmVjdGx5LlxuICB2YXIgYXRvbSA9IGFyZy50eXBlID09PSBcIm9yZGdyb3VwXCIgJiYgYXJnLmJvZHkubGVuZ3RoID8gYXJnLmJvZHlbMF0gOiBhcmc7XG5cbiAgaWYgKGF0b20udHlwZSA9PT0gXCJhdG9tXCIgJiYgKGF0b20uZmFtaWx5ID09PSBcImJpblwiIHx8IGF0b20uZmFtaWx5ID09PSBcInJlbFwiKSkge1xuICAgIHJldHVybiBcIm1cIiArIGF0b20uZmFtaWx5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIm1vcmRcIjtcbiAgfVxufTsgLy8gXFxAYmlucmVse3h9e3l9IHJlbmRlcnMgbGlrZSB5IGJ1dCBhcyBtYmluL21yZWwvbW9yZCBpZiB4IGlzIG1iaW4vbXJlbC9tb3JkLlxuLy8gVGhpcyBpcyBlcXVpdmFsZW50IHRvIFxcYmlucmVsQHt4fVxcYmlucmVsQEB7eX0gaW4gQU1TVGVYLlxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwibWNsYXNzXCIsXG4gIG5hbWVzOiBbXCJcXFxcQGJpbnJlbFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAyXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZjIsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZjIucGFyc2VyO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIm1jbGFzc1wiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBtY2xhc3M6IGJpbnJlbENsYXNzKGFyZ3NbMF0pLFxuICAgICAgYm9keTogb3JkYXJndW1lbnQoYXJnc1sxXSksXG4gICAgICBpc0NoYXJhY3RlckJveDogdXRpbHMuaXNDaGFyYWN0ZXJCb3goYXJnc1sxXSlcbiAgICB9O1xuICB9XG59KTsgLy8gQnVpbGQgYSByZWxhdGlvbiBvciBzdGFja2VkIG9wIGJ5IHBsYWNpbmcgb25lIHN5bWJvbCBvbiB0b3Agb2YgYW5vdGhlclxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwibWNsYXNzXCIsXG4gIG5hbWVzOiBbXCJcXFxcc3RhY2tyZWxcIiwgXCJcXFxcb3ZlcnNldFwiLCBcIlxcXFx1bmRlcnNldFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAyXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZjMsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZjMucGFyc2VyLFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWYzLmZ1bmNOYW1lO1xuICAgIHZhciBiYXNlQXJnID0gYXJnc1sxXTtcbiAgICB2YXIgc2hpZnRlZEFyZyA9IGFyZ3NbMF07XG4gICAgdmFyIG1jbGFzcztcblxuICAgIGlmIChmdW5jTmFtZSAhPT0gXCJcXFxcc3RhY2tyZWxcIikge1xuICAgICAgLy8gTGFUZVggYXBwbGllcyBcXGJpbnJlbCBzcGFjaW5nIHRvIFxcb3ZlcnNldCBhbmQgXFx1bmRlcnNldC5cbiAgICAgIG1jbGFzcyA9IGJpbnJlbENsYXNzKGJhc2VBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtY2xhc3MgPSBcIm1yZWxcIjsgLy8gZm9yIFxcc3RhY2tyZWxcbiAgICB9XG5cbiAgICB2YXIgYmFzZU9wID0ge1xuICAgICAgdHlwZTogXCJvcFwiLFxuICAgICAgbW9kZTogYmFzZUFyZy5tb2RlLFxuICAgICAgbGltaXRzOiB0cnVlLFxuICAgICAgYWx3YXlzSGFuZGxlU3VwU3ViOiB0cnVlLFxuICAgICAgcGFyZW50SXNTdXBTdWI6IGZhbHNlLFxuICAgICAgc3ltYm9sOiBmYWxzZSxcbiAgICAgIHN1cHByZXNzQmFzZVNoaWZ0OiBmdW5jTmFtZSAhPT0gXCJcXFxcc3RhY2tyZWxcIixcbiAgICAgIGJvZHk6IG9yZGFyZ3VtZW50KGJhc2VBcmcpXG4gICAgfTtcbiAgICB2YXIgc3Vwc3ViID0ge1xuICAgICAgdHlwZTogXCJzdXBzdWJcIixcbiAgICAgIG1vZGU6IHNoaWZ0ZWRBcmcubW9kZSxcbiAgICAgIGJhc2U6IGJhc2VPcCxcbiAgICAgIHN1cDogZnVuY05hbWUgPT09IFwiXFxcXHVuZGVyc2V0XCIgPyBudWxsIDogc2hpZnRlZEFyZyxcbiAgICAgIHN1YjogZnVuY05hbWUgPT09IFwiXFxcXHVuZGVyc2V0XCIgPyBzaGlmdGVkQXJnIDogbnVsbFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwibWNsYXNzXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIG1jbGFzczogbWNsYXNzLFxuICAgICAgYm9keTogW3N1cHN1Yl0sXG4gICAgICBpc0NoYXJhY3RlckJveDogdXRpbHMuaXNDaGFyYWN0ZXJCb3goc3Vwc3ViKVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBtY2xhc3NfaHRtbEJ1aWxkZXIsXG4gIG1hdGhtbEJ1aWxkZXI6IG1jbGFzc19tYXRobWxCdWlsZGVyXG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvZm9udC5qc1xuLy8gVE9ETyhrZXZpbmIpOiBpbXBsZW1lbnQgXFxcXHNsIGFuZCBcXFxcc2NcblxuXG5cblxuXG5cbnZhciBmb250X2h0bWxCdWlsZGVyID0gZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgdmFyIGZvbnQgPSBncm91cC5mb250O1xuICB2YXIgbmV3T3B0aW9ucyA9IG9wdGlvbnMud2l0aEZvbnQoZm9udCk7XG4gIHJldHVybiBidWlsZEdyb3VwKGdyb3VwLmJvZHksIG5ld09wdGlvbnMpO1xufTtcblxudmFyIGZvbnRfbWF0aG1sQnVpbGRlciA9IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgdmFyIGZvbnQgPSBncm91cC5mb250O1xuICB2YXIgbmV3T3B0aW9ucyA9IG9wdGlvbnMud2l0aEZvbnQoZm9udCk7XG4gIHJldHVybiBidWlsZE1hdGhNTF9idWlsZEdyb3VwKGdyb3VwLmJvZHksIG5ld09wdGlvbnMpO1xufTtcblxudmFyIGZvbnRBbGlhc2VzID0ge1xuICBcIlxcXFxCYmJcIjogXCJcXFxcbWF0aGJiXCIsXG4gIFwiXFxcXGJvbGRcIjogXCJcXFxcbWF0aGJmXCIsXG4gIFwiXFxcXGZyYWtcIjogXCJcXFxcbWF0aGZyYWtcIixcbiAgXCJcXFxcYm1cIjogXCJcXFxcYm9sZHN5bWJvbFwiXG59O1xuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImZvbnRcIixcbiAgbmFtZXM6IFsvLyBzdHlsZXMsIGV4Y2VwdCBcXGJvbGRzeW1ib2wgZGVmaW5lZCBiZWxvd1xuICBcIlxcXFxtYXRocm1cIiwgXCJcXFxcbWF0aGl0XCIsIFwiXFxcXG1hdGhiZlwiLCBcIlxcXFxtYXRobm9ybWFsXCIsIC8vIGZhbWlsaWVzXG4gIFwiXFxcXG1hdGhiYlwiLCBcIlxcXFxtYXRoY2FsXCIsIFwiXFxcXG1hdGhmcmFrXCIsIFwiXFxcXG1hdGhzY3JcIiwgXCJcXFxcbWF0aHNmXCIsIFwiXFxcXG1hdGh0dFwiLCAvLyBhbGlhc2VzLCBleGNlcHQgXFxibSBkZWZpbmVkIGJlbG93XG4gIFwiXFxcXEJiYlwiLCBcIlxcXFxib2xkXCIsIFwiXFxcXGZyYWtcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMSxcbiAgICBhbGxvd2VkSW5Bcmd1bWVudDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXIsXG4gICAgICAgIGZ1bmNOYW1lID0gX3JlZi5mdW5jTmFtZTtcbiAgICB2YXIgYm9keSA9IG5vcm1hbGl6ZUFyZ3VtZW50KGFyZ3NbMF0pO1xuICAgIHZhciBmdW5jID0gZnVuY05hbWU7XG5cbiAgICBpZiAoZnVuYyBpbiBmb250QWxpYXNlcykge1xuICAgICAgZnVuYyA9IGZvbnRBbGlhc2VzW2Z1bmNdO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImZvbnRcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgZm9udDogZnVuYy5zbGljZSgxKSxcbiAgICAgIGJvZHk6IGJvZHlcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZm9udF9odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogZm9udF9tYXRobWxCdWlsZGVyXG59KTtcbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJtY2xhc3NcIixcbiAgbmFtZXM6IFtcIlxcXFxib2xkc3ltYm9sXCIsIFwiXFxcXGJtXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDFcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmMiwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmMi5wYXJzZXI7XG4gICAgdmFyIGJvZHkgPSBhcmdzWzBdO1xuICAgIHZhciBpc0NoYXJhY3RlckJveCA9IHV0aWxzLmlzQ2hhcmFjdGVyQm94KGJvZHkpOyAvLyBhbXNic3kuc3R5J3MgXFxib2xkc3ltYm9sIHVzZXMgXFxiaW5yZWwgc3BhY2luZyB0byBpbmhlcml0IHRoZVxuICAgIC8vIGFyZ3VtZW50J3MgYmlufHJlbHxvcmQgc3RhdHVzXG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJtY2xhc3NcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgbWNsYXNzOiBiaW5yZWxDbGFzcyhib2R5KSxcbiAgICAgIGJvZHk6IFt7XG4gICAgICAgIHR5cGU6IFwiZm9udFwiLFxuICAgICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgICAgZm9udDogXCJib2xkc3ltYm9sXCIsXG4gICAgICAgIGJvZHk6IGJvZHlcbiAgICAgIH1dLFxuICAgICAgaXNDaGFyYWN0ZXJCb3g6IGlzQ2hhcmFjdGVyQm94XG4gICAgfTtcbiAgfVxufSk7IC8vIE9sZCBmb250IGNoYW5naW5nIGZ1bmN0aW9uc1xuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiZm9udFwiLFxuICBuYW1lczogW1wiXFxcXHJtXCIsIFwiXFxcXHNmXCIsIFwiXFxcXHR0XCIsIFwiXFxcXGJmXCIsIFwiXFxcXGl0XCIsIFwiXFxcXGNhbFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAwLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWVcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmMywgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmMy5wYXJzZXIsXG4gICAgICAgIGZ1bmNOYW1lID0gX3JlZjMuZnVuY05hbWUsXG4gICAgICAgIGJyZWFrT25Ub2tlblRleHQgPSBfcmVmMy5icmVha09uVG9rZW5UZXh0O1xuICAgIHZhciBtb2RlID0gcGFyc2VyLm1vZGU7XG4gICAgdmFyIGJvZHkgPSBwYXJzZXIucGFyc2VFeHByZXNzaW9uKHRydWUsIGJyZWFrT25Ub2tlblRleHQpO1xuICAgIHZhciBzdHlsZSA9IFwibWF0aFwiICsgZnVuY05hbWUuc2xpY2UoMSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiZm9udFwiLFxuICAgICAgbW9kZTogbW9kZSxcbiAgICAgIGZvbnQ6IHN0eWxlLFxuICAgICAgYm9keToge1xuICAgICAgICB0eXBlOiBcIm9yZGdyb3VwXCIsXG4gICAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgICBib2R5OiBib2R5XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGZvbnRfaHRtbEJ1aWxkZXIsXG4gIG1hdGhtbEJ1aWxkZXI6IGZvbnRfbWF0aG1sQnVpbGRlclxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL2dlbmZyYWMuanNcblxuXG5cblxuXG5cblxuXG5cblxuXG52YXIgYWRqdXN0U3R5bGUgPSBmdW5jdGlvbiBhZGp1c3RTdHlsZShzaXplLCBvcmlnaW5hbFN0eWxlKSB7XG4gIC8vIEZpZ3VyZSBvdXQgd2hhdCBzdHlsZSB0aGlzIGZyYWN0aW9uIHNob3VsZCBiZSBpbiBiYXNlZCBvbiB0aGVcbiAgLy8gZnVuY3Rpb24gdXNlZFxuICB2YXIgc3R5bGUgPSBvcmlnaW5hbFN0eWxlO1xuXG4gIGlmIChzaXplID09PSBcImRpc3BsYXlcIikge1xuICAgIC8vIEdldCBkaXNwbGF5IHN0eWxlIGFzIGEgZGVmYXVsdC5cbiAgICAvLyBJZiBpbmNvbWluZyBzdHlsZSBpcyBzdWIvc3VwLCB1c2Ugc3R5bGUudGV4dCgpIHRvIGdldCBjb3JyZWN0IHNpemUuXG4gICAgc3R5bGUgPSBzdHlsZS5pZCA+PSBzcmNfU3R5bGUuU0NSSVBULmlkID8gc3R5bGUudGV4dCgpIDogc3JjX1N0eWxlLkRJU1BMQVk7XG4gIH0gZWxzZSBpZiAoc2l6ZSA9PT0gXCJ0ZXh0XCIgJiYgc3R5bGUuc2l6ZSA9PT0gc3JjX1N0eWxlLkRJU1BMQVkuc2l6ZSkge1xuICAgIC8vIFdlJ3JlIGluIGEgXFx0ZnJhYyBidXQgaW5jb21pbmcgc3R5bGUgaXMgZGlzcGxheXN0eWxlLCBzbzpcbiAgICBzdHlsZSA9IHNyY19TdHlsZS5URVhUO1xuICB9IGVsc2UgaWYgKHNpemUgPT09IFwic2NyaXB0XCIpIHtcbiAgICBzdHlsZSA9IHNyY19TdHlsZS5TQ1JJUFQ7XG4gIH0gZWxzZSBpZiAoc2l6ZSA9PT0gXCJzY3JpcHRzY3JpcHRcIikge1xuICAgIHN0eWxlID0gc3JjX1N0eWxlLlNDUklQVFNDUklQVDtcbiAgfVxuXG4gIHJldHVybiBzdHlsZTtcbn07XG5cbnZhciBnZW5mcmFjX2h0bWxCdWlsZGVyID0gZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgLy8gRnJhY3Rpb25zIGFyZSBoYW5kbGVkIGluIHRoZSBUZVhib29rIG9uIHBhZ2VzIDQ0NC00NDUsIHJ1bGVzIDE1KGEtZSkuXG4gIHZhciBzdHlsZSA9IGFkanVzdFN0eWxlKGdyb3VwLnNpemUsIG9wdGlvbnMuc3R5bGUpO1xuICB2YXIgbnN0eWxlID0gc3R5bGUuZnJhY051bSgpO1xuICB2YXIgZHN0eWxlID0gc3R5bGUuZnJhY0RlbigpO1xuICB2YXIgbmV3T3B0aW9ucztcbiAgbmV3T3B0aW9ucyA9IG9wdGlvbnMuaGF2aW5nU3R5bGUobnN0eWxlKTtcbiAgdmFyIG51bWVybSA9IGJ1aWxkR3JvdXAoZ3JvdXAubnVtZXIsIG5ld09wdGlvbnMsIG9wdGlvbnMpO1xuXG4gIGlmIChncm91cC5jb250aW51ZWQpIHtcbiAgICAvLyBcXGNmcmFjIGluc2VydHMgYSBcXHN0cnV0IGludG8gdGhlIG51bWVyYXRvci5cbiAgICAvLyBHZXQgXFxzdHJ1dCBkaW1lbnNpb25zIGZyb20gVGVYYm9vayBwYWdlIDM1My5cbiAgICB2YXIgaFN0cnV0ID0gOC41IC8gb3B0aW9ucy5mb250TWV0cmljcygpLnB0UGVyRW07XG4gICAgdmFyIGRTdHJ1dCA9IDMuNSAvIG9wdGlvbnMuZm9udE1ldHJpY3MoKS5wdFBlckVtO1xuICAgIG51bWVybS5oZWlnaHQgPSBudW1lcm0uaGVpZ2h0IDwgaFN0cnV0ID8gaFN0cnV0IDogbnVtZXJtLmhlaWdodDtcbiAgICBudW1lcm0uZGVwdGggPSBudW1lcm0uZGVwdGggPCBkU3RydXQgPyBkU3RydXQgOiBudW1lcm0uZGVwdGg7XG4gIH1cblxuICBuZXdPcHRpb25zID0gb3B0aW9ucy5oYXZpbmdTdHlsZShkc3R5bGUpO1xuICB2YXIgZGVub21tID0gYnVpbGRHcm91cChncm91cC5kZW5vbSwgbmV3T3B0aW9ucywgb3B0aW9ucyk7XG4gIHZhciBydWxlO1xuICB2YXIgcnVsZVdpZHRoO1xuICB2YXIgcnVsZVNwYWNpbmc7XG5cbiAgaWYgKGdyb3VwLmhhc0JhckxpbmUpIHtcbiAgICBpZiAoZ3JvdXAuYmFyU2l6ZSkge1xuICAgICAgcnVsZVdpZHRoID0gY2FsY3VsYXRlU2l6ZShncm91cC5iYXJTaXplLCBvcHRpb25zKTtcbiAgICAgIHJ1bGUgPSBidWlsZENvbW1vbi5tYWtlTGluZVNwYW4oXCJmcmFjLWxpbmVcIiwgb3B0aW9ucywgcnVsZVdpZHRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcnVsZSA9IGJ1aWxkQ29tbW9uLm1ha2VMaW5lU3BhbihcImZyYWMtbGluZVwiLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBydWxlV2lkdGggPSBydWxlLmhlaWdodDtcbiAgICBydWxlU3BhY2luZyA9IHJ1bGUuaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIHJ1bGUgPSBudWxsO1xuICAgIHJ1bGVXaWR0aCA9IDA7XG4gICAgcnVsZVNwYWNpbmcgPSBvcHRpb25zLmZvbnRNZXRyaWNzKCkuZGVmYXVsdFJ1bGVUaGlja25lc3M7XG4gIH0gLy8gUnVsZSAxNWJcblxuXG4gIHZhciBudW1TaGlmdDtcbiAgdmFyIGNsZWFyYW5jZTtcbiAgdmFyIGRlbm9tU2hpZnQ7XG5cbiAgaWYgKHN0eWxlLnNpemUgPT09IHNyY19TdHlsZS5ESVNQTEFZLnNpemUgfHwgZ3JvdXAuc2l6ZSA9PT0gXCJkaXNwbGF5XCIpIHtcbiAgICBudW1TaGlmdCA9IG9wdGlvbnMuZm9udE1ldHJpY3MoKS5udW0xO1xuXG4gICAgaWYgKHJ1bGVXaWR0aCA+IDApIHtcbiAgICAgIGNsZWFyYW5jZSA9IDMgKiBydWxlU3BhY2luZztcbiAgICB9IGVsc2Uge1xuICAgICAgY2xlYXJhbmNlID0gNyAqIHJ1bGVTcGFjaW5nO1xuICAgIH1cblxuICAgIGRlbm9tU2hpZnQgPSBvcHRpb25zLmZvbnRNZXRyaWNzKCkuZGVub20xO1xuICB9IGVsc2Uge1xuICAgIGlmIChydWxlV2lkdGggPiAwKSB7XG4gICAgICBudW1TaGlmdCA9IG9wdGlvbnMuZm9udE1ldHJpY3MoKS5udW0yO1xuICAgICAgY2xlYXJhbmNlID0gcnVsZVNwYWNpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG51bVNoaWZ0ID0gb3B0aW9ucy5mb250TWV0cmljcygpLm51bTM7XG4gICAgICBjbGVhcmFuY2UgPSAzICogcnVsZVNwYWNpbmc7XG4gICAgfVxuXG4gICAgZGVub21TaGlmdCA9IG9wdGlvbnMuZm9udE1ldHJpY3MoKS5kZW5vbTI7XG4gIH1cblxuICB2YXIgZnJhYztcblxuICBpZiAoIXJ1bGUpIHtcbiAgICAvLyBSdWxlIDE1Y1xuICAgIHZhciBjYW5kaWRhdGVDbGVhcmFuY2UgPSBudW1TaGlmdCAtIG51bWVybS5kZXB0aCAtIChkZW5vbW0uaGVpZ2h0IC0gZGVub21TaGlmdCk7XG5cbiAgICBpZiAoY2FuZGlkYXRlQ2xlYXJhbmNlIDwgY2xlYXJhbmNlKSB7XG4gICAgICBudW1TaGlmdCArPSAwLjUgKiAoY2xlYXJhbmNlIC0gY2FuZGlkYXRlQ2xlYXJhbmNlKTtcbiAgICAgIGRlbm9tU2hpZnQgKz0gMC41ICogKGNsZWFyYW5jZSAtIGNhbmRpZGF0ZUNsZWFyYW5jZSk7XG4gICAgfVxuXG4gICAgZnJhYyA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICBwb3NpdGlvblR5cGU6IFwiaW5kaXZpZHVhbFNoaWZ0XCIsXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGRlbm9tbSxcbiAgICAgICAgc2hpZnQ6IGRlbm9tU2hpZnRcbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IG51bWVybSxcbiAgICAgICAgc2hpZnQ6IC1udW1TaGlmdFxuICAgICAgfV1cbiAgICB9LCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBSdWxlIDE1ZFxuICAgIHZhciBheGlzSGVpZ2h0ID0gb3B0aW9ucy5mb250TWV0cmljcygpLmF4aXNIZWlnaHQ7XG5cbiAgICBpZiAobnVtU2hpZnQgLSBudW1lcm0uZGVwdGggLSAoYXhpc0hlaWdodCArIDAuNSAqIHJ1bGVXaWR0aCkgPCBjbGVhcmFuY2UpIHtcbiAgICAgIG51bVNoaWZ0ICs9IGNsZWFyYW5jZSAtIChudW1TaGlmdCAtIG51bWVybS5kZXB0aCAtIChheGlzSGVpZ2h0ICsgMC41ICogcnVsZVdpZHRoKSk7XG4gICAgfVxuXG4gICAgaWYgKGF4aXNIZWlnaHQgLSAwLjUgKiBydWxlV2lkdGggLSAoZGVub21tLmhlaWdodCAtIGRlbm9tU2hpZnQpIDwgY2xlYXJhbmNlKSB7XG4gICAgICBkZW5vbVNoaWZ0ICs9IGNsZWFyYW5jZSAtIChheGlzSGVpZ2h0IC0gMC41ICogcnVsZVdpZHRoIC0gKGRlbm9tbS5oZWlnaHQgLSBkZW5vbVNoaWZ0KSk7XG4gICAgfVxuXG4gICAgdmFyIG1pZFNoaWZ0ID0gLShheGlzSGVpZ2h0IC0gMC41ICogcnVsZVdpZHRoKTtcbiAgICBmcmFjID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgIHBvc2l0aW9uVHlwZTogXCJpbmRpdmlkdWFsU2hpZnRcIixcbiAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogZGVub21tLFxuICAgICAgICBzaGlmdDogZGVub21TaGlmdFxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogcnVsZSxcbiAgICAgICAgc2hpZnQ6IG1pZFNoaWZ0XG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBudW1lcm0sXG4gICAgICAgIHNoaWZ0OiAtbnVtU2hpZnRcbiAgICAgIH1dXG4gICAgfSwgb3B0aW9ucyk7XG4gIH0gLy8gU2luY2Ugd2UgbWFudWFsbHkgY2hhbmdlIHRoZSBzdHlsZSBzb21ldGltZXMgKHdpdGggXFxkZnJhYyBvciBcXHRmcmFjKSxcbiAgLy8gYWNjb3VudCBmb3IgdGhlIHBvc3NpYmxlIHNpemUgY2hhbmdlIGhlcmUuXG5cblxuICBuZXdPcHRpb25zID0gb3B0aW9ucy5oYXZpbmdTdHlsZShzdHlsZSk7XG4gIGZyYWMuaGVpZ2h0ICo9IG5ld09wdGlvbnMuc2l6ZU11bHRpcGxpZXIgLyBvcHRpb25zLnNpemVNdWx0aXBsaWVyO1xuICBmcmFjLmRlcHRoICo9IG5ld09wdGlvbnMuc2l6ZU11bHRpcGxpZXIgLyBvcHRpb25zLnNpemVNdWx0aXBsaWVyOyAvLyBSdWxlIDE1ZVxuXG4gIHZhciBkZWxpbVNpemU7XG5cbiAgaWYgKHN0eWxlLnNpemUgPT09IHNyY19TdHlsZS5ESVNQTEFZLnNpemUpIHtcbiAgICBkZWxpbVNpemUgPSBvcHRpb25zLmZvbnRNZXRyaWNzKCkuZGVsaW0xO1xuICB9IGVsc2UgaWYgKHN0eWxlLnNpemUgPT09IHNyY19TdHlsZS5TQ1JJUFRTQ1JJUFQuc2l6ZSkge1xuICAgIGRlbGltU2l6ZSA9IG9wdGlvbnMuaGF2aW5nU3R5bGUoc3JjX1N0eWxlLlNDUklQVCkuZm9udE1ldHJpY3MoKS5kZWxpbTI7XG4gIH0gZWxzZSB7XG4gICAgZGVsaW1TaXplID0gb3B0aW9ucy5mb250TWV0cmljcygpLmRlbGltMjtcbiAgfVxuXG4gIHZhciBsZWZ0RGVsaW07XG4gIHZhciByaWdodERlbGltO1xuXG4gIGlmIChncm91cC5sZWZ0RGVsaW0gPT0gbnVsbCkge1xuICAgIGxlZnREZWxpbSA9IG1ha2VOdWxsRGVsaW1pdGVyKG9wdGlvbnMsIFtcIm1vcGVuXCJdKTtcbiAgfSBlbHNlIHtcbiAgICBsZWZ0RGVsaW0gPSBkZWxpbWl0ZXIuY3VzdG9tU2l6ZWREZWxpbShncm91cC5sZWZ0RGVsaW0sIGRlbGltU2l6ZSwgdHJ1ZSwgb3B0aW9ucy5oYXZpbmdTdHlsZShzdHlsZSksIGdyb3VwLm1vZGUsIFtcIm1vcGVuXCJdKTtcbiAgfVxuXG4gIGlmIChncm91cC5jb250aW51ZWQpIHtcbiAgICByaWdodERlbGltID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW10pOyAvLyB6ZXJvIHdpZHRoIGZvciBcXGNmcmFjXG4gIH0gZWxzZSBpZiAoZ3JvdXAucmlnaHREZWxpbSA9PSBudWxsKSB7XG4gICAgcmlnaHREZWxpbSA9IG1ha2VOdWxsRGVsaW1pdGVyKG9wdGlvbnMsIFtcIm1jbG9zZVwiXSk7XG4gIH0gZWxzZSB7XG4gICAgcmlnaHREZWxpbSA9IGRlbGltaXRlci5jdXN0b21TaXplZERlbGltKGdyb3VwLnJpZ2h0RGVsaW0sIGRlbGltU2l6ZSwgdHJ1ZSwgb3B0aW9ucy5oYXZpbmdTdHlsZShzdHlsZSksIGdyb3VwLm1vZGUsIFtcIm1jbG9zZVwiXSk7XG4gIH1cblxuICByZXR1cm4gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wibW9yZFwiXS5jb25jYXQobmV3T3B0aW9ucy5zaXppbmdDbGFzc2VzKG9wdGlvbnMpKSwgW2xlZnREZWxpbSwgYnVpbGRDb21tb24ubWFrZVNwYW4oW1wibWZyYWNcIl0sIFtmcmFjXSksIHJpZ2h0RGVsaW1dLCBvcHRpb25zKTtcbn07XG5cbnZhciBnZW5mcmFjX21hdGhtbEJ1aWxkZXIgPSBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gIHZhciBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtZnJhY1wiLCBbYnVpbGRNYXRoTUxfYnVpbGRHcm91cChncm91cC5udW1lciwgb3B0aW9ucyksIGJ1aWxkTWF0aE1MX2J1aWxkR3JvdXAoZ3JvdXAuZGVub20sIG9wdGlvbnMpXSk7XG5cbiAgaWYgKCFncm91cC5oYXNCYXJMaW5lKSB7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJsaW5ldGhpY2tuZXNzXCIsIFwiMHB4XCIpO1xuICB9IGVsc2UgaWYgKGdyb3VwLmJhclNpemUpIHtcbiAgICB2YXIgcnVsZVdpZHRoID0gY2FsY3VsYXRlU2l6ZShncm91cC5iYXJTaXplLCBvcHRpb25zKTtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShcImxpbmV0aGlja25lc3NcIiwgcnVsZVdpZHRoICsgXCJlbVwiKTtcbiAgfVxuXG4gIHZhciBzdHlsZSA9IGFkanVzdFN0eWxlKGdyb3VwLnNpemUsIG9wdGlvbnMuc3R5bGUpO1xuXG4gIGlmIChzdHlsZS5zaXplICE9PSBvcHRpb25zLnN0eWxlLnNpemUpIHtcbiAgICBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtc3R5bGVcIiwgW25vZGVdKTtcbiAgICB2YXIgaXNEaXNwbGF5ID0gc3R5bGUuc2l6ZSA9PT0gc3JjX1N0eWxlLkRJU1BMQVkuc2l6ZSA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiO1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiZGlzcGxheXN0eWxlXCIsIGlzRGlzcGxheSk7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJzY3JpcHRsZXZlbFwiLCBcIjBcIik7XG4gIH1cblxuICBpZiAoZ3JvdXAubGVmdERlbGltICE9IG51bGwgfHwgZ3JvdXAucmlnaHREZWxpbSAhPSBudWxsKSB7XG4gICAgdmFyIHdpdGhEZWxpbXMgPSBbXTtcblxuICAgIGlmIChncm91cC5sZWZ0RGVsaW0gIT0gbnVsbCkge1xuICAgICAgdmFyIGxlZnRPcCA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibW9cIiwgW25ldyBtYXRoTUxUcmVlLlRleHROb2RlKGdyb3VwLmxlZnREZWxpbS5yZXBsYWNlKFwiXFxcXFwiLCBcIlwiKSldKTtcbiAgICAgIGxlZnRPcC5zZXRBdHRyaWJ1dGUoXCJmZW5jZVwiLCBcInRydWVcIik7XG4gICAgICB3aXRoRGVsaW1zLnB1c2gobGVmdE9wKTtcbiAgICB9XG5cbiAgICB3aXRoRGVsaW1zLnB1c2gobm9kZSk7XG5cbiAgICBpZiAoZ3JvdXAucmlnaHREZWxpbSAhPSBudWxsKSB7XG4gICAgICB2YXIgcmlnaHRPcCA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibW9cIiwgW25ldyBtYXRoTUxUcmVlLlRleHROb2RlKGdyb3VwLnJpZ2h0RGVsaW0ucmVwbGFjZShcIlxcXFxcIiwgXCJcIikpXSk7XG4gICAgICByaWdodE9wLnNldEF0dHJpYnV0ZShcImZlbmNlXCIsIFwidHJ1ZVwiKTtcbiAgICAgIHdpdGhEZWxpbXMucHVzaChyaWdodE9wKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFrZVJvdyh3aXRoRGVsaW1zKTtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufTtcblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImdlbmZyYWNcIixcbiAgbmFtZXM6IFtcIlxcXFxkZnJhY1wiLCBcIlxcXFxmcmFjXCIsIFwiXFxcXHRmcmFjXCIsIFwiXFxcXGRiaW5vbVwiLCBcIlxcXFxiaW5vbVwiLCBcIlxcXFx0Ymlub21cIiwgXCJcXFxcXFxcXGF0b3BmcmFjXCIsIC8vIGNhbuKAmXQgYmUgZW50ZXJlZCBkaXJlY3RseVxuICBcIlxcXFxcXFxcYnJhY2VmcmFjXCIsIFwiXFxcXFxcXFxicmFja2ZyYWNcIiAvLyBkaXR0b1xuICBdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDIsXG4gICAgYWxsb3dlZEluQXJndW1lbnQ6IHRydWVcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyLFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWYuZnVuY05hbWU7XG4gICAgdmFyIG51bWVyID0gYXJnc1swXTtcbiAgICB2YXIgZGVub20gPSBhcmdzWzFdO1xuICAgIHZhciBoYXNCYXJMaW5lO1xuICAgIHZhciBsZWZ0RGVsaW0gPSBudWxsO1xuICAgIHZhciByaWdodERlbGltID0gbnVsbDtcbiAgICB2YXIgc2l6ZSA9IFwiYXV0b1wiO1xuXG4gICAgc3dpdGNoIChmdW5jTmFtZSkge1xuICAgICAgY2FzZSBcIlxcXFxkZnJhY1wiOlxuICAgICAgY2FzZSBcIlxcXFxmcmFjXCI6XG4gICAgICBjYXNlIFwiXFxcXHRmcmFjXCI6XG4gICAgICAgIGhhc0JhckxpbmUgPSB0cnVlO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIlxcXFxcXFxcYXRvcGZyYWNcIjpcbiAgICAgICAgaGFzQmFyTGluZSA9IGZhbHNlO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIlxcXFxkYmlub21cIjpcbiAgICAgIGNhc2UgXCJcXFxcYmlub21cIjpcbiAgICAgIGNhc2UgXCJcXFxcdGJpbm9tXCI6XG4gICAgICAgIGhhc0JhckxpbmUgPSBmYWxzZTtcbiAgICAgICAgbGVmdERlbGltID0gXCIoXCI7XG4gICAgICAgIHJpZ2h0RGVsaW0gPSBcIilcIjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJcXFxcXFxcXGJyYWNlZnJhY1wiOlxuICAgICAgICBoYXNCYXJMaW5lID0gZmFsc2U7XG4gICAgICAgIGxlZnREZWxpbSA9IFwiXFxcXHtcIjtcbiAgICAgICAgcmlnaHREZWxpbSA9IFwiXFxcXH1cIjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJcXFxcXFxcXGJyYWNrZnJhY1wiOlxuICAgICAgICBoYXNCYXJMaW5lID0gZmFsc2U7XG4gICAgICAgIGxlZnREZWxpbSA9IFwiW1wiO1xuICAgICAgICByaWdodERlbGltID0gXCJdXCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgZ2VuZnJhYyBjb21tYW5kXCIpO1xuICAgIH1cblxuICAgIHN3aXRjaCAoZnVuY05hbWUpIHtcbiAgICAgIGNhc2UgXCJcXFxcZGZyYWNcIjpcbiAgICAgIGNhc2UgXCJcXFxcZGJpbm9tXCI6XG4gICAgICAgIHNpemUgPSBcImRpc3BsYXlcIjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJcXFxcdGZyYWNcIjpcbiAgICAgIGNhc2UgXCJcXFxcdGJpbm9tXCI6XG4gICAgICAgIHNpemUgPSBcInRleHRcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiZ2VuZnJhY1wiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBjb250aW51ZWQ6IGZhbHNlLFxuICAgICAgbnVtZXI6IG51bWVyLFxuICAgICAgZGVub206IGRlbm9tLFxuICAgICAgaGFzQmFyTGluZTogaGFzQmFyTGluZSxcbiAgICAgIGxlZnREZWxpbTogbGVmdERlbGltLFxuICAgICAgcmlnaHREZWxpbTogcmlnaHREZWxpbSxcbiAgICAgIHNpemU6IHNpemUsXG4gICAgICBiYXJTaXplOiBudWxsXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGdlbmZyYWNfaHRtbEJ1aWxkZXIsXG4gIG1hdGhtbEJ1aWxkZXI6IGdlbmZyYWNfbWF0aG1sQnVpbGRlclxufSk7XG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiZ2VuZnJhY1wiLFxuICBuYW1lczogW1wiXFxcXGNmcmFjXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDJcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmMiwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmMi5wYXJzZXIsXG4gICAgICAgIGZ1bmNOYW1lID0gX3JlZjIuZnVuY05hbWU7XG4gICAgdmFyIG51bWVyID0gYXJnc1swXTtcbiAgICB2YXIgZGVub20gPSBhcmdzWzFdO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImdlbmZyYWNcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgY29udGludWVkOiB0cnVlLFxuICAgICAgbnVtZXI6IG51bWVyLFxuICAgICAgZGVub206IGRlbm9tLFxuICAgICAgaGFzQmFyTGluZTogdHJ1ZSxcbiAgICAgIGxlZnREZWxpbTogbnVsbCxcbiAgICAgIHJpZ2h0RGVsaW06IG51bGwsXG4gICAgICBzaXplOiBcImRpc3BsYXlcIixcbiAgICAgIGJhclNpemU6IG51bGxcbiAgICB9O1xuICB9XG59KTsgLy8gSW5maXggZ2VuZXJhbGl6ZWQgZnJhY3Rpb25zIC0tIHRoZXNlIGFyZSBub3QgcmVuZGVyZWQgZGlyZWN0bHksIGJ1dCByZXBsYWNlZFxuLy8gaW1tZWRpYXRlbHkgYnkgb25lIG9mIHRoZSB2YXJpYW50cyBhYm92ZS5cblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImluZml4XCIsXG4gIG5hbWVzOiBbXCJcXFxcb3ZlclwiLCBcIlxcXFxjaG9vc2VcIiwgXCJcXFxcYXRvcFwiLCBcIlxcXFxicmFjZVwiLCBcIlxcXFxicmFja1wiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAwLFxuICAgIGluZml4OiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZjMpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZjMucGFyc2VyLFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWYzLmZ1bmNOYW1lLFxuICAgICAgICB0b2tlbiA9IF9yZWYzLnRva2VuO1xuICAgIHZhciByZXBsYWNlV2l0aDtcblxuICAgIHN3aXRjaCAoZnVuY05hbWUpIHtcbiAgICAgIGNhc2UgXCJcXFxcb3ZlclwiOlxuICAgICAgICByZXBsYWNlV2l0aCA9IFwiXFxcXGZyYWNcIjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJcXFxcY2hvb3NlXCI6XG4gICAgICAgIHJlcGxhY2VXaXRoID0gXCJcXFxcYmlub21cIjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJcXFxcYXRvcFwiOlxuICAgICAgICByZXBsYWNlV2l0aCA9IFwiXFxcXFxcXFxhdG9wZnJhY1wiO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIlxcXFxicmFjZVwiOlxuICAgICAgICByZXBsYWNlV2l0aCA9IFwiXFxcXFxcXFxicmFjZWZyYWNcIjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJcXFxcYnJhY2tcIjpcbiAgICAgICAgcmVwbGFjZVdpdGggPSBcIlxcXFxcXFxcYnJhY2tmcmFjXCI7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnJlY29nbml6ZWQgaW5maXggZ2VuZnJhYyBjb21tYW5kXCIpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImluZml4XCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIHJlcGxhY2VXaXRoOiByZXBsYWNlV2l0aCxcbiAgICAgIHRva2VuOiB0b2tlblxuICAgIH07XG4gIH1cbn0pO1xudmFyIHN0eWxBcnJheSA9IFtcImRpc3BsYXlcIiwgXCJ0ZXh0XCIsIFwic2NyaXB0XCIsIFwic2NyaXB0c2NyaXB0XCJdO1xuXG52YXIgZGVsaW1Gcm9tVmFsdWUgPSBmdW5jdGlvbiBkZWxpbUZyb21WYWx1ZShkZWxpbVN0cmluZykge1xuICB2YXIgZGVsaW0gPSBudWxsO1xuXG4gIGlmIChkZWxpbVN0cmluZy5sZW5ndGggPiAwKSB7XG4gICAgZGVsaW0gPSBkZWxpbVN0cmluZztcbiAgICBkZWxpbSA9IGRlbGltID09PSBcIi5cIiA/IG51bGwgOiBkZWxpbTtcbiAgfVxuXG4gIHJldHVybiBkZWxpbTtcbn07XG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJnZW5mcmFjXCIsXG4gIG5hbWVzOiBbXCJcXFxcZ2VuZnJhY1wiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiA2LFxuICAgIGFsbG93ZWRJbkFyZ3VtZW50OiB0cnVlLFxuICAgIGFyZ1R5cGVzOiBbXCJtYXRoXCIsIFwibWF0aFwiLCBcInNpemVcIiwgXCJ0ZXh0XCIsIFwibWF0aFwiLCBcIm1hdGhcIl1cbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmNCwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmNC5wYXJzZXI7XG4gICAgdmFyIG51bWVyID0gYXJnc1s0XTtcbiAgICB2YXIgZGVub20gPSBhcmdzWzVdOyAvLyBMb29rIGludG8gdGhlIHBhcnNlIG5vZGVzIHRvIGdldCB0aGUgZGVzaXJlZCBkZWxpbWl0ZXJzLlxuXG4gICAgdmFyIGxlZnROb2RlID0gbm9ybWFsaXplQXJndW1lbnQoYXJnc1swXSk7XG4gICAgdmFyIGxlZnREZWxpbSA9IGxlZnROb2RlLnR5cGUgPT09IFwiYXRvbVwiICYmIGxlZnROb2RlLmZhbWlseSA9PT0gXCJvcGVuXCIgPyBkZWxpbUZyb21WYWx1ZShsZWZ0Tm9kZS50ZXh0KSA6IG51bGw7XG4gICAgdmFyIHJpZ2h0Tm9kZSA9IG5vcm1hbGl6ZUFyZ3VtZW50KGFyZ3NbMV0pO1xuICAgIHZhciByaWdodERlbGltID0gcmlnaHROb2RlLnR5cGUgPT09IFwiYXRvbVwiICYmIHJpZ2h0Tm9kZS5mYW1pbHkgPT09IFwiY2xvc2VcIiA/IGRlbGltRnJvbVZhbHVlKHJpZ2h0Tm9kZS50ZXh0KSA6IG51bGw7XG4gICAgdmFyIGJhck5vZGUgPSBhc3NlcnROb2RlVHlwZShhcmdzWzJdLCBcInNpemVcIik7XG4gICAgdmFyIGhhc0JhckxpbmU7XG4gICAgdmFyIGJhclNpemUgPSBudWxsO1xuXG4gICAgaWYgKGJhck5vZGUuaXNCbGFuaykge1xuICAgICAgLy8gXFxnZW5mcmFjIGFjdHMgZGlmZmVyZW50bHkgdGhhbiBcXGFib3ZlLlxuICAgICAgLy8gXFxnZW5mcmFjIHRyZWF0cyBhbiBlbXB0eSBzaXplIGdyb3VwIGFzIGEgc2lnbmFsIHRvIHVzZSBhXG4gICAgICAvLyBzdGFuZGFyZCBiYXIgc2l6ZS4gXFxhYm92ZSB3b3VsZCBzZWUgc2l6ZSA9IDAgYW5kIG9taXQgdGhlIGJhci5cbiAgICAgIGhhc0JhckxpbmUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBiYXJTaXplID0gYmFyTm9kZS52YWx1ZTtcbiAgICAgIGhhc0JhckxpbmUgPSBiYXJTaXplLm51bWJlciA+IDA7XG4gICAgfSAvLyBGaW5kIG91dCBpZiB3ZSB3YW50IGRpc3BsYXlzdHlsZSwgdGV4dHN0eWxlLCBldGMuXG5cblxuICAgIHZhciBzaXplID0gXCJhdXRvXCI7XG4gICAgdmFyIHN0eWwgPSBhcmdzWzNdO1xuXG4gICAgaWYgKHN0eWwudHlwZSA9PT0gXCJvcmRncm91cFwiKSB7XG4gICAgICBpZiAoc3R5bC5ib2R5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIHRleHRPcmQgPSBhc3NlcnROb2RlVHlwZShzdHlsLmJvZHlbMF0sIFwidGV4dG9yZFwiKTtcbiAgICAgICAgc2l6ZSA9IHN0eWxBcnJheVtOdW1iZXIodGV4dE9yZC50ZXh0KV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWwgPSBhc3NlcnROb2RlVHlwZShzdHlsLCBcInRleHRvcmRcIik7XG4gICAgICBzaXplID0gc3R5bEFycmF5W051bWJlcihzdHlsLnRleHQpXTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJnZW5mcmFjXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIG51bWVyOiBudW1lcixcbiAgICAgIGRlbm9tOiBkZW5vbSxcbiAgICAgIGNvbnRpbnVlZDogZmFsc2UsXG4gICAgICBoYXNCYXJMaW5lOiBoYXNCYXJMaW5lLFxuICAgICAgYmFyU2l6ZTogYmFyU2l6ZSxcbiAgICAgIGxlZnREZWxpbTogbGVmdERlbGltLFxuICAgICAgcmlnaHREZWxpbTogcmlnaHREZWxpbSxcbiAgICAgIHNpemU6IHNpemVcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZ2VuZnJhY19odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogZ2VuZnJhY19tYXRobWxCdWlsZGVyXG59KTsgLy8gXFxhYm92ZSBpcyBhbiBpbmZpeCBmcmFjdGlvbiB0aGF0IGFsc28gZGVmaW5lcyBhIGZyYWN0aW9uIGJhciBzaXplLlxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiaW5maXhcIixcbiAgbmFtZXM6IFtcIlxcXFxhYm92ZVwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxLFxuICAgIGFyZ1R5cGVzOiBbXCJzaXplXCJdLFxuICAgIGluZml4OiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZjUsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZjUucGFyc2VyLFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWY1LmZ1bmNOYW1lLFxuICAgICAgICB0b2tlbiA9IF9yZWY1LnRva2VuO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImluZml4XCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIHJlcGxhY2VXaXRoOiBcIlxcXFxcXFxcYWJvdmVmcmFjXCIsXG4gICAgICBzaXplOiBhc3NlcnROb2RlVHlwZShhcmdzWzBdLCBcInNpemVcIikudmFsdWUsXG4gICAgICB0b2tlbjogdG9rZW5cbiAgICB9O1xuICB9XG59KTtcbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJnZW5mcmFjXCIsXG4gIG5hbWVzOiBbXCJcXFxcXFxcXGFib3ZlZnJhY1wiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAzLFxuICAgIGFyZ1R5cGVzOiBbXCJtYXRoXCIsIFwic2l6ZVwiLCBcIm1hdGhcIl1cbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmNiwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmNi5wYXJzZXIsXG4gICAgICAgIGZ1bmNOYW1lID0gX3JlZjYuZnVuY05hbWU7XG4gICAgdmFyIG51bWVyID0gYXJnc1swXTtcbiAgICB2YXIgYmFyU2l6ZSA9IGFzc2VydChhc3NlcnROb2RlVHlwZShhcmdzWzFdLCBcImluZml4XCIpLnNpemUpO1xuICAgIHZhciBkZW5vbSA9IGFyZ3NbMl07XG4gICAgdmFyIGhhc0JhckxpbmUgPSBiYXJTaXplLm51bWJlciA+IDA7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiZ2VuZnJhY1wiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBudW1lcjogbnVtZXIsXG4gICAgICBkZW5vbTogZGVub20sXG4gICAgICBjb250aW51ZWQ6IGZhbHNlLFxuICAgICAgaGFzQmFyTGluZTogaGFzQmFyTGluZSxcbiAgICAgIGJhclNpemU6IGJhclNpemUsXG4gICAgICBsZWZ0RGVsaW06IG51bGwsXG4gICAgICByaWdodERlbGltOiBudWxsLFxuICAgICAgc2l6ZTogXCJhdXRvXCJcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZ2VuZnJhY19odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogZ2VuZnJhY19tYXRobWxCdWlsZGVyXG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvaG9yaXpCcmFjZS5qc1xuXG5cblxuXG5cblxuXG5cbi8vIE5PVEU6IFVubGlrZSBtb3N0IGBodG1sQnVpbGRlcmBzLCB0aGlzIG9uZSBoYW5kbGVzIG5vdCBvbmx5IFwiaG9yaXpCcmFjZVwiLCBidXRcbi8vIGFsc28gXCJzdXBzdWJcIiBzaW5jZSBhbiBvdmVyL3VuZGVyYnJhY2UgY2FuIGFmZmVjdCBzdXBlci9zdWJzY3JpcHRpbmcuXG52YXIgaG9yaXpCcmFjZV9odG1sQnVpbGRlciA9IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdycCwgb3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBvcHRpb25zLnN0eWxlOyAvLyBQdWxsIG91dCB0aGUgYFBhcnNlTm9kZTxcImhvcml6QnJhY2VcIj5gIGlmIGBncnBgIGlzIGEgXCJzdXBzdWJcIiBub2RlLlxuXG4gIHZhciBzdXBTdWJHcm91cDtcbiAgdmFyIGdyb3VwO1xuXG4gIGlmIChncnAudHlwZSA9PT0gXCJzdXBzdWJcIikge1xuICAgIC8vIFJlZjogTGFUZVggc291cmNlMmU6IH19fX1cXGxpbWl0c31cbiAgICAvLyBpLmUuIExhVGVYIHRyZWF0cyB0aGUgYnJhY2Ugc2ltaWxhciB0byBhbiBvcCBhbmQgcGFzc2VzIGl0XG4gICAgLy8gd2l0aCBcXGxpbWl0cywgc28gd2UgbmVlZCB0byBhc3NpZ24gc3Vwc3ViIHN0eWxlLlxuICAgIHN1cFN1Ykdyb3VwID0gZ3JwLnN1cCA/IGJ1aWxkR3JvdXAoZ3JwLnN1cCwgb3B0aW9ucy5oYXZpbmdTdHlsZShzdHlsZS5zdXAoKSksIG9wdGlvbnMpIDogYnVpbGRHcm91cChncnAuc3ViLCBvcHRpb25zLmhhdmluZ1N0eWxlKHN0eWxlLnN1YigpKSwgb3B0aW9ucyk7XG4gICAgZ3JvdXAgPSBhc3NlcnROb2RlVHlwZShncnAuYmFzZSwgXCJob3JpekJyYWNlXCIpO1xuICB9IGVsc2Uge1xuICAgIGdyb3VwID0gYXNzZXJ0Tm9kZVR5cGUoZ3JwLCBcImhvcml6QnJhY2VcIik7XG4gIH0gLy8gQnVpbGQgdGhlIGJhc2UgZ3JvdXBcblxuXG4gIHZhciBib2R5ID0gYnVpbGRHcm91cChncm91cC5iYXNlLCBvcHRpb25zLmhhdmluZ0Jhc2VTdHlsZShzcmNfU3R5bGUuRElTUExBWSkpOyAvLyBDcmVhdGUgdGhlIHN0cmV0Y2h5IGVsZW1lbnRcblxuICB2YXIgYnJhY2VCb2R5ID0gc3RyZXRjaHkuc3ZnU3Bhbihncm91cCwgb3B0aW9ucyk7IC8vIEdlbmVyYXRlIHRoZSB2bGlzdCwgd2l0aCB0aGUgYXBwcm9wcmlhdGUga2VybnMgICAgICAgIOKUj+KUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUk1xuICAvLyBUaGlzIGZpcnN0IHZsaXN0IGNvbnRhaW5zIHRoZSBjb250ZW50IGFuZCB0aGUgYnJhY2U6ICAgZXF1YXRpb25cblxuICB2YXIgdmxpc3Q7XG5cbiAgaWYgKGdyb3VwLmlzT3Zlcikge1xuICAgIHZsaXN0ID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgIHBvc2l0aW9uVHlwZTogXCJmaXJzdEJhc2VsaW5lXCIsXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGJvZHlcbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJrZXJuXCIsXG4gICAgICAgIHNpemU6IDAuMVxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogYnJhY2VCb2R5XG4gICAgICB9XVxuICAgIH0sIG9wdGlvbnMpOyAvLyAkRmxvd0ZpeE1lOiBSZXBsYWNlIHRoaXMgd2l0aCBwYXNzaW5nIFwic3ZnLWFsaWduXCIgaW50byBtYWtlVkxpc3QuXG5cbiAgICB2bGlzdC5jaGlsZHJlblswXS5jaGlsZHJlblswXS5jaGlsZHJlblsxXS5jbGFzc2VzLnB1c2goXCJzdmctYWxpZ25cIik7XG4gIH0gZWxzZSB7XG4gICAgdmxpc3QgPSBidWlsZENvbW1vbi5tYWtlVkxpc3Qoe1xuICAgICAgcG9zaXRpb25UeXBlOiBcImJvdHRvbVwiLFxuICAgICAgcG9zaXRpb25EYXRhOiBib2R5LmRlcHRoICsgMC4xICsgYnJhY2VCb2R5LmhlaWdodCxcbiAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogYnJhY2VCb2R5XG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwia2VyblwiLFxuICAgICAgICBzaXplOiAwLjFcbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGJvZHlcbiAgICAgIH1dXG4gICAgfSwgb3B0aW9ucyk7IC8vICRGbG93Rml4TWU6IFJlcGxhY2UgdGhpcyB3aXRoIHBhc3NpbmcgXCJzdmctYWxpZ25cIiBpbnRvIG1ha2VWTGlzdC5cblxuICAgIHZsaXN0LmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmNoaWxkcmVuWzBdLmNsYXNzZXMucHVzaChcInN2Zy1hbGlnblwiKTtcbiAgfVxuXG4gIGlmIChzdXBTdWJHcm91cCkge1xuICAgIC8vIFRvIHdyaXRlIHRoZSBzdXBzdWIsIHdyYXAgdGhlIGZpcnN0IHZsaXN0IGluIGFub3RoZXIgdmxpc3Q6XG4gICAgLy8gVGhleSBjYW4ndCBhbGwgZ28gaW4gdGhlIHNhbWUgdmxpc3QsIGJlY2F1c2UgdGhlIG5vdGUgbWlnaHQgYmVcbiAgICAvLyB3aWRlciB0aGFuIHRoZSBlcXVhdGlvbi4gV2Ugd2FudCB0aGUgZXF1YXRpb24gdG8gY29udHJvbCB0aGVcbiAgICAvLyBicmFjZSB3aWR0aC5cbiAgICAvLyAgICAgIG5vdGUgICAgICAgICAgbG9uZyBub3RlICAgICAgICAgICBsb25nIG5vdGVcbiAgICAvLyAgIOKUj+KUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUkyAgIG9yICAgIOKUj+KUgeKUgeKUgeKUkyAgICAgbm90ICAgIOKUj+KUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUk1xuICAgIC8vICAgIGVxdWF0aW9uICAgICAgICAgICBlcW4gICAgICAgICAgICAgICAgIGVxblxuICAgIHZhciB2U3BhbiA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcmRcIiwgZ3JvdXAuaXNPdmVyID8gXCJtb3ZlclwiIDogXCJtdW5kZXJcIl0sIFt2bGlzdF0sIG9wdGlvbnMpO1xuXG4gICAgaWYgKGdyb3VwLmlzT3Zlcikge1xuICAgICAgdmxpc3QgPSBidWlsZENvbW1vbi5tYWtlVkxpc3Qoe1xuICAgICAgICBwb3NpdGlvblR5cGU6IFwiZmlyc3RCYXNlbGluZVwiLFxuICAgICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgICBlbGVtOiB2U3BhblxuICAgICAgICB9LCB7XG4gICAgICAgICAgdHlwZTogXCJrZXJuXCIsXG4gICAgICAgICAgc2l6ZTogMC4yXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgICBlbGVtOiBzdXBTdWJHcm91cFxuICAgICAgICB9XVxuICAgICAgfSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZsaXN0ID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgICAgcG9zaXRpb25UeXBlOiBcImJvdHRvbVwiLFxuICAgICAgICBwb3NpdGlvbkRhdGE6IHZTcGFuLmRlcHRoICsgMC4yICsgc3VwU3ViR3JvdXAuaGVpZ2h0ICsgc3VwU3ViR3JvdXAuZGVwdGgsXG4gICAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICAgIGVsZW06IHN1cFN1Ykdyb3VwXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB0eXBlOiBcImtlcm5cIixcbiAgICAgICAgICBzaXplOiAwLjJcbiAgICAgICAgfSwge1xuICAgICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICAgIGVsZW06IHZTcGFuXG4gICAgICAgIH1dXG4gICAgICB9LCBvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wibW9yZFwiLCBncm91cC5pc092ZXIgPyBcIm1vdmVyXCIgOiBcIm11bmRlclwiXSwgW3ZsaXN0XSwgb3B0aW9ucyk7XG59O1xuXG52YXIgaG9yaXpCcmFjZV9tYXRobWxCdWlsZGVyID0gZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICB2YXIgYWNjZW50Tm9kZSA9IHN0cmV0Y2h5Lm1hdGhNTG5vZGUoZ3JvdXAubGFiZWwpO1xuICByZXR1cm4gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoZ3JvdXAuaXNPdmVyID8gXCJtb3ZlclwiIDogXCJtdW5kZXJcIiwgW2J1aWxkTWF0aE1MX2J1aWxkR3JvdXAoZ3JvdXAuYmFzZSwgb3B0aW9ucyksIGFjY2VudE5vZGVdKTtcbn07IC8vIEhvcml6b250YWwgc3RyZXRjaHkgYnJhY2VzXG5cblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImhvcml6QnJhY2VcIixcbiAgbmFtZXM6IFtcIlxcXFxvdmVyYnJhY2VcIiwgXCJcXFxcdW5kZXJicmFjZVwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmLnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmLmZ1bmNOYW1lO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImhvcml6QnJhY2VcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgbGFiZWw6IGZ1bmNOYW1lLFxuICAgICAgaXNPdmVyOiAvXlxcXFxvdmVyLy50ZXN0KGZ1bmNOYW1lKSxcbiAgICAgIGJhc2U6IGFyZ3NbMF1cbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogaG9yaXpCcmFjZV9odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogaG9yaXpCcmFjZV9tYXRobWxCdWlsZGVyXG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvaHJlZi5qc1xuXG5cblxuXG5cblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImhyZWZcIixcbiAgbmFtZXM6IFtcIlxcXFxocmVmXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDIsXG4gICAgYXJnVHlwZXM6IFtcInVybFwiLCBcIm9yaWdpbmFsXCJdLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWVcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyO1xuICAgIHZhciBib2R5ID0gYXJnc1sxXTtcbiAgICB2YXIgaHJlZiA9IGFzc2VydE5vZGVUeXBlKGFyZ3NbMF0sIFwidXJsXCIpLnVybDtcblxuICAgIGlmICghcGFyc2VyLnNldHRpbmdzLmlzVHJ1c3RlZCh7XG4gICAgICBjb21tYW5kOiBcIlxcXFxocmVmXCIsXG4gICAgICB1cmw6IGhyZWZcbiAgICB9KSkge1xuICAgICAgcmV0dXJuIHBhcnNlci5mb3JtYXRVbnN1cHBvcnRlZENtZChcIlxcXFxocmVmXCIpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImhyZWZcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgaHJlZjogaHJlZixcbiAgICAgIGJvZHk6IG9yZGFyZ3VtZW50KGJvZHkpXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIGVsZW1lbnRzID0gYnVpbGRFeHByZXNzaW9uKGdyb3VwLmJvZHksIG9wdGlvbnMsIGZhbHNlKTtcbiAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZUFuY2hvcihncm91cC5ocmVmLCBbXSwgZWxlbWVudHMsIG9wdGlvbnMpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIG1hdGggPSBidWlsZEV4cHJlc3Npb25Sb3coZ3JvdXAuYm9keSwgb3B0aW9ucyk7XG5cbiAgICBpZiAoIShtYXRoIGluc3RhbmNlb2YgTWF0aE5vZGUpKSB7XG4gICAgICBtYXRoID0gbmV3IE1hdGhOb2RlKFwibXJvd1wiLCBbbWF0aF0pO1xuICAgIH1cblxuICAgIG1hdGguc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBncm91cC5ocmVmKTtcbiAgICByZXR1cm4gbWF0aDtcbiAgfVxufSk7XG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiaHJlZlwiLFxuICBuYW1lczogW1wiXFxcXHVybFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxLFxuICAgIGFyZ1R5cGVzOiBbXCJ1cmxcIl0sXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYyLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYyLnBhcnNlcjtcbiAgICB2YXIgaHJlZiA9IGFzc2VydE5vZGVUeXBlKGFyZ3NbMF0sIFwidXJsXCIpLnVybDtcblxuICAgIGlmICghcGFyc2VyLnNldHRpbmdzLmlzVHJ1c3RlZCh7XG4gICAgICBjb21tYW5kOiBcIlxcXFx1cmxcIixcbiAgICAgIHVybDogaHJlZlxuICAgIH0pKSB7XG4gICAgICByZXR1cm4gcGFyc2VyLmZvcm1hdFVuc3VwcG9ydGVkQ21kKFwiXFxcXHVybFwiKTtcbiAgICB9XG5cbiAgICB2YXIgY2hhcnMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaHJlZi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSBocmVmW2ldO1xuXG4gICAgICBpZiAoYyA9PT0gXCJ+XCIpIHtcbiAgICAgICAgYyA9IFwiXFxcXHRleHRhc2NpaXRpbGRlXCI7XG4gICAgICB9XG5cbiAgICAgIGNoYXJzLnB1c2goe1xuICAgICAgICB0eXBlOiBcInRleHRvcmRcIixcbiAgICAgICAgbW9kZTogXCJ0ZXh0XCIsXG4gICAgICAgIHRleHQ6IGNcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBib2R5ID0ge1xuICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGZvbnQ6IFwiXFxcXHRleHR0dFwiLFxuICAgICAgYm9keTogY2hhcnNcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImhyZWZcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgaHJlZjogaHJlZixcbiAgICAgIGJvZHk6IG9yZGFyZ3VtZW50KGJvZHkpXG4gICAgfTtcbiAgfVxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL2hib3guanNcblxuXG5cblxuIC8vIFxcaGJveCBpcyBwcm92aWRlZCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIExhVGVYIFxcdmNlbnRlci5cbi8vIEluIExhVGVYLCBcXHZjZW50ZXIgY2FuIGFjdCBvbmx5IG9uIGEgYm94LCBhcyBpblxuLy8gXFx2Y2VudGVye1xcaGJveHskXFxmcmFje2ErYn17XFxkZnJhY3tjfXtkfX0kfX1cbi8vIFRoaXMgZnVuY3Rpb24gYnkgaXRzZWxmIGRvZXNuJ3QgZG8gYW55dGhpbmcgYnV0IHByZXZlbnQgYSBzb2Z0IGxpbmUgYnJlYWsuXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJoYm94XCIsXG4gIG5hbWVzOiBbXCJcXFxcaGJveFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxLFxuICAgIGFyZ1R5cGVzOiBbXCJ0ZXh0XCJdLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWUsXG4gICAgcHJpbWl0aXZlOiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmLnBhcnNlcjtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJoYm94XCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGJvZHk6IG9yZGFyZ3VtZW50KGFyZ3NbMF0pXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIGVsZW1lbnRzID0gYnVpbGRFeHByZXNzaW9uKGdyb3VwLmJvZHksIG9wdGlvbnMsIGZhbHNlKTtcbiAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZUZyYWdtZW50KGVsZW1lbnRzKTtcbiAgfSxcbiAgbWF0aG1sQnVpbGRlcjogZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1yb3dcIiwgYnVpbGRNYXRoTUxfYnVpbGRFeHByZXNzaW9uKGdyb3VwLmJvZHksIG9wdGlvbnMpKTtcbiAgfVxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL2h0bWwuanNcblxuXG5cblxuXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJodG1sXCIsXG4gIG5hbWVzOiBbXCJcXFxcaHRtbENsYXNzXCIsIFwiXFxcXGh0bWxJZFwiLCBcIlxcXFxodG1sU3R5bGVcIiwgXCJcXFxcaHRtbERhdGFcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMixcbiAgICBhcmdUeXBlczogW1wicmF3XCIsIFwib3JpZ2luYWxcIl0sXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXIsXG4gICAgICAgIGZ1bmNOYW1lID0gX3JlZi5mdW5jTmFtZSxcbiAgICAgICAgdG9rZW4gPSBfcmVmLnRva2VuO1xuICAgIHZhciB2YWx1ZSA9IGFzc2VydE5vZGVUeXBlKGFyZ3NbMF0sIFwicmF3XCIpLnN0cmluZztcbiAgICB2YXIgYm9keSA9IGFyZ3NbMV07XG5cbiAgICBpZiAocGFyc2VyLnNldHRpbmdzLnN0cmljdCkge1xuICAgICAgcGFyc2VyLnNldHRpbmdzLnJlcG9ydE5vbnN0cmljdChcImh0bWxFeHRlbnNpb25cIiwgXCJIVE1MIGV4dGVuc2lvbiBpcyBkaXNhYmxlZCBvbiBzdHJpY3QgbW9kZVwiKTtcbiAgICB9XG5cbiAgICB2YXIgdHJ1c3RDb250ZXh0O1xuICAgIHZhciBhdHRyaWJ1dGVzID0ge307XG5cbiAgICBzd2l0Y2ggKGZ1bmNOYW1lKSB7XG4gICAgICBjYXNlIFwiXFxcXGh0bWxDbGFzc1wiOlxuICAgICAgICBhdHRyaWJ1dGVzLmNsYXNzID0gdmFsdWU7XG4gICAgICAgIHRydXN0Q29udGV4dCA9IHtcbiAgICAgICAgICBjb21tYW5kOiBcIlxcXFxodG1sQ2xhc3NcIixcbiAgICAgICAgICBjbGFzczogdmFsdWVcbiAgICAgICAgfTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJcXFxcaHRtbElkXCI6XG4gICAgICAgIGF0dHJpYnV0ZXMuaWQgPSB2YWx1ZTtcbiAgICAgICAgdHJ1c3RDb250ZXh0ID0ge1xuICAgICAgICAgIGNvbW1hbmQ6IFwiXFxcXGh0bWxJZFwiLFxuICAgICAgICAgIGlkOiB2YWx1ZVxuICAgICAgICB9O1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIlxcXFxodG1sU3R5bGVcIjpcbiAgICAgICAgYXR0cmlidXRlcy5zdHlsZSA9IHZhbHVlO1xuICAgICAgICB0cnVzdENvbnRleHQgPSB7XG4gICAgICAgICAgY29tbWFuZDogXCJcXFxcaHRtbFN0eWxlXCIsXG4gICAgICAgICAgc3R5bGU6IHZhbHVlXG4gICAgICAgIH07XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFwiXFxcXGh0bWxEYXRhXCI6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IHZhbHVlLnNwbGl0KFwiLFwiKTtcblxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGtleVZhbCA9IGRhdGFbaV0uc3BsaXQoXCI9XCIpO1xuXG4gICAgICAgICAgICBpZiAoa2V5VmFsLmxlbmd0aCAhPT0gMikge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJFcnJvciBwYXJzaW5nIGtleS12YWx1ZSBmb3IgXFxcXGh0bWxEYXRhXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhdHRyaWJ1dGVzW1wiZGF0YS1cIiArIGtleVZhbFswXS50cmltKCldID0ga2V5VmFsWzFdLnRyaW0oKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0cnVzdENvbnRleHQgPSB7XG4gICAgICAgICAgICBjb21tYW5kOiBcIlxcXFxodG1sRGF0YVwiLFxuICAgICAgICAgICAgYXR0cmlidXRlczogYXR0cmlidXRlc1xuICAgICAgICAgIH07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIGh0bWwgY29tbWFuZFwiKTtcbiAgICB9XG5cbiAgICBpZiAoIXBhcnNlci5zZXR0aW5ncy5pc1RydXN0ZWQodHJ1c3RDb250ZXh0KSkge1xuICAgICAgcmV0dXJuIHBhcnNlci5mb3JtYXRVbnN1cHBvcnRlZENtZChmdW5jTmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiaHRtbFwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLFxuICAgICAgYm9keTogb3JkYXJndW1lbnQoYm9keSlcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgZWxlbWVudHMgPSBidWlsZEV4cHJlc3Npb24oZ3JvdXAuYm9keSwgb3B0aW9ucywgZmFsc2UpO1xuICAgIHZhciBjbGFzc2VzID0gW1wiZW5jbG9zaW5nXCJdO1xuXG4gICAgaWYgKGdyb3VwLmF0dHJpYnV0ZXMuY2xhc3MpIHtcbiAgICAgIGNsYXNzZXMucHVzaC5hcHBseShjbGFzc2VzLCBncm91cC5hdHRyaWJ1dGVzLmNsYXNzLnRyaW0oKS5zcGxpdCgvXFxzKy8pKTtcbiAgICB9XG5cbiAgICB2YXIgc3BhbiA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKGNsYXNzZXMsIGVsZW1lbnRzLCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIGF0dHIgaW4gZ3JvdXAuYXR0cmlidXRlcykge1xuICAgICAgaWYgKGF0dHIgIT09IFwiY2xhc3NcIiAmJiBncm91cC5hdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGF0dHIpKSB7XG4gICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKGF0dHIsIGdyb3VwLmF0dHJpYnV0ZXNbYXR0cl0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzcGFuO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGJ1aWxkRXhwcmVzc2lvblJvdyhncm91cC5ib2R5LCBvcHRpb25zKTtcbiAgfVxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL2h0bWxtYXRobWwuanNcblxuXG5cblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImh0bWxtYXRobWxcIixcbiAgbmFtZXM6IFtcIlxcXFxodG1sQG1hdGhtbFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAyLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWVcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImh0bWxtYXRobWxcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgaHRtbDogb3JkYXJndW1lbnQoYXJnc1swXSksXG4gICAgICBtYXRobWw6IG9yZGFyZ3VtZW50KGFyZ3NbMV0pXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIGVsZW1lbnRzID0gYnVpbGRFeHByZXNzaW9uKGdyb3VwLmh0bWwsIG9wdGlvbnMsIGZhbHNlKTtcbiAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZUZyYWdtZW50KGVsZW1lbnRzKTtcbiAgfSxcbiAgbWF0aG1sQnVpbGRlcjogZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHJldHVybiBidWlsZEV4cHJlc3Npb25Sb3coZ3JvdXAubWF0aG1sLCBvcHRpb25zKTtcbiAgfVxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL2luY2x1ZGVncmFwaGljcy5qc1xuXG5cblxuXG5cblxuXG52YXIgc2l6ZURhdGEgPSBmdW5jdGlvbiBzaXplRGF0YShzdHIpIHtcbiAgaWYgKC9eWy0rXT8gKihcXGQrKFxcLlxcZCopP3xcXC5cXGQrKSQvLnRlc3Qoc3RyKSkge1xuICAgIC8vIHN0ciBpcyBhIG51bWJlciB3aXRoIG5vIHVuaXQgc3BlY2lmaWVkLlxuICAgIC8vIGRlZmF1bHQgdW5pdCBpcyBicCwgcGVyIGdyYXBoaXggcGFja2FnZS5cbiAgICByZXR1cm4ge1xuICAgICAgbnVtYmVyOiArc3RyLFxuICAgICAgdW5pdDogXCJicFwiXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbWF0Y2ggPSAvKFstK10/KSAqKFxcZCsoPzpcXC5cXGQqKT98XFwuXFxkKykgKihbYS16XXsyfSkvLmV4ZWMoc3RyKTtcblxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkludmFsaWQgc2l6ZTogJ1wiICsgc3RyICsgXCInIGluIFxcXFxpbmNsdWRlZ3JhcGhpY3NcIik7XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB7XG4gICAgICBudW1iZXI6ICsobWF0Y2hbMV0gKyBtYXRjaFsyXSksXG4gICAgICAvLyBzaWduICsgbWFnbml0dWRlLCBjYXN0IHRvIG51bWJlclxuICAgICAgdW5pdDogbWF0Y2hbM11cbiAgICB9O1xuXG4gICAgaWYgKCF2YWxpZFVuaXQoZGF0YSkpIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkludmFsaWQgdW5pdDogJ1wiICsgZGF0YS51bml0ICsgXCInIGluIFxcXFxpbmNsdWRlZ3JhcGhpY3MuXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XG59O1xuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiaW5jbHVkZWdyYXBoaWNzXCIsXG4gIG5hbWVzOiBbXCJcXFxcaW5jbHVkZWdyYXBoaWNzXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgbnVtT3B0aW9uYWxBcmdzOiAxLFxuICAgIGFyZ1R5cGVzOiBbXCJyYXdcIiwgXCJ1cmxcIl0sXG4gICAgYWxsb3dlZEluVGV4dDogZmFsc2VcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzLCBvcHRBcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyO1xuICAgIHZhciB3aWR0aCA9IHtcbiAgICAgIG51bWJlcjogMCxcbiAgICAgIHVuaXQ6IFwiZW1cIlxuICAgIH07XG4gICAgdmFyIGhlaWdodCA9IHtcbiAgICAgIG51bWJlcjogMC45LFxuICAgICAgdW5pdDogXCJlbVwiXG4gICAgfTsgLy8gc29ydGEgY2hhcmFjdGVyIHNpemVkLlxuXG4gICAgdmFyIHRvdGFsaGVpZ2h0ID0ge1xuICAgICAgbnVtYmVyOiAwLFxuICAgICAgdW5pdDogXCJlbVwiXG4gICAgfTtcbiAgICB2YXIgYWx0ID0gXCJcIjtcblxuICAgIGlmIChvcHRBcmdzWzBdKSB7XG4gICAgICB2YXIgYXR0cmlidXRlU3RyID0gYXNzZXJ0Tm9kZVR5cGUob3B0QXJnc1swXSwgXCJyYXdcIikuc3RyaW5nOyAvLyBQYXJzZXIuanMgZG9lcyBub3QgcGFyc2Uga2V5L3ZhbHVlIHBhaXJzLiBXZSBnZXQgYSBzdHJpbmcuXG5cbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gYXR0cmlidXRlU3RyLnNwbGl0KFwiLFwiKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXlWYWwgPSBhdHRyaWJ1dGVzW2ldLnNwbGl0KFwiPVwiKTtcblxuICAgICAgICBpZiAoa2V5VmFsLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgIHZhciBzdHIgPSBrZXlWYWxbMV0udHJpbSgpO1xuXG4gICAgICAgICAgc3dpdGNoIChrZXlWYWxbMF0udHJpbSgpKSB7XG4gICAgICAgICAgICBjYXNlIFwiYWx0XCI6XG4gICAgICAgICAgICAgIGFsdCA9IHN0cjtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJ3aWR0aFwiOlxuICAgICAgICAgICAgICB3aWR0aCA9IHNpemVEYXRhKHN0cik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwiaGVpZ2h0XCI6XG4gICAgICAgICAgICAgIGhlaWdodCA9IHNpemVEYXRhKHN0cik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwidG90YWxoZWlnaHRcIjpcbiAgICAgICAgICAgICAgdG90YWxoZWlnaHQgPSBzaXplRGF0YShzdHIpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiSW52YWxpZCBrZXk6ICdcIiArIGtleVZhbFswXSArIFwiJyBpbiBcXFxcaW5jbHVkZWdyYXBoaWNzLlwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc3JjID0gYXNzZXJ0Tm9kZVR5cGUoYXJnc1swXSwgXCJ1cmxcIikudXJsO1xuXG4gICAgaWYgKGFsdCA9PT0gXCJcIikge1xuICAgICAgLy8gTm8gYWx0IGdpdmVuLiBVc2UgdGhlIGZpbGUgbmFtZS4gU3RyaXAgYXdheSB0aGUgcGF0aC5cbiAgICAgIGFsdCA9IHNyYztcbiAgICAgIGFsdCA9IGFsdC5yZXBsYWNlKC9eLipbXFxcXC9dLywgJycpO1xuICAgICAgYWx0ID0gYWx0LnN1YnN0cmluZygwLCBhbHQubGFzdEluZGV4T2YoJy4nKSk7XG4gICAgfVxuXG4gICAgaWYgKCFwYXJzZXIuc2V0dGluZ3MuaXNUcnVzdGVkKHtcbiAgICAgIGNvbW1hbmQ6IFwiXFxcXGluY2x1ZGVncmFwaGljc1wiLFxuICAgICAgdXJsOiBzcmNcbiAgICB9KSkge1xuICAgICAgcmV0dXJuIHBhcnNlci5mb3JtYXRVbnN1cHBvcnRlZENtZChcIlxcXFxpbmNsdWRlZ3JhcGhpY3NcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwiaW5jbHVkZWdyYXBoaWNzXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGFsdDogYWx0LFxuICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICB0b3RhbGhlaWdodDogdG90YWxoZWlnaHQsXG4gICAgICBzcmM6IHNyY1xuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBoZWlnaHQgPSBjYWxjdWxhdGVTaXplKGdyb3VwLmhlaWdodCwgb3B0aW9ucyk7XG4gICAgdmFyIGRlcHRoID0gMDtcblxuICAgIGlmIChncm91cC50b3RhbGhlaWdodC5udW1iZXIgPiAwKSB7XG4gICAgICBkZXB0aCA9IGNhbGN1bGF0ZVNpemUoZ3JvdXAudG90YWxoZWlnaHQsIG9wdGlvbnMpIC0gaGVpZ2h0O1xuICAgICAgZGVwdGggPSBOdW1iZXIoZGVwdGgudG9GaXhlZCgyKSk7XG4gICAgfVxuXG4gICAgdmFyIHdpZHRoID0gMDtcblxuICAgIGlmIChncm91cC53aWR0aC5udW1iZXIgPiAwKSB7XG4gICAgICB3aWR0aCA9IGNhbGN1bGF0ZVNpemUoZ3JvdXAud2lkdGgsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHZhciBzdHlsZSA9IHtcbiAgICAgIGhlaWdodDogaGVpZ2h0ICsgZGVwdGggKyBcImVtXCJcbiAgICB9O1xuXG4gICAgaWYgKHdpZHRoID4gMCkge1xuICAgICAgc3R5bGUud2lkdGggPSB3aWR0aCArIFwiZW1cIjtcbiAgICB9XG5cbiAgICBpZiAoZGVwdGggPiAwKSB7XG4gICAgICBzdHlsZS52ZXJ0aWNhbEFsaWduID0gLWRlcHRoICsgXCJlbVwiO1xuICAgIH1cblxuICAgIHZhciBub2RlID0gbmV3IEltZyhncm91cC5zcmMsIGdyb3VwLmFsdCwgc3R5bGUpO1xuICAgIG5vZGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIG5vZGUuZGVwdGggPSBkZXB0aDtcbiAgICByZXR1cm4gbm9kZTtcbiAgfSxcbiAgbWF0aG1sQnVpbGRlcjogZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtZ2x5cGhcIiwgW10pO1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiYWx0XCIsIGdyb3VwLmFsdCk7XG4gICAgdmFyIGhlaWdodCA9IGNhbGN1bGF0ZVNpemUoZ3JvdXAuaGVpZ2h0LCBvcHRpb25zKTtcbiAgICB2YXIgZGVwdGggPSAwO1xuXG4gICAgaWYgKGdyb3VwLnRvdGFsaGVpZ2h0Lm51bWJlciA+IDApIHtcbiAgICAgIGRlcHRoID0gY2FsY3VsYXRlU2l6ZShncm91cC50b3RhbGhlaWdodCwgb3B0aW9ucykgLSBoZWlnaHQ7XG4gICAgICBkZXB0aCA9IGRlcHRoLnRvRml4ZWQoMik7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcInZhbGlnblwiLCBcIi1cIiArIGRlcHRoICsgXCJlbVwiKTtcbiAgICB9XG5cbiAgICBub2RlLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBoZWlnaHQgKyBkZXB0aCArIFwiZW1cIik7XG5cbiAgICBpZiAoZ3JvdXAud2lkdGgubnVtYmVyID4gMCkge1xuICAgICAgdmFyIHdpZHRoID0gY2FsY3VsYXRlU2l6ZShncm91cC53aWR0aCwgb3B0aW9ucyk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIHdpZHRoICsgXCJlbVwiKTtcbiAgICB9XG5cbiAgICBub2RlLnNldEF0dHJpYnV0ZShcInNyY1wiLCBncm91cC5zcmMpO1xuICAgIHJldHVybiBub2RlO1xuICB9XG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMva2Vybi5qc1xuLy8gSG9yaXpvbnRhbCBzcGFjaW5nIGNvbW1hbmRzXG5cblxuXG5cbiAvLyBUT0RPOiBcXGhza2lwIGFuZCBcXG1za2lwIHNob3VsZCBzdXBwb3J0IHBsdXMgYW5kIG1pbnVzIGluIGxlbmd0aHNcblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcImtlcm5cIixcbiAgbmFtZXM6IFtcIlxcXFxrZXJuXCIsIFwiXFxcXG1rZXJuXCIsIFwiXFxcXGhza2lwXCIsIFwiXFxcXG1za2lwXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgYXJnVHlwZXM6IFtcInNpemVcIl0sXG4gICAgcHJpbWl0aXZlOiB0cnVlLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWVcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyLFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWYuZnVuY05hbWU7XG4gICAgdmFyIHNpemUgPSBhc3NlcnROb2RlVHlwZShhcmdzWzBdLCBcInNpemVcIik7XG5cbiAgICBpZiAocGFyc2VyLnNldHRpbmdzLnN0cmljdCkge1xuICAgICAgdmFyIG1hdGhGdW5jdGlvbiA9IGZ1bmNOYW1lWzFdID09PSAnbSc7IC8vIFxcbWtlcm4sIFxcbXNraXBcblxuICAgICAgdmFyIG11VW5pdCA9IHNpemUudmFsdWUudW5pdCA9PT0gJ211JztcblxuICAgICAgaWYgKG1hdGhGdW5jdGlvbikge1xuICAgICAgICBpZiAoIW11VW5pdCkge1xuICAgICAgICAgIHBhcnNlci5zZXR0aW5ncy5yZXBvcnROb25zdHJpY3QoXCJtYXRoVnNUZXh0VW5pdHNcIiwgXCJMYVRlWCdzIFwiICsgZnVuY05hbWUgKyBcIiBzdXBwb3J0cyBvbmx5IG11IHVuaXRzLCBcIiArIChcIm5vdCBcIiArIHNpemUudmFsdWUudW5pdCArIFwiIHVuaXRzXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJzZXIubW9kZSAhPT0gXCJtYXRoXCIpIHtcbiAgICAgICAgICBwYXJzZXIuc2V0dGluZ3MucmVwb3J0Tm9uc3RyaWN0KFwibWF0aFZzVGV4dFVuaXRzXCIsIFwiTGFUZVgncyBcIiArIGZ1bmNOYW1lICsgXCIgd29ya3Mgb25seSBpbiBtYXRoIG1vZGVcIik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICFtYXRoRnVuY3Rpb25cbiAgICAgICAgaWYgKG11VW5pdCkge1xuICAgICAgICAgIHBhcnNlci5zZXR0aW5ncy5yZXBvcnROb25zdHJpY3QoXCJtYXRoVnNUZXh0VW5pdHNcIiwgXCJMYVRlWCdzIFwiICsgZnVuY05hbWUgKyBcIiBkb2Vzbid0IHN1cHBvcnQgbXUgdW5pdHNcIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJrZXJuXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGRpbWVuc2lvbjogc2l6ZS52YWx1ZVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlR2x1ZShncm91cC5kaW1lbnNpb24sIG9wdGlvbnMpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIGRpbWVuc2lvbiA9IGNhbGN1bGF0ZVNpemUoZ3JvdXAuZGltZW5zaW9uLCBvcHRpb25zKTtcbiAgICByZXR1cm4gbmV3IG1hdGhNTFRyZWUuU3BhY2VOb2RlKGRpbWVuc2lvbik7XG4gIH1cbn0pO1xuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy9sYXAuanNcbi8vIEhvcml6b250YWwgb3ZlcmxhcCBmdW5jdGlvbnNcblxuXG5cblxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwibGFwXCIsXG4gIG5hbWVzOiBbXCJcXFxcbWF0aGxsYXBcIiwgXCJcXFxcbWF0aHJsYXBcIiwgXCJcXFxcbWF0aGNsYXBcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMSxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmLnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmLmZ1bmNOYW1lO1xuICAgIHZhciBib2R5ID0gYXJnc1swXTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJsYXBcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgYWxpZ25tZW50OiBmdW5jTmFtZS5zbGljZSg1KSxcbiAgICAgIGJvZHk6IGJvZHlcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICAvLyBtYXRobGxhcCwgbWF0aHJsYXAsIG1hdGhjbGFwXG4gICAgdmFyIGlubmVyO1xuXG4gICAgaWYgKGdyb3VwLmFsaWdubWVudCA9PT0gXCJjbGFwXCIpIHtcbiAgICAgIC8vIHJlZjogaHR0cHM6Ly93d3cubWF0aC5sc3UuZWR1L35hcGVybGlzL3B1YmxpY2F0aW9ucy9tYXRoY2xhcC9cbiAgICAgIGlubmVyID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW10sIFtidWlsZEdyb3VwKGdyb3VwLmJvZHksIG9wdGlvbnMpXSk7IC8vIHdyYXAsIHNpbmNlIENTUyB3aWxsIGNlbnRlciBhIC5jbGFwID4gLmlubmVyID4gc3BhblxuXG4gICAgICBpbm5lciA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcImlubmVyXCJdLCBbaW5uZXJdLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5uZXIgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJpbm5lclwiXSwgW2J1aWxkR3JvdXAoZ3JvdXAuYm9keSwgb3B0aW9ucyldKTtcbiAgICB9XG5cbiAgICB2YXIgZml4ID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wiZml4XCJdLCBbXSk7XG4gICAgdmFyIG5vZGUgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbZ3JvdXAuYWxpZ25tZW50XSwgW2lubmVyLCBmaXhdLCBvcHRpb25zKTsgLy8gQXQgdGhpcyBwb2ludCwgd2UgaGF2ZSBjb3JyZWN0bHkgc2V0IGhvcml6b250YWwgYWxpZ25tZW50IG9mIHRoZVxuICAgIC8vIHR3byBpdGVtcyBpbnZvbHZlZCBpbiB0aGUgbGFwLlxuICAgIC8vIE5leHQsIHVzZSBhIHN0cnV0IHRvIHNldCB0aGUgaGVpZ2h0IG9mIHRoZSBIVE1MIGJvdW5kaW5nIGJveC5cbiAgICAvLyBPdGhlcndpc2UsIGEgdGFsbCBhcmd1bWVudCBtYXkgYmUgbWlzcGxhY2VkLlxuICAgIC8vIFRoaXMgY29kZSByZXNvbHZlZCBpc3N1ZSAjMTE1M1xuXG4gICAgdmFyIHN0cnV0ID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wic3RydXRcIl0pO1xuICAgIHN0cnV0LnN0eWxlLmhlaWdodCA9IG5vZGUuaGVpZ2h0ICsgbm9kZS5kZXB0aCArIFwiZW1cIjtcbiAgICBzdHJ1dC5zdHlsZS52ZXJ0aWNhbEFsaWduID0gLW5vZGUuZGVwdGggKyBcImVtXCI7XG4gICAgbm9kZS5jaGlsZHJlbi51bnNoaWZ0KHN0cnV0KTsgLy8gTmV4dCwgcHJldmVudCB2ZXJ0aWNhbCBtaXNwbGFjZW1lbnQgd2hlbiBuZXh0IHRvIHNvbWV0aGluZyB0YWxsLlxuICAgIC8vIFRoaXMgY29kZSByZXNvbHZlcyBpc3N1ZSAjMTIzNFxuXG4gICAgbm9kZSA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcInRoaW5ib3hcIl0sIFtub2RlXSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcmRcIiwgXCJ2Ym94XCJdLCBbbm9kZV0sIG9wdGlvbnMpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgLy8gbWF0aGxsYXAsIG1hdGhybGFwLCBtYXRoY2xhcFxuICAgIHZhciBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtcGFkZGVkXCIsIFtidWlsZE1hdGhNTF9idWlsZEdyb3VwKGdyb3VwLmJvZHksIG9wdGlvbnMpXSk7XG5cbiAgICBpZiAoZ3JvdXAuYWxpZ25tZW50ICE9PSBcInJsYXBcIikge1xuICAgICAgdmFyIG9mZnNldCA9IGdyb3VwLmFsaWdubWVudCA9PT0gXCJsbGFwXCIgPyBcIi0xXCIgOiBcIi0wLjVcIjtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwibHNwYWNlXCIsIG9mZnNldCArIFwid2lkdGhcIik7XG4gICAgfVxuXG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBcIjBweFwiKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL21hdGguanNcblxuIC8vIFN3aXRjaGluZyBmcm9tIHRleHQgbW9kZSBiYWNrIHRvIG1hdGggbW9kZVxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwic3R5bGluZ1wiLFxuICBuYW1lczogW1wiXFxcXChcIiwgXCIkXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDAsXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZSxcbiAgICBhbGxvd2VkSW5NYXRoOiBmYWxzZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MpIHtcbiAgICB2YXIgZnVuY05hbWUgPSBfcmVmLmZ1bmNOYW1lLFxuICAgICAgICBwYXJzZXIgPSBfcmVmLnBhcnNlcjtcbiAgICB2YXIgb3V0ZXJNb2RlID0gcGFyc2VyLm1vZGU7XG4gICAgcGFyc2VyLnN3aXRjaE1vZGUoXCJtYXRoXCIpO1xuICAgIHZhciBjbG9zZSA9IGZ1bmNOYW1lID09PSBcIlxcXFwoXCIgPyBcIlxcXFwpXCIgOiBcIiRcIjtcbiAgICB2YXIgYm9keSA9IHBhcnNlci5wYXJzZUV4cHJlc3Npb24oZmFsc2UsIGNsb3NlKTtcbiAgICBwYXJzZXIuZXhwZWN0KGNsb3NlKTtcbiAgICBwYXJzZXIuc3dpdGNoTW9kZShvdXRlck1vZGUpO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcInN0eWxpbmdcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgc3R5bGU6IFwidGV4dFwiLFxuICAgICAgYm9keTogYm9keVxuICAgIH07XG4gIH1cbn0pOyAvLyBDaGVjayBmb3IgZXh0cmEgY2xvc2luZyBtYXRoIGRlbGltaXRlcnNcblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcInRleHRcIixcbiAgLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGlzIGlzLlxuICBuYW1lczogW1wiXFxcXClcIiwgXCJcXFxcXVwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAwLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWUsXG4gICAgYWxsb3dlZEluTWF0aDogZmFsc2VcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihjb250ZXh0LCBhcmdzKSB7XG4gICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiTWlzbWF0Y2hlZCBcIiArIGNvbnRleHQuZnVuY05hbWUpO1xuICB9XG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvbWF0aGNob2ljZS5qc1xuXG5cblxuXG5cblxudmFyIGNob29zZU1hdGhTdHlsZSA9IGZ1bmN0aW9uIGNob29zZU1hdGhTdHlsZShncm91cCwgb3B0aW9ucykge1xuICBzd2l0Y2ggKG9wdGlvbnMuc3R5bGUuc2l6ZSkge1xuICAgIGNhc2Ugc3JjX1N0eWxlLkRJU1BMQVkuc2l6ZTpcbiAgICAgIHJldHVybiBncm91cC5kaXNwbGF5O1xuXG4gICAgY2FzZSBzcmNfU3R5bGUuVEVYVC5zaXplOlxuICAgICAgcmV0dXJuIGdyb3VwLnRleHQ7XG5cbiAgICBjYXNlIHNyY19TdHlsZS5TQ1JJUFQuc2l6ZTpcbiAgICAgIHJldHVybiBncm91cC5zY3JpcHQ7XG5cbiAgICBjYXNlIHNyY19TdHlsZS5TQ1JJUFRTQ1JJUFQuc2l6ZTpcbiAgICAgIHJldHVybiBncm91cC5zY3JpcHRzY3JpcHQ7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGdyb3VwLnRleHQ7XG4gIH1cbn07XG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJtYXRoY2hvaWNlXCIsXG4gIG5hbWVzOiBbXCJcXFxcbWF0aGNob2ljZVwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiA0LFxuICAgIHByaW1pdGl2ZTogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwibWF0aGNob2ljZVwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBkaXNwbGF5OiBvcmRhcmd1bWVudChhcmdzWzBdKSxcbiAgICAgIHRleHQ6IG9yZGFyZ3VtZW50KGFyZ3NbMV0pLFxuICAgICAgc2NyaXB0OiBvcmRhcmd1bWVudChhcmdzWzJdKSxcbiAgICAgIHNjcmlwdHNjcmlwdDogb3JkYXJndW1lbnQoYXJnc1szXSlcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgYm9keSA9IGNob29zZU1hdGhTdHlsZShncm91cCwgb3B0aW9ucyk7XG4gICAgdmFyIGVsZW1lbnRzID0gYnVpbGRFeHByZXNzaW9uKGJvZHksIG9wdGlvbnMsIGZhbHNlKTtcbiAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZUZyYWdtZW50KGVsZW1lbnRzKTtcbiAgfSxcbiAgbWF0aG1sQnVpbGRlcjogZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBib2R5ID0gY2hvb3NlTWF0aFN0eWxlKGdyb3VwLCBvcHRpb25zKTtcbiAgICByZXR1cm4gYnVpbGRFeHByZXNzaW9uUm93KGJvZHksIG9wdGlvbnMpO1xuICB9XG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvdXRpbHMvYXNzZW1ibGVTdXBTdWIuanNcblxuXG5cbi8vIEZvciBhbiBvcGVyYXRvciB3aXRoIGxpbWl0cywgYXNzZW1ibGUgdGhlIGJhc2UsIHN1cCwgYW5kIHN1YiBpbnRvIGEgc3Bhbi5cbnZhciBhc3NlbWJsZVN1cFN1YiA9IGZ1bmN0aW9uIGFzc2VtYmxlU3VwU3ViKGJhc2UsIHN1cEdyb3VwLCBzdWJHcm91cCwgb3B0aW9ucywgc3R5bGUsIHNsYW50LCBiYXNlU2hpZnQpIHtcbiAgYmFzZSA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtdLCBbYmFzZV0pO1xuICB2YXIgc3ViSXNTaW5nbGVDaGFyYWN0ZXIgPSBzdWJHcm91cCAmJiB1dGlscy5pc0NoYXJhY3RlckJveChzdWJHcm91cCk7XG4gIHZhciBzdWI7XG4gIHZhciBzdXA7IC8vIFdlIG1hbnVhbGx5IGhhdmUgdG8gaGFuZGxlIHRoZSBzdXBlcnNjcmlwdHMgYW5kIHN1YnNjcmlwdHMuIFRoaXMsXG4gIC8vIGFzaWRlIGZyb20gdGhlIGtlcm4gY2FsY3VsYXRpb25zLCBpcyBjb3BpZWQgZnJvbSBzdXBzdWIuXG5cbiAgaWYgKHN1cEdyb3VwKSB7XG4gICAgdmFyIGVsZW0gPSBidWlsZEdyb3VwKHN1cEdyb3VwLCBvcHRpb25zLmhhdmluZ1N0eWxlKHN0eWxlLnN1cCgpKSwgb3B0aW9ucyk7XG4gICAgc3VwID0ge1xuICAgICAgZWxlbTogZWxlbSxcbiAgICAgIGtlcm46IE1hdGgubWF4KG9wdGlvbnMuZm9udE1ldHJpY3MoKS5iaWdPcFNwYWNpbmcxLCBvcHRpb25zLmZvbnRNZXRyaWNzKCkuYmlnT3BTcGFjaW5nMyAtIGVsZW0uZGVwdGgpXG4gICAgfTtcbiAgfVxuXG4gIGlmIChzdWJHcm91cCkge1xuICAgIHZhciBfZWxlbSA9IGJ1aWxkR3JvdXAoc3ViR3JvdXAsIG9wdGlvbnMuaGF2aW5nU3R5bGUoc3R5bGUuc3ViKCkpLCBvcHRpb25zKTtcblxuICAgIHN1YiA9IHtcbiAgICAgIGVsZW06IF9lbGVtLFxuICAgICAga2VybjogTWF0aC5tYXgob3B0aW9ucy5mb250TWV0cmljcygpLmJpZ09wU3BhY2luZzIsIG9wdGlvbnMuZm9udE1ldHJpY3MoKS5iaWdPcFNwYWNpbmc0IC0gX2VsZW0uaGVpZ2h0KVxuICAgIH07XG4gIH0gLy8gQnVpbGQgdGhlIGZpbmFsIGdyb3VwIGFzIGEgdmxpc3Qgb2YgdGhlIHBvc3NpYmxlIHN1YnNjcmlwdCwgYmFzZSxcbiAgLy8gYW5kIHBvc3NpYmxlIHN1cGVyc2NyaXB0LlxuXG5cbiAgdmFyIGZpbmFsR3JvdXA7XG5cbiAgaWYgKHN1cCAmJiBzdWIpIHtcbiAgICB2YXIgYm90dG9tID0gb3B0aW9ucy5mb250TWV0cmljcygpLmJpZ09wU3BhY2luZzUgKyBzdWIuZWxlbS5oZWlnaHQgKyBzdWIuZWxlbS5kZXB0aCArIHN1Yi5rZXJuICsgYmFzZS5kZXB0aCArIGJhc2VTaGlmdDtcbiAgICBmaW5hbEdyb3VwID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgIHBvc2l0aW9uVHlwZTogXCJib3R0b21cIixcbiAgICAgIHBvc2l0aW9uRGF0YTogYm90dG9tLFxuICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgIHR5cGU6IFwia2VyblwiLFxuICAgICAgICBzaXplOiBvcHRpb25zLmZvbnRNZXRyaWNzKCkuYmlnT3BTcGFjaW5nNVxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogc3ViLmVsZW0sXG4gICAgICAgIG1hcmdpbkxlZnQ6IC1zbGFudCArIFwiZW1cIlxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImtlcm5cIixcbiAgICAgICAgc2l6ZTogc3ViLmtlcm5cbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGJhc2VcbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJrZXJuXCIsXG4gICAgICAgIHNpemU6IHN1cC5rZXJuXG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBzdXAuZWxlbSxcbiAgICAgICAgbWFyZ2luTGVmdDogc2xhbnQgKyBcImVtXCJcbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJrZXJuXCIsXG4gICAgICAgIHNpemU6IG9wdGlvbnMuZm9udE1ldHJpY3MoKS5iaWdPcFNwYWNpbmc1XG4gICAgICB9XVxuICAgIH0sIG9wdGlvbnMpO1xuICB9IGVsc2UgaWYgKHN1Yikge1xuICAgIHZhciB0b3AgPSBiYXNlLmhlaWdodCAtIGJhc2VTaGlmdDsgLy8gU2hpZnQgdGhlIGxpbWl0cyBieSB0aGUgc2xhbnQgb2YgdGhlIHN5bWJvbC4gTm90ZVxuICAgIC8vIHRoYXQgd2UgYXJlIHN1cHBvc2VkIHRvIHNoaWZ0IHRoZSBsaW1pdHMgYnkgMS8yIG9mIHRoZSBzbGFudCxcbiAgICAvLyBidXQgc2luY2Ugd2UgYXJlIGNlbnRlcmluZyB0aGUgbGltaXRzIGFkZGluZyBhIGZ1bGwgc2xhbnQgb2ZcbiAgICAvLyBtYXJnaW4gd2lsbCBzaGlmdCBieSAxLzIgdGhhdC5cblxuICAgIGZpbmFsR3JvdXAgPSBidWlsZENvbW1vbi5tYWtlVkxpc3Qoe1xuICAgICAgcG9zaXRpb25UeXBlOiBcInRvcFwiLFxuICAgICAgcG9zaXRpb25EYXRhOiB0b3AsXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgdHlwZTogXCJrZXJuXCIsXG4gICAgICAgIHNpemU6IG9wdGlvbnMuZm9udE1ldHJpY3MoKS5iaWdPcFNwYWNpbmc1XG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBzdWIuZWxlbSxcbiAgICAgICAgbWFyZ2luTGVmdDogLXNsYW50ICsgXCJlbVwiXG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwia2VyblwiLFxuICAgICAgICBzaXplOiBzdWIua2VyblxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogYmFzZVxuICAgICAgfV1cbiAgICB9LCBvcHRpb25zKTtcbiAgfSBlbHNlIGlmIChzdXApIHtcbiAgICB2YXIgX2JvdHRvbSA9IGJhc2UuZGVwdGggKyBiYXNlU2hpZnQ7XG5cbiAgICBmaW5hbEdyb3VwID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgIHBvc2l0aW9uVHlwZTogXCJib3R0b21cIixcbiAgICAgIHBvc2l0aW9uRGF0YTogX2JvdHRvbSxcbiAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogYmFzZVxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImtlcm5cIixcbiAgICAgICAgc2l6ZTogc3VwLmtlcm5cbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IHN1cC5lbGVtLFxuICAgICAgICBtYXJnaW5MZWZ0OiBzbGFudCArIFwiZW1cIlxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImtlcm5cIixcbiAgICAgICAgc2l6ZTogb3B0aW9ucy5mb250TWV0cmljcygpLmJpZ09wU3BhY2luZzVcbiAgICAgIH1dXG4gICAgfSwgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhpcyBjYXNlIHByb2JhYmx5IHNob3VsZG4ndCBvY2N1ciAodGhpcyB3b3VsZCBtZWFuIHRoZVxuICAgIC8vIHN1cHN1YiB3YXMgc2VuZGluZyB1cyBhIGdyb3VwIHdpdGggbm8gc3VwZXJzY3JpcHQgb3JcbiAgICAvLyBzdWJzY3JpcHQpIGJ1dCBiZSBzYWZlLlxuICAgIHJldHVybiBiYXNlO1xuICB9XG5cbiAgdmFyIHBhcnRzID0gW2ZpbmFsR3JvdXBdO1xuXG4gIGlmIChzdWIgJiYgc2xhbnQgIT09IDAgJiYgIXN1YklzU2luZ2xlQ2hhcmFjdGVyKSB7XG4gICAgLy8gQSBuZWdhdGl2ZSBtYXJnaW4tbGVmdCB3YXMgYXBwbGllZCB0byB0aGUgbG93ZXIgbGltaXQuXG4gICAgLy8gQXZvaWQgYW4gb3ZlcmxhcCBieSBwbGFjaW5nIGEgc3BhY2VyIG9uIHRoZSBsZWZ0IG9uIHRoZSBncm91cC5cbiAgICB2YXIgc3BhY2VyID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wibXNwYWNlXCJdLCBbXSwgb3B0aW9ucyk7XG4gICAgc3BhY2VyLnN0eWxlLm1hcmdpblJpZ2h0ID0gc2xhbnQgKyBcImVtXCI7XG4gICAgcGFydHMudW5zaGlmdChzcGFjZXIpO1xuICB9XG5cbiAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcFwiLCBcIm9wLWxpbWl0c1wiXSwgcGFydHMsIG9wdGlvbnMpO1xufTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvb3AuanNcbi8vIExpbWl0cywgc3ltYm9sc1xuXG5cblxuXG5cblxuXG5cblxuXG4vLyBNb3N0IG9wZXJhdG9ycyBoYXZlIGEgbGFyZ2Ugc3VjY2Vzc29yIHN5bWJvbCwgYnV0IHRoZXNlIGRvbid0LlxudmFyIG5vU3VjY2Vzc29yID0gW1wiXFxcXHNtYWxsaW50XCJdOyAvLyBOT1RFOiBVbmxpa2UgbW9zdCBgaHRtbEJ1aWxkZXJgcywgdGhpcyBvbmUgaGFuZGxlcyBub3Qgb25seSBcIm9wXCIsIGJ1dCBhbHNvXG4vLyBcInN1cHN1YlwiIHNpbmNlIHNvbWUgb2YgdGhlbSAobGlrZSBcXGludCkgY2FuIGFmZmVjdCBzdXBlci9zdWJzY3JpcHRpbmcuXG5cbnZhciBvcF9odG1sQnVpbGRlciA9IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdycCwgb3B0aW9ucykge1xuICAvLyBPcGVyYXRvcnMgYXJlIGhhbmRsZWQgaW4gdGhlIFRlWGJvb2sgcGcuIDQ0My00NDQsIHJ1bGUgMTMoYSkuXG4gIHZhciBzdXBHcm91cDtcbiAgdmFyIHN1Ykdyb3VwO1xuICB2YXIgaGFzTGltaXRzID0gZmFsc2U7XG4gIHZhciBncm91cDtcblxuICBpZiAoZ3JwLnR5cGUgPT09IFwic3Vwc3ViXCIpIHtcbiAgICAvLyBJZiB3ZSBoYXZlIGxpbWl0cywgc3Vwc3ViIHdpbGwgcGFzcyB1cyBpdHMgZ3JvdXAgdG8gaGFuZGxlLiBQdWxsXG4gICAgLy8gb3V0IHRoZSBzdXBlcnNjcmlwdCBhbmQgc3Vic2NyaXB0IGFuZCBzZXQgdGhlIGdyb3VwIHRvIHRoZSBvcCBpblxuICAgIC8vIGl0cyBiYXNlLlxuICAgIHN1cEdyb3VwID0gZ3JwLnN1cDtcbiAgICBzdWJHcm91cCA9IGdycC5zdWI7XG4gICAgZ3JvdXAgPSBhc3NlcnROb2RlVHlwZShncnAuYmFzZSwgXCJvcFwiKTtcbiAgICBoYXNMaW1pdHMgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGdyb3VwID0gYXNzZXJ0Tm9kZVR5cGUoZ3JwLCBcIm9wXCIpO1xuICB9XG5cbiAgdmFyIHN0eWxlID0gb3B0aW9ucy5zdHlsZTtcbiAgdmFyIGxhcmdlID0gZmFsc2U7XG5cbiAgaWYgKHN0eWxlLnNpemUgPT09IHNyY19TdHlsZS5ESVNQTEFZLnNpemUgJiYgZ3JvdXAuc3ltYm9sICYmICF1dGlscy5jb250YWlucyhub1N1Y2Nlc3NvciwgZ3JvdXAubmFtZSkpIHtcbiAgICAvLyBNb3N0IHN5bWJvbCBvcGVyYXRvcnMgZ2V0IGxhcmdlciBpbiBkaXNwbGF5c3R5bGUgKHJ1bGUgMTMpXG4gICAgbGFyZ2UgPSB0cnVlO1xuICB9XG5cbiAgdmFyIGJhc2U7XG5cbiAgaWYgKGdyb3VwLnN5bWJvbCkge1xuICAgIC8vIElmIHRoaXMgaXMgYSBzeW1ib2wsIGNyZWF0ZSB0aGUgc3ltYm9sLlxuICAgIHZhciBmb250TmFtZSA9IGxhcmdlID8gXCJTaXplMi1SZWd1bGFyXCIgOiBcIlNpemUxLVJlZ3VsYXJcIjtcbiAgICB2YXIgc3Rhc2ggPSBcIlwiO1xuXG4gICAgaWYgKGdyb3VwLm5hbWUgPT09IFwiXFxcXG9paW50XCIgfHwgZ3JvdXAubmFtZSA9PT0gXCJcXFxcb2lpaW50XCIpIHtcbiAgICAgIC8vIE5vIGZvbnQgZ2x5cGhzIHlldCwgc28gdXNlIGEgZ2x5cGggdy9vIHRoZSBvdmFsLlxuICAgICAgLy8gVE9ETzogV2hlbiBmb250IGdseXBocyBhcmUgYXZhaWxhYmxlLCBkZWxldGUgdGhpcyBjb2RlLlxuICAgICAgc3Rhc2ggPSBncm91cC5uYW1lLnN1YnN0cigxKTtcbiAgICAgIGdyb3VwLm5hbWUgPSBzdGFzaCA9PT0gXCJvaWludFwiID8gXCJcXFxcaWludFwiIDogXCJcXFxcaWlpbnRcIjtcbiAgICB9XG5cbiAgICBiYXNlID0gYnVpbGRDb21tb24ubWFrZVN5bWJvbChncm91cC5uYW1lLCBmb250TmFtZSwgXCJtYXRoXCIsIG9wdGlvbnMsIFtcIm1vcFwiLCBcIm9wLXN5bWJvbFwiLCBsYXJnZSA/IFwibGFyZ2Utb3BcIiA6IFwic21hbGwtb3BcIl0pO1xuXG4gICAgaWYgKHN0YXNoLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIFdlJ3JlIGluIFxcb2lpbnQgb3IgXFxvaWlpbnQuIE92ZXJsYXkgdGhlIG92YWwuXG4gICAgICAvLyBUT0RPOiBXaGVuIGZvbnQgZ2x5cGhzIGFyZSBhdmFpbGFibGUsIGRlbGV0ZSB0aGlzIGNvZGUuXG4gICAgICB2YXIgaXRhbGljID0gYmFzZS5pdGFsaWM7XG4gICAgICB2YXIgb3ZhbCA9IGJ1aWxkQ29tbW9uLnN0YXRpY1N2ZyhzdGFzaCArIFwiU2l6ZVwiICsgKGxhcmdlID8gXCIyXCIgOiBcIjFcIiksIG9wdGlvbnMpO1xuICAgICAgYmFzZSA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICAgIHBvc2l0aW9uVHlwZTogXCJpbmRpdmlkdWFsU2hpZnRcIixcbiAgICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgICAgZWxlbTogYmFzZSxcbiAgICAgICAgICBzaGlmdDogMFxuICAgICAgICB9LCB7XG4gICAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgICAgZWxlbTogb3ZhbCxcbiAgICAgICAgICBzaGlmdDogbGFyZ2UgPyAwLjA4IDogMFxuICAgICAgICB9XVxuICAgICAgfSwgb3B0aW9ucyk7XG4gICAgICBncm91cC5uYW1lID0gXCJcXFxcXCIgKyBzdGFzaDtcbiAgICAgIGJhc2UuY2xhc3Nlcy51bnNoaWZ0KFwibW9wXCIpOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIGJhc2UuaXRhbGljID0gaXRhbGljO1xuICAgIH1cbiAgfSBlbHNlIGlmIChncm91cC5ib2R5KSB7XG4gICAgLy8gSWYgdGhpcyBpcyBhIGxpc3QsIGNvbXBvc2UgdGhhdCBsaXN0LlxuICAgIHZhciBpbm5lciA9IGJ1aWxkRXhwcmVzc2lvbihncm91cC5ib2R5LCBvcHRpb25zLCB0cnVlKTtcblxuICAgIGlmIChpbm5lci5sZW5ndGggPT09IDEgJiYgaW5uZXJbMF0gaW5zdGFuY2VvZiBTeW1ib2xOb2RlKSB7XG4gICAgICBiYXNlID0gaW5uZXJbMF07XG4gICAgICBiYXNlLmNsYXNzZXNbMF0gPSBcIm1vcFwiOyAvLyByZXBsYWNlIG9sZCBtY2xhc3NcbiAgICB9IGVsc2Uge1xuICAgICAgYmFzZSA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcFwiXSwgaW5uZXIsIG9wdGlvbnMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBPdGhlcndpc2UsIHRoaXMgaXMgYSB0ZXh0IG9wZXJhdG9yLiBCdWlsZCB0aGUgdGV4dCBmcm9tIHRoZVxuICAgIC8vIG9wZXJhdG9yJ3MgbmFtZS5cbiAgICB2YXIgb3V0cHV0ID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGdyb3VwLm5hbWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIG91dHB1dC5wdXNoKGJ1aWxkQ29tbW9uLm1hdGhzeW0oZ3JvdXAubmFtZVtpXSwgZ3JvdXAubW9kZSwgb3B0aW9ucykpO1xuICAgIH1cblxuICAgIGJhc2UgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtb3BcIl0sIG91dHB1dCwgb3B0aW9ucyk7XG4gIH0gLy8gSWYgY29udGVudCBvZiBvcCBpcyBhIHNpbmdsZSBzeW1ib2wsIHNoaWZ0IGl0IHZlcnRpY2FsbHkuXG5cblxuICB2YXIgYmFzZVNoaWZ0ID0gMDtcbiAgdmFyIHNsYW50ID0gMDtcblxuICBpZiAoKGJhc2UgaW5zdGFuY2VvZiBTeW1ib2xOb2RlIHx8IGdyb3VwLm5hbWUgPT09IFwiXFxcXG9paW50XCIgfHwgZ3JvdXAubmFtZSA9PT0gXCJcXFxcb2lpaW50XCIpICYmICFncm91cC5zdXBwcmVzc0Jhc2VTaGlmdCkge1xuICAgIC8vIFdlIHN1cHByZXNzIHRoZSBzaGlmdCBvZiB0aGUgYmFzZSBvZiBcXG92ZXJzZXQgYW5kIFxcdW5kZXJzZXQuIE90aGVyd2lzZSxcbiAgICAvLyBzaGlmdCB0aGUgc3ltYm9sIHNvIGl0cyBjZW50ZXIgbGllcyBvbiB0aGUgYXhpcyAocnVsZSAxMykuIEl0XG4gICAgLy8gYXBwZWFycyB0aGF0IG91ciBmb250cyBoYXZlIHRoZSBjZW50ZXJzIG9mIHRoZSBzeW1ib2xzIGFscmVhZHlcbiAgICAvLyBhbG1vc3Qgb24gdGhlIGF4aXMsIHNvIHRoZXNlIG51bWJlcnMgYXJlIHZlcnkgc21hbGwuIE5vdGUgd2VcbiAgICAvLyBkb24ndCBhY3R1YWxseSBhcHBseSB0aGlzIGhlcmUsIGJ1dCBpbnN0ZWFkIGl0IGlzIHVzZWQgZWl0aGVyIGluXG4gICAgLy8gdGhlIHZsaXN0IGNyZWF0aW9uIG9yIHNlcGFyYXRlbHkgd2hlbiB0aGVyZSBhcmUgbm8gbGltaXRzLlxuICAgIGJhc2VTaGlmdCA9IChiYXNlLmhlaWdodCAtIGJhc2UuZGVwdGgpIC8gMiAtIG9wdGlvbnMuZm9udE1ldHJpY3MoKS5heGlzSGVpZ2h0OyAvLyBUaGUgc2xhbnQgb2YgdGhlIHN5bWJvbCBpcyBqdXN0IGl0cyBpdGFsaWMgY29ycmVjdGlvbi5cbiAgICAvLyAkRmxvd0ZpeE1lXG5cbiAgICBzbGFudCA9IGJhc2UuaXRhbGljO1xuICB9XG5cbiAgaWYgKGhhc0xpbWl0cykge1xuICAgIHJldHVybiBhc3NlbWJsZVN1cFN1YihiYXNlLCBzdXBHcm91cCwgc3ViR3JvdXAsIG9wdGlvbnMsIHN0eWxlLCBzbGFudCwgYmFzZVNoaWZ0KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoYmFzZVNoaWZ0KSB7XG4gICAgICBiYXNlLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuICAgICAgYmFzZS5zdHlsZS50b3AgPSBiYXNlU2hpZnQgKyBcImVtXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cbn07XG5cbnZhciBvcF9tYXRobWxCdWlsZGVyID0gZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICB2YXIgbm9kZTtcblxuICBpZiAoZ3JvdXAuc3ltYm9sKSB7XG4gICAgLy8gVGhpcyBpcyBhIHN5bWJvbC4gSnVzdCBhZGQgdGhlIHN5bWJvbC5cbiAgICBub2RlID0gbmV3IE1hdGhOb2RlKFwibW9cIiwgW21ha2VUZXh0KGdyb3VwLm5hbWUsIGdyb3VwLm1vZGUpXSk7XG5cbiAgICBpZiAodXRpbHMuY29udGFpbnMobm9TdWNjZXNzb3IsIGdyb3VwLm5hbWUpKSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcImxhcmdlb3BcIiwgXCJmYWxzZVwiKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZ3JvdXAuYm9keSkge1xuICAgIC8vIFRoaXMgaXMgYW4gb3BlcmF0b3Igd2l0aCBjaGlsZHJlbi4gQWRkIHRoZW0uXG4gICAgbm9kZSA9IG5ldyBNYXRoTm9kZShcIm1vXCIsIGJ1aWxkTWF0aE1MX2J1aWxkRXhwcmVzc2lvbihncm91cC5ib2R5LCBvcHRpb25zKSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhpcyBpcyBhIHRleHQgb3BlcmF0b3IuIEFkZCBhbGwgb2YgdGhlIGNoYXJhY3RlcnMgZnJvbSB0aGVcbiAgICAvLyBvcGVyYXRvcidzIG5hbWUuXG4gICAgbm9kZSA9IG5ldyBNYXRoTm9kZShcIm1pXCIsIFtuZXcgVGV4dE5vZGUoZ3JvdXAubmFtZS5zbGljZSgxKSldKTsgLy8gQXBwZW5kIGFuIDxtbz4mQXBwbHlGdW5jdGlvbjs8L21vPi5cbiAgICAvLyByZWY6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9SRUMtTWF0aE1ML2NoYXAzXzIuaHRtbCNzZWMzLjIuNFxuXG4gICAgdmFyIG9wZXJhdG9yID0gbmV3IE1hdGhOb2RlKFwibW9cIiwgW21ha2VUZXh0KFwiXFx1MjA2MVwiLCBcInRleHRcIildKTtcblxuICAgIGlmIChncm91cC5wYXJlbnRJc1N1cFN1Yikge1xuICAgICAgbm9kZSA9IG5ldyBNYXRoTm9kZShcIm1yb3dcIiwgW25vZGUsIG9wZXJhdG9yXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUgPSBuZXdEb2N1bWVudEZyYWdtZW50KFtub2RlLCBvcGVyYXRvcl0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBub2RlO1xufTtcblxudmFyIHNpbmdsZUNoYXJCaWdPcHMgPSB7XG4gIFwiXFx1MjIwRlwiOiBcIlxcXFxwcm9kXCIsXG4gIFwiXFx1MjIxMFwiOiBcIlxcXFxjb3Byb2RcIixcbiAgXCJcXHUyMjExXCI6IFwiXFxcXHN1bVwiLFxuICBcIlxcdTIyQzBcIjogXCJcXFxcYmlnd2VkZ2VcIixcbiAgXCJcXHUyMkMxXCI6IFwiXFxcXGJpZ3ZlZVwiLFxuICBcIlxcdTIyQzJcIjogXCJcXFxcYmlnY2FwXCIsXG4gIFwiXFx1MjJDM1wiOiBcIlxcXFxiaWdjdXBcIixcbiAgXCJcXHUyQTAwXCI6IFwiXFxcXGJpZ29kb3RcIixcbiAgXCJcXHUyQTAxXCI6IFwiXFxcXGJpZ29wbHVzXCIsXG4gIFwiXFx1MkEwMlwiOiBcIlxcXFxiaWdvdGltZXNcIixcbiAgXCJcXHUyQTA0XCI6IFwiXFxcXGJpZ3VwbHVzXCIsXG4gIFwiXFx1MkEwNlwiOiBcIlxcXFxiaWdzcWN1cFwiXG59O1xuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcIm9wXCIsXG4gIG5hbWVzOiBbXCJcXFxcY29wcm9kXCIsIFwiXFxcXGJpZ3ZlZVwiLCBcIlxcXFxiaWd3ZWRnZVwiLCBcIlxcXFxiaWd1cGx1c1wiLCBcIlxcXFxiaWdjYXBcIiwgXCJcXFxcYmlnY3VwXCIsIFwiXFxcXGludG9wXCIsIFwiXFxcXHByb2RcIiwgXCJcXFxcc3VtXCIsIFwiXFxcXGJpZ290aW1lc1wiLCBcIlxcXFxiaWdvcGx1c1wiLCBcIlxcXFxiaWdvZG90XCIsIFwiXFxcXGJpZ3NxY3VwXCIsIFwiXFxcXHNtYWxsaW50XCIsIFwiXFx1MjIwRlwiLCBcIlxcdTIyMTBcIiwgXCJcXHUyMjExXCIsIFwiXFx1MjJDMFwiLCBcIlxcdTIyQzFcIiwgXCJcXHUyMkMyXCIsIFwiXFx1MjJDM1wiLCBcIlxcdTJBMDBcIiwgXCJcXHUyQTAxXCIsIFwiXFx1MkEwMlwiLCBcIlxcdTJBMDRcIiwgXCJcXHUyQTA2XCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDBcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyLFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWYuZnVuY05hbWU7XG4gICAgdmFyIGZOYW1lID0gZnVuY05hbWU7XG5cbiAgICBpZiAoZk5hbWUubGVuZ3RoID09PSAxKSB7XG4gICAgICBmTmFtZSA9IHNpbmdsZUNoYXJCaWdPcHNbZk5hbWVdO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcIm9wXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGxpbWl0czogdHJ1ZSxcbiAgICAgIHBhcmVudElzU3VwU3ViOiBmYWxzZSxcbiAgICAgIHN5bWJvbDogdHJ1ZSxcbiAgICAgIG5hbWU6IGZOYW1lXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IG9wX2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBvcF9tYXRobWxCdWlsZGVyXG59KTsgLy8gTm90ZTogY2FsbGluZyBkZWZpbmVGdW5jdGlvbiB3aXRoIGEgdHlwZSB0aGF0J3MgYWxyZWFkeSBiZWVuIGRlZmluZWQgb25seVxuLy8gd29ya3MgYmVjYXVzZSB0aGUgc2FtZSBodG1sQnVpbGRlciBhbmQgbWF0aG1sQnVpbGRlciBhcmUgYmVpbmcgdXNlZC5cblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcIm9wXCIsXG4gIG5hbWVzOiBbXCJcXFxcbWF0aG9wXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgcHJpbWl0aXZlOiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZjIsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZjIucGFyc2VyO1xuICAgIHZhciBib2R5ID0gYXJnc1swXTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJvcFwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBsaW1pdHM6IGZhbHNlLFxuICAgICAgcGFyZW50SXNTdXBTdWI6IGZhbHNlLFxuICAgICAgc3ltYm9sOiBmYWxzZSxcbiAgICAgIGJvZHk6IG9yZGFyZ3VtZW50KGJvZHkpXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IG9wX2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBvcF9tYXRobWxCdWlsZGVyXG59KTsgLy8gVGhlcmUgYXJlIDIgZmxhZ3MgZm9yIG9wZXJhdG9yczsgd2hldGhlciB0aGV5IHByb2R1Y2UgbGltaXRzIGluXG4vLyBkaXNwbGF5c3R5bGUsIGFuZCB3aGV0aGVyIHRoZXkgYXJlIHN5bWJvbHMgYW5kIHNob3VsZCBncm93IGluXG4vLyBkaXNwbGF5c3R5bGUuIFRoZXNlIGZvdXIgZ3JvdXBzIGNvdmVyIHRoZSBmb3VyIHBvc3NpYmxlIGNob2ljZXMuXG5cbnZhciBzaW5nbGVDaGFySW50ZWdyYWxzID0ge1xuICBcIlxcdTIyMkJcIjogXCJcXFxcaW50XCIsXG4gIFwiXFx1MjIyQ1wiOiBcIlxcXFxpaW50XCIsXG4gIFwiXFx1MjIyRFwiOiBcIlxcXFxpaWludFwiLFxuICBcIlxcdTIyMkVcIjogXCJcXFxcb2ludFwiLFxuICBcIlxcdTIyMkZcIjogXCJcXFxcb2lpbnRcIixcbiAgXCJcXHUyMjMwXCI6IFwiXFxcXG9paWludFwiXG59OyAvLyBObyBsaW1pdHMsIG5vdCBzeW1ib2xzXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJvcFwiLFxuICBuYW1lczogW1wiXFxcXGFyY3NpblwiLCBcIlxcXFxhcmNjb3NcIiwgXCJcXFxcYXJjdGFuXCIsIFwiXFxcXGFyY3RnXCIsIFwiXFxcXGFyY2N0Z1wiLCBcIlxcXFxhcmdcIiwgXCJcXFxcY2hcIiwgXCJcXFxcY29zXCIsIFwiXFxcXGNvc2VjXCIsIFwiXFxcXGNvc2hcIiwgXCJcXFxcY290XCIsIFwiXFxcXGNvdGdcIiwgXCJcXFxcY290aFwiLCBcIlxcXFxjc2NcIiwgXCJcXFxcY3RnXCIsIFwiXFxcXGN0aFwiLCBcIlxcXFxkZWdcIiwgXCJcXFxcZGltXCIsIFwiXFxcXGV4cFwiLCBcIlxcXFxob21cIiwgXCJcXFxca2VyXCIsIFwiXFxcXGxnXCIsIFwiXFxcXGxuXCIsIFwiXFxcXGxvZ1wiLCBcIlxcXFxzZWNcIiwgXCJcXFxcc2luXCIsIFwiXFxcXHNpbmhcIiwgXCJcXFxcc2hcIiwgXCJcXFxcdGFuXCIsIFwiXFxcXHRhbmhcIiwgXCJcXFxcdGdcIiwgXCJcXFxcdGhcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMFxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYzLnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmMy5mdW5jTmFtZTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJvcFwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBsaW1pdHM6IGZhbHNlLFxuICAgICAgcGFyZW50SXNTdXBTdWI6IGZhbHNlLFxuICAgICAgc3ltYm9sOiBmYWxzZSxcbiAgICAgIG5hbWU6IGZ1bmNOYW1lXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IG9wX2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBvcF9tYXRobWxCdWlsZGVyXG59KTsgLy8gTGltaXRzLCBub3Qgc3ltYm9sc1xuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwib3BcIixcbiAgbmFtZXM6IFtcIlxcXFxkZXRcIiwgXCJcXFxcZ2NkXCIsIFwiXFxcXGluZlwiLCBcIlxcXFxsaW1cIiwgXCJcXFxcbWF4XCIsIFwiXFxcXG1pblwiLCBcIlxcXFxQclwiLCBcIlxcXFxzdXBcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMFxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWY0KSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWY0LnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmNC5mdW5jTmFtZTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJvcFwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBsaW1pdHM6IHRydWUsXG4gICAgICBwYXJlbnRJc1N1cFN1YjogZmFsc2UsXG4gICAgICBzeW1ib2w6IGZhbHNlLFxuICAgICAgbmFtZTogZnVuY05hbWVcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogb3BfaHRtbEJ1aWxkZXIsXG4gIG1hdGhtbEJ1aWxkZXI6IG9wX21hdGhtbEJ1aWxkZXJcbn0pOyAvLyBObyBsaW1pdHMsIHN5bWJvbHNcblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcIm9wXCIsXG4gIG5hbWVzOiBbXCJcXFxcaW50XCIsIFwiXFxcXGlpbnRcIiwgXCJcXFxcaWlpbnRcIiwgXCJcXFxcb2ludFwiLCBcIlxcXFxvaWludFwiLCBcIlxcXFxvaWlpbnRcIiwgXCJcXHUyMjJCXCIsIFwiXFx1MjIyQ1wiLCBcIlxcdTIyMkRcIiwgXCJcXHUyMjJFXCIsIFwiXFx1MjIyRlwiLCBcIlxcdTIyMzBcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMFxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWY1KSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWY1LnBhcnNlcixcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmNS5mdW5jTmFtZTtcbiAgICB2YXIgZk5hbWUgPSBmdW5jTmFtZTtcblxuICAgIGlmIChmTmFtZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGZOYW1lID0gc2luZ2xlQ2hhckludGVncmFsc1tmTmFtZV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwib3BcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgbGltaXRzOiBmYWxzZSxcbiAgICAgIHBhcmVudElzU3VwU3ViOiBmYWxzZSxcbiAgICAgIHN5bWJvbDogdHJ1ZSxcbiAgICAgIG5hbWU6IGZOYW1lXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IG9wX2h0bWxCdWlsZGVyLFxuICBtYXRobWxCdWlsZGVyOiBvcF9tYXRobWxCdWlsZGVyXG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9kZWZpbmVNYWNyby5qc1xuXG5cbi8qKlxuICogQWxsIHJlZ2lzdGVyZWQgZ2xvYmFsL2J1aWx0LWluIG1hY3Jvcy5cbiAqIGBtYWNyb3MuanNgIGV4cG9ydHMgdGhpcyBzYW1lIGRpY3Rpb25hcnkgYWdhaW4gYW5kIG1ha2VzIGl0IHB1YmxpYy5cbiAqIGBQYXJzZXIuanNgIHJlcXVpcmVzIHRoaXMgZGljdGlvbmFyeSB2aWEgYG1hY3Jvcy5qc2AuXG4gKi9cbnZhciBfbWFjcm9zID0ge307IC8vIFRoaXMgZnVuY3Rpb24gbWlnaHQgb25lIGRheSBhY2NlcHQgYW4gYWRkaXRpb25hbCBhcmd1bWVudCBhbmQgZG8gbW9yZSB0aGluZ3MuXG5cbmZ1bmN0aW9uIGRlZmluZU1hY3JvKG5hbWUsIGJvZHkpIHtcbiAgX21hY3Jvc1tuYW1lXSA9IGJvZHk7XG59XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL29wZXJhdG9ybmFtZS5qc1xuXG5cblxuXG5cblxuXG5cblxuLy8gTk9URTogVW5saWtlIG1vc3QgYGh0bWxCdWlsZGVyYHMsIHRoaXMgb25lIGhhbmRsZXMgbm90IG9ubHlcbi8vIFwib3BlcmF0b3JuYW1lXCIsIGJ1dCBhbHNvICBcInN1cHN1YlwiIHNpbmNlIFxcb3BlcmF0b3JuYW1lKiBjYW5cbi8vIGFmZmVjdCBzdXBlci9zdWJzY3JpcHRpbmcuXG52YXIgb3BlcmF0b3JuYW1lX2h0bWxCdWlsZGVyID0gZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JwLCBvcHRpb25zKSB7XG4gIC8vIE9wZXJhdG9ycyBhcmUgaGFuZGxlZCBpbiB0aGUgVGVYYm9vayBwZy4gNDQzLTQ0NCwgcnVsZSAxMyhhKS5cbiAgdmFyIHN1cEdyb3VwO1xuICB2YXIgc3ViR3JvdXA7XG4gIHZhciBoYXNMaW1pdHMgPSBmYWxzZTtcbiAgdmFyIGdyb3VwO1xuXG4gIGlmIChncnAudHlwZSA9PT0gXCJzdXBzdWJcIikge1xuICAgIC8vIElmIHdlIGhhdmUgbGltaXRzLCBzdXBzdWIgd2lsbCBwYXNzIHVzIGl0cyBncm91cCB0byBoYW5kbGUuIFB1bGxcbiAgICAvLyBvdXQgdGhlIHN1cGVyc2NyaXB0IGFuZCBzdWJzY3JpcHQgYW5kIHNldCB0aGUgZ3JvdXAgdG8gdGhlIG9wIGluXG4gICAgLy8gaXRzIGJhc2UuXG4gICAgc3VwR3JvdXAgPSBncnAuc3VwO1xuICAgIHN1Ykdyb3VwID0gZ3JwLnN1YjtcbiAgICBncm91cCA9IGFzc2VydE5vZGVUeXBlKGdycC5iYXNlLCBcIm9wZXJhdG9ybmFtZVwiKTtcbiAgICBoYXNMaW1pdHMgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIGdyb3VwID0gYXNzZXJ0Tm9kZVR5cGUoZ3JwLCBcIm9wZXJhdG9ybmFtZVwiKTtcbiAgfVxuXG4gIHZhciBiYXNlO1xuXG4gIGlmIChncm91cC5ib2R5Lmxlbmd0aCA+IDApIHtcbiAgICB2YXIgYm9keSA9IGdyb3VwLmJvZHkubWFwKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgLy8gJEZsb3dGaXhNZTogQ2hlY2sgaWYgdGhlIG5vZGUgaGFzIGEgc3RyaW5nIGB0ZXh0YCBwcm9wZXJ0eS5cbiAgICAgIHZhciBjaGlsZFRleHQgPSBjaGlsZC50ZXh0O1xuXG4gICAgICBpZiAodHlwZW9mIGNoaWxkVGV4dCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHR5cGU6IFwidGV4dG9yZFwiLFxuICAgICAgICAgIG1vZGU6IGNoaWxkLm1vZGUsXG4gICAgICAgICAgdGV4dDogY2hpbGRUZXh0XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG4gICAgfSk7IC8vIENvbnNvbGlkYXRlIGZ1bmN0aW9uIG5hbWVzIGludG8gc3ltYm9sIGNoYXJhY3RlcnMuXG5cbiAgICB2YXIgZXhwcmVzc2lvbiA9IGJ1aWxkRXhwcmVzc2lvbihib2R5LCBvcHRpb25zLndpdGhGb250KFwibWF0aHJtXCIpLCB0cnVlKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwcmVzc2lvbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gZXhwcmVzc2lvbltpXTtcblxuICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgU3ltYm9sTm9kZSkge1xuICAgICAgICAvLyBQZXIgYW1zb3BuIHBhY2thZ2UsXG4gICAgICAgIC8vIGNoYW5nZSBtaW51cyB0byBoeXBoZW4gYW5kIFxcYXN0IHRvIGFzdGVyaXNrXG4gICAgICAgIGNoaWxkLnRleHQgPSBjaGlsZC50ZXh0LnJlcGxhY2UoL1xcdTIyMTIvLCBcIi1cIikucmVwbGFjZSgvXFx1MjIxNy8sIFwiKlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBiYXNlID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wibW9wXCJdLCBleHByZXNzaW9uLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBiYXNlID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wibW9wXCJdLCBbXSwgb3B0aW9ucyk7XG4gIH1cblxuICBpZiAoaGFzTGltaXRzKSB7XG4gICAgcmV0dXJuIGFzc2VtYmxlU3VwU3ViKGJhc2UsIHN1cEdyb3VwLCBzdWJHcm91cCwgb3B0aW9ucywgb3B0aW9ucy5zdHlsZSwgMCwgMCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cbn07XG5cbnZhciBvcGVyYXRvcm5hbWVfbWF0aG1sQnVpbGRlciA9IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgLy8gVGhlIHN0ZXBzIHRha2VuIGhlcmUgYXJlIHNpbWlsYXIgdG8gdGhlIGh0bWwgdmVyc2lvbi5cbiAgdmFyIGV4cHJlc3Npb24gPSBidWlsZE1hdGhNTF9idWlsZEV4cHJlc3Npb24oZ3JvdXAuYm9keSwgb3B0aW9ucy53aXRoRm9udChcIm1hdGhybVwiKSk7IC8vIElzIGV4cHJlc3Npb24gYSBzdHJpbmcgb3IgaGFzIGl0IHNvbWV0aGluZyBsaWtlIGEgZnJhY3Rpb24/XG5cbiAgdmFyIGlzQWxsU3RyaW5nID0gdHJ1ZTsgLy8gZGVmYXVsdFxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwcmVzc2lvbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBub2RlID0gZXhwcmVzc2lvbltpXTtcblxuICAgIGlmIChub2RlIGluc3RhbmNlb2YgbWF0aE1MVHJlZS5TcGFjZU5vZGUpIHsvLyBEbyBub3RoaW5nXG4gICAgfSBlbHNlIGlmIChub2RlIGluc3RhbmNlb2YgbWF0aE1MVHJlZS5NYXRoTm9kZSkge1xuICAgICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICAgICAgY2FzZSBcIm1pXCI6XG4gICAgICAgIGNhc2UgXCJtblwiOlxuICAgICAgICBjYXNlIFwibXNcIjpcbiAgICAgICAgY2FzZSBcIm1zcGFjZVwiOlxuICAgICAgICBjYXNlIFwibXRleHRcIjpcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gRG8gbm90aGluZyB5ZXQuXG5cbiAgICAgICAgY2FzZSBcIm1vXCI6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIGNoaWxkID0gbm9kZS5jaGlsZHJlblswXTtcblxuICAgICAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIGNoaWxkIGluc3RhbmNlb2YgbWF0aE1MVHJlZS5UZXh0Tm9kZSkge1xuICAgICAgICAgICAgICBjaGlsZC50ZXh0ID0gY2hpbGQudGV4dC5yZXBsYWNlKC9cXHUyMjEyLywgXCItXCIpLnJlcGxhY2UoL1xcdTIyMTcvLCBcIipcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpc0FsbFN0cmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpc0FsbFN0cmluZyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpc0FsbFN0cmluZyA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc0FsbFN0cmluZykge1xuICAgIC8vIFdyaXRlIGEgc2luZ2xlIFRleHROb2RlIGluc3RlYWQgb2YgbXVsdGlwbGUgbmVzdGVkIHRhZ3MuXG4gICAgdmFyIHdvcmQgPSBleHByZXNzaW9uLm1hcChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGUudG9UZXh0KCk7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgICBleHByZXNzaW9uID0gW25ldyBtYXRoTUxUcmVlLlRleHROb2RlKHdvcmQpXTtcbiAgfVxuXG4gIHZhciBpZGVudGlmaWVyID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtaVwiLCBleHByZXNzaW9uKTtcbiAgaWRlbnRpZmllci5zZXRBdHRyaWJ1dGUoXCJtYXRodmFyaWFudFwiLCBcIm5vcm1hbFwiKTsgLy8gXFx1MjA2MSBpcyB0aGUgc2FtZSBhcyAmQXBwbHlGdW5jdGlvbjtcbiAgLy8gcmVmOiBodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2NoYXJzZXRzL3JlZl9odG1sX2VudGl0aWVzX2EuYXNwXG5cbiAgdmFyIG9wZXJhdG9yID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtb1wiLCBbbWFrZVRleHQoXCJcXHUyMDYxXCIsIFwidGV4dFwiKV0pO1xuXG4gIGlmIChncm91cC5wYXJlbnRJc1N1cFN1Yikge1xuICAgIHJldHVybiBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1yb3dcIiwgW2lkZW50aWZpZXIsIG9wZXJhdG9yXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG1hdGhNTFRyZWUubmV3RG9jdW1lbnRGcmFnbWVudChbaWRlbnRpZmllciwgb3BlcmF0b3JdKTtcbiAgfVxufTsgLy8gXFxvcGVyYXRvcm5hbWVcbi8vIGFtc29wbi5kdHg6IFxcbWF0aG9weyMxXFxrZXJuXFx6QFxcb3BlcmF0b3JAZm9udCMzfVxcbmV3bWNvZGVzQFxuXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJvcGVyYXRvcm5hbWVcIixcbiAgbmFtZXM6IFtcIlxcXFxvcGVyYXRvcm5hbWVAXCIsIFwiXFxcXG9wZXJhdG9ybmFtZXdpdGhsaW1pdHNcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXIsXG4gICAgICAgIGZ1bmNOYW1lID0gX3JlZi5mdW5jTmFtZTtcbiAgICB2YXIgYm9keSA9IGFyZ3NbMF07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwib3BlcmF0b3JuYW1lXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGJvZHk6IG9yZGFyZ3VtZW50KGJvZHkpLFxuICAgICAgYWx3YXlzSGFuZGxlU3VwU3ViOiBmdW5jTmFtZSA9PT0gXCJcXFxcb3BlcmF0b3JuYW1ld2l0aGxpbWl0c1wiLFxuICAgICAgbGltaXRzOiBmYWxzZSxcbiAgICAgIHBhcmVudElzU3VwU3ViOiBmYWxzZVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBvcGVyYXRvcm5hbWVfaHRtbEJ1aWxkZXIsXG4gIG1hdGhtbEJ1aWxkZXI6IG9wZXJhdG9ybmFtZV9tYXRobWxCdWlsZGVyXG59KTtcbmRlZmluZU1hY3JvKFwiXFxcXG9wZXJhdG9ybmFtZVwiLCBcIlxcXFxAaWZzdGFyXFxcXG9wZXJhdG9ybmFtZXdpdGhsaW1pdHNcXFxcb3BlcmF0b3JuYW1lQFwiKTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvb3JkZ3JvdXAuanNcblxuXG5cblxuZGVmaW5lRnVuY3Rpb25CdWlsZGVycyh7XG4gIHR5cGU6IFwib3JkZ3JvdXBcIixcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgaWYgKGdyb3VwLnNlbWlzaW1wbGUpIHtcbiAgICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlRnJhZ21lbnQoYnVpbGRFeHByZXNzaW9uKGdyb3VwLmJvZHksIG9wdGlvbnMsIGZhbHNlKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcmRcIl0sIGJ1aWxkRXhwcmVzc2lvbihncm91cC5ib2R5LCBvcHRpb25zLCB0cnVlKSwgb3B0aW9ucyk7XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gYnVpbGRFeHByZXNzaW9uUm93KGdyb3VwLmJvZHksIG9wdGlvbnMsIHRydWUpO1xuICB9XG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvb3ZlcmxpbmUuanNcblxuXG5cblxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwib3ZlcmxpbmVcIixcbiAgbmFtZXM6IFtcIlxcXFxvdmVybGluZVwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmLnBhcnNlcjtcbiAgICB2YXIgYm9keSA9IGFyZ3NbMF07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwib3ZlcmxpbmVcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgYm9keTogYm9keVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIC8vIE92ZXJsaW5lcyBhcmUgaGFuZGxlZCBpbiB0aGUgVGVYYm9vayBwZyA0NDMsIFJ1bGUgOS5cbiAgICAvLyBCdWlsZCB0aGUgaW5uZXIgZ3JvdXAgaW4gdGhlIGNyYW1wZWQgc3R5bGUuXG4gICAgdmFyIGlubmVyR3JvdXAgPSBidWlsZEdyb3VwKGdyb3VwLmJvZHksIG9wdGlvbnMuaGF2aW5nQ3JhbXBlZFN0eWxlKCkpOyAvLyBDcmVhdGUgdGhlIGxpbmUgYWJvdmUgdGhlIGJvZHlcblxuICAgIHZhciBsaW5lID0gYnVpbGRDb21tb24ubWFrZUxpbmVTcGFuKFwib3ZlcmxpbmUtbGluZVwiLCBvcHRpb25zKTsgLy8gR2VuZXJhdGUgdGhlIHZsaXN0LCB3aXRoIHRoZSBhcHByb3ByaWF0ZSBrZXJuc1xuXG4gICAgdmFyIGRlZmF1bHRSdWxlVGhpY2tuZXNzID0gb3B0aW9ucy5mb250TWV0cmljcygpLmRlZmF1bHRSdWxlVGhpY2tuZXNzO1xuICAgIHZhciB2bGlzdCA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICBwb3NpdGlvblR5cGU6IFwiZmlyc3RCYXNlbGluZVwiLFxuICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBpbm5lckdyb3VwXG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwia2VyblwiLFxuICAgICAgICBzaXplOiAzICogZGVmYXVsdFJ1bGVUaGlja25lc3NcbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IGxpbmVcbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJrZXJuXCIsXG4gICAgICAgIHNpemU6IGRlZmF1bHRSdWxlVGhpY2tuZXNzXG4gICAgICB9XVxuICAgIH0sIG9wdGlvbnMpO1xuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtb3JkXCIsIFwib3ZlcmxpbmVcIl0sIFt2bGlzdF0sIG9wdGlvbnMpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIG9wZXJhdG9yID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtb1wiLCBbbmV3IG1hdGhNTFRyZWUuVGV4dE5vZGUoXCJcXHUyMDNFXCIpXSk7XG4gICAgb3BlcmF0b3Iuc2V0QXR0cmlidXRlKFwic3RyZXRjaHlcIiwgXCJ0cnVlXCIpO1xuICAgIHZhciBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtb3ZlclwiLCBbYnVpbGRNYXRoTUxfYnVpbGRHcm91cChncm91cC5ib2R5LCBvcHRpb25zKSwgb3BlcmF0b3JdKTtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShcImFjY2VudFwiLCBcInRydWVcIik7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn0pO1xuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy9waGFudG9tLmpzXG5cblxuXG5cblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcInBoYW50b21cIixcbiAgbmFtZXM6IFtcIlxcXFxwaGFudG9tXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXI7XG4gICAgdmFyIGJvZHkgPSBhcmdzWzBdO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcInBoYW50b21cIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgYm9keTogb3JkYXJndW1lbnQoYm9keSlcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgZWxlbWVudHMgPSBidWlsZEV4cHJlc3Npb24oZ3JvdXAuYm9keSwgb3B0aW9ucy53aXRoUGhhbnRvbSgpLCBmYWxzZSk7IC8vIFxccGhhbnRvbSBpc24ndCBzdXBwb3NlZCB0byBhZmZlY3QgdGhlIGVsZW1lbnRzIGl0IGNvbnRhaW5zLlxuICAgIC8vIFNlZSBcImNvbG9yXCIgZm9yIG1vcmUgZGV0YWlscy5cblxuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlRnJhZ21lbnQoZWxlbWVudHMpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIGlubmVyID0gYnVpbGRNYXRoTUxfYnVpbGRFeHByZXNzaW9uKGdyb3VwLmJvZHksIG9wdGlvbnMpO1xuICAgIHJldHVybiBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1waGFudG9tXCIsIGlubmVyKTtcbiAgfVxufSk7XG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwiaHBoYW50b21cIixcbiAgbmFtZXM6IFtcIlxcXFxocGhhbnRvbVwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWVcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmMiwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmMi5wYXJzZXI7XG4gICAgdmFyIGJvZHkgPSBhcmdzWzBdO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcImhwaGFudG9tXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIGJvZHk6IGJvZHlcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgbm9kZSA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtdLCBbYnVpbGRHcm91cChncm91cC5ib2R5LCBvcHRpb25zLndpdGhQaGFudG9tKCkpXSk7XG4gICAgbm9kZS5oZWlnaHQgPSAwO1xuICAgIG5vZGUuZGVwdGggPSAwO1xuXG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBub2RlLmNoaWxkcmVuW2ldLmhlaWdodCA9IDA7XG4gICAgICAgIG5vZGUuY2hpbGRyZW5baV0uZGVwdGggPSAwO1xuICAgICAgfVxuICAgIH0gLy8gU2VlIHNtYXNoIGZvciBjb21tZW50IHJlOiB1c2Ugb2YgbWFrZVZMaXN0XG5cblxuICAgIG5vZGUgPSBidWlsZENvbW1vbi5tYWtlVkxpc3Qoe1xuICAgICAgcG9zaXRpb25UeXBlOiBcImZpcnN0QmFzZWxpbmVcIixcbiAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogbm9kZVxuICAgICAgfV1cbiAgICB9LCBvcHRpb25zKTsgLy8gRm9yIHNwYWNpbmcsIFRlWCB0cmVhdHMgXFxzbWFzaCBhcyBhIG1hdGggZ3JvdXAgKHNhbWUgc3BhY2luZyBhcyBvcmQpLlxuXG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcmRcIl0sIFtub2RlXSwgb3B0aW9ucyk7XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgaW5uZXIgPSBidWlsZE1hdGhNTF9idWlsZEV4cHJlc3Npb24ob3JkYXJndW1lbnQoZ3JvdXAuYm9keSksIG9wdGlvbnMpO1xuICAgIHZhciBwaGFudG9tID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtcGhhbnRvbVwiLCBpbm5lcik7XG4gICAgdmFyIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1wYWRkZWRcIiwgW3BoYW50b21dKTtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBcIjBweFwiKTtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShcImRlcHRoXCIsIFwiMHB4XCIpO1xuICAgIHJldHVybiBub2RlO1xuICB9XG59KTtcbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJ2cGhhbnRvbVwiLFxuICBuYW1lczogW1wiXFxcXHZwaGFudG9tXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDEsXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYzLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYzLnBhcnNlcjtcbiAgICB2YXIgYm9keSA9IGFyZ3NbMF07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwidnBoYW50b21cIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgYm9keTogYm9keVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBpbm5lciA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcImlubmVyXCJdLCBbYnVpbGRHcm91cChncm91cC5ib2R5LCBvcHRpb25zLndpdGhQaGFudG9tKCkpXSk7XG4gICAgdmFyIGZpeCA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcImZpeFwiXSwgW10pO1xuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtb3JkXCIsIFwicmxhcFwiXSwgW2lubmVyLCBmaXhdLCBvcHRpb25zKTtcbiAgfSxcbiAgbWF0aG1sQnVpbGRlcjogZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBpbm5lciA9IGJ1aWxkTWF0aE1MX2J1aWxkRXhwcmVzc2lvbihvcmRhcmd1bWVudChncm91cC5ib2R5KSwgb3B0aW9ucyk7XG4gICAgdmFyIHBoYW50b20gPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1waGFudG9tXCIsIGlubmVyKTtcbiAgICB2YXIgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXBhZGRlZFwiLCBbcGhhbnRvbV0pO1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgXCIwcHhcIik7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn0pO1xuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy9yYWlzZWJveC5qc1xuXG5cblxuXG5cblxuIC8vIEJveCBtYW5pcHVsYXRpb25cblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcInJhaXNlYm94XCIsXG4gIG5hbWVzOiBbXCJcXFxccmFpc2Vib3hcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMixcbiAgICBhcmdUeXBlczogW1wic2l6ZVwiLCBcImhib3hcIl0sXG4gICAgYWxsb3dlZEluVGV4dDogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXI7XG4gICAgdmFyIGFtb3VudCA9IGFzc2VydE5vZGVUeXBlKGFyZ3NbMF0sIFwic2l6ZVwiKS52YWx1ZTtcbiAgICB2YXIgYm9keSA9IGFyZ3NbMV07XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwicmFpc2Vib3hcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgZHk6IGFtb3VudCxcbiAgICAgIGJvZHk6IGJvZHlcbiAgICB9O1xuICB9LFxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgYm9keSA9IGJ1aWxkR3JvdXAoZ3JvdXAuYm9keSwgb3B0aW9ucyk7XG4gICAgdmFyIGR5ID0gY2FsY3VsYXRlU2l6ZShncm91cC5keSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICBwb3NpdGlvblR5cGU6IFwic2hpZnRcIixcbiAgICAgIHBvc2l0aW9uRGF0YTogLWR5LFxuICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBib2R5XG4gICAgICB9XVxuICAgIH0sIG9wdGlvbnMpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1wYWRkZWRcIiwgW2J1aWxkTWF0aE1MX2J1aWxkR3JvdXAoZ3JvdXAuYm9keSwgb3B0aW9ucyldKTtcbiAgICB2YXIgZHkgPSBncm91cC5keS5udW1iZXIgKyBncm91cC5keS51bml0O1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKFwidm9mZnNldFwiLCBkeSk7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn0pO1xuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy9ydWxlLmpzXG5cblxuXG5cblxuZGVmaW5lRnVuY3Rpb24oe1xuICB0eXBlOiBcInJ1bGVcIixcbiAgbmFtZXM6IFtcIlxcXFxydWxlXCJdLFxuICBwcm9wczoge1xuICAgIG51bUFyZ3M6IDIsXG4gICAgbnVtT3B0aW9uYWxBcmdzOiAxLFxuICAgIGFyZ1R5cGVzOiBbXCJzaXplXCIsIFwic2l6ZVwiLCBcInNpemVcIl1cbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzLCBvcHRBcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyO1xuICAgIHZhciBzaGlmdCA9IG9wdEFyZ3NbMF07XG4gICAgdmFyIHdpZHRoID0gYXNzZXJ0Tm9kZVR5cGUoYXJnc1swXSwgXCJzaXplXCIpO1xuICAgIHZhciBoZWlnaHQgPSBhc3NlcnROb2RlVHlwZShhcmdzWzFdLCBcInNpemVcIik7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwicnVsZVwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBzaGlmdDogc2hpZnQgJiYgYXNzZXJ0Tm9kZVR5cGUoc2hpZnQsIFwic2l6ZVwiKS52YWx1ZSxcbiAgICAgIHdpZHRoOiB3aWR0aC52YWx1ZSxcbiAgICAgIGhlaWdodDogaGVpZ2h0LnZhbHVlXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgLy8gTWFrZSBhbiBlbXB0eSBzcGFuIGZvciB0aGUgcnVsZVxuICAgIHZhciBydWxlID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW1wibW9yZFwiLCBcInJ1bGVcIl0sIFtdLCBvcHRpb25zKTsgLy8gQ2FsY3VsYXRlIHRoZSBzaGlmdCwgd2lkdGgsIGFuZCBoZWlnaHQgb2YgdGhlIHJ1bGUsIGFuZCBhY2NvdW50IGZvciB1bml0c1xuXG4gICAgdmFyIHdpZHRoID0gY2FsY3VsYXRlU2l6ZShncm91cC53aWR0aCwgb3B0aW9ucyk7XG4gICAgdmFyIGhlaWdodCA9IGNhbGN1bGF0ZVNpemUoZ3JvdXAuaGVpZ2h0LCBvcHRpb25zKTtcbiAgICB2YXIgc2hpZnQgPSBncm91cC5zaGlmdCA/IGNhbGN1bGF0ZVNpemUoZ3JvdXAuc2hpZnQsIG9wdGlvbnMpIDogMDsgLy8gU3R5bGUgdGhlIHJ1bGUgdG8gdGhlIHJpZ2h0IHNpemVcblxuICAgIHJ1bGUuc3R5bGUuYm9yZGVyUmlnaHRXaWR0aCA9IHdpZHRoICsgXCJlbVwiO1xuICAgIHJ1bGUuc3R5bGUuYm9yZGVyVG9wV2lkdGggPSBoZWlnaHQgKyBcImVtXCI7XG4gICAgcnVsZS5zdHlsZS5ib3R0b20gPSBzaGlmdCArIFwiZW1cIjsgLy8gUmVjb3JkIHRoZSBoZWlnaHQgYW5kIHdpZHRoXG5cbiAgICBydWxlLndpZHRoID0gd2lkdGg7XG4gICAgcnVsZS5oZWlnaHQgPSBoZWlnaHQgKyBzaGlmdDtcbiAgICBydWxlLmRlcHRoID0gLXNoaWZ0OyAvLyBGb250IHNpemUgaXMgdGhlIG51bWJlciBsYXJnZSBlbm91Z2ggdGhhdCB0aGUgYnJvd3NlciB3aWxsXG4gICAgLy8gcmVzZXJ2ZSBhdCBsZWFzdCBgYWJzSGVpZ2h0YCBzcGFjZSBhYm92ZSB0aGUgYmFzZWxpbmUuXG4gICAgLy8gVGhlIDEuMTI1IGZhY3RvciB3YXMgZW1waXJpY2FsbHkgZGV0ZXJtaW5lZFxuXG4gICAgcnVsZS5tYXhGb250U2l6ZSA9IGhlaWdodCAqIDEuMTI1ICogb3B0aW9ucy5zaXplTXVsdGlwbGllcjtcbiAgICByZXR1cm4gcnVsZTtcbiAgfSxcbiAgbWF0aG1sQnVpbGRlcjogZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciB3aWR0aCA9IGNhbGN1bGF0ZVNpemUoZ3JvdXAud2lkdGgsIG9wdGlvbnMpO1xuICAgIHZhciBoZWlnaHQgPSBjYWxjdWxhdGVTaXplKGdyb3VwLmhlaWdodCwgb3B0aW9ucyk7XG4gICAgdmFyIHNoaWZ0ID0gZ3JvdXAuc2hpZnQgPyBjYWxjdWxhdGVTaXplKGdyb3VwLnNoaWZ0LCBvcHRpb25zKSA6IDA7XG4gICAgdmFyIGNvbG9yID0gb3B0aW9ucy5jb2xvciAmJiBvcHRpb25zLmdldENvbG9yKCkgfHwgXCJibGFja1wiO1xuICAgIHZhciBydWxlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtc3BhY2VcIik7XG4gICAgcnVsZS5zZXRBdHRyaWJ1dGUoXCJtYXRoYmFja2dyb3VuZFwiLCBjb2xvcik7XG4gICAgcnVsZS5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCB3aWR0aCArIFwiZW1cIik7XG4gICAgcnVsZS5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgaGVpZ2h0ICsgXCJlbVwiKTtcbiAgICB2YXIgd3JhcHBlciA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXBhZGRlZFwiLCBbcnVsZV0pO1xuXG4gICAgaWYgKHNoaWZ0ID49IDApIHtcbiAgICAgIHdyYXBwZXIuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIFwiK1wiICsgc2hpZnQgKyBcImVtXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3cmFwcGVyLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBzaGlmdCArIFwiZW1cIik7XG4gICAgICB3cmFwcGVyLnNldEF0dHJpYnV0ZShcImRlcHRoXCIsIFwiK1wiICsgLXNoaWZ0ICsgXCJlbVwiKTtcbiAgICB9XG5cbiAgICB3cmFwcGVyLnNldEF0dHJpYnV0ZShcInZvZmZzZXRcIiwgc2hpZnQgKyBcImVtXCIpO1xuICAgIHJldHVybiB3cmFwcGVyO1xuICB9XG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvc2l6aW5nLmpzXG5cblxuXG5cblxuZnVuY3Rpb24gc2l6aW5nR3JvdXAodmFsdWUsIG9wdGlvbnMsIGJhc2VPcHRpb25zKSB7XG4gIHZhciBpbm5lciA9IGJ1aWxkRXhwcmVzc2lvbih2YWx1ZSwgb3B0aW9ucywgZmFsc2UpO1xuICB2YXIgbXVsdGlwbGllciA9IG9wdGlvbnMuc2l6ZU11bHRpcGxpZXIgLyBiYXNlT3B0aW9ucy5zaXplTXVsdGlwbGllcjsgLy8gQWRkIHNpemUtcmVzZXR0aW5nIGNsYXNzZXMgdG8gdGhlIGlubmVyIGxpc3QgYW5kIHNldCBtYXhGb250U2l6ZVxuICAvLyBtYW51YWxseS4gSGFuZGxlIG5lc3RlZCBzaXplIGNoYW5nZXMuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbm5lci5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwb3MgPSBpbm5lcltpXS5jbGFzc2VzLmluZGV4T2YoXCJzaXppbmdcIik7XG5cbiAgICBpZiAocG9zIDwgMCkge1xuICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoaW5uZXJbaV0uY2xhc3Nlcywgb3B0aW9ucy5zaXppbmdDbGFzc2VzKGJhc2VPcHRpb25zKSk7XG4gICAgfSBlbHNlIGlmIChpbm5lcltpXS5jbGFzc2VzW3BvcyArIDFdID09PSBcInJlc2V0LXNpemVcIiArIG9wdGlvbnMuc2l6ZSkge1xuICAgICAgLy8gVGhpcyBpcyBhIG5lc3RlZCBzaXplIGNoYW5nZTogZS5nLiwgaW5uZXJbaV0gaXMgdGhlIFwiYlwiIGluXG4gICAgICAvLyBgXFxIdWdlIGEgXFxzbWFsbCBiYC4gT3ZlcnJpZGUgdGhlIG9sZCBzaXplICh0aGUgYHJlc2V0LWAgY2xhc3MpXG4gICAgICAvLyBidXQgbm90IHRoZSBuZXcgc2l6ZS5cbiAgICAgIGlubmVyW2ldLmNsYXNzZXNbcG9zICsgMV0gPSBcInJlc2V0LXNpemVcIiArIGJhc2VPcHRpb25zLnNpemU7XG4gICAgfVxuXG4gICAgaW5uZXJbaV0uaGVpZ2h0ICo9IG11bHRpcGxpZXI7XG4gICAgaW5uZXJbaV0uZGVwdGggKj0gbXVsdGlwbGllcjtcbiAgfVxuXG4gIHJldHVybiBidWlsZENvbW1vbi5tYWtlRnJhZ21lbnQoaW5uZXIpO1xufVxudmFyIHNpemVGdW5jcyA9IFtcIlxcXFx0aW55XCIsIFwiXFxcXHNpeHB0c2l6ZVwiLCBcIlxcXFxzY3JpcHRzaXplXCIsIFwiXFxcXGZvb3Rub3Rlc2l6ZVwiLCBcIlxcXFxzbWFsbFwiLCBcIlxcXFxub3JtYWxzaXplXCIsIFwiXFxcXGxhcmdlXCIsIFwiXFxcXExhcmdlXCIsIFwiXFxcXExBUkdFXCIsIFwiXFxcXGh1Z2VcIiwgXCJcXFxcSHVnZVwiXTtcbnZhciBzaXppbmdfaHRtbEJ1aWxkZXIgPSBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAvLyBIYW5kbGUgc2l6aW5nIG9wZXJhdG9ycyBsaWtlIFxcSHVnZS4gUmVhbCBUZVggZG9lc24ndCBhY3R1YWxseSBhbGxvd1xuICAvLyB0aGVzZSBmdW5jdGlvbnMgaW5zaWRlIG9mIG1hdGggZXhwcmVzc2lvbnMsIHNvIHdlIGRvIHNvbWUgc3BlY2lhbFxuICAvLyBoYW5kbGluZy5cbiAgdmFyIG5ld09wdGlvbnMgPSBvcHRpb25zLmhhdmluZ1NpemUoZ3JvdXAuc2l6ZSk7XG4gIHJldHVybiBzaXppbmdHcm91cChncm91cC5ib2R5LCBuZXdPcHRpb25zLCBvcHRpb25zKTtcbn07XG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwic2l6aW5nXCIsXG4gIG5hbWVzOiBzaXplRnVuY3MsXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMCxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncykge1xuICAgIHZhciBicmVha09uVG9rZW5UZXh0ID0gX3JlZi5icmVha09uVG9rZW5UZXh0LFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWYuZnVuY05hbWUsXG4gICAgICAgIHBhcnNlciA9IF9yZWYucGFyc2VyO1xuICAgIHZhciBib2R5ID0gcGFyc2VyLnBhcnNlRXhwcmVzc2lvbihmYWxzZSwgYnJlYWtPblRva2VuVGV4dCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwic2l6aW5nXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIC8vIEZpZ3VyZSBvdXQgd2hhdCBzaXplIHRvIHVzZSBiYXNlZCBvbiB0aGUgbGlzdCBvZiBmdW5jdGlvbnMgYWJvdmVcbiAgICAgIHNpemU6IHNpemVGdW5jcy5pbmRleE9mKGZ1bmNOYW1lKSArIDEsXG4gICAgICBib2R5OiBib2R5XG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IHNpemluZ19odG1sQnVpbGRlcixcbiAgbWF0aG1sQnVpbGRlcjogZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBuZXdPcHRpb25zID0gb3B0aW9ucy5oYXZpbmdTaXplKGdyb3VwLnNpemUpO1xuICAgIHZhciBpbm5lciA9IGJ1aWxkTWF0aE1MX2J1aWxkRXhwcmVzc2lvbihncm91cC5ib2R5LCBuZXdPcHRpb25zKTtcbiAgICB2YXIgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXN0eWxlXCIsIGlubmVyKTsgLy8gVE9ETyhlbWlseSk6IFRoaXMgZG9lc24ndCBwcm9kdWNlIHRoZSBjb3JyZWN0IHNpemUgZm9yIG5lc3RlZCBzaXplXG4gICAgLy8gY2hhbmdlcywgYmVjYXVzZSB3ZSBkb24ndCBrZWVwIHN0YXRlIG9mIHdoYXQgc3R5bGUgd2UncmUgY3VycmVudGx5XG4gICAgLy8gaW4sIHNvIHdlIGNhbid0IHJlc2V0IHRoZSBzaXplIHRvIG5vcm1hbCBiZWZvcmUgY2hhbmdpbmcgaXQuICBOb3dcbiAgICAvLyB0aGF0IHdlJ3JlIHBhc3NpbmcgYW4gb3B0aW9ucyBwYXJhbWV0ZXIgd2Ugc2hvdWxkIGJlIGFibGUgdG8gZml4XG4gICAgLy8gdGhpcy5cblxuICAgIG5vZGUuc2V0QXR0cmlidXRlKFwibWF0aHNpemVcIiwgbmV3T3B0aW9ucy5zaXplTXVsdGlwbGllciArIFwiZW1cIik7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn0pO1xuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy9zbWFzaC5qc1xuLy8gc21hc2gsIHdpdGggb3B0aW9uYWwgW3RiXSwgYXMgaW4gQU1TXG5cblxuXG5cblxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwic21hc2hcIixcbiAgbmFtZXM6IFtcIlxcXFxzbWFzaFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxLFxuICAgIG51bU9wdGlvbmFsQXJnczogMSxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncywgb3B0QXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmLnBhcnNlcjtcbiAgICB2YXIgc21hc2hIZWlnaHQgPSBmYWxzZTtcbiAgICB2YXIgc21hc2hEZXB0aCA9IGZhbHNlO1xuICAgIHZhciB0YkFyZyA9IG9wdEFyZ3NbMF0gJiYgYXNzZXJ0Tm9kZVR5cGUob3B0QXJnc1swXSwgXCJvcmRncm91cFwiKTtcblxuICAgIGlmICh0YkFyZykge1xuICAgICAgLy8gT3B0aW9uYWwgW3RiXSBhcmd1bWVudCBpcyBlbmdhZ2VkLlxuICAgICAgLy8gcmVmOiBhbXNtYXRoOiBcXHJlbmV3Y29tbWFuZHtcXHNtYXNofVsxXVt0Yl17JVxuICAgICAgLy8gICAgICAgICAgICAgICBkZWZcXG1iQHR7XFxodH1cXGRlZlxcbWJAYntcXGRwfVxcZGVmXFxtYkB0YntcXGh0XFx6QFxcekBcXGRwfSVcbiAgICAgIHZhciBsZXR0ZXIgPSBcIlwiO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRiQXJnLmJvZHkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIG5vZGUgPSB0YkFyZy5ib2R5W2ldOyAvLyAkRmxvd0ZpeE1lOiBOb3QgZXZlcnkgbm9kZSB0eXBlIGhhcyBhIGB0ZXh0YCBwcm9wZXJ0eS5cblxuICAgICAgICBsZXR0ZXIgPSBub2RlLnRleHQ7XG5cbiAgICAgICAgaWYgKGxldHRlciA9PT0gXCJ0XCIpIHtcbiAgICAgICAgICBzbWFzaEhlaWdodCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAobGV0dGVyID09PSBcImJcIikge1xuICAgICAgICAgIHNtYXNoRGVwdGggPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNtYXNoSGVpZ2h0ID0gZmFsc2U7XG4gICAgICAgICAgc21hc2hEZXB0aCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNtYXNoSGVpZ2h0ID0gdHJ1ZTtcbiAgICAgIHNtYXNoRGVwdGggPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBib2R5ID0gYXJnc1swXTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJzbWFzaFwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBib2R5OiBib2R5LFxuICAgICAgc21hc2hIZWlnaHQ6IHNtYXNoSGVpZ2h0LFxuICAgICAgc21hc2hEZXB0aDogc21hc2hEZXB0aFxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBub2RlID0gYnVpbGRDb21tb24ubWFrZVNwYW4oW10sIFtidWlsZEdyb3VwKGdyb3VwLmJvZHksIG9wdGlvbnMpXSk7XG5cbiAgICBpZiAoIWdyb3VwLnNtYXNoSGVpZ2h0ICYmICFncm91cC5zbWFzaERlcHRoKSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICBpZiAoZ3JvdXAuc21hc2hIZWlnaHQpIHtcbiAgICAgIG5vZGUuaGVpZ2h0ID0gMDsgLy8gSW4gb3JkZXIgdG8gaW5mbHVlbmNlIG1ha2VWTGlzdCwgd2UgaGF2ZSB0byByZXNldCB0aGUgY2hpbGRyZW4uXG5cbiAgICAgIGlmIChub2RlLmNoaWxkcmVuKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG5vZGUuY2hpbGRyZW5baV0uaGVpZ2h0ID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChncm91cC5zbWFzaERlcHRoKSB7XG4gICAgICBub2RlLmRlcHRoID0gMDtcblxuICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgbm9kZS5jaGlsZHJlbltfaV0uZGVwdGggPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBBdCB0aGlzIHBvaW50LCB3ZSd2ZSByZXNldCB0aGUgVGVYLWxpa2UgaGVpZ2h0IGFuZCBkZXB0aCB2YWx1ZXMuXG4gICAgLy8gQnV0IHRoZSBzcGFuIHN0aWxsIGhhcyBhbiBIVE1MIGxpbmUgaGVpZ2h0LlxuICAgIC8vIG1ha2VWTGlzdCBhcHBsaWVzIFwiZGlzcGxheTogdGFibGUtY2VsbFwiLCB3aGljaCBwcmV2ZW50cyB0aGUgYnJvd3NlclxuICAgIC8vIGZyb20gYWN0aW5nIG9uIHRoYXQgbGluZSBoZWlnaHQuIFNvIHdlJ2xsIGNhbGwgbWFrZVZMaXN0IG5vdy5cblxuXG4gICAgdmFyIHNtYXNoZWROb2RlID0gYnVpbGRDb21tb24ubWFrZVZMaXN0KHtcbiAgICAgIHBvc2l0aW9uVHlwZTogXCJmaXJzdEJhc2VsaW5lXCIsXG4gICAgICBjaGlsZHJlbjogW3tcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IG5vZGVcbiAgICAgIH1dXG4gICAgfSwgb3B0aW9ucyk7IC8vIEZvciBzcGFjaW5nLCBUZVggdHJlYXRzIFxcaHBoYW50b20gYXMgYSBtYXRoIGdyb3VwIChzYW1lIHNwYWNpbmcgYXMgb3JkKS5cblxuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtb3JkXCJdLCBbc21hc2hlZE5vZGVdLCBvcHRpb25zKTtcbiAgfSxcbiAgbWF0aG1sQnVpbGRlcjogZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtcGFkZGVkXCIsIFtidWlsZE1hdGhNTF9idWlsZEdyb3VwKGdyb3VwLmJvZHksIG9wdGlvbnMpXSk7XG5cbiAgICBpZiAoZ3JvdXAuc21hc2hIZWlnaHQpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIFwiMHB4XCIpO1xuICAgIH1cblxuICAgIGlmIChncm91cC5zbWFzaERlcHRoKSB7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcImRlcHRoXCIsIFwiMHB4XCIpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9XG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvc3FydC5qc1xuXG5cblxuXG5cblxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwic3FydFwiLFxuICBuYW1lczogW1wiXFxcXHNxcnRcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMSxcbiAgICBudW1PcHRpb25hbEFyZ3M6IDFcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzLCBvcHRBcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyO1xuICAgIHZhciBpbmRleCA9IG9wdEFyZ3NbMF07XG4gICAgdmFyIGJvZHkgPSBhcmdzWzBdO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcInNxcnRcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgYm9keTogYm9keSxcbiAgICAgIGluZGV4OiBpbmRleFxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIC8vIFNxdWFyZSByb290cyBhcmUgaGFuZGxlZCBpbiB0aGUgVGVYYm9vayBwZy4gNDQzLCBSdWxlIDExLlxuICAgIC8vIEZpcnN0LCB3ZSBkbyB0aGUgc2FtZSBzdGVwcyBhcyBpbiBvdmVybGluZSB0byBidWlsZCB0aGUgaW5uZXIgZ3JvdXBcbiAgICAvLyBhbmQgbGluZVxuICAgIHZhciBpbm5lciA9IGJ1aWxkR3JvdXAoZ3JvdXAuYm9keSwgb3B0aW9ucy5oYXZpbmdDcmFtcGVkU3R5bGUoKSk7XG5cbiAgICBpZiAoaW5uZXIuaGVpZ2h0ID09PSAwKSB7XG4gICAgICAvLyBSZW5kZXIgYSBzbWFsbCBzdXJkLlxuICAgICAgaW5uZXIuaGVpZ2h0ID0gb3B0aW9ucy5mb250TWV0cmljcygpLnhIZWlnaHQ7XG4gICAgfSAvLyBTb21lIGdyb3VwcyBjYW4gcmV0dXJuIGRvY3VtZW50IGZyYWdtZW50cy4gIEhhbmRsZSB0aG9zZSBieSB3cmFwcGluZ1xuICAgIC8vIHRoZW0gaW4gYSBzcGFuLlxuXG5cbiAgICBpbm5lciA9IGJ1aWxkQ29tbW9uLndyYXBGcmFnbWVudChpbm5lciwgb3B0aW9ucyk7IC8vIENhbGN1bGF0ZSB0aGUgbWluaW11bSBzaXplIGZvciB0aGUgXFxzdXJkIGRlbGltaXRlclxuXG4gICAgdmFyIG1ldHJpY3MgPSBvcHRpb25zLmZvbnRNZXRyaWNzKCk7XG4gICAgdmFyIHRoZXRhID0gbWV0cmljcy5kZWZhdWx0UnVsZVRoaWNrbmVzcztcbiAgICB2YXIgcGhpID0gdGhldGE7XG5cbiAgICBpZiAob3B0aW9ucy5zdHlsZS5pZCA8IHNyY19TdHlsZS5URVhULmlkKSB7XG4gICAgICBwaGkgPSBvcHRpb25zLmZvbnRNZXRyaWNzKCkueEhlaWdodDtcbiAgICB9IC8vIENhbGN1bGF0ZSB0aGUgY2xlYXJhbmNlIGJldHdlZW4gdGhlIGJvZHkgYW5kIGxpbmVcblxuXG4gICAgdmFyIGxpbmVDbGVhcmFuY2UgPSB0aGV0YSArIHBoaSAvIDQ7XG4gICAgdmFyIG1pbkRlbGltaXRlckhlaWdodCA9IGlubmVyLmhlaWdodCArIGlubmVyLmRlcHRoICsgbGluZUNsZWFyYW5jZSArIHRoZXRhOyAvLyBDcmVhdGUgYSBzcXJ0IFNWRyBvZiB0aGUgcmVxdWlyZWQgbWluaW11bSBzaXplXG5cbiAgICB2YXIgX2RlbGltaXRlciRzcXJ0SW1hZ2UgPSBkZWxpbWl0ZXIuc3FydEltYWdlKG1pbkRlbGltaXRlckhlaWdodCwgb3B0aW9ucyksXG4gICAgICAgIGltZyA9IF9kZWxpbWl0ZXIkc3FydEltYWdlLnNwYW4sXG4gICAgICAgIHJ1bGVXaWR0aCA9IF9kZWxpbWl0ZXIkc3FydEltYWdlLnJ1bGVXaWR0aCxcbiAgICAgICAgYWR2YW5jZVdpZHRoID0gX2RlbGltaXRlciRzcXJ0SW1hZ2UuYWR2YW5jZVdpZHRoO1xuXG4gICAgdmFyIGRlbGltRGVwdGggPSBpbWcuaGVpZ2h0IC0gcnVsZVdpZHRoOyAvLyBBZGp1c3QgdGhlIGNsZWFyYW5jZSBiYXNlZCBvbiB0aGUgZGVsaW1pdGVyIHNpemVcblxuICAgIGlmIChkZWxpbURlcHRoID4gaW5uZXIuaGVpZ2h0ICsgaW5uZXIuZGVwdGggKyBsaW5lQ2xlYXJhbmNlKSB7XG4gICAgICBsaW5lQ2xlYXJhbmNlID0gKGxpbmVDbGVhcmFuY2UgKyBkZWxpbURlcHRoIC0gaW5uZXIuaGVpZ2h0IC0gaW5uZXIuZGVwdGgpIC8gMjtcbiAgICB9IC8vIFNoaWZ0IHRoZSBzcXJ0IGltYWdlXG5cblxuICAgIHZhciBpbWdTaGlmdCA9IGltZy5oZWlnaHQgLSBpbm5lci5oZWlnaHQgLSBsaW5lQ2xlYXJhbmNlIC0gcnVsZVdpZHRoO1xuICAgIGlubmVyLnN0eWxlLnBhZGRpbmdMZWZ0ID0gYWR2YW5jZVdpZHRoICsgXCJlbVwiOyAvLyBPdmVybGF5IHRoZSBpbWFnZSBhbmQgdGhlIGFyZ3VtZW50LlxuXG4gICAgdmFyIGJvZHkgPSBidWlsZENvbW1vbi5tYWtlVkxpc3Qoe1xuICAgICAgcG9zaXRpb25UeXBlOiBcImZpcnN0QmFzZWxpbmVcIixcbiAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogaW5uZXIsXG4gICAgICAgIHdyYXBwZXJDbGFzc2VzOiBbXCJzdmctYWxpZ25cIl1cbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJrZXJuXCIsXG4gICAgICAgIHNpemU6IC0oaW5uZXIuaGVpZ2h0ICsgaW1nU2hpZnQpXG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBpbWdcbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJrZXJuXCIsXG4gICAgICAgIHNpemU6IHJ1bGVXaWR0aFxuICAgICAgfV1cbiAgICB9LCBvcHRpb25zKTtcblxuICAgIGlmICghZ3JvdXAuaW5kZXgpIHtcbiAgICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtb3JkXCIsIFwic3FydFwiXSwgW2JvZHldLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSGFuZGxlIHRoZSBvcHRpb25hbCByb290IGluZGV4XG4gICAgICAvLyBUaGUgaW5kZXggaXMgYWx3YXlzIGluIHNjcmlwdHNjcmlwdCBzdHlsZVxuICAgICAgdmFyIG5ld09wdGlvbnMgPSBvcHRpb25zLmhhdmluZ1N0eWxlKHNyY19TdHlsZS5TQ1JJUFRTQ1JJUFQpO1xuICAgICAgdmFyIHJvb3RtID0gYnVpbGRHcm91cChncm91cC5pbmRleCwgbmV3T3B0aW9ucywgb3B0aW9ucyk7IC8vIFRoZSBhbW91bnQgdGhlIGluZGV4IGlzIHNoaWZ0ZWQgYnkuIFRoaXMgaXMgdGFrZW4gZnJvbSB0aGUgVGVYXG4gICAgICAvLyBzb3VyY2UsIGluIHRoZSBkZWZpbml0aW9uIG9mIGBcXHJAQHRgLlxuXG4gICAgICB2YXIgdG9TaGlmdCA9IDAuNiAqIChib2R5LmhlaWdodCAtIGJvZHkuZGVwdGgpOyAvLyBCdWlsZCBhIFZMaXN0IHdpdGggdGhlIHN1cGVyc2NyaXB0IHNoaWZ0ZWQgdXAgY29ycmVjdGx5XG5cbiAgICAgIHZhciByb290Vkxpc3QgPSBidWlsZENvbW1vbi5tYWtlVkxpc3Qoe1xuICAgICAgICBwb3NpdGlvblR5cGU6IFwic2hpZnRcIixcbiAgICAgICAgcG9zaXRpb25EYXRhOiAtdG9TaGlmdCxcbiAgICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgICAgZWxlbTogcm9vdG1cbiAgICAgICAgfV1cbiAgICAgIH0sIG9wdGlvbnMpOyAvLyBBZGQgYSBjbGFzcyBzdXJyb3VuZGluZyBpdCBzbyB3ZSBjYW4gYWRkIG9uIHRoZSBhcHByb3ByaWF0ZVxuICAgICAgLy8ga2VybmluZ1xuXG4gICAgICB2YXIgcm9vdFZMaXN0V3JhcCA9IGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcInJvb3RcIl0sIFtyb290Vkxpc3RdKTtcbiAgICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtb3JkXCIsIFwic3FydFwiXSwgW3Jvb3RWTGlzdFdyYXAsIGJvZHldLCBvcHRpb25zKTtcbiAgICB9XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgYm9keSA9IGdyb3VwLmJvZHksXG4gICAgICAgIGluZGV4ID0gZ3JvdXAuaW5kZXg7XG4gICAgcmV0dXJuIGluZGV4ID8gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtcm9vdFwiLCBbYnVpbGRNYXRoTUxfYnVpbGRHcm91cChib2R5LCBvcHRpb25zKSwgYnVpbGRNYXRoTUxfYnVpbGRHcm91cChpbmRleCwgb3B0aW9ucyldKSA6IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXNxcnRcIiwgW2J1aWxkTWF0aE1MX2J1aWxkR3JvdXAoYm9keSwgb3B0aW9ucyldKTtcbiAgfVxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL3N0eWxpbmcuanNcblxuXG5cblxuXG52YXIgc3R5bGluZ19zdHlsZU1hcCA9IHtcbiAgXCJkaXNwbGF5XCI6IHNyY19TdHlsZS5ESVNQTEFZLFxuICBcInRleHRcIjogc3JjX1N0eWxlLlRFWFQsXG4gIFwic2NyaXB0XCI6IHNyY19TdHlsZS5TQ1JJUFQsXG4gIFwic2NyaXB0c2NyaXB0XCI6IHNyY19TdHlsZS5TQ1JJUFRTQ1JJUFRcbn07XG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwic3R5bGluZ1wiLFxuICBuYW1lczogW1wiXFxcXGRpc3BsYXlzdHlsZVwiLCBcIlxcXFx0ZXh0c3R5bGVcIiwgXCJcXFxcc2NyaXB0c3R5bGVcIiwgXCJcXFxcc2NyaXB0c2NyaXB0c3R5bGVcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMCxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlLFxuICAgIHByaW1pdGl2ZTogdHJ1ZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MpIHtcbiAgICB2YXIgYnJlYWtPblRva2VuVGV4dCA9IF9yZWYuYnJlYWtPblRva2VuVGV4dCxcbiAgICAgICAgZnVuY05hbWUgPSBfcmVmLmZ1bmNOYW1lLFxuICAgICAgICBwYXJzZXIgPSBfcmVmLnBhcnNlcjtcbiAgICAvLyBwYXJzZSBvdXQgdGhlIGltcGxpY2l0IGJvZHlcbiAgICB2YXIgYm9keSA9IHBhcnNlci5wYXJzZUV4cHJlc3Npb24odHJ1ZSwgYnJlYWtPblRva2VuVGV4dCk7IC8vIFRPRE86IFJlZmFjdG9yIHRvIGF2b2lkIGR1cGxpY2F0aW5nIHN0eWxlTWFwIGluIG11bHRpcGxlIHBsYWNlcyAoZS5nLlxuICAgIC8vIGhlcmUgYW5kIGluIGJ1aWxkSFRNTCBhbmQgZGUtZHVwZSB0aGUgZW51bWVyYXRpb24gb2YgYWxsIHRoZSBzdHlsZXMpLlxuICAgIC8vICRGbG93Rml4TWU6IFRoZSBuYW1lcyBhYm92ZSBleGFjdGx5IG1hdGNoIHRoZSBzdHlsZXMuXG5cbiAgICB2YXIgc3R5bGUgPSBmdW5jTmFtZS5zbGljZSgxLCBmdW5jTmFtZS5sZW5ndGggLSA1KTtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJzdHlsaW5nXCIsXG4gICAgICBtb2RlOiBwYXJzZXIubW9kZSxcbiAgICAgIC8vIEZpZ3VyZSBvdXQgd2hhdCBzdHlsZSB0byB1c2UgYnkgcHVsbGluZyBvdXQgdGhlIHN0eWxlIGZyb21cbiAgICAgIC8vIHRoZSBmdW5jdGlvbiBuYW1lXG4gICAgICBzdHlsZTogc3R5bGUsXG4gICAgICBib2R5OiBib2R5XG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgLy8gU3R5bGUgY2hhbmdlcyBhcmUgaGFuZGxlZCBpbiB0aGUgVGVYYm9vayBvbiBwZy4gNDQyLCBSdWxlIDMuXG4gICAgdmFyIG5ld1N0eWxlID0gc3R5bGluZ19zdHlsZU1hcFtncm91cC5zdHlsZV07XG4gICAgdmFyIG5ld09wdGlvbnMgPSBvcHRpb25zLmhhdmluZ1N0eWxlKG5ld1N0eWxlKS53aXRoRm9udCgnJyk7XG4gICAgcmV0dXJuIHNpemluZ0dyb3VwKGdyb3VwLmJvZHksIG5ld09wdGlvbnMsIG9wdGlvbnMpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgLy8gRmlndXJlIG91dCB3aGF0IHN0eWxlIHdlJ3JlIGNoYW5naW5nIHRvLlxuICAgIHZhciBuZXdTdHlsZSA9IHN0eWxpbmdfc3R5bGVNYXBbZ3JvdXAuc3R5bGVdO1xuICAgIHZhciBuZXdPcHRpb25zID0gb3B0aW9ucy5oYXZpbmdTdHlsZShuZXdTdHlsZSk7XG4gICAgdmFyIGlubmVyID0gYnVpbGRNYXRoTUxfYnVpbGRFeHByZXNzaW9uKGdyb3VwLmJvZHksIG5ld09wdGlvbnMpO1xuICAgIHZhciBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtc3R5bGVcIiwgaW5uZXIpO1xuICAgIHZhciBzdHlsZUF0dHJpYnV0ZXMgPSB7XG4gICAgICBcImRpc3BsYXlcIjogW1wiMFwiLCBcInRydWVcIl0sXG4gICAgICBcInRleHRcIjogW1wiMFwiLCBcImZhbHNlXCJdLFxuICAgICAgXCJzY3JpcHRcIjogW1wiMVwiLCBcImZhbHNlXCJdLFxuICAgICAgXCJzY3JpcHRzY3JpcHRcIjogW1wiMlwiLCBcImZhbHNlXCJdXG4gICAgfTtcbiAgICB2YXIgYXR0ciA9IHN0eWxlQXR0cmlidXRlc1tncm91cC5zdHlsZV07XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJzY3JpcHRsZXZlbFwiLCBhdHRyWzBdKTtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShcImRpc3BsYXlzdHlsZVwiLCBhdHRyWzFdKTtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL3N1cHN1Yi5qc1xuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG4vKipcbiAqIFNvbWV0aW1lcywgZ3JvdXBzIHBlcmZvcm0gc3BlY2lhbCBydWxlcyB3aGVuIHRoZXkgaGF2ZSBzdXBlcnNjcmlwdHMgb3JcbiAqIHN1YnNjcmlwdHMgYXR0YWNoZWQgdG8gdGhlbS4gVGhpcyBmdW5jdGlvbiBsZXRzIHRoZSBgc3Vwc3ViYCBncm91cCBrbm93IHRoYXRcbiAqIFNvbWV0aW1lcywgZ3JvdXBzIHBlcmZvcm0gc3BlY2lhbCBydWxlcyB3aGVuIHRoZXkgaGF2ZSBzdXBlcnNjcmlwdHMgb3JcbiAqIGl0cyBpbm5lciBlbGVtZW50IHNob3VsZCBoYW5kbGUgdGhlIHN1cGVyc2NyaXB0cyBhbmQgc3Vic2NyaXB0cyBpbnN0ZWFkIG9mXG4gKiBoYW5kbGluZyB0aGVtIGl0c2VsZi5cbiAqL1xudmFyIGh0bWxCdWlsZGVyRGVsZWdhdGUgPSBmdW5jdGlvbiBodG1sQnVpbGRlckRlbGVnYXRlKGdyb3VwLCBvcHRpb25zKSB7XG4gIHZhciBiYXNlID0gZ3JvdXAuYmFzZTtcblxuICBpZiAoIWJhc2UpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIGlmIChiYXNlLnR5cGUgPT09IFwib3BcIikge1xuICAgIC8vIE9wZXJhdG9ycyBoYW5kbGUgc3Vwc3VicyBkaWZmZXJlbnRseSB3aGVuIHRoZXkgaGF2ZSBsaW1pdHNcbiAgICAvLyAoZS5nLiBgXFxkaXNwbGF5c3R5bGVcXHN1bV8yXjNgKVxuICAgIHZhciBkZWxlZ2F0ZSA9IGJhc2UubGltaXRzICYmIChvcHRpb25zLnN0eWxlLnNpemUgPT09IHNyY19TdHlsZS5ESVNQTEFZLnNpemUgfHwgYmFzZS5hbHdheXNIYW5kbGVTdXBTdWIpO1xuICAgIHJldHVybiBkZWxlZ2F0ZSA/IG9wX2h0bWxCdWlsZGVyIDogbnVsbDtcbiAgfSBlbHNlIGlmIChiYXNlLnR5cGUgPT09IFwib3BlcmF0b3JuYW1lXCIpIHtcbiAgICB2YXIgX2RlbGVnYXRlID0gYmFzZS5hbHdheXNIYW5kbGVTdXBTdWIgJiYgKG9wdGlvbnMuc3R5bGUuc2l6ZSA9PT0gc3JjX1N0eWxlLkRJU1BMQVkuc2l6ZSB8fCBiYXNlLmxpbWl0cyk7XG5cbiAgICByZXR1cm4gX2RlbGVnYXRlID8gb3BlcmF0b3JuYW1lX2h0bWxCdWlsZGVyIDogbnVsbDtcbiAgfSBlbHNlIGlmIChiYXNlLnR5cGUgPT09IFwiYWNjZW50XCIpIHtcbiAgICByZXR1cm4gdXRpbHMuaXNDaGFyYWN0ZXJCb3goYmFzZS5iYXNlKSA/IGh0bWxCdWlsZGVyIDogbnVsbDtcbiAgfSBlbHNlIGlmIChiYXNlLnR5cGUgPT09IFwiaG9yaXpCcmFjZVwiKSB7XG4gICAgdmFyIGlzU3VwID0gIWdyb3VwLnN1YjtcbiAgICByZXR1cm4gaXNTdXAgPT09IGJhc2UuaXNPdmVyID8gaG9yaXpCcmFjZV9odG1sQnVpbGRlciA6IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07IC8vIFN1cGVyIHNjcmlwdHMgYW5kIHN1YnNjcmlwdHMsIHdob3NlIHByZWNpc2UgcGxhY2VtZW50IGNhbiBkZXBlbmQgb24gb3RoZXJcbi8vIGZ1bmN0aW9ucyB0aGF0IHByZWNlZGUgdGhlbS5cblxuXG5kZWZpbmVGdW5jdGlvbkJ1aWxkZXJzKHtcbiAgdHlwZTogXCJzdXBzdWJcIixcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgLy8gU3VwZXJzY3JpcHQgYW5kIHN1YnNjcmlwdHMgYXJlIGhhbmRsZWQgaW4gdGhlIFRlWGJvb2sgb24gcGFnZVxuICAgIC8vIDQ0NS00NDYsIHJ1bGVzIDE4KGEtZikuXG4gICAgLy8gSGVyZSBpcyB3aGVyZSB3ZSBkZWZlciB0byB0aGUgaW5uZXIgZ3JvdXAgaWYgaXQgc2hvdWxkIGhhbmRsZVxuICAgIC8vIHN1cGVyc2NyaXB0cyBhbmQgc3Vic2NyaXB0cyBpdHNlbGYuXG4gICAgdmFyIGJ1aWxkZXJEZWxlZ2F0ZSA9IGh0bWxCdWlsZGVyRGVsZWdhdGUoZ3JvdXAsIG9wdGlvbnMpO1xuXG4gICAgaWYgKGJ1aWxkZXJEZWxlZ2F0ZSkge1xuICAgICAgcmV0dXJuIGJ1aWxkZXJEZWxlZ2F0ZShncm91cCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlQmFzZSA9IGdyb3VwLmJhc2UsXG4gICAgICAgIHZhbHVlU3VwID0gZ3JvdXAuc3VwLFxuICAgICAgICB2YWx1ZVN1YiA9IGdyb3VwLnN1YjtcbiAgICB2YXIgYmFzZSA9IGJ1aWxkR3JvdXAodmFsdWVCYXNlLCBvcHRpb25zKTtcbiAgICB2YXIgc3VwbTtcbiAgICB2YXIgc3VibTtcbiAgICB2YXIgbWV0cmljcyA9IG9wdGlvbnMuZm9udE1ldHJpY3MoKTsgLy8gUnVsZSAxOGFcblxuICAgIHZhciBzdXBTaGlmdCA9IDA7XG4gICAgdmFyIHN1YlNoaWZ0ID0gMDtcbiAgICB2YXIgaXNDaGFyYWN0ZXJCb3ggPSB2YWx1ZUJhc2UgJiYgdXRpbHMuaXNDaGFyYWN0ZXJCb3godmFsdWVCYXNlKTtcblxuICAgIGlmICh2YWx1ZVN1cCkge1xuICAgICAgdmFyIG5ld09wdGlvbnMgPSBvcHRpb25zLmhhdmluZ1N0eWxlKG9wdGlvbnMuc3R5bGUuc3VwKCkpO1xuICAgICAgc3VwbSA9IGJ1aWxkR3JvdXAodmFsdWVTdXAsIG5ld09wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICBpZiAoIWlzQ2hhcmFjdGVyQm94KSB7XG4gICAgICAgIHN1cFNoaWZ0ID0gYmFzZS5oZWlnaHQgLSBuZXdPcHRpb25zLmZvbnRNZXRyaWNzKCkuc3VwRHJvcCAqIG5ld09wdGlvbnMuc2l6ZU11bHRpcGxpZXIgLyBvcHRpb25zLnNpemVNdWx0aXBsaWVyO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh2YWx1ZVN1Yikge1xuICAgICAgdmFyIF9uZXdPcHRpb25zID0gb3B0aW9ucy5oYXZpbmdTdHlsZShvcHRpb25zLnN0eWxlLnN1YigpKTtcblxuICAgICAgc3VibSA9IGJ1aWxkR3JvdXAodmFsdWVTdWIsIF9uZXdPcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgaWYgKCFpc0NoYXJhY3RlckJveCkge1xuICAgICAgICBzdWJTaGlmdCA9IGJhc2UuZGVwdGggKyBfbmV3T3B0aW9ucy5mb250TWV0cmljcygpLnN1YkRyb3AgKiBfbmV3T3B0aW9ucy5zaXplTXVsdGlwbGllciAvIG9wdGlvbnMuc2l6ZU11bHRpcGxpZXI7XG4gICAgICB9XG4gICAgfSAvLyBSdWxlIDE4Y1xuXG5cbiAgICB2YXIgbWluU3VwU2hpZnQ7XG5cbiAgICBpZiAob3B0aW9ucy5zdHlsZSA9PT0gc3JjX1N0eWxlLkRJU1BMQVkpIHtcbiAgICAgIG1pblN1cFNoaWZ0ID0gbWV0cmljcy5zdXAxO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5zdHlsZS5jcmFtcGVkKSB7XG4gICAgICBtaW5TdXBTaGlmdCA9IG1ldHJpY3Muc3VwMztcbiAgICB9IGVsc2Uge1xuICAgICAgbWluU3VwU2hpZnQgPSBtZXRyaWNzLnN1cDI7XG4gICAgfSAvLyBzY3JpcHRzcGFjZSBpcyBhIGZvbnQtc2l6ZS1pbmRlcGVuZGVudCBzaXplLCBzbyBzY2FsZSBpdFxuICAgIC8vIGFwcHJvcHJpYXRlbHkgZm9yIHVzZSBhcyB0aGUgbWFyZ2luUmlnaHQuXG5cblxuICAgIHZhciBtdWx0aXBsaWVyID0gb3B0aW9ucy5zaXplTXVsdGlwbGllcjtcbiAgICB2YXIgbWFyZ2luUmlnaHQgPSAwLjUgLyBtZXRyaWNzLnB0UGVyRW0gLyBtdWx0aXBsaWVyICsgXCJlbVwiO1xuICAgIHZhciBtYXJnaW5MZWZ0ID0gbnVsbDtcblxuICAgIGlmIChzdWJtKSB7XG4gICAgICAvLyBTdWJzY3JpcHRzIHNob3VsZG4ndCBiZSBzaGlmdGVkIGJ5IHRoZSBiYXNlJ3MgaXRhbGljIGNvcnJlY3Rpb24uXG4gICAgICAvLyBBY2NvdW50IGZvciB0aGF0IGJ5IHNoaWZ0aW5nIHRoZSBzdWJzY3JpcHQgYmFjayB0aGUgYXBwcm9wcmlhdGVcbiAgICAgIC8vIGFtb3VudC4gTm90ZSB3ZSBvbmx5IGRvIHRoaXMgd2hlbiB0aGUgYmFzZSBpcyBhIHNpbmdsZSBzeW1ib2wuXG4gICAgICB2YXIgaXNPaWludCA9IGdyb3VwLmJhc2UgJiYgZ3JvdXAuYmFzZS50eXBlID09PSBcIm9wXCIgJiYgZ3JvdXAuYmFzZS5uYW1lICYmIChncm91cC5iYXNlLm5hbWUgPT09IFwiXFxcXG9paW50XCIgfHwgZ3JvdXAuYmFzZS5uYW1lID09PSBcIlxcXFxvaWlpbnRcIik7XG5cbiAgICAgIGlmIChiYXNlIGluc3RhbmNlb2YgU3ltYm9sTm9kZSB8fCBpc09paW50KSB7XG4gICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgbWFyZ2luTGVmdCA9IC1iYXNlLml0YWxpYyArIFwiZW1cIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgc3Vwc3ViO1xuXG4gICAgaWYgKHN1cG0gJiYgc3VibSkge1xuICAgICAgc3VwU2hpZnQgPSBNYXRoLm1heChzdXBTaGlmdCwgbWluU3VwU2hpZnQsIHN1cG0uZGVwdGggKyAwLjI1ICogbWV0cmljcy54SGVpZ2h0KTtcbiAgICAgIHN1YlNoaWZ0ID0gTWF0aC5tYXgoc3ViU2hpZnQsIG1ldHJpY3Muc3ViMik7XG4gICAgICB2YXIgcnVsZVdpZHRoID0gbWV0cmljcy5kZWZhdWx0UnVsZVRoaWNrbmVzczsgLy8gUnVsZSAxOGVcblxuICAgICAgdmFyIG1heFdpZHRoID0gNCAqIHJ1bGVXaWR0aDtcblxuICAgICAgaWYgKHN1cFNoaWZ0IC0gc3VwbS5kZXB0aCAtIChzdWJtLmhlaWdodCAtIHN1YlNoaWZ0KSA8IG1heFdpZHRoKSB7XG4gICAgICAgIHN1YlNoaWZ0ID0gbWF4V2lkdGggLSAoc3VwU2hpZnQgLSBzdXBtLmRlcHRoKSArIHN1Ym0uaGVpZ2h0O1xuICAgICAgICB2YXIgcHNpID0gMC44ICogbWV0cmljcy54SGVpZ2h0IC0gKHN1cFNoaWZ0IC0gc3VwbS5kZXB0aCk7XG5cbiAgICAgICAgaWYgKHBzaSA+IDApIHtcbiAgICAgICAgICBzdXBTaGlmdCArPSBwc2k7XG4gICAgICAgICAgc3ViU2hpZnQgLT0gcHNpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB2bGlzdEVsZW0gPSBbe1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogc3VibSxcbiAgICAgICAgc2hpZnQ6IHN1YlNoaWZ0LFxuICAgICAgICBtYXJnaW5SaWdodDogbWFyZ2luUmlnaHQsXG4gICAgICAgIG1hcmdpbkxlZnQ6IG1hcmdpbkxlZnRcbiAgICAgIH0sIHtcbiAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgIGVsZW06IHN1cG0sXG4gICAgICAgIHNoaWZ0OiAtc3VwU2hpZnQsXG4gICAgICAgIG1hcmdpblJpZ2h0OiBtYXJnaW5SaWdodFxuICAgICAgfV07XG4gICAgICBzdXBzdWIgPSBidWlsZENvbW1vbi5tYWtlVkxpc3Qoe1xuICAgICAgICBwb3NpdGlvblR5cGU6IFwiaW5kaXZpZHVhbFNoaWZ0XCIsXG4gICAgICAgIGNoaWxkcmVuOiB2bGlzdEVsZW1cbiAgICAgIH0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAoc3VibSkge1xuICAgICAgLy8gUnVsZSAxOGJcbiAgICAgIHN1YlNoaWZ0ID0gTWF0aC5tYXgoc3ViU2hpZnQsIG1ldHJpY3Muc3ViMSwgc3VibS5oZWlnaHQgLSAwLjggKiBtZXRyaWNzLnhIZWlnaHQpO1xuICAgICAgdmFyIF92bGlzdEVsZW0gPSBbe1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogc3VibSxcbiAgICAgICAgbWFyZ2luTGVmdDogbWFyZ2luTGVmdCxcbiAgICAgICAgbWFyZ2luUmlnaHQ6IG1hcmdpblJpZ2h0XG4gICAgICB9XTtcbiAgICAgIHN1cHN1YiA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICAgIHBvc2l0aW9uVHlwZTogXCJzaGlmdFwiLFxuICAgICAgICBwb3NpdGlvbkRhdGE6IHN1YlNoaWZ0LFxuICAgICAgICBjaGlsZHJlbjogX3ZsaXN0RWxlbVxuICAgICAgfSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmIChzdXBtKSB7XG4gICAgICAvLyBSdWxlIDE4YywgZFxuICAgICAgc3VwU2hpZnQgPSBNYXRoLm1heChzdXBTaGlmdCwgbWluU3VwU2hpZnQsIHN1cG0uZGVwdGggKyAwLjI1ICogbWV0cmljcy54SGVpZ2h0KTtcbiAgICAgIHN1cHN1YiA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICAgIHBvc2l0aW9uVHlwZTogXCJzaGlmdFwiLFxuICAgICAgICBwb3NpdGlvbkRhdGE6IC1zdXBTaGlmdCxcbiAgICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgICAgdHlwZTogXCJlbGVtXCIsXG4gICAgICAgICAgZWxlbTogc3VwbSxcbiAgICAgICAgICBtYXJnaW5SaWdodDogbWFyZ2luUmlnaHRcbiAgICAgICAgfV1cbiAgICAgIH0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzdXBzdWIgbXVzdCBoYXZlIGVpdGhlciBzdXAgb3Igc3ViLlwiKTtcbiAgICB9IC8vIFdyYXAgdGhlIHN1cHN1YiB2bGlzdCBpbiBhIHNwYW4ubXN1cHN1YiB0byByZXNldCB0ZXh0LWFsaWduLlxuXG5cbiAgICB2YXIgbWNsYXNzID0gZ2V0VHlwZU9mRG9tVHJlZShiYXNlLCBcInJpZ2h0XCIpIHx8IFwibW9yZFwiO1xuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbbWNsYXNzXSwgW2Jhc2UsIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1zdXBzdWJcIl0sIFtzdXBzdWJdKV0sIG9wdGlvbnMpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgLy8gSXMgdGhlIGlubmVyIGdyb3VwIGEgcmVsZXZhbnQgaG9yaXpvbmFsIGJyYWNlP1xuICAgIHZhciBpc0JyYWNlID0gZmFsc2U7XG4gICAgdmFyIGlzT3ZlcjtcbiAgICB2YXIgaXNTdXA7XG5cbiAgICBpZiAoZ3JvdXAuYmFzZSAmJiBncm91cC5iYXNlLnR5cGUgPT09IFwiaG9yaXpCcmFjZVwiKSB7XG4gICAgICBpc1N1cCA9ICEhZ3JvdXAuc3VwO1xuXG4gICAgICBpZiAoaXNTdXAgPT09IGdyb3VwLmJhc2UuaXNPdmVyKSB7XG4gICAgICAgIGlzQnJhY2UgPSB0cnVlO1xuICAgICAgICBpc092ZXIgPSBncm91cC5iYXNlLmlzT3ZlcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZ3JvdXAuYmFzZSAmJiAoZ3JvdXAuYmFzZS50eXBlID09PSBcIm9wXCIgfHwgZ3JvdXAuYmFzZS50eXBlID09PSBcIm9wZXJhdG9ybmFtZVwiKSkge1xuICAgICAgZ3JvdXAuYmFzZS5wYXJlbnRJc1N1cFN1YiA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuID0gW2J1aWxkTWF0aE1MX2J1aWxkR3JvdXAoZ3JvdXAuYmFzZSwgb3B0aW9ucyldO1xuXG4gICAgaWYgKGdyb3VwLnN1Yikge1xuICAgICAgY2hpbGRyZW4ucHVzaChidWlsZE1hdGhNTF9idWlsZEdyb3VwKGdyb3VwLnN1Yiwgb3B0aW9ucykpO1xuICAgIH1cblxuICAgIGlmIChncm91cC5zdXApIHtcbiAgICAgIGNoaWxkcmVuLnB1c2goYnVpbGRNYXRoTUxfYnVpbGRHcm91cChncm91cC5zdXAsIG9wdGlvbnMpKTtcbiAgICB9XG5cbiAgICB2YXIgbm9kZVR5cGU7XG5cbiAgICBpZiAoaXNCcmFjZSkge1xuICAgICAgbm9kZVR5cGUgPSBpc092ZXIgPyBcIm1vdmVyXCIgOiBcIm11bmRlclwiO1xuICAgIH0gZWxzZSBpZiAoIWdyb3VwLnN1Yikge1xuICAgICAgdmFyIGJhc2UgPSBncm91cC5iYXNlO1xuXG4gICAgICBpZiAoYmFzZSAmJiBiYXNlLnR5cGUgPT09IFwib3BcIiAmJiBiYXNlLmxpbWl0cyAmJiAob3B0aW9ucy5zdHlsZSA9PT0gc3JjX1N0eWxlLkRJU1BMQVkgfHwgYmFzZS5hbHdheXNIYW5kbGVTdXBTdWIpKSB7XG4gICAgICAgIG5vZGVUeXBlID0gXCJtb3ZlclwiO1xuICAgICAgfSBlbHNlIGlmIChiYXNlICYmIGJhc2UudHlwZSA9PT0gXCJvcGVyYXRvcm5hbWVcIiAmJiBiYXNlLmFsd2F5c0hhbmRsZVN1cFN1YiAmJiAoYmFzZS5saW1pdHMgfHwgb3B0aW9ucy5zdHlsZSA9PT0gc3JjX1N0eWxlLkRJU1BMQVkpKSB7XG4gICAgICAgIG5vZGVUeXBlID0gXCJtb3ZlclwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZVR5cGUgPSBcIm1zdXBcIjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFncm91cC5zdXApIHtcbiAgICAgIHZhciBfYmFzZSA9IGdyb3VwLmJhc2U7XG5cbiAgICAgIGlmIChfYmFzZSAmJiBfYmFzZS50eXBlID09PSBcIm9wXCIgJiYgX2Jhc2UubGltaXRzICYmIChvcHRpb25zLnN0eWxlID09PSBzcmNfU3R5bGUuRElTUExBWSB8fCBfYmFzZS5hbHdheXNIYW5kbGVTdXBTdWIpKSB7XG4gICAgICAgIG5vZGVUeXBlID0gXCJtdW5kZXJcIjtcbiAgICAgIH0gZWxzZSBpZiAoX2Jhc2UgJiYgX2Jhc2UudHlwZSA9PT0gXCJvcGVyYXRvcm5hbWVcIiAmJiBfYmFzZS5hbHdheXNIYW5kbGVTdXBTdWIgJiYgKF9iYXNlLmxpbWl0cyB8fCBvcHRpb25zLnN0eWxlID09PSBzcmNfU3R5bGUuRElTUExBWSkpIHtcbiAgICAgICAgbm9kZVR5cGUgPSBcIm11bmRlclwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZVR5cGUgPSBcIm1zdWJcIjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9iYXNlMiA9IGdyb3VwLmJhc2U7XG5cbiAgICAgIGlmIChfYmFzZTIgJiYgX2Jhc2UyLnR5cGUgPT09IFwib3BcIiAmJiBfYmFzZTIubGltaXRzICYmIG9wdGlvbnMuc3R5bGUgPT09IHNyY19TdHlsZS5ESVNQTEFZKSB7XG4gICAgICAgIG5vZGVUeXBlID0gXCJtdW5kZXJvdmVyXCI7XG4gICAgICB9IGVsc2UgaWYgKF9iYXNlMiAmJiBfYmFzZTIudHlwZSA9PT0gXCJvcGVyYXRvcm5hbWVcIiAmJiBfYmFzZTIuYWx3YXlzSGFuZGxlU3VwU3ViICYmIChvcHRpb25zLnN0eWxlID09PSBzcmNfU3R5bGUuRElTUExBWSB8fCBfYmFzZTIubGltaXRzKSkge1xuICAgICAgICBub2RlVHlwZSA9IFwibXVuZGVyb3ZlclwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZVR5cGUgPSBcIm1zdWJzdXBcIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUobm9kZVR5cGUsIGNoaWxkcmVuKTtcbiAgfVxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL3N5bWJvbHNPcC5qc1xuXG5cblxuIC8vIE9wZXJhdG9yIFBhcnNlTm9kZXMgY3JlYXRlZCBpbiBQYXJzZXIuanMgZnJvbSBzeW1ib2wgR3JvdXBzIGluIHNyYy9zeW1ib2xzLmpzLlxuXG5kZWZpbmVGdW5jdGlvbkJ1aWxkZXJzKHtcbiAgdHlwZTogXCJhdG9tXCIsXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHJldHVybiBidWlsZENvbW1vbi5tYXRoc3ltKGdyb3VwLnRleHQsIGdyb3VwLm1vZGUsIG9wdGlvbnMsIFtcIm1cIiArIGdyb3VwLmZhbWlseV0pO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIG5vZGUgPSBuZXcgbWF0aE1MVHJlZS5NYXRoTm9kZShcIm1vXCIsIFttYWtlVGV4dChncm91cC50ZXh0LCBncm91cC5tb2RlKV0pO1xuXG4gICAgaWYgKGdyb3VwLmZhbWlseSA9PT0gXCJiaW5cIikge1xuICAgICAgdmFyIHZhcmlhbnQgPSBnZXRWYXJpYW50KGdyb3VwLCBvcHRpb25zKTtcblxuICAgICAgaWYgKHZhcmlhbnQgPT09IFwiYm9sZC1pdGFsaWNcIikge1xuICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcIm1hdGh2YXJpYW50XCIsIHZhcmlhbnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZ3JvdXAuZmFtaWx5ID09PSBcInB1bmN0XCIpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwic2VwYXJhdG9yXCIsIFwidHJ1ZVwiKTtcbiAgICB9IGVsc2UgaWYgKGdyb3VwLmZhbWlseSA9PT0gXCJvcGVuXCIgfHwgZ3JvdXAuZmFtaWx5ID09PSBcImNsb3NlXCIpIHtcbiAgICAgIC8vIERlbGltcyBidWlsdCBoZXJlIHNob3VsZCBub3Qgc3RyZXRjaCB2ZXJ0aWNhbGx5LlxuICAgICAgLy8gU2VlIGRlbGltc2l6aW5nLmpzIGZvciBzdHJldGNoeSBkZWxpbXMuXG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcInN0cmV0Y2h5XCIsIFwiZmFsc2VcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn0pO1xuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL2Z1bmN0aW9ucy9zeW1ib2xzT3JkLmpzXG5cblxuXG5cbi8vIFwibWF0aG9yZFwiIGFuZCBcInRleHRvcmRcIiBQYXJzZU5vZGVzIGNyZWF0ZWQgaW4gUGFyc2VyLmpzIGZyb20gc3ltYm9sIEdyb3VwcyBpblxuLy8gc3JjL3N5bWJvbHMuanMuXG52YXIgZGVmYXVsdFZhcmlhbnQgPSB7XG4gIFwibWlcIjogXCJpdGFsaWNcIixcbiAgXCJtblwiOiBcIm5vcm1hbFwiLFxuICBcIm10ZXh0XCI6IFwibm9ybWFsXCJcbn07XG5kZWZpbmVGdW5jdGlvbkJ1aWxkZXJzKHtcbiAgdHlwZTogXCJtYXRob3JkXCIsXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlT3JkKGdyb3VwLCBvcHRpb25zLCBcIm1hdGhvcmRcIik7XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibWlcIiwgW21ha2VUZXh0KGdyb3VwLnRleHQsIGdyb3VwLm1vZGUsIG9wdGlvbnMpXSk7XG4gICAgdmFyIHZhcmlhbnQgPSBnZXRWYXJpYW50KGdyb3VwLCBvcHRpb25zKSB8fCBcIml0YWxpY1wiO1xuXG4gICAgaWYgKHZhcmlhbnQgIT09IGRlZmF1bHRWYXJpYW50W25vZGUudHlwZV0pIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwibWF0aHZhcmlhbnRcIiwgdmFyaWFudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn0pO1xuZGVmaW5lRnVuY3Rpb25CdWlsZGVycyh7XG4gIHR5cGU6IFwidGV4dG9yZFwiLFxuICBodG1sQnVpbGRlcjogZnVuY3Rpb24gaHRtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gYnVpbGRDb21tb24ubWFrZU9yZChncm91cCwgb3B0aW9ucywgXCJ0ZXh0b3JkXCIpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIHRleHQgPSBtYWtlVGV4dChncm91cC50ZXh0LCBncm91cC5tb2RlLCBvcHRpb25zKTtcbiAgICB2YXIgdmFyaWFudCA9IGdldFZhcmlhbnQoZ3JvdXAsIG9wdGlvbnMpIHx8IFwibm9ybWFsXCI7XG4gICAgdmFyIG5vZGU7XG5cbiAgICBpZiAoZ3JvdXAubW9kZSA9PT0gJ3RleHQnKSB7XG4gICAgICBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtdGV4dFwiLCBbdGV4dF0pO1xuICAgIH0gZWxzZSBpZiAoL1swLTldLy50ZXN0KGdyb3VwLnRleHQpKSB7XG4gICAgICBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtblwiLCBbdGV4dF0pO1xuICAgIH0gZWxzZSBpZiAoZ3JvdXAudGV4dCA9PT0gXCJcXFxccHJpbWVcIikge1xuICAgICAgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibW9cIiwgW3RleHRdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibWlcIiwgW3RleHRdKTtcbiAgICB9XG5cbiAgICBpZiAodmFyaWFudCAhPT0gZGVmYXVsdFZhcmlhbnRbbm9kZS50eXBlXSkge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJtYXRodmFyaWFudFwiLCB2YXJpYW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL3N5bWJvbHNTcGFjaW5nLmpzXG5cblxuXG4gLy8gQSBtYXAgb2YgQ1NTLWJhc2VkIHNwYWNpbmcgZnVuY3Rpb25zIHRvIHRoZWlyIENTUyBjbGFzcy5cblxudmFyIGNzc1NwYWNlID0ge1xuICBcIlxcXFxub2JyZWFrXCI6IFwibm9icmVha1wiLFxuICBcIlxcXFxhbGxvd2JyZWFrXCI6IFwiYWxsb3dicmVha1wiXG59OyAvLyBBIGxvb2t1cCB0YWJsZSB0byBkZXRlcm1pbmUgd2hldGhlciBhIHNwYWNpbmcgZnVuY3Rpb24vc3ltYm9sIHNob3VsZCBiZVxuLy8gdHJlYXRlZCBsaWtlIGEgcmVndWxhciBzcGFjZSBjaGFyYWN0ZXIuICBJZiBhIHN5bWJvbCBvciBjb21tYW5kIGlzIGEga2V5XG4vLyBpbiB0aGlzIHRhYmxlLCB0aGVuIGl0IHNob3VsZCBiZSBhIHJlZ3VsYXIgc3BhY2UgY2hhcmFjdGVyLiAgRnVydGhlcm1vcmUsXG4vLyB0aGUgYXNzb2NpYXRlZCB2YWx1ZSBtYXkgaGF2ZSBhIGBjbGFzc05hbWVgIHNwZWNpZnlpbmcgYW4gZXh0cmEgQ1NTIGNsYXNzXG4vLyB0byBhZGQgdG8gdGhlIGNyZWF0ZWQgYHNwYW5gLlxuXG52YXIgcmVndWxhclNwYWNlID0ge1xuICBcIiBcIjoge30sXG4gIFwiXFxcXCBcIjoge30sXG4gIFwiflwiOiB7XG4gICAgY2xhc3NOYW1lOiBcIm5vYnJlYWtcIlxuICB9LFxuICBcIlxcXFxzcGFjZVwiOiB7fSxcbiAgXCJcXFxcbm9icmVha3NwYWNlXCI6IHtcbiAgICBjbGFzc05hbWU6IFwibm9icmVha1wiXG4gIH1cbn07IC8vIFBhcnNlTm9kZTxcInNwYWNpbmdcIj4gY3JlYXRlZCBpbiBQYXJzZXIuanMgZnJvbSB0aGUgXCJzcGFjaW5nXCIgc3ltYm9sIEdyb3VwcyBpblxuLy8gc3JjL3N5bWJvbHMuanMuXG5cbmRlZmluZUZ1bmN0aW9uQnVpbGRlcnMoe1xuICB0eXBlOiBcInNwYWNpbmdcIixcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgaWYgKHJlZ3VsYXJTcGFjZS5oYXNPd25Qcm9wZXJ0eShncm91cC50ZXh0KSkge1xuICAgICAgdmFyIGNsYXNzTmFtZSA9IHJlZ3VsYXJTcGFjZVtncm91cC50ZXh0XS5jbGFzc05hbWUgfHwgXCJcIjsgLy8gU3BhY2VzIGFyZSBnZW5lcmF0ZWQgYnkgYWRkaW5nIGFuIGFjdHVhbCBzcGFjZS4gRWFjaCBvZiB0aGVzZVxuICAgICAgLy8gdGhpbmdzIGhhcyBhbiBlbnRyeSBpbiB0aGUgc3ltYm9scyB0YWJsZSwgc28gdGhlc2Ugd2lsbCBiZSB0dXJuZWRcbiAgICAgIC8vIGludG8gYXBwcm9wcmlhdGUgb3V0cHV0cy5cblxuICAgICAgaWYgKGdyb3VwLm1vZGUgPT09IFwidGV4dFwiKSB7XG4gICAgICAgIHZhciBvcmQgPSBidWlsZENvbW1vbi5tYWtlT3JkKGdyb3VwLCBvcHRpb25zLCBcInRleHRvcmRcIik7XG4gICAgICAgIG9yZC5jbGFzc2VzLnB1c2goY2xhc3NOYW1lKTtcbiAgICAgICAgcmV0dXJuIG9yZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtc3BhY2VcIiwgY2xhc3NOYW1lXSwgW2J1aWxkQ29tbW9uLm1hdGhzeW0oZ3JvdXAudGV4dCwgZ3JvdXAubW9kZSwgb3B0aW9ucyldLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNzc1NwYWNlLmhhc093blByb3BlcnR5KGdyb3VwLnRleHQpKSB7XG4gICAgICAvLyBTcGFjZXMgYmFzZWQgb24ganVzdCBhIENTUyBjbGFzcy5cbiAgICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtc3BhY2VcIiwgY3NzU3BhY2VbZ3JvdXAudGV4dF1dLCBbXSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlVua25vd24gdHlwZSBvZiBzcGFjZSBcXFwiXCIgKyBncm91cC50ZXh0ICsgXCJcXFwiXCIpO1xuICAgIH1cbiAgfSxcbiAgbWF0aG1sQnVpbGRlcjogZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBub2RlO1xuXG4gICAgaWYgKHJlZ3VsYXJTcGFjZS5oYXNPd25Qcm9wZXJ0eShncm91cC50ZXh0KSkge1xuICAgICAgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXRleHRcIiwgW25ldyBtYXRoTUxUcmVlLlRleHROb2RlKFwiXFx4QTBcIildKTtcbiAgICB9IGVsc2UgaWYgKGNzc1NwYWNlLmhhc093blByb3BlcnR5KGdyb3VwLnRleHQpKSB7XG4gICAgICAvLyBDU1MtYmFzZWQgTWF0aE1MIHNwYWNlcyAoXFxub2JyZWFrLCBcXGFsbG93YnJlYWspIGFyZSBpZ25vcmVkXG4gICAgICByZXR1cm4gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtc3BhY2VcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlVua25vd24gdHlwZSBvZiBzcGFjZSBcXFwiXCIgKyBncm91cC50ZXh0ICsgXCJcXFwiXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9XG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvdGFnLmpzXG5cblxuXG5cbnZhciBwYWQgPSBmdW5jdGlvbiBwYWQoKSB7XG4gIHZhciBwYWROb2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtdGRcIiwgW10pO1xuICBwYWROb2RlLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIFwiNTAlXCIpO1xuICByZXR1cm4gcGFkTm9kZTtcbn07XG5cbmRlZmluZUZ1bmN0aW9uQnVpbGRlcnMoe1xuICB0eXBlOiBcInRhZ1wiLFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIHRhYmxlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtdGFibGVcIiwgW25ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXRyXCIsIFtwYWQoKSwgbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtdGRcIiwgW2J1aWxkRXhwcmVzc2lvblJvdyhncm91cC5ib2R5LCBvcHRpb25zKV0pLCBwYWQoKSwgbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtdGRcIiwgW2J1aWxkRXhwcmVzc2lvblJvdyhncm91cC50YWcsIG9wdGlvbnMpXSldKV0pO1xuICAgIHRhYmxlLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIFwiMTAwJVwiKTtcbiAgICByZXR1cm4gdGFibGU7IC8vIFRPRE86IExlZnQtYWxpZ25lZCB0YWdzLlxuICAgIC8vIEN1cnJlbnRseSwgdGhlIGdyb3VwIGFuZCBvcHRpb25zIHBhc3NlZCBoZXJlIGRvIG5vdCBjb250YWluXG4gICAgLy8gZW5vdWdoIGluZm8gdG8gc2V0IHRhZyBhbGlnbm1lbnQuIGBsZXFub2AgaXMgaW4gU2V0dGluZ3MgYnV0IGl0IGlzXG4gICAgLy8gbm90IHBhc3NlZCB0byBPcHRpb25zLiBPbiB0aGUgSFRNTCBzaWRlLCBsZXFubyBpc1xuICAgIC8vIHNldCBieSBhIENTUyBjbGFzcyBhcHBsaWVkIGluIGJ1aWxkVHJlZS5qcy4gVGhhdCB3b3VsZCBoYXZlIHdvcmtlZFxuICAgIC8vIGluIE1hdGhNTCBpZiBicm93c2VycyBzdXBwb3J0ZWQgPG1sYWJlbGVkdHI+LiBTaW5jZSB0aGV5IGRvbid0LCB3ZVxuICAgIC8vIG5lZWQgdG8gcmV3cml0ZSB0aGUgd2F5IHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkLlxuICB9XG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvdGV4dC5qc1xuXG5cblxuIC8vIE5vbi1tYXRoeSB0ZXh0LCBwb3NzaWJseSBpbiBhIGZvbnRcblxudmFyIHRleHRGb250RmFtaWxpZXMgPSB7XG4gIFwiXFxcXHRleHRcIjogdW5kZWZpbmVkLFxuICBcIlxcXFx0ZXh0cm1cIjogXCJ0ZXh0cm1cIixcbiAgXCJcXFxcdGV4dHNmXCI6IFwidGV4dHNmXCIsXG4gIFwiXFxcXHRleHR0dFwiOiBcInRleHR0dFwiLFxuICBcIlxcXFx0ZXh0bm9ybWFsXCI6IFwidGV4dHJtXCJcbn07XG52YXIgdGV4dEZvbnRXZWlnaHRzID0ge1xuICBcIlxcXFx0ZXh0YmZcIjogXCJ0ZXh0YmZcIixcbiAgXCJcXFxcdGV4dG1kXCI6IFwidGV4dG1kXCJcbn07XG52YXIgdGV4dEZvbnRTaGFwZXMgPSB7XG4gIFwiXFxcXHRleHRpdFwiOiBcInRleHRpdFwiLFxuICBcIlxcXFx0ZXh0dXBcIjogXCJ0ZXh0dXBcIlxufTtcblxudmFyIG9wdGlvbnNXaXRoRm9udCA9IGZ1bmN0aW9uIG9wdGlvbnNXaXRoRm9udChncm91cCwgb3B0aW9ucykge1xuICB2YXIgZm9udCA9IGdyb3VwLmZvbnQ7IC8vIENoZWNrcyBpZiB0aGUgYXJndW1lbnQgaXMgYSBmb250IGZhbWlseSBvciBhIGZvbnQgc3R5bGUuXG5cbiAgaWYgKCFmb250KSB7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH0gZWxzZSBpZiAodGV4dEZvbnRGYW1pbGllc1tmb250XSkge1xuICAgIHJldHVybiBvcHRpb25zLndpdGhUZXh0Rm9udEZhbWlseSh0ZXh0Rm9udEZhbWlsaWVzW2ZvbnRdKTtcbiAgfSBlbHNlIGlmICh0ZXh0Rm9udFdlaWdodHNbZm9udF0pIHtcbiAgICByZXR1cm4gb3B0aW9ucy53aXRoVGV4dEZvbnRXZWlnaHQodGV4dEZvbnRXZWlnaHRzW2ZvbnRdKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb3B0aW9ucy53aXRoVGV4dEZvbnRTaGFwZSh0ZXh0Rm9udFNoYXBlc1tmb250XSk7XG4gIH1cbn07XG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJ0ZXh0XCIsXG4gIG5hbWVzOiBbLy8gRm9udCBmYW1pbGllc1xuICBcIlxcXFx0ZXh0XCIsIFwiXFxcXHRleHRybVwiLCBcIlxcXFx0ZXh0c2ZcIiwgXCJcXFxcdGV4dHR0XCIsIFwiXFxcXHRleHRub3JtYWxcIiwgLy8gRm9udCB3ZWlnaHRzXG4gIFwiXFxcXHRleHRiZlwiLCBcIlxcXFx0ZXh0bWRcIiwgLy8gRm9udCBTaGFwZXNcbiAgXCJcXFxcdGV4dGl0XCIsIFwiXFxcXHRleHR1cFwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxLFxuICAgIGFyZ1R5cGVzOiBbXCJ0ZXh0XCJdLFxuICAgIGFsbG93ZWRJbkFyZ3VtZW50OiB0cnVlLFxuICAgIGFsbG93ZWRJblRleHQ6IHRydWVcbiAgfSxcbiAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcihfcmVmLCBhcmdzKSB7XG4gICAgdmFyIHBhcnNlciA9IF9yZWYucGFyc2VyLFxuICAgICAgICBmdW5jTmFtZSA9IF9yZWYuZnVuY05hbWU7XG4gICAgdmFyIGJvZHkgPSBhcmdzWzBdO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgYm9keTogb3JkYXJndW1lbnQoYm9keSksXG4gICAgICBmb250OiBmdW5jTmFtZVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBuZXdPcHRpb25zID0gb3B0aW9uc1dpdGhGb250KGdyb3VwLCBvcHRpb25zKTtcbiAgICB2YXIgaW5uZXIgPSBidWlsZEV4cHJlc3Npb24oZ3JvdXAuYm9keSwgbmV3T3B0aW9ucywgdHJ1ZSk7XG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcmRcIiwgXCJ0ZXh0XCJdLCBpbm5lciwgbmV3T3B0aW9ucyk7XG4gIH0sXG4gIG1hdGhtbEJ1aWxkZXI6IGZ1bmN0aW9uIG1hdGhtbEJ1aWxkZXIoZ3JvdXAsIG9wdGlvbnMpIHtcbiAgICB2YXIgbmV3T3B0aW9ucyA9IG9wdGlvbnNXaXRoRm9udChncm91cCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIGJ1aWxkRXhwcmVzc2lvblJvdyhncm91cC5ib2R5LCBuZXdPcHRpb25zKTtcbiAgfVxufSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zL3VuZGVybGluZS5qc1xuXG5cblxuXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJ1bmRlcmxpbmVcIixcbiAgbmFtZXM6IFtcIlxcXFx1bmRlcmxpbmVcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMSxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3JlZiwgYXJncykge1xuICAgIHZhciBwYXJzZXIgPSBfcmVmLnBhcnNlcjtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJ1bmRlcmxpbmVcIixcbiAgICAgIG1vZGU6IHBhcnNlci5tb2RlLFxuICAgICAgYm9keTogYXJnc1swXVxuICAgIH07XG4gIH0sXG4gIGh0bWxCdWlsZGVyOiBmdW5jdGlvbiBodG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIC8vIFVuZGVybGluZXMgYXJlIGhhbmRsZWQgaW4gdGhlIFRlWGJvb2sgcGcgNDQzLCBSdWxlIDEwLlxuICAgIC8vIEJ1aWxkIHRoZSBpbm5lciBncm91cC5cbiAgICB2YXIgaW5uZXJHcm91cCA9IGJ1aWxkR3JvdXAoZ3JvdXAuYm9keSwgb3B0aW9ucyk7IC8vIENyZWF0ZSB0aGUgbGluZSB0byBnbyBiZWxvdyB0aGUgYm9keVxuXG4gICAgdmFyIGxpbmUgPSBidWlsZENvbW1vbi5tYWtlTGluZVNwYW4oXCJ1bmRlcmxpbmUtbGluZVwiLCBvcHRpb25zKTsgLy8gR2VuZXJhdGUgdGhlIHZsaXN0LCB3aXRoIHRoZSBhcHByb3ByaWF0ZSBrZXJuc1xuXG4gICAgdmFyIGRlZmF1bHRSdWxlVGhpY2tuZXNzID0gb3B0aW9ucy5mb250TWV0cmljcygpLmRlZmF1bHRSdWxlVGhpY2tuZXNzO1xuICAgIHZhciB2bGlzdCA9IGJ1aWxkQ29tbW9uLm1ha2VWTGlzdCh7XG4gICAgICBwb3NpdGlvblR5cGU6IFwidG9wXCIsXG4gICAgICBwb3NpdGlvbkRhdGE6IGlubmVyR3JvdXAuaGVpZ2h0LFxuICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgIHR5cGU6IFwia2VyblwiLFxuICAgICAgICBzaXplOiBkZWZhdWx0UnVsZVRoaWNrbmVzc1xuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImVsZW1cIixcbiAgICAgICAgZWxlbTogbGluZVxuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBcImtlcm5cIixcbiAgICAgICAgc2l6ZTogMyAqIGRlZmF1bHRSdWxlVGhpY2tuZXNzXG4gICAgICB9LCB7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBpbm5lckdyb3VwXG4gICAgICB9XVxuICAgIH0sIG9wdGlvbnMpO1xuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJtb3JkXCIsIFwidW5kZXJsaW5lXCJdLCBbdmxpc3RdLCBvcHRpb25zKTtcbiAgfSxcbiAgbWF0aG1sQnVpbGRlcjogZnVuY3Rpb24gbWF0aG1sQnVpbGRlcihncm91cCwgb3B0aW9ucykge1xuICAgIHZhciBvcGVyYXRvciA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibW9cIiwgW25ldyBtYXRoTUxUcmVlLlRleHROb2RlKFwiXFx1MjAzRVwiKV0pO1xuICAgIG9wZXJhdG9yLnNldEF0dHJpYnV0ZShcInN0cmV0Y2h5XCIsIFwidHJ1ZVwiKTtcbiAgICB2YXIgbm9kZSA9IG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXVuZGVyXCIsIFtidWlsZE1hdGhNTF9idWlsZEdyb3VwKGdyb3VwLmJvZHksIG9wdGlvbnMpLCBvcGVyYXRvcl0pO1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiYWNjZW50dW5kZXJcIiwgXCJ0cnVlXCIpO1xuICAgIHJldHVybiBub2RlO1xuICB9XG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvdmNlbnRlci5qc1xuXG5cblxuXG4gLy8gXFx2Y2VudGVyOiAgVmVydGljYWxseSBjZW50ZXIgdGhlIGFyZ3VtZW50IGdyb3VwIG9uIHRoZSBtYXRoIGF4aXMuXG5cbmRlZmluZUZ1bmN0aW9uKHtcbiAgdHlwZTogXCJ2Y2VudGVyXCIsXG4gIG5hbWVzOiBbXCJcXFxcdmNlbnRlclwiXSxcbiAgcHJvcHM6IHtcbiAgICBudW1BcmdzOiAxLFxuICAgIGFyZ1R5cGVzOiBbXCJvcmlnaW5hbFwiXSxcbiAgICAvLyBJbiBMYVRlWCwgXFx2Y2VudGVyIGNhbiBhY3Qgb25seSBvbiBhIGJveC5cbiAgICBhbGxvd2VkSW5UZXh0OiBmYWxzZVxuICB9LFxuICBoYW5kbGVyOiBmdW5jdGlvbiBoYW5kbGVyKF9yZWYsIGFyZ3MpIHtcbiAgICB2YXIgcGFyc2VyID0gX3JlZi5wYXJzZXI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwidmNlbnRlclwiLFxuICAgICAgbW9kZTogcGFyc2VyLm1vZGUsXG4gICAgICBib2R5OiBhcmdzWzBdXG4gICAgfTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIGJvZHkgPSBidWlsZEdyb3VwKGdyb3VwLmJvZHksIG9wdGlvbnMpO1xuICAgIHZhciBheGlzSGVpZ2h0ID0gb3B0aW9ucy5mb250TWV0cmljcygpLmF4aXNIZWlnaHQ7XG4gICAgdmFyIGR5ID0gMC41ICogKGJvZHkuaGVpZ2h0IC0gYXhpc0hlaWdodCAtIChib2R5LmRlcHRoICsgYXhpc0hlaWdodCkpO1xuICAgIHJldHVybiBidWlsZENvbW1vbi5tYWtlVkxpc3Qoe1xuICAgICAgcG9zaXRpb25UeXBlOiBcInNoaWZ0XCIsXG4gICAgICBwb3NpdGlvbkRhdGE6IGR5LFxuICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgIHR5cGU6IFwiZWxlbVwiLFxuICAgICAgICBlbGVtOiBib2R5XG4gICAgICB9XVxuICAgIH0sIG9wdGlvbnMpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgLy8gVGhlcmUgaXMgbm8gd2F5IHRvIGRvIHRoaXMgaW4gTWF0aE1MLlxuICAgIC8vIFdyaXRlIGEgY2xhc3MgYXMgYSBicmVhZGNydW1iIGluIGNhc2Ugc29tZSBwb3N0LXByb2Nlc3NvciB3YW50c1xuICAgIC8vIHRvIHBlcmZvcm0gYSB2Y2VudGVyIGFkanVzdG1lbnQuXG4gICAgcmV0dXJuIG5ldyBtYXRoTUxUcmVlLk1hdGhOb2RlKFwibXBhZGRlZFwiLCBbYnVpbGRNYXRoTUxfYnVpbGRHcm91cChncm91cC5ib2R5LCBvcHRpb25zKV0sIFtcInZjZW50ZXJcIl0pO1xuICB9XG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9mdW5jdGlvbnMvdmVyYi5qc1xuXG5cblxuXG5kZWZpbmVGdW5jdGlvbih7XG4gIHR5cGU6IFwidmVyYlwiLFxuICBuYW1lczogW1wiXFxcXHZlcmJcIl0sXG4gIHByb3BzOiB7XG4gICAgbnVtQXJnczogMCxcbiAgICBhbGxvd2VkSW5UZXh0OiB0cnVlXG4gIH0sXG4gIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoY29udGV4dCwgYXJncywgb3B0QXJncykge1xuICAgIC8vIFxcdmVyYiBhbmQgXFx2ZXJiKiBhcmUgZGVhbHQgd2l0aCBkaXJlY3RseSBpbiBQYXJzZXIuanMuXG4gICAgLy8gSWYgd2UgZW5kIHVwIGhlcmUsIGl0J3MgYmVjYXVzZSBvZiBhIGZhaWx1cmUgdG8gbWF0Y2ggdGhlIHR3byBkZWxpbWl0ZXJzXG4gICAgLy8gaW4gdGhlIHJlZ2V4IGluIExleGVyLmpzLiAgTGFUZVggcmFpc2VzIHRoZSBmb2xsb3dpbmcgZXJyb3Igd2hlbiBcXHZlcmIgaXNcbiAgICAvLyB0ZXJtaW5hdGVkIGJ5IGVuZCBvZiBsaW5lIChvciBmaWxlKS5cbiAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJcXFxcdmVyYiBlbmRlZCBieSBlbmQgb2YgbGluZSBpbnN0ZWFkIG9mIG1hdGNoaW5nIGRlbGltaXRlclwiKTtcbiAgfSxcbiAgaHRtbEJ1aWxkZXI6IGZ1bmN0aW9uIGh0bWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIHRleHQgPSBtYWtlVmVyYihncm91cCk7XG4gICAgdmFyIGJvZHkgPSBbXTsgLy8gXFx2ZXJiIGVudGVycyB0ZXh0IG1vZGUgYW5kIHRoZXJlZm9yZSBpcyBzaXplZCBsaWtlIFxcdGV4dHN0eWxlXG5cbiAgICB2YXIgbmV3T3B0aW9ucyA9IG9wdGlvbnMuaGF2aW5nU3R5bGUob3B0aW9ucy5zdHlsZS50ZXh0KCkpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXh0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IHRleHRbaV07XG5cbiAgICAgIGlmIChjID09PSAnficpIHtcbiAgICAgICAgYyA9ICdcXFxcdGV4dGFzY2lpdGlsZGUnO1xuICAgICAgfVxuXG4gICAgICBib2R5LnB1c2goYnVpbGRDb21tb24ubWFrZVN5bWJvbChjLCBcIlR5cGV3cml0ZXItUmVndWxhclwiLCBncm91cC5tb2RlLCBuZXdPcHRpb25zLCBbXCJtb3JkXCIsIFwidGV4dHR0XCJdKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1aWxkQ29tbW9uLm1ha2VTcGFuKFtcIm1vcmRcIiwgXCJ0ZXh0XCJdLmNvbmNhdChuZXdPcHRpb25zLnNpemluZ0NsYXNzZXMob3B0aW9ucykpLCBidWlsZENvbW1vbi50cnlDb21iaW5lQ2hhcnMoYm9keSksIG5ld09wdGlvbnMpO1xuICB9LFxuICBtYXRobWxCdWlsZGVyOiBmdW5jdGlvbiBtYXRobWxCdWlsZGVyKGdyb3VwLCBvcHRpb25zKSB7XG4gICAgdmFyIHRleHQgPSBuZXcgbWF0aE1MVHJlZS5UZXh0Tm9kZShtYWtlVmVyYihncm91cCkpO1xuICAgIHZhciBub2RlID0gbmV3IG1hdGhNTFRyZWUuTWF0aE5vZGUoXCJtdGV4dFwiLCBbdGV4dF0pO1xuICAgIG5vZGUuc2V0QXR0cmlidXRlKFwibWF0aHZhcmlhbnRcIiwgXCJtb25vc3BhY2VcIik7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn0pO1xuLyoqXG4gKiBDb252ZXJ0cyB2ZXJiIGdyb3VwIGludG8gYm9keSBzdHJpbmcuXG4gKlxuICogXFx2ZXJiKiByZXBsYWNlcyBlYWNoIHNwYWNlIHdpdGggYW4gb3BlbiBib3ggXFx1MjQyM1xuICogXFx2ZXJiIHJlcGxhY2VzIGVhY2ggc3BhY2Ugd2l0aCBhIG5vLWJyZWFrIHNwYWNlIFxceEEwXG4gKi9cblxudmFyIG1ha2VWZXJiID0gZnVuY3Rpb24gbWFrZVZlcmIoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLmJvZHkucmVwbGFjZSgvIC9nLCBncm91cC5zdGFyID8gXCJcXHUyNDIzXCIgOiAnXFx4QTAnKTtcbn07XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvZnVuY3Rpb25zLmpzXG4vKiogSW5jbHVkZSB0aGlzIHRvIGVuc3VyZSB0aGF0IGFsbCBmdW5jdGlvbnMgYXJlIGRlZmluZWQuICovXG5cbnZhciBmdW5jdGlvbnMgPSBfZnVuY3Rpb25zO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgc3JjX2Z1bmN0aW9ucyA9IChmdW5jdGlvbnMpOyAvLyBUT0RPKGtldmluYik6IGhhdmUgZnVuY3Rpb25zIHJldHVybiBhbiBvYmplY3QgYW5kIGNhbGwgZGVmaW5lRnVuY3Rpb24gd2l0aFxuLy8gdGhhdCBvYmplY3QgaW4gdGhpcyBmaWxlIGluc3RlYWQgb2YgcmVseWluZyBvbiBzaWRlLWVmZmVjdHMuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG5cblxuXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvU291cmNlTG9jYXRpb24uanNcbi8qKlxuICogTGV4aW5nIG9yIHBhcnNpbmcgcG9zaXRpb25hbCBpbmZvcm1hdGlvbiBmb3IgZXJyb3IgcmVwb3J0aW5nLlxuICogVGhpcyBvYmplY3QgaXMgaW1tdXRhYmxlLlxuICovXG52YXIgU291cmNlTG9jYXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvLyBUaGUgKyBwcmVmaXggaW5kaWNhdGVzIHRoYXQgdGhlc2UgZmllbGRzIGFyZW4ndCB3cml0ZWFibGVcbiAgLy8gTGV4ZXIgaG9sZGluZyB0aGUgaW5wdXQgc3RyaW5nLlxuICAvLyBTdGFydCBvZmZzZXQsIHplcm8tYmFzZWQgaW5jbHVzaXZlLlxuICAvLyBFbmQgb2Zmc2V0LCB6ZXJvLWJhc2VkIGV4Y2x1c2l2ZS5cbiAgZnVuY3Rpb24gU291cmNlTG9jYXRpb24obGV4ZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICB0aGlzLmxleGVyID0gdm9pZCAwO1xuICAgIHRoaXMuc3RhcnQgPSB2b2lkIDA7XG4gICAgdGhpcy5lbmQgPSB2b2lkIDA7XG4gICAgdGhpcy5sZXhlciA9IGxleGVyO1xuICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICB0aGlzLmVuZCA9IGVuZDtcbiAgfVxuICAvKipcbiAgICogTWVyZ2VzIHR3byBgU291cmNlTG9jYXRpb25gcyBmcm9tIGxvY2F0aW9uIHByb3ZpZGVycywgZ2l2ZW4gdGhleSBhcmVcbiAgICogcHJvdmlkZWQgaW4gb3JkZXIgb2YgYXBwZWFyYW5jZS5cbiAgICogLSBSZXR1cm5zIHRoZSBmaXJzdCBvbmUncyBsb2NhdGlvbiBpZiBvbmx5IHRoZSBmaXJzdCBpcyBwcm92aWRlZC5cbiAgICogLSBSZXR1cm5zIGEgbWVyZ2VkIHJhbmdlIG9mIHRoZSBmaXJzdCBhbmQgdGhlIGxhc3QgaWYgYm90aCBhcmUgcHJvdmlkZWRcbiAgICogICBhbmQgdGhlaXIgbGV4ZXJzIG1hdGNoLlxuICAgKiAtIE90aGVyd2lzZSwgcmV0dXJucyBudWxsLlxuICAgKi9cblxuXG4gIFNvdXJjZUxvY2F0aW9uLnJhbmdlID0gZnVuY3Rpb24gcmFuZ2UoZmlyc3QsIHNlY29uZCkge1xuICAgIGlmICghc2Vjb25kKSB7XG4gICAgICByZXR1cm4gZmlyc3QgJiYgZmlyc3QubG9jO1xuICAgIH0gZWxzZSBpZiAoIWZpcnN0IHx8ICFmaXJzdC5sb2MgfHwgIXNlY29uZC5sb2MgfHwgZmlyc3QubG9jLmxleGVyICE9PSBzZWNvbmQubG9jLmxleGVyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBTb3VyY2VMb2NhdGlvbihmaXJzdC5sb2MubGV4ZXIsIGZpcnN0LmxvYy5zdGFydCwgc2Vjb25kLmxvYy5lbmQpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gU291cmNlTG9jYXRpb247XG59KCk7XG5cblxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL1Rva2VuLmpzXG5cbi8qKlxuICogSW50ZXJmYWNlIHJlcXVpcmVkIHRvIGJyZWFrIGNpcmN1bGFyIGRlcGVuZGVuY3kgYmV0d2VlbiBUb2tlbiwgTGV4ZXIsIGFuZFxuICogUGFyc2VFcnJvci5cbiAqL1xuXG4vKipcbiAqIFRoZSByZXN1bHRpbmcgdG9rZW4gcmV0dXJuZWQgZnJvbSBgbGV4YC5cbiAqXG4gKiBJdCBjb25zaXN0cyBvZiB0aGUgdG9rZW4gdGV4dCBwbHVzIHNvbWUgcG9zaXRpb24gaW5mb3JtYXRpb24uXG4gKiBUaGUgcG9zaXRpb24gaW5mb3JtYXRpb24gaXMgZXNzZW50aWFsbHkgYSByYW5nZSBpbiBhbiBpbnB1dCBzdHJpbmcsXG4gKiBidXQgaW5zdGVhZCBvZiByZWZlcmVuY2luZyB0aGUgYmFyZSBpbnB1dCBzdHJpbmcsIHdlIHJlZmVyIHRvIHRoZSBsZXhlci5cbiAqIFRoYXQgd2F5IGl0IGlzIHBvc3NpYmxlIHRvIGF0dGFjaCBleHRyYSBtZXRhZGF0YSB0byB0aGUgaW5wdXQgc3RyaW5nLFxuICogbGlrZSBmb3IgZXhhbXBsZSBhIGZpbGUgbmFtZSBvciBzaW1pbGFyLlxuICpcbiAqIFRoZSBwb3NpdGlvbiBpbmZvcm1hdGlvbiBpcyBvcHRpb25hbCwgc28gaXQgaXMgT0sgdG8gY29uc3RydWN0IHN5bnRoZXRpY1xuICogdG9rZW5zIGlmIGFwcHJvcHJpYXRlLiBOb3QgcHJvdmlkaW5nIGF2YWlsYWJsZSBwb3NpdGlvbiBpbmZvcm1hdGlvbiBtYXlcbiAqIGxlYWQgdG8gZGVncmFkZWQgZXJyb3IgcmVwb3J0aW5nLCB0aG91Z2guXG4gKi9cbnZhciBUb2tlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8vIGRvbid0IGV4cGFuZCB0aGUgdG9rZW5cbiAgLy8gdXNlZCBpbiBcXG5vZXhwYW5kXG4gIGZ1bmN0aW9uIFRva2VuKHRleHQsIC8vIHRoZSB0ZXh0IG9mIHRoaXMgdG9rZW5cbiAgbG9jKSB7XG4gICAgdGhpcy50ZXh0ID0gdm9pZCAwO1xuICAgIHRoaXMubG9jID0gdm9pZCAwO1xuICAgIHRoaXMubm9leHBhbmQgPSB2b2lkIDA7XG4gICAgdGhpcy50cmVhdEFzUmVsYXggPSB2b2lkIDA7XG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICB0aGlzLmxvYyA9IGxvYztcbiAgfVxuICAvKipcbiAgICogR2l2ZW4gYSBwYWlyIG9mIHRva2VucyAodGhpcyBhbmQgZW5kVG9rZW4pLCBjb21wdXRlIGEgYFRva2VuYCBlbmNvbXBhc3NpbmdcbiAgICogdGhlIHdob2xlIGlucHV0IHJhbmdlIGVuY2xvc2VkIGJ5IHRoZXNlIHR3by5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gVG9rZW4ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yYW5nZSA9IGZ1bmN0aW9uIHJhbmdlKGVuZFRva2VuLCAvLyBsYXN0IHRva2VuIG9mIHRoZSByYW5nZSwgaW5jbHVzaXZlXG4gIHRleHQgLy8gdGhlIHRleHQgb2YgdGhlIG5ld2x5IGNvbnN0cnVjdGVkIHRva2VuXG4gICkge1xuICAgIHJldHVybiBuZXcgVG9rZW4odGV4dCwgU291cmNlTG9jYXRpb24ucmFuZ2UodGhpcywgZW5kVG9rZW4pKTtcbiAgfTtcblxuICByZXR1cm4gVG9rZW47XG59KCk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvTGV4ZXIuanNcbi8qKlxuICogVGhlIExleGVyIGNsYXNzIGhhbmRsZXMgdG9rZW5pemluZyB0aGUgaW5wdXQgaW4gdmFyaW91cyB3YXlzLiBTaW5jZSBvdXJcbiAqIHBhcnNlciBleHBlY3RzIHVzIHRvIGJlIGFibGUgdG8gYmFja3RyYWNrLCB0aGUgbGV4ZXIgYWxsb3dzIGxleGluZyBmcm9tIGFueVxuICogZ2l2ZW4gc3RhcnRpbmcgcG9pbnQuXG4gKlxuICogSXRzIG1haW4gZXhwb3NlZCBmdW5jdGlvbiBpcyB0aGUgYGxleGAgZnVuY3Rpb24sIHdoaWNoIHRha2VzIGEgcG9zaXRpb24gdG9cbiAqIGxleCBmcm9tIGFuZCBhIHR5cGUgb2YgdG9rZW4gdG8gbGV4LiBJdCBkZWZlcnMgdG8gdGhlIGFwcHJvcHJpYXRlIGBfaW5uZXJMZXhgXG4gKiBmdW5jdGlvbi5cbiAqXG4gKiBUaGUgdmFyaW91cyBgX2lubmVyTGV4YCBmdW5jdGlvbnMgcGVyZm9ybSB0aGUgYWN0dWFsIGxleGluZyBvZiBkaWZmZXJlbnRcbiAqIGtpbmRzLlxuICovXG5cblxuXG5cbi8qIFRoZSBmb2xsb3dpbmcgdG9rZW5SZWdleFxuICogLSBtYXRjaGVzIHR5cGljYWwgd2hpdGVzcGFjZSAoYnV0IG5vdCBOQlNQIGV0Yy4pIHVzaW5nIGl0cyBmaXJzdCBncm91cFxuICogLSBkb2VzIG5vdCBtYXRjaCBhbnkgY29udHJvbCBjaGFyYWN0ZXIgXFx4MDAtXFx4MWYgZXhjZXB0IHdoaXRlc3BhY2VcbiAqIC0gZG9lcyBub3QgbWF0Y2ggYSBiYXJlIGJhY2tzbGFzaFxuICogLSBtYXRjaGVzIGFueSBBU0NJSSBjaGFyYWN0ZXIgZXhjZXB0IHRob3NlIGp1c3QgbWVudGlvbmVkXG4gKiAtIGRvZXMgbm90IG1hdGNoIHRoZSBCTVAgcHJpdmF0ZSB1c2UgYXJlYSBcXHVFMDAwLVxcdUY4RkZcbiAqIC0gZG9lcyBub3QgbWF0Y2ggYmFyZSBzdXJyb2dhdGUgY29kZSB1bml0c1xuICogLSBtYXRjaGVzIGFueSBCTVAgY2hhcmFjdGVyIGV4Y2VwdCBmb3IgdGhvc2UganVzdCBkZXNjcmliZWRcbiAqIC0gbWF0Y2hlcyBhbnkgdmFsaWQgVW5pY29kZSBzdXJyb2dhdGUgcGFpclxuICogLSBtYXRjaGVzIGEgYmFja3NsYXNoIGZvbGxvd2VkIGJ5IG9uZSBvciBtb3JlIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuICogLSBtYXRjaGVzIGEgYmFja3NsYXNoIGZvbGxvd2VkIGJ5IG9uZSBvciBtb3JlIGxldHRlcnMgdGhlbiB3aGl0ZXNwYWNlXG4gKiAtIG1hdGNoZXMgYSBiYWNrc2xhc2ggZm9sbG93ZWQgYnkgYW55IEJNUCBjaGFyYWN0ZXJcbiAqIENhcHR1cmluZyBncm91cHM6XG4gKiAgIFsxXSByZWd1bGFyIHdoaXRlc3BhY2VcbiAqICAgWzJdIGJhY2tzbGFzaCBmb2xsb3dlZCBieSB3aGl0ZXNwYWNlXG4gKiAgIFszXSBhbnl0aGluZyBlbHNlLCB3aGljaCBtYXkgaW5jbHVkZTpcbiAqICAgICBbNF0gbGVmdCBjaGFyYWN0ZXIgb2YgXFx2ZXJiKlxuICogICAgIFs1XSBsZWZ0IGNoYXJhY3RlciBvZiBcXHZlcmJcbiAqICAgICBbNl0gYmFja3NsYXNoIGZvbGxvd2VkIGJ5IHdvcmQsIGV4Y2x1ZGluZyBhbnkgdHJhaWxpbmcgd2hpdGVzcGFjZVxuICogSnVzdCBiZWNhdXNlIHRoZSBMZXhlciBtYXRjaGVzIHNvbWV0aGluZyBkb2Vzbid0IG1lYW4gaXQncyB2YWxpZCBpbnB1dDpcbiAqIElmIHRoZXJlIGlzIG5vIG1hdGNoaW5nIGZ1bmN0aW9uIG9yIHN5bWJvbCBkZWZpbml0aW9uLCB0aGUgUGFyc2VyIHdpbGxcbiAqIHN0aWxsIHJlamVjdCB0aGUgaW5wdXQuXG4gKi9cbnZhciBzcGFjZVJlZ2V4U3RyaW5nID0gXCJbIFxcclxcblxcdF1cIjtcbnZhciBjb250cm9sV29yZFJlZ2V4U3RyaW5nID0gXCJcXFxcXFxcXFthLXpBLVpAXStcIjtcbnZhciBjb250cm9sU3ltYm9sUmVnZXhTdHJpbmcgPSBcIlxcXFxcXFxcW15cXHVEODAwLVxcdURGRkZdXCI7XG52YXIgY29udHJvbFdvcmRXaGl0ZXNwYWNlUmVnZXhTdHJpbmcgPSBcIihcIiArIGNvbnRyb2xXb3JkUmVnZXhTdHJpbmcgKyBcIilcIiArIHNwYWNlUmVnZXhTdHJpbmcgKyBcIipcIjtcbnZhciBjb250cm9sU3BhY2VSZWdleFN0cmluZyA9IFwiXFxcXFxcXFwoXFxufFsgXFxyXFx0XStcXG4/KVsgXFxyXFx0XSpcIjtcbnZhciBjb21iaW5pbmdEaWFjcml0aWNhbE1hcmtTdHJpbmcgPSBcIltcXHUwMzAwLVxcdTAzNkZdXCI7XG52YXIgY29tYmluaW5nRGlhY3JpdGljYWxNYXJrc0VuZFJlZ2V4ID0gbmV3IFJlZ0V4cChjb21iaW5pbmdEaWFjcml0aWNhbE1hcmtTdHJpbmcgKyBcIiskXCIpO1xudmFyIHRva2VuUmVnZXhTdHJpbmcgPSBcIihcIiArIHNwYWNlUmVnZXhTdHJpbmcgKyBcIispfFwiICsgKCAvLyB3aGl0ZXNwYWNlXG5jb250cm9sU3BhY2VSZWdleFN0cmluZyArIFwifFwiKSArIC8vIFxcd2hpdGVzcGFjZVxuXCIoWyEtXFxcXFtcXFxcXS1cXHUyMDI3XFx1MjAyQS1cXHVEN0ZGXFx1RjkwMC1cXHVGRkZGXVwiICsgKCAvLyBzaW5nbGUgY29kZXBvaW50XG5jb21iaW5pbmdEaWFjcml0aWNhbE1hcmtTdHJpbmcgKyBcIipcIikgKyAvLyAuLi5wbHVzIGFjY2VudHNcblwifFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl1cIiArICggLy8gc3Vycm9nYXRlIHBhaXJcbmNvbWJpbmluZ0RpYWNyaXRpY2FsTWFya1N0cmluZyArIFwiKlwiKSArIC8vIC4uLnBsdXMgYWNjZW50c1xuXCJ8XFxcXFxcXFx2ZXJiXFxcXCooW15dKS4qP1xcXFw0XCIgKyAvLyBcXHZlcmIqXG5cInxcXFxcXFxcXHZlcmIoW14qYS16QS1aXSkuKj9cXFxcNVwiICsgKCAvLyBcXHZlcmIgdW5zdGFycmVkXG5cInxcIiArIGNvbnRyb2xXb3JkV2hpdGVzcGFjZVJlZ2V4U3RyaW5nKSArICggLy8gXFxtYWNyb05hbWUgKyBzcGFjZXNcblwifFwiICsgY29udHJvbFN5bWJvbFJlZ2V4U3RyaW5nICsgXCIpXCIpOyAvLyBcXFxcLCBcXCcsIGV0Yy5cblxuLyoqIE1haW4gTGV4ZXIgY2xhc3MgKi9cblxudmFyIExleGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLy8gQ2F0ZWdvcnkgY29kZXMuIFRoZSBsZXhlciBvbmx5IHN1cHBvcnRzIGNvbW1lbnQgY2hhcmFjdGVycyAoMTQpIGZvciBub3cuXG4gIC8vIE1hY3JvRXhwYW5kZXIgYWRkaXRpb25hbGx5IGRpc3Rpbmd1aXNoZXMgYWN0aXZlICgxMykuXG4gIGZ1bmN0aW9uIExleGVyKGlucHV0LCBzZXR0aW5ncykge1xuICAgIHRoaXMuaW5wdXQgPSB2b2lkIDA7XG4gICAgdGhpcy5zZXR0aW5ncyA9IHZvaWQgMDtcbiAgICB0aGlzLnRva2VuUmVnZXggPSB2b2lkIDA7XG4gICAgdGhpcy5jYXRjb2RlcyA9IHZvaWQgMDtcbiAgICAvLyBTZXBhcmF0ZSBhY2NlbnRzIGZyb20gY2hhcmFjdGVyc1xuICAgIHRoaXMuaW5wdXQgPSBpbnB1dDtcbiAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XG4gICAgdGhpcy50b2tlblJlZ2V4ID0gbmV3IFJlZ0V4cCh0b2tlblJlZ2V4U3RyaW5nLCAnZycpO1xuICAgIHRoaXMuY2F0Y29kZXMgPSB7XG4gICAgICBcIiVcIjogMTQsXG4gICAgICAvLyBjb21tZW50IGNoYXJhY3RlclxuICAgICAgXCJ+XCI6IDEzIC8vIGFjdGl2ZSBjaGFyYWN0ZXJcblxuICAgIH07XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGV4ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5zZXRDYXRjb2RlID0gZnVuY3Rpb24gc2V0Q2F0Y29kZShjaGFyLCBjb2RlKSB7XG4gICAgdGhpcy5jYXRjb2Rlc1tjaGFyXSA9IGNvZGU7XG4gIH1cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gbGV4ZXMgYSBzaW5nbGUgdG9rZW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmxleCA9IGZ1bmN0aW9uIGxleCgpIHtcbiAgICB2YXIgaW5wdXQgPSB0aGlzLmlucHV0O1xuICAgIHZhciBwb3MgPSB0aGlzLnRva2VuUmVnZXgubGFzdEluZGV4O1xuXG4gICAgaWYgKHBvcyA9PT0gaW5wdXQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbmV3IFRva2VuKFwiRU9GXCIsIG5ldyBTb3VyY2VMb2NhdGlvbih0aGlzLCBwb3MsIHBvcykpO1xuICAgIH1cblxuICAgIHZhciBtYXRjaCA9IHRoaXMudG9rZW5SZWdleC5leGVjKGlucHV0KTtcblxuICAgIGlmIChtYXRjaCA9PT0gbnVsbCB8fCBtYXRjaC5pbmRleCAhPT0gcG9zKSB7XG4gICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJVbmV4cGVjdGVkIGNoYXJhY3RlcjogJ1wiICsgaW5wdXRbcG9zXSArIFwiJ1wiLCBuZXcgVG9rZW4oaW5wdXRbcG9zXSwgbmV3IFNvdXJjZUxvY2F0aW9uKHRoaXMsIHBvcywgcG9zICsgMSkpKTtcbiAgICB9XG5cbiAgICB2YXIgdGV4dCA9IG1hdGNoWzZdIHx8IG1hdGNoWzNdIHx8IChtYXRjaFsyXSA/IFwiXFxcXCBcIiA6IFwiIFwiKTtcblxuICAgIGlmICh0aGlzLmNhdGNvZGVzW3RleHRdID09PSAxNCkge1xuICAgICAgLy8gY29tbWVudCBjaGFyYWN0ZXJcbiAgICAgIHZhciBubEluZGV4ID0gaW5wdXQuaW5kZXhPZignXFxuJywgdGhpcy50b2tlblJlZ2V4Lmxhc3RJbmRleCk7XG5cbiAgICAgIGlmIChubEluZGV4ID09PSAtMSkge1xuICAgICAgICB0aGlzLnRva2VuUmVnZXgubGFzdEluZGV4ID0gaW5wdXQubGVuZ3RoOyAvLyBFT0ZcblxuICAgICAgICB0aGlzLnNldHRpbmdzLnJlcG9ydE5vbnN0cmljdChcImNvbW1lbnRBdEVuZFwiLCBcIiUgY29tbWVudCBoYXMgbm8gdGVybWluYXRpbmcgbmV3bGluZTsgTGFUZVggd291bGQgXCIgKyBcImZhaWwgYmVjYXVzZSBvZiBjb21tZW50aW5nIHRoZSBlbmQgb2YgbWF0aCBtb2RlIChlLmcuICQpXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50b2tlblJlZ2V4Lmxhc3RJbmRleCA9IG5sSW5kZXggKyAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5sZXgoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFRva2VuKHRleHQsIG5ldyBTb3VyY2VMb2NhdGlvbih0aGlzLCBwb3MsIHRoaXMudG9rZW5SZWdleC5sYXN0SW5kZXgpKTtcbiAgfTtcblxuICByZXR1cm4gTGV4ZXI7XG59KCk7XG5cblxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL05hbWVzcGFjZS5qc1xuLyoqXG4gKiBBIGBOYW1lc3BhY2VgIHJlZmVycyB0byBhIHNwYWNlIG9mIG5hbWVhYmxlIHRoaW5ncyBsaWtlIG1hY3JvcyBvciBsZW5ndGhzLFxuICogd2hpY2ggY2FuIGJlIGBzZXRgIGVpdGhlciBnbG9iYWxseSBvciBsb2NhbCB0byBhIG5lc3RlZCBncm91cCwgdXNpbmcgYW5cbiAqIHVuZG8gc3RhY2sgc2ltaWxhciB0byBob3cgVGVYIGltcGxlbWVudHMgdGhpcyBmdW5jdGlvbmFsaXR5LlxuICogUGVyZm9ybWFuY2Utd2lzZSwgYGdldGAgYW5kIGxvY2FsIGBzZXRgIHRha2UgY29uc3RhbnQgdGltZSwgd2hpbGUgZ2xvYmFsXG4gKiBgc2V0YCB0YWtlcyB0aW1lIHByb3BvcnRpb25hbCB0byB0aGUgZGVwdGggb2YgZ3JvdXAgbmVzdGluZy5cbiAqL1xuXG5cbnZhciBOYW1lc3BhY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQm90aCBhcmd1bWVudHMgYXJlIG9wdGlvbmFsLiAgVGhlIGZpcnN0IGFyZ3VtZW50IGlzIGFuIG9iamVjdCBvZlxuICAgKiBidWlsdC1pbiBtYXBwaW5ncyB3aGljaCBuZXZlciBjaGFuZ2UuICBUaGUgc2Vjb25kIGFyZ3VtZW50IGlzIGFuIG9iamVjdFxuICAgKiBvZiBpbml0aWFsIChnbG9iYWwtbGV2ZWwpIG1hcHBpbmdzLCB3aGljaCB3aWxsIGNvbnN0YW50bHkgY2hhbmdlXG4gICAqIGFjY29yZGluZyB0byBhbnkgZ2xvYmFsL3RvcC1sZXZlbCBgc2V0YHMgZG9uZS5cbiAgICovXG4gIGZ1bmN0aW9uIE5hbWVzcGFjZShidWlsdGlucywgZ2xvYmFsTWFjcm9zKSB7XG4gICAgaWYgKGJ1aWx0aW5zID09PSB2b2lkIDApIHtcbiAgICAgIGJ1aWx0aW5zID0ge307XG4gICAgfVxuXG4gICAgaWYgKGdsb2JhbE1hY3JvcyA9PT0gdm9pZCAwKSB7XG4gICAgICBnbG9iYWxNYWNyb3MgPSB7fTtcbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnQgPSB2b2lkIDA7XG4gICAgdGhpcy5idWlsdGlucyA9IHZvaWQgMDtcbiAgICB0aGlzLnVuZGVmU3RhY2sgPSB2b2lkIDA7XG4gICAgdGhpcy5jdXJyZW50ID0gZ2xvYmFsTWFjcm9zO1xuICAgIHRoaXMuYnVpbHRpbnMgPSBidWlsdGlucztcbiAgICB0aGlzLnVuZGVmU3RhY2sgPSBbXTtcbiAgfVxuICAvKipcbiAgICogU3RhcnQgYSBuZXcgbmVzdGVkIGdyb3VwLCBhZmZlY3RpbmcgZnV0dXJlIGxvY2FsIGBzZXRgcy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gTmFtZXNwYWNlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYmVnaW5Hcm91cCA9IGZ1bmN0aW9uIGJlZ2luR3JvdXAoKSB7XG4gICAgdGhpcy51bmRlZlN0YWNrLnB1c2goe30pO1xuICB9XG4gIC8qKlxuICAgKiBFbmQgY3VycmVudCBuZXN0ZWQgZ3JvdXAsIHJlc3RvcmluZyB2YWx1ZXMgYmVmb3JlIHRoZSBncm91cCBiZWdhbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZW5kR3JvdXAgPSBmdW5jdGlvbiBlbmRHcm91cCgpIHtcbiAgICBpZiAodGhpcy51bmRlZlN0YWNrLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiVW5iYWxhbmNlZCBuYW1lc3BhY2UgZGVzdHJ1Y3Rpb246IGF0dGVtcHQgXCIgKyBcInRvIHBvcCBnbG9iYWwgbmFtZXNwYWNlOyBwbGVhc2UgcmVwb3J0IHRoaXMgYXMgYSBidWdcIik7XG4gICAgfVxuXG4gICAgdmFyIHVuZGVmcyA9IHRoaXMudW5kZWZTdGFjay5wb3AoKTtcblxuICAgIGZvciAodmFyIHVuZGVmIGluIHVuZGVmcykge1xuICAgICAgaWYgKHVuZGVmcy5oYXNPd25Qcm9wZXJ0eSh1bmRlZikpIHtcbiAgICAgICAgaWYgKHVuZGVmc1t1bmRlZl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzLmN1cnJlbnRbdW5kZWZdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY3VycmVudFt1bmRlZl0gPSB1bmRlZnNbdW5kZWZdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBFbmRzIGFsbCBjdXJyZW50bHkgbmVzdGVkIGdyb3VwcyAoaWYgYW55KSwgcmVzdG9yaW5nIHZhbHVlcyBiZWZvcmUgdGhlXG4gICAqIGdyb3VwcyBiZWdhbi4gIFVzZWZ1bCBpbiBjYXNlIG9mIGFuIGVycm9yIGluIHRoZSBtaWRkbGUgb2YgcGFyc2luZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZW5kR3JvdXBzID0gZnVuY3Rpb24gZW5kR3JvdXBzKCkge1xuICAgIHdoaWxlICh0aGlzLnVuZGVmU3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5lbmRHcm91cCgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRGV0ZWN0IHdoZXRoZXIgYG5hbWVgIGhhcyBhIGRlZmluaXRpb24uICBFcXVpdmFsZW50IHRvXG4gICAqIGBnZXQobmFtZSkgIT0gbnVsbGAuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmhhcyA9IGZ1bmN0aW9uIGhhcyhuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudC5oYXNPd25Qcm9wZXJ0eShuYW1lKSB8fCB0aGlzLmJ1aWx0aW5zLmhhc093blByb3BlcnR5KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQgdmFsdWUgb2YgYSBuYW1lLCBvciBgdW5kZWZpbmVkYCBpZiB0aGVyZSBpcyBubyB2YWx1ZS5cbiAgICpcbiAgICogTm90ZTogRG8gbm90IHVzZSBgaWYgKG5hbWVzcGFjZS5nZXQoLi4uKSlgIHRvIGRldGVjdCB3aGV0aGVyIGEgbWFjcm9cbiAgICogaXMgZGVmaW5lZCwgYXMgdGhlIGRlZmluaXRpb24gbWF5IGJlIHRoZSBlbXB0eSBzdHJpbmcgd2hpY2ggZXZhbHVhdGVzXG4gICAqIHRvIGBmYWxzZWAgaW4gSmF2YVNjcmlwdC4gIFVzZSBgaWYgKG5hbWVzcGFjZS5nZXQoLi4uKSAhPSBudWxsKWAgb3JcbiAgICogYGlmIChuYW1lc3BhY2UuaGFzKC4uLikpYC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0ID0gZnVuY3Rpb24gZ2V0KG5hbWUpIHtcbiAgICBpZiAodGhpcy5jdXJyZW50Lmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdGhpcy5jdXJyZW50W25hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5idWlsdGluc1tuYW1lXTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNldCB0aGUgY3VycmVudCB2YWx1ZSBvZiBhIG5hbWUsIGFuZCBvcHRpb25hbGx5IHNldCBpdCBnbG9iYWxseSB0b28uXG4gICAqIExvY2FsIHNldCgpIHNldHMgdGhlIGN1cnJlbnQgdmFsdWUgYW5kICh3aGVuIGFwcHJvcHJpYXRlKSBhZGRzIGFuIHVuZG9cbiAgICogb3BlcmF0aW9uIHRvIHRoZSB1bmRvIHN0YWNrLiAgR2xvYmFsIHNldCgpIG1heSBjaGFuZ2UgdGhlIHVuZG9cbiAgICogb3BlcmF0aW9uIGF0IGV2ZXJ5IGxldmVsLCBzbyB0YWtlcyB0aW1lIGxpbmVhciBpbiB0aGVpciBudW1iZXIuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNldCA9IGZ1bmN0aW9uIHNldChuYW1lLCB2YWx1ZSwgZ2xvYmFsKSB7XG4gICAgaWYgKGdsb2JhbCA9PT0gdm9pZCAwKSB7XG4gICAgICBnbG9iYWwgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAvLyBHbG9iYWwgc2V0IGlzIGVxdWl2YWxlbnQgdG8gc2V0dGluZyBpbiBhbGwgZ3JvdXBzLiAgU2ltdWxhdGUgdGhpc1xuICAgICAgLy8gYnkgZGVzdHJveWluZyBhbnkgdW5kb3MgY3VycmVudGx5IHNjaGVkdWxlZCBmb3IgdGhpcyBuYW1lLFxuICAgICAgLy8gYW5kIGFkZGluZyBhbiB1bmRvIHdpdGggdGhlICpuZXcqIHZhbHVlIChpbiBjYXNlIGl0IGxhdGVyIGdldHNcbiAgICAgIC8vIGxvY2FsbHkgcmVzZXQgd2l0aGluIHRoaXMgZW52aXJvbm1lbnQpLlxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnVuZGVmU3RhY2subGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZGVsZXRlIHRoaXMudW5kZWZTdGFja1tpXVtuYW1lXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudW5kZWZTdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRoaXMudW5kZWZTdGFja1t0aGlzLnVuZGVmU3RhY2subGVuZ3RoIC0gMV1bbmFtZV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVW5kbyB0aGlzIHNldCBhdCBlbmQgb2YgdGhpcyBncm91cCAocG9zc2libHkgdG8gYHVuZGVmaW5lZGApLFxuICAgICAgLy8gdW5sZXNzIGFuIHVuZG8gaXMgYWxyZWFkeSBpbiBwbGFjZSwgaW4gd2hpY2ggY2FzZSB0aGF0IG9sZGVyXG4gICAgICAvLyB2YWx1ZSBpcyB0aGUgY29ycmVjdCBvbmUuXG4gICAgICB2YXIgdG9wID0gdGhpcy51bmRlZlN0YWNrW3RoaXMudW5kZWZTdGFjay5sZW5ndGggLSAxXTtcblxuICAgICAgaWYgKHRvcCAmJiAhdG9wLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHRvcFtuYW1lXSA9IHRoaXMuY3VycmVudFtuYW1lXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnRbbmFtZV0gPSB2YWx1ZTtcbiAgfTtcblxuICByZXR1cm4gTmFtZXNwYWNlO1xufSgpO1xuXG5cbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9tYWNyb3MuanNcbi8qKlxuICogUHJlZGVmaW5lZCBtYWNyb3MgZm9yIEthVGVYLlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBkZWZpbmUgc29tZSBjb21tYW5kcyBpbiB0ZXJtcyBvZiBvdGhlcnMuXG4gKi9cbi8vIEV4cG9ydCBnbG9iYWwgbWFjcm9zIG9iamVjdCBmcm9tIGRlZmluZU1hY3JvXG5cbnZhciBtYWNyb3MgPSBfbWFjcm9zO1xuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIgc3JjX21hY3JvcyA9IChtYWNyb3MpO1xuXG5cblxuXG4gLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gbWFjcm8gdG9vbHNcblxuZGVmaW5lTWFjcm8oXCJcXFxcbm9leHBhbmRcIiwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgLy8gVGhlIGV4cGFuc2lvbiBpcyB0aGUgdG9rZW4gaXRzZWxmOyBidXQgdGhhdCB0b2tlbiBpcyBpbnRlcnByZXRlZFxuICAvLyBhcyBpZiBpdHMgbWVhbmluZyB3ZXJlIOKAmFxccmVsYXjigJkgaWYgaXQgaXMgYSBjb250cm9sIHNlcXVlbmNlIHRoYXRcbiAgLy8gd291bGQgb3JkaW5hcmlseSBiZSBleHBhbmRlZCBieSBUZVjigJlzIGV4cGFuc2lvbiBydWxlcy5cbiAgdmFyIHQgPSBjb250ZXh0LnBvcFRva2VuKCk7XG5cbiAgaWYgKGNvbnRleHQuaXNFeHBhbmRhYmxlKHQudGV4dCkpIHtcbiAgICB0Lm5vZXhwYW5kID0gdHJ1ZTtcbiAgICB0LnRyZWF0QXNSZWxheCA9IHRydWU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRva2VuczogW3RdLFxuICAgIG51bUFyZ3M6IDBcbiAgfTtcbn0pO1xuZGVmaW5lTWFjcm8oXCJcXFxcZXhwYW5kYWZ0ZXJcIiwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgLy8gVGVYIGZpcnN0IHJlYWRzIHRoZSB0b2tlbiB0aGF0IGNvbWVzIGltbWVkaWF0ZWx5IGFmdGVyIFxcZXhwYW5kYWZ0ZXIsXG4gIC8vIHdpdGhvdXQgZXhwYW5kaW5nIGl0OyBsZXTigJlzIGNhbGwgdGhpcyB0b2tlbiB0LiBUaGVuIFRlWCByZWFkcyB0aGVcbiAgLy8gdG9rZW4gdGhhdCBjb21lcyBhZnRlciB0IChhbmQgcG9zc2libHkgbW9yZSB0b2tlbnMsIGlmIHRoYXQgdG9rZW5cbiAgLy8gaGFzIGFuIGFyZ3VtZW50KSwgcmVwbGFjaW5nIGl0IGJ5IGl0cyBleHBhbnNpb24uIEZpbmFsbHkgVGVYIHB1dHNcbiAgLy8gdCBiYWNrIGluIGZyb250IG9mIHRoYXQgZXhwYW5zaW9uLlxuICB2YXIgdCA9IGNvbnRleHQucG9wVG9rZW4oKTtcbiAgY29udGV4dC5leHBhbmRPbmNlKHRydWUpOyAvLyBleHBhbmQgb25seSBhbiBleHBhbmRhYmxlIHRva2VuXG5cbiAgcmV0dXJuIHtcbiAgICB0b2tlbnM6IFt0XSxcbiAgICBudW1BcmdzOiAwXG4gIH07XG59KTsgLy8gTGFUZVgncyBcXEBmaXJzdG9mdHdveyMxfXsjMn0gZXhwYW5kcyB0byAjMSwgc2tpcHBpbmcgIzJcbi8vIFRlWCBzb3VyY2U6IFxcbG9uZ1xcZGVmXFxAZmlyc3RvZnR3byMxIzJ7IzF9XG5cbmRlZmluZU1hY3JvKFwiXFxcXEBmaXJzdG9mdHdvXCIsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIHZhciBhcmdzID0gY29udGV4dC5jb25zdW1lQXJncygyKTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbnM6IGFyZ3NbMF0sXG4gICAgbnVtQXJnczogMFxuICB9O1xufSk7IC8vIExhVGVYJ3MgXFxAc2Vjb25kb2Z0d297IzF9eyMyfSBleHBhbmRzIHRvICMyLCBza2lwcGluZyAjMVxuLy8gVGVYIHNvdXJjZTogXFxsb25nXFxkZWZcXEBzZWNvbmRvZnR3byMxIzJ7IzJ9XG5cbmRlZmluZU1hY3JvKFwiXFxcXEBzZWNvbmRvZnR3b1wiLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICB2YXIgYXJncyA9IGNvbnRleHQuY29uc3VtZUFyZ3MoMik7XG4gIHJldHVybiB7XG4gICAgdG9rZW5zOiBhcmdzWzFdLFxuICAgIG51bUFyZ3M6IDBcbiAgfTtcbn0pOyAvLyBMYVRlWCdzIFxcQGlmbmV4dGNoYXJ7IzF9eyMyfXsjM30gbG9va3MgYWhlYWQgdG8gdGhlIG5leHQgKHVuZXhwYW5kZWQpXG4vLyBzeW1ib2wgdGhhdCBpc24ndCBhIHNwYWNlLCBjb25zdW1pbmcgYW55IHNwYWNlcyBidXQgbm90IGNvbnN1bWluZyB0aGVcbi8vIGZpcnN0IG5vbnNwYWNlIGNoYXJhY3Rlci4gIElmIHRoYXQgbm9uc3BhY2UgY2hhcmFjdGVyIG1hdGNoZXMgIzEsIHRoZW5cbi8vIHRoZSBtYWNybyBleHBhbmRzIHRvICMyOyBvdGhlcndpc2UsIGl0IGV4cGFuZHMgdG8gIzMuXG5cbmRlZmluZU1hY3JvKFwiXFxcXEBpZm5leHRjaGFyXCIsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIHZhciBhcmdzID0gY29udGV4dC5jb25zdW1lQXJncygzKTsgLy8gc3ltYm9sLCBpZiwgZWxzZVxuXG4gIGNvbnRleHQuY29uc3VtZVNwYWNlcygpO1xuICB2YXIgbmV4dFRva2VuID0gY29udGV4dC5mdXR1cmUoKTtcblxuICBpZiAoYXJnc1swXS5sZW5ndGggPT09IDEgJiYgYXJnc1swXVswXS50ZXh0ID09PSBuZXh0VG9rZW4udGV4dCkge1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlbnM6IGFyZ3NbMV0sXG4gICAgICBudW1BcmdzOiAwXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW5zOiBhcmdzWzJdLFxuICAgICAgbnVtQXJnczogMFxuICAgIH07XG4gIH1cbn0pOyAvLyBMYVRlWCdzIFxcQGlmc3RhcnsjMX17IzJ9IGxvb2tzIGFoZWFkIHRvIHRoZSBuZXh0ICh1bmV4cGFuZGVkKSBzeW1ib2wuXG4vLyBJZiBpdCBpcyBgKmAsIHRoZW4gaXQgY29uc3VtZXMgdGhlIHN5bWJvbCwgYW5kIHRoZSBtYWNybyBleHBhbmRzIHRvICMxO1xuLy8gb3RoZXJ3aXNlLCB0aGUgbWFjcm8gZXhwYW5kcyB0byAjMiAod2l0aG91dCBjb25zdW1pbmcgdGhlIHN5bWJvbCkuXG4vLyBUZVggc291cmNlOiBcXGRlZlxcQGlmc3RhciMxe1xcQGlmbmV4dGNoYXIgKntcXEBmaXJzdG9mdHdveyMxfX19XG5cbmRlZmluZU1hY3JvKFwiXFxcXEBpZnN0YXJcIiwgXCJcXFxcQGlmbmV4dGNoYXIgKntcXFxcQGZpcnN0b2Z0d297IzF9fVwiKTsgLy8gTGFUZVgncyBcXFRleHRPck1hdGh7IzF9eyMyfSBleHBhbmRzIHRvICMxIGluIHRleHQgbW9kZSwgIzIgaW4gbWF0aCBtb2RlXG5cbmRlZmluZU1hY3JvKFwiXFxcXFRleHRPck1hdGhcIiwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgdmFyIGFyZ3MgPSBjb250ZXh0LmNvbnN1bWVBcmdzKDIpO1xuXG4gIGlmIChjb250ZXh0Lm1vZGUgPT09ICd0ZXh0Jykge1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlbnM6IGFyZ3NbMF0sXG4gICAgICBudW1BcmdzOiAwXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW5zOiBhcmdzWzFdLFxuICAgICAgbnVtQXJnczogMFxuICAgIH07XG4gIH1cbn0pOyAvLyBMb29rdXAgdGFibGUgZm9yIHBhcnNpbmcgbnVtYmVycyBpbiBiYXNlIDggdGhyb3VnaCAxNlxuXG52YXIgZGlnaXRUb051bWJlciA9IHtcbiAgXCIwXCI6IDAsXG4gIFwiMVwiOiAxLFxuICBcIjJcIjogMixcbiAgXCIzXCI6IDMsXG4gIFwiNFwiOiA0LFxuICBcIjVcIjogNSxcbiAgXCI2XCI6IDYsXG4gIFwiN1wiOiA3LFxuICBcIjhcIjogOCxcbiAgXCI5XCI6IDksXG4gIFwiYVwiOiAxMCxcbiAgXCJBXCI6IDEwLFxuICBcImJcIjogMTEsXG4gIFwiQlwiOiAxMSxcbiAgXCJjXCI6IDEyLFxuICBcIkNcIjogMTIsXG4gIFwiZFwiOiAxMyxcbiAgXCJEXCI6IDEzLFxuICBcImVcIjogMTQsXG4gIFwiRVwiOiAxNCxcbiAgXCJmXCI6IDE1LFxuICBcIkZcIjogMTVcbn07IC8vIFRlWCBcXGNoYXIgbWFrZXMgYSBsaXRlcmFsIGNoYXJhY3RlciAoY2F0Y29kZSAxMikgdXNpbmcgdGhlIGZvbGxvd2luZyBmb3Jtczpcbi8vIChzZWUgVGhlIFRlWEJvb2ssIHAuIDQzKVxuLy8gICBcXGNoYXIxMjMgIC0tIGRlY2ltYWxcbi8vICAgXFxjaGFyJzEyMyAtLSBvY3RhbFxuLy8gICBcXGNoYXJcIjEyMyAtLSBoZXhcbi8vICAgXFxjaGFyYHggICAtLSBjaGFyYWN0ZXIgdGhhdCBjYW4gYmUgd3JpdHRlbiAoaS5lLiBpc24ndCBhY3RpdmUpXG4vLyAgIFxcY2hhcmBcXHggIC0tIGNoYXJhY3RlciB0aGF0IGNhbm5vdCBiZSB3cml0dGVuIChlLmcuICUpXG4vLyBUaGVzZSBhbGwgcmVmZXIgdG8gY2hhcmFjdGVycyBmcm9tIHRoZSBmb250LCBzbyB3ZSB0dXJuIHRoZW0gaW50byBzcGVjaWFsXG4vLyBjYWxscyB0byBhIGZ1bmN0aW9uIFxcQGNoYXIgZGVhbHQgd2l0aCBpbiB0aGUgUGFyc2VyLlxuXG5kZWZpbmVNYWNybyhcIlxcXFxjaGFyXCIsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIHZhciB0b2tlbiA9IGNvbnRleHQucG9wVG9rZW4oKTtcbiAgdmFyIGJhc2U7XG4gIHZhciBudW1iZXIgPSAnJztcblxuICBpZiAodG9rZW4udGV4dCA9PT0gXCInXCIpIHtcbiAgICBiYXNlID0gODtcbiAgICB0b2tlbiA9IGNvbnRleHQucG9wVG9rZW4oKTtcbiAgfSBlbHNlIGlmICh0b2tlbi50ZXh0ID09PSAnXCInKSB7XG4gICAgYmFzZSA9IDE2O1xuICAgIHRva2VuID0gY29udGV4dC5wb3BUb2tlbigpO1xuICB9IGVsc2UgaWYgKHRva2VuLnRleHQgPT09IFwiYFwiKSB7XG4gICAgdG9rZW4gPSBjb250ZXh0LnBvcFRva2VuKCk7XG5cbiAgICBpZiAodG9rZW4udGV4dFswXSA9PT0gXCJcXFxcXCIpIHtcbiAgICAgIG51bWJlciA9IHRva2VuLnRleHQuY2hhckNvZGVBdCgxKTtcbiAgICB9IGVsc2UgaWYgKHRva2VuLnRleHQgPT09IFwiRU9GXCIpIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlxcXFxjaGFyYCBtaXNzaW5nIGFyZ3VtZW50XCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW1iZXIgPSB0b2tlbi50ZXh0LmNoYXJDb2RlQXQoMCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJhc2UgPSAxMDtcbiAgfVxuXG4gIGlmIChiYXNlKSB7XG4gICAgLy8gUGFyc2UgYSBudW1iZXIgaW4gdGhlIGdpdmVuIGJhc2UsIHN0YXJ0aW5nIHdpdGggZmlyc3QgYHRva2VuYC5cbiAgICBudW1iZXIgPSBkaWdpdFRvTnVtYmVyW3Rva2VuLnRleHRdO1xuXG4gICAgaWYgKG51bWJlciA9PSBudWxsIHx8IG51bWJlciA+PSBiYXNlKSB7XG4gICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJJbnZhbGlkIGJhc2UtXCIgKyBiYXNlICsgXCIgZGlnaXQgXCIgKyB0b2tlbi50ZXh0KTtcbiAgICB9XG5cbiAgICB2YXIgZGlnaXQ7XG5cbiAgICB3aGlsZSAoKGRpZ2l0ID0gZGlnaXRUb051bWJlcltjb250ZXh0LmZ1dHVyZSgpLnRleHRdKSAhPSBudWxsICYmIGRpZ2l0IDwgYmFzZSkge1xuICAgICAgbnVtYmVyICo9IGJhc2U7XG4gICAgICBudW1iZXIgKz0gZGlnaXQ7XG4gICAgICBjb250ZXh0LnBvcFRva2VuKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFwiXFxcXEBjaGFye1wiICsgbnVtYmVyICsgXCJ9XCI7XG59KTsgLy8gXFxuZXdjb21tYW5ke1xcbWFjcm99W2FyZ3Nde2RlZmluaXRpb259XG4vLyBcXHJlbmV3Y29tbWFuZHtcXG1hY3JvfVthcmdzXXtkZWZpbml0aW9ufVxuLy8gVE9ETzogT3B0aW9uYWwgYXJndW1lbnRzOiBcXG5ld2NvbW1hbmR7XFxtYWNyb31bYXJnc11bZGVmYXVsdF17ZGVmaW5pdGlvbn1cblxudmFyIG5ld2NvbW1hbmQgPSBmdW5jdGlvbiBuZXdjb21tYW5kKGNvbnRleHQsIGV4aXN0c09LLCBub25leGlzdHNPSykge1xuICB2YXIgYXJnID0gY29udGV4dC5jb25zdW1lQXJnKCkudG9rZW5zO1xuXG4gIGlmIChhcmcubGVuZ3RoICE9PSAxKSB7XG4gICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiXFxcXG5ld2NvbW1hbmQncyBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgbWFjcm8gbmFtZVwiKTtcbiAgfVxuXG4gIHZhciBuYW1lID0gYXJnWzBdLnRleHQ7XG4gIHZhciBleGlzdHMgPSBjb250ZXh0LmlzRGVmaW5lZChuYW1lKTtcblxuICBpZiAoZXhpc3RzICYmICFleGlzdHNPSykge1xuICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlxcXFxuZXdjb21tYW5ke1wiICsgbmFtZSArIFwifSBhdHRlbXB0aW5nIHRvIHJlZGVmaW5lIFwiICsgKG5hbWUgKyBcIjsgdXNlIFxcXFxyZW5ld2NvbW1hbmRcIikpO1xuICB9XG5cbiAgaWYgKCFleGlzdHMgJiYgIW5vbmV4aXN0c09LKSB7XG4gICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiXFxcXHJlbmV3Y29tbWFuZHtcIiArIG5hbWUgKyBcIn0gd2hlbiBjb21tYW5kIFwiICsgbmFtZSArIFwiIFwiICsgXCJkb2VzIG5vdCB5ZXQgZXhpc3Q7IHVzZSBcXFxcbmV3Y29tbWFuZFwiKTtcbiAgfVxuXG4gIHZhciBudW1BcmdzID0gMDtcbiAgYXJnID0gY29udGV4dC5jb25zdW1lQXJnKCkudG9rZW5zO1xuXG4gIGlmIChhcmcubGVuZ3RoID09PSAxICYmIGFyZ1swXS50ZXh0ID09PSBcIltcIikge1xuICAgIHZhciBhcmdUZXh0ID0gJyc7XG4gICAgdmFyIHRva2VuID0gY29udGV4dC5leHBhbmROZXh0VG9rZW4oKTtcblxuICAgIHdoaWxlICh0b2tlbi50ZXh0ICE9PSBcIl1cIiAmJiB0b2tlbi50ZXh0ICE9PSBcIkVPRlwiKSB7XG4gICAgICAvLyBUT0RPOiBTaG91bGQgcHJvcGVybHkgZXhwYW5kIGFyZywgZS5nLiwgaWdub3JlIHt9c1xuICAgICAgYXJnVGV4dCArPSB0b2tlbi50ZXh0O1xuICAgICAgdG9rZW4gPSBjb250ZXh0LmV4cGFuZE5leHRUb2tlbigpO1xuICAgIH1cblxuICAgIGlmICghYXJnVGV4dC5tYXRjaCgvXlxccypbMC05XStcXHMqJC8pKSB7XG4gICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJJbnZhbGlkIG51bWJlciBvZiBhcmd1bWVudHM6IFwiICsgYXJnVGV4dCk7XG4gICAgfVxuXG4gICAgbnVtQXJncyA9IHBhcnNlSW50KGFyZ1RleHQpO1xuICAgIGFyZyA9IGNvbnRleHQuY29uc3VtZUFyZygpLnRva2VucztcbiAgfSAvLyBGaW5hbCBhcmcgaXMgdGhlIGV4cGFuc2lvbiBvZiB0aGUgbWFjcm9cblxuXG4gIGNvbnRleHQubWFjcm9zLnNldChuYW1lLCB7XG4gICAgdG9rZW5zOiBhcmcsXG4gICAgbnVtQXJnczogbnVtQXJnc1xuICB9KTtcbiAgcmV0dXJuICcnO1xufTtcblxuZGVmaW5lTWFjcm8oXCJcXFxcbmV3Y29tbWFuZFwiLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICByZXR1cm4gbmV3Y29tbWFuZChjb250ZXh0LCBmYWxzZSwgdHJ1ZSk7XG59KTtcbmRlZmluZU1hY3JvKFwiXFxcXHJlbmV3Y29tbWFuZFwiLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICByZXR1cm4gbmV3Y29tbWFuZChjb250ZXh0LCB0cnVlLCBmYWxzZSk7XG59KTtcbmRlZmluZU1hY3JvKFwiXFxcXHByb3ZpZGVjb21tYW5kXCIsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIHJldHVybiBuZXdjb21tYW5kKGNvbnRleHQsIHRydWUsIHRydWUpO1xufSk7IC8vIHRlcm1pbmFsIChjb25zb2xlKSB0b29sc1xuXG5kZWZpbmVNYWNybyhcIlxcXFxtZXNzYWdlXCIsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIHZhciBhcmcgPSBjb250ZXh0LmNvbnN1bWVBcmdzKDEpWzBdOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXG4gIGNvbnNvbGUubG9nKGFyZy5yZXZlcnNlKCkubWFwKGZ1bmN0aW9uICh0b2tlbikge1xuICAgIHJldHVybiB0b2tlbi50ZXh0O1xuICB9KS5qb2luKFwiXCIpKTtcbiAgcmV0dXJuICcnO1xufSk7XG5kZWZpbmVNYWNybyhcIlxcXFxlcnJtZXNzYWdlXCIsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIHZhciBhcmcgPSBjb250ZXh0LmNvbnN1bWVBcmdzKDEpWzBdOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXG4gIGNvbnNvbGUuZXJyb3IoYXJnLnJldmVyc2UoKS5tYXAoZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgcmV0dXJuIHRva2VuLnRleHQ7XG4gIH0pLmpvaW4oXCJcIikpO1xuICByZXR1cm4gJyc7XG59KTtcbmRlZmluZU1hY3JvKFwiXFxcXHNob3dcIiwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgdmFyIHRvayA9IGNvbnRleHQucG9wVG9rZW4oKTtcbiAgdmFyIG5hbWUgPSB0b2sudGV4dDsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcblxuICBjb25zb2xlLmxvZyh0b2ssIGNvbnRleHQubWFjcm9zLmdldChuYW1lKSwgc3JjX2Z1bmN0aW9uc1tuYW1lXSwgc3JjX3N5bWJvbHMubWF0aFtuYW1lXSwgc3JjX3N5bWJvbHMudGV4dFtuYW1lXSk7XG4gIHJldHVybiAnJztcbn0pOyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBHcm91cGluZ1xuLy8gXFxsZXRcXGJncm91cD17IFxcbGV0XFxlZ3JvdXA9fVxuXG5kZWZpbmVNYWNybyhcIlxcXFxiZ3JvdXBcIiwgXCJ7XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZWdyb3VwXCIsIFwifVwiKTsgLy8gU3ltYm9scyBmcm9tIGxhdGV4Lmx0eDpcbi8vIFxcZGVmfntcXG5vYnJlYWtzcGFjZXt9fVxuLy8gXFxkZWZcXGxxe2B9XG4vLyBcXGRlZlxccnF7J31cbi8vIFxcZGVmIFxcYWEge1xcciBhfVxuLy8gXFxkZWYgXFxBQSB7XFxyIEF9XG5cbmRlZmluZU1hY3JvKFwiflwiLCBcIlxcXFxub2JyZWFrc3BhY2VcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxscVwiLCBcImBcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxycVwiLCBcIidcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxhYVwiLCBcIlxcXFxyIGFcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxBQVwiLCBcIlxcXFxyIEFcIik7IC8vIENvcHlyaWdodCAoQykgYW5kIHJlZ2lzdGVyZWQgKFIpIHN5bWJvbHMuIFVzZSByYXcgc3ltYm9sIGluIE1hdGhNTC5cbi8vIFxcRGVjbGFyZVRleHRDb21tYW5kRGVmYXVsdHtcXHRleHRjb3B5cmlnaHR9e1xcdGV4dGNpcmNsZWR7Y319XG4vLyBcXERlY2xhcmVUZXh0Q29tbWFuZERlZmF1bHR7XFx0ZXh0cmVnaXN0ZXJlZH17XFx0ZXh0Y2lyY2xlZHslXG4vLyAgICAgIFxcY2hlY2tAbWF0aGZvbnRzXFxmb250c2l6ZVxcc2ZAc2l6ZVxcekBcXG1hdGhAZm9udHNmYWxzZVxcc2VsZWN0Zm9udCBSfX1cbi8vIFxcRGVjbGFyZVJvYnVzdENvbW1hbmR7XFxjb3B5cmlnaHR9eyVcbi8vICAgIFxcaWZtbW9kZXtcXG5mc3NAdGV4dHtcXHRleHRjb3B5cmlnaHR9fVxcZWxzZVxcdGV4dGNvcHlyaWdodFxcZml9XG5cbmRlZmluZU1hY3JvKFwiXFxcXHRleHRjb3B5cmlnaHRcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXHRleHRjaXJjbGVke2N9fXtcXFxcY2hhcmDCqX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxjb3B5cmlnaHRcIiwgXCJcXFxcVGV4dE9yTWF0aHtcXFxcdGV4dGNvcHlyaWdodH17XFxcXHRleHR7XFxcXHRleHRjb3B5cmlnaHR9fVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHRleHRyZWdpc3RlcmVkXCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFx0ZXh0Y2lyY2xlZHtcXFxcc2NyaXB0c2l6ZSBSfX17XFxcXGNoYXJgwq59XCIpOyAvLyBDaGFyYWN0ZXJzIG9taXR0ZWQgZnJvbSBVbmljb2RlIHJhbmdlIDFENDAw4oCTMUQ3RkZcblxuZGVmaW5lTWFjcm8oXCJcXHUyMTJDXCIsIFwiXFxcXG1hdGhzY3J7Qn1cIik7IC8vIHNjcmlwdFxuXG5kZWZpbmVNYWNybyhcIlxcdTIxMzBcIiwgXCJcXFxcbWF0aHNjcntFfVwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjEzMVwiLCBcIlxcXFxtYXRoc2Nye0Z9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXHUyMTBCXCIsIFwiXFxcXG1hdGhzY3J7SH1cIik7XG5kZWZpbmVNYWNybyhcIlxcdTIxMTBcIiwgXCJcXFxcbWF0aHNjcntJfVwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjExMlwiLCBcIlxcXFxtYXRoc2Nye0x9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXHUyMTMzXCIsIFwiXFxcXG1hdGhzY3J7TX1cIik7XG5kZWZpbmVNYWNybyhcIlxcdTIxMUJcIiwgXCJcXFxcbWF0aHNjcntSfVwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjEyRFwiLCBcIlxcXFxtYXRoZnJha3tDfVwiKTsgLy8gRnJha3R1clxuXG5kZWZpbmVNYWNybyhcIlxcdTIxMENcIiwgXCJcXFxcbWF0aGZyYWt7SH1cIik7XG5kZWZpbmVNYWNybyhcIlxcdTIxMjhcIiwgXCJcXFxcbWF0aGZyYWt7Wn1cIik7IC8vIERlZmluZSBcXEJiYmsgd2l0aCBhIG1hY3JvIHRoYXQgd29ya3MgaW4gYm90aCBIVE1MIGFuZCBNYXRoTUwuXG5cbmRlZmluZU1hY3JvKFwiXFxcXEJiYmtcIiwgXCJcXFxcQmJie2t9XCIpOyAvLyBVbmljb2RlIG1pZGRsZSBkb3Rcbi8vIFRoZSBLYVRlWCBmb250cyBkbyBub3QgY29udGFpbiBVKzAwQjcuIEluc3RlYWQsIFxcY2RvdHAgZGlzcGxheXNcbi8vIHRoZSBkb3QgYXQgVSsyMkM1IGFuZCBnaXZlcyBpdCBwdW5jdCBzcGFjaW5nLlxuXG5kZWZpbmVNYWNybyhcIlxceEI3XCIsIFwiXFxcXGNkb3RwXCIpOyAvLyBcXGxsYXAgYW5kIFxccmxhcCByZW5kZXIgdGhlaXIgY29udGVudHMgaW4gdGV4dCBtb2RlXG5cbmRlZmluZU1hY3JvKFwiXFxcXGxsYXBcIiwgXCJcXFxcbWF0aGxsYXB7XFxcXHRleHRybXsjMX19XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccmxhcFwiLCBcIlxcXFxtYXRocmxhcHtcXFxcdGV4dHJteyMxfX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxjbGFwXCIsIFwiXFxcXG1hdGhjbGFwe1xcXFx0ZXh0cm17IzF9fVwiKTsgLy8gXFxtYXRoc3RydXQgZnJvbSB0aGUgVGVYYm9vaywgcCAzNjBcblxuZGVmaW5lTWFjcm8oXCJcXFxcbWF0aHN0cnV0XCIsIFwiXFxcXHZwaGFudG9teyh9XCIpOyAvLyBcXHVuZGVyYmFyIGZyb20gVGVYYm9vayBwIDM1M1xuXG5kZWZpbmVNYWNybyhcIlxcXFx1bmRlcmJhclwiLCBcIlxcXFx1bmRlcmxpbmV7XFxcXHRleHR7IzF9fVwiKTsgLy8gXFxub3QgaXMgZGVmaW5lZCBieSBiYXNlL2ZvbnRtYXRoLmx0eCB2aWFcbi8vIFxcRGVjbGFyZU1hdGhTeW1ib2x7XFxub3R9e1xcbWF0aHJlbH17c3ltYm9sc317XCIzNn1cbi8vIEl0J3MgdGh1cyB0cmVhdGVkIGxpa2UgYSBcXG1hdGhyZWwsIGJ1dCBkZWZpbmVkIGJ5IGEgc3ltYm9sIHRoYXQgaGFzIHplcm9cbi8vIHdpZHRoIGJ1dCBleHRlbmRzIHRvIHRoZSByaWdodC4gIFdlIHVzZSBcXHJsYXAgdG8gZ2V0IHRoYXQgc3BhY2luZy5cbi8vIEZvciBNYXRoTUwgd2Ugd3JpdGUgVSswMzM4IGhlcmUuIGJ1aWxkTWF0aE1MLmpzIHdpbGwgdGhlbiBkbyB0aGUgb3ZlcmxheS5cblxuZGVmaW5lTWFjcm8oXCJcXFxcbm90XCIsICdcXFxcaHRtbEBtYXRobWx7XFxcXG1hdGhyZWx7XFxcXG1hdGhybGFwXFxcXEBub3R9fXtcXFxcY2hhclwiMzM4fScpOyAvLyBOZWdhdGVkIHN5bWJvbHMgZnJvbSBiYXNlL2ZvbnRtYXRoLmx0eDpcbi8vIFxcZGVmXFxuZXF7XFxub3Q9fSBcXGxldFxcbmU9XFxuZXFcbi8vIFxcRGVjbGFyZVJvYnVzdENvbW1hbmRcbi8vICAgXFxub3RpbntcXG1hdGhyZWx7XFxtQHRoXFxtYXRocGFsZXR0ZVxcY0BuY2VsXFxpbn19XG4vLyBcXGRlZlxcY0BuY2VsIzEjMntcXG1AdGhcXG9vYWxpZ257JFxcaGZpbCMxXFxta2VybjFtdS9cXGhmaWwkXFxjcmNyJCMxIzIkfX1cblxuZGVmaW5lTWFjcm8oXCJcXFxcbmVxXCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxtYXRocmVse1xcXFxub3Q9fX17XFxcXG1hdGhyZWx7XFxcXGNoYXJg4omgfX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxuZVwiLCBcIlxcXFxuZXFcIik7XG5kZWZpbmVNYWNybyhcIlxcdTIyNjBcIiwgXCJcXFxcbmVxXCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbm90aW5cIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXG1hdGhyZWx7e1xcXFxpbn1cXFxcbWF0aGxsYXB7L1xcXFxtc2tpcDFtdX19fVwiICsgXCJ7XFxcXG1hdGhyZWx7XFxcXGNoYXJg4oiJfX1cIik7XG5kZWZpbmVNYWNybyhcIlxcdTIyMDlcIiwgXCJcXFxcbm90aW5cIik7IC8vIFVuaWNvZGUgc3RhY2tlZCByZWxhdGlvbnNcblxuZGVmaW5lTWFjcm8oXCJcXHUyMjU4XCIsIFwiXFxcXGh0bWxAbWF0aG1se1wiICsgXCJcXFxcbWF0aHJlbHs9XFxcXGtlcm57LTFlbX1cXFxccmFpc2Vib3h7MC40ZW19eyRcXFxcc2NyaXB0c2l6ZVxcXFxmcm93biR9fVwiICsgXCJ9e1xcXFxtYXRocmVse1xcXFxjaGFyYFxcdTIyNTh9fVwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjI1OVwiLCBcIlxcXFxodG1sQG1hdGhtbHtcXFxcc3RhY2tyZWx7XFxcXHRpbnlcXFxcd2VkZ2V9ez19fXtcXFxcbWF0aHJlbHtcXFxcY2hhcmBcXHUyMjU4fX1cIik7XG5kZWZpbmVNYWNybyhcIlxcdTIyNUFcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXHN0YWNrcmVse1xcXFx0aW55XFxcXHZlZX17PX19e1xcXFxtYXRocmVse1xcXFxjaGFyYFxcdTIyNUF9fVwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjI1QlwiLCBcIlxcXFxodG1sQG1hdGhtbHtcXFxcc3RhY2tyZWx7XFxcXHNjcmlwdHNpemVcXFxcc3Rhcn17PX19XCIgKyBcIntcXFxcbWF0aHJlbHtcXFxcY2hhcmBcXHUyMjVCfX1cIik7XG5kZWZpbmVNYWNybyhcIlxcdTIyNURcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXHN0YWNrcmVse1xcXFx0aW55XFxcXG1hdGhybXtkZWZ9fXs9fX1cIiArIFwie1xcXFxtYXRocmVse1xcXFxjaGFyYFxcdTIyNUR9fVwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjI1RVwiLCBcIlxcXFxodG1sQG1hdGhtbHtcXFxcc3RhY2tyZWx7XFxcXHRpbnlcXFxcbWF0aHJte219fXs9fX1cIiArIFwie1xcXFxtYXRocmVse1xcXFxjaGFyYFxcdTIyNUV9fVwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjI1RlwiLCBcIlxcXFxodG1sQG1hdGhtbHtcXFxcc3RhY2tyZWx7XFxcXHRpbnk/fXs9fX17XFxcXG1hdGhyZWx7XFxcXGNoYXJgXFx1MjI1Rn19XCIpOyAvLyBNaXNjIFVuaWNvZGVcblxuZGVmaW5lTWFjcm8oXCJcXHUyN0MyXCIsIFwiXFxcXHBlcnBcIik7XG5kZWZpbmVNYWNybyhcIlxcdTIwM0NcIiwgXCJcXFxcbWF0aGNsb3NleyFcXFxcbWtlcm4tMC44bXUhfVwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjIwQ1wiLCBcIlxcXFxub3RuaVwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjMxQ1wiLCBcIlxcXFx1bGNvcm5lclwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjMxRFwiLCBcIlxcXFx1cmNvcm5lclwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjMxRVwiLCBcIlxcXFxsbGNvcm5lclwiKTtcbmRlZmluZU1hY3JvKFwiXFx1MjMxRlwiLCBcIlxcXFxscmNvcm5lclwiKTtcbmRlZmluZU1hY3JvKFwiXFx4QTlcIiwgXCJcXFxcY29weXJpZ2h0XCIpO1xuZGVmaW5lTWFjcm8oXCJcXHhBRVwiLCBcIlxcXFx0ZXh0cmVnaXN0ZXJlZFwiKTtcbmRlZmluZU1hY3JvKFwiXFx1RkUwRlwiLCBcIlxcXFx0ZXh0cmVnaXN0ZXJlZFwiKTsgLy8gVGhlIEthVGVYIGZvbnRzIGhhdmUgY29ybmVycyBhdCBjb2RlcG9pbnRzIHRoYXQgZG9uJ3QgbWF0Y2ggVW5pY29kZS5cbi8vIEZvciBNYXRoTUwgcHVycG9zZXMsIHVzZSB0aGUgVW5pY29kZSBjb2RlIHBvaW50LlxuXG5kZWZpbmVNYWNybyhcIlxcXFx1bGNvcm5lclwiLCBcIlxcXFxodG1sQG1hdGhtbHtcXFxcQHVsY29ybmVyfXtcXFxcbWF0aG9we1xcXFxjaGFyXFxcIjIzMWN9fVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHVyY29ybmVyXCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxAdXJjb3JuZXJ9e1xcXFxtYXRob3B7XFxcXGNoYXJcXFwiMjMxZH19XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbGxjb3JuZXJcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXEBsbGNvcm5lcn17XFxcXG1hdGhvcHtcXFxcY2hhclxcXCIyMzFlfX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxscmNvcm5lclwiLCBcIlxcXFxodG1sQG1hdGhtbHtcXFxcQGxyY29ybmVyfXtcXFxcbWF0aG9we1xcXFxjaGFyXFxcIjIzMWZ9fVwiKTsgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gTGFUZVhfMs61XG4vLyBcXHZkb3Rze1xcdmJveHtcXGJhc2VsaW5lc2tpcDRcXHBAICBcXGxpbmVza2lwbGltaXRcXHpAXG4vLyBcXGtlcm42XFxwQFxcaGJveHsufVxcaGJveHsufVxcaGJveHsufX19XG4vLyBXZSdsbCBjYWxsIFxcdmFydmRvdHMsIHdoaWNoIGdldHMgYSBnbHlwaCBmcm9tIHN5bWJvbHMuanMuXG4vLyBUaGUgemVyby13aWR0aCBydWxlIGdldHMgdXMgYW4gZXF1aXZhbGVudCB0byB0aGUgdmVydGljYWwgNnB0IGtlcm4uXG5cbmRlZmluZU1hY3JvKFwiXFxcXHZkb3RzXCIsIFwiXFxcXG1hdGhvcmR7XFxcXHZhcnZkb3RzXFxcXHJ1bGV7MHB0fXsxNXB0fX1cIik7XG5kZWZpbmVNYWNybyhcIlxcdTIyRUVcIiwgXCJcXFxcdmRvdHNcIik7IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIGFtc21hdGguc3R5XG4vLyBodHRwOi8vbWlycm9ycy5jb25jZXJ0cGFzcy5jb20vdGV4LWFyY2hpdmUvbWFjcm9zL2xhdGV4L3JlcXVpcmVkL2Ftc21hdGgvYW1zbWF0aC5wZGZcbi8vIEl0YWxpYyBHcmVlayBjYXBpdGFsIGxldHRlcnMuICBBTVMgZGVmaW5lcyB0aGVzZSB3aXRoIFxcRGVjbGFyZU1hdGhTeW1ib2wsXG4vLyBidXQgdGhleSBhcmUgZXF1aXZhbGVudCB0byBcXG1hdGhpdHtcXExldHRlcn0uXG5cbmRlZmluZU1hY3JvKFwiXFxcXHZhckdhbW1hXCIsIFwiXFxcXG1hdGhpdHtcXFxcR2FtbWF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcdmFyRGVsdGFcIiwgXCJcXFxcbWF0aGl0e1xcXFxEZWx0YX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFx2YXJUaGV0YVwiLCBcIlxcXFxtYXRoaXR7XFxcXFRoZXRhfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHZhckxhbWJkYVwiLCBcIlxcXFxtYXRoaXR7XFxcXExhbWJkYX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFx2YXJYaVwiLCBcIlxcXFxtYXRoaXR7XFxcXFhpfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHZhclBpXCIsIFwiXFxcXG1hdGhpdHtcXFxcUGl9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcdmFyU2lnbWFcIiwgXCJcXFxcbWF0aGl0e1xcXFxTaWdtYX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFx2YXJVcHNpbG9uXCIsIFwiXFxcXG1hdGhpdHtcXFxcVXBzaWxvbn1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFx2YXJQaGlcIiwgXCJcXFxcbWF0aGl0e1xcXFxQaGl9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcdmFyUHNpXCIsIFwiXFxcXG1hdGhpdHtcXFxcUHNpfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHZhck9tZWdhXCIsIFwiXFxcXG1hdGhpdHtcXFxcT21lZ2F9XCIpOyAvL1xcbmV3Y29tbWFuZHtcXHN1YnN0YWNrfVsxXXtcXHN1YmFycmF5e2N9IzFcXGVuZHN1YmFycmF5fVxuXG5kZWZpbmVNYWNybyhcIlxcXFxzdWJzdGFja1wiLCBcIlxcXFxiZWdpbntzdWJhcnJheX17Y30jMVxcXFxlbmR7c3ViYXJyYXl9XCIpOyAvLyBcXHJlbmV3Y29tbWFuZHtcXGNvbG9ufXtcXG5vYnJlYWtcXG1za2lwMm11XFxtYXRocHVuY3R7fVxcbm9uc2NyaXB0XG4vLyBcXG1rZXJuLVxcdGhpbm11c2tpcHs6fVxcbXNraXA2bXVwbHVzMW11XFxyZWxheH1cblxuZGVmaW5lTWFjcm8oXCJcXFxcY29sb25cIiwgXCJcXFxcbm9icmVha1xcXFxtc2tpcDJtdVxcXFxtYXRocHVuY3R7fVwiICsgXCJcXFxcbWF0aGNob2ljZXtcXFxcbWtlcm4tM211fXtcXFxcbWtlcm4tM211fXt9e317On1cXFxcbXNraXA2bXVcIik7IC8vIFxcbmV3Y29tbWFuZHtcXGJveGVkfVsxXXtcXGZib3h7XFxtQHRoJFxcZGlzcGxheXN0eWxlIzEkfX1cblxuZGVmaW5lTWFjcm8oXCJcXFxcYm94ZWRcIiwgXCJcXFxcZmJveHskXFxcXGRpc3BsYXlzdHlsZXsjMX0kfVwiKTsgLy8gXFxkZWZcXGlmZntcXERPVFNCXFw7XFxMb25nbGVmdHJpZ2h0YXJyb3dcXDt9XG4vLyBcXGRlZlxcaW1wbGllc3tcXERPVFNCXFw7XFxMb25ncmlnaHRhcnJvd1xcO31cbi8vIFxcZGVmXFxpbXBsaWVkYnl7XFxET1RTQlxcO1xcTG9uZ2xlZnRhcnJvd1xcO31cblxuZGVmaW5lTWFjcm8oXCJcXFxcaWZmXCIsIFwiXFxcXERPVFNCXFxcXDtcXFxcTG9uZ2xlZnRyaWdodGFycm93XFxcXDtcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxpbXBsaWVzXCIsIFwiXFxcXERPVFNCXFxcXDtcXFxcTG9uZ3JpZ2h0YXJyb3dcXFxcO1wiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGltcGxpZWRieVwiLCBcIlxcXFxET1RTQlxcXFw7XFxcXExvbmdsZWZ0YXJyb3dcXFxcO1wiKTsgLy8gQU1TTWF0aCdzIGF1dG9tYXRpYyBcXGRvdHMsIGJhc2VkIG9uIFxcbWRvdHNAQCBtYWNyby5cblxudmFyIGRvdHNCeVRva2VuID0ge1xuICAnLCc6ICdcXFxcZG90c2MnLFxuICAnXFxcXG5vdCc6ICdcXFxcZG90c2InLFxuICAvLyBcXGtleWJpbkAgY2hlY2tzIGZvciB0aGUgZm9sbG93aW5nOlxuICAnKyc6ICdcXFxcZG90c2InLFxuICAnPSc6ICdcXFxcZG90c2InLFxuICAnPCc6ICdcXFxcZG90c2InLFxuICAnPic6ICdcXFxcZG90c2InLFxuICAnLSc6ICdcXFxcZG90c2InLFxuICAnKic6ICdcXFxcZG90c2InLFxuICAnOic6ICdcXFxcZG90c2InLFxuICAvLyBTeW1ib2xzIHdob3NlIGRlZmluaXRpb24gc3RhcnRzIHdpdGggXFxET1RTQjpcbiAgJ1xcXFxET1RTQic6ICdcXFxcZG90c2InLFxuICAnXFxcXGNvcHJvZCc6ICdcXFxcZG90c2InLFxuICAnXFxcXGJpZ3ZlZSc6ICdcXFxcZG90c2InLFxuICAnXFxcXGJpZ3dlZGdlJzogJ1xcXFxkb3RzYicsXG4gICdcXFxcYmlndXBsdXMnOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxiaWdjYXAnOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxiaWdjdXAnOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxwcm9kJzogJ1xcXFxkb3RzYicsXG4gICdcXFxcc3VtJzogJ1xcXFxkb3RzYicsXG4gICdcXFxcYmlnb3RpbWVzJzogJ1xcXFxkb3RzYicsXG4gICdcXFxcYmlnb3BsdXMnOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxiaWdvZG90JzogJ1xcXFxkb3RzYicsXG4gICdcXFxcYmlnc3FjdXAnOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxBbmQnOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxsb25ncmlnaHRhcnJvdyc6ICdcXFxcZG90c2InLFxuICAnXFxcXExvbmdyaWdodGFycm93JzogJ1xcXFxkb3RzYicsXG4gICdcXFxcbG9uZ2xlZnRhcnJvdyc6ICdcXFxcZG90c2InLFxuICAnXFxcXExvbmdsZWZ0YXJyb3cnOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxsb25nbGVmdHJpZ2h0YXJyb3cnOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxMb25nbGVmdHJpZ2h0YXJyb3cnOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxtYXBzdG8nOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxsb25nbWFwc3RvJzogJ1xcXFxkb3RzYicsXG4gICdcXFxcaG9va3JpZ2h0YXJyb3cnOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFxkb3RlcSc6ICdcXFxcZG90c2InLFxuICAvLyBTeW1ib2xzIHdob3NlIGRlZmluaXRpb24gc3RhcnRzIHdpdGggXFxtYXRoYmluOlxuICAnXFxcXG1hdGhiaW4nOiAnXFxcXGRvdHNiJyxcbiAgLy8gU3ltYm9scyB3aG9zZSBkZWZpbml0aW9uIHN0YXJ0cyB3aXRoIFxcbWF0aHJlbDpcbiAgJ1xcXFxtYXRocmVsJzogJ1xcXFxkb3RzYicsXG4gICdcXFxccmVsYmFyJzogJ1xcXFxkb3RzYicsXG4gICdcXFxcUmVsYmFyJzogJ1xcXFxkb3RzYicsXG4gICdcXFxceHJpZ2h0YXJyb3cnOiAnXFxcXGRvdHNiJyxcbiAgJ1xcXFx4bGVmdGFycm93JzogJ1xcXFxkb3RzYicsXG4gIC8vIFN5bWJvbHMgd2hvc2UgZGVmaW5pdGlvbiBzdGFydHMgd2l0aCBcXERPVFNJOlxuICAnXFxcXERPVFNJJzogJ1xcXFxkb3RzaScsXG4gICdcXFxcaW50JzogJ1xcXFxkb3RzaScsXG4gICdcXFxcb2ludCc6ICdcXFxcZG90c2knLFxuICAnXFxcXGlpbnQnOiAnXFxcXGRvdHNpJyxcbiAgJ1xcXFxpaWludCc6ICdcXFxcZG90c2knLFxuICAnXFxcXGlpaWludCc6ICdcXFxcZG90c2knLFxuICAnXFxcXGlkb3RzaW50JzogJ1xcXFxkb3RzaScsXG4gIC8vIFN5bWJvbHMgd2hvc2UgZGVmaW5pdGlvbiBzdGFydHMgd2l0aCBcXERPVFNYOlxuICAnXFxcXERPVFNYJzogJ1xcXFxkb3RzeCdcbn07XG5kZWZpbmVNYWNybyhcIlxcXFxkb3RzXCIsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIC8vIFRPRE86IElmIHVzZWQgaW4gdGV4dCBtb2RlLCBzaG91bGQgZXhwYW5kIHRvIFxcdGV4dGVsbGlwc2lzLlxuICAvLyBIb3dldmVyLCBpbiBLYVRlWCwgXFx0ZXh0ZWxsaXBzaXMgYW5kIFxcbGRvdHMgYmVoYXZlIHRoZSBzYW1lXG4gIC8vIChpbiB0ZXh0IG1vZGUpLCBhbmQgaXQncyB1bmxpa2VseSB3ZSdkIHNlZSBhbnkgb2YgdGhlIG1hdGggY29tbWFuZHNcbiAgLy8gdGhhdCBhZmZlY3QgdGhlIGJlaGF2aW9yIG9mIFxcZG90cyB3aGVuIGluIHRleHQgbW9kZS4gIFNvIGZpbmUgZm9yIG5vd1xuICAvLyAodW50aWwgd2Ugc3VwcG9ydCBcXGlmbW1vZGUgLi4uIFxcZWxzZSAuLi4gXFxmaSkuXG4gIHZhciB0aGVkb3RzID0gJ1xcXFxkb3Rzbyc7XG4gIHZhciBuZXh0ID0gY29udGV4dC5leHBhbmRBZnRlckZ1dHVyZSgpLnRleHQ7XG5cbiAgaWYgKG5leHQgaW4gZG90c0J5VG9rZW4pIHtcbiAgICB0aGVkb3RzID0gZG90c0J5VG9rZW5bbmV4dF07XG4gIH0gZWxzZSBpZiAobmV4dC5zdWJzdHIoMCwgNCkgPT09ICdcXFxcbm90Jykge1xuICAgIHRoZWRvdHMgPSAnXFxcXGRvdHNiJztcbiAgfSBlbHNlIGlmIChuZXh0IGluIHNyY19zeW1ib2xzLm1hdGgpIHtcbiAgICBpZiAodXRpbHMuY29udGFpbnMoWydiaW4nLCAncmVsJ10sIHNyY19zeW1ib2xzLm1hdGhbbmV4dF0uZ3JvdXApKSB7XG4gICAgICB0aGVkb3RzID0gJ1xcXFxkb3RzYic7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoZWRvdHM7XG59KTtcbnZhciBzcGFjZUFmdGVyRG90cyA9IHtcbiAgLy8gXFxyaWdodGRlbGltQCBjaGVja3MgZm9yIHRoZSBmb2xsb3dpbmc6XG4gICcpJzogdHJ1ZSxcbiAgJ10nOiB0cnVlLFxuICAnXFxcXHJicmFjayc6IHRydWUsXG4gICdcXFxcfSc6IHRydWUsXG4gICdcXFxccmJyYWNlJzogdHJ1ZSxcbiAgJ1xcXFxyYW5nbGUnOiB0cnVlLFxuICAnXFxcXHJjZWlsJzogdHJ1ZSxcbiAgJ1xcXFxyZmxvb3InOiB0cnVlLFxuICAnXFxcXHJncm91cCc6IHRydWUsXG4gICdcXFxccm1vdXN0YWNoZSc6IHRydWUsXG4gICdcXFxccmlnaHQnOiB0cnVlLFxuICAnXFxcXGJpZ3InOiB0cnVlLFxuICAnXFxcXGJpZ2dyJzogdHJ1ZSxcbiAgJ1xcXFxCaWdyJzogdHJ1ZSxcbiAgJ1xcXFxCaWdncic6IHRydWUsXG4gIC8vIFxcZXh0cmFAIGFsc28gdGVzdHMgZm9yIHRoZSBmb2xsb3dpbmc6XG4gICckJzogdHJ1ZSxcbiAgLy8gXFxleHRyYXBAIGNoZWNrcyBmb3IgdGhlIGZvbGxvd2luZzpcbiAgJzsnOiB0cnVlLFxuICAnLic6IHRydWUsXG4gICcsJzogdHJ1ZVxufTtcbmRlZmluZU1hY3JvKFwiXFxcXGRvdHNvXCIsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIHZhciBuZXh0ID0gY29udGV4dC5mdXR1cmUoKS50ZXh0O1xuXG4gIGlmIChuZXh0IGluIHNwYWNlQWZ0ZXJEb3RzKSB7XG4gICAgcmV0dXJuIFwiXFxcXGxkb3RzXFxcXCxcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJcXFxcbGRvdHNcIjtcbiAgfVxufSk7XG5kZWZpbmVNYWNybyhcIlxcXFxkb3RzY1wiLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICB2YXIgbmV4dCA9IGNvbnRleHQuZnV0dXJlKCkudGV4dDsgLy8gXFxkb3RzYyB1c2VzIFxcZXh0cmFAIGJ1dCBub3QgXFxleHRyYXBALCBpbnN0ZWFkIHNwZWNpYWxseSBjaGVja2luZyBmb3JcbiAgLy8gJzsnIGFuZCAnLicsIGJ1dCBkb2Vzbid0IGNoZWNrIGZvciAnLCcuXG5cbiAgaWYgKG5leHQgaW4gc3BhY2VBZnRlckRvdHMgJiYgbmV4dCAhPT0gJywnKSB7XG4gICAgcmV0dXJuIFwiXFxcXGxkb3RzXFxcXCxcIjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gXCJcXFxcbGRvdHNcIjtcbiAgfVxufSk7XG5kZWZpbmVNYWNybyhcIlxcXFxjZG90c1wiLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICB2YXIgbmV4dCA9IGNvbnRleHQuZnV0dXJlKCkudGV4dDtcblxuICBpZiAobmV4dCBpbiBzcGFjZUFmdGVyRG90cykge1xuICAgIHJldHVybiBcIlxcXFxAY2RvdHNcXFxcLFwiO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIlxcXFxAY2RvdHNcIjtcbiAgfVxufSk7XG5kZWZpbmVNYWNybyhcIlxcXFxkb3RzYlwiLCBcIlxcXFxjZG90c1wiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGRvdHNtXCIsIFwiXFxcXGNkb3RzXCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZG90c2lcIiwgXCJcXFxcIVxcXFxjZG90c1wiKTsgLy8gYW1zbWF0aCBkb2Vzbid0IGFjdHVhbGx5IGRlZmluZSBcXGRvdHN4LCBidXQgXFxkb3RzIGZvbGxvd2VkIGJ5IGEgbWFjcm9cbi8vIHN0YXJ0aW5nIHdpdGggXFxET1RTWCBpbXBsaWVzIFxcZG90c28sIGFuZCB0aGVuIFxcZXh0cmFAIGRldGVjdHMgdGhpcyBjYXNlXG4vLyBhbmQgZm9yY2VzIHRoZSBhZGRlZCBgXFwsYC5cblxuZGVmaW5lTWFjcm8oXCJcXFxcZG90c3hcIiwgXCJcXFxcbGRvdHNcXFxcLFwiKTsgLy8gXFxsZXRcXERPVFNJXFxyZWxheFxuLy8gXFxsZXRcXERPVFNCXFxyZWxheFxuLy8gXFxsZXRcXERPVFNYXFxyZWxheFxuXG5kZWZpbmVNYWNybyhcIlxcXFxET1RTSVwiLCBcIlxcXFxyZWxheFwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXERPVFNCXCIsIFwiXFxcXHJlbGF4XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcRE9UU1hcIiwgXCJcXFxccmVsYXhcIik7IC8vIFNwYWNpbmcsIGJhc2VkIG9uIGFtc21hdGguc3R5J3Mgb3ZlcnJpZGUgb2YgTGFUZVggZGVmYXVsdHNcbi8vIFxcRGVjbGFyZVJvYnVzdENvbW1hbmR7XFx0bXNwYWNlfVszXXslXG4vLyAgIFxcaWZtbW9kZVxcbXNraXAjMSMyXFxlbHNlXFxrZXJuIzEjM1xcZmlcXHJlbGF4fVxuXG5kZWZpbmVNYWNybyhcIlxcXFx0bXNwYWNlXCIsIFwiXFxcXFRleHRPck1hdGh7XFxcXGtlcm4jMSMzfXtcXFxcbXNraXAjMSMyfVxcXFxyZWxheFwiKTsgLy8gXFxyZW5ld2NvbW1hbmR7XFwsfXtcXHRtc3BhY2UrXFx0aGlubXVza2lwey4xNjY3ZW19fVxuLy8gVE9ETzogbWF0aCBtb2RlIHNob3VsZCB1c2UgXFx0aGlubXVza2lwXG5cbmRlZmluZU1hY3JvKFwiXFxcXCxcIiwgXCJcXFxcdG1zcGFjZSt7M211fXsuMTY2N2VtfVwiKTsgLy8gXFxsZXRcXHRoaW5zcGFjZVxcLFxuXG5kZWZpbmVNYWNybyhcIlxcXFx0aGluc3BhY2VcIiwgXCJcXFxcLFwiKTsgLy8gXFxkZWZcXD57XFxtc2tpcFxcbWVkbXVza2lwfVxuLy8gXFxyZW5ld2NvbW1hbmR7XFw6fXtcXHRtc3BhY2UrXFxtZWRtdXNraXB7LjIyMjJlbX19XG4vLyBUT0RPOiBcXD4gYW5kIG1hdGggbW9kZSBvZiBcXDogc2hvdWxkIHVzZSBcXG1lZG11c2tpcCA9IDRtdSBwbHVzIDJtdSBtaW51cyA0bXVcblxuZGVmaW5lTWFjcm8oXCJcXFxcPlwiLCBcIlxcXFxtc2tpcHs0bXV9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcOlwiLCBcIlxcXFx0bXNwYWNlK3s0bXV9ey4yMjIyZW19XCIpOyAvLyBcXGxldFxcbWVkc3BhY2VcXDpcblxuZGVmaW5lTWFjcm8oXCJcXFxcbWVkc3BhY2VcIiwgXCJcXFxcOlwiKTsgLy8gXFxyZW5ld2NvbW1hbmR7XFw7fXtcXHRtc3BhY2UrXFx0aGlja211c2tpcHsuMjc3N2VtfX1cbi8vIFRPRE86IG1hdGggbW9kZSBzaG91bGQgdXNlIFxcdGhpY2ttdXNraXAgPSA1bXUgcGx1cyA1bXVcblxuZGVmaW5lTWFjcm8oXCJcXFxcO1wiLCBcIlxcXFx0bXNwYWNlK3s1bXV9ey4yNzc3ZW19XCIpOyAvLyBcXGxldFxcdGhpY2tzcGFjZVxcO1xuXG5kZWZpbmVNYWNybyhcIlxcXFx0aGlja3NwYWNlXCIsIFwiXFxcXDtcIik7IC8vIFxccmVuZXdjb21tYW5ke1xcIX17XFx0bXNwYWNlLVxcdGhpbm11c2tpcHsuMTY2N2VtfX1cbi8vIFRPRE86IG1hdGggbW9kZSBzaG91bGQgdXNlIFxcdGhpbm11c2tpcFxuXG5kZWZpbmVNYWNybyhcIlxcXFwhXCIsIFwiXFxcXHRtc3BhY2UtezNtdX17LjE2NjdlbX1cIik7IC8vIFxcbGV0XFxuZWd0aGluc3BhY2VcXCFcblxuZGVmaW5lTWFjcm8oXCJcXFxcbmVndGhpbnNwYWNlXCIsIFwiXFxcXCFcIik7IC8vIFxcbmV3Y29tbWFuZHtcXG5lZ21lZHNwYWNlfXtcXHRtc3BhY2UtXFxtZWRtdXNraXB7LjIyMjJlbX19XG4vLyBUT0RPOiBtYXRoIG1vZGUgc2hvdWxkIHVzZSBcXG1lZG11c2tpcFxuXG5kZWZpbmVNYWNybyhcIlxcXFxuZWdtZWRzcGFjZVwiLCBcIlxcXFx0bXNwYWNlLXs0bXV9ey4yMjIyZW19XCIpOyAvLyBcXG5ld2NvbW1hbmR7XFxuZWd0aGlja3NwYWNlfXtcXHRtc3BhY2UtXFx0aGlja211c2tpcHsuMjc3N2VtfX1cbi8vIFRPRE86IG1hdGggbW9kZSBzaG91bGQgdXNlIFxcdGhpY2ttdXNraXBcblxuZGVmaW5lTWFjcm8oXCJcXFxcbmVndGhpY2tzcGFjZVwiLCBcIlxcXFx0bXNwYWNlLXs1bXV9ey4yNzdlbX1cIik7IC8vIFxcZGVmXFxlbnNwYWNle1xca2Vybi41ZW0gfVxuXG5kZWZpbmVNYWNybyhcIlxcXFxlbnNwYWNlXCIsIFwiXFxcXGtlcm4uNWVtIFwiKTsgLy8gXFxkZWZcXGVuc2tpcHtcXGhza2lwLjVlbVxccmVsYXh9XG5cbmRlZmluZU1hY3JvKFwiXFxcXGVuc2tpcFwiLCBcIlxcXFxoc2tpcC41ZW1cXFxccmVsYXhcIik7IC8vIFxcZGVmXFxxdWFke1xcaHNraXAxZW1cXHJlbGF4fVxuXG5kZWZpbmVNYWNybyhcIlxcXFxxdWFkXCIsIFwiXFxcXGhza2lwMWVtXFxcXHJlbGF4XCIpOyAvLyBcXGRlZlxccXF1YWR7XFxoc2tpcDJlbVxccmVsYXh9XG5cbmRlZmluZU1hY3JvKFwiXFxcXHFxdWFkXCIsIFwiXFxcXGhza2lwMmVtXFxcXHJlbGF4XCIpOyAvLyBcXHRhZ0BpbkBkaXNwbGF5IGZvcm0gb2YgXFx0YWdcblxuZGVmaW5lTWFjcm8oXCJcXFxcdGFnXCIsIFwiXFxcXEBpZnN0YXJcXFxcdGFnQGxpdGVyYWxcXFxcdGFnQHBhcmVuXCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcdGFnQHBhcmVuXCIsIFwiXFxcXHRhZ0BsaXRlcmFseyh7IzF9KX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFx0YWdAbGl0ZXJhbFwiLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICBpZiAoY29udGV4dC5tYWNyb3MuZ2V0KFwiXFxcXGRmQHRhZ1wiKSkge1xuICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIk11bHRpcGxlIFxcXFx0YWdcIik7XG4gIH1cblxuICByZXR1cm4gXCJcXFxcZ2RlZlxcXFxkZkB0YWd7XFxcXHRleHR7IzF9fVwiO1xufSk7IC8vIFxccmVuZXdjb21tYW5ke1xcYm1vZH17XFxub25zY3JpcHRcXG1za2lwLVxcbWVkbXVza2lwXFxta2VybjVtdVxcbWF0aGJpblxuLy8gICB7XFxvcGVyYXRvckBmb250IG1vZH1cXHBlbmFsdHk5MDBcbi8vICAgXFxta2VybjVtdVxcbm9uc2NyaXB0XFxtc2tpcC1cXG1lZG11c2tpcH1cbi8vIFxcbmV3Y29tbWFuZHtcXHBvZH1bMV17XFxhbGxvd2JyZWFrXG4vLyAgIFxcaWZAZGlzcGxheVxcbWtlcm4xOG11XFxlbHNlXFxta2VybjhtdVxcZmkoIzEpfVxuLy8gXFxyZW5ld2NvbW1hbmR7XFxwbW9kfVsxXXtcXHBvZHt7XFxvcGVyYXRvckBmb250IG1vZH1cXG1rZXJuNm11IzF9fVxuLy8gXFxuZXdjb21tYW5ke1xcbW9kfVsxXXtcXGFsbG93YnJlYWtcXGlmQGRpc3BsYXlcXG1rZXJuMThtdVxuLy8gICBcXGVsc2VcXG1rZXJuMTJtdVxcZml7XFxvcGVyYXRvckBmb250IG1vZH1cXCxcXCwjMX1cbi8vIFRPRE86IG1hdGggbW9kZSBzaG91bGQgdXNlIFxcbWVkbXVza2lwID0gNG11IHBsdXMgMm11IG1pbnVzIDRtdVxuXG5kZWZpbmVNYWNybyhcIlxcXFxibW9kXCIsIFwiXFxcXG1hdGhjaG9pY2V7XFxcXG1za2lwMW11fXtcXFxcbXNraXAxbXV9e1xcXFxtc2tpcDVtdX17XFxcXG1za2lwNW11fVwiICsgXCJcXFxcbWF0aGJpbntcXFxccm0gbW9kfVwiICsgXCJcXFxcbWF0aGNob2ljZXtcXFxcbXNraXAxbXV9e1xcXFxtc2tpcDFtdX17XFxcXG1za2lwNW11fXtcXFxcbXNraXA1bXV9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccG9kXCIsIFwiXFxcXGFsbG93YnJlYWtcIiArIFwiXFxcXG1hdGhjaG9pY2V7XFxcXG1rZXJuMThtdX17XFxcXG1rZXJuOG11fXtcXFxcbWtlcm44bXV9e1xcXFxta2VybjhtdX0oIzEpXCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccG1vZFwiLCBcIlxcXFxwb2R7e1xcXFxybSBtb2R9XFxcXG1rZXJuNm11IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbW9kXCIsIFwiXFxcXGFsbG93YnJlYWtcIiArIFwiXFxcXG1hdGhjaG9pY2V7XFxcXG1rZXJuMThtdX17XFxcXG1rZXJuMTJtdX17XFxcXG1rZXJuMTJtdX17XFxcXG1rZXJuMTJtdX1cIiArIFwie1xcXFxybSBtb2R9XFxcXCxcXFxcLCMxXCIpOyAvLyBcXHBtYiAgICAtLSAgIEEgc2ltdWxhdGlvbiBvZiBib2xkLlxuLy8gVGhlIHZlcnNpb24gaW4gYW1ic3kuc3R5IHdvcmtzIGJ5IHR5cGVzZXR0aW5nIHRocmVlIGNvcGllcyBvZiB0aGUgYXJndW1lbnRcbi8vIHdpdGggc21hbGwgb2Zmc2V0cy4gV2UgdXNlIHR3byBjb3BpZXMuIFdlIG9taXQgdGhlIHZlcnRpY2FsIG9mZnNldCBiZWNhdXNlXG4vLyBvZiByZW5kZXJpbmcgcHJvYmxlbXMgdGhhdCBtYWtlVkxpc3QgZW5jb3VudGVycyBpbiBTYWZhcmkuXG5cbmRlZmluZU1hY3JvKFwiXFxcXHBtYlwiLCBcIlxcXFxodG1sQG1hdGhtbHtcIiArIFwiXFxcXEBiaW5yZWx7IzF9e1xcXFxtYXRocmxhcHsjMX1cXFxca2VybjAuNXB4IzF9fVwiICsgXCJ7XFxcXG1hdGhiZnsjMX19XCIpOyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBMYVRlWCBzb3VyY2UyZVxuLy8gXFxleHBhbmRhZnRlclxcbGV0XFxleHBhbmRhZnRlclxcQG5vcm1hbGNyXG4vLyAgICAgXFxjc25hbWVcXGV4cGFuZGFmdGVyXFxAZ29iYmxlXFxzdHJpbmdcXFxcIFxcZW5kY3NuYW1lXG4vLyBcXERlY2xhcmVSb2J1c3RDb21tYW5kXFxuZXdsaW5le1xcQG5vcm1hbGNyXFxyZWxheH1cblxuZGVmaW5lTWFjcm8oXCJcXFxcbmV3bGluZVwiLCBcIlxcXFxcXFxcXFxcXHJlbGF4XCIpOyAvLyBcXGRlZlxcVGVYe1RcXGtlcm4tLjE2NjdlbVxcbG93ZXIuNWV4XFxoYm94e0V9XFxrZXJuLS4xMjVlbVhcXEB9XG4vLyBUT0RPOiBEb2Vzbid0IG5vcm1hbGx5IHdvcmsgaW4gbWF0aCBtb2RlIGJlY2F1c2UgXFxAIGZhaWxzLiAgS2FUZVggZG9lc24ndFxuLy8gc3VwcG9ydCBcXEAgeWV0LCBzbyB0aGF0J3Mgb21pdHRlZCwgYW5kIHdlIGFkZCBcXHRleHQgc28gdGhhdCB0aGUgcmVzdWx0XG4vLyBkb2Vzbid0IGxvb2sgZnVubnkgaW4gbWF0aCBtb2RlLlxuXG5kZWZpbmVNYWNybyhcIlxcXFxUZVhcIiwgXCJcXFxcdGV4dHJte1xcXFxodG1sQG1hdGhtbHtcIiArIFwiVFxcXFxrZXJuLS4xNjY3ZW1cXFxccmFpc2Vib3h7LS41ZXh9e0V9XFxcXGtlcm4tLjEyNWVtWFwiICsgXCJ9e1RlWH19XCIpOyAvLyBcXERlY2xhcmVSb2J1c3RDb21tYW5ke1xcTGFUZVh9e0xcXGtlcm4tLjM2ZW0lXG4vLyAgICAgICAgIHtcXHNib3hcXHpAIFQlXG4vLyAgICAgICAgICBcXHZib3ggdG9cXGh0XFx6QHtcXGhib3h7XFxjaGVja0BtYXRoZm9udHNcbi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcZm9udHNpemVcXHNmQHNpemVcXHpAXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG1hdGhAZm9udHNmYWxzZVxcc2VsZWN0Zm9udFxuLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQX0lXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICBcXHZzc30lXG4vLyAgICAgICAgIH0lXG4vLyAgICAgICAgIFxca2Vybi0uMTVlbSVcbi8vICAgICAgICAgXFxUZVh9XG4vLyBUaGlzIGNvZGUgYWxpZ25zIHRoZSB0b3Agb2YgdGhlIEEgd2l0aCB0aGUgVCAoZnJvbSB0aGUgcGVyc3BlY3RpdmUgb2YgVGVYJ3Ncbi8vIGJveGVzLCB0aG91Z2ggdmlzdWFsbHkgdGhlIEEgYXBwZWFycyB0byBleHRlbmQgYWJvdmUgc2xpZ2h0bHkpLlxuLy8gV2UgY29tcHV0ZSB0aGUgY29ycmVzcG9uZGluZyBcXHJhaXNlYm94IHdoZW4gQSBpcyByZW5kZXJlZCBpbiBcXG5vcm1hbHNpemVcbi8vIFxcc2NyaXB0c3R5bGUsIHdoaWNoIGhhcyBhIHNjYWxlIGZhY3RvciBvZiAwLjcgKHNlZSBPcHRpb25zLmpzKS5cblxudmFyIGxhdGV4UmFpc2VBID0gZm9udE1ldHJpY3NEYXRhW1wiTWFpbi1SZWd1bGFyXCJdW1wiVFwiLmNoYXJDb2RlQXQoMCldWzFdIC0gMC43ICogZm9udE1ldHJpY3NEYXRhW1wiTWFpbi1SZWd1bGFyXCJdW1wiQVwiLmNoYXJDb2RlQXQoMCldWzFdICsgXCJlbVwiO1xuZGVmaW5lTWFjcm8oXCJcXFxcTGFUZVhcIiwgXCJcXFxcdGV4dHJte1xcXFxodG1sQG1hdGhtbHtcIiArIChcIkxcXFxca2Vybi0uMzZlbVxcXFxyYWlzZWJveHtcIiArIGxhdGV4UmFpc2VBICsgXCJ9e1xcXFxzY3JpcHRzdHlsZSBBfVwiKSArIFwiXFxcXGtlcm4tLjE1ZW1cXFxcVGVYfXtMYVRlWH19XCIpOyAvLyBOZXcgS2FUZVggbG9nbyBiYXNlZCBvbiB0d2Vha2luZyBMYVRlWCBsb2dvXG5cbmRlZmluZU1hY3JvKFwiXFxcXEthVGVYXCIsIFwiXFxcXHRleHRybXtcXFxcaHRtbEBtYXRobWx7XCIgKyAoXCJLXFxcXGtlcm4tLjE3ZW1cXFxccmFpc2Vib3h7XCIgKyBsYXRleFJhaXNlQSArIFwifXtcXFxcc2NyaXB0c3R5bGUgQX1cIikgKyBcIlxcXFxrZXJuLS4xNWVtXFxcXFRlWH17S2FUZVh9fVwiKTsgLy8gXFxEZWNsYXJlUm9idXN0Q29tbWFuZFxcaHNwYWNle1xcQGlmc3RhclxcQGhzcGFjZXJcXEBoc3BhY2V9XG4vLyBcXGRlZlxcQGhzcGFjZSMxe1xcaHNraXAgICMxXFxyZWxheH1cbi8vIFxcZGVmXFxAaHNwYWNlciMxe1xcdnJ1bGUgXFxAd2lkdGhcXHpAXFxub2JyZWFrXG4vLyAgICAgICAgICAgICAgICAgXFxoc2tpcCAjMVxcaHNraXAgXFx6QHNraXB9XG5cbmRlZmluZU1hY3JvKFwiXFxcXGhzcGFjZVwiLCBcIlxcXFxAaWZzdGFyXFxcXEBoc3BhY2VyXFxcXEBoc3BhY2VcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxAaHNwYWNlXCIsIFwiXFxcXGhza2lwICMxXFxcXHJlbGF4XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcQGhzcGFjZXJcIiwgXCJcXFxccnVsZXswcHR9ezBwdH1cXFxcaHNraXAgIzFcXFxccmVsYXhcIik7IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIG1hdGh0b29scy5zdHlcbi8vXFxwcm92aWRlY29tbWFuZFxcb3JkaW5hcnljb2xvbns6fVxuXG5kZWZpbmVNYWNybyhcIlxcXFxvcmRpbmFyeWNvbG9uXCIsIFwiOlwiKTsgLy9cXGRlZlxcdmNlbnRjb2xvbntcXG1hdGhyZWx7XFxtYXRob3BcXG9yZGluYXJ5Y29sb259fVxuLy9UT0RPKGVkZW1haW5lKTogTm90IHlldCBjZW50ZXJlZC4gRml4IHZpYSBcXHJhaXNlYm94IG9yICM3MjZcblxuZGVmaW5lTWFjcm8oXCJcXFxcdmNlbnRjb2xvblwiLCBcIlxcXFxtYXRocmVse1xcXFxtYXRob3BcXFxcb3JkaW5hcnljb2xvbn1cIik7IC8vIFxccHJvdmlkZWNvbW1hbmQqXFxkYmxjb2xvbntcXHZjZW50Y29sb25cXG1hdGhyZWx7XFxta2Vybi0uOW11fVxcdmNlbnRjb2xvbn1cblxuZGVmaW5lTWFjcm8oXCJcXFxcZGJsY29sb25cIiwgXCJcXFxcaHRtbEBtYXRobWx7XCIgKyBcIlxcXFxtYXRocmVse1xcXFx2Y2VudGNvbG9uXFxcXG1hdGhyZWx7XFxcXG1rZXJuLS45bXV9XFxcXHZjZW50Y29sb259fVwiICsgXCJ7XFxcXG1hdGhvcHtcXFxcY2hhclxcXCIyMjM3fX1cIik7IC8vIFxccHJvdmlkZWNvbW1hbmQqXFxjb2xvbmVxcXtcXHZjZW50Y29sb25cXG1hdGhyZWx7XFxta2Vybi0xLjJtdX09fVxuXG5kZWZpbmVNYWNybyhcIlxcXFxjb2xvbmVxcVwiLCBcIlxcXFxodG1sQG1hdGhtbHtcIiArIFwiXFxcXG1hdGhyZWx7XFxcXHZjZW50Y29sb25cXFxcbWF0aHJlbHtcXFxcbWtlcm4tMS4ybXV9PX19XCIgKyBcIntcXFxcbWF0aG9we1xcXFxjaGFyXFxcIjIyNTR9fVwiKTsgLy8g4omUXG4vLyBcXHByb3ZpZGVjb21tYW5kKlxcQ29sb25lcXF7XFxkYmxjb2xvblxcbWF0aHJlbHtcXG1rZXJuLTEuMm11fT19XG5cbmRlZmluZU1hY3JvKFwiXFxcXENvbG9uZXFxXCIsIFwiXFxcXGh0bWxAbWF0aG1se1wiICsgXCJcXFxcbWF0aHJlbHtcXFxcZGJsY29sb25cXFxcbWF0aHJlbHtcXFxcbWtlcm4tMS4ybXV9PX19XCIgKyBcIntcXFxcbWF0aG9we1xcXFxjaGFyXFxcIjIyMzdcXFxcY2hhclxcXCIzZH19XCIpOyAvLyBcXHByb3ZpZGVjb21tYW5kKlxcY29sb25lcXtcXHZjZW50Y29sb25cXG1hdGhyZWx7XFxta2Vybi0xLjJtdX1cXG1hdGhyZWx7LX19XG5cbmRlZmluZU1hY3JvKFwiXFxcXGNvbG9uZXFcIiwgXCJcXFxcaHRtbEBtYXRobWx7XCIgKyBcIlxcXFxtYXRocmVse1xcXFx2Y2VudGNvbG9uXFxcXG1hdGhyZWx7XFxcXG1rZXJuLTEuMm11fVxcXFxtYXRocmVsey19fX1cIiArIFwie1xcXFxtYXRob3B7XFxcXGNoYXJcXFwiM2FcXFxcY2hhclxcXCIyMjEyfX1cIik7IC8vIFxccHJvdmlkZWNvbW1hbmQqXFxDb2xvbmVxe1xcZGJsY29sb25cXG1hdGhyZWx7XFxta2Vybi0xLjJtdX1cXG1hdGhyZWx7LX19XG5cbmRlZmluZU1hY3JvKFwiXFxcXENvbG9uZXFcIiwgXCJcXFxcaHRtbEBtYXRobWx7XCIgKyBcIlxcXFxtYXRocmVse1xcXFxkYmxjb2xvblxcXFxtYXRocmVse1xcXFxta2Vybi0xLjJtdX1cXFxcbWF0aHJlbHstfX19XCIgKyBcIntcXFxcbWF0aG9we1xcXFxjaGFyXFxcIjIyMzdcXFxcY2hhclxcXCIyMjEyfX1cIik7IC8vIFxccHJvdmlkZWNvbW1hbmQqXFxlcXFjb2xvbns9XFxtYXRocmVse1xcbWtlcm4tMS4ybXV9XFx2Y2VudGNvbG9ufVxuXG5kZWZpbmVNYWNybyhcIlxcXFxlcXFjb2xvblwiLCBcIlxcXFxodG1sQG1hdGhtbHtcIiArIFwiXFxcXG1hdGhyZWx7PVxcXFxtYXRocmVse1xcXFxta2Vybi0xLjJtdX1cXFxcdmNlbnRjb2xvbn19XCIgKyBcIntcXFxcbWF0aG9we1xcXFxjaGFyXFxcIjIyNTV9fVwiKTsgLy8g4omVXG4vLyBcXHByb3ZpZGVjb21tYW5kKlxcRXFxY29sb257PVxcbWF0aHJlbHtcXG1rZXJuLTEuMm11fVxcZGJsY29sb259XG5cbmRlZmluZU1hY3JvKFwiXFxcXEVxcWNvbG9uXCIsIFwiXFxcXGh0bWxAbWF0aG1se1wiICsgXCJcXFxcbWF0aHJlbHs9XFxcXG1hdGhyZWx7XFxcXG1rZXJuLTEuMm11fVxcXFxkYmxjb2xvbn19XCIgKyBcIntcXFxcbWF0aG9we1xcXFxjaGFyXFxcIjNkXFxcXGNoYXJcXFwiMjIzN319XCIpOyAvLyBcXHByb3ZpZGVjb21tYW5kKlxcZXFjb2xvbntcXG1hdGhyZWx7LX1cXG1hdGhyZWx7XFxta2Vybi0xLjJtdX1cXHZjZW50Y29sb259XG5cbmRlZmluZU1hY3JvKFwiXFxcXGVxY29sb25cIiwgXCJcXFxcaHRtbEBtYXRobWx7XCIgKyBcIlxcXFxtYXRocmVse1xcXFxtYXRocmVsey19XFxcXG1hdGhyZWx7XFxcXG1rZXJuLTEuMm11fVxcXFx2Y2VudGNvbG9ufX1cIiArIFwie1xcXFxtYXRob3B7XFxcXGNoYXJcXFwiMjIzOX19XCIpOyAvLyBcXHByb3ZpZGVjb21tYW5kKlxcRXFjb2xvbntcXG1hdGhyZWx7LX1cXG1hdGhyZWx7XFxta2Vybi0xLjJtdX1cXGRibGNvbG9ufVxuXG5kZWZpbmVNYWNybyhcIlxcXFxFcWNvbG9uXCIsIFwiXFxcXGh0bWxAbWF0aG1se1wiICsgXCJcXFxcbWF0aHJlbHtcXFxcbWF0aHJlbHstfVxcXFxtYXRocmVse1xcXFxta2Vybi0xLjJtdX1cXFxcZGJsY29sb259fVwiICsgXCJ7XFxcXG1hdGhvcHtcXFxcY2hhclxcXCIyMjEyXFxcXGNoYXJcXFwiMjIzN319XCIpOyAvLyBcXHByb3ZpZGVjb21tYW5kKlxcY29sb25hcHByb3h7XFx2Y2VudGNvbG9uXFxtYXRocmVse1xcbWtlcm4tMS4ybXV9XFxhcHByb3h9XG5cbmRlZmluZU1hY3JvKFwiXFxcXGNvbG9uYXBwcm94XCIsIFwiXFxcXGh0bWxAbWF0aG1se1wiICsgXCJcXFxcbWF0aHJlbHtcXFxcdmNlbnRjb2xvblxcXFxtYXRocmVse1xcXFxta2Vybi0xLjJtdX1cXFxcYXBwcm94fX1cIiArIFwie1xcXFxtYXRob3B7XFxcXGNoYXJcXFwiM2FcXFxcY2hhclxcXCIyMjQ4fX1cIik7IC8vIFxccHJvdmlkZWNvbW1hbmQqXFxDb2xvbmFwcHJveHtcXGRibGNvbG9uXFxtYXRocmVse1xcbWtlcm4tMS4ybXV9XFxhcHByb3h9XG5cbmRlZmluZU1hY3JvKFwiXFxcXENvbG9uYXBwcm94XCIsIFwiXFxcXGh0bWxAbWF0aG1se1wiICsgXCJcXFxcbWF0aHJlbHtcXFxcZGJsY29sb25cXFxcbWF0aHJlbHtcXFxcbWtlcm4tMS4ybXV9XFxcXGFwcHJveH19XCIgKyBcIntcXFxcbWF0aG9we1xcXFxjaGFyXFxcIjIyMzdcXFxcY2hhclxcXCIyMjQ4fX1cIik7IC8vIFxccHJvdmlkZWNvbW1hbmQqXFxjb2xvbnNpbXtcXHZjZW50Y29sb25cXG1hdGhyZWx7XFxta2Vybi0xLjJtdX1cXHNpbX1cblxuZGVmaW5lTWFjcm8oXCJcXFxcY29sb25zaW1cIiwgXCJcXFxcaHRtbEBtYXRobWx7XCIgKyBcIlxcXFxtYXRocmVse1xcXFx2Y2VudGNvbG9uXFxcXG1hdGhyZWx7XFxcXG1rZXJuLTEuMm11fVxcXFxzaW19fVwiICsgXCJ7XFxcXG1hdGhvcHtcXFxcY2hhclxcXCIzYVxcXFxjaGFyXFxcIjIyM2N9fVwiKTsgLy8gXFxwcm92aWRlY29tbWFuZCpcXENvbG9uc2lte1xcZGJsY29sb25cXG1hdGhyZWx7XFxta2Vybi0xLjJtdX1cXHNpbX1cblxuZGVmaW5lTWFjcm8oXCJcXFxcQ29sb25zaW1cIiwgXCJcXFxcaHRtbEBtYXRobWx7XCIgKyBcIlxcXFxtYXRocmVse1xcXFxkYmxjb2xvblxcXFxtYXRocmVse1xcXFxta2Vybi0xLjJtdX1cXFxcc2ltfX1cIiArIFwie1xcXFxtYXRob3B7XFxcXGNoYXJcXFwiMjIzN1xcXFxjaGFyXFxcIjIyM2N9fVwiKTsgLy8gU29tZSBVbmljb2RlIGNoYXJhY3RlcnMgYXJlIGltcGxlbWVudGVkIHdpdGggbWFjcm9zIHRvIG1hdGh0b29scyBmdW5jdGlvbnMuXG5cbmRlZmluZU1hY3JvKFwiXFx1MjIzN1wiLCBcIlxcXFxkYmxjb2xvblwiKTsgLy8gOjpcblxuZGVmaW5lTWFjcm8oXCJcXHUyMjM5XCIsIFwiXFxcXGVxY29sb25cIik7IC8vIC06XG5cbmRlZmluZU1hY3JvKFwiXFx1MjI1NFwiLCBcIlxcXFxjb2xvbmVxcVwiKTsgLy8gOj1cblxuZGVmaW5lTWFjcm8oXCJcXHUyMjU1XCIsIFwiXFxcXGVxcWNvbG9uXCIpOyAvLyA9OlxuXG5kZWZpbmVNYWNybyhcIlxcdTJBNzRcIiwgXCJcXFxcQ29sb25lcXFcIik7IC8vIDo6PVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gY29sb25lcXVhbHMuc3R5XG4vLyBBbHRlcm5hdGUgbmFtZXMgZm9yIG1hdGh0b29scydzIG1hY3JvczpcblxuZGVmaW5lTWFjcm8oXCJcXFxccmF0aW9cIiwgXCJcXFxcdmNlbnRjb2xvblwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGNvbG9uY29sb25cIiwgXCJcXFxcZGJsY29sb25cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxjb2xvbmVxdWFsc1wiLCBcIlxcXFxjb2xvbmVxcVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGNvbG9uY29sb25lcXVhbHNcIiwgXCJcXFxcQ29sb25lcXFcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxlcXVhbHNjb2xvblwiLCBcIlxcXFxlcXFjb2xvblwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGVxdWFsc2NvbG9uY29sb25cIiwgXCJcXFxcRXFxY29sb25cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxjb2xvbm1pbnVzXCIsIFwiXFxcXGNvbG9uZXFcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxjb2xvbmNvbG9ubWludXNcIiwgXCJcXFxcQ29sb25lcVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXG1pbnVzY29sb25cIiwgXCJcXFxcZXFjb2xvblwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXG1pbnVzY29sb25jb2xvblwiLCBcIlxcXFxFcWNvbG9uXCIpOyAvLyBcXGNvbG9uYXBwcm94IG5hbWUgaXMgc2FtZSBpbiBtYXRodG9vbHMgYW5kIGNvbG9uZXF1YWxzLlxuXG5kZWZpbmVNYWNybyhcIlxcXFxjb2xvbmNvbG9uYXBwcm94XCIsIFwiXFxcXENvbG9uYXBwcm94XCIpOyAvLyBcXGNvbG9uc2ltIG5hbWUgaXMgc2FtZSBpbiBtYXRodG9vbHMgYW5kIGNvbG9uZXF1YWxzLlxuXG5kZWZpbmVNYWNybyhcIlxcXFxjb2xvbmNvbG9uc2ltXCIsIFwiXFxcXENvbG9uc2ltXCIpOyAvLyBBZGRpdGlvbmFsIG1hY3JvcywgaW1wbGVtZW50ZWQgYnkgYW5hbG9neSB3aXRoIG1hdGh0b29scyBkZWZpbml0aW9uczpcblxuZGVmaW5lTWFjcm8oXCJcXFxcc2ltY29sb25cIiwgXCJcXFxcbWF0aHJlbHtcXFxcc2ltXFxcXG1hdGhyZWx7XFxcXG1rZXJuLTEuMm11fVxcXFx2Y2VudGNvbG9ufVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHNpbWNvbG9uY29sb25cIiwgXCJcXFxcbWF0aHJlbHtcXFxcc2ltXFxcXG1hdGhyZWx7XFxcXG1rZXJuLTEuMm11fVxcXFxkYmxjb2xvbn1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxhcHByb3hjb2xvblwiLCBcIlxcXFxtYXRocmVse1xcXFxhcHByb3hcXFxcbWF0aHJlbHtcXFxcbWtlcm4tMS4ybXV9XFxcXHZjZW50Y29sb259XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcYXBwcm94Y29sb25jb2xvblwiLCBcIlxcXFxtYXRocmVse1xcXFxhcHByb3hcXFxcbWF0aHJlbHtcXFxcbWtlcm4tMS4ybXV9XFxcXGRibGNvbG9ufVwiKTsgLy8gUHJlc2VudCBpbiBuZXd0eG1hdGgsIHB4Zm9udHMgYW5kIHR4Zm9udHNcblxuZGVmaW5lTWFjcm8oXCJcXFxcbm90bmlcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXG5vdFxcXFxuaX17XFxcXG1hdGhyZWx7XFxcXGNoYXJgXFx1MjIwQ319XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbGltc3VwXCIsIFwiXFxcXERPVFNCXFxcXG9wZXJhdG9ybmFtZSp7bGltXFxcXCxzdXB9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbGltaW5mXCIsIFwiXFxcXERPVFNCXFxcXG9wZXJhdG9ybmFtZSp7bGltXFxcXCxpbmZ9XCIpOyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGcm9tIGFtc29wbi5zdHlcblxuZGVmaW5lTWFjcm8oXCJcXFxcaW5qbGltXCIsIFwiXFxcXERPVFNCXFxcXG9wZXJhdG9ybmFtZSp7aW5qXFxcXCxsaW19XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccHJvamxpbVwiLCBcIlxcXFxET1RTQlxcXFxvcGVyYXRvcm5hbWUqe3Byb2pcXFxcLGxpbX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFx2YXJsaW1zdXBcIiwgXCJcXFxcRE9UU0JcXFxcb3BlcmF0b3JuYW1lKntcXFxcb3ZlcmxpbmV7bGltfX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFx2YXJsaW1pbmZcIiwgXCJcXFxcRE9UU0JcXFxcb3BlcmF0b3JuYW1lKntcXFxcdW5kZXJsaW5le2xpbX19XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcdmFyaW5qbGltXCIsIFwiXFxcXERPVFNCXFxcXG9wZXJhdG9ybmFtZSp7XFxcXHVuZGVycmlnaHRhcnJvd3tsaW19fVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHZhcnByb2psaW1cIiwgXCJcXFxcRE9UU0JcXFxcb3BlcmF0b3JuYW1lKntcXFxcdW5kZXJsZWZ0YXJyb3d7bGltfX1cIik7IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIE1hdGhNTCBhbHRlcm5hdGVzIGZvciBLYVRlWCBnbHlwaHMgaW4gdGhlIFVuaWNvZGUgcHJpdmF0ZSBhcmVhXG5cbmRlZmluZU1hY3JvKFwiXFxcXGd2ZXJ0bmVxcVwiLCBcIlxcXFxodG1sQG1hdGhtbHtcXFxcQGd2ZXJ0bmVxcX17XFx1MjI2OX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxsdmVydG5lcXFcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXEBsdmVydG5lcXF9e1xcdTIyNjh9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbmdlcXFcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXEBuZ2VxcX17XFx1MjI3MX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxuZ2Vxc2xhbnRcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXEBuZ2Vxc2xhbnR9e1xcdTIyNzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbmxlcXFcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXEBubGVxcX17XFx1MjI3MH1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxubGVxc2xhbnRcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXEBubGVxc2xhbnR9e1xcdTIyNzB9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbnNob3J0bWlkXCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxAbnNob3J0bWlkfXviiKR9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbnNob3J0cGFyYWxsZWxcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXEBuc2hvcnRwYXJhbGxlbH174oimfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXG5zdWJzZXRlcXFcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXEBuc3Vic2V0ZXFxfXtcXHUyMjg4fVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXG5zdXBzZXRlcXFcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXEBuc3Vwc2V0ZXFxfXtcXHUyMjg5fVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHZhcnN1YnNldG5lcVwiLCBcIlxcXFxodG1sQG1hdGhtbHtcXFxcQHZhcnN1YnNldG5lcX174oqKfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHZhcnN1YnNldG5lcXFcIiwgXCJcXFxcaHRtbEBtYXRobWx7XFxcXEB2YXJzdWJzZXRuZXFxfXviq4t9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcdmFyc3Vwc2V0bmVxXCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxAdmFyc3Vwc2V0bmVxfXviiot9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcdmFyc3Vwc2V0bmVxcVwiLCBcIlxcXFxodG1sQG1hdGhtbHtcXFxcQHZhcnN1cHNldG5lcXF9e+KrjH1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxpbWF0aFwiLCBcIlxcXFxodG1sQG1hdGhtbHtcXFxcQGltYXRofXtcXHUwMTMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGptYXRoXCIsIFwiXFxcXGh0bWxAbWF0aG1se1xcXFxAam1hdGh9e1xcdTAyMzd9XCIpOyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBzdG1hcnlyZCBhbmQgc2VtYW50aWNcbi8vIFRoZSBzdG1hcnlyZCBhbmQgc2VtYW50aWMgcGFja2FnZXMgcmVuZGVyIHRoZSBuZXh0IGZvdXIgaXRlbXMgYnkgY2FsbGluZyBhXG4vLyBnbHlwaC4gVGhvc2UgZ2x5cGhzIGRvIG5vdCBleGlzdCBpbiB0aGUgS2FUZVggZm9udHMuIEhlbmNlIHRoZSBtYWNyb3MuXG5cbmRlZmluZU1hY3JvKFwiXFxcXGxsYnJhY2tldFwiLCBcIlxcXFxodG1sQG1hdGhtbHtcIiArIFwiXFxcXG1hdGhvcGVue1tcXFxcbWtlcm4tMy4ybXVbfX1cIiArIFwie1xcXFxtYXRob3BlbntcXFxcY2hhcmBcXHUyN0U2fX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxycmJyYWNrZXRcIiwgXCJcXFxcaHRtbEBtYXRobWx7XCIgKyBcIlxcXFxtYXRoY2xvc2V7XVxcXFxta2Vybi0zLjJtdV19fVwiICsgXCJ7XFxcXG1hdGhjbG9zZXtcXFxcY2hhcmBcXHUyN0U3fX1cIik7XG5kZWZpbmVNYWNybyhcIlxcdTI3RTZcIiwgXCJcXFxcbGxicmFja2V0XCIpOyAvLyBibGFja2JvYXJkIGJvbGQgW1xuXG5kZWZpbmVNYWNybyhcIlxcdTI3RTdcIiwgXCJcXFxccnJicmFja2V0XCIpOyAvLyBibGFja2JvYXJkIGJvbGQgXVxuXG5kZWZpbmVNYWNybyhcIlxcXFxsQnJhY2VcIiwgXCJcXFxcaHRtbEBtYXRobWx7XCIgKyBcIlxcXFxtYXRob3BlbntcXFxce1xcXFxta2Vybi0zLjJtdVt9fVwiICsgXCJ7XFxcXG1hdGhvcGVue1xcXFxjaGFyYFxcdTI5ODN9fVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHJCcmFjZVwiLCBcIlxcXFxodG1sQG1hdGhtbHtcIiArIFwiXFxcXG1hdGhjbG9zZXtdXFxcXG1rZXJuLTMuMm11XFxcXH19fVwiICsgXCJ7XFxcXG1hdGhjbG9zZXtcXFxcY2hhcmBcXHUyOTg0fX1cIik7XG5kZWZpbmVNYWNybyhcIlxcdTI5ODNcIiwgXCJcXFxcbEJyYWNlXCIpOyAvLyBibGFja2JvYXJkIGJvbGQge1xuXG5kZWZpbmVNYWNybyhcIlxcdTI5ODRcIiwgXCJcXFxcckJyYWNlXCIpOyAvLyBibGFja2JvYXJkIGJvbGQgfVxuLy8gVE9ETzogQ3JlYXRlIHZhcmlhYmxlIHNpemVkIHZlcnNpb25zIG9mIHRoZSBsYXN0IHR3byBpdGVtcy4gSSBiZWxpZXZlIHRoYXRcbi8vIHdpbGwgcmVxdWlyZSBuZXcgZm9udCBnbHlwaHMuXG4vLyBUaGUgc3RtYXJ5cmQgZnVuY3Rpb24gYFxcbWludXNvYCBwcm92aWRlcyBhIFwiUGxpbXNvbGxcIiBzeW1ib2wgdGhhdFxuLy8gc3VwZXJpbXBvc2VzIHRoZSBjaGFyYWN0ZXJzIFxcY2lyYyBhbmQgXFxtYXRobWludXMuIFVzZWQgaW4gY2hlbWlzdHJ5LlxuXG5kZWZpbmVNYWNybyhcIlxcXFxtaW51c29cIiwgXCJcXFxcbWF0aGJpbntcXFxcaHRtbEBtYXRobWx7XCIgKyBcIntcXFxcbWF0aHJsYXB7XFxcXG1hdGhjaG9pY2V7XFxcXGtlcm57MC4xNDVlbX19e1xcXFxrZXJuezAuMTQ1ZW19fVwiICsgXCJ7XFxcXGtlcm57MC4xMDE1ZW19fXtcXFxca2VybnswLjA3MjVlbX19XFxcXGNpcmN9ey19fX1cIiArIFwie1xcXFxjaGFyYOKmtX19XCIpO1xuZGVmaW5lTWFjcm8oXCLiprVcIiwgXCJcXFxcbWludXNvXCIpOyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyB0ZXh2Yy5zdHlcbi8vIFRoZSB0ZXh2YyBwYWNrYWdlIGNvbnRhaW5zIG1hY3JvcyBhdmFpbGFibGUgaW4gbWVkaWF3aWtpIHBhZ2VzLlxuLy8gV2Ugb21pdCB0aGUgZnVuY3Rpb25zIGRlcHJlY2F0ZWQgYXRcbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hlbHA6RGlzcGxheWluZ19hX2Zvcm11bGEjRGVwcmVjYXRlZF9zeW50YXhcbi8vIFdlIGFsc28gb21pdCB0ZXh2YydzIFxcTywgd2hpY2ggY29uZmxpY3RzIHdpdGggXFx0ZXh0e1xcT31cblxuZGVmaW5lTWFjcm8oXCJcXFxcZGFyclwiLCBcIlxcXFxkb3duYXJyb3dcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxkQXJyXCIsIFwiXFxcXERvd25hcnJvd1wiKTtcbmRlZmluZU1hY3JvKFwiXFxcXERhcnJcIiwgXCJcXFxcRG93bmFycm93XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbGFuZ1wiLCBcIlxcXFxsYW5nbGVcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxyYW5nXCIsIFwiXFxcXHJhbmdsZVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHVhcnJcIiwgXCJcXFxcdXBhcnJvd1wiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHVBcnJcIiwgXCJcXFxcVXBhcnJvd1wiKTtcbmRlZmluZU1hY3JvKFwiXFxcXFVhcnJcIiwgXCJcXFxcVXBhcnJvd1wiKTtcbmRlZmluZU1hY3JvKFwiXFxcXE5cIiwgXCJcXFxcbWF0aGJie059XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcUlwiLCBcIlxcXFxtYXRoYmJ7Un1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxaXCIsIFwiXFxcXG1hdGhiYntafVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGFsZWZcIiwgXCJcXFxcYWxlcGhcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxhbGVmc3ltXCIsIFwiXFxcXGFsZXBoXCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcQWxwaGFcIiwgXCJcXFxcbWF0aHJte0F9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcQmV0YVwiLCBcIlxcXFxtYXRocm17Qn1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxidWxsXCIsIFwiXFxcXGJ1bGxldFwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXENoaVwiLCBcIlxcXFxtYXRocm17WH1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxjbHVic1wiLCBcIlxcXFxjbHVic3VpdFwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGNudW1zXCIsIFwiXFxcXG1hdGhiYntDfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXENvbXBsZXhcIiwgXCJcXFxcbWF0aGJie0N9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcRGFnZ2VyXCIsIFwiXFxcXGRkYWdnZXJcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxkaWFtb25kc1wiLCBcIlxcXFxkaWFtb25kc3VpdFwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGVtcHR5XCIsIFwiXFxcXGVtcHR5c2V0XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcRXBzaWxvblwiLCBcIlxcXFxtYXRocm17RX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxFdGFcIiwgXCJcXFxcbWF0aHJte0h9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZXhpc3RcIiwgXCJcXFxcZXhpc3RzXCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcaGFyclwiLCBcIlxcXFxsZWZ0cmlnaHRhcnJvd1wiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGhBcnJcIiwgXCJcXFxcTGVmdHJpZ2h0YXJyb3dcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxIYXJyXCIsIFwiXFxcXExlZnRyaWdodGFycm93XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcaGVhcnRzXCIsIFwiXFxcXGhlYXJ0c3VpdFwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGltYWdlXCIsIFwiXFxcXEltXCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcaW5maW5cIiwgXCJcXFxcaW5mdHlcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxJb3RhXCIsIFwiXFxcXG1hdGhybXtJfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGlzaW5cIiwgXCJcXFxcaW5cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxLYXBwYVwiLCBcIlxcXFxtYXRocm17S31cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxsYXJyXCIsIFwiXFxcXGxlZnRhcnJvd1wiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGxBcnJcIiwgXCJcXFxcTGVmdGFycm93XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcTGFyclwiLCBcIlxcXFxMZWZ0YXJyb3dcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxscmFyclwiLCBcIlxcXFxsZWZ0cmlnaHRhcnJvd1wiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGxyQXJyXCIsIFwiXFxcXExlZnRyaWdodGFycm93XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcTHJhcnJcIiwgXCJcXFxcTGVmdHJpZ2h0YXJyb3dcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxNdVwiLCBcIlxcXFxtYXRocm17TX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxuYXRudW1zXCIsIFwiXFxcXG1hdGhiYntOfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXE51XCIsIFwiXFxcXG1hdGhybXtOfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXE9taWNyb25cIiwgXCJcXFxcbWF0aHJte099XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccGx1c21uXCIsIFwiXFxcXHBtXCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccmFyclwiLCBcIlxcXFxyaWdodGFycm93XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcckFyclwiLCBcIlxcXFxSaWdodGFycm93XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcUmFyclwiLCBcIlxcXFxSaWdodGFycm93XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccmVhbFwiLCBcIlxcXFxSZVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHJlYWxzXCIsIFwiXFxcXG1hdGhiYntSfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXFJlYWxzXCIsIFwiXFxcXG1hdGhiYntSfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXFJob1wiLCBcIlxcXFxtYXRocm17UH1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxzZG90XCIsIFwiXFxcXGNkb3RcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxzZWN0XCIsIFwiXFxcXFNcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxzcGFkZXNcIiwgXCJcXFxcc3BhZGVzdWl0XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcc3ViXCIsIFwiXFxcXHN1YnNldFwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHN1YmVcIiwgXCJcXFxcc3Vic2V0ZXFcIik7XG5kZWZpbmVNYWNybyhcIlxcXFxzdXBlXCIsIFwiXFxcXHN1cHNldGVxXCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcVGF1XCIsIFwiXFxcXG1hdGhybXtUfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHRoZXRhc3ltXCIsIFwiXFxcXHZhcnRoZXRhXCIpOyAvLyBUT0RPOiBkZWZpbmVNYWNybyhcIlxcXFx2YXJjb3BwYVwiLCBcIlxcXFxcXG1ib3h7XFxcXGNvcHBhfVwiKTtcblxuZGVmaW5lTWFjcm8oXCJcXFxcd2VpZXJwXCIsIFwiXFxcXHdwXCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcWmV0YVwiLCBcIlxcXFxtYXRocm17Wn1cIik7IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIHN0YXRtYXRoLnN0eVxuLy8gaHR0cHM6Ly9jdGFuLm1hdGguaWxsaW5vaXMuZWR1L21hY3Jvcy9sYXRleC9jb250cmliL3N0YXRtYXRoL3N0YXRtYXRoLnBkZlxuXG5kZWZpbmVNYWNybyhcIlxcXFxhcmdtaW5cIiwgXCJcXFxcRE9UU0JcXFxcb3BlcmF0b3JuYW1lKnthcmdcXFxcLG1pbn1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxhcmdtYXhcIiwgXCJcXFxcRE9UU0JcXFxcb3BlcmF0b3JuYW1lKnthcmdcXFxcLG1heH1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxwbGltXCIsIFwiXFxcXERPVFNCXFxcXG1hdGhvcHtcXFxcb3BlcmF0b3JuYW1le3BsaW19fVxcXFxsaW1pdHNcIik7IC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIGJyYWtldC5zdHlcbi8vIGh0dHA6Ly9jdGFuLm1hdGgud2FzaGluZ3Rvbi5lZHUvdGV4LWFyY2hpdmUvbWFjcm9zL2xhdGV4L2NvbnRyaWIvYnJha2V0L2JyYWtldC5wZGZcblxuZGVmaW5lTWFjcm8oXCJcXFxcYnJhXCIsIFwiXFxcXG1hdGhpbm5lcntcXFxcbGFuZ2xleyMxfXx9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxca2V0XCIsIFwiXFxcXG1hdGhpbm5lcnt8eyMxfVxcXFxyYW5nbGV9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcYnJha2V0XCIsIFwiXFxcXG1hdGhpbm5lcntcXFxcbGFuZ2xleyMxfVxcXFxyYW5nbGV9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcQnJhXCIsIFwiXFxcXGxlZnRcXFxcbGFuZ2xlIzFcXFxccmlnaHR8XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcS2V0XCIsIFwiXFxcXGxlZnR8IzFcXFxccmlnaHRcXFxccmFuZ2xlXCIpOyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBhY3R1YXJpYWxhbmdsZS5kdHhcblxuZGVmaW5lTWFjcm8oXCJcXFxcYW5nbG5cIiwgXCJ7XFxcXGFuZ2wgbn1cIik7IC8vIEN1c3RvbSBLaGFuIEFjYWRlbXkgY29sb3JzLCBzaG91bGQgYmUgbW92ZWQgdG8gYW4gb3B0aW9uYWwgcGFja2FnZVxuXG5kZWZpbmVNYWNybyhcIlxcXFxibHVlXCIsIFwiXFxcXHRleHRjb2xvcnsjIzY0OTVlZH17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcb3JhbmdlXCIsIFwiXFxcXHRleHRjb2xvcnsjI2ZmYTUwMH17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccGlua1wiLCBcIlxcXFx0ZXh0Y29sb3J7IyNmZjAwYWZ9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHJlZFwiLCBcIlxcXFx0ZXh0Y29sb3J7IyNkZjAwMzB9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGdyZWVuXCIsIFwiXFxcXHRleHRjb2xvcnsjIzI4YWU3Yn17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZ3JheVwiLCBcIlxcXFx0ZXh0Y29sb3J7Z3JheX17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccHVycGxlXCIsIFwiXFxcXHRleHRjb2xvcnsjIzlkMzhiZH17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcYmx1ZUFcIiwgXCJcXFxcdGV4dGNvbG9yeyMjY2NmYWZmfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxibHVlQlwiLCBcIlxcXFx0ZXh0Y29sb3J7IyM4MGY2ZmZ9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGJsdWVDXCIsIFwiXFxcXHRleHRjb2xvcnsjIzYzZDllYX17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcYmx1ZURcIiwgXCJcXFxcdGV4dGNvbG9yeyMjMTFhY2NkfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxibHVlRVwiLCBcIlxcXFx0ZXh0Y29sb3J7IyMwYzdmOTl9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHRlYWxBXCIsIFwiXFxcXHRleHRjb2xvcnsjIzk0ZmZmNX17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcdGVhbEJcIiwgXCJcXFxcdGV4dGNvbG9yeyMjMjZlZGQ1fXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFx0ZWFsQ1wiLCBcIlxcXFx0ZXh0Y29sb3J7IyMwMWQxYzF9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHRlYWxEXCIsIFwiXFxcXHRleHRjb2xvcnsjIzAxYTk5NX17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcdGVhbEVcIiwgXCJcXFxcdGV4dGNvbG9yeyMjMjA4MTcwfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxncmVlbkFcIiwgXCJcXFxcdGV4dGNvbG9yeyMjYjZmZmIwfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxncmVlbkJcIiwgXCJcXFxcdGV4dGNvbG9yeyMjOGFmMjgxfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxncmVlbkNcIiwgXCJcXFxcdGV4dGNvbG9yeyMjNzRjZjcwfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxncmVlbkRcIiwgXCJcXFxcdGV4dGNvbG9yeyMjMWZhYjU0fXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxncmVlbkVcIiwgXCJcXFxcdGV4dGNvbG9yeyMjMGQ5MjNmfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxnb2xkQVwiLCBcIlxcXFx0ZXh0Y29sb3J7IyNmZmQwYTl9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGdvbGRCXCIsIFwiXFxcXHRleHRjb2xvcnsjI2ZmYmI3MX17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZ29sZENcIiwgXCJcXFxcdGV4dGNvbG9yeyMjZmY5YzM5fXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxnb2xkRFwiLCBcIlxcXFx0ZXh0Y29sb3J7IyNlMDdkMTB9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGdvbGRFXCIsIFwiXFxcXHRleHRjb2xvcnsjI2E3NWEwNX17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccmVkQVwiLCBcIlxcXFx0ZXh0Y29sb3J7IyNmY2E5YTl9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHJlZEJcIiwgXCJcXFxcdGV4dGNvbG9yeyMjZmY4NDgyfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxyZWRDXCIsIFwiXFxcXHRleHRjb2xvcnsjI2Y5Njg1ZH17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccmVkRFwiLCBcIlxcXFx0ZXh0Y29sb3J7IyNlODRkMzl9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHJlZEVcIiwgXCJcXFxcdGV4dGNvbG9yeyMjYmMyNjEyfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxtYXJvb25BXCIsIFwiXFxcXHRleHRjb2xvcnsjI2ZmYmRlMH17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbWFyb29uQlwiLCBcIlxcXFx0ZXh0Y29sb3J7IyNmZjkyYzZ9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXG1hcm9vbkNcIiwgXCJcXFxcdGV4dGNvbG9yeyMjZWQ1ZmE2fXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxtYXJvb25EXCIsIFwiXFxcXHRleHRjb2xvcnsjI2NhMzM3Y317IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbWFyb29uRVwiLCBcIlxcXFx0ZXh0Y29sb3J7IyM5ZTAzNGV9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHB1cnBsZUFcIiwgXCJcXFxcdGV4dGNvbG9yeyMjZGRkN2ZmfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxwdXJwbGVCXCIsIFwiXFxcXHRleHRjb2xvcnsjI2M2YjlmY317IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxccHVycGxlQ1wiLCBcIlxcXFx0ZXh0Y29sb3J7IyNhYTg3ZmZ9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXHB1cnBsZURcIiwgXCJcXFxcdGV4dGNvbG9yeyMjNzg1NGFifXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxwdXJwbGVFXCIsIFwiXFxcXHRleHRjb2xvcnsjIzU0M2I3OH17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcbWludEFcIiwgXCJcXFxcdGV4dGNvbG9yeyMjZjVmOWU4fXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxtaW50QlwiLCBcIlxcXFx0ZXh0Y29sb3J7IyNlZGYyZGZ9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXG1pbnRDXCIsIFwiXFxcXHRleHRjb2xvcnsjI2UwZTVjY317IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZ3JheUFcIiwgXCJcXFxcdGV4dGNvbG9yeyMjZjZmN2Y3fXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxncmF5QlwiLCBcIlxcXFx0ZXh0Y29sb3J7IyNmMGYxZjJ9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGdyYXlDXCIsIFwiXFxcXHRleHRjb2xvcnsjI2UzZTVlNn17IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZ3JheURcIiwgXCJcXFxcdGV4dGNvbG9yeyMjZDZkOGRhfXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxncmF5RVwiLCBcIlxcXFx0ZXh0Y29sb3J7IyNiYWJlYzJ9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGdyYXlGXCIsIFwiXFxcXHRleHRjb2xvcnsjIzg4OGQ5M317IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxcZ3JheUdcIiwgXCJcXFxcdGV4dGNvbG9yeyMjNjI2NTY5fXsjMX1cIik7XG5kZWZpbmVNYWNybyhcIlxcXFxncmF5SFwiLCBcIlxcXFx0ZXh0Y29sb3J7IyMzYjNlNDB9eyMxfVwiKTtcbmRlZmluZU1hY3JvKFwiXFxcXGdyYXlJXCIsIFwiXFxcXHRleHRjb2xvcnsjIzIxMjQyY317IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxca2FCbHVlXCIsIFwiXFxcXHRleHRjb2xvcnsjIzMxNDQ1M317IzF9XCIpO1xuZGVmaW5lTWFjcm8oXCJcXFxca2FHcmVlblwiLCBcIlxcXFx0ZXh0Y29sb3J7IyM3MUIzMDd9eyMxfVwiKTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL3NyYy9NYWNyb0V4cGFuZGVyLmpzXG4vKipcbiAqIFRoaXMgZmlsZSBjb250YWlucyB0aGUg4oCcZ3VsbGV04oCdIHdoZXJlIG1hY3JvcyBhcmUgZXhwYW5kZWRcbiAqIHVudGlsIG9ubHkgbm9uLW1hY3JvIHRva2VucyByZW1haW4uXG4gKi9cblxuXG5cblxuXG5cblxuLy8gTGlzdCBvZiBjb21tYW5kcyB0aGF0IGFjdCBsaWtlIG1hY3JvcyBidXQgYXJlbid0IGRlZmluZWQgYXMgYSBtYWNybyxcbi8vIGZ1bmN0aW9uLCBvciBzeW1ib2wuICBVc2VkIGluIGBpc0RlZmluZWRgLlxudmFyIGltcGxpY2l0Q29tbWFuZHMgPSB7XG4gIFwiXFxcXHJlbGF4XCI6IHRydWUsXG4gIC8vIE1hY3JvRXhwYW5kZXIuanNcbiAgXCJeXCI6IHRydWUsXG4gIC8vIFBhcnNlci5qc1xuICBcIl9cIjogdHJ1ZSxcbiAgLy8gUGFyc2VyLmpzXG4gIFwiXFxcXGxpbWl0c1wiOiB0cnVlLFxuICAvLyBQYXJzZXIuanNcbiAgXCJcXFxcbm9saW1pdHNcIjogdHJ1ZSAvLyBQYXJzZXIuanNcblxufTtcblxudmFyIE1hY3JvRXhwYW5kZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNYWNyb0V4cGFuZGVyKGlucHV0LCBzZXR0aW5ncywgbW9kZSkge1xuICAgIHRoaXMuc2V0dGluZ3MgPSB2b2lkIDA7XG4gICAgdGhpcy5leHBhbnNpb25Db3VudCA9IHZvaWQgMDtcbiAgICB0aGlzLmxleGVyID0gdm9pZCAwO1xuICAgIHRoaXMubWFjcm9zID0gdm9pZCAwO1xuICAgIHRoaXMuc3RhY2sgPSB2b2lkIDA7XG4gICAgdGhpcy5tb2RlID0gdm9pZCAwO1xuICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICB0aGlzLmV4cGFuc2lvbkNvdW50ID0gMDtcbiAgICB0aGlzLmZlZWQoaW5wdXQpOyAvLyBNYWtlIG5ldyBnbG9iYWwgbmFtZXNwYWNlXG5cbiAgICB0aGlzLm1hY3JvcyA9IG5ldyBOYW1lc3BhY2Uoc3JjX21hY3Jvcywgc2V0dGluZ3MubWFjcm9zKTtcbiAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICAgIHRoaXMuc3RhY2sgPSBbXTsgLy8gY29udGFpbnMgdG9rZW5zIGluIFJFVkVSU0Ugb3JkZXJcbiAgfVxuICAvKipcbiAgICogRmVlZCBhIG5ldyBpbnB1dCBzdHJpbmcgdG8gdGhlIHNhbWUgTWFjcm9FeHBhbmRlclxuICAgKiAod2l0aCBleGlzdGluZyBtYWNyb3MgZXRjLikuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IE1hY3JvRXhwYW5kZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5mZWVkID0gZnVuY3Rpb24gZmVlZChpbnB1dCkge1xuICAgIHRoaXMubGV4ZXIgPSBuZXcgTGV4ZXIoaW5wdXQsIHRoaXMuc2V0dGluZ3MpO1xuICB9XG4gIC8qKlxuICAgKiBTd2l0Y2hlcyBiZXR3ZWVuIFwidGV4dFwiIGFuZCBcIm1hdGhcIiBtb2Rlcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uc3dpdGNoTW9kZSA9IGZ1bmN0aW9uIHN3aXRjaE1vZGUobmV3TW9kZSkge1xuICAgIHRoaXMubW9kZSA9IG5ld01vZGU7XG4gIH1cbiAgLyoqXG4gICAqIFN0YXJ0IGEgbmV3IGdyb3VwIG5lc3Rpbmcgd2l0aGluIGFsbCBuYW1lc3BhY2VzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5iZWdpbkdyb3VwID0gZnVuY3Rpb24gYmVnaW5Hcm91cCgpIHtcbiAgICB0aGlzLm1hY3Jvcy5iZWdpbkdyb3VwKCk7XG4gIH1cbiAgLyoqXG4gICAqIEVuZCBjdXJyZW50IGdyb3VwIG5lc3Rpbmcgd2l0aGluIGFsbCBuYW1lc3BhY2VzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lbmRHcm91cCA9IGZ1bmN0aW9uIGVuZEdyb3VwKCkge1xuICAgIHRoaXMubWFjcm9zLmVuZEdyb3VwKCk7XG4gIH1cbiAgLyoqXG4gICAqIEVuZHMgYWxsIGN1cnJlbnRseSBuZXN0ZWQgZ3JvdXBzIChpZiBhbnkpLCByZXN0b3JpbmcgdmFsdWVzIGJlZm9yZSB0aGVcbiAgICogZ3JvdXBzIGJlZ2FuLiAgVXNlZnVsIGluIGNhc2Ugb2YgYW4gZXJyb3IgaW4gdGhlIG1pZGRsZSBvZiBwYXJzaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5lbmRHcm91cHMgPSBmdW5jdGlvbiBlbmRHcm91cHMoKSB7XG4gICAgdGhpcy5tYWNyb3MuZW5kR3JvdXBzKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHRvcG1vc3QgdG9rZW4gb24gdGhlIHN0YWNrLCB3aXRob3V0IGV4cGFuZGluZyBpdC5cbiAgICogU2ltaWxhciBpbiBiZWhhdmlvciB0byBUZVgncyBgXFxmdXR1cmVsZXRgLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5mdXR1cmUgPSBmdW5jdGlvbiBmdXR1cmUoKSB7XG4gICAgaWYgKHRoaXMuc3RhY2subGVuZ3RoID09PSAwKSB7XG4gICAgICB0aGlzLnB1c2hUb2tlbih0aGlzLmxleGVyLmxleCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgYW5kIHJldHVybiB0aGUgbmV4dCB1bmV4cGFuZGVkIHRva2VuLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wb3BUb2tlbiA9IGZ1bmN0aW9uIHBvcFRva2VuKCkge1xuICAgIHRoaXMuZnV0dXJlKCk7IC8vIGVuc3VyZSBub24tZW1wdHkgc3RhY2tcblxuICAgIHJldHVybiB0aGlzLnN0YWNrLnBvcCgpO1xuICB9XG4gIC8qKlxuICAgKiBBZGQgYSBnaXZlbiB0b2tlbiB0byB0aGUgdG9rZW4gc3RhY2suICBJbiBwYXJ0aWN1bGFyLCB0aGlzIGdldCBiZSB1c2VkXG4gICAqIHRvIHB1dCBiYWNrIGEgdG9rZW4gcmV0dXJuZWQgZnJvbSBvbmUgb2YgdGhlIG90aGVyIG1ldGhvZHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnB1c2hUb2tlbiA9IGZ1bmN0aW9uIHB1c2hUb2tlbih0b2tlbikge1xuICAgIHRoaXMuc3RhY2sucHVzaCh0b2tlbik7XG4gIH1cbiAgLyoqXG4gICAqIEFwcGVuZCBhbiBhcnJheSBvZiB0b2tlbnMgdG8gdGhlIHRva2VuIHN0YWNrLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wdXNoVG9rZW5zID0gZnVuY3Rpb24gcHVzaFRva2Vucyh0b2tlbnMpIHtcbiAgICB2YXIgX3RoaXMkc3RhY2s7XG5cbiAgICAoX3RoaXMkc3RhY2sgPSB0aGlzLnN0YWNrKS5wdXNoLmFwcGx5KF90aGlzJHN0YWNrLCB0b2tlbnMpO1xuICB9XG4gIC8qKlxuICAgKiBGaW5kIGFuIG1hY3JvIGFyZ3VtZW50IHdpdGhvdXQgZXhwYW5kaW5nIHRva2VucyBhbmQgYXBwZW5kIHRoZSBhcnJheSBvZlxuICAgKiB0b2tlbnMgdG8gdGhlIHRva2VuIHN0YWNrLiBVc2VzIFRva2VuIGFzIGEgY29udGFpbmVyIGZvciB0aGUgcmVzdWx0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zY2FuQXJndW1lbnQgPSBmdW5jdGlvbiBzY2FuQXJndW1lbnQoaXNPcHRpb25hbCkge1xuICAgIHZhciBzdGFydDtcbiAgICB2YXIgZW5kO1xuICAgIHZhciB0b2tlbnM7XG5cbiAgICBpZiAoaXNPcHRpb25hbCkge1xuICAgICAgdGhpcy5jb25zdW1lU3BhY2VzKCk7IC8vIFxcQGlmbmV4dGNoYXIgZ29iYmxlcyBhbnkgc3BhY2UgZm9sbG93aW5nIGl0XG5cbiAgICAgIGlmICh0aGlzLmZ1dHVyZSgpLnRleHQgIT09IFwiW1wiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBzdGFydCA9IHRoaXMucG9wVG9rZW4oKTsgLy8gZG9uJ3QgaW5jbHVkZSBbIGluIHRva2Vuc1xuXG4gICAgICB2YXIgX3RoaXMkY29uc3VtZUFyZyA9IHRoaXMuY29uc3VtZUFyZyhbXCJdXCJdKTtcblxuICAgICAgdG9rZW5zID0gX3RoaXMkY29uc3VtZUFyZy50b2tlbnM7XG4gICAgICBlbmQgPSBfdGhpcyRjb25zdW1lQXJnLmVuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF90aGlzJGNvbnN1bWVBcmcyID0gdGhpcy5jb25zdW1lQXJnKCk7XG5cbiAgICAgIHRva2VucyA9IF90aGlzJGNvbnN1bWVBcmcyLnRva2VucztcbiAgICAgIHN0YXJ0ID0gX3RoaXMkY29uc3VtZUFyZzIuc3RhcnQ7XG4gICAgICBlbmQgPSBfdGhpcyRjb25zdW1lQXJnMi5lbmQ7XG4gICAgfSAvLyBpbmRpY2F0ZSB0aGUgZW5kIG9mIGFuIGFyZ3VtZW50XG5cblxuICAgIHRoaXMucHVzaFRva2VuKG5ldyBUb2tlbihcIkVPRlwiLCBlbmQubG9jKSk7XG4gICAgdGhpcy5wdXNoVG9rZW5zKHRva2Vucyk7XG4gICAgcmV0dXJuIHN0YXJ0LnJhbmdlKGVuZCwgXCJcIik7XG4gIH1cbiAgLyoqXG4gICAqIENvbnN1bWUgYWxsIGZvbGxvd2luZyBzcGFjZSB0b2tlbnMsIHdpdGhvdXQgZXhwYW5zaW9uLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb25zdW1lU3BhY2VzID0gZnVuY3Rpb24gY29uc3VtZVNwYWNlcygpIHtcbiAgICBmb3IgKDs7KSB7XG4gICAgICB2YXIgdG9rZW4gPSB0aGlzLmZ1dHVyZSgpO1xuXG4gICAgICBpZiAodG9rZW4udGV4dCA9PT0gXCIgXCIpIHtcbiAgICAgICAgdGhpcy5zdGFjay5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ29uc3VtZSBhbiBhcmd1bWVudCBmcm9tIHRoZSB0b2tlbiBzdHJlYW0sIGFuZCByZXR1cm4gdGhlIHJlc3VsdGluZyBhcnJheVxuICAgKiBvZiB0b2tlbnMgYW5kIHN0YXJ0L2VuZCB0b2tlbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY29uc3VtZUFyZyA9IGZ1bmN0aW9uIGNvbnN1bWVBcmcoZGVsaW1zKSB7XG4gICAgLy8gVGhlIGFyZ3VtZW50IGZvciBhIGRlbGltaXRlZCBwYXJhbWV0ZXIgaXMgdGhlIHNob3J0ZXN0IChwb3NzaWJseVxuICAgIC8vIGVtcHR5KSBzZXF1ZW5jZSBvZiB0b2tlbnMgd2l0aCBwcm9wZXJseSBuZXN0ZWQgey4uLn0gZ3JvdXBzIHRoYXQgaXNcbiAgICAvLyBmb2xsb3dlZCAuLi4gYnkgdGhpcyBwYXJ0aWN1bGFyIGxpc3Qgb2Ygbm9uLXBhcmFtZXRlciB0b2tlbnMuXG4gICAgLy8gVGhlIGFyZ3VtZW50IGZvciBhbiB1bmRlbGltaXRlZCBwYXJhbWV0ZXIgaXMgdGhlIG5leHQgbm9uYmxhbmtcbiAgICAvLyB0b2tlbiwgdW5sZXNzIHRoYXQgdG9rZW4gaXMg4oCYe+KAmSwgd2hlbiB0aGUgYXJndW1lbnQgd2lsbCBiZSB0aGVcbiAgICAvLyBlbnRpcmUgey4uLn0gZ3JvdXAgdGhhdCBmb2xsb3dzLlxuICAgIHZhciB0b2tlbnMgPSBbXTtcbiAgICB2YXIgaXNEZWxpbWl0ZWQgPSBkZWxpbXMgJiYgZGVsaW1zLmxlbmd0aCA+IDA7XG5cbiAgICBpZiAoIWlzRGVsaW1pdGVkKSB7XG4gICAgICAvLyBJZ25vcmUgc3BhY2VzIGJldHdlZW4gYXJndW1lbnRzLiAgQXMgdGhlIFRlWGJvb2sgc2F5czpcbiAgICAgIC8vIFwiQWZ0ZXIgeW91IGhhdmUgc2FpZCDigJhcXGRlZlxccm93IzEjMnsuLi594oCZLCB5b3UgYXJlIGFsbG93ZWQgdG9cbiAgICAgIC8vICBwdXQgc3BhY2VzIGJldHdlZW4gdGhlIGFyZ3VtZW50cyAoZS5nLiwg4oCYXFxyb3cgeCBu4oCZKSwgYmVjYXVzZVxuICAgICAgLy8gIFRlWCBkb2VzbuKAmXQgdXNlIHNpbmdsZSBzcGFjZXMgYXMgdW5kZWxpbWl0ZWQgYXJndW1lbnRzLlwiXG4gICAgICB0aGlzLmNvbnN1bWVTcGFjZXMoKTtcbiAgICB9XG5cbiAgICB2YXIgc3RhcnQgPSB0aGlzLmZ1dHVyZSgpO1xuICAgIHZhciB0b2s7XG4gICAgdmFyIGRlcHRoID0gMDtcbiAgICB2YXIgbWF0Y2ggPSAwO1xuXG4gICAgZG8ge1xuICAgICAgdG9rID0gdGhpcy5wb3BUb2tlbigpO1xuICAgICAgdG9rZW5zLnB1c2godG9rKTtcblxuICAgICAgaWYgKHRvay50ZXh0ID09PSBcIntcIikge1xuICAgICAgICArK2RlcHRoO1xuICAgICAgfSBlbHNlIGlmICh0b2sudGV4dCA9PT0gXCJ9XCIpIHtcbiAgICAgICAgLS1kZXB0aDtcblxuICAgICAgICBpZiAoZGVwdGggPT09IC0xKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiRXh0cmEgfVwiLCB0b2spO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRvay50ZXh0ID09PSBcIkVPRlwiKSB7XG4gICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlVuZXhwZWN0ZWQgZW5kIG9mIGlucHV0IGluIGEgbWFjcm8gYXJndW1lbnRcIiArIFwiLCBleHBlY3RlZCAnXCIgKyAoZGVsaW1zICYmIGlzRGVsaW1pdGVkID8gZGVsaW1zW21hdGNoXSA6IFwifVwiKSArIFwiJ1wiLCB0b2spO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGVsaW1zICYmIGlzRGVsaW1pdGVkKSB7XG4gICAgICAgIGlmICgoZGVwdGggPT09IDAgfHwgZGVwdGggPT09IDEgJiYgZGVsaW1zW21hdGNoXSA9PT0gXCJ7XCIpICYmIHRvay50ZXh0ID09PSBkZWxpbXNbbWF0Y2hdKSB7XG4gICAgICAgICAgKyttYXRjaDtcblxuICAgICAgICAgIGlmIChtYXRjaCA9PT0gZGVsaW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gZG9uJ3QgaW5jbHVkZSBkZWxpbXMgaW4gdG9rZW5zXG4gICAgICAgICAgICB0b2tlbnMuc3BsaWNlKC1tYXRjaCwgbWF0Y2gpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hdGNoID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gd2hpbGUgKGRlcHRoICE9PSAwIHx8IGlzRGVsaW1pdGVkKTsgLy8gSWYgdGhlIGFyZ3VtZW50IGZvdW5kIC4uLiBoYXMgdGhlIGZvcm0g4oCYezxuZXN0ZWQgdG9rZW5zPn3igJksXG4gICAgLy8gLi4uIHRoZSBvdXRlcm1vc3QgYnJhY2VzIGVuY2xvc2luZyB0aGUgYXJndW1lbnQgYXJlIHJlbW92ZWRcblxuXG4gICAgaWYgKHN0YXJ0LnRleHQgPT09IFwie1wiICYmIHRva2Vuc1t0b2tlbnMubGVuZ3RoIC0gMV0udGV4dCA9PT0gXCJ9XCIpIHtcbiAgICAgIHRva2Vucy5wb3AoKTtcbiAgICAgIHRva2Vucy5zaGlmdCgpO1xuICAgIH1cblxuICAgIHRva2Vucy5yZXZlcnNlKCk7IC8vIHRvIGZpdCBpbiB3aXRoIHN0YWNrIG9yZGVyXG5cbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW5zOiB0b2tlbnMsXG4gICAgICBzdGFydDogc3RhcnQsXG4gICAgICBlbmQ6IHRva1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIENvbnN1bWUgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgKGRlbGltaXRlZCkgYXJndW1lbnRzIGZyb20gdGhlIHRva2VuXG4gICAqIHN0cmVhbSBhbmQgcmV0dXJuIHRoZSByZXN1bHRpbmcgYXJyYXkgb2YgYXJndW1lbnRzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5jb25zdW1lQXJncyA9IGZ1bmN0aW9uIGNvbnN1bWVBcmdzKG51bUFyZ3MsIGRlbGltaXRlcnMpIHtcbiAgICBpZiAoZGVsaW1pdGVycykge1xuICAgICAgaWYgKGRlbGltaXRlcnMubGVuZ3RoICE9PSBudW1BcmdzICsgMSkge1xuICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJUaGUgbGVuZ3RoIG9mIGRlbGltaXRlcnMgZG9lc24ndCBtYXRjaCB0aGUgbnVtYmVyIG9mIGFyZ3MhXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVsaW1zID0gZGVsaW1pdGVyc1swXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWxpbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHRvayA9IHRoaXMucG9wVG9rZW4oKTtcblxuICAgICAgICBpZiAoZGVsaW1zW2ldICE9PSB0b2sudGV4dCkge1xuICAgICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlVzZSBvZiB0aGUgbWFjcm8gZG9lc24ndCBtYXRjaCBpdHMgZGVmaW5pdGlvblwiLCB0b2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGFyZ3MgPSBbXTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBudW1BcmdzOyBfaSsrKSB7XG4gICAgICBhcmdzLnB1c2godGhpcy5jb25zdW1lQXJnKGRlbGltaXRlcnMgJiYgZGVsaW1pdGVyc1tfaSArIDFdKS50b2tlbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBhcmdzO1xuICB9XG4gIC8qKlxuICAgKiBFeHBhbmQgdGhlIG5leHQgdG9rZW4gb25seSBvbmNlIGlmIHBvc3NpYmxlLlxuICAgKlxuICAgKiBJZiB0aGUgdG9rZW4gaXMgZXhwYW5kZWQsIHRoZSByZXN1bHRpbmcgdG9rZW5zIHdpbGwgYmUgcHVzaGVkIG9udG9cbiAgICogdGhlIHN0YWNrIGluIHJldmVyc2Ugb3JkZXIgYW5kIHdpbGwgYmUgcmV0dXJuZWQgYXMgYW4gYXJyYXksXG4gICAqIGFsc28gaW4gcmV2ZXJzZSBvcmRlci5cbiAgICpcbiAgICogSWYgbm90LCB0aGUgbmV4dCB0b2tlbiB3aWxsIGJlIHJldHVybmVkIHdpdGhvdXQgcmVtb3ZpbmcgaXRcbiAgICogZnJvbSB0aGUgc3RhY2suICBUaGlzIGNhc2UgY2FuIGJlIGRldGVjdGVkIGJ5IGEgYFRva2VuYCByZXR1cm4gdmFsdWVcbiAgICogaW5zdGVhZCBvZiBhbiBgQXJyYXlgIHJldHVybiB2YWx1ZS5cbiAgICpcbiAgICogSW4gZWl0aGVyIGNhc2UsIHRoZSBuZXh0IHRva2VuIHdpbGwgYmUgb24gdGhlIHRvcCBvZiB0aGUgc3RhY2ssXG4gICAqIG9yIHRoZSBzdGFjayB3aWxsIGJlIGVtcHR5LlxuICAgKlxuICAgKiBVc2VkIHRvIGltcGxlbWVudCBgZXhwYW5kQWZ0ZXJGdXR1cmVgIGFuZCBgZXhwYW5kTmV4dFRva2VuYC5cbiAgICpcbiAgICogSWYgZXhwYW5kYWJsZU9ubHksIG9ubHkgZXhwYW5kYWJsZSB0b2tlbnMgYXJlIGV4cGFuZGVkIGFuZFxuICAgKiBhbiB1bmRlZmluZWQgY29udHJvbCBzZXF1ZW5jZSByZXN1bHRzIGluIGFuIGVycm9yLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5leHBhbmRPbmNlID0gZnVuY3Rpb24gZXhwYW5kT25jZShleHBhbmRhYmxlT25seSkge1xuICAgIHZhciB0b3BUb2tlbiA9IHRoaXMucG9wVG9rZW4oKTtcbiAgICB2YXIgbmFtZSA9IHRvcFRva2VuLnRleHQ7XG4gICAgdmFyIGV4cGFuc2lvbiA9ICF0b3BUb2tlbi5ub2V4cGFuZCA/IHRoaXMuX2dldEV4cGFuc2lvbihuYW1lKSA6IG51bGw7XG5cbiAgICBpZiAoZXhwYW5zaW9uID09IG51bGwgfHwgZXhwYW5kYWJsZU9ubHkgJiYgZXhwYW5zaW9uLnVuZXhwYW5kYWJsZSkge1xuICAgICAgaWYgKGV4cGFuZGFibGVPbmx5ICYmIGV4cGFuc2lvbiA9PSBudWxsICYmIG5hbWVbMF0gPT09IFwiXFxcXFwiICYmICF0aGlzLmlzRGVmaW5lZChuYW1lKSkge1xuICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJVbmRlZmluZWQgY29udHJvbCBzZXF1ZW5jZTogXCIgKyBuYW1lKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wdXNoVG9rZW4odG9wVG9rZW4pO1xuICAgICAgcmV0dXJuIHRvcFRva2VuO1xuICAgIH1cblxuICAgIHRoaXMuZXhwYW5zaW9uQ291bnQrKztcblxuICAgIGlmICh0aGlzLmV4cGFuc2lvbkNvdW50ID4gdGhpcy5zZXR0aW5ncy5tYXhFeHBhbmQpIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlRvbyBtYW55IGV4cGFuc2lvbnM6IGluZmluaXRlIGxvb3Agb3IgXCIgKyBcIm5lZWQgdG8gaW5jcmVhc2UgbWF4RXhwYW5kIHNldHRpbmdcIik7XG4gICAgfVxuXG4gICAgdmFyIHRva2VucyA9IGV4cGFuc2lvbi50b2tlbnM7XG4gICAgdmFyIGFyZ3MgPSB0aGlzLmNvbnN1bWVBcmdzKGV4cGFuc2lvbi5udW1BcmdzLCBleHBhbnNpb24uZGVsaW1pdGVycyk7XG5cbiAgICBpZiAoZXhwYW5zaW9uLm51bUFyZ3MpIHtcbiAgICAgIC8vIHBhc3RlIGFyZ3VtZW50cyBpbiBwbGFjZSBvZiB0aGUgcGxhY2Vob2xkZXJzXG4gICAgICB0b2tlbnMgPSB0b2tlbnMuc2xpY2UoKTsgLy8gbWFrZSBhIHNoYWxsb3cgY29weVxuXG4gICAgICBmb3IgKHZhciBpID0gdG9rZW5zLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciB0b2sgPSB0b2tlbnNbaV07XG5cbiAgICAgICAgaWYgKHRvay50ZXh0ID09PSBcIiNcIikge1xuICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJJbmNvbXBsZXRlIHBsYWNlaG9sZGVyIGF0IGVuZCBvZiBtYWNybyBib2R5XCIsIHRvayk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdG9rID0gdG9rZW5zWy0taV07IC8vIG5leHQgdG9rZW4gb24gc3RhY2tcblxuICAgICAgICAgIGlmICh0b2sudGV4dCA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgIC8vICMjIOKGkiAjXG4gICAgICAgICAgICB0b2tlbnMuc3BsaWNlKGkgKyAxLCAxKTsgLy8gZHJvcCBmaXJzdCAjXG4gICAgICAgICAgfSBlbHNlIGlmICgvXlsxLTldJC8udGVzdCh0b2sudGV4dCkpIHtcbiAgICAgICAgICAgIHZhciBfdG9rZW5zO1xuXG4gICAgICAgICAgICAvLyByZXBsYWNlIHRoZSBwbGFjZWhvbGRlciB3aXRoIHRoZSBpbmRpY2F0ZWQgYXJndW1lbnRcbiAgICAgICAgICAgIChfdG9rZW5zID0gdG9rZW5zKS5zcGxpY2UuYXBwbHkoX3Rva2VucywgW2ksIDJdLmNvbmNhdChhcmdzWyt0b2sudGV4dCAtIDFdKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIk5vdCBhIHZhbGlkIGFyZ3VtZW50IG51bWJlclwiLCB0b2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gLy8gQ29uY2F0ZW5hdGUgZXhwYW5zaW9uIG9udG8gdG9wIG9mIHN0YWNrLlxuXG5cbiAgICB0aGlzLnB1c2hUb2tlbnModG9rZW5zKTtcbiAgICByZXR1cm4gdG9rZW5zO1xuICB9XG4gIC8qKlxuICAgKiBFeHBhbmQgdGhlIG5leHQgdG9rZW4gb25seSBvbmNlIChpZiBwb3NzaWJsZSksIGFuZCByZXR1cm4gdGhlIHJlc3VsdGluZ1xuICAgKiB0b3AgdG9rZW4gb24gdGhlIHN0YWNrICh3aXRob3V0IHJlbW92aW5nIGFueXRoaW5nIGZyb20gdGhlIHN0YWNrKS5cbiAgICogU2ltaWxhciBpbiBiZWhhdmlvciB0byBUZVgncyBgXFxleHBhbmRhZnRlclxcZnV0dXJlbGV0YC5cbiAgICogRXF1aXZhbGVudCB0byBleHBhbmRPbmNlKCkgZm9sbG93ZWQgYnkgZnV0dXJlKCkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmV4cGFuZEFmdGVyRnV0dXJlID0gZnVuY3Rpb24gZXhwYW5kQWZ0ZXJGdXR1cmUoKSB7XG4gICAgdGhpcy5leHBhbmRPbmNlKCk7XG4gICAgcmV0dXJuIHRoaXMuZnV0dXJlKCk7XG4gIH1cbiAgLyoqXG4gICAqIFJlY3Vyc2l2ZWx5IGV4cGFuZCBmaXJzdCB0b2tlbiwgdGhlbiByZXR1cm4gZmlyc3Qgbm9uLWV4cGFuZGFibGUgdG9rZW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmV4cGFuZE5leHRUb2tlbiA9IGZ1bmN0aW9uIGV4cGFuZE5leHRUb2tlbigpIHtcbiAgICBmb3IgKDs7KSB7XG4gICAgICB2YXIgZXhwYW5kZWQgPSB0aGlzLmV4cGFuZE9uY2UoKTsgLy8gZXhwYW5kT25jZSByZXR1cm5zIFRva2VuIGlmIGFuZCBvbmx5IGlmIGl0J3MgZnVsbHkgZXhwYW5kZWQuXG5cbiAgICAgIGlmIChleHBhbmRlZCBpbnN0YW5jZW9mIFRva2VuKSB7XG4gICAgICAgIC8vIFxccmVsYXggc3RvcHMgdGhlIGV4cGFuc2lvbiwgYnV0IHNob3VsZG4ndCBnZXQgcmV0dXJuZWQgKGFcbiAgICAgICAgLy8gbnVsbCByZXR1cm4gdmFsdWUgY291bGRuJ3QgZ2V0IGltcGxlbWVudGVkIGFzIGEgZnVuY3Rpb24pLlxuICAgICAgICAvLyB0aGUgdG9rZW4gYWZ0ZXIgXFxub2V4cGFuZCBpcyBpbnRlcnByZXRlZCBhcyBpZiBpdHMgbWVhbmluZ1xuICAgICAgICAvLyB3ZXJlIOKAmFxccmVsYXjigJlcbiAgICAgICAgaWYgKGV4cGFuZGVkLnRleHQgPT09IFwiXFxcXHJlbGF4XCIgfHwgZXhwYW5kZWQudHJlYXRBc1JlbGF4KSB7XG4gICAgICAgICAgdGhpcy5zdGFjay5wb3AoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5zdGFjay5wb3AoKTsgLy8gPT09IGV4cGFuZGVkXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIEZsb3cgdW5hYmxlIHRvIGZpZ3VyZSBvdXQgdGhhdCB0aGlzIHBhdGh3YXkgaXMgaW1wb3NzaWJsZS5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvNDgwOFxuXG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnJlYWNoYWJsZVxuICB9XG4gIC8qKlxuICAgKiBGdWxseSBleHBhbmQgdGhlIGdpdmVuIG1hY3JvIG5hbWUgYW5kIHJldHVybiB0aGUgcmVzdWx0aW5nIGxpc3Qgb2ZcbiAgICogdG9rZW5zLCBvciByZXR1cm4gYHVuZGVmaW5lZGAgaWYgbm8gc3VjaCBtYWNybyBpcyBkZWZpbmVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5leHBhbmRNYWNybyA9IGZ1bmN0aW9uIGV4cGFuZE1hY3JvKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5tYWNyb3MuaGFzKG5hbWUpID8gdGhpcy5leHBhbmRUb2tlbnMoW25ldyBUb2tlbihuYW1lKV0pIDogdW5kZWZpbmVkO1xuICB9XG4gIC8qKlxuICAgKiBGdWxseSBleHBhbmQgdGhlIGdpdmVuIHRva2VuIHN0cmVhbSBhbmQgcmV0dXJuIHRoZSByZXN1bHRpbmcgbGlzdCBvZiB0b2tlbnNcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZXhwYW5kVG9rZW5zID0gZnVuY3Rpb24gZXhwYW5kVG9rZW5zKHRva2Vucykge1xuICAgIHZhciBvdXRwdXQgPSBbXTtcbiAgICB2YXIgb2xkU3RhY2tMZW5ndGggPSB0aGlzLnN0YWNrLmxlbmd0aDtcbiAgICB0aGlzLnB1c2hUb2tlbnModG9rZW5zKTtcblxuICAgIHdoaWxlICh0aGlzLnN0YWNrLmxlbmd0aCA+IG9sZFN0YWNrTGVuZ3RoKSB7XG4gICAgICB2YXIgZXhwYW5kZWQgPSB0aGlzLmV4cGFuZE9uY2UodHJ1ZSk7IC8vIGV4cGFuZCBvbmx5IGV4cGFuZGFibGUgdG9rZW5zXG4gICAgICAvLyBleHBhbmRPbmNlIHJldHVybnMgVG9rZW4gaWYgYW5kIG9ubHkgaWYgaXQncyBmdWxseSBleHBhbmRlZC5cblxuICAgICAgaWYgKGV4cGFuZGVkIGluc3RhbmNlb2YgVG9rZW4pIHtcbiAgICAgICAgaWYgKGV4cGFuZGVkLnRyZWF0QXNSZWxheCkge1xuICAgICAgICAgIC8vIHRoZSBleHBhbnNpb24gb2YgXFxub2V4cGFuZCBpcyB0aGUgdG9rZW4gaXRzZWxmXG4gICAgICAgICAgZXhwYW5kZWQubm9leHBhbmQgPSBmYWxzZTtcbiAgICAgICAgICBleHBhbmRlZC50cmVhdEFzUmVsYXggPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG91dHB1dC5wdXNoKHRoaXMuc3RhY2sucG9wKCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH1cbiAgLyoqXG4gICAqIEZ1bGx5IGV4cGFuZCB0aGUgZ2l2ZW4gbWFjcm8gbmFtZSBhbmQgcmV0dXJuIHRoZSByZXN1bHQgYXMgYSBzdHJpbmcsXG4gICAqIG9yIHJldHVybiBgdW5kZWZpbmVkYCBpZiBubyBzdWNoIG1hY3JvIGlzIGRlZmluZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmV4cGFuZE1hY3JvQXNUZXh0ID0gZnVuY3Rpb24gZXhwYW5kTWFjcm9Bc1RleHQobmFtZSkge1xuICAgIHZhciB0b2tlbnMgPSB0aGlzLmV4cGFuZE1hY3JvKG5hbWUpO1xuXG4gICAgaWYgKHRva2Vucykge1xuICAgICAgcmV0dXJuIHRva2Vucy5tYXAoZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgICAgIHJldHVybiB0b2tlbi50ZXh0O1xuICAgICAgfSkuam9pbihcIlwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRva2VucztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGV4cGFuZGVkIG1hY3JvIGFzIGEgcmV2ZXJzZWQgYXJyYXkgb2YgdG9rZW5zIGFuZCBhIG1hY3JvXG4gICAqIGFyZ3VtZW50IGNvdW50LiAgT3IgcmV0dXJucyBgbnVsbGAgaWYgbm8gc3VjaCBtYWNyby5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uX2dldEV4cGFuc2lvbiA9IGZ1bmN0aW9uIF9nZXRFeHBhbnNpb24obmFtZSkge1xuICAgIHZhciBkZWZpbml0aW9uID0gdGhpcy5tYWNyb3MuZ2V0KG5hbWUpO1xuXG4gICAgaWYgKGRlZmluaXRpb24gPT0gbnVsbCkge1xuICAgICAgLy8gbWFpbmx5IGNoZWNraW5nIGZvciB1bmRlZmluZWQgaGVyZVxuICAgICAgcmV0dXJuIGRlZmluaXRpb247XG4gICAgfSAvLyBJZiBhIHNpbmdsZSBjaGFyYWN0ZXIgaGFzIGFuIGFzc29jaWF0ZWQgY2F0Y29kZSBvdGhlciB0aGFuIDEzXG4gICAgLy8gKGFjdGl2ZSBjaGFyYWN0ZXIpLCB0aGVuIGRvbid0IGV4cGFuZCBpdC5cblxuXG4gICAgaWYgKG5hbWUubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY2F0Y29kZSA9IHRoaXMubGV4ZXIuY2F0Y29kZXNbbmFtZV07XG5cbiAgICAgIGlmIChjYXRjb2RlICE9IG51bGwgJiYgY2F0Y29kZSAhPT0gMTMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBleHBhbnNpb24gPSB0eXBlb2YgZGVmaW5pdGlvbiA9PT0gXCJmdW5jdGlvblwiID8gZGVmaW5pdGlvbih0aGlzKSA6IGRlZmluaXRpb247XG5cbiAgICBpZiAodHlwZW9mIGV4cGFuc2lvbiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgdmFyIG51bUFyZ3MgPSAwO1xuXG4gICAgICBpZiAoZXhwYW5zaW9uLmluZGV4T2YoXCIjXCIpICE9PSAtMSkge1xuICAgICAgICB2YXIgc3RyaXBwZWQgPSBleHBhbnNpb24ucmVwbGFjZSgvIyMvZywgXCJcIik7XG5cbiAgICAgICAgd2hpbGUgKHN0cmlwcGVkLmluZGV4T2YoXCIjXCIgKyAobnVtQXJncyArIDEpKSAhPT0gLTEpIHtcbiAgICAgICAgICArK251bUFyZ3M7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGJvZHlMZXhlciA9IG5ldyBMZXhlcihleHBhbnNpb24sIHRoaXMuc2V0dGluZ3MpO1xuICAgICAgdmFyIHRva2VucyA9IFtdO1xuICAgICAgdmFyIHRvayA9IGJvZHlMZXhlci5sZXgoKTtcblxuICAgICAgd2hpbGUgKHRvay50ZXh0ICE9PSBcIkVPRlwiKSB7XG4gICAgICAgIHRva2Vucy5wdXNoKHRvayk7XG4gICAgICAgIHRvayA9IGJvZHlMZXhlci5sZXgoKTtcbiAgICAgIH1cblxuICAgICAgdG9rZW5zLnJldmVyc2UoKTsgLy8gdG8gZml0IGluIHdpdGggc3RhY2sgdXNpbmcgcHVzaCBhbmQgcG9wXG5cbiAgICAgIHZhciBleHBhbmRlZCA9IHtcbiAgICAgICAgdG9rZW5zOiB0b2tlbnMsXG4gICAgICAgIG51bUFyZ3M6IG51bUFyZ3NcbiAgICAgIH07XG4gICAgICByZXR1cm4gZXhwYW5kZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4cGFuc2lvbjtcbiAgfVxuICAvKipcbiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgYSBjb21tYW5kIGlzIGN1cnJlbnRseSBcImRlZmluZWRcIiAoaGFzIHNvbWVcbiAgICogZnVuY3Rpb25hbGl0eSksIG1lYW5pbmcgdGhhdCBpdCdzIGEgbWFjcm8gKGluIHRoZSBjdXJyZW50IGdyb3VwKSxcbiAgICogYSBmdW5jdGlvbiwgYSBzeW1ib2wsIG9yIG9uZSBvZiB0aGUgc3BlY2lhbCBjb21tYW5kcyBsaXN0ZWQgaW5cbiAgICogYGltcGxpY2l0Q29tbWFuZHNgLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pc0RlZmluZWQgPSBmdW5jdGlvbiBpc0RlZmluZWQobmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1hY3Jvcy5oYXMobmFtZSkgfHwgc3JjX2Z1bmN0aW9ucy5oYXNPd25Qcm9wZXJ0eShuYW1lKSB8fCBzcmNfc3ltYm9scy5tYXRoLmhhc093blByb3BlcnR5KG5hbWUpIHx8IHNyY19zeW1ib2xzLnRleHQuaGFzT3duUHJvcGVydHkobmFtZSkgfHwgaW1wbGljaXRDb21tYW5kcy5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgfVxuICAvKipcbiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgYSBjb21tYW5kIGlzIGV4cGFuZGFibGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmlzRXhwYW5kYWJsZSA9IGZ1bmN0aW9uIGlzRXhwYW5kYWJsZShuYW1lKSB7XG4gICAgdmFyIG1hY3JvID0gdGhpcy5tYWNyb3MuZ2V0KG5hbWUpO1xuICAgIHJldHVybiBtYWNybyAhPSBudWxsID8gdHlwZW9mIG1hY3JvID09PSBcInN0cmluZ1wiIHx8IHR5cGVvZiBtYWNybyA9PT0gXCJmdW5jdGlvblwiIHx8ICFtYWNyby51bmV4cGFuZGFibGUgOiBzcmNfZnVuY3Rpb25zLmhhc093blByb3BlcnR5KG5hbWUpICYmICFzcmNfZnVuY3Rpb25zW25hbWVdLnByaW1pdGl2ZTtcbiAgfTtcblxuICByZXR1cm4gTWFjcm9FeHBhbmRlcjtcbn0oKTtcblxuXG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9zcmMvUGFyc2VyLmpzXG4vKiBlc2xpbnQgbm8tY29uc3RhbnQtY29uZGl0aW9uOjAgKi9cblxuXG5cblxuXG5cblxuXG5cbiAvLyBQcmUtZXZhbHVhdGUgYm90aCBtb2R1bGVzIGFzIHVuaWNvZGVTeW1ib2xzIHJlcXVpcmUgU3RyaW5nLm5vcm1hbGl6ZSgpXG5cbnZhciB1bmljb2RlQWNjZW50cyA9IHtcbiAgXCLMgVwiOiB7XG4gICAgXCJ0ZXh0XCI6IFwiXFxcXCdcIixcbiAgICBcIm1hdGhcIjogXCJcXFxcYWN1dGVcIlxuICB9LFxuICBcIsyAXCI6IHtcbiAgICBcInRleHRcIjogXCJcXFxcYFwiLFxuICAgIFwibWF0aFwiOiBcIlxcXFxncmF2ZVwiXG4gIH0sXG4gIFwizIhcIjoge1xuICAgIFwidGV4dFwiOiBcIlxcXFxcXFwiXCIsXG4gICAgXCJtYXRoXCI6IFwiXFxcXGRkb3RcIlxuICB9LFxuICBcIsyDXCI6IHtcbiAgICBcInRleHRcIjogXCJcXFxcflwiLFxuICAgIFwibWF0aFwiOiBcIlxcXFx0aWxkZVwiXG4gIH0sXG4gIFwizIRcIjoge1xuICAgIFwidGV4dFwiOiBcIlxcXFw9XCIsXG4gICAgXCJtYXRoXCI6IFwiXFxcXGJhclwiXG4gIH0sXG4gIFwizIZcIjoge1xuICAgIFwidGV4dFwiOiBcIlxcXFx1XCIsXG4gICAgXCJtYXRoXCI6IFwiXFxcXGJyZXZlXCJcbiAgfSxcbiAgXCLMjFwiOiB7XG4gICAgXCJ0ZXh0XCI6IFwiXFxcXHZcIixcbiAgICBcIm1hdGhcIjogXCJcXFxcY2hlY2tcIlxuICB9LFxuICBcIsyCXCI6IHtcbiAgICBcInRleHRcIjogXCJcXFxcXlwiLFxuICAgIFwibWF0aFwiOiBcIlxcXFxoYXRcIlxuICB9LFxuICBcIsyHXCI6IHtcbiAgICBcInRleHRcIjogXCJcXFxcLlwiLFxuICAgIFwibWF0aFwiOiBcIlxcXFxkb3RcIlxuICB9LFxuICBcIsyKXCI6IHtcbiAgICBcInRleHRcIjogXCJcXFxcclwiLFxuICAgIFwibWF0aFwiOiBcIlxcXFxtYXRocmluZ1wiXG4gIH0sXG4gIFwizItcIjoge1xuICAgIFwidGV4dFwiOiBcIlxcXFxIXCJcbiAgfSxcbiAgXCLMp1wiOiB7XG4gICAgXCJ0ZXh0XCI6IFwiXFxcXGNcIlxuICB9XG59O1xudmFyIHVuaWNvZGVTeW1ib2xzID0ge1xuICBcIsOhXCI6IFwiYcyBXCIsXG4gIFwiw6BcIjogXCJhzIBcIixcbiAgXCLDpFwiOiBcImHMiFwiLFxuICBcIsefXCI6IFwiYcyIzIRcIixcbiAgXCLDo1wiOiBcImHMg1wiLFxuICBcIsSBXCI6IFwiYcyEXCIsXG4gIFwixINcIjogXCJhzIZcIixcbiAgXCLhuq9cIjogXCJhzIbMgVwiLFxuICBcIuG6sVwiOiBcImHMhsyAXCIsXG4gIFwi4bq1XCI6IFwiYcyGzINcIixcbiAgXCLHjlwiOiBcImHMjFwiLFxuICBcIsOiXCI6IFwiYcyCXCIsXG4gIFwi4bqlXCI6IFwiYcyCzIFcIixcbiAgXCLhuqdcIjogXCJhzILMgFwiLFxuICBcIuG6q1wiOiBcImHMgsyDXCIsXG4gIFwiyKdcIjogXCJhzIdcIixcbiAgXCLHoVwiOiBcImHMh8yEXCIsXG4gIFwiw6VcIjogXCJhzIpcIixcbiAgXCLHu1wiOiBcImHMisyBXCIsXG4gIFwi4biDXCI6IFwiYsyHXCIsXG4gIFwixIdcIjogXCJjzIFcIixcbiAgXCLhuIlcIjogXCJjzKfMgVwiLFxuICBcIsSNXCI6IFwiY8yMXCIsXG4gIFwixIlcIjogXCJjzIJcIixcbiAgXCLEi1wiOiBcImPMh1wiLFxuICBcIsOnXCI6IFwiY8ynXCIsXG4gIFwixI9cIjogXCJkzIxcIixcbiAgXCLhuItcIjogXCJkzIdcIixcbiAgXCLhuJFcIjogXCJkzKdcIixcbiAgXCLDqVwiOiBcImXMgVwiLFxuICBcIsOoXCI6IFwiZcyAXCIsXG4gIFwiw6tcIjogXCJlzIhcIixcbiAgXCLhur1cIjogXCJlzINcIixcbiAgXCLEk1wiOiBcImXMhFwiLFxuICBcIuG4l1wiOiBcImXMhMyBXCIsXG4gIFwi4biVXCI6IFwiZcyEzIBcIixcbiAgXCLElVwiOiBcImXMhlwiLFxuICBcIuG4nVwiOiBcImXMp8yGXCIsXG4gIFwixJtcIjogXCJlzIxcIixcbiAgXCLDqlwiOiBcImXMglwiLFxuICBcIuG6v1wiOiBcImXMgsyBXCIsXG4gIFwi4buBXCI6IFwiZcyCzIBcIixcbiAgXCLhu4VcIjogXCJlzILMg1wiLFxuICBcIsSXXCI6IFwiZcyHXCIsXG4gIFwiyKlcIjogXCJlzKdcIixcbiAgXCLhuJ9cIjogXCJmzIdcIixcbiAgXCLHtVwiOiBcImfMgVwiLFxuICBcIuG4oVwiOiBcImfMhFwiLFxuICBcIsSfXCI6IFwiZ8yGXCIsXG4gIFwix6dcIjogXCJnzIxcIixcbiAgXCLEnVwiOiBcImfMglwiLFxuICBcIsShXCI6IFwiZ8yHXCIsXG4gIFwixKNcIjogXCJnzKdcIixcbiAgXCLhuKdcIjogXCJozIhcIixcbiAgXCLIn1wiOiBcImjMjFwiLFxuICBcIsSlXCI6IFwiaMyCXCIsXG4gIFwi4bijXCI6IFwiaMyHXCIsXG4gIFwi4bipXCI6IFwiaMynXCIsXG4gIFwiw61cIjogXCJpzIFcIixcbiAgXCLDrFwiOiBcImnMgFwiLFxuICBcIsOvXCI6IFwiacyIXCIsXG4gIFwi4bivXCI6IFwiacyIzIFcIixcbiAgXCLEqVwiOiBcImnMg1wiLFxuICBcIsSrXCI6IFwiacyEXCIsXG4gIFwixK1cIjogXCJpzIZcIixcbiAgXCLHkFwiOiBcImnMjFwiLFxuICBcIsOuXCI6IFwiacyCXCIsXG4gIFwix7BcIjogXCJqzIxcIixcbiAgXCLEtVwiOiBcImrMglwiLFxuICBcIuG4sVwiOiBcImvMgVwiLFxuICBcIsepXCI6IFwia8yMXCIsXG4gIFwixLdcIjogXCJrzKdcIixcbiAgXCLEulwiOiBcImzMgVwiLFxuICBcIsS+XCI6IFwibMyMXCIsXG4gIFwixLxcIjogXCJszKdcIixcbiAgXCLhuL9cIjogXCJtzIFcIixcbiAgXCLhuYFcIjogXCJtzIdcIixcbiAgXCLFhFwiOiBcIm7MgVwiLFxuICBcIse5XCI6IFwibsyAXCIsXG4gIFwiw7FcIjogXCJuzINcIixcbiAgXCLFiFwiOiBcIm7MjFwiLFxuICBcIuG5hVwiOiBcIm7Mh1wiLFxuICBcIsWGXCI6IFwibsynXCIsXG4gIFwiw7NcIjogXCJvzIFcIixcbiAgXCLDslwiOiBcIm/MgFwiLFxuICBcIsO2XCI6IFwib8yIXCIsXG4gIFwiyKtcIjogXCJvzIjMhFwiLFxuICBcIsO1XCI6IFwib8yDXCIsXG4gIFwi4bmNXCI6IFwib8yDzIFcIixcbiAgXCLhuY9cIjogXCJvzIPMiFwiLFxuICBcIsitXCI6IFwib8yDzIRcIixcbiAgXCLFjVwiOiBcIm/MhFwiLFxuICBcIuG5k1wiOiBcIm/MhMyBXCIsXG4gIFwi4bmRXCI6IFwib8yEzIBcIixcbiAgXCLFj1wiOiBcIm/MhlwiLFxuICBcIseSXCI6IFwib8yMXCIsXG4gIFwiw7RcIjogXCJvzIJcIixcbiAgXCLhu5FcIjogXCJvzILMgVwiLFxuICBcIuG7k1wiOiBcIm/MgsyAXCIsXG4gIFwi4buXXCI6IFwib8yCzINcIixcbiAgXCLIr1wiOiBcIm/Mh1wiLFxuICBcIsixXCI6IFwib8yHzIRcIixcbiAgXCLFkVwiOiBcIm/Mi1wiLFxuICBcIuG5lVwiOiBcInDMgVwiLFxuICBcIuG5l1wiOiBcInDMh1wiLFxuICBcIsWVXCI6IFwicsyBXCIsXG4gIFwixZlcIjogXCJyzIxcIixcbiAgXCLhuZlcIjogXCJyzIdcIixcbiAgXCLFl1wiOiBcInLMp1wiLFxuICBcIsWbXCI6IFwic8yBXCIsXG4gIFwi4bmlXCI6IFwic8yBzIdcIixcbiAgXCLFoVwiOiBcInPMjFwiLFxuICBcIuG5p1wiOiBcInPMjMyHXCIsXG4gIFwixZ1cIjogXCJzzIJcIixcbiAgXCLhuaFcIjogXCJzzIdcIixcbiAgXCLFn1wiOiBcInPMp1wiLFxuICBcIuG6l1wiOiBcInTMiFwiLFxuICBcIsWlXCI6IFwidMyMXCIsXG4gIFwi4bmrXCI6IFwidMyHXCIsXG4gIFwixaNcIjogXCJ0zKdcIixcbiAgXCLDulwiOiBcInXMgVwiLFxuICBcIsO5XCI6IFwidcyAXCIsXG4gIFwiw7xcIjogXCJ1zIhcIixcbiAgXCLHmFwiOiBcInXMiMyBXCIsXG4gIFwix5xcIjogXCJ1zIjMgFwiLFxuICBcIseWXCI6IFwidcyIzIRcIixcbiAgXCLHmlwiOiBcInXMiMyMXCIsXG4gIFwixalcIjogXCJ1zINcIixcbiAgXCLhublcIjogXCJ1zIPMgVwiLFxuICBcIsWrXCI6IFwidcyEXCIsXG4gIFwi4bm7XCI6IFwidcyEzIhcIixcbiAgXCLFrVwiOiBcInXMhlwiLFxuICBcIseUXCI6IFwidcyMXCIsXG4gIFwiw7tcIjogXCJ1zIJcIixcbiAgXCLFr1wiOiBcInXMilwiLFxuICBcIsWxXCI6IFwidcyLXCIsXG4gIFwi4bm9XCI6IFwidsyDXCIsXG4gIFwi4bqDXCI6IFwid8yBXCIsXG4gIFwi4bqBXCI6IFwid8yAXCIsXG4gIFwi4bqFXCI6IFwid8yIXCIsXG4gIFwixbVcIjogXCJ3zIJcIixcbiAgXCLhuodcIjogXCJ3zIdcIixcbiAgXCLhuphcIjogXCJ3zIpcIixcbiAgXCLhuo1cIjogXCJ4zIhcIixcbiAgXCLhuotcIjogXCJ4zIdcIixcbiAgXCLDvVwiOiBcInnMgVwiLFxuICBcIuG7s1wiOiBcInnMgFwiLFxuICBcIsO/XCI6IFwiecyIXCIsXG4gIFwi4bu5XCI6IFwiecyDXCIsXG4gIFwiyLNcIjogXCJ5zIRcIixcbiAgXCLFt1wiOiBcInnMglwiLFxuICBcIuG6j1wiOiBcInnMh1wiLFxuICBcIuG6mVwiOiBcInnMilwiLFxuICBcIsW6XCI6IFwiesyBXCIsXG4gIFwixb5cIjogXCJ6zIxcIixcbiAgXCLhupFcIjogXCJ6zIJcIixcbiAgXCLFvFwiOiBcInrMh1wiLFxuICBcIsOBXCI6IFwiQcyBXCIsXG4gIFwiw4BcIjogXCJBzIBcIixcbiAgXCLDhFwiOiBcIkHMiFwiLFxuICBcIseeXCI6IFwiQcyIzIRcIixcbiAgXCLDg1wiOiBcIkHMg1wiLFxuICBcIsSAXCI6IFwiQcyEXCIsXG4gIFwixIJcIjogXCJBzIZcIixcbiAgXCLhuq5cIjogXCJBzIbMgVwiLFxuICBcIuG6sFwiOiBcIkHMhsyAXCIsXG4gIFwi4bq0XCI6IFwiQcyGzINcIixcbiAgXCLHjVwiOiBcIkHMjFwiLFxuICBcIsOCXCI6IFwiQcyCXCIsXG4gIFwi4bqkXCI6IFwiQcyCzIFcIixcbiAgXCLhuqZcIjogXCJBzILMgFwiLFxuICBcIuG6qlwiOiBcIkHMgsyDXCIsXG4gIFwiyKZcIjogXCJBzIdcIixcbiAgXCLHoFwiOiBcIkHMh8yEXCIsXG4gIFwiw4VcIjogXCJBzIpcIixcbiAgXCLHulwiOiBcIkHMisyBXCIsXG4gIFwi4biCXCI6IFwiQsyHXCIsXG4gIFwixIZcIjogXCJDzIFcIixcbiAgXCLhuIhcIjogXCJDzKfMgVwiLFxuICBcIsSMXCI6IFwiQ8yMXCIsXG4gIFwixIhcIjogXCJDzIJcIixcbiAgXCLEilwiOiBcIkPMh1wiLFxuICBcIsOHXCI6IFwiQ8ynXCIsXG4gIFwixI5cIjogXCJEzIxcIixcbiAgXCLhuIpcIjogXCJEzIdcIixcbiAgXCLhuJBcIjogXCJEzKdcIixcbiAgXCLDiVwiOiBcIkXMgVwiLFxuICBcIsOIXCI6IFwiRcyAXCIsXG4gIFwiw4tcIjogXCJFzIhcIixcbiAgXCLhurxcIjogXCJFzINcIixcbiAgXCLEklwiOiBcIkXMhFwiLFxuICBcIuG4llwiOiBcIkXMhMyBXCIsXG4gIFwi4biUXCI6IFwiRcyEzIBcIixcbiAgXCLElFwiOiBcIkXMhlwiLFxuICBcIuG4nFwiOiBcIkXMp8yGXCIsXG4gIFwixJpcIjogXCJFzIxcIixcbiAgXCLDilwiOiBcIkXMglwiLFxuICBcIuG6vlwiOiBcIkXMgsyBXCIsXG4gIFwi4buAXCI6IFwiRcyCzIBcIixcbiAgXCLhu4RcIjogXCJFzILMg1wiLFxuICBcIsSWXCI6IFwiRcyHXCIsXG4gIFwiyKhcIjogXCJFzKdcIixcbiAgXCLhuJ5cIjogXCJGzIdcIixcbiAgXCLHtFwiOiBcIkfMgVwiLFxuICBcIuG4oFwiOiBcIkfMhFwiLFxuICBcIsSeXCI6IFwiR8yGXCIsXG4gIFwix6ZcIjogXCJHzIxcIixcbiAgXCLEnFwiOiBcIkfMglwiLFxuICBcIsSgXCI6IFwiR8yHXCIsXG4gIFwixKJcIjogXCJHzKdcIixcbiAgXCLhuKZcIjogXCJIzIhcIixcbiAgXCLInlwiOiBcIkjMjFwiLFxuICBcIsSkXCI6IFwiSMyCXCIsXG4gIFwi4biiXCI6IFwiSMyHXCIsXG4gIFwi4bioXCI6IFwiSMynXCIsXG4gIFwiw41cIjogXCJJzIFcIixcbiAgXCLDjFwiOiBcIknMgFwiLFxuICBcIsOPXCI6IFwiScyIXCIsXG4gIFwi4biuXCI6IFwiScyIzIFcIixcbiAgXCLEqFwiOiBcIknMg1wiLFxuICBcIsSqXCI6IFwiScyEXCIsXG4gIFwixKxcIjogXCJJzIZcIixcbiAgXCLHj1wiOiBcIknMjFwiLFxuICBcIsOOXCI6IFwiScyCXCIsXG4gIFwixLBcIjogXCJJzIdcIixcbiAgXCLEtFwiOiBcIkrMglwiLFxuICBcIuG4sFwiOiBcIkvMgVwiLFxuICBcIseoXCI6IFwiS8yMXCIsXG4gIFwixLZcIjogXCJLzKdcIixcbiAgXCLEuVwiOiBcIkzMgVwiLFxuICBcIsS9XCI6IFwiTMyMXCIsXG4gIFwixLtcIjogXCJMzKdcIixcbiAgXCLhuL5cIjogXCJNzIFcIixcbiAgXCLhuYBcIjogXCJNzIdcIixcbiAgXCLFg1wiOiBcIk7MgVwiLFxuICBcIse4XCI6IFwiTsyAXCIsXG4gIFwiw5FcIjogXCJOzINcIixcbiAgXCLFh1wiOiBcIk7MjFwiLFxuICBcIuG5hFwiOiBcIk7Mh1wiLFxuICBcIsWFXCI6IFwiTsynXCIsXG4gIFwiw5NcIjogXCJPzIFcIixcbiAgXCLDklwiOiBcIk/MgFwiLFxuICBcIsOWXCI6IFwiT8yIXCIsXG4gIFwiyKpcIjogXCJPzIjMhFwiLFxuICBcIsOVXCI6IFwiT8yDXCIsXG4gIFwi4bmMXCI6IFwiT8yDzIFcIixcbiAgXCLhuY5cIjogXCJPzIPMiFwiLFxuICBcIsisXCI6IFwiT8yDzIRcIixcbiAgXCLFjFwiOiBcIk/MhFwiLFxuICBcIuG5klwiOiBcIk/MhMyBXCIsXG4gIFwi4bmQXCI6IFwiT8yEzIBcIixcbiAgXCLFjlwiOiBcIk/MhlwiLFxuICBcIseRXCI6IFwiT8yMXCIsXG4gIFwiw5RcIjogXCJPzIJcIixcbiAgXCLhu5BcIjogXCJPzILMgVwiLFxuICBcIuG7klwiOiBcIk/MgsyAXCIsXG4gIFwi4buWXCI6IFwiT8yCzINcIixcbiAgXCLIrlwiOiBcIk/Mh1wiLFxuICBcIsiwXCI6IFwiT8yHzIRcIixcbiAgXCLFkFwiOiBcIk/Mi1wiLFxuICBcIuG5lFwiOiBcIlDMgVwiLFxuICBcIuG5llwiOiBcIlDMh1wiLFxuICBcIsWUXCI6IFwiUsyBXCIsXG4gIFwixZhcIjogXCJSzIxcIixcbiAgXCLhuZhcIjogXCJSzIdcIixcbiAgXCLFllwiOiBcIlLMp1wiLFxuICBcIsWaXCI6IFwiU8yBXCIsXG4gIFwi4bmkXCI6IFwiU8yBzIdcIixcbiAgXCLFoFwiOiBcIlPMjFwiLFxuICBcIuG5plwiOiBcIlPMjMyHXCIsXG4gIFwixZxcIjogXCJTzIJcIixcbiAgXCLhuaBcIjogXCJTzIdcIixcbiAgXCLFnlwiOiBcIlPMp1wiLFxuICBcIsWkXCI6IFwiVMyMXCIsXG4gIFwi4bmqXCI6IFwiVMyHXCIsXG4gIFwixaJcIjogXCJUzKdcIixcbiAgXCLDmlwiOiBcIlXMgVwiLFxuICBcIsOZXCI6IFwiVcyAXCIsXG4gIFwiw5xcIjogXCJVzIhcIixcbiAgXCLHl1wiOiBcIlXMiMyBXCIsXG4gIFwix5tcIjogXCJVzIjMgFwiLFxuICBcIseVXCI6IFwiVcyIzIRcIixcbiAgXCLHmVwiOiBcIlXMiMyMXCIsXG4gIFwixahcIjogXCJVzINcIixcbiAgXCLhubhcIjogXCJVzIPMgVwiLFxuICBcIsWqXCI6IFwiVcyEXCIsXG4gIFwi4bm6XCI6IFwiVcyEzIhcIixcbiAgXCLFrFwiOiBcIlXMhlwiLFxuICBcIseTXCI6IFwiVcyMXCIsXG4gIFwiw5tcIjogXCJVzIJcIixcbiAgXCLFrlwiOiBcIlXMilwiLFxuICBcIsWwXCI6IFwiVcyLXCIsXG4gIFwi4bm8XCI6IFwiVsyDXCIsXG4gIFwi4bqCXCI6IFwiV8yBXCIsXG4gIFwi4bqAXCI6IFwiV8yAXCIsXG4gIFwi4bqEXCI6IFwiV8yIXCIsXG4gIFwixbRcIjogXCJXzIJcIixcbiAgXCLhuoZcIjogXCJXzIdcIixcbiAgXCLhuoxcIjogXCJYzIhcIixcbiAgXCLhuopcIjogXCJYzIdcIixcbiAgXCLDnVwiOiBcIlnMgVwiLFxuICBcIuG7slwiOiBcIlnMgFwiLFxuICBcIsW4XCI6IFwiWcyIXCIsXG4gIFwi4bu4XCI6IFwiWcyDXCIsXG4gIFwiyLJcIjogXCJZzIRcIixcbiAgXCLFtlwiOiBcIlnMglwiLFxuICBcIuG6jlwiOiBcIlnMh1wiLFxuICBcIsW5XCI6IFwiWsyBXCIsXG4gIFwixb1cIjogXCJazIxcIixcbiAgXCLhupBcIjogXCJazIJcIixcbiAgXCLFu1wiOiBcIlrMh1wiLFxuICBcIs6sXCI6IFwizrHMgVwiLFxuICBcIuG9sFwiOiBcIs6xzIBcIixcbiAgXCLhvrFcIjogXCLOscyEXCIsXG4gIFwi4b6wXCI6IFwizrHMhlwiLFxuICBcIs6tXCI6IFwizrXMgVwiLFxuICBcIuG9slwiOiBcIs61zIBcIixcbiAgXCLOrlwiOiBcIs63zIFcIixcbiAgXCLhvbRcIjogXCLOt8yAXCIsXG4gIFwizq9cIjogXCLOucyBXCIsXG4gIFwi4b22XCI6IFwizrnMgFwiLFxuICBcIs+KXCI6IFwizrnMiFwiLFxuICBcIs6QXCI6IFwizrnMiMyBXCIsXG4gIFwi4b+SXCI6IFwizrnMiMyAXCIsXG4gIFwi4b+RXCI6IFwizrnMhFwiLFxuICBcIuG/kFwiOiBcIs65zIZcIixcbiAgXCLPjFwiOiBcIs6/zIFcIixcbiAgXCLhvbhcIjogXCLOv8yAXCIsXG4gIFwiz41cIjogXCLPhcyBXCIsXG4gIFwi4b26XCI6IFwiz4XMgFwiLFxuICBcIs+LXCI6IFwiz4XMiFwiLFxuICBcIs6wXCI6IFwiz4XMiMyBXCIsXG4gIFwi4b+iXCI6IFwiz4XMiMyAXCIsXG4gIFwi4b+hXCI6IFwiz4XMhFwiLFxuICBcIuG/oFwiOiBcIs+FzIZcIixcbiAgXCLPjlwiOiBcIs+JzIFcIixcbiAgXCLhvbxcIjogXCLPicyAXCIsXG4gIFwizo5cIjogXCLOpcyBXCIsXG4gIFwi4b+qXCI6IFwizqXMgFwiLFxuICBcIs6rXCI6IFwizqXMiFwiLFxuICBcIuG/qVwiOiBcIs6lzIRcIixcbiAgXCLhv6hcIjogXCLOpcyGXCIsXG4gIFwizo9cIjogXCLOqcyBXCIsXG4gIFwi4b+6XCI6IFwizqnMgFwiXG59O1xuXG4vKipcbiAqIFRoaXMgZmlsZSBjb250YWlucyB0aGUgcGFyc2VyIHVzZWQgdG8gcGFyc2Ugb3V0IGEgVGVYIGV4cHJlc3Npb24gZnJvbSB0aGVcbiAqIGlucHV0LiBTaW5jZSBUZVggaXNuJ3QgY29udGV4dC1mcmVlLCBzdGFuZGFyZCBwYXJzZXJzIGRvbid0IHdvcmsgcGFydGljdWxhcmx5XG4gKiB3ZWxsLlxuICpcbiAqIFRoZSBzdHJhdGVneSBvZiB0aGlzIHBhcnNlciBpcyBhcyBzdWNoOlxuICpcbiAqIFRoZSBtYWluIGZ1bmN0aW9ucyAodGhlIGAucGFyc2UuLi5gIG9uZXMpIHRha2UgYSBwb3NpdGlvbiBpbiB0aGUgY3VycmVudFxuICogcGFyc2Ugc3RyaW5nIHRvIHBhcnNlIHRva2VucyBmcm9tLiBUaGUgbGV4ZXIgKGZvdW5kIGluIExleGVyLmpzLCBzdG9yZWQgYXRcbiAqIHRoaXMuZ3VsbGV0LmxleGVyKSBhbHNvIHN1cHBvcnRzIHB1bGxpbmcgb3V0IHRva2VucyBhdCBhcmJpdHJhcnkgcGxhY2VzLiBXaGVuXG4gKiBpbmRpdmlkdWFsIHRva2VucyBhcmUgbmVlZGVkIGF0IGEgcG9zaXRpb24sIHRoZSBsZXhlciBpcyBjYWxsZWQgdG8gcHVsbCBvdXQgYVxuICogdG9rZW4sIHdoaWNoIGlzIHRoZW4gdXNlZC5cbiAqXG4gKiBUaGUgcGFyc2VyIGhhcyBhIHByb3BlcnR5IGNhbGxlZCBcIm1vZGVcIiBpbmRpY2F0aW5nIHRoZSBtb2RlIHRoYXRcbiAqIHRoZSBwYXJzZXIgaXMgY3VycmVudGx5IGluLiBDdXJyZW50bHkgaXQgaGFzIHRvIGJlIG9uZSBvZiBcIm1hdGhcIiBvclxuICogXCJ0ZXh0XCIsIHdoaWNoIGRlbm90ZXMgd2hldGhlciB0aGUgY3VycmVudCBlbnZpcm9ubWVudCBpcyBhIG1hdGgteVxuICogb25lIG9yIGEgdGV4dC15IG9uZSAoZS5nLiBpbnNpZGUgXFx0ZXh0KS4gQ3VycmVudGx5LCB0aGlzIHNlcnZlcyB0b1xuICogbGltaXQgdGhlIGZ1bmN0aW9ucyB3aGljaCBjYW4gYmUgdXNlZCBpbiB0ZXh0IG1vZGUuXG4gKlxuICogVGhlIG1haW4gZnVuY3Rpb25zIHRoZW4gcmV0dXJuIGFuIG9iamVjdCB3aGljaCBjb250YWlucyB0aGUgdXNlZnVsIGRhdGEgdGhhdFxuICogd2FzIHBhcnNlZCBhdCBpdHMgZ2l2ZW4gcG9pbnQsIGFuZCBhIG5ldyBwb3NpdGlvbiBhdCB0aGUgZW5kIG9mIHRoZSBwYXJzZWRcbiAqIGRhdGEuIFRoZSBtYWluIGZ1bmN0aW9ucyBjYW4gY2FsbCBlYWNoIG90aGVyIGFuZCBjb250aW51ZSB0aGUgcGFyc2luZyBieVxuICogdXNpbmcgdGhlIHJldHVybmVkIHBvc2l0aW9uIGFzIGEgbmV3IHN0YXJ0aW5nIHBvaW50LlxuICpcbiAqIFRoZXJlIGFyZSBhbHNvIGV4dHJhIGAuaGFuZGxlLi4uYCBmdW5jdGlvbnMsIHdoaWNoIHB1bGwgb3V0IHNvbWUgcmV1c2VkXG4gKiBmdW5jdGlvbmFsaXR5IGludG8gc2VsZi1jb250YWluZWQgZnVuY3Rpb25zLlxuICpcbiAqIFRoZSBmdW5jdGlvbnMgcmV0dXJuIFBhcnNlTm9kZXMuXG4gKi9cbnZhciBQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQYXJzZXIoaW5wdXQsIHNldHRpbmdzKSB7XG4gICAgdGhpcy5tb2RlID0gdm9pZCAwO1xuICAgIHRoaXMuZ3VsbGV0ID0gdm9pZCAwO1xuICAgIHRoaXMuc2V0dGluZ3MgPSB2b2lkIDA7XG4gICAgdGhpcy5sZWZ0cmlnaHREZXB0aCA9IHZvaWQgMDtcbiAgICB0aGlzLm5leHRUb2tlbiA9IHZvaWQgMDtcbiAgICAvLyBTdGFydCBpbiBtYXRoIG1vZGVcbiAgICB0aGlzLm1vZGUgPSBcIm1hdGhcIjsgLy8gQ3JlYXRlIGEgbmV3IG1hY3JvIGV4cGFuZGVyIChndWxsZXQpIGFuZCAoaW5kaXJlY3RseSB2aWEgdGhhdCkgYWxzbyBhXG4gICAgLy8gbmV3IGxleGVyIChtb3V0aCkgZm9yIHRoaXMgcGFyc2VyIChzdG9tYWNoLCBpbiB0aGUgbGFuZ3VhZ2Ugb2YgVGVYKVxuXG4gICAgdGhpcy5ndWxsZXQgPSBuZXcgTWFjcm9FeHBhbmRlcihpbnB1dCwgc2V0dGluZ3MsIHRoaXMubW9kZSk7IC8vIFN0b3JlIHRoZSBzZXR0aW5ncyBmb3IgdXNlIGluIHBhcnNpbmdcblxuICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5nczsgLy8gQ291bnQgbGVmdHJpZ2h0IGRlcHRoIChmb3IgXFxtaWRkbGUgZXJyb3JzKVxuXG4gICAgdGhpcy5sZWZ0cmlnaHREZXB0aCA9IDA7XG4gIH1cbiAgLyoqXG4gICAqIENoZWNrcyBhIHJlc3VsdCB0byBtYWtlIHN1cmUgaXQgaGFzIHRoZSByaWdodCB0eXBlLCBhbmQgdGhyb3dzIGFuXG4gICAqIGFwcHJvcHJpYXRlIGVycm9yIG90aGVyd2lzZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUGFyc2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZXhwZWN0ID0gZnVuY3Rpb24gZXhwZWN0KHRleHQsIGNvbnN1bWUpIHtcbiAgICBpZiAoY29uc3VtZSA9PT0gdm9pZCAwKSB7XG4gICAgICBjb25zdW1lID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5mZXRjaCgpLnRleHQgIT09IHRleHQpIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkV4cGVjdGVkICdcIiArIHRleHQgKyBcIicsIGdvdCAnXCIgKyB0aGlzLmZldGNoKCkudGV4dCArIFwiJ1wiLCB0aGlzLmZldGNoKCkpO1xuICAgIH1cblxuICAgIGlmIChjb25zdW1lKSB7XG4gICAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERpc2NhcmRzIHRoZSBjdXJyZW50IGxvb2thaGVhZCB0b2tlbiwgY29uc2lkZXJpbmcgaXQgY29uc3VtZWQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNvbnN1bWUgPSBmdW5jdGlvbiBjb25zdW1lKCkge1xuICAgIHRoaXMubmV4dFRva2VuID0gbnVsbDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJuIHRoZSBjdXJyZW50IGxvb2thaGVhZCB0b2tlbiwgb3IgaWYgdGhlcmUgaXNuJ3Qgb25lIChhdCB0aGVcbiAgICogYmVnaW5uaW5nLCBvciBpZiB0aGUgcHJldmlvdXMgbG9va2FoZWFkIHRva2VuIHdhcyBjb25zdW1lKClkKSxcbiAgICogZmV0Y2ggdGhlIG5leHQgdG9rZW4gYXMgdGhlIG5ldyBsb29rYWhlYWQgdG9rZW4gYW5kIHJldHVybiBpdC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZmV0Y2ggPSBmdW5jdGlvbiBmZXRjaCgpIHtcbiAgICBpZiAodGhpcy5uZXh0VG9rZW4gPT0gbnVsbCkge1xuICAgICAgdGhpcy5uZXh0VG9rZW4gPSB0aGlzLmd1bGxldC5leHBhbmROZXh0VG9rZW4oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5uZXh0VG9rZW47XG4gIH1cbiAgLyoqXG4gICAqIFN3aXRjaGVzIGJldHdlZW4gXCJ0ZXh0XCIgYW5kIFwibWF0aFwiIG1vZGVzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zd2l0Y2hNb2RlID0gZnVuY3Rpb24gc3dpdGNoTW9kZShuZXdNb2RlKSB7XG4gICAgdGhpcy5tb2RlID0gbmV3TW9kZTtcbiAgICB0aGlzLmd1bGxldC5zd2l0Y2hNb2RlKG5ld01vZGUpO1xuICB9XG4gIC8qKlxuICAgKiBNYWluIHBhcnNpbmcgZnVuY3Rpb24sIHdoaWNoIHBhcnNlcyBhbiBlbnRpcmUgaW5wdXQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlID0gZnVuY3Rpb24gcGFyc2UoKSB7XG4gICAgaWYgKCF0aGlzLnNldHRpbmdzLmdsb2JhbEdyb3VwKSB7XG4gICAgICAvLyBDcmVhdGUgYSBncm91cCBuYW1lc3BhY2UgZm9yIHRoZSBtYXRoIGV4cHJlc3Npb24uXG4gICAgICAvLyAoTGFUZVggY3JlYXRlcyBhIG5ldyBncm91cCBmb3IgZXZlcnkgJC4uLiQsICQkLi4uJCQsIFxcWy4uLlxcXS4pXG4gICAgICB0aGlzLmd1bGxldC5iZWdpbkdyb3VwKCk7XG4gICAgfSAvLyBVc2Ugb2xkIFxcY29sb3IgYmVoYXZpb3IgKHNhbWUgYXMgTGFUZVgncyBcXHRleHRjb2xvcikgaWYgcmVxdWVzdGVkLlxuICAgIC8vIFdlIGRvIHRoaXMgd2l0aGluIHRoZSBncm91cCBmb3IgdGhlIG1hdGggZXhwcmVzc2lvbiwgc28gaXQgZG9lc24ndFxuICAgIC8vIHBvbGx1dGUgc2V0dGluZ3MubWFjcm9zLlxuXG5cbiAgICBpZiAodGhpcy5zZXR0aW5ncy5jb2xvcklzVGV4dENvbG9yKSB7XG4gICAgICB0aGlzLmd1bGxldC5tYWNyb3Muc2V0KFwiXFxcXGNvbG9yXCIsIFwiXFxcXHRleHRjb2xvclwiKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgLy8gVHJ5IHRvIHBhcnNlIHRoZSBpbnB1dFxuICAgICAgdmFyIHBhcnNlID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oZmFsc2UpOyAvLyBJZiB3ZSBzdWNjZWVkZWQsIG1ha2Ugc3VyZSB0aGVyZSdzIGFuIEVPRiBhdCB0aGUgZW5kXG5cbiAgICAgIHRoaXMuZXhwZWN0KFwiRU9GXCIpOyAvLyBFbmQgdGhlIGdyb3VwIG5hbWVzcGFjZSBmb3IgdGhlIGV4cHJlc3Npb25cblxuICAgICAgaWYgKCF0aGlzLnNldHRpbmdzLmdsb2JhbEdyb3VwKSB7XG4gICAgICAgIHRoaXMuZ3VsbGV0LmVuZEdyb3VwKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJzZTsgLy8gQ2xvc2UgYW55IGxlZnRvdmVyIGdyb3VwcyBpbiBjYXNlIG9mIGEgcGFyc2UgZXJyb3IuXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuZ3VsbGV0LmVuZEdyb3VwcygpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUGFyc2VzIGFuIFwiZXhwcmVzc2lvblwiLCB3aGljaCBpcyBhIGxpc3Qgb2YgYXRvbXMuXG4gICAqXG4gICAqIGBicmVha09uSW5maXhgOiBTaG91bGQgdGhlIHBhcnNpbmcgc3RvcCB3aGVuIHdlIGhpdCBpbmZpeCBub2Rlcz8gVGhpc1xuICAgKiAgICAgICAgICAgICAgICAgaGFwcGVucyB3aGVuIGZ1bmN0aW9ucyBoYXZlIGhpZ2hlciBwcmVjZW5kZW5jZSBoYW4gaW5maXhcbiAgICogICAgICAgICAgICAgICAgIG5vZGVzIGluIGltcGxpY2l0IHBhcnNlcy5cbiAgICpcbiAgICogYGJyZWFrT25Ub2tlblRleHRgOiBUaGUgdGV4dCBvZiB0aGUgdG9rZW4gdGhhdCB0aGUgZXhwcmVzc2lvbiBzaG91bGQgZW5kXG4gICAqICAgICAgICAgICAgICAgICAgICAgd2l0aCwgb3IgYG51bGxgIGlmIHNvbWV0aGluZyBlbHNlIHNob3VsZCBlbmQgdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbi5cbiAgICovXG4gIF9wcm90by5wYXJzZUV4cHJlc3Npb24gPSBmdW5jdGlvbiBwYXJzZUV4cHJlc3Npb24oYnJlYWtPbkluZml4LCBicmVha09uVG9rZW5UZXh0KSB7XG4gICAgdmFyIGJvZHkgPSBbXTsgLy8gS2VlcCBhZGRpbmcgYXRvbXMgdG8gdGhlIGJvZHkgdW50aWwgd2UgY2FuJ3QgcGFyc2UgYW55IG1vcmUgYXRvbXMgKGVpdGhlclxuICAgIC8vIHdlIHJlYWNoZWQgdGhlIGVuZCwgYSB9LCBvciBhIFxccmlnaHQpXG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgLy8gSWdub3JlIHNwYWNlcyBpbiBtYXRoIG1vZGVcbiAgICAgIGlmICh0aGlzLm1vZGUgPT09IFwibWF0aFwiKSB7XG4gICAgICAgIHRoaXMuY29uc3VtZVNwYWNlcygpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGV4ID0gdGhpcy5mZXRjaCgpO1xuXG4gICAgICBpZiAoUGFyc2VyLmVuZE9mRXhwcmVzc2lvbi5pbmRleE9mKGxleC50ZXh0KSAhPT0gLTEpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChicmVha09uVG9rZW5UZXh0ICYmIGxleC50ZXh0ID09PSBicmVha09uVG9rZW5UZXh0KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoYnJlYWtPbkluZml4ICYmIHNyY19mdW5jdGlvbnNbbGV4LnRleHRdICYmIHNyY19mdW5jdGlvbnNbbGV4LnRleHRdLmluZml4KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXRvbSA9IHRoaXMucGFyc2VBdG9tKGJyZWFrT25Ub2tlblRleHQpO1xuXG4gICAgICBpZiAoIWF0b20pIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2UgaWYgKGF0b20udHlwZSA9PT0gXCJpbnRlcm5hbFwiKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBib2R5LnB1c2goYXRvbSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubW9kZSA9PT0gXCJ0ZXh0XCIpIHtcbiAgICAgIHRoaXMuZm9ybUxpZ2F0dXJlcyhib2R5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5oYW5kbGVJbmZpeE5vZGVzKGJvZHkpO1xuICB9XG4gIC8qKlxuICAgKiBSZXdyaXRlcyBpbmZpeCBvcGVyYXRvcnMgc3VjaCBhcyBcXG92ZXIgd2l0aCBjb3JyZXNwb25kaW5nIGNvbW1hbmRzIHN1Y2hcbiAgICogYXMgXFxmcmFjLlxuICAgKlxuICAgKiBUaGVyZSBjYW4gb25seSBiZSBvbmUgaW5maXggb3BlcmF0b3IgcGVyIGdyb3VwLiAgSWYgdGhlcmUncyBtb3JlIHRoYW4gb25lXG4gICAqIHRoZW4gdGhlIGV4cHJlc3Npb24gaXMgYW1iaWd1b3VzLiAgVGhpcyBjYW4gYmUgcmVzb2x2ZWQgYnkgYWRkaW5nIHt9LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5oYW5kbGVJbmZpeE5vZGVzID0gZnVuY3Rpb24gaGFuZGxlSW5maXhOb2Rlcyhib2R5KSB7XG4gICAgdmFyIG92ZXJJbmRleCA9IC0xO1xuICAgIHZhciBmdW5jTmFtZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9keS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGJvZHlbaV0udHlwZSA9PT0gXCJpbmZpeFwiKSB7XG4gICAgICAgIGlmIChvdmVySW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwib25seSBvbmUgaW5maXggb3BlcmF0b3IgcGVyIGdyb3VwXCIsIGJvZHlbaV0udG9rZW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgb3ZlckluZGV4ID0gaTtcbiAgICAgICAgZnVuY05hbWUgPSBib2R5W2ldLnJlcGxhY2VXaXRoO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvdmVySW5kZXggIT09IC0xICYmIGZ1bmNOYW1lKSB7XG4gICAgICB2YXIgbnVtZXJOb2RlO1xuICAgICAgdmFyIGRlbm9tTm9kZTtcbiAgICAgIHZhciBudW1lckJvZHkgPSBib2R5LnNsaWNlKDAsIG92ZXJJbmRleCk7XG4gICAgICB2YXIgZGVub21Cb2R5ID0gYm9keS5zbGljZShvdmVySW5kZXggKyAxKTtcblxuICAgICAgaWYgKG51bWVyQm9keS5sZW5ndGggPT09IDEgJiYgbnVtZXJCb2R5WzBdLnR5cGUgPT09IFwib3JkZ3JvdXBcIikge1xuICAgICAgICBudW1lck5vZGUgPSBudW1lckJvZHlbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBudW1lck5vZGUgPSB7XG4gICAgICAgICAgdHlwZTogXCJvcmRncm91cFwiLFxuICAgICAgICAgIG1vZGU6IHRoaXMubW9kZSxcbiAgICAgICAgICBib2R5OiBudW1lckJvZHlcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlbm9tQm9keS5sZW5ndGggPT09IDEgJiYgZGVub21Cb2R5WzBdLnR5cGUgPT09IFwib3JkZ3JvdXBcIikge1xuICAgICAgICBkZW5vbU5vZGUgPSBkZW5vbUJvZHlbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZW5vbU5vZGUgPSB7XG4gICAgICAgICAgdHlwZTogXCJvcmRncm91cFwiLFxuICAgICAgICAgIG1vZGU6IHRoaXMubW9kZSxcbiAgICAgICAgICBib2R5OiBkZW5vbUJvZHlcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5vZGU7XG5cbiAgICAgIGlmIChmdW5jTmFtZSA9PT0gXCJcXFxcXFxcXGFib3ZlZnJhY1wiKSB7XG4gICAgICAgIG5vZGUgPSB0aGlzLmNhbGxGdW5jdGlvbihmdW5jTmFtZSwgW251bWVyTm9kZSwgYm9keVtvdmVySW5kZXhdLCBkZW5vbU5vZGVdLCBbXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlID0gdGhpcy5jYWxsRnVuY3Rpb24oZnVuY05hbWUsIFtudW1lck5vZGUsIGRlbm9tTm9kZV0sIFtdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFtub2RlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJvZHk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBIYW5kbGUgYSBzdWJzY3JpcHQgb3Igc3VwZXJzY3JpcHQgd2l0aCBuaWNlIGVycm9ycy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaGFuZGxlU3VwU3Vic2NyaXB0ID0gZnVuY3Rpb24gaGFuZGxlU3VwU3Vic2NyaXB0KG5hbWUgLy8gRm9yIGVycm9yIHJlcG9ydGluZy5cbiAgKSB7XG4gICAgdmFyIHN5bWJvbFRva2VuID0gdGhpcy5mZXRjaCgpO1xuICAgIHZhciBzeW1ib2wgPSBzeW1ib2xUb2tlbi50ZXh0O1xuICAgIHRoaXMuY29uc3VtZSgpO1xuICAgIHRoaXMuY29uc3VtZVNwYWNlcygpOyAvLyBpZ25vcmUgc3BhY2VzIGJlZm9yZSBzdXAvc3Vic2NyaXB0IGFyZ3VtZW50XG5cbiAgICB2YXIgZ3JvdXAgPSB0aGlzLnBhcnNlR3JvdXAobmFtZSk7XG5cbiAgICBpZiAoIWdyb3VwKSB7XG4gICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJFeHBlY3RlZCBncm91cCBhZnRlciAnXCIgKyBzeW1ib2wgKyBcIidcIiwgc3ltYm9sVG9rZW4pO1xuICAgIH1cblxuICAgIHJldHVybiBncm91cDtcbiAgfVxuICAvKipcbiAgICogQ29udmVydHMgdGhlIHRleHR1YWwgaW5wdXQgb2YgYW4gdW5zdXBwb3J0ZWQgY29tbWFuZCBpbnRvIGEgdGV4dCBub2RlXG4gICAqIGNvbnRhaW5lZCB3aXRoaW4gYSBjb2xvciBub2RlIHdob3NlIGNvbG9yIGlzIGRldGVybWluZWQgYnkgZXJyb3JDb2xvclxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5mb3JtYXRVbnN1cHBvcnRlZENtZCA9IGZ1bmN0aW9uIGZvcm1hdFVuc3VwcG9ydGVkQ21kKHRleHQpIHtcbiAgICB2YXIgdGV4dG9yZEFycmF5ID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRleHRvcmRBcnJheS5wdXNoKHtcbiAgICAgICAgdHlwZTogXCJ0ZXh0b3JkXCIsXG4gICAgICAgIG1vZGU6IFwidGV4dFwiLFxuICAgICAgICB0ZXh0OiB0ZXh0W2ldXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgdGV4dE5vZGUgPSB7XG4gICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgIG1vZGU6IHRoaXMubW9kZSxcbiAgICAgIGJvZHk6IHRleHRvcmRBcnJheVxuICAgIH07XG4gICAgdmFyIGNvbG9yTm9kZSA9IHtcbiAgICAgIHR5cGU6IFwiY29sb3JcIixcbiAgICAgIG1vZGU6IHRoaXMubW9kZSxcbiAgICAgIGNvbG9yOiB0aGlzLnNldHRpbmdzLmVycm9yQ29sb3IsXG4gICAgICBib2R5OiBbdGV4dE5vZGVdXG4gICAgfTtcbiAgICByZXR1cm4gY29sb3JOb2RlO1xuICB9XG4gIC8qKlxuICAgKiBQYXJzZXMgYSBncm91cCB3aXRoIG9wdGlvbmFsIHN1cGVyL3N1YnNjcmlwdHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlQXRvbSA9IGZ1bmN0aW9uIHBhcnNlQXRvbShicmVha09uVG9rZW5UZXh0KSB7XG4gICAgLy8gVGhlIGJvZHkgb2YgYW4gYXRvbSBpcyBhbiBpbXBsaWNpdCBncm91cCwgc28gdGhhdCB0aGluZ3MgbGlrZVxuICAgIC8vIFxcbGVmdCh4XFxyaWdodCleMiB3b3JrIGNvcnJlY3RseS5cbiAgICB2YXIgYmFzZSA9IHRoaXMucGFyc2VHcm91cChcImF0b21cIiwgYnJlYWtPblRva2VuVGV4dCk7IC8vIEluIHRleHQgbW9kZSwgd2UgZG9uJ3QgaGF2ZSBzdXBlcnNjcmlwdHMgb3Igc3Vic2NyaXB0c1xuXG4gICAgaWYgKHRoaXMubW9kZSA9PT0gXCJ0ZXh0XCIpIHtcbiAgICAgIHJldHVybiBiYXNlO1xuICAgIH0gLy8gTm90ZSB0aGF0IGJhc2UgbWF5IGJlIGVtcHR5IChpLmUuIG51bGwpIGF0IHRoaXMgcG9pbnQuXG5cblxuICAgIHZhciBzdXBlcnNjcmlwdDtcbiAgICB2YXIgc3Vic2NyaXB0O1xuXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIC8vIEd1YXJhbnRlZWQgaW4gbWF0aCBtb2RlLCBzbyBlYXQgYW55IHNwYWNlcyBmaXJzdC5cbiAgICAgIHRoaXMuY29uc3VtZVNwYWNlcygpOyAvLyBMZXggdGhlIGZpcnN0IHRva2VuXG5cbiAgICAgIHZhciBsZXggPSB0aGlzLmZldGNoKCk7XG5cbiAgICAgIGlmIChsZXgudGV4dCA9PT0gXCJcXFxcbGltaXRzXCIgfHwgbGV4LnRleHQgPT09IFwiXFxcXG5vbGltaXRzXCIpIHtcbiAgICAgICAgLy8gV2UgZ290IGEgbGltaXQgY29udHJvbFxuICAgICAgICBpZiAoYmFzZSAmJiBiYXNlLnR5cGUgPT09IFwib3BcIikge1xuICAgICAgICAgIHZhciBsaW1pdHMgPSBsZXgudGV4dCA9PT0gXCJcXFxcbGltaXRzXCI7XG4gICAgICAgICAgYmFzZS5saW1pdHMgPSBsaW1pdHM7XG4gICAgICAgICAgYmFzZS5hbHdheXNIYW5kbGVTdXBTdWIgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKGJhc2UgJiYgYmFzZS50eXBlID09PSBcIm9wZXJhdG9ybmFtZVwiKSB7XG4gICAgICAgICAgaWYgKGJhc2UuYWx3YXlzSGFuZGxlU3VwU3ViKSB7XG4gICAgICAgICAgICBiYXNlLmxpbWl0cyA9IGxleC50ZXh0ID09PSBcIlxcXFxsaW1pdHNcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiTGltaXQgY29udHJvbHMgbXVzdCBmb2xsb3cgYSBtYXRoIG9wZXJhdG9yXCIsIGxleCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICAgIH0gZWxzZSBpZiAobGV4LnRleHQgPT09IFwiXlwiKSB7XG4gICAgICAgIC8vIFdlIGdvdCBhIHN1cGVyc2NyaXB0IHN0YXJ0XG4gICAgICAgIGlmIChzdXBlcnNjcmlwdCkge1xuICAgICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkRvdWJsZSBzdXBlcnNjcmlwdFwiLCBsZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXJzY3JpcHQgPSB0aGlzLmhhbmRsZVN1cFN1YnNjcmlwdChcInN1cGVyc2NyaXB0XCIpO1xuICAgICAgfSBlbHNlIGlmIChsZXgudGV4dCA9PT0gXCJfXCIpIHtcbiAgICAgICAgLy8gV2UgZ290IGEgc3Vic2NyaXB0IHN0YXJ0XG4gICAgICAgIGlmIChzdWJzY3JpcHQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJEb3VibGUgc3Vic2NyaXB0XCIsIGxleCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdWJzY3JpcHQgPSB0aGlzLmhhbmRsZVN1cFN1YnNjcmlwdChcInN1YnNjcmlwdFwiKTtcbiAgICAgIH0gZWxzZSBpZiAobGV4LnRleHQgPT09IFwiJ1wiKSB7XG4gICAgICAgIC8vIFdlIGdvdCBhIHByaW1lXG4gICAgICAgIGlmIChzdXBlcnNjcmlwdCkge1xuICAgICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkRvdWJsZSBzdXBlcnNjcmlwdFwiLCBsZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByaW1lID0ge1xuICAgICAgICAgIHR5cGU6IFwidGV4dG9yZFwiLFxuICAgICAgICAgIG1vZGU6IHRoaXMubW9kZSxcbiAgICAgICAgICB0ZXh0OiBcIlxcXFxwcmltZVwiXG4gICAgICAgIH07IC8vIE1hbnkgcHJpbWVzIGNhbiBiZSBncm91cGVkIHRvZ2V0aGVyLCBzbyB3ZSBoYW5kbGUgdGhpcyBoZXJlXG5cbiAgICAgICAgdmFyIHByaW1lcyA9IFtwcmltZV07XG4gICAgICAgIHRoaXMuY29uc3VtZSgpOyAvLyBLZWVwIGxleGluZyB0b2tlbnMgdW50aWwgd2UgZ2V0IHNvbWV0aGluZyB0aGF0J3Mgbm90IGEgcHJpbWVcblxuICAgICAgICB3aGlsZSAodGhpcy5mZXRjaCgpLnRleHQgPT09IFwiJ1wiKSB7XG4gICAgICAgICAgLy8gRm9yIGVhY2ggb25lLCBhZGQgYW5vdGhlciBwcmltZSB0byB0aGUgbGlzdFxuICAgICAgICAgIHByaW1lcy5wdXNoKHByaW1lKTtcbiAgICAgICAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICAgICAgfSAvLyBJZiB0aGVyZSdzIGEgc3VwZXJzY3JpcHQgZm9sbG93aW5nIHRoZSBwcmltZXMsIGNvbWJpbmUgdGhhdFxuICAgICAgICAvLyBzdXBlcnNjcmlwdCBpbiB3aXRoIHRoZSBwcmltZXMuXG5cblxuICAgICAgICBpZiAodGhpcy5mZXRjaCgpLnRleHQgPT09IFwiXlwiKSB7XG4gICAgICAgICAgcHJpbWVzLnB1c2godGhpcy5oYW5kbGVTdXBTdWJzY3JpcHQoXCJzdXBlcnNjcmlwdFwiKSk7XG4gICAgICAgIH0gLy8gUHV0IGV2ZXJ5dGhpbmcgaW50byBhbiBvcmRncm91cCBhcyB0aGUgc3VwZXJzY3JpcHRcblxuXG4gICAgICAgIHN1cGVyc2NyaXB0ID0ge1xuICAgICAgICAgIHR5cGU6IFwib3JkZ3JvdXBcIixcbiAgICAgICAgICBtb2RlOiB0aGlzLm1vZGUsXG4gICAgICAgICAgYm9keTogcHJpbWVzXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiBpdCB3YXNuJ3QgXiwgXywgb3IgJywgc3RvcCBwYXJzaW5nIHN1cGVyL3N1YnNjcmlwdHNcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSAvLyBCYXNlIG11c3QgYmUgc2V0IGlmIHN1cGVyc2NyaXB0IG9yIHN1YnNjcmlwdCBhcmUgc2V0IHBlciBsb2dpYyBhYm92ZSxcbiAgICAvLyBidXQgbmVlZCB0byBjaGVjayBoZXJlIGZvciB0eXBlIGNoZWNrIHRvIHBhc3MuXG5cblxuICAgIGlmIChzdXBlcnNjcmlwdCB8fCBzdWJzY3JpcHQpIHtcbiAgICAgIC8vIElmIHdlIGdvdCBlaXRoZXIgYSBzdXBlcnNjcmlwdCBvciBzdWJzY3JpcHQsIGNyZWF0ZSBhIHN1cHN1YlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJzdXBzdWJcIixcbiAgICAgICAgbW9kZTogdGhpcy5tb2RlLFxuICAgICAgICBiYXNlOiBiYXNlLFxuICAgICAgICBzdXA6IHN1cGVyc2NyaXB0LFxuICAgICAgICBzdWI6IHN1YnNjcmlwdFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlIHJldHVybiB0aGUgb3JpZ2luYWwgYm9keVxuICAgICAgcmV0dXJuIGJhc2U7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBQYXJzZXMgYW4gZW50aXJlIGZ1bmN0aW9uLCBpbmNsdWRpbmcgaXRzIGJhc2UgYW5kIGFsbCBvZiBpdHMgYXJndW1lbnRzLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUZ1bmN0aW9uID0gZnVuY3Rpb24gcGFyc2VGdW5jdGlvbihicmVha09uVG9rZW5UZXh0LCBuYW1lIC8vIEZvciBkZXRlcm1pbmluZyBpdHMgY29udGV4dFxuICApIHtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLmZldGNoKCk7XG4gICAgdmFyIGZ1bmMgPSB0b2tlbi50ZXh0O1xuICAgIHZhciBmdW5jRGF0YSA9IHNyY19mdW5jdGlvbnNbZnVuY107XG5cbiAgICBpZiAoIWZ1bmNEYXRhKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnN1bWUoKTsgLy8gY29uc3VtZSBjb21tYW5kIHRva2VuXG5cbiAgICBpZiAobmFtZSAmJiBuYW1lICE9PSBcImF0b21cIiAmJiAhZnVuY0RhdGEuYWxsb3dlZEluQXJndW1lbnQpIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkdvdCBmdW5jdGlvbiAnXCIgKyBmdW5jICsgXCInIHdpdGggbm8gYXJndW1lbnRzXCIgKyAobmFtZSA/IFwiIGFzIFwiICsgbmFtZSA6IFwiXCIpLCB0b2tlbik7XG4gICAgfSBlbHNlIGlmICh0aGlzLm1vZGUgPT09IFwidGV4dFwiICYmICFmdW5jRGF0YS5hbGxvd2VkSW5UZXh0KSB7XG4gICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJDYW4ndCB1c2UgZnVuY3Rpb24gJ1wiICsgZnVuYyArIFwiJyBpbiB0ZXh0IG1vZGVcIiwgdG9rZW4pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5tb2RlID09PSBcIm1hdGhcIiAmJiBmdW5jRGF0YS5hbGxvd2VkSW5NYXRoID09PSBmYWxzZSkge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiQ2FuJ3QgdXNlIGZ1bmN0aW9uICdcIiArIGZ1bmMgKyBcIicgaW4gbWF0aCBtb2RlXCIsIHRva2VuKTtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkcGFyc2VBcmd1bWVudHMgPSB0aGlzLnBhcnNlQXJndW1lbnRzKGZ1bmMsIGZ1bmNEYXRhKSxcbiAgICAgICAgYXJncyA9IF90aGlzJHBhcnNlQXJndW1lbnRzLmFyZ3MsXG4gICAgICAgIG9wdEFyZ3MgPSBfdGhpcyRwYXJzZUFyZ3VtZW50cy5vcHRBcmdzO1xuXG4gICAgcmV0dXJuIHRoaXMuY2FsbEZ1bmN0aW9uKGZ1bmMsIGFyZ3MsIG9wdEFyZ3MsIHRva2VuLCBicmVha09uVG9rZW5UZXh0KTtcbiAgfVxuICAvKipcbiAgICogQ2FsbCBhIGZ1bmN0aW9uIGhhbmRsZXIgd2l0aCBhIHN1aXRhYmxlIGNvbnRleHQgYW5kIGFyZ3VtZW50cy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY2FsbEZ1bmN0aW9uID0gZnVuY3Rpb24gY2FsbEZ1bmN0aW9uKG5hbWUsIGFyZ3MsIG9wdEFyZ3MsIHRva2VuLCBicmVha09uVG9rZW5UZXh0KSB7XG4gICAgdmFyIGNvbnRleHQgPSB7XG4gICAgICBmdW5jTmFtZTogbmFtZSxcbiAgICAgIHBhcnNlcjogdGhpcyxcbiAgICAgIHRva2VuOiB0b2tlbixcbiAgICAgIGJyZWFrT25Ub2tlblRleHQ6IGJyZWFrT25Ub2tlblRleHRcbiAgICB9O1xuICAgIHZhciBmdW5jID0gc3JjX2Z1bmN0aW9uc1tuYW1lXTtcblxuICAgIGlmIChmdW5jICYmIGZ1bmMuaGFuZGxlcikge1xuICAgICAgcmV0dXJuIGZ1bmMuaGFuZGxlcihjb250ZXh0LCBhcmdzLCBvcHRBcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiTm8gZnVuY3Rpb24gaGFuZGxlciBmb3IgXCIgKyBuYW1lKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFBhcnNlcyB0aGUgYXJndW1lbnRzIG9mIGEgZnVuY3Rpb24gb3IgZW52aXJvbm1lbnRcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VBcmd1bWVudHMgPSBmdW5jdGlvbiBwYXJzZUFyZ3VtZW50cyhmdW5jLCAvLyBTaG91bGQgbG9vayBsaWtlIFwiXFxuYW1lXCIgb3IgXCJcXGJlZ2lue25hbWV9XCIuXG4gIGZ1bmNEYXRhKSB7XG4gICAgdmFyIHRvdGFsQXJncyA9IGZ1bmNEYXRhLm51bUFyZ3MgKyBmdW5jRGF0YS5udW1PcHRpb25hbEFyZ3M7XG5cbiAgICBpZiAodG90YWxBcmdzID09PSAwKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhcmdzOiBbXSxcbiAgICAgICAgb3B0QXJnczogW11cbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgb3B0QXJncyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3RhbEFyZ3M7IGkrKykge1xuICAgICAgdmFyIGFyZ1R5cGUgPSBmdW5jRGF0YS5hcmdUeXBlcyAmJiBmdW5jRGF0YS5hcmdUeXBlc1tpXTtcbiAgICAgIHZhciBpc09wdGlvbmFsID0gaSA8IGZ1bmNEYXRhLm51bU9wdGlvbmFsQXJncztcblxuICAgICAgaWYgKGZ1bmNEYXRhLnByaW1pdGl2ZSAmJiBhcmdUeXBlID09IG51bGwgfHwgZnVuY0RhdGEudHlwZSA9PT0gXCJzcXJ0XCIgJiYgaSA9PT0gMSAmJiBvcHRBcmdzWzBdID09IG51bGwpIHtcbiAgICAgICAgYXJnVHlwZSA9IFwicHJpbWl0aXZlXCI7XG4gICAgICB9XG5cbiAgICAgIHZhciBhcmcgPSB0aGlzLnBhcnNlR3JvdXBPZlR5cGUoXCJhcmd1bWVudCB0byAnXCIgKyBmdW5jICsgXCInXCIsIGFyZ1R5cGUsIGlzT3B0aW9uYWwpO1xuXG4gICAgICBpZiAoaXNPcHRpb25hbCkge1xuICAgICAgICBvcHRBcmdzLnB1c2goYXJnKTtcbiAgICAgIH0gZWxzZSBpZiAoYXJnICE9IG51bGwpIHtcbiAgICAgICAgYXJncy5wdXNoKGFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzaG91bGQgYmUgdW5yZWFjaGFibGVcbiAgICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiTnVsbCBhcmd1bWVudCwgcGxlYXNlIHJlcG9ydCB0aGlzIGFzIGEgYnVnXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhcmdzOiBhcmdzLFxuICAgICAgb3B0QXJnczogb3B0QXJnc1xuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFBhcnNlcyBhIGdyb3VwIHdoZW4gdGhlIG1vZGUgaXMgY2hhbmdpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlR3JvdXBPZlR5cGUgPSBmdW5jdGlvbiBwYXJzZUdyb3VwT2ZUeXBlKG5hbWUsIHR5cGUsIG9wdGlvbmFsKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFwiY29sb3JcIjpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VDb2xvckdyb3VwKG9wdGlvbmFsKTtcblxuICAgICAgY2FzZSBcInNpemVcIjpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VTaXplR3JvdXAob3B0aW9uYWwpO1xuXG4gICAgICBjYXNlIFwidXJsXCI6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVXJsR3JvdXAob3B0aW9uYWwpO1xuXG4gICAgICBjYXNlIFwibWF0aFwiOlxuICAgICAgY2FzZSBcInRleHRcIjpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VBcmd1bWVudEdyb3VwKG9wdGlvbmFsLCB0eXBlKTtcblxuICAgICAgY2FzZSBcImhib3hcIjpcbiAgICAgICAge1xuICAgICAgICAgIC8vIGhib3ggYXJndW1lbnQgdHlwZSB3cmFwcyB0aGUgYXJndW1lbnQgaW4gdGhlIGVxdWl2YWxlbnQgb2ZcbiAgICAgICAgICAvLyBcXGhib3gsIHdoaWNoIGlzIGxpa2UgXFx0ZXh0IGJ1dCBzd2l0Y2hpbmcgdG8gXFx0ZXh0c3R5bGUgc2l6ZS5cbiAgICAgICAgICB2YXIgZ3JvdXAgPSB0aGlzLnBhcnNlQXJndW1lbnRHcm91cChvcHRpb25hbCwgXCJ0ZXh0XCIpO1xuICAgICAgICAgIHJldHVybiBncm91cCAhPSBudWxsID8ge1xuICAgICAgICAgICAgdHlwZTogXCJzdHlsaW5nXCIsXG4gICAgICAgICAgICBtb2RlOiBncm91cC5tb2RlLFxuICAgICAgICAgICAgYm9keTogW2dyb3VwXSxcbiAgICAgICAgICAgIHN0eWxlOiBcInRleHRcIiAvLyBzaW11bGF0ZSBcXHRleHRzdHlsZVxuXG4gICAgICAgICAgfSA6IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBcInJhd1wiOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIHRva2VuID0gdGhpcy5wYXJzZVN0cmluZ0dyb3VwKFwicmF3XCIsIG9wdGlvbmFsKTtcbiAgICAgICAgICByZXR1cm4gdG9rZW4gIT0gbnVsbCA/IHtcbiAgICAgICAgICAgIHR5cGU6IFwicmF3XCIsXG4gICAgICAgICAgICBtb2RlOiBcInRleHRcIixcbiAgICAgICAgICAgIHN0cmluZzogdG9rZW4udGV4dFxuICAgICAgICAgIH0gOiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgXCJwcmltaXRpdmVcIjpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChvcHRpb25hbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiQSBwcmltaXRpdmUgYXJndW1lbnQgY2Fubm90IGJlIG9wdGlvbmFsXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfZ3JvdXAgPSB0aGlzLnBhcnNlR3JvdXAobmFtZSk7XG5cbiAgICAgICAgICBpZiAoX2dyb3VwID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkV4cGVjdGVkIGdyb3VwIGFzIFwiICsgbmFtZSwgdGhpcy5mZXRjaCgpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gX2dyb3VwO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgXCJvcmlnaW5hbFwiOlxuICAgICAgY2FzZSBudWxsOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlQXJndW1lbnRHcm91cChvcHRpb25hbCk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlVua25vd24gZ3JvdXAgdHlwZSBhcyBcIiArIG5hbWUsIHRoaXMuZmV0Y2goKSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBEaXNjYXJkIGFueSBzcGFjZSB0b2tlbnMsIGZldGNoaW5nIHRoZSBuZXh0IG5vbi1zcGFjZSB0b2tlbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY29uc3VtZVNwYWNlcyA9IGZ1bmN0aW9uIGNvbnN1bWVTcGFjZXMoKSB7XG4gICAgd2hpbGUgKHRoaXMuZmV0Y2goKS50ZXh0ID09PSBcIiBcIikge1xuICAgICAgdGhpcy5jb25zdW1lKCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBQYXJzZXMgYSBncm91cCwgZXNzZW50aWFsbHkgcmV0dXJuaW5nIHRoZSBzdHJpbmcgZm9ybWVkIGJ5IHRoZVxuICAgKiBicmFjZS1lbmNsb3NlZCB0b2tlbnMgcGx1cyBzb21lIHBvc2l0aW9uIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVN0cmluZ0dyb3VwID0gZnVuY3Rpb24gcGFyc2VTdHJpbmdHcm91cChtb2RlTmFtZSwgLy8gVXNlZCB0byBkZXNjcmliZSB0aGUgbW9kZSBpbiBlcnJvciBtZXNzYWdlcy5cbiAgb3B0aW9uYWwpIHtcbiAgICB2YXIgYXJnVG9rZW4gPSB0aGlzLmd1bGxldC5zY2FuQXJndW1lbnQob3B0aW9uYWwpO1xuXG4gICAgaWYgKGFyZ1Rva2VuID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBzdHIgPSBcIlwiO1xuICAgIHZhciBuZXh0VG9rZW47XG5cbiAgICB3aGlsZSAoKG5leHRUb2tlbiA9IHRoaXMuZmV0Y2goKSkudGV4dCAhPT0gXCJFT0ZcIikge1xuICAgICAgc3RyICs9IG5leHRUb2tlbi50ZXh0O1xuICAgICAgdGhpcy5jb25zdW1lKCk7XG4gICAgfVxuXG4gICAgdGhpcy5jb25zdW1lKCk7IC8vIGNvbnN1bWUgdGhlIGVuZCBvZiB0aGUgYXJndW1lbnRcblxuICAgIGFyZ1Rva2VuLnRleHQgPSBzdHI7XG4gICAgcmV0dXJuIGFyZ1Rva2VuO1xuICB9XG4gIC8qKlxuICAgKiBQYXJzZXMgYSByZWdleC1kZWxpbWl0ZWQgZ3JvdXA6IHRoZSBsYXJnZXN0IHNlcXVlbmNlIG9mIHRva2Vuc1xuICAgKiB3aG9zZSBjb25jYXRlbmF0ZWQgc3RyaW5ncyBtYXRjaCBgcmVnZXhgLiBSZXR1cm5zIHRoZSBzdHJpbmdcbiAgICogZm9ybWVkIGJ5IHRoZSB0b2tlbnMgcGx1cyBzb21lIHBvc2l0aW9uIGluZm9ybWF0aW9uLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVJlZ2V4R3JvdXAgPSBmdW5jdGlvbiBwYXJzZVJlZ2V4R3JvdXAocmVnZXgsIG1vZGVOYW1lIC8vIFVzZWQgdG8gZGVzY3JpYmUgdGhlIG1vZGUgaW4gZXJyb3IgbWVzc2FnZXMuXG4gICkge1xuICAgIHZhciBmaXJzdFRva2VuID0gdGhpcy5mZXRjaCgpO1xuICAgIHZhciBsYXN0VG9rZW4gPSBmaXJzdFRva2VuO1xuICAgIHZhciBzdHIgPSBcIlwiO1xuICAgIHZhciBuZXh0VG9rZW47XG5cbiAgICB3aGlsZSAoKG5leHRUb2tlbiA9IHRoaXMuZmV0Y2goKSkudGV4dCAhPT0gXCJFT0ZcIiAmJiByZWdleC50ZXN0KHN0ciArIG5leHRUb2tlbi50ZXh0KSkge1xuICAgICAgbGFzdFRva2VuID0gbmV4dFRva2VuO1xuICAgICAgc3RyICs9IGxhc3RUb2tlbi50ZXh0O1xuICAgICAgdGhpcy5jb25zdW1lKCk7XG4gICAgfVxuXG4gICAgaWYgKHN0ciA9PT0gXCJcIikge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiSW52YWxpZCBcIiArIG1vZGVOYW1lICsgXCI6ICdcIiArIGZpcnN0VG9rZW4udGV4dCArIFwiJ1wiLCBmaXJzdFRva2VuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlyc3RUb2tlbi5yYW5nZShsYXN0VG9rZW4sIHN0cik7XG4gIH1cbiAgLyoqXG4gICAqIFBhcnNlcyBhIGNvbG9yIGRlc2NyaXB0aW9uLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUNvbG9yR3JvdXAgPSBmdW5jdGlvbiBwYXJzZUNvbG9yR3JvdXAob3B0aW9uYWwpIHtcbiAgICB2YXIgcmVzID0gdGhpcy5wYXJzZVN0cmluZ0dyb3VwKFwiY29sb3JcIiwgb3B0aW9uYWwpO1xuXG4gICAgaWYgKHJlcyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2ggPSAvXigjW2EtZjAtOV17M318Iz9bYS1mMC05XXs2fXxbYS16XSspJC9pLmV4ZWMocmVzLnRleHQpO1xuXG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiSW52YWxpZCBjb2xvcjogJ1wiICsgcmVzLnRleHQgKyBcIidcIiwgcmVzKTtcbiAgICB9XG5cbiAgICB2YXIgY29sb3IgPSBtYXRjaFswXTtcblxuICAgIGlmICgvXlswLTlhLWZdezZ9JC9pLnRlc3QoY29sb3IpKSB7XG4gICAgICAvLyBXZSBhbGxvdyBhIDYtZGlnaXQgSFRNTCBjb2xvciBzcGVjIHdpdGhvdXQgYSBsZWFkaW5nIFwiI1wiLlxuICAgICAgLy8gVGhpcyBmb2xsb3dzIHRoZSB4Y29sb3IgcGFja2FnZSdzIEhUTUwgY29sb3IgbW9kZWwuXG4gICAgICAvLyBQcmVkZWZpbmVkIGNvbG9yIG5hbWVzIGFyZSBhbGwgbWlzc2VkIGJ5IHRoaXMgUmVnRXggcGF0dGVybi5cbiAgICAgIGNvbG9yID0gXCIjXCIgKyBjb2xvcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJjb2xvci10b2tlblwiLFxuICAgICAgbW9kZTogdGhpcy5tb2RlLFxuICAgICAgY29sb3I6IGNvbG9yXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogUGFyc2VzIGEgc2l6ZSBzcGVjaWZpY2F0aW9uLCBjb25zaXN0aW5nIG9mIG1hZ25pdHVkZSBhbmQgdW5pdC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VTaXplR3JvdXAgPSBmdW5jdGlvbiBwYXJzZVNpemVHcm91cChvcHRpb25hbCkge1xuICAgIHZhciByZXM7XG4gICAgdmFyIGlzQmxhbmsgPSBmYWxzZTsgLy8gZG9uJ3QgZXhwYW5kIGJlZm9yZSBwYXJzZVN0cmluZ0dyb3VwXG5cbiAgICB0aGlzLmd1bGxldC5jb25zdW1lU3BhY2VzKCk7XG5cbiAgICBpZiAoIW9wdGlvbmFsICYmIHRoaXMuZ3VsbGV0LmZ1dHVyZSgpLnRleHQgIT09IFwie1wiKSB7XG4gICAgICByZXMgPSB0aGlzLnBhcnNlUmVnZXhHcm91cCgvXlstK10/ICooPzokfFxcZCt8XFxkK1xcLlxcZCp8XFwuXFxkKikgKlthLXpdezAsMn0gKiQvLCBcInNpemVcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcyA9IHRoaXMucGFyc2VTdHJpbmdHcm91cChcInNpemVcIiwgb3B0aW9uYWwpO1xuICAgIH1cblxuICAgIGlmICghcmVzKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbmFsICYmIHJlcy50ZXh0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gQmVjYXVzZSB3ZSd2ZSB0ZXN0ZWQgZm9yIHdoYXQgaXMgIW9wdGlvbmFsLCB0aGlzIGJsb2NrIHdvbid0XG4gICAgICAvLyBhZmZlY3QgXFxrZXJuLCBcXGhzcGFjZSwgZXRjLiBJdCB3aWxsIGNhcHR1cmUgdGhlIG1hbmRhdG9yeSBhcmd1bWVudHNcbiAgICAgIC8vIHRvIFxcZ2VuZnJhYyBhbmQgXFxhYm92ZS5cbiAgICAgIHJlcy50ZXh0ID0gXCIwcHRcIjsgLy8gRW5hYmxlIFxcYWJvdmV7fVxuXG4gICAgICBpc0JsYW5rID0gdHJ1ZTsgLy8gVGhpcyBpcyBoZXJlIHNwZWNpZmljYWxseSBmb3IgXFxnZW5mcmFjXG4gICAgfVxuXG4gICAgdmFyIG1hdGNoID0gLyhbLStdPykgKihcXGQrKD86XFwuXFxkKik/fFxcLlxcZCspICooW2Etel17Mn0pLy5leGVjKHJlcy50ZXh0KTtcblxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIkludmFsaWQgc2l6ZTogJ1wiICsgcmVzLnRleHQgKyBcIidcIiwgcmVzKTtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHtcbiAgICAgIG51bWJlcjogKyhtYXRjaFsxXSArIG1hdGNoWzJdKSxcbiAgICAgIC8vIHNpZ24gKyBtYWduaXR1ZGUsIGNhc3QgdG8gbnVtYmVyXG4gICAgICB1bml0OiBtYXRjaFszXVxuICAgIH07XG5cbiAgICBpZiAoIXZhbGlkVW5pdChkYXRhKSkge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiSW52YWxpZCB1bml0OiAnXCIgKyBkYXRhLnVuaXQgKyBcIidcIiwgcmVzKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJzaXplXCIsXG4gICAgICBtb2RlOiB0aGlzLm1vZGUsXG4gICAgICB2YWx1ZTogZGF0YSxcbiAgICAgIGlzQmxhbms6IGlzQmxhbmtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBQYXJzZXMgYW4gVVJMLCBjaGVja2luZyBlc2NhcGVkIGxldHRlcnMgYW5kIGFsbG93ZWQgcHJvdG9jb2xzLFxuICAgKiBhbmQgc2V0dGluZyB0aGUgY2F0Y29kZSBvZiAlIGFzIGFuIGFjdGl2ZSBjaGFyYWN0ZXIgKGFzIGluIFxcaHlwZXJyZWYpLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVVybEdyb3VwID0gZnVuY3Rpb24gcGFyc2VVcmxHcm91cChvcHRpb25hbCkge1xuICAgIHRoaXMuZ3VsbGV0LmxleGVyLnNldENhdGNvZGUoXCIlXCIsIDEzKTsgLy8gYWN0aXZlIGNoYXJhY3RlclxuXG4gICAgdGhpcy5ndWxsZXQubGV4ZXIuc2V0Q2F0Y29kZShcIn5cIiwgMTIpOyAvLyBvdGhlciBjaGFyYWN0ZXJcblxuICAgIHZhciByZXMgPSB0aGlzLnBhcnNlU3RyaW5nR3JvdXAoXCJ1cmxcIiwgb3B0aW9uYWwpO1xuICAgIHRoaXMuZ3VsbGV0LmxleGVyLnNldENhdGNvZGUoXCIlXCIsIDE0KTsgLy8gY29tbWVudCBjaGFyYWN0ZXJcblxuICAgIHRoaXMuZ3VsbGV0LmxleGVyLnNldENhdGNvZGUoXCJ+XCIsIDEzKTsgLy8gYWN0aXZlIGNoYXJhY3RlclxuXG4gICAgaWYgKHJlcyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IC8vIGh5cGVycmVmIHBhY2thZ2UgYWxsb3dzIGJhY2tzbGFzaGVzIGFsb25lIGluIGhyZWYsIGJ1dCBkb2Vzbid0XG4gICAgLy8gZ2VuZXJhdGUgdmFsaWQgbGlua3MgaW4gc3VjaCBjYXNlczsgd2UgaW50ZXJwcmV0IHRoaXMgYXNcbiAgICAvLyBcInVuZGVmaW5lZFwiIGJlaGF2aW91ciwgYW5kIGtlZXAgdGhlbSBhcy1pcy4gU29tZSBicm93c2VyIHdpbGxcbiAgICAvLyByZXBsYWNlIGJhY2tzbGFzaGVzIHdpdGggZm9yd2FyZCBzbGFzaGVzLlxuXG5cbiAgICB2YXIgdXJsID0gcmVzLnRleHQucmVwbGFjZSgvXFxcXChbIyQlJn5fXnt9XSkvZywgJyQxJyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwidXJsXCIsXG4gICAgICBtb2RlOiB0aGlzLm1vZGUsXG4gICAgICB1cmw6IHVybFxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFBhcnNlcyBhbiBhcmd1bWVudCB3aXRoIHRoZSBtb2RlIHNwZWNpZmllZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VBcmd1bWVudEdyb3VwID0gZnVuY3Rpb24gcGFyc2VBcmd1bWVudEdyb3VwKG9wdGlvbmFsLCBtb2RlKSB7XG4gICAgdmFyIGFyZ1Rva2VuID0gdGhpcy5ndWxsZXQuc2NhbkFyZ3VtZW50KG9wdGlvbmFsKTtcblxuICAgIGlmIChhcmdUb2tlbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgb3V0ZXJNb2RlID0gdGhpcy5tb2RlO1xuXG4gICAgaWYgKG1vZGUpIHtcbiAgICAgIC8vIFN3aXRjaCB0byBzcGVjaWZpZWQgbW9kZVxuICAgICAgdGhpcy5zd2l0Y2hNb2RlKG1vZGUpO1xuICAgIH1cblxuICAgIHRoaXMuZ3VsbGV0LmJlZ2luR3JvdXAoKTtcbiAgICB2YXIgZXhwcmVzc2lvbiA9IHRoaXMucGFyc2VFeHByZXNzaW9uKGZhbHNlLCBcIkVPRlwiKTsgLy8gVE9ETzogZmluZCBhbiBhbHRlcm5hdGl2ZSB3YXkgdG8gZGVub3RlIHRoZSBlbmRcblxuICAgIHRoaXMuZXhwZWN0KFwiRU9GXCIpOyAvLyBleHBlY3QgdGhlIGVuZCBvZiB0aGUgYXJndW1lbnRcblxuICAgIHRoaXMuZ3VsbGV0LmVuZEdyb3VwKCk7XG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIHR5cGU6IFwib3JkZ3JvdXBcIixcbiAgICAgIG1vZGU6IHRoaXMubW9kZSxcbiAgICAgIGxvYzogYXJnVG9rZW4ubG9jLFxuICAgICAgYm9keTogZXhwcmVzc2lvblxuICAgIH07XG5cbiAgICBpZiAobW9kZSkge1xuICAgICAgLy8gU3dpdGNoIG1vZGUgYmFja1xuICAgICAgdGhpcy5zd2l0Y2hNb2RlKG91dGVyTW9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICAvKipcbiAgICogUGFyc2VzIGFuIG9yZGluYXJ5IGdyb3VwLCB3aGljaCBpcyBlaXRoZXIgYSBzaW5nbGUgbnVjbGV1cyAobGlrZSBcInhcIilcbiAgICogb3IgYW4gZXhwcmVzc2lvbiBpbiBicmFjZXMgKGxpa2UgXCJ7eCt5fVwiKSBvciBhbiBpbXBsaWNpdCBncm91cCwgYSBncm91cFxuICAgKiB0aGF0IHN0YXJ0cyBhdCB0aGUgY3VycmVudCBwb3NpdGlvbiwgYW5kIGVuZHMgcmlnaHQgYmVmb3JlIGEgaGlnaGVyIGV4cGxpY2l0XG4gICAqIGdyb3VwIGVuZHMsIG9yIGF0IEVPRi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VHcm91cCA9IGZ1bmN0aW9uIHBhcnNlR3JvdXAobmFtZSwgLy8gRm9yIGVycm9yIHJlcG9ydGluZy5cbiAgYnJlYWtPblRva2VuVGV4dCkge1xuICAgIHZhciBmaXJzdFRva2VuID0gdGhpcy5mZXRjaCgpO1xuICAgIHZhciB0ZXh0ID0gZmlyc3RUb2tlbi50ZXh0O1xuICAgIHZhciByZXN1bHQ7IC8vIFRyeSB0byBwYXJzZSBhbiBvcGVuIGJyYWNlIG9yIFxcYmVnaW5ncm91cFxuXG4gICAgaWYgKHRleHQgPT09IFwie1wiIHx8IHRleHQgPT09IFwiXFxcXGJlZ2luZ3JvdXBcIikge1xuICAgICAgdGhpcy5jb25zdW1lKCk7XG4gICAgICB2YXIgZ3JvdXBFbmQgPSB0ZXh0ID09PSBcIntcIiA/IFwifVwiIDogXCJcXFxcZW5kZ3JvdXBcIjtcbiAgICAgIHRoaXMuZ3VsbGV0LmJlZ2luR3JvdXAoKTsgLy8gSWYgd2UgZ2V0IGEgYnJhY2UsIHBhcnNlIGFuIGV4cHJlc3Npb25cblxuICAgICAgdmFyIGV4cHJlc3Npb24gPSB0aGlzLnBhcnNlRXhwcmVzc2lvbihmYWxzZSwgZ3JvdXBFbmQpO1xuICAgICAgdmFyIGxhc3RUb2tlbiA9IHRoaXMuZmV0Y2goKTtcbiAgICAgIHRoaXMuZXhwZWN0KGdyb3VwRW5kKTsgLy8gQ2hlY2sgdGhhdCB3ZSBnb3QgYSBtYXRjaGluZyBjbG9zaW5nIGJyYWNlXG5cbiAgICAgIHRoaXMuZ3VsbGV0LmVuZEdyb3VwKCk7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFwib3JkZ3JvdXBcIixcbiAgICAgICAgbW9kZTogdGhpcy5tb2RlLFxuICAgICAgICBsb2M6IFNvdXJjZUxvY2F0aW9uLnJhbmdlKGZpcnN0VG9rZW4sIGxhc3RUb2tlbiksXG4gICAgICAgIGJvZHk6IGV4cHJlc3Npb24sXG4gICAgICAgIC8vIEEgZ3JvdXAgZm9ybWVkIGJ5IFxcYmVnaW5ncm91cC4uLlxcZW5kZ3JvdXAgaXMgYSBzZW1pLXNpbXBsZSBncm91cFxuICAgICAgICAvLyB3aGljaCBkb2Vzbid0IGFmZmVjdCBzcGFjaW5nIGluIG1hdGggbW9kZSwgaS5lLiwgaXMgdHJhbnNwYXJlbnQuXG4gICAgICAgIC8vIGh0dHBzOi8vdGV4LnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy8xOTMwL3doZW4tc2hvdWxkLW9uZS1cbiAgICAgICAgLy8gdXNlLWJlZ2luZ3JvdXAtaW5zdGVhZC1vZi1iZ3JvdXBcbiAgICAgICAgc2VtaXNpbXBsZTogdGV4dCA9PT0gXCJcXFxcYmVnaW5ncm91cFwiIHx8IHVuZGVmaW5lZFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgdGhlcmUgZXhpc3RzIGEgZnVuY3Rpb24gd2l0aCB0aGlzIG5hbWUsIHBhcnNlIHRoZSBmdW5jdGlvbi5cbiAgICAgIC8vIE90aGVyd2lzZSwganVzdCByZXR1cm4gYSBudWNsZXVzXG4gICAgICByZXN1bHQgPSB0aGlzLnBhcnNlRnVuY3Rpb24oYnJlYWtPblRva2VuVGV4dCwgbmFtZSkgfHwgdGhpcy5wYXJzZVN5bWJvbCgpO1xuXG4gICAgICBpZiAocmVzdWx0ID09IG51bGwgJiYgdGV4dFswXSA9PT0gXCJcXFxcXCIgJiYgIWltcGxpY2l0Q29tbWFuZHMuaGFzT3duUHJvcGVydHkodGV4dCkpIHtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MudGhyb3dPbkVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiVW5kZWZpbmVkIGNvbnRyb2wgc2VxdWVuY2U6IFwiICsgdGV4dCwgZmlyc3RUb2tlbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQgPSB0aGlzLmZvcm1hdFVuc3VwcG9ydGVkQ21kKHRleHQpO1xuICAgICAgICB0aGlzLmNvbnN1bWUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIC8qKlxuICAgKiBGb3JtIGxpZ2F0dXJlLWxpa2UgY29tYmluYXRpb25zIG9mIGNoYXJhY3RlcnMgZm9yIHRleHQgbW9kZS5cbiAgICogVGhpcyBpbmNsdWRlcyBpbnB1dHMgbGlrZSBcIi0tXCIsIFwiLS0tXCIsIFwiYGBcIiBhbmQgXCInJ1wiLlxuICAgKiBUaGUgcmVzdWx0IHdpbGwgc2ltcGx5IHJlcGxhY2UgbXVsdGlwbGUgdGV4dG9yZCBub2RlcyB3aXRoIGEgc2luZ2xlXG4gICAqIGNoYXJhY3RlciBpbiBlYWNoIHZhbHVlIGJ5IGEgc2luZ2xlIHRleHRvcmQgbm9kZSBoYXZpbmcgbXVsdGlwbGVcbiAgICogY2hhcmFjdGVycyBpbiBpdHMgdmFsdWUuICBUaGUgcmVwcmVzZW50YXRpb24gaXMgc3RpbGwgQVNDSUkgc291cmNlLlxuICAgKiBUaGUgZ3JvdXAgd2lsbCBiZSBtb2RpZmllZCBpbiBwbGFjZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZm9ybUxpZ2F0dXJlcyA9IGZ1bmN0aW9uIGZvcm1MaWdhdHVyZXMoZ3JvdXApIHtcbiAgICB2YXIgbiA9IGdyb3VwLmxlbmd0aCAtIDE7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIGEgPSBncm91cFtpXTsgLy8gJEZsb3dGaXhNZTogTm90IGV2ZXJ5IG5vZGUgdHlwZSBoYXMgYSBgdGV4dGAgcHJvcGVydHkuXG5cbiAgICAgIHZhciB2ID0gYS50ZXh0O1xuXG4gICAgICBpZiAodiA9PT0gXCItXCIgJiYgZ3JvdXBbaSArIDFdLnRleHQgPT09IFwiLVwiKSB7XG4gICAgICAgIGlmIChpICsgMSA8IG4gJiYgZ3JvdXBbaSArIDJdLnRleHQgPT09IFwiLVwiKSB7XG4gICAgICAgICAgZ3JvdXAuc3BsaWNlKGksIDMsIHtcbiAgICAgICAgICAgIHR5cGU6IFwidGV4dG9yZFwiLFxuICAgICAgICAgICAgbW9kZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBsb2M6IFNvdXJjZUxvY2F0aW9uLnJhbmdlKGEsIGdyb3VwW2kgKyAyXSksXG4gICAgICAgICAgICB0ZXh0OiBcIi0tLVwiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbiAtPSAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdyb3VwLnNwbGljZShpLCAyLCB7XG4gICAgICAgICAgICB0eXBlOiBcInRleHRvcmRcIixcbiAgICAgICAgICAgIG1vZGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgbG9jOiBTb3VyY2VMb2NhdGlvbi5yYW5nZShhLCBncm91cFtpICsgMV0pLFxuICAgICAgICAgICAgdGV4dDogXCItLVwiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbiAtPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICgodiA9PT0gXCInXCIgfHwgdiA9PT0gXCJgXCIpICYmIGdyb3VwW2kgKyAxXS50ZXh0ID09PSB2KSB7XG4gICAgICAgIGdyb3VwLnNwbGljZShpLCAyLCB7XG4gICAgICAgICAgdHlwZTogXCJ0ZXh0b3JkXCIsXG4gICAgICAgICAgbW9kZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgbG9jOiBTb3VyY2VMb2NhdGlvbi5yYW5nZShhLCBncm91cFtpICsgMV0pLFxuICAgICAgICAgIHRleHQ6IHYgKyB2XG4gICAgICAgIH0pO1xuICAgICAgICBuIC09IDE7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBQYXJzZSBhIHNpbmdsZSBzeW1ib2wgb3V0IG9mIHRoZSBzdHJpbmcuIEhlcmUsIHdlIGhhbmRsZSBzaW5nbGUgY2hhcmFjdGVyXG4gICAqIHN5bWJvbHMgYW5kIHNwZWNpYWwgZnVuY3Rpb25zIGxpa2UgXFx2ZXJiLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVN5bWJvbCA9IGZ1bmN0aW9uIHBhcnNlU3ltYm9sKCkge1xuICAgIHZhciBudWNsZXVzID0gdGhpcy5mZXRjaCgpO1xuICAgIHZhciB0ZXh0ID0gbnVjbGV1cy50ZXh0O1xuXG4gICAgaWYgKC9eXFxcXHZlcmJbXmEtekEtWl0vLnRlc3QodGV4dCkpIHtcbiAgICAgIHRoaXMuY29uc3VtZSgpO1xuICAgICAgdmFyIGFyZyA9IHRleHQuc2xpY2UoNSk7XG4gICAgICB2YXIgc3RhciA9IGFyZy5jaGFyQXQoMCkgPT09IFwiKlwiO1xuXG4gICAgICBpZiAoc3Rhcikge1xuICAgICAgICBhcmcgPSBhcmcuc2xpY2UoMSk7XG4gICAgICB9IC8vIExleGVyJ3MgdG9rZW5SZWdleCBpcyBjb25zdHJ1Y3RlZCB0byBhbHdheXMgaGF2ZSBtYXRjaGluZ1xuICAgICAgLy8gZmlyc3QvbGFzdCBjaGFyYWN0ZXJzLlxuXG5cbiAgICAgIGlmIChhcmcubGVuZ3RoIDwgMiB8fCBhcmcuY2hhckF0KDApICE9PSBhcmcuc2xpY2UoLTEpKSB7XG4gICAgICAgIHRocm93IG5ldyBzcmNfUGFyc2VFcnJvcihcIlxcXFx2ZXJiIGFzc2VydGlvbiBmYWlsZWQgLS1cXG4gICAgICAgICAgICAgICAgICAgIHBsZWFzZSByZXBvcnQgd2hhdCBpbnB1dCBjYXVzZWQgdGhpcyBidWdcIik7XG4gICAgICB9XG5cbiAgICAgIGFyZyA9IGFyZy5zbGljZSgxLCAtMSk7IC8vIHJlbW92ZSBmaXJzdCBhbmQgbGFzdCBjaGFyXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwidmVyYlwiLFxuICAgICAgICBtb2RlOiBcInRleHRcIixcbiAgICAgICAgYm9keTogYXJnLFxuICAgICAgICBzdGFyOiBzdGFyXG4gICAgICB9O1xuICAgIH0gLy8gQXQgdGhpcyBwb2ludCwgd2Ugc2hvdWxkIGhhdmUgYSBzeW1ib2wsIHBvc3NpYmx5IHdpdGggYWNjZW50cy5cbiAgICAvLyBGaXJzdCBleHBhbmQgYW55IGFjY2VudGVkIGJhc2Ugc3ltYm9sIGFjY29yZGluZyB0byB1bmljb2RlU3ltYm9scy5cblxuXG4gICAgaWYgKHVuaWNvZGVTeW1ib2xzLmhhc093blByb3BlcnR5KHRleHRbMF0pICYmICFzcmNfc3ltYm9sc1t0aGlzLm1vZGVdW3RleHRbMF1dKSB7XG4gICAgICAvLyBUaGlzIGJlaGF2aW9yIGlzIG5vdCBzdHJpY3QgKFhlVGVYLWNvbXBhdGlibGUpIGluIG1hdGggbW9kZS5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLnN0cmljdCAmJiB0aGlzLm1vZGUgPT09IFwibWF0aFwiKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MucmVwb3J0Tm9uc3RyaWN0KFwidW5pY29kZVRleHRJbk1hdGhNb2RlXCIsIFwiQWNjZW50ZWQgVW5pY29kZSB0ZXh0IGNoYXJhY3RlciBcXFwiXCIgKyB0ZXh0WzBdICsgXCJcXFwiIHVzZWQgaW4gXCIgKyBcIm1hdGggbW9kZVwiLCBudWNsZXVzKTtcbiAgICAgIH1cblxuICAgICAgdGV4dCA9IHVuaWNvZGVTeW1ib2xzW3RleHRbMF1dICsgdGV4dC5zdWJzdHIoMSk7XG4gICAgfSAvLyBTdHJpcCBvZmYgYW55IGNvbWJpbmluZyBjaGFyYWN0ZXJzXG5cblxuICAgIHZhciBtYXRjaCA9IGNvbWJpbmluZ0RpYWNyaXRpY2FsTWFya3NFbmRSZWdleC5leGVjKHRleHQpO1xuXG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICB0ZXh0ID0gdGV4dC5zdWJzdHJpbmcoMCwgbWF0Y2guaW5kZXgpO1xuXG4gICAgICBpZiAodGV4dCA9PT0gJ2knKSB7XG4gICAgICAgIHRleHQgPSBcIlxcdTAxMzFcIjsgLy8gZG90bGVzcyBpLCBpbiBtYXRoIGFuZCB0ZXh0IG1vZGVcbiAgICAgIH0gZWxzZSBpZiAodGV4dCA9PT0gJ2onKSB7XG4gICAgICAgIHRleHQgPSBcIlxcdTAyMzdcIjsgLy8gZG90bGVzcyBqLCBpbiBtYXRoIGFuZCB0ZXh0IG1vZGVcbiAgICAgIH1cbiAgICB9IC8vIFJlY29nbml6ZSBiYXNlIHN5bWJvbFxuXG5cbiAgICB2YXIgc3ltYm9sO1xuXG4gICAgaWYgKHNyY19zeW1ib2xzW3RoaXMubW9kZV1bdGV4dF0pIHtcbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLnN0cmljdCAmJiB0aGlzLm1vZGUgPT09ICdtYXRoJyAmJiBleHRyYUxhdGluLmluZGV4T2YodGV4dCkgPj0gMCkge1xuICAgICAgICB0aGlzLnNldHRpbmdzLnJlcG9ydE5vbnN0cmljdChcInVuaWNvZGVUZXh0SW5NYXRoTW9kZVwiLCBcIkxhdGluLTEvVW5pY29kZSB0ZXh0IGNoYXJhY3RlciBcXFwiXCIgKyB0ZXh0WzBdICsgXCJcXFwiIHVzZWQgaW4gXCIgKyBcIm1hdGggbW9kZVwiLCBudWNsZXVzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGdyb3VwID0gc3JjX3N5bWJvbHNbdGhpcy5tb2RlXVt0ZXh0XS5ncm91cDtcbiAgICAgIHZhciBsb2MgPSBTb3VyY2VMb2NhdGlvbi5yYW5nZShudWNsZXVzKTtcbiAgICAgIHZhciBzO1xuXG4gICAgICBpZiAoQVRPTVMuaGFzT3duUHJvcGVydHkoZ3JvdXApKSB7XG4gICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgdmFyIGZhbWlseSA9IGdyb3VwO1xuICAgICAgICBzID0ge1xuICAgICAgICAgIHR5cGU6IFwiYXRvbVwiLFxuICAgICAgICAgIG1vZGU6IHRoaXMubW9kZSxcbiAgICAgICAgICBmYW1pbHk6IGZhbWlseSxcbiAgICAgICAgICBsb2M6IGxvYyxcbiAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIHMgPSB7XG4gICAgICAgICAgdHlwZTogZ3JvdXAsXG4gICAgICAgICAgbW9kZTogdGhpcy5tb2RlLFxuICAgICAgICAgIGxvYzogbG9jLFxuICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgfTtcbiAgICAgIH0gLy8gJEZsb3dGaXhNZVxuXG5cbiAgICAgIHN5bWJvbCA9IHM7XG4gICAgfSBlbHNlIGlmICh0ZXh0LmNoYXJDb2RlQXQoMCkgPj0gMHg4MCkge1xuICAgICAgLy8gbm8gc3ltYm9sIGZvciBlLmcuIF5cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLnN0cmljdCkge1xuICAgICAgICBpZiAoIXN1cHBvcnRlZENvZGVwb2ludCh0ZXh0LmNoYXJDb2RlQXQoMCkpKSB7XG4gICAgICAgICAgdGhpcy5zZXR0aW5ncy5yZXBvcnROb25zdHJpY3QoXCJ1bmtub3duU3ltYm9sXCIsIFwiVW5yZWNvZ25pemVkIFVuaWNvZGUgY2hhcmFjdGVyIFxcXCJcIiArIHRleHRbMF0gKyBcIlxcXCJcIiArIChcIiAoXCIgKyB0ZXh0LmNoYXJDb2RlQXQoMCkgKyBcIilcIiksIG51Y2xldXMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubW9kZSA9PT0gXCJtYXRoXCIpIHtcbiAgICAgICAgICB0aGlzLnNldHRpbmdzLnJlcG9ydE5vbnN0cmljdChcInVuaWNvZGVUZXh0SW5NYXRoTW9kZVwiLCBcIlVuaWNvZGUgdGV4dCBjaGFyYWN0ZXIgXFxcIlwiICsgdGV4dFswXSArIFwiXFxcIiB1c2VkIGluIG1hdGggbW9kZVwiLCBudWNsZXVzKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBBbGwgbm9ubWF0aGVtYXRpY2FsIFVuaWNvZGUgY2hhcmFjdGVycyBhcmUgcmVuZGVyZWQgYXMgaWYgdGhleVxuICAgICAgLy8gYXJlIGluIHRleHQgbW9kZSAod3JhcHBlZCBpbiBcXHRleHQpIGJlY2F1c2UgdGhhdCdzIHdoYXQgaXRcbiAgICAgIC8vIHRha2VzIHRvIHJlbmRlciB0aGVtIGluIExhVGVYLiAgU2V0dGluZyBgbW9kZTogdGhpcy5tb2RlYCBpc1xuICAgICAgLy8gYW5vdGhlciBuYXR1cmFsIGNob2ljZSAodGhlIHVzZXIgcmVxdWVzdGVkIG1hdGggbW9kZSksIGJ1dFxuICAgICAgLy8gdGhpcyBtYWtlcyBpdCBtb3JlIGRpZmZpY3VsdCBmb3IgZ2V0Q2hhcmFjdGVyTWV0cmljcygpIHRvXG4gICAgICAvLyBkaXN0aW5ndWlzaCBVbmljb2RlIGNoYXJhY3RlcnMgd2l0aG91dCBtZXRyaWNzIGFuZCB0aG9zZSBmb3JcbiAgICAgIC8vIHdoaWNoIHdlIHdhbnQgdG8gc2ltdWxhdGUgdGhlIGxldHRlciBNLlxuXG5cbiAgICAgIHN5bWJvbCA9IHtcbiAgICAgICAgdHlwZTogXCJ0ZXh0b3JkXCIsXG4gICAgICAgIG1vZGU6IFwidGV4dFwiLFxuICAgICAgICBsb2M6IFNvdXJjZUxvY2F0aW9uLnJhbmdlKG51Y2xldXMpLFxuICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDsgLy8gRU9GLCBeLCBfLCB7LCB9LCBldGMuXG4gICAgfVxuXG4gICAgdGhpcy5jb25zdW1lKCk7IC8vIFRyYW5zZm9ybSBjb21iaW5pbmcgY2hhcmFjdGVycyBpbnRvIGFjY2VudHNcblxuICAgIGlmIChtYXRjaCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRjaFswXS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYWNjZW50ID0gbWF0Y2hbMF1baV07XG5cbiAgICAgICAgaWYgKCF1bmljb2RlQWNjZW50c1thY2NlbnRdKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiVW5rbm93biBhY2NlbnQgJyBcIiArIGFjY2VudCArIFwiJ1wiLCBudWNsZXVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb21tYW5kID0gdW5pY29kZUFjY2VudHNbYWNjZW50XVt0aGlzLm1vZGVdIHx8IHVuaWNvZGVBY2NlbnRzW2FjY2VudF0udGV4dDtcblxuICAgICAgICBpZiAoIWNvbW1hbmQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgc3JjX1BhcnNlRXJyb3IoXCJBY2NlbnQgXCIgKyBhY2NlbnQgKyBcIiB1bnN1cHBvcnRlZCBpbiBcIiArIHRoaXMubW9kZSArIFwiIG1vZGVcIiwgbnVjbGV1cyk7XG4gICAgICAgIH1cblxuICAgICAgICBzeW1ib2wgPSB7XG4gICAgICAgICAgdHlwZTogXCJhY2NlbnRcIixcbiAgICAgICAgICBtb2RlOiB0aGlzLm1vZGUsXG4gICAgICAgICAgbG9jOiBTb3VyY2VMb2NhdGlvbi5yYW5nZShudWNsZXVzKSxcbiAgICAgICAgICBsYWJlbDogY29tbWFuZCxcbiAgICAgICAgICBpc1N0cmV0Y2h5OiBmYWxzZSxcbiAgICAgICAgICBpc1NoaWZ0eTogdHJ1ZSxcbiAgICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgICAgYmFzZTogc3ltYm9sXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSAvLyAkRmxvd0ZpeE1lXG5cblxuICAgIHJldHVybiBzeW1ib2w7XG4gIH07XG5cbiAgcmV0dXJuIFBhcnNlcjtcbn0oKTtcblxuUGFyc2VyLmVuZE9mRXhwcmVzc2lvbiA9IFtcIn1cIiwgXCJcXFxcZW5kZ3JvdXBcIiwgXCJcXFxcZW5kXCIsIFwiXFxcXHJpZ2h0XCIsIFwiJlwiXTtcblxuOy8vIENPTkNBVEVOQVRFRCBNT0RVTEU6IC4vc3JjL3BhcnNlVHJlZS5qc1xuLyoqXG4gKiBQcm92aWRlcyBhIHNpbmdsZSBmdW5jdGlvbiBmb3IgcGFyc2luZyBhbiBleHByZXNzaW9uIHVzaW5nIGEgUGFyc2VyXG4gKiBUT0RPKGVtaWx5KTogUmVtb3ZlIHRoaXNcbiAqL1xuXG5cblxuLyoqXG4gKiBQYXJzZXMgYW4gZXhwcmVzc2lvbiB1c2luZyBhIFBhcnNlciwgdGhlbiByZXR1cm5zIHRoZSBwYXJzZWQgcmVzdWx0LlxuICovXG52YXIgcGFyc2VUcmVlID0gZnVuY3Rpb24gcGFyc2VUcmVlKHRvUGFyc2UsIHNldHRpbmdzKSB7XG4gIGlmICghKHR5cGVvZiB0b1BhcnNlID09PSAnc3RyaW5nJyB8fCB0b1BhcnNlIGluc3RhbmNlb2YgU3RyaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0thVGVYIGNhbiBvbmx5IHBhcnNlIHN0cmluZyB0eXBlZCBleHByZXNzaW9uJyk7XG4gIH1cblxuICB2YXIgcGFyc2VyID0gbmV3IFBhcnNlcih0b1BhcnNlLCBzZXR0aW5ncyk7IC8vIEJsYW5rIG91dCBhbnkgXFxkZkB0YWcgdG8gYXZvaWQgc3B1cmlvdXMgXCJEdXBsaWNhdGUgXFx0YWdcIiBlcnJvcnNcblxuICBkZWxldGUgcGFyc2VyLmd1bGxldC5tYWNyb3MuY3VycmVudFtcIlxcXFxkZkB0YWdcIl07XG4gIHZhciB0cmVlID0gcGFyc2VyLnBhcnNlKCk7IC8vIFByZXZlbnQgYSBjb2xvciBkZWZpbml0aW9uIGZyb20gcGVyc2lzdGluZyBiZXR3ZWVuIGNhbGxzIHRvIGthdGV4LnJlbmRlcigpLlxuXG4gIGRlbGV0ZSBwYXJzZXIuZ3VsbGV0Lm1hY3Jvcy5jdXJyZW50W1wiXFxcXGN1cnJlbnRAY29sb3JcIl07XG4gIGRlbGV0ZSBwYXJzZXIuZ3VsbGV0Lm1hY3Jvcy5jdXJyZW50W1wiXFxcXGNvbG9yXCJdOyAvLyBJZiB0aGUgaW5wdXQgdXNlZCBcXHRhZywgaXQgd2lsbCBzZXQgdGhlIFxcZGZAdGFnIG1hY3JvIHRvIHRoZSB0YWcuXG4gIC8vIEluIHRoaXMgY2FzZSwgd2Ugc2VwYXJhdGVseSBwYXJzZSB0aGUgdGFnIGFuZCB3cmFwIHRoZSB0cmVlLlxuXG4gIGlmIChwYXJzZXIuZ3VsbGV0Lm1hY3Jvcy5nZXQoXCJcXFxcZGZAdGFnXCIpKSB7XG4gICAgaWYgKCFzZXR0aW5ncy5kaXNwbGF5TW9kZSkge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiXFxcXHRhZyB3b3JrcyBvbmx5IGluIGRpc3BsYXkgZXF1YXRpb25zXCIpO1xuICAgIH1cblxuICAgIHBhcnNlci5ndWxsZXQuZmVlZChcIlxcXFxkZkB0YWdcIik7XG4gICAgdHJlZSA9IFt7XG4gICAgICB0eXBlOiBcInRhZ1wiLFxuICAgICAgbW9kZTogXCJ0ZXh0XCIsXG4gICAgICBib2R5OiB0cmVlLFxuICAgICAgdGFnOiBwYXJzZXIucGFyc2UoKVxuICAgIH1dO1xuICB9XG5cbiAgcmV0dXJuIHRyZWU7XG59O1xuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBzcmNfcGFyc2VUcmVlID0gKHBhcnNlVHJlZSk7XG47Ly8gQ09OQ0FURU5BVEVEIE1PRFVMRTogLi9rYXRleC5qc1xuLyogZXNsaW50IG5vLWNvbnNvbGU6MCAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIG1haW4gZW50cnkgcG9pbnQgZm9yIEthVGVYLiBIZXJlLCB3ZSBleHBvc2UgZnVuY3Rpb25zIGZvclxuICogcmVuZGVyaW5nIGV4cHJlc3Npb25zIGVpdGhlciB0byBET00gbm9kZXMgb3IgdG8gbWFya3VwIHN0cmluZ3MuXG4gKlxuICogV2UgYWxzbyBleHBvc2UgdGhlIFBhcnNlRXJyb3IgY2xhc3MgdG8gY2hlY2sgaWYgZXJyb3JzIHRocm93biBmcm9tIEthVGVYIGFyZVxuICogZXJyb3JzIGluIHRoZSBleHByZXNzaW9uLCBvciBlcnJvcnMgaW4gamF2YXNjcmlwdCBoYW5kbGluZy5cbiAqL1xuXG5cblxuXG5cblxuXG5cblxuXG4vKipcbiAqIFBhcnNlIGFuZCBidWlsZCBhbiBleHByZXNzaW9uLCBhbmQgcGxhY2UgdGhhdCBleHByZXNzaW9uIGluIHRoZSBET00gbm9kZVxuICogZ2l2ZW4uXG4gKi9cbnZhciByZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoZXhwcmVzc2lvbiwgYmFzZU5vZGUsIG9wdGlvbnMpIHtcbiAgYmFzZU5vZGUudGV4dENvbnRlbnQgPSBcIlwiO1xuICB2YXIgbm9kZSA9IHJlbmRlclRvRG9tVHJlZShleHByZXNzaW9uLCBvcHRpb25zKS50b05vZGUoKTtcbiAgYmFzZU5vZGUuYXBwZW5kQ2hpbGQobm9kZSk7XG59OyAvLyBLYVRlWCdzIHN0eWxlcyBkb24ndCB3b3JrIHByb3Blcmx5IGluIHF1aXJrcyBtb2RlLiBQcmludCBvdXQgYW4gZXJyb3IsIGFuZFxuLy8gZGlzYWJsZSByZW5kZXJpbmcuXG5cblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBpZiAoZG9jdW1lbnQuY29tcGF0TW9kZSAhPT0gXCJDU1MxQ29tcGF0XCIpIHtcbiAgICB0eXBlb2YgY29uc29sZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb25zb2xlLndhcm4oXCJXYXJuaW5nOiBLYVRlWCBkb2Vzbid0IHdvcmsgaW4gcXVpcmtzIG1vZGUuIE1ha2Ugc3VyZSB5b3VyIFwiICsgXCJ3ZWJzaXRlIGhhcyBhIHN1aXRhYmxlIGRvY3R5cGUuXCIpO1xuXG4gICAgcmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdGhyb3cgbmV3IHNyY19QYXJzZUVycm9yKFwiS2FUZVggZG9lc24ndCB3b3JrIGluIHF1aXJrcyBtb2RlLlwiKTtcbiAgICB9O1xuICB9XG59XG4vKipcbiAqIFBhcnNlIGFuZCBidWlsZCBhbiBleHByZXNzaW9uLCBhbmQgcmV0dXJuIHRoZSBtYXJrdXAgZm9yIHRoYXQuXG4gKi9cblxuXG52YXIgcmVuZGVyVG9TdHJpbmcgPSBmdW5jdGlvbiByZW5kZXJUb1N0cmluZyhleHByZXNzaW9uLCBvcHRpb25zKSB7XG4gIHZhciBtYXJrdXAgPSByZW5kZXJUb0RvbVRyZWUoZXhwcmVzc2lvbiwgb3B0aW9ucykudG9NYXJrdXAoKTtcbiAgcmV0dXJuIG1hcmt1cDtcbn07XG4vKipcbiAqIFBhcnNlIGFuIGV4cHJlc3Npb24gYW5kIHJldHVybiB0aGUgcGFyc2UgdHJlZS5cbiAqL1xuXG5cbnZhciBnZW5lcmF0ZVBhcnNlVHJlZSA9IGZ1bmN0aW9uIGdlbmVyYXRlUGFyc2VUcmVlKGV4cHJlc3Npb24sIG9wdGlvbnMpIHtcbiAgdmFyIHNldHRpbmdzID0gbmV3IFNldHRpbmdzKG9wdGlvbnMpO1xuICByZXR1cm4gc3JjX3BhcnNlVHJlZShleHByZXNzaW9uLCBzZXR0aW5ncyk7XG59O1xuLyoqXG4gKiBJZiB0aGUgZ2l2ZW4gZXJyb3IgaXMgYSBLYVRlWCBQYXJzZUVycm9yIGFuZCBvcHRpb25zLnRocm93T25FcnJvciBpcyBmYWxzZSxcbiAqIHJlbmRlcnMgdGhlIGludmFsaWQgTGFUZVggYXMgYSBzcGFuIHdpdGggaG92ZXIgdGl0bGUgZ2l2aW5nIHRoZSBLYVRlWFxuICogZXJyb3IgbWVzc2FnZS4gIE90aGVyd2lzZSwgc2ltcGx5IHRocm93cyB0aGUgZXJyb3IuXG4gKi9cblxuXG52YXIgcmVuZGVyRXJyb3IgPSBmdW5jdGlvbiByZW5kZXJFcnJvcihlcnJvciwgZXhwcmVzc2lvbiwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucy50aHJvd09uRXJyb3IgfHwgIShlcnJvciBpbnN0YW5jZW9mIHNyY19QYXJzZUVycm9yKSkge1xuICAgIHRocm93IGVycm9yO1xuICB9XG5cbiAgdmFyIG5vZGUgPSBidWlsZENvbW1vbi5tYWtlU3BhbihbXCJrYXRleC1lcnJvclwiXSwgW25ldyBTeW1ib2xOb2RlKGV4cHJlc3Npb24pXSk7XG4gIG5vZGUuc2V0QXR0cmlidXRlKFwidGl0bGVcIiwgZXJyb3IudG9TdHJpbmcoKSk7XG4gIG5vZGUuc2V0QXR0cmlidXRlKFwic3R5bGVcIiwgXCJjb2xvcjpcIiArIG9wdGlvbnMuZXJyb3JDb2xvcik7XG4gIHJldHVybiBub2RlO1xufTtcbi8qKlxuICogR2VuZXJhdGVzIGFuZCByZXR1cm5zIHRoZSBrYXRleCBidWlsZCB0cmVlLiBUaGlzIGlzIHVzZWQgZm9yIGFkdmFuY2VkXG4gKiB1c2UgY2FzZXMgKGxpa2UgcmVuZGVyaW5nIHRvIGN1c3RvbSBvdXRwdXQpLlxuICovXG5cblxudmFyIHJlbmRlclRvRG9tVHJlZSA9IGZ1bmN0aW9uIHJlbmRlclRvRG9tVHJlZShleHByZXNzaW9uLCBvcHRpb25zKSB7XG4gIHZhciBzZXR0aW5ncyA9IG5ldyBTZXR0aW5ncyhvcHRpb25zKTtcblxuICB0cnkge1xuICAgIHZhciB0cmVlID0gc3JjX3BhcnNlVHJlZShleHByZXNzaW9uLCBzZXR0aW5ncyk7XG4gICAgcmV0dXJuIGJ1aWxkVHJlZSh0cmVlLCBleHByZXNzaW9uLCBzZXR0aW5ncyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHJlbmRlckVycm9yKGVycm9yLCBleHByZXNzaW9uLCBzZXR0aW5ncyk7XG4gIH1cbn07XG4vKipcbiAqIEdlbmVyYXRlcyBhbmQgcmV0dXJucyB0aGUga2F0ZXggYnVpbGQgdHJlZSwgd2l0aCBqdXN0IEhUTUwgKG5vIE1hdGhNTCkuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGFkdmFuY2VkIHVzZSBjYXNlcyAobGlrZSByZW5kZXJpbmcgdG8gY3VzdG9tIG91dHB1dCkuXG4gKi9cblxuXG52YXIgcmVuZGVyVG9IVE1MVHJlZSA9IGZ1bmN0aW9uIHJlbmRlclRvSFRNTFRyZWUoZXhwcmVzc2lvbiwgb3B0aW9ucykge1xuICB2YXIgc2V0dGluZ3MgPSBuZXcgU2V0dGluZ3Mob3B0aW9ucyk7XG5cbiAgdHJ5IHtcbiAgICB2YXIgdHJlZSA9IHNyY19wYXJzZVRyZWUoZXhwcmVzc2lvbiwgc2V0dGluZ3MpO1xuICAgIHJldHVybiBidWlsZEhUTUxUcmVlKHRyZWUsIGV4cHJlc3Npb24sIHNldHRpbmdzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gcmVuZGVyRXJyb3IoZXJyb3IsIGV4cHJlc3Npb24sIHNldHRpbmdzKTtcbiAgfVxufTtcblxuLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyB2YXIga2F0ZXggPSAoe1xuICAvKipcbiAgICogQ3VycmVudCBLYVRlWCB2ZXJzaW9uXG4gICAqL1xuICB2ZXJzaW9uOiBcIjAuMTMuMThcIixcblxuICAvKipcbiAgICogUmVuZGVycyB0aGUgZ2l2ZW4gTGFUZVggaW50byBhbiBIVE1MK01hdGhNTCBjb21iaW5hdGlvbiwgYW5kIGFkZHNcbiAgICogaXQgYXMgYSBjaGlsZCB0byB0aGUgc3BlY2lmaWVkIERPTSBub2RlLlxuICAgKi9cbiAgcmVuZGVyOiByZW5kZXIsXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGdpdmVuIExhVGVYIGludG8gYW4gSFRNTCtNYXRoTUwgY29tYmluYXRpb24gc3RyaW5nLFxuICAgKiBmb3Igc2VuZGluZyB0byB0aGUgY2xpZW50LlxuICAgKi9cbiAgcmVuZGVyVG9TdHJpbmc6IHJlbmRlclRvU3RyaW5nLFxuXG4gIC8qKlxuICAgKiBLYVRlWCBlcnJvciwgdXN1YWxseSBkdXJpbmcgcGFyc2luZy5cbiAgICovXG4gIFBhcnNlRXJyb3I6IHNyY19QYXJzZUVycm9yLFxuXG4gIC8qKlxuICAgKiBQYXJzZXMgdGhlIGdpdmVuIExhVGVYIGludG8gS2FUZVgncyBpbnRlcm5hbCBwYXJzZSB0cmVlIHN0cnVjdHVyZSxcbiAgICogd2l0aG91dCByZW5kZXJpbmcgdG8gSFRNTCBvciBNYXRoTUwuXG4gICAqXG4gICAqIE5PVEU6IFRoaXMgbWV0aG9kIGlzIG5vdCBjdXJyZW50bHkgcmVjb21tZW5kZWQgZm9yIHB1YmxpYyB1c2UuXG4gICAqIFRoZSBpbnRlcm5hbCB0cmVlIHJlcHJlc2VudGF0aW9uIGlzIHVuc3RhYmxlIGFuZCBpcyB2ZXJ5IGxpa2VseVxuICAgKiB0byBjaGFuZ2UuIFVzZSBhdCB5b3VyIG93biByaXNrLlxuICAgKi9cbiAgX19wYXJzZTogZ2VuZXJhdGVQYXJzZVRyZWUsXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGdpdmVuIExhVGVYIGludG8gYW4gSFRNTCtNYXRoTUwgaW50ZXJuYWwgRE9NIHRyZWVcbiAgICogcmVwcmVzZW50YXRpb24sIHdpdGhvdXQgZmxhdHRlbmluZyB0aGF0IHJlcHJlc2VudGF0aW9uIHRvIGEgc3RyaW5nLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIG1ldGhvZCBpcyBub3QgY3VycmVudGx5IHJlY29tbWVuZGVkIGZvciBwdWJsaWMgdXNlLlxuICAgKiBUaGUgaW50ZXJuYWwgdHJlZSByZXByZXNlbnRhdGlvbiBpcyB1bnN0YWJsZSBhbmQgaXMgdmVyeSBsaWtlbHlcbiAgICogdG8gY2hhbmdlLiBVc2UgYXQgeW91ciBvd24gcmlzay5cbiAgICovXG4gIF9fcmVuZGVyVG9Eb21UcmVlOiByZW5kZXJUb0RvbVRyZWUsXG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgdGhlIGdpdmVuIExhVGVYIGludG8gYW4gSFRNTCBpbnRlcm5hbCBET00gdHJlZSByZXByZXNlbnRhdGlvbixcbiAgICogd2l0aG91dCBNYXRoTUwgYW5kIHdpdGhvdXQgZmxhdHRlbmluZyB0aGF0IHJlcHJlc2VudGF0aW9uIHRvIGEgc3RyaW5nLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIG1ldGhvZCBpcyBub3QgY3VycmVudGx5IHJlY29tbWVuZGVkIGZvciBwdWJsaWMgdXNlLlxuICAgKiBUaGUgaW50ZXJuYWwgdHJlZSByZXByZXNlbnRhdGlvbiBpcyB1bnN0YWJsZSBhbmQgaXMgdmVyeSBsaWtlbHlcbiAgICogdG8gY2hhbmdlLiBVc2UgYXQgeW91ciBvd24gcmlzay5cbiAgICovXG4gIF9fcmVuZGVyVG9IVE1MVHJlZTogcmVuZGVyVG9IVE1MVHJlZSxcblxuICAvKipcbiAgICogZXh0ZW5kcyBpbnRlcm5hbCBmb250IG1ldHJpY3Mgb2JqZWN0IHdpdGggYSBuZXcgb2JqZWN0XG4gICAqIGVhY2gga2V5IGluIHRoZSBuZXcgb2JqZWN0IHJlcHJlc2VudHMgYSBmb250IG5hbWVcbiAgKi9cbiAgX19zZXRGb250TWV0cmljczogc2V0Rm9udE1ldHJpY3MsXG5cbiAgLyoqXG4gICAqIGFkZHMgYSBuZXcgc3ltYm9sIHRvIGJ1aWx0aW4gc3ltYm9scyB0YWJsZVxuICAgKi9cbiAgX19kZWZpbmVTeW1ib2w6IGRlZmluZVN5bWJvbCxcblxuICAvKipcbiAgICogYWRkcyBhIG5ldyBtYWNybyB0byBidWlsdGluIG1hY3JvIGxpc3RcbiAgICovXG4gIF9fZGVmaW5lTWFjcm86IGRlZmluZU1hY3JvLFxuXG4gIC8qKlxuICAgKiBFeHBvc2UgdGhlIGRvbSB0cmVlIG5vZGUgdHlwZXMsIHdoaWNoIGNhbiBiZSB1c2VmdWwgZm9yIHR5cGUgY2hlY2tpbmcgbm9kZXMuXG4gICAqXG4gICAqIE5PVEU6IFRoaXMgbWV0aG9kIGlzIG5vdCBjdXJyZW50bHkgcmVjb21tZW5kZWQgZm9yIHB1YmxpYyB1c2UuXG4gICAqIFRoZSBpbnRlcm5hbCB0cmVlIHJlcHJlc2VudGF0aW9uIGlzIHVuc3RhYmxlIGFuZCBpcyB2ZXJ5IGxpa2VseVxuICAgKiB0byBjaGFuZ2UuIFVzZSBhdCB5b3VyIG93biByaXNrLlxuICAgKi9cbiAgX19kb21UcmVlOiB7XG4gICAgU3BhbjogU3BhbixcbiAgICBBbmNob3I6IEFuY2hvcixcbiAgICBTeW1ib2xOb2RlOiBTeW1ib2xOb2RlLFxuICAgIFN2Z05vZGU6IFN2Z05vZGUsXG4gICAgUGF0aE5vZGU6IFBhdGhOb2RlLFxuICAgIExpbmVOb2RlOiBMaW5lTm9kZVxuICB9XG59KTtcbjsvLyBDT05DQVRFTkFURUQgTU9EVUxFOiAuL2thdGV4LndlYnBhY2suanNcbi8qKlxuICogVGhpcyBpcyB0aGUgd2VicGFjayBlbnRyeSBwb2ludCBmb3IgS2FUZVguIEFzIEVDTUFTY3JpcHQsIGZsb3dbMV0gYW5kIGplc3RbMl1cbiAqIGRvZXNuJ3Qgc3VwcG9ydCBDU1MgbW9kdWxlcyBuYXRpdmVseSwgYSBzZXBhcmF0ZSBlbnRyeSBwb2ludCBpcyB1c2VkIGFuZFxuICogaXQgaXMgbm90IGZsb3d0eXBlZC5cbiAqXG4gKiBbMV0gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vbGFtYmRhaGFuZHMvZDE5ZTBkYTk2Mjg1Yjc0OWYwZWZcbiAqIFsyXSBodHRwczovL2ZhY2Vib29rLmdpdGh1Yi5pby9qZXN0L2RvY3MvZW4vd2VicGFjay5odG1sXG4gKi9cblxuXG4vKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIHZhciBrYXRleF93ZWJwYWNrID0gKGthdGV4KTtcbl9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfZXhwb3J0c19fLmRlZmF1bHQ7XG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfZXhwb3J0c19fO1xuLyoqKioqKi8gfSkoKVxuO1xufSk7IiwiaW1wb3J0IHsgbGlmdFRhcmdldCwgY2FuSm9pbiwgam9pblBvaW50LCBjYW5TcGxpdCwgUmVwbGFjZUFyb3VuZFN0ZXAsIGZpbmRXcmFwcGluZyB9IGZyb20gJ3Byb3NlbWlycm9yLXRyYW5zZm9ybSc7XG5pbXBvcnQgeyBGcmFnbWVudCwgU2xpY2UgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XG5pbXBvcnQgeyBOb2RlU2VsZWN0aW9uLCBTZWxlY3Rpb24sIEFsbFNlbGVjdGlvbiwgVGV4dFNlbGVjdGlvbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcblxuLy8gOjogKEVkaXRvclN0YXRlLCA/KHRyOiBUcmFuc2FjdGlvbikpIOKGkiBib29sXG4vLyBEZWxldGUgdGhlIHNlbGVjdGlvbiwgaWYgdGhlcmUgaXMgb25lLlxuZnVuY3Rpb24gZGVsZXRlU2VsZWN0aW9uKHN0YXRlLCBkaXNwYXRjaCkge1xuICBpZiAoc3RhdGUuc2VsZWN0aW9uLmVtcHR5KSB7IHJldHVybiBmYWxzZSB9XG4gIGlmIChkaXNwYXRjaCkgeyBkaXNwYXRjaChzdGF0ZS50ci5kZWxldGVTZWxlY3Rpb24oKS5zY3JvbGxJbnRvVmlldygpKTsgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG4vLyA6OiAoRWRpdG9yU3RhdGUsID8odHI6IFRyYW5zYWN0aW9uKSwgP0VkaXRvclZpZXcpIOKGkiBib29sXG4vLyBJZiB0aGUgc2VsZWN0aW9uIGlzIGVtcHR5IGFuZCBhdCB0aGUgc3RhcnQgb2YgYSB0ZXh0YmxvY2ssIHRyeSB0b1xuLy8gcmVkdWNlIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHRoYXQgYmxvY2sgYW5kIHRoZSBvbmUgYmVmb3JlIGl04oCUaWZcbi8vIHRoZXJlJ3MgYSBibG9jayBkaXJlY3RseSBiZWZvcmUgaXQgdGhhdCBjYW4gYmUgam9pbmVkLCBqb2luIHRoZW0uXG4vLyBJZiBub3QsIHRyeSB0byBtb3ZlIHRoZSBzZWxlY3RlZCBibG9jayBjbG9zZXIgdG8gdGhlIG5leHQgb25lIGluXG4vLyB0aGUgZG9jdW1lbnQgc3RydWN0dXJlIGJ5IGxpZnRpbmcgaXQgb3V0IG9mIGl0cyBwYXJlbnQgb3IgbW92aW5nIGl0XG4vLyBpbnRvIGEgcGFyZW50IG9mIHRoZSBwcmV2aW91cyBibG9jay4gV2lsbCB1c2UgdGhlIHZpZXcgZm9yIGFjY3VyYXRlXG4vLyAoYmlkaS1hd2FyZSkgc3RhcnQtb2YtdGV4dGJsb2NrIGRldGVjdGlvbiBpZiBnaXZlbi5cbmZ1bmN0aW9uIGpvaW5CYWNrd2FyZChzdGF0ZSwgZGlzcGF0Y2gsIHZpZXcpIHtcbiAgdmFyIHJlZiA9IHN0YXRlLnNlbGVjdGlvbjtcbiAgdmFyICRjdXJzb3IgPSByZWYuJGN1cnNvcjtcbiAgaWYgKCEkY3Vyc29yIHx8ICh2aWV3ID8gIXZpZXcuZW5kT2ZUZXh0YmxvY2soXCJiYWNrd2FyZFwiLCBzdGF0ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJGN1cnNvci5wYXJlbnRPZmZzZXQgPiAwKSlcbiAgICB7IHJldHVybiBmYWxzZSB9XG5cbiAgdmFyICRjdXQgPSBmaW5kQ3V0QmVmb3JlKCRjdXJzb3IpO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vIG5vZGUgYmVmb3JlIHRoaXMsIHRyeSB0byBsaWZ0XG4gIGlmICghJGN1dCkge1xuICAgIHZhciByYW5nZSA9ICRjdXJzb3IuYmxvY2tSYW5nZSgpLCB0YXJnZXQgPSByYW5nZSAmJiBsaWZ0VGFyZ2V0KHJhbmdlKTtcbiAgICBpZiAodGFyZ2V0ID09IG51bGwpIHsgcmV0dXJuIGZhbHNlIH1cbiAgICBpZiAoZGlzcGF0Y2gpIHsgZGlzcGF0Y2goc3RhdGUudHIubGlmdChyYW5nZSwgdGFyZ2V0KS5zY3JvbGxJbnRvVmlldygpKTsgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICB2YXIgYmVmb3JlID0gJGN1dC5ub2RlQmVmb3JlO1xuICAvLyBBcHBseSB0aGUgam9pbmluZyBhbGdvcml0aG1cbiAgaWYgKCFiZWZvcmUudHlwZS5zcGVjLmlzb2xhdGluZyAmJiBkZWxldGVCYXJyaWVyKHN0YXRlLCAkY3V0LCBkaXNwYXRjaCkpXG4gICAgeyByZXR1cm4gdHJ1ZSB9XG5cbiAgLy8gSWYgdGhlIG5vZGUgYmVsb3cgaGFzIG5vIGNvbnRlbnQgYW5kIHRoZSBub2RlIGFib3ZlIGlzXG4gIC8vIHNlbGVjdGFibGUsIGRlbGV0ZSB0aGUgbm9kZSBiZWxvdyBhbmQgc2VsZWN0IHRoZSBvbmUgYWJvdmUuXG4gIGlmICgkY3Vyc29yLnBhcmVudC5jb250ZW50LnNpemUgPT0gMCAmJlxuICAgICAgKHRleHRibG9ja0F0KGJlZm9yZSwgXCJlbmRcIikgfHwgTm9kZVNlbGVjdGlvbi5pc1NlbGVjdGFibGUoYmVmb3JlKSkpIHtcbiAgICBpZiAoZGlzcGF0Y2gpIHtcbiAgICAgIHZhciB0ciA9IHN0YXRlLnRyLmRlbGV0ZVJhbmdlKCRjdXJzb3IuYmVmb3JlKCksICRjdXJzb3IuYWZ0ZXIoKSk7XG4gICAgICB0ci5zZXRTZWxlY3Rpb24odGV4dGJsb2NrQXQoYmVmb3JlLCBcImVuZFwiKSA/IFNlbGVjdGlvbi5maW5kRnJvbSh0ci5kb2MucmVzb2x2ZSh0ci5tYXBwaW5nLm1hcCgkY3V0LnBvcywgLTEpKSwgLTEpXG4gICAgICAgICAgICAgICAgICAgICAgOiBOb2RlU2VsZWN0aW9uLmNyZWF0ZSh0ci5kb2MsICRjdXQucG9zIC0gYmVmb3JlLm5vZGVTaXplKSk7XG4gICAgICBkaXNwYXRjaCh0ci5zY3JvbGxJbnRvVmlldygpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIC8vIElmIHRoZSBub2RlIGJlZm9yZSBpcyBhbiBhdG9tLCBkZWxldGUgaXRcbiAgaWYgKGJlZm9yZS5pc0F0b20gJiYgJGN1dC5kZXB0aCA9PSAkY3Vyc29yLmRlcHRoIC0gMSkge1xuICAgIGlmIChkaXNwYXRjaCkgeyBkaXNwYXRjaChzdGF0ZS50ci5kZWxldGUoJGN1dC5wb3MgLSBiZWZvcmUubm9kZVNpemUsICRjdXQucG9zKS5zY3JvbGxJbnRvVmlldygpKTsgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gdGV4dGJsb2NrQXQobm9kZSwgc2lkZSwgb25seSkge1xuICBmb3IgKDsgbm9kZTsgbm9kZSA9IChzaWRlID09IFwic3RhcnRcIiA/IG5vZGUuZmlyc3RDaGlsZCA6IG5vZGUubGFzdENoaWxkKSkge1xuICAgIGlmIChub2RlLmlzVGV4dGJsb2NrKSB7IHJldHVybiB0cnVlIH1cbiAgICBpZiAob25seSAmJiBub2RlLmNoaWxkQ291bnQgIT0gMSkgeyByZXR1cm4gZmFsc2UgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vLyA6OiAoRWRpdG9yU3RhdGUsID8odHI6IFRyYW5zYWN0aW9uKSwgP0VkaXRvclZpZXcpIOKGkiBib29sXG4vLyBXaGVuIHRoZSBzZWxlY3Rpb24gaXMgZW1wdHkgYW5kIGF0IHRoZSBzdGFydCBvZiBhIHRleHRibG9jaywgc2VsZWN0XG4vLyB0aGUgbm9kZSBiZWZvcmUgdGhhdCB0ZXh0YmxvY2ssIGlmIHBvc3NpYmxlLiBUaGlzIGlzIGludGVuZGVkIHRvIGJlXG4vLyBib3VuZCB0byBrZXlzIGxpa2UgYmFja3NwYWNlLCBhZnRlclxuLy8gW2Bqb2luQmFja3dhcmRgXSgjY29tbWFuZHMuam9pbkJhY2t3YXJkKSBvciBvdGhlciBkZWxldGluZ1xuLy8gY29tbWFuZHMsIGFzIGEgZmFsbC1iYWNrIGJlaGF2aW9yIHdoZW4gdGhlIHNjaGVtYSBkb2Vzbid0IGFsbG93XG4vLyBkZWxldGlvbiBhdCB0aGUgc2VsZWN0ZWQgcG9pbnQuXG5mdW5jdGlvbiBzZWxlY3ROb2RlQmFja3dhcmQoc3RhdGUsIGRpc3BhdGNoLCB2aWV3KSB7XG4gIHZhciByZWYgPSBzdGF0ZS5zZWxlY3Rpb247XG4gIHZhciAkaGVhZCA9IHJlZi4kaGVhZDtcbiAgdmFyIGVtcHR5ID0gcmVmLmVtcHR5O1xuICB2YXIgJGN1dCA9ICRoZWFkO1xuICBpZiAoIWVtcHR5KSB7IHJldHVybiBmYWxzZSB9XG5cbiAgaWYgKCRoZWFkLnBhcmVudC5pc1RleHRibG9jaykge1xuICAgIGlmICh2aWV3ID8gIXZpZXcuZW5kT2ZUZXh0YmxvY2soXCJiYWNrd2FyZFwiLCBzdGF0ZSkgOiAkaGVhZC5wYXJlbnRPZmZzZXQgPiAwKSB7IHJldHVybiBmYWxzZSB9XG4gICAgJGN1dCA9IGZpbmRDdXRCZWZvcmUoJGhlYWQpO1xuICB9XG4gIHZhciBub2RlID0gJGN1dCAmJiAkY3V0Lm5vZGVCZWZvcmU7XG4gIGlmICghbm9kZSB8fCAhTm9kZVNlbGVjdGlvbi5pc1NlbGVjdGFibGUobm9kZSkpIHsgcmV0dXJuIGZhbHNlIH1cbiAgaWYgKGRpc3BhdGNoKVxuICAgIHsgZGlzcGF0Y2goc3RhdGUudHIuc2V0U2VsZWN0aW9uKE5vZGVTZWxlY3Rpb24uY3JlYXRlKHN0YXRlLmRvYywgJGN1dC5wb3MgLSBub2RlLm5vZGVTaXplKSkuc2Nyb2xsSW50b1ZpZXcoKSk7IH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gZmluZEN1dEJlZm9yZSgkcG9zKSB7XG4gIGlmICghJHBvcy5wYXJlbnQudHlwZS5zcGVjLmlzb2xhdGluZykgeyBmb3IgKHZhciBpID0gJHBvcy5kZXB0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKCRwb3MuaW5kZXgoaSkgPiAwKSB7IHJldHVybiAkcG9zLmRvYy5yZXNvbHZlKCRwb3MuYmVmb3JlKGkgKyAxKSkgfVxuICAgIGlmICgkcG9zLm5vZGUoaSkudHlwZS5zcGVjLmlzb2xhdGluZykgeyBicmVhayB9XG4gIH0gfVxuICByZXR1cm4gbnVsbFxufVxuXG4vLyA6OiAoRWRpdG9yU3RhdGUsID8odHI6IFRyYW5zYWN0aW9uKSwgP0VkaXRvclZpZXcpIOKGkiBib29sXG4vLyBJZiB0aGUgc2VsZWN0aW9uIGlzIGVtcHR5IGFuZCB0aGUgY3Vyc29yIGlzIGF0IHRoZSBlbmQgb2YgYVxuLy8gdGV4dGJsb2NrLCB0cnkgdG8gcmVkdWNlIG9yIHJlbW92ZSB0aGUgYm91bmRhcnkgYmV0d2VlbiB0aGF0IGJsb2NrXG4vLyBhbmQgdGhlIG9uZSBhZnRlciBpdCwgZWl0aGVyIGJ5IGpvaW5pbmcgdGhlbSBvciBieSBtb3ZpbmcgdGhlIG90aGVyXG4vLyBibG9jayBjbG9zZXIgdG8gdGhpcyBvbmUgaW4gdGhlIHRyZWUgc3RydWN0dXJlLiBXaWxsIHVzZSB0aGUgdmlld1xuLy8gZm9yIGFjY3VyYXRlIHN0YXJ0LW9mLXRleHRibG9jayBkZXRlY3Rpb24gaWYgZ2l2ZW4uXG5mdW5jdGlvbiBqb2luRm9yd2FyZChzdGF0ZSwgZGlzcGF0Y2gsIHZpZXcpIHtcbiAgdmFyIHJlZiA9IHN0YXRlLnNlbGVjdGlvbjtcbiAgdmFyICRjdXJzb3IgPSByZWYuJGN1cnNvcjtcbiAgaWYgKCEkY3Vyc29yIHx8ICh2aWV3ID8gIXZpZXcuZW5kT2ZUZXh0YmxvY2soXCJmb3J3YXJkXCIsIHN0YXRlKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiAkY3Vyc29yLnBhcmVudE9mZnNldCA8ICRjdXJzb3IucGFyZW50LmNvbnRlbnQuc2l6ZSkpXG4gICAgeyByZXR1cm4gZmFsc2UgfVxuXG4gIHZhciAkY3V0ID0gZmluZEN1dEFmdGVyKCRjdXJzb3IpO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vIG5vZGUgYWZ0ZXIgdGhpcywgdGhlcmUncyBub3RoaW5nIHRvIGRvXG4gIGlmICghJGN1dCkgeyByZXR1cm4gZmFsc2UgfVxuXG4gIHZhciBhZnRlciA9ICRjdXQubm9kZUFmdGVyO1xuICAvLyBUcnkgdGhlIGpvaW5pbmcgYWxnb3JpdGhtXG4gIGlmIChkZWxldGVCYXJyaWVyKHN0YXRlLCAkY3V0LCBkaXNwYXRjaCkpIHsgcmV0dXJuIHRydWUgfVxuXG4gIC8vIElmIHRoZSBub2RlIGFib3ZlIGhhcyBubyBjb250ZW50IGFuZCB0aGUgbm9kZSBiZWxvdyBpc1xuICAvLyBzZWxlY3RhYmxlLCBkZWxldGUgdGhlIG5vZGUgYWJvdmUgYW5kIHNlbGVjdCB0aGUgb25lIGJlbG93LlxuICBpZiAoJGN1cnNvci5wYXJlbnQuY29udGVudC5zaXplID09IDAgJiZcbiAgICAgICh0ZXh0YmxvY2tBdChhZnRlciwgXCJzdGFydFwiKSB8fCBOb2RlU2VsZWN0aW9uLmlzU2VsZWN0YWJsZShhZnRlcikpKSB7XG4gICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICB2YXIgdHIgPSBzdGF0ZS50ci5kZWxldGVSYW5nZSgkY3Vyc29yLmJlZm9yZSgpLCAkY3Vyc29yLmFmdGVyKCkpO1xuICAgICAgdHIuc2V0U2VsZWN0aW9uKHRleHRibG9ja0F0KGFmdGVyLCBcInN0YXJ0XCIpID8gU2VsZWN0aW9uLmZpbmRGcm9tKHRyLmRvYy5yZXNvbHZlKHRyLm1hcHBpbmcubWFwKCRjdXQucG9zKSksIDEpXG4gICAgICAgICAgICAgICAgICAgICAgOiBOb2RlU2VsZWN0aW9uLmNyZWF0ZSh0ci5kb2MsIHRyLm1hcHBpbmcubWFwKCRjdXQucG9zKSkpO1xuICAgICAgZGlzcGF0Y2godHIuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvLyBJZiB0aGUgbmV4dCBub2RlIGlzIGFuIGF0b20sIGRlbGV0ZSBpdFxuICBpZiAoYWZ0ZXIuaXNBdG9tICYmICRjdXQuZGVwdGggPT0gJGN1cnNvci5kZXB0aCAtIDEpIHtcbiAgICBpZiAoZGlzcGF0Y2gpIHsgZGlzcGF0Y2goc3RhdGUudHIuZGVsZXRlKCRjdXQucG9zLCAkY3V0LnBvcyArIGFmdGVyLm5vZGVTaXplKS5zY3JvbGxJbnRvVmlldygpKTsgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cblxuLy8gOjogKEVkaXRvclN0YXRlLCA/KHRyOiBUcmFuc2FjdGlvbiksID9FZGl0b3JWaWV3KSDihpIgYm9vbFxuLy8gV2hlbiB0aGUgc2VsZWN0aW9uIGlzIGVtcHR5IGFuZCBhdCB0aGUgZW5kIG9mIGEgdGV4dGJsb2NrLCBzZWxlY3Rcbi8vIHRoZSBub2RlIGNvbWluZyBhZnRlciB0aGF0IHRleHRibG9jaywgaWYgcG9zc2libGUuIFRoaXMgaXMgaW50ZW5kZWRcbi8vIHRvIGJlIGJvdW5kIHRvIGtleXMgbGlrZSBkZWxldGUsIGFmdGVyXG4vLyBbYGpvaW5Gb3J3YXJkYF0oI2NvbW1hbmRzLmpvaW5Gb3J3YXJkKSBhbmQgc2ltaWxhciBkZWxldGluZ1xuLy8gY29tbWFuZHMsIHRvIHByb3ZpZGUgYSBmYWxsLWJhY2sgYmVoYXZpb3Igd2hlbiB0aGUgc2NoZW1hIGRvZXNuJ3Rcbi8vIGFsbG93IGRlbGV0aW9uIGF0IHRoZSBzZWxlY3RlZCBwb2ludC5cbmZ1bmN0aW9uIHNlbGVjdE5vZGVGb3J3YXJkKHN0YXRlLCBkaXNwYXRjaCwgdmlldykge1xuICB2YXIgcmVmID0gc3RhdGUuc2VsZWN0aW9uO1xuICB2YXIgJGhlYWQgPSByZWYuJGhlYWQ7XG4gIHZhciBlbXB0eSA9IHJlZi5lbXB0eTtcbiAgdmFyICRjdXQgPSAkaGVhZDtcbiAgaWYgKCFlbXB0eSkgeyByZXR1cm4gZmFsc2UgfVxuICBpZiAoJGhlYWQucGFyZW50LmlzVGV4dGJsb2NrKSB7XG4gICAgaWYgKHZpZXcgPyAhdmlldy5lbmRPZlRleHRibG9jayhcImZvcndhcmRcIiwgc3RhdGUpIDogJGhlYWQucGFyZW50T2Zmc2V0IDwgJGhlYWQucGFyZW50LmNvbnRlbnQuc2l6ZSlcbiAgICAgIHsgcmV0dXJuIGZhbHNlIH1cbiAgICAkY3V0ID0gZmluZEN1dEFmdGVyKCRoZWFkKTtcbiAgfVxuICB2YXIgbm9kZSA9ICRjdXQgJiYgJGN1dC5ub2RlQWZ0ZXI7XG4gIGlmICghbm9kZSB8fCAhTm9kZVNlbGVjdGlvbi5pc1NlbGVjdGFibGUobm9kZSkpIHsgcmV0dXJuIGZhbHNlIH1cbiAgaWYgKGRpc3BhdGNoKVxuICAgIHsgZGlzcGF0Y2goc3RhdGUudHIuc2V0U2VsZWN0aW9uKE5vZGVTZWxlY3Rpb24uY3JlYXRlKHN0YXRlLmRvYywgJGN1dC5wb3MpKS5zY3JvbGxJbnRvVmlldygpKTsgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBmaW5kQ3V0QWZ0ZXIoJHBvcykge1xuICBpZiAoISRwb3MucGFyZW50LnR5cGUuc3BlYy5pc29sYXRpbmcpIHsgZm9yICh2YXIgaSA9ICRwb3MuZGVwdGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJlbnQgPSAkcG9zLm5vZGUoaSk7XG4gICAgaWYgKCRwb3MuaW5kZXgoaSkgKyAxIDwgcGFyZW50LmNoaWxkQ291bnQpIHsgcmV0dXJuICRwb3MuZG9jLnJlc29sdmUoJHBvcy5hZnRlcihpICsgMSkpIH1cbiAgICBpZiAocGFyZW50LnR5cGUuc3BlYy5pc29sYXRpbmcpIHsgYnJlYWsgfVxuICB9IH1cbiAgcmV0dXJuIG51bGxcbn1cblxuLy8gOjogKEVkaXRvclN0YXRlLCA/KHRyOiBUcmFuc2FjdGlvbikpIOKGkiBib29sXG4vLyBKb2luIHRoZSBzZWxlY3RlZCBibG9jayBvciwgaWYgdGhlcmUgaXMgYSB0ZXh0IHNlbGVjdGlvbiwgdGhlXG4vLyBjbG9zZXN0IGFuY2VzdG9yIGJsb2NrIG9mIHRoZSBzZWxlY3Rpb24gdGhhdCBjYW4gYmUgam9pbmVkLCB3aXRoXG4vLyB0aGUgc2libGluZyBhYm92ZSBpdC5cbmZ1bmN0aW9uIGpvaW5VcChzdGF0ZSwgZGlzcGF0Y2gpIHtcbiAgdmFyIHNlbCA9IHN0YXRlLnNlbGVjdGlvbiwgbm9kZVNlbCA9IHNlbCBpbnN0YW5jZW9mIE5vZGVTZWxlY3Rpb24sIHBvaW50O1xuICBpZiAobm9kZVNlbCkge1xuICAgIGlmIChzZWwubm9kZS5pc1RleHRibG9jayB8fCAhY2FuSm9pbihzdGF0ZS5kb2MsIHNlbC5mcm9tKSkgeyByZXR1cm4gZmFsc2UgfVxuICAgIHBvaW50ID0gc2VsLmZyb207XG4gIH0gZWxzZSB7XG4gICAgcG9pbnQgPSBqb2luUG9pbnQoc3RhdGUuZG9jLCBzZWwuZnJvbSwgLTEpO1xuICAgIGlmIChwb2ludCA9PSBudWxsKSB7IHJldHVybiBmYWxzZSB9XG4gIH1cbiAgaWYgKGRpc3BhdGNoKSB7XG4gICAgdmFyIHRyID0gc3RhdGUudHIuam9pbihwb2ludCk7XG4gICAgaWYgKG5vZGVTZWwpIHsgdHIuc2V0U2VsZWN0aW9uKE5vZGVTZWxlY3Rpb24uY3JlYXRlKHRyLmRvYywgcG9pbnQgLSBzdGF0ZS5kb2MucmVzb2x2ZShwb2ludCkubm9kZUJlZm9yZS5ub2RlU2l6ZSkpOyB9XG4gICAgZGlzcGF0Y2godHIuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuLy8gOjogKEVkaXRvclN0YXRlLCA/KHRyOiBUcmFuc2FjdGlvbikpIOKGkiBib29sXG4vLyBKb2luIHRoZSBzZWxlY3RlZCBibG9jaywgb3IgdGhlIGNsb3Nlc3QgYW5jZXN0b3Igb2YgdGhlIHNlbGVjdGlvblxuLy8gdGhhdCBjYW4gYmUgam9pbmVkLCB3aXRoIHRoZSBzaWJsaW5nIGFmdGVyIGl0LlxuZnVuY3Rpb24gam9pbkRvd24oc3RhdGUsIGRpc3BhdGNoKSB7XG4gIHZhciBzZWwgPSBzdGF0ZS5zZWxlY3Rpb24sIHBvaW50O1xuICBpZiAoc2VsIGluc3RhbmNlb2YgTm9kZVNlbGVjdGlvbikge1xuICAgIGlmIChzZWwubm9kZS5pc1RleHRibG9jayB8fCAhY2FuSm9pbihzdGF0ZS5kb2MsIHNlbC50bykpIHsgcmV0dXJuIGZhbHNlIH1cbiAgICBwb2ludCA9IHNlbC50bztcbiAgfSBlbHNlIHtcbiAgICBwb2ludCA9IGpvaW5Qb2ludChzdGF0ZS5kb2MsIHNlbC50bywgMSk7XG4gICAgaWYgKHBvaW50ID09IG51bGwpIHsgcmV0dXJuIGZhbHNlIH1cbiAgfVxuICBpZiAoZGlzcGF0Y2gpXG4gICAgeyBkaXNwYXRjaChzdGF0ZS50ci5qb2luKHBvaW50KS5zY3JvbGxJbnRvVmlldygpKTsgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG4vLyA6OiAoRWRpdG9yU3RhdGUsID8odHI6IFRyYW5zYWN0aW9uKSkg4oaSIGJvb2xcbi8vIExpZnQgdGhlIHNlbGVjdGVkIGJsb2NrLCBvciB0aGUgY2xvc2VzdCBhbmNlc3RvciBibG9jayBvZiB0aGVcbi8vIHNlbGVjdGlvbiB0aGF0IGNhbiBiZSBsaWZ0ZWQsIG91dCBvZiBpdHMgcGFyZW50IG5vZGUuXG5mdW5jdGlvbiBsaWZ0KHN0YXRlLCBkaXNwYXRjaCkge1xuICB2YXIgcmVmID0gc3RhdGUuc2VsZWN0aW9uO1xuICB2YXIgJGZyb20gPSByZWYuJGZyb207XG4gIHZhciAkdG8gPSByZWYuJHRvO1xuICB2YXIgcmFuZ2UgPSAkZnJvbS5ibG9ja1JhbmdlKCR0byksIHRhcmdldCA9IHJhbmdlICYmIGxpZnRUYXJnZXQocmFuZ2UpO1xuICBpZiAodGFyZ2V0ID09IG51bGwpIHsgcmV0dXJuIGZhbHNlIH1cbiAgaWYgKGRpc3BhdGNoKSB7IGRpc3BhdGNoKHN0YXRlLnRyLmxpZnQocmFuZ2UsIHRhcmdldCkuc2Nyb2xsSW50b1ZpZXcoKSk7IH1cbiAgcmV0dXJuIHRydWVcbn1cblxuLy8gOjogKEVkaXRvclN0YXRlLCA/KHRyOiBUcmFuc2FjdGlvbikpIOKGkiBib29sXG4vLyBJZiB0aGUgc2VsZWN0aW9uIGlzIGluIGEgbm9kZSB3aG9zZSB0eXBlIGhhcyBhIHRydXRoeVxuLy8gW2Bjb2RlYF0oI21vZGVsLk5vZGVTcGVjLmNvZGUpIHByb3BlcnR5IGluIGl0cyBzcGVjLCByZXBsYWNlIHRoZVxuLy8gc2VsZWN0aW9uIHdpdGggYSBuZXdsaW5lIGNoYXJhY3Rlci5cbmZ1bmN0aW9uIG5ld2xpbmVJbkNvZGUoc3RhdGUsIGRpc3BhdGNoKSB7XG4gIHZhciByZWYgPSBzdGF0ZS5zZWxlY3Rpb247XG4gIHZhciAkaGVhZCA9IHJlZi4kaGVhZDtcbiAgdmFyICRhbmNob3IgPSByZWYuJGFuY2hvcjtcbiAgaWYgKCEkaGVhZC5wYXJlbnQudHlwZS5zcGVjLmNvZGUgfHwgISRoZWFkLnNhbWVQYXJlbnQoJGFuY2hvcikpIHsgcmV0dXJuIGZhbHNlIH1cbiAgaWYgKGRpc3BhdGNoKSB7IGRpc3BhdGNoKHN0YXRlLnRyLmluc2VydFRleHQoXCJcXG5cIikuc2Nyb2xsSW50b1ZpZXcoKSk7IH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gZGVmYXVsdEJsb2NrQXQobWF0Y2gpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRjaC5lZGdlQ291bnQ7IGkrKykge1xuICAgIHZhciByZWYgPSBtYXRjaC5lZGdlKGkpO1xuICAgIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gICAgaWYgKHR5cGUuaXNUZXh0YmxvY2sgJiYgIXR5cGUuaGFzUmVxdWlyZWRBdHRycygpKSB7IHJldHVybiB0eXBlIH1cbiAgfVxuICByZXR1cm4gbnVsbFxufVxuXG4vLyA6OiAoRWRpdG9yU3RhdGUsID8odHI6IFRyYW5zYWN0aW9uKSkg4oaSIGJvb2xcbi8vIFdoZW4gdGhlIHNlbGVjdGlvbiBpcyBpbiBhIG5vZGUgd2l0aCBhIHRydXRoeVxuLy8gW2Bjb2RlYF0oI21vZGVsLk5vZGVTcGVjLmNvZGUpIHByb3BlcnR5IGluIGl0cyBzcGVjLCBjcmVhdGUgYVxuLy8gZGVmYXVsdCBibG9jayBhZnRlciB0aGUgY29kZSBibG9jaywgYW5kIG1vdmUgdGhlIGN1cnNvciB0aGVyZS5cbmZ1bmN0aW9uIGV4aXRDb2RlKHN0YXRlLCBkaXNwYXRjaCkge1xuICB2YXIgcmVmID0gc3RhdGUuc2VsZWN0aW9uO1xuICB2YXIgJGhlYWQgPSByZWYuJGhlYWQ7XG4gIHZhciAkYW5jaG9yID0gcmVmLiRhbmNob3I7XG4gIGlmICghJGhlYWQucGFyZW50LnR5cGUuc3BlYy5jb2RlIHx8ICEkaGVhZC5zYW1lUGFyZW50KCRhbmNob3IpKSB7IHJldHVybiBmYWxzZSB9XG4gIHZhciBhYm92ZSA9ICRoZWFkLm5vZGUoLTEpLCBhZnRlciA9ICRoZWFkLmluZGV4QWZ0ZXIoLTEpLCB0eXBlID0gZGVmYXVsdEJsb2NrQXQoYWJvdmUuY29udGVudE1hdGNoQXQoYWZ0ZXIpKTtcbiAgaWYgKCFhYm92ZS5jYW5SZXBsYWNlV2l0aChhZnRlciwgYWZ0ZXIsIHR5cGUpKSB7IHJldHVybiBmYWxzZSB9XG4gIGlmIChkaXNwYXRjaCkge1xuICAgIHZhciBwb3MgPSAkaGVhZC5hZnRlcigpLCB0ciA9IHN0YXRlLnRyLnJlcGxhY2VXaXRoKHBvcywgcG9zLCB0eXBlLmNyZWF0ZUFuZEZpbGwoKSk7XG4gICAgdHIuc2V0U2VsZWN0aW9uKFNlbGVjdGlvbi5uZWFyKHRyLmRvYy5yZXNvbHZlKHBvcyksIDEpKTtcbiAgICBkaXNwYXRjaCh0ci5zY3JvbGxJbnRvVmlldygpKTtcbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG4vLyA6OiAoRWRpdG9yU3RhdGUsID8odHI6IFRyYW5zYWN0aW9uKSkg4oaSIGJvb2xcbi8vIElmIGEgYmxvY2sgbm9kZSBpcyBzZWxlY3RlZCwgY3JlYXRlIGFuIGVtcHR5IHBhcmFncmFwaCBiZWZvcmUgKGlmXG4vLyBpdCBpcyBpdHMgcGFyZW50J3MgZmlyc3QgY2hpbGQpIG9yIGFmdGVyIGl0LlxuZnVuY3Rpb24gY3JlYXRlUGFyYWdyYXBoTmVhcihzdGF0ZSwgZGlzcGF0Y2gpIHtcbiAgdmFyIHNlbCA9IHN0YXRlLnNlbGVjdGlvbjtcbiAgdmFyICRmcm9tID0gc2VsLiRmcm9tO1xuICB2YXIgJHRvID0gc2VsLiR0bztcbiAgaWYgKHNlbCBpbnN0YW5jZW9mIEFsbFNlbGVjdGlvbiB8fCAkZnJvbS5wYXJlbnQuaW5saW5lQ29udGVudCB8fCAkdG8ucGFyZW50LmlubGluZUNvbnRlbnQpIHsgcmV0dXJuIGZhbHNlIH1cbiAgdmFyIHR5cGUgPSBkZWZhdWx0QmxvY2tBdCgkdG8ucGFyZW50LmNvbnRlbnRNYXRjaEF0KCR0by5pbmRleEFmdGVyKCkpKTtcbiAgaWYgKCF0eXBlIHx8ICF0eXBlLmlzVGV4dGJsb2NrKSB7IHJldHVybiBmYWxzZSB9XG4gIGlmIChkaXNwYXRjaCkge1xuICAgIHZhciBzaWRlID0gKCEkZnJvbS5wYXJlbnRPZmZzZXQgJiYgJHRvLmluZGV4KCkgPCAkdG8ucGFyZW50LmNoaWxkQ291bnQgPyAkZnJvbSA6ICR0bykucG9zO1xuICAgIHZhciB0ciA9IHN0YXRlLnRyLmluc2VydChzaWRlLCB0eXBlLmNyZWF0ZUFuZEZpbGwoKSk7XG4gICAgdHIuc2V0U2VsZWN0aW9uKFRleHRTZWxlY3Rpb24uY3JlYXRlKHRyLmRvYywgc2lkZSArIDEpKTtcbiAgICBkaXNwYXRjaCh0ci5zY3JvbGxJbnRvVmlldygpKTtcbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG4vLyA6OiAoRWRpdG9yU3RhdGUsID8odHI6IFRyYW5zYWN0aW9uKSkg4oaSIGJvb2xcbi8vIElmIHRoZSBjdXJzb3IgaXMgaW4gYW4gZW1wdHkgdGV4dGJsb2NrIHRoYXQgY2FuIGJlIGxpZnRlZCwgbGlmdCB0aGVcbi8vIGJsb2NrLlxuZnVuY3Rpb24gbGlmdEVtcHR5QmxvY2soc3RhdGUsIGRpc3BhdGNoKSB7XG4gIHZhciByZWYgPSBzdGF0ZS5zZWxlY3Rpb247XG4gIHZhciAkY3Vyc29yID0gcmVmLiRjdXJzb3I7XG4gIGlmICghJGN1cnNvciB8fCAkY3Vyc29yLnBhcmVudC5jb250ZW50LnNpemUpIHsgcmV0dXJuIGZhbHNlIH1cbiAgaWYgKCRjdXJzb3IuZGVwdGggPiAxICYmICRjdXJzb3IuYWZ0ZXIoKSAhPSAkY3Vyc29yLmVuZCgtMSkpIHtcbiAgICB2YXIgYmVmb3JlID0gJGN1cnNvci5iZWZvcmUoKTtcbiAgICBpZiAoY2FuU3BsaXQoc3RhdGUuZG9jLCBiZWZvcmUpKSB7XG4gICAgICBpZiAoZGlzcGF0Y2gpIHsgZGlzcGF0Y2goc3RhdGUudHIuc3BsaXQoYmVmb3JlKS5zY3JvbGxJbnRvVmlldygpKTsgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgdmFyIHJhbmdlID0gJGN1cnNvci5ibG9ja1JhbmdlKCksIHRhcmdldCA9IHJhbmdlICYmIGxpZnRUYXJnZXQocmFuZ2UpO1xuICBpZiAodGFyZ2V0ID09IG51bGwpIHsgcmV0dXJuIGZhbHNlIH1cbiAgaWYgKGRpc3BhdGNoKSB7IGRpc3BhdGNoKHN0YXRlLnRyLmxpZnQocmFuZ2UsIHRhcmdldCkuc2Nyb2xsSW50b1ZpZXcoKSk7IH1cbiAgcmV0dXJuIHRydWVcbn1cblxuLy8gOjogKEVkaXRvclN0YXRlLCA/KHRyOiBUcmFuc2FjdGlvbikpIOKGkiBib29sXG4vLyBTcGxpdCB0aGUgcGFyZW50IGJsb2NrIG9mIHRoZSBzZWxlY3Rpb24uIElmIHRoZSBzZWxlY3Rpb24gaXMgYSB0ZXh0XG4vLyBzZWxlY3Rpb24sIGFsc28gZGVsZXRlIGl0cyBjb250ZW50LlxuZnVuY3Rpb24gc3BsaXRCbG9jayhzdGF0ZSwgZGlzcGF0Y2gpIHtcbiAgdmFyIHJlZiA9IHN0YXRlLnNlbGVjdGlvbjtcbiAgdmFyICRmcm9tID0gcmVmLiRmcm9tO1xuICB2YXIgJHRvID0gcmVmLiR0bztcbiAgaWYgKHN0YXRlLnNlbGVjdGlvbiBpbnN0YW5jZW9mIE5vZGVTZWxlY3Rpb24gJiYgc3RhdGUuc2VsZWN0aW9uLm5vZGUuaXNCbG9jaykge1xuICAgIGlmICghJGZyb20ucGFyZW50T2Zmc2V0IHx8ICFjYW5TcGxpdChzdGF0ZS5kb2MsICRmcm9tLnBvcykpIHsgcmV0dXJuIGZhbHNlIH1cbiAgICBpZiAoZGlzcGF0Y2gpIHsgZGlzcGF0Y2goc3RhdGUudHIuc3BsaXQoJGZyb20ucG9zKS5zY3JvbGxJbnRvVmlldygpKTsgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBpZiAoISRmcm9tLnBhcmVudC5pc0Jsb2NrKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgaWYgKGRpc3BhdGNoKSB7XG4gICAgdmFyIGF0RW5kID0gJHRvLnBhcmVudE9mZnNldCA9PSAkdG8ucGFyZW50LmNvbnRlbnQuc2l6ZTtcbiAgICB2YXIgdHIgPSBzdGF0ZS50cjtcbiAgICBpZiAoc3RhdGUuc2VsZWN0aW9uIGluc3RhbmNlb2YgVGV4dFNlbGVjdGlvbiB8fCBzdGF0ZS5zZWxlY3Rpb24gaW5zdGFuY2VvZiBBbGxTZWxlY3Rpb24pIHsgdHIuZGVsZXRlU2VsZWN0aW9uKCk7IH1cbiAgICB2YXIgZGVmbHQgPSAkZnJvbS5kZXB0aCA9PSAwID8gbnVsbCA6IGRlZmF1bHRCbG9ja0F0KCRmcm9tLm5vZGUoLTEpLmNvbnRlbnRNYXRjaEF0KCRmcm9tLmluZGV4QWZ0ZXIoLTEpKSk7XG4gICAgdmFyIHR5cGVzID0gYXRFbmQgJiYgZGVmbHQgPyBbe3R5cGU6IGRlZmx0fV0gOiBudWxsO1xuICAgIHZhciBjYW4gPSBjYW5TcGxpdCh0ci5kb2MsIHRyLm1hcHBpbmcubWFwKCRmcm9tLnBvcyksIDEsIHR5cGVzKTtcbiAgICBpZiAoIXR5cGVzICYmICFjYW4gJiYgY2FuU3BsaXQodHIuZG9jLCB0ci5tYXBwaW5nLm1hcCgkZnJvbS5wb3MpLCAxLCBkZWZsdCAmJiBbe3R5cGU6IGRlZmx0fV0pKSB7XG4gICAgICB0eXBlcyA9IFt7dHlwZTogZGVmbHR9XTtcbiAgICAgIGNhbiA9IHRydWU7XG4gICAgfVxuICAgIGlmIChjYW4pIHtcbiAgICAgIHRyLnNwbGl0KHRyLm1hcHBpbmcubWFwKCRmcm9tLnBvcyksIDEsIHR5cGVzKTtcbiAgICAgIGlmICghYXRFbmQgJiYgISRmcm9tLnBhcmVudE9mZnNldCAmJiAkZnJvbS5wYXJlbnQudHlwZSAhPSBkZWZsdCkge1xuICAgICAgICB2YXIgZmlyc3QgPSB0ci5tYXBwaW5nLm1hcCgkZnJvbS5iZWZvcmUoKSksICRmaXJzdCA9IHRyLmRvYy5yZXNvbHZlKGZpcnN0KTtcbiAgICAgICAgaWYgKCRmcm9tLm5vZGUoLTEpLmNhblJlcGxhY2VXaXRoKCRmaXJzdC5pbmRleCgpLCAkZmlyc3QuaW5kZXgoKSArIDEsIGRlZmx0KSlcbiAgICAgICAgICB7IHRyLnNldE5vZGVNYXJrdXAodHIubWFwcGluZy5tYXAoJGZyb20uYmVmb3JlKCkpLCBkZWZsdCk7IH1cbiAgICAgIH1cbiAgICB9XG4gICAgZGlzcGF0Y2godHIuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gIH1cbiAgcmV0dXJuIHRydWVcbn1cblxuLy8gOjogKEVkaXRvclN0YXRlLCA/KHRyOiBUcmFuc2FjdGlvbikpIOKGkiBib29sXG4vLyBBY3RzIGxpa2UgW2BzcGxpdEJsb2NrYF0oI2NvbW1hbmRzLnNwbGl0QmxvY2spLCBidXQgd2l0aG91dFxuLy8gcmVzZXR0aW5nIHRoZSBzZXQgb2YgYWN0aXZlIG1hcmtzIGF0IHRoZSBjdXJzb3IuXG5mdW5jdGlvbiBzcGxpdEJsb2NrS2VlcE1hcmtzKHN0YXRlLCBkaXNwYXRjaCkge1xuICByZXR1cm4gc3BsaXRCbG9jayhzdGF0ZSwgZGlzcGF0Y2ggJiYgKGZ1bmN0aW9uICh0cikge1xuICAgIHZhciBtYXJrcyA9IHN0YXRlLnN0b3JlZE1hcmtzIHx8IChzdGF0ZS5zZWxlY3Rpb24uJHRvLnBhcmVudE9mZnNldCAmJiBzdGF0ZS5zZWxlY3Rpb24uJGZyb20ubWFya3MoKSk7XG4gICAgaWYgKG1hcmtzKSB7IHRyLmVuc3VyZU1hcmtzKG1hcmtzKTsgfVxuICAgIGRpc3BhdGNoKHRyKTtcbiAgfSkpXG59XG5cbi8vIDo6IChFZGl0b3JTdGF0ZSwgPyh0cjogVHJhbnNhY3Rpb24pKSDihpIgYm9vbFxuLy8gTW92ZSB0aGUgc2VsZWN0aW9uIHRvIHRoZSBub2RlIHdyYXBwaW5nIHRoZSBjdXJyZW50IHNlbGVjdGlvbiwgaWZcbi8vIGFueS4gKFdpbGwgbm90IHNlbGVjdCB0aGUgZG9jdW1lbnQgbm9kZS4pXG5mdW5jdGlvbiBzZWxlY3RQYXJlbnROb2RlKHN0YXRlLCBkaXNwYXRjaCkge1xuICB2YXIgcmVmID0gc3RhdGUuc2VsZWN0aW9uO1xuICB2YXIgJGZyb20gPSByZWYuJGZyb207XG4gIHZhciB0byA9IHJlZi50bztcbiAgdmFyIHBvcztcbiAgdmFyIHNhbWUgPSAkZnJvbS5zaGFyZWREZXB0aCh0byk7XG4gIGlmIChzYW1lID09IDApIHsgcmV0dXJuIGZhbHNlIH1cbiAgcG9zID0gJGZyb20uYmVmb3JlKHNhbWUpO1xuICBpZiAoZGlzcGF0Y2gpIHsgZGlzcGF0Y2goc3RhdGUudHIuc2V0U2VsZWN0aW9uKE5vZGVTZWxlY3Rpb24uY3JlYXRlKHN0YXRlLmRvYywgcG9zKSkpOyB9XG4gIHJldHVybiB0cnVlXG59XG5cbi8vIDo6IChFZGl0b3JTdGF0ZSwgPyh0cjogVHJhbnNhY3Rpb24pKSDihpIgYm9vbFxuLy8gU2VsZWN0IHRoZSB3aG9sZSBkb2N1bWVudC5cbmZ1bmN0aW9uIHNlbGVjdEFsbChzdGF0ZSwgZGlzcGF0Y2gpIHtcbiAgaWYgKGRpc3BhdGNoKSB7IGRpc3BhdGNoKHN0YXRlLnRyLnNldFNlbGVjdGlvbihuZXcgQWxsU2VsZWN0aW9uKHN0YXRlLmRvYykpKTsgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBqb2luTWF5YmVDbGVhcihzdGF0ZSwgJHBvcywgZGlzcGF0Y2gpIHtcbiAgdmFyIGJlZm9yZSA9ICRwb3Mubm9kZUJlZm9yZSwgYWZ0ZXIgPSAkcG9zLm5vZGVBZnRlciwgaW5kZXggPSAkcG9zLmluZGV4KCk7XG4gIGlmICghYmVmb3JlIHx8ICFhZnRlciB8fCAhYmVmb3JlLnR5cGUuY29tcGF0aWJsZUNvbnRlbnQoYWZ0ZXIudHlwZSkpIHsgcmV0dXJuIGZhbHNlIH1cbiAgaWYgKCFiZWZvcmUuY29udGVudC5zaXplICYmICRwb3MucGFyZW50LmNhblJlcGxhY2UoaW5kZXggLSAxLCBpbmRleCkpIHtcbiAgICBpZiAoZGlzcGF0Y2gpIHsgZGlzcGF0Y2goc3RhdGUudHIuZGVsZXRlKCRwb3MucG9zIC0gYmVmb3JlLm5vZGVTaXplLCAkcG9zLnBvcykuc2Nyb2xsSW50b1ZpZXcoKSk7IH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmICghJHBvcy5wYXJlbnQuY2FuUmVwbGFjZShpbmRleCwgaW5kZXggKyAxKSB8fCAhKGFmdGVyLmlzVGV4dGJsb2NrIHx8IGNhbkpvaW4oc3RhdGUuZG9jLCAkcG9zLnBvcykpKVxuICAgIHsgcmV0dXJuIGZhbHNlIH1cbiAgaWYgKGRpc3BhdGNoKVxuICAgIHsgZGlzcGF0Y2goc3RhdGUudHJcbiAgICAgICAgICAgICAuY2xlYXJJbmNvbXBhdGlibGUoJHBvcy5wb3MsIGJlZm9yZS50eXBlLCBiZWZvcmUuY29udGVudE1hdGNoQXQoYmVmb3JlLmNoaWxkQ291bnQpKVxuICAgICAgICAgICAgIC5qb2luKCRwb3MucG9zKVxuICAgICAgICAgICAgIC5zY3JvbGxJbnRvVmlldygpKTsgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBkZWxldGVCYXJyaWVyKHN0YXRlLCAkY3V0LCBkaXNwYXRjaCkge1xuICB2YXIgYmVmb3JlID0gJGN1dC5ub2RlQmVmb3JlLCBhZnRlciA9ICRjdXQubm9kZUFmdGVyLCBjb25uLCBtYXRjaDtcbiAgaWYgKGJlZm9yZS50eXBlLnNwZWMuaXNvbGF0aW5nIHx8IGFmdGVyLnR5cGUuc3BlYy5pc29sYXRpbmcpIHsgcmV0dXJuIGZhbHNlIH1cbiAgaWYgKGpvaW5NYXliZUNsZWFyKHN0YXRlLCAkY3V0LCBkaXNwYXRjaCkpIHsgcmV0dXJuIHRydWUgfVxuXG4gIHZhciBjYW5EZWxBZnRlciA9ICRjdXQucGFyZW50LmNhblJlcGxhY2UoJGN1dC5pbmRleCgpLCAkY3V0LmluZGV4KCkgKyAxKTtcbiAgaWYgKGNhbkRlbEFmdGVyICYmXG4gICAgICAoY29ubiA9IChtYXRjaCA9IGJlZm9yZS5jb250ZW50TWF0Y2hBdChiZWZvcmUuY2hpbGRDb3VudCkpLmZpbmRXcmFwcGluZyhhZnRlci50eXBlKSkgJiZcbiAgICAgIG1hdGNoLm1hdGNoVHlwZShjb25uWzBdIHx8IGFmdGVyLnR5cGUpLnZhbGlkRW5kKSB7XG4gICAgaWYgKGRpc3BhdGNoKSB7XG4gICAgICB2YXIgZW5kID0gJGN1dC5wb3MgKyBhZnRlci5ub2RlU2l6ZSwgd3JhcCA9IEZyYWdtZW50LmVtcHR5O1xuICAgICAgZm9yICh2YXIgaSA9IGNvbm4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXG4gICAgICAgIHsgd3JhcCA9IEZyYWdtZW50LmZyb20oY29ubltpXS5jcmVhdGUobnVsbCwgd3JhcCkpOyB9XG4gICAgICB3cmFwID0gRnJhZ21lbnQuZnJvbShiZWZvcmUuY29weSh3cmFwKSk7XG4gICAgICB2YXIgdHIgPSBzdGF0ZS50ci5zdGVwKG5ldyBSZXBsYWNlQXJvdW5kU3RlcCgkY3V0LnBvcyAtIDEsIGVuZCwgJGN1dC5wb3MsIGVuZCwgbmV3IFNsaWNlKHdyYXAsIDEsIDApLCBjb25uLmxlbmd0aCwgdHJ1ZSkpO1xuICAgICAgdmFyIGpvaW5BdCA9IGVuZCArIDIgKiBjb25uLmxlbmd0aDtcbiAgICAgIGlmIChjYW5Kb2luKHRyLmRvYywgam9pbkF0KSkgeyB0ci5qb2luKGpvaW5BdCk7IH1cbiAgICAgIGRpc3BhdGNoKHRyLnNjcm9sbEludG9WaWV3KCkpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgdmFyIHNlbEFmdGVyID0gU2VsZWN0aW9uLmZpbmRGcm9tKCRjdXQsIDEpO1xuICB2YXIgcmFuZ2UgPSBzZWxBZnRlciAmJiBzZWxBZnRlci4kZnJvbS5ibG9ja1JhbmdlKHNlbEFmdGVyLiR0byksIHRhcmdldCA9IHJhbmdlICYmIGxpZnRUYXJnZXQocmFuZ2UpO1xuICBpZiAodGFyZ2V0ICE9IG51bGwgJiYgdGFyZ2V0ID49ICRjdXQuZGVwdGgpIHtcbiAgICBpZiAoZGlzcGF0Y2gpIHsgZGlzcGF0Y2goc3RhdGUudHIubGlmdChyYW5nZSwgdGFyZ2V0KS5zY3JvbGxJbnRvVmlldygpKTsgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBpZiAoY2FuRGVsQWZ0ZXIgJiYgdGV4dGJsb2NrQXQoYWZ0ZXIsIFwic3RhcnRcIiwgdHJ1ZSkgJiYgdGV4dGJsb2NrQXQoYmVmb3JlLCBcImVuZFwiKSkge1xuICAgIHZhciBhdCA9IGJlZm9yZSwgd3JhcCQxID0gW107XG4gICAgZm9yICg7Oykge1xuICAgICAgd3JhcCQxLnB1c2goYXQpO1xuICAgICAgaWYgKGF0LmlzVGV4dGJsb2NrKSB7IGJyZWFrIH1cbiAgICAgIGF0ID0gYXQubGFzdENoaWxkO1xuICAgIH1cbiAgICB2YXIgYWZ0ZXJUZXh0ID0gYWZ0ZXIsIGFmdGVyRGVwdGggPSAxO1xuICAgIGZvciAoOyAhYWZ0ZXJUZXh0LmlzVGV4dGJsb2NrOyBhZnRlclRleHQgPSBhZnRlclRleHQuZmlyc3RDaGlsZCkgeyBhZnRlckRlcHRoKys7IH1cbiAgICBpZiAoYXQuY2FuUmVwbGFjZShhdC5jaGlsZENvdW50LCBhdC5jaGlsZENvdW50LCBhZnRlclRleHQuY29udGVudCkpIHtcbiAgICAgIGlmIChkaXNwYXRjaCkge1xuICAgICAgICB2YXIgZW5kJDEgPSBGcmFnbWVudC5lbXB0eTtcbiAgICAgICAgZm9yICh2YXIgaSQxID0gd3JhcCQxLmxlbmd0aCAtIDE7IGkkMSA+PSAwOyBpJDEtLSkgeyBlbmQkMSA9IEZyYWdtZW50LmZyb20od3JhcCQxW2kkMV0uY29weShlbmQkMSkpOyB9XG4gICAgICAgIHZhciB0ciQxID0gc3RhdGUudHIuc3RlcChuZXcgUmVwbGFjZUFyb3VuZFN0ZXAoJGN1dC5wb3MgLSB3cmFwJDEubGVuZ3RoLCAkY3V0LnBvcyArIGFmdGVyLm5vZGVTaXplLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY3V0LnBvcyArIGFmdGVyRGVwdGgsICRjdXQucG9zICsgYWZ0ZXIubm9kZVNpemUgLSBhZnRlckRlcHRoLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgU2xpY2UoZW5kJDEsIHdyYXAkMS5sZW5ndGgsIDApLCAwLCB0cnVlKSk7XG4gICAgICAgIGRpc3BhdGNoKHRyJDEuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZVxufVxuXG4vLyBQYXJhbWV0ZXJpemVkIGNvbW1hbmRzXG5cbi8vIDo6IChOb2RlVHlwZSwgP09iamVjdCkg4oaSIChzdGF0ZTogRWRpdG9yU3RhdGUsIGRpc3BhdGNoOiA/KHRyOiBUcmFuc2FjdGlvbikpIOKGkiBib29sXG4vLyBXcmFwIHRoZSBzZWxlY3Rpb24gaW4gYSBub2RlIG9mIHRoZSBnaXZlbiB0eXBlIHdpdGggdGhlIGdpdmVuXG4vLyBhdHRyaWJ1dGVzLlxuZnVuY3Rpb24gd3JhcEluKG5vZGVUeXBlLCBhdHRycykge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhdGUsIGRpc3BhdGNoKSB7XG4gICAgdmFyIHJlZiA9IHN0YXRlLnNlbGVjdGlvbjtcbiAgICB2YXIgJGZyb20gPSByZWYuJGZyb207XG4gICAgdmFyICR0byA9IHJlZi4kdG87XG4gICAgdmFyIHJhbmdlID0gJGZyb20uYmxvY2tSYW5nZSgkdG8pLCB3cmFwcGluZyA9IHJhbmdlICYmIGZpbmRXcmFwcGluZyhyYW5nZSwgbm9kZVR5cGUsIGF0dHJzKTtcbiAgICBpZiAoIXdyYXBwaW5nKSB7IHJldHVybiBmYWxzZSB9XG4gICAgaWYgKGRpc3BhdGNoKSB7IGRpc3BhdGNoKHN0YXRlLnRyLndyYXAocmFuZ2UsIHdyYXBwaW5nKS5zY3JvbGxJbnRvVmlldygpKTsgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cbn1cblxuLy8gOjogKE5vZGVUeXBlLCA/T2JqZWN0KSDihpIgKHN0YXRlOiBFZGl0b3JTdGF0ZSwgZGlzcGF0Y2g6ID8odHI6IFRyYW5zYWN0aW9uKSkg4oaSIGJvb2xcbi8vIFJldHVybnMgYSBjb21tYW5kIHRoYXQgdHJpZXMgdG8gc2V0IHRoZSBzZWxlY3RlZCB0ZXh0YmxvY2tzIHRvIHRoZVxuLy8gZ2l2ZW4gbm9kZSB0eXBlIHdpdGggdGhlIGdpdmVuIGF0dHJpYnV0ZXMuXG5mdW5jdGlvbiBzZXRCbG9ja1R5cGUobm9kZVR5cGUsIGF0dHJzKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdGF0ZSwgZGlzcGF0Y2gpIHtcbiAgICB2YXIgcmVmID0gc3RhdGUuc2VsZWN0aW9uO1xuICAgIHZhciBmcm9tID0gcmVmLmZyb207XG4gICAgdmFyIHRvID0gcmVmLnRvO1xuICAgIHZhciBhcHBsaWNhYmxlID0gZmFsc2U7XG4gICAgc3RhdGUuZG9jLm5vZGVzQmV0d2Vlbihmcm9tLCB0bywgZnVuY3Rpb24gKG5vZGUsIHBvcykge1xuICAgICAgaWYgKGFwcGxpY2FibGUpIHsgcmV0dXJuIGZhbHNlIH1cbiAgICAgIGlmICghbm9kZS5pc1RleHRibG9jayB8fCBub2RlLmhhc01hcmt1cChub2RlVHlwZSwgYXR0cnMpKSB7IHJldHVybiB9XG4gICAgICBpZiAobm9kZS50eXBlID09IG5vZGVUeXBlKSB7XG4gICAgICAgIGFwcGxpY2FibGUgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyICRwb3MgPSBzdGF0ZS5kb2MucmVzb2x2ZShwb3MpLCBpbmRleCA9ICRwb3MuaW5kZXgoKTtcbiAgICAgICAgYXBwbGljYWJsZSA9ICRwb3MucGFyZW50LmNhblJlcGxhY2VXaXRoKGluZGV4LCBpbmRleCArIDEsIG5vZGVUeXBlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWFwcGxpY2FibGUpIHsgcmV0dXJuIGZhbHNlIH1cbiAgICBpZiAoZGlzcGF0Y2gpIHsgZGlzcGF0Y2goc3RhdGUudHIuc2V0QmxvY2tUeXBlKGZyb20sIHRvLCBub2RlVHlwZSwgYXR0cnMpLnNjcm9sbEludG9WaWV3KCkpOyB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrQXBwbGllcyhkb2MsIHJhbmdlcywgdHlwZSkge1xuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICggaSApIHtcbiAgICB2YXIgcmVmID0gcmFuZ2VzW2ldO1xuICAgIHZhciAkZnJvbSA9IHJlZi4kZnJvbTtcbiAgICB2YXIgJHRvID0gcmVmLiR0bztcbiAgICB2YXIgY2FuID0gJGZyb20uZGVwdGggPT0gMCA/IGRvYy50eXBlLmFsbG93c01hcmtUeXBlKHR5cGUpIDogZmFsc2U7XG4gICAgZG9jLm5vZGVzQmV0d2VlbigkZnJvbS5wb3MsICR0by5wb3MsIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBpZiAoY2FuKSB7IHJldHVybiBmYWxzZSB9XG4gICAgICBjYW4gPSBub2RlLmlubGluZUNvbnRlbnQgJiYgbm9kZS50eXBlLmFsbG93c01hcmtUeXBlKHR5cGUpO1xuICAgIH0pO1xuICAgIGlmIChjYW4pIHsgcmV0dXJuIHsgdjogdHJ1ZSB9IH1cbiAgfTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciByZXR1cm5lZCA9IGxvb3AoIGkgKTtcblxuICAgIGlmICggcmV0dXJuZWQgKSByZXR1cm4gcmV0dXJuZWQudjtcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLy8gOjogKE1hcmtUeXBlLCA/T2JqZWN0KSDihpIgKHN0YXRlOiBFZGl0b3JTdGF0ZSwgZGlzcGF0Y2g6ID8odHI6IFRyYW5zYWN0aW9uKSkg4oaSIGJvb2xcbi8vIENyZWF0ZSBhIGNvbW1hbmQgZnVuY3Rpb24gdGhhdCB0b2dnbGVzIHRoZSBnaXZlbiBtYXJrIHdpdGggdGhlXG4vLyBnaXZlbiBhdHRyaWJ1dGVzLiBXaWxsIHJldHVybiBgZmFsc2VgIHdoZW4gdGhlIGN1cnJlbnQgc2VsZWN0aW9uXG4vLyBkb2Vzbid0IHN1cHBvcnQgdGhhdCBtYXJrLiBUaGlzIHdpbGwgcmVtb3ZlIHRoZSBtYXJrIGlmIGFueSBtYXJrc1xuLy8gb2YgdGhhdCB0eXBlIGV4aXN0IGluIHRoZSBzZWxlY3Rpb24sIG9yIGFkZCBpdCBvdGhlcndpc2UuIElmIHRoZVxuLy8gc2VsZWN0aW9uIGlzIGVtcHR5LCB0aGlzIGFwcGxpZXMgdG8gdGhlIFtzdG9yZWRcbi8vIG1hcmtzXSgjc3RhdGUuRWRpdG9yU3RhdGUuc3RvcmVkTWFya3MpIGluc3RlYWQgb2YgYSByYW5nZSBvZiB0aGVcbi8vIGRvY3VtZW50LlxuZnVuY3Rpb24gdG9nZ2xlTWFyayhtYXJrVHlwZSwgYXR0cnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0YXRlLCBkaXNwYXRjaCkge1xuICAgIHZhciByZWYgPSBzdGF0ZS5zZWxlY3Rpb247XG4gICAgdmFyIGVtcHR5ID0gcmVmLmVtcHR5O1xuICAgIHZhciAkY3Vyc29yID0gcmVmLiRjdXJzb3I7XG4gICAgdmFyIHJhbmdlcyA9IHJlZi5yYW5nZXM7XG4gICAgaWYgKChlbXB0eSAmJiAhJGN1cnNvcikgfHwgIW1hcmtBcHBsaWVzKHN0YXRlLmRvYywgcmFuZ2VzLCBtYXJrVHlwZSkpIHsgcmV0dXJuIGZhbHNlIH1cbiAgICBpZiAoZGlzcGF0Y2gpIHtcbiAgICAgIGlmICgkY3Vyc29yKSB7XG4gICAgICAgIGlmIChtYXJrVHlwZS5pc0luU2V0KHN0YXRlLnN0b3JlZE1hcmtzIHx8ICRjdXJzb3IubWFya3MoKSkpXG4gICAgICAgICAgeyBkaXNwYXRjaChzdGF0ZS50ci5yZW1vdmVTdG9yZWRNYXJrKG1hcmtUeXBlKSk7IH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgIHsgZGlzcGF0Y2goc3RhdGUudHIuYWRkU3RvcmVkTWFyayhtYXJrVHlwZS5jcmVhdGUoYXR0cnMpKSk7IH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBoYXMgPSBmYWxzZSwgdHIgPSBzdGF0ZS50cjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7ICFoYXMgJiYgaSA8IHJhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciByZWYkMSA9IHJhbmdlc1tpXTtcbiAgICAgICAgICB2YXIgJGZyb20gPSByZWYkMS4kZnJvbTtcbiAgICAgICAgICB2YXIgJHRvID0gcmVmJDEuJHRvO1xuICAgICAgICAgIGhhcyA9IHN0YXRlLmRvYy5yYW5nZUhhc01hcmsoJGZyb20ucG9zLCAkdG8ucG9zLCBtYXJrVHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcmFuZ2VzLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgICB2YXIgcmVmJDIgPSByYW5nZXNbaSQxXTtcbiAgICAgICAgICB2YXIgJGZyb20kMSA9IHJlZiQyLiRmcm9tO1xuICAgICAgICAgIHZhciAkdG8kMSA9IHJlZiQyLiR0bztcbiAgICAgICAgICBpZiAoaGFzKSB7XG4gICAgICAgICAgICB0ci5yZW1vdmVNYXJrKCRmcm9tJDEucG9zLCAkdG8kMS5wb3MsIG1hcmtUeXBlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGZyb20gPSAkZnJvbSQxLnBvcywgdG8gPSAkdG8kMS5wb3MsIHN0YXJ0ID0gJGZyb20kMS5ub2RlQWZ0ZXIsIGVuZCA9ICR0byQxLm5vZGVCZWZvcmU7XG4gICAgICAgICAgICB2YXIgc3BhY2VTdGFydCA9IHN0YXJ0ICYmIHN0YXJ0LmlzVGV4dCA/IC9eXFxzKi8uZXhlYyhzdGFydC50ZXh0KVswXS5sZW5ndGggOiAwO1xuICAgICAgICAgICAgdmFyIHNwYWNlRW5kID0gZW5kICYmIGVuZC5pc1RleHQgPyAvXFxzKiQvLmV4ZWMoZW5kLnRleHQpWzBdLmxlbmd0aCA6IDA7XG4gICAgICAgICAgICBpZiAoZnJvbSArIHNwYWNlU3RhcnQgPCB0bykgeyBmcm9tICs9IHNwYWNlU3RhcnQ7IHRvIC09IHNwYWNlRW5kOyB9XG4gICAgICAgICAgICB0ci5hZGRNYXJrKGZyb20sIHRvLCBtYXJrVHlwZS5jcmVhdGUoYXR0cnMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGlzcGF0Y2godHIuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cbn1cblxuZnVuY3Rpb24gd3JhcERpc3BhdGNoRm9ySm9pbihkaXNwYXRjaCwgaXNKb2luYWJsZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKHRyKSB7XG4gICAgaWYgKCF0ci5pc0dlbmVyaWMpIHsgcmV0dXJuIGRpc3BhdGNoKHRyKSB9XG5cbiAgICB2YXIgcmFuZ2VzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ci5tYXBwaW5nLm1hcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBtYXAgPSB0ci5tYXBwaW5nLm1hcHNbaV07XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJhbmdlcy5sZW5ndGg7IGorKylcbiAgICAgICAgeyByYW5nZXNbal0gPSBtYXAubWFwKHJhbmdlc1tqXSk7IH1cbiAgICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uIChfcywgX2UsIGZyb20sIHRvKSB7IHJldHVybiByYW5nZXMucHVzaChmcm9tLCB0byk7IH0pO1xuICAgIH1cblxuICAgIC8vIEZpZ3VyZSBvdXQgd2hpY2ggam9pbmFibGUgcG9pbnRzIGV4aXN0IGluc2lkZSB0aG9zZSByYW5nZXMsXG4gICAgLy8gYnkgY2hlY2tpbmcgYWxsIG5vZGUgYm91bmRhcmllcyBpbiB0aGVpciBwYXJlbnQgbm9kZXMuXG4gICAgdmFyIGpvaW5hYmxlID0gW107XG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcmFuZ2VzLmxlbmd0aDsgaSQxICs9IDIpIHtcbiAgICAgIHZhciBmcm9tID0gcmFuZ2VzW2kkMV0sIHRvID0gcmFuZ2VzW2kkMSArIDFdO1xuICAgICAgdmFyICRmcm9tID0gdHIuZG9jLnJlc29sdmUoZnJvbSksIGRlcHRoID0gJGZyb20uc2hhcmVkRGVwdGgodG8pLCBwYXJlbnQgPSAkZnJvbS5ub2RlKGRlcHRoKTtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gJGZyb20uaW5kZXhBZnRlcihkZXB0aCksIHBvcyA9ICRmcm9tLmFmdGVyKGRlcHRoICsgMSk7IHBvcyA8PSB0bzsgKytpbmRleCkge1xuICAgICAgICB2YXIgYWZ0ZXIgPSBwYXJlbnQubWF5YmVDaGlsZChpbmRleCk7XG4gICAgICAgIGlmICghYWZ0ZXIpIHsgYnJlYWsgfVxuICAgICAgICBpZiAoaW5kZXggJiYgam9pbmFibGUuaW5kZXhPZihwb3MpID09IC0xKSB7XG4gICAgICAgICAgdmFyIGJlZm9yZSA9IHBhcmVudC5jaGlsZChpbmRleCAtIDEpO1xuICAgICAgICAgIGlmIChiZWZvcmUudHlwZSA9PSBhZnRlci50eXBlICYmIGlzSm9pbmFibGUoYmVmb3JlLCBhZnRlcikpXG4gICAgICAgICAgICB7IGpvaW5hYmxlLnB1c2gocG9zKTsgfVxuICAgICAgICB9XG4gICAgICAgIHBvcyArPSBhZnRlci5ub2RlU2l6ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gSm9pbiB0aGUgam9pbmFibGUgcG9pbnRzXG4gICAgam9pbmFibGUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYSAtIGI7IH0pO1xuICAgIGZvciAodmFyIGkkMiA9IGpvaW5hYmxlLmxlbmd0aCAtIDE7IGkkMiA+PSAwOyBpJDItLSkge1xuICAgICAgaWYgKGNhbkpvaW4odHIuZG9jLCBqb2luYWJsZVtpJDJdKSkgeyB0ci5qb2luKGpvaW5hYmxlW2kkMl0pOyB9XG4gICAgfVxuICAgIGRpc3BhdGNoKHRyKTtcbiAgfVxufVxuXG4vLyA6OiAoKHN0YXRlOiBFZGl0b3JTdGF0ZSwgPyh0cjogVHJhbnNhY3Rpb24pKSDihpIgYm9vbCwgdW5pb248KGJlZm9yZTogTm9kZSwgYWZ0ZXI6IE5vZGUpIOKGkiBib29sLCBbc3RyaW5nXT4pIOKGkiAoc3RhdGU6IEVkaXRvclN0YXRlLCA/KHRyOiBUcmFuc2FjdGlvbikpIOKGkiBib29sXG4vLyBXcmFwIGEgY29tbWFuZCBzbyB0aGF0LCB3aGVuIGl0IHByb2R1Y2VzIGEgdHJhbnNmb3JtIHRoYXQgY2F1c2VzXG4vLyB0d28gam9pbmFibGUgbm9kZXMgdG8gZW5kIHVwIG5leHQgdG8gZWFjaCBvdGhlciwgdGhvc2UgYXJlIGpvaW5lZC5cbi8vIE5vZGVzIGFyZSBjb25zaWRlcmVkIGpvaW5hYmxlIHdoZW4gdGhleSBhcmUgb2YgdGhlIHNhbWUgdHlwZSBhbmRcbi8vIHdoZW4gdGhlIGBpc0pvaW5hYmxlYCBwcmVkaWNhdGUgcmV0dXJucyB0cnVlIGZvciB0aGVtIG9yLCBpZiBhblxuLy8gYXJyYXkgb2Ygc3RyaW5ncyB3YXMgcGFzc2VkLCBpZiB0aGVpciBub2RlIHR5cGUgbmFtZSBpcyBpbiB0aGF0XG4vLyBhcnJheS5cbmZ1bmN0aW9uIGF1dG9Kb2luKGNvbW1hbmQsIGlzSm9pbmFibGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaXNKb2luYWJsZSkpIHtcbiAgICB2YXIgdHlwZXMgPSBpc0pvaW5hYmxlO1xuICAgIGlzSm9pbmFibGUgPSBmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gdHlwZXMuaW5kZXhPZihub2RlLnR5cGUubmFtZSkgPiAtMTsgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKHN0YXRlLCBkaXNwYXRjaCkgeyByZXR1cm4gY29tbWFuZChzdGF0ZSwgZGlzcGF0Y2ggJiYgd3JhcERpc3BhdGNoRm9ySm9pbihkaXNwYXRjaCwgaXNKb2luYWJsZSkpOyB9XG59XG5cbi8vIDo6ICguLi5bKEVkaXRvclN0YXRlLCA/KHRyOiBUcmFuc2FjdGlvbiksID9FZGl0b3JWaWV3KSDihpIgYm9vbF0pIOKGkiAoRWRpdG9yU3RhdGUsID8odHI6IFRyYW5zYWN0aW9uKSwgP0VkaXRvclZpZXcpIOKGkiBib29sXG4vLyBDb21iaW5lIGEgbnVtYmVyIG9mIGNvbW1hbmQgZnVuY3Rpb25zIGludG8gYSBzaW5nbGUgZnVuY3Rpb24gKHdoaWNoXG4vLyBjYWxscyB0aGVtIG9uZSBieSBvbmUgdW50aWwgb25lIHJldHVybnMgdHJ1ZSkuXG5mdW5jdGlvbiBjaGFpbkNvbW1hbmRzKCkge1xuICB2YXIgY29tbWFuZHMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKCBsZW4tLSApIGNvbW1hbmRzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHN0YXRlLCBkaXNwYXRjaCwgdmlldykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tbWFuZHMubGVuZ3RoOyBpKyspXG4gICAgICB7IGlmIChjb21tYW5kc1tpXShzdGF0ZSwgZGlzcGF0Y2gsIHZpZXcpKSB7IHJldHVybiB0cnVlIH0gfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbnZhciBiYWNrc3BhY2UgPSBjaGFpbkNvbW1hbmRzKGRlbGV0ZVNlbGVjdGlvbiwgam9pbkJhY2t3YXJkLCBzZWxlY3ROb2RlQmFja3dhcmQpO1xudmFyIGRlbCA9IGNoYWluQ29tbWFuZHMoZGVsZXRlU2VsZWN0aW9uLCBqb2luRm9yd2FyZCwgc2VsZWN0Tm9kZUZvcndhcmQpO1xuXG4vLyA6OiBPYmplY3Rcbi8vIEEgYmFzaWMga2V5bWFwIGNvbnRhaW5pbmcgYmluZGluZ3Mgbm90IHNwZWNpZmljIHRvIGFueSBzY2hlbWEuXG4vLyBCaW5kcyB0aGUgZm9sbG93aW5nIGtleXMgKHdoZW4gbXVsdGlwbGUgY29tbWFuZHMgYXJlIGxpc3RlZCwgdGhleVxuLy8gYXJlIGNoYWluZWQgd2l0aCBbYGNoYWluQ29tbWFuZHNgXSgjY29tbWFuZHMuY2hhaW5Db21tYW5kcykpOlxuLy9cbi8vICogKipFbnRlcioqIHRvIGBuZXdsaW5lSW5Db2RlYCwgYGNyZWF0ZVBhcmFncmFwaE5lYXJgLCBgbGlmdEVtcHR5QmxvY2tgLCBgc3BsaXRCbG9ja2Bcbi8vICogKipNb2QtRW50ZXIqKiB0byBgZXhpdENvZGVgXG4vLyAqICoqQmFja3NwYWNlKiogYW5kICoqTW9kLUJhY2tzcGFjZSoqIHRvIGBkZWxldGVTZWxlY3Rpb25gLCBgam9pbkJhY2t3YXJkYCwgYHNlbGVjdE5vZGVCYWNrd2FyZGBcbi8vICogKipEZWxldGUqKiBhbmQgKipNb2QtRGVsZXRlKiogdG8gYGRlbGV0ZVNlbGVjdGlvbmAsIGBqb2luRm9yd2FyZGAsIGBzZWxlY3ROb2RlRm9yd2FyZGBcbi8vICogKipNb2QtRGVsZXRlKiogdG8gYGRlbGV0ZVNlbGVjdGlvbmAsIGBqb2luRm9yd2FyZGAsIGBzZWxlY3ROb2RlRm9yd2FyZGBcbi8vICogKipNb2QtYSoqIHRvIGBzZWxlY3RBbGxgXG52YXIgcGNCYXNlS2V5bWFwID0ge1xuICBcIkVudGVyXCI6IGNoYWluQ29tbWFuZHMobmV3bGluZUluQ29kZSwgY3JlYXRlUGFyYWdyYXBoTmVhciwgbGlmdEVtcHR5QmxvY2ssIHNwbGl0QmxvY2spLFxuICBcIk1vZC1FbnRlclwiOiBleGl0Q29kZSxcbiAgXCJCYWNrc3BhY2VcIjogYmFja3NwYWNlLFxuICBcIk1vZC1CYWNrc3BhY2VcIjogYmFja3NwYWNlLFxuICBcIkRlbGV0ZVwiOiBkZWwsXG4gIFwiTW9kLURlbGV0ZVwiOiBkZWwsXG4gIFwiTW9kLWFcIjogc2VsZWN0QWxsXG59O1xuXG4vLyA6OiBPYmplY3Rcbi8vIEEgY29weSBvZiBgcGNCYXNlS2V5bWFwYCB0aGF0IGFsc28gYmluZHMgKipDdHJsLWgqKiBsaWtlIEJhY2tzcGFjZSxcbi8vICoqQ3RybC1kKiogbGlrZSBEZWxldGUsICoqQWx0LUJhY2tzcGFjZSoqIGxpa2UgQ3RybC1CYWNrc3BhY2UsIGFuZFxuLy8gKipDdHJsLUFsdC1CYWNrc3BhY2UqKiwgKipBbHQtRGVsZXRlKiosIGFuZCAqKkFsdC1kKiogbGlrZVxuLy8gQ3RybC1EZWxldGUuXG52YXIgbWFjQmFzZUtleW1hcCA9IHtcbiAgXCJDdHJsLWhcIjogcGNCYXNlS2V5bWFwW1wiQmFja3NwYWNlXCJdLFxuICBcIkFsdC1CYWNrc3BhY2VcIjogcGNCYXNlS2V5bWFwW1wiTW9kLUJhY2tzcGFjZVwiXSxcbiAgXCJDdHJsLWRcIjogcGNCYXNlS2V5bWFwW1wiRGVsZXRlXCJdLFxuICBcIkN0cmwtQWx0LUJhY2tzcGFjZVwiOiBwY0Jhc2VLZXltYXBbXCJNb2QtRGVsZXRlXCJdLFxuICBcIkFsdC1EZWxldGVcIjogcGNCYXNlS2V5bWFwW1wiTW9kLURlbGV0ZVwiXSxcbiAgXCJBbHQtZFwiOiBwY0Jhc2VLZXltYXBbXCJNb2QtRGVsZXRlXCJdXG59O1xuZm9yICh2YXIga2V5IGluIHBjQmFzZUtleW1hcCkgeyBtYWNCYXNlS2V5bWFwW2tleV0gPSBwY0Jhc2VLZXltYXBba2V5XTsgfVxuXG4vLyBkZWNsYXJlIGdsb2JhbDogb3MsIG5hdmlnYXRvclxudmFyIG1hYyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT0gXCJ1bmRlZmluZWRcIiA/IC9NYWMvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKVxuICAgICAgICAgIDogdHlwZW9mIG9zICE9IFwidW5kZWZpbmVkXCIgPyBvcy5wbGF0Zm9ybSgpID09IFwiZGFyd2luXCIgOiBmYWxzZTtcblxuLy8gOjogT2JqZWN0XG4vLyBEZXBlbmRpbmcgb24gdGhlIGRldGVjdGVkIHBsYXRmb3JtLCB0aGlzIHdpbGwgaG9sZFxuLy8gW2BwY0Jhc2VrZXltYXBgXSgjY29tbWFuZHMucGNCYXNlS2V5bWFwKSBvclxuLy8gW2BtYWNCYXNlS2V5bWFwYF0oI2NvbW1hbmRzLm1hY0Jhc2VLZXltYXApLlxudmFyIGJhc2VLZXltYXAgPSBtYWMgPyBtYWNCYXNlS2V5bWFwIDogcGNCYXNlS2V5bWFwO1xuXG5leHBvcnQgeyBhdXRvSm9pbiwgYmFzZUtleW1hcCwgY2hhaW5Db21tYW5kcywgY3JlYXRlUGFyYWdyYXBoTmVhciwgZGVsZXRlU2VsZWN0aW9uLCBleGl0Q29kZSwgam9pbkJhY2t3YXJkLCBqb2luRG93biwgam9pbkZvcndhcmQsIGpvaW5VcCwgbGlmdCwgbGlmdEVtcHR5QmxvY2ssIG1hY0Jhc2VLZXltYXAsIG5ld2xpbmVJbkNvZGUsIHBjQmFzZUtleW1hcCwgc2VsZWN0QWxsLCBzZWxlY3ROb2RlQmFja3dhcmQsIHNlbGVjdE5vZGVGb3J3YXJkLCBzZWxlY3RQYXJlbnROb2RlLCBzZXRCbG9ja1R5cGUsIHNwbGl0QmxvY2ssIHNwbGl0QmxvY2tLZWVwTWFya3MsIHRvZ2dsZU1hcmssIHdyYXBJbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXMuanMubWFwXG4iLCJpbXBvcnQgeyBQbHVnaW4gfSBmcm9tICdwcm9zZW1pcnJvci1zdGF0ZSc7XG5pbXBvcnQgeyBmaW5kV3JhcHBpbmcsIGNhbkpvaW4gfSBmcm9tICdwcm9zZW1pcnJvci10cmFuc2Zvcm0nO1xuXG4vLyA6Oi0gSW5wdXQgcnVsZXMgYXJlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZGVzY3JpYmluZyBhIHBpZWNlIG9mIHRleHRcbi8vIHRoYXQsIHdoZW4gdHlwZWQsIGNhdXNlcyBzb21ldGhpbmcgdG8gaGFwcGVuLiBUaGlzIG1pZ2h0IGJlXG4vLyBjaGFuZ2luZyB0d28gZGFzaGVzIGludG8gYW4gZW1kYXNoLCB3cmFwcGluZyBhIHBhcmFncmFwaCBzdGFydGluZ1xuLy8gd2l0aCBgXCI+IFwiYCBpbnRvIGEgYmxvY2txdW90ZSwgb3Igc29tZXRoaW5nIGVudGlyZWx5IGRpZmZlcmVudC5cbnZhciBJbnB1dFJ1bGUgPSBmdW5jdGlvbiBJbnB1dFJ1bGUobWF0Y2gsIGhhbmRsZXIpIHtcbiAgdGhpcy5tYXRjaCA9IG1hdGNoO1xuICB0aGlzLmhhbmRsZXIgPSB0eXBlb2YgaGFuZGxlciA9PSBcInN0cmluZ1wiID8gc3RyaW5nSGFuZGxlcihoYW5kbGVyKSA6IGhhbmRsZXI7XG59O1xuXG5mdW5jdGlvbiBzdHJpbmdIYW5kbGVyKHN0cmluZykge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhdGUsIG1hdGNoLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIGluc2VydCA9IHN0cmluZztcbiAgICBpZiAobWF0Y2hbMV0pIHtcbiAgICAgIHZhciBvZmZzZXQgPSBtYXRjaFswXS5sYXN0SW5kZXhPZihtYXRjaFsxXSk7XG4gICAgICBpbnNlcnQgKz0gbWF0Y2hbMF0uc2xpY2Uob2Zmc2V0ICsgbWF0Y2hbMV0ubGVuZ3RoKTtcbiAgICAgIHN0YXJ0ICs9IG9mZnNldDtcbiAgICAgIHZhciBjdXRPZmYgPSBzdGFydCAtIGVuZDtcbiAgICAgIGlmIChjdXRPZmYgPiAwKSB7XG4gICAgICAgIGluc2VydCA9IG1hdGNoWzBdLnNsaWNlKG9mZnNldCAtIGN1dE9mZiwgb2Zmc2V0KSArIGluc2VydDtcbiAgICAgICAgc3RhcnQgPSBlbmQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZS50ci5pbnNlcnRUZXh0KGluc2VydCwgc3RhcnQsIGVuZClcbiAgfVxufVxuXG52YXIgTUFYX01BVENIID0gNTAwO1xuXG4vLyA6OiAoY29uZmlnOiB7cnVsZXM6IFtJbnB1dFJ1bGVdfSkg4oaSIFBsdWdpblxuLy8gQ3JlYXRlIGFuIGlucHV0IHJ1bGVzIHBsdWdpbi4gV2hlbiBlbmFibGVkLCBpdCB3aWxsIGNhdXNlIHRleHRcbi8vIGlucHV0IHRoYXQgbWF0Y2hlcyBhbnkgb2YgdGhlIGdpdmVuIHJ1bGVzIHRvIHRyaWdnZXIgdGhlIHJ1bGUnc1xuLy8gYWN0aW9uLlxuZnVuY3Rpb24gaW5wdXRSdWxlcyhyZWYpIHtcbiAgdmFyIHJ1bGVzID0gcmVmLnJ1bGVzO1xuXG4gIHZhciBwbHVnaW4gPSBuZXcgUGx1Z2luKHtcbiAgICBzdGF0ZToge1xuICAgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHsgcmV0dXJuIG51bGwgfSxcbiAgICAgIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0ciwgcHJldikge1xuICAgICAgICB2YXIgc3RvcmVkID0gdHIuZ2V0TWV0YSh0aGlzKTtcbiAgICAgICAgaWYgKHN0b3JlZCkgeyByZXR1cm4gc3RvcmVkIH1cbiAgICAgICAgcmV0dXJuIHRyLnNlbGVjdGlvblNldCB8fCB0ci5kb2NDaGFuZ2VkID8gbnVsbCA6IHByZXZcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcHJvcHM6IHtcbiAgICAgIGhhbmRsZVRleHRJbnB1dDogZnVuY3Rpb24gaGFuZGxlVGV4dElucHV0KHZpZXcsIGZyb20sIHRvLCB0ZXh0KSB7XG4gICAgICAgIHJldHVybiBydW4odmlldywgZnJvbSwgdG8sIHRleHQsIHJ1bGVzLCBwbHVnaW4pXG4gICAgICB9LFxuICAgICAgaGFuZGxlRE9NRXZlbnRzOiB7XG4gICAgICAgIGNvbXBvc2l0aW9uZW5kOiBmdW5jdGlvbiAodmlldykge1xuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlZiA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uO1xuICAgICAgICAgICAgdmFyICRjdXJzb3IgPSByZWYuJGN1cnNvcjtcbiAgICAgICAgICAgIGlmICgkY3Vyc29yKSB7IHJ1bih2aWV3LCAkY3Vyc29yLnBvcywgJGN1cnNvci5wb3MsIFwiXCIsIHJ1bGVzLCBwbHVnaW4pOyB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgaXNJbnB1dFJ1bGVzOiB0cnVlXG4gIH0pO1xuICByZXR1cm4gcGx1Z2luXG59XG5cbmZ1bmN0aW9uIHJ1bih2aWV3LCBmcm9tLCB0bywgdGV4dCwgcnVsZXMsIHBsdWdpbikge1xuICBpZiAodmlldy5jb21wb3NpbmcpIHsgcmV0dXJuIGZhbHNlIH1cbiAgdmFyIHN0YXRlID0gdmlldy5zdGF0ZSwgJGZyb20gPSBzdGF0ZS5kb2MucmVzb2x2ZShmcm9tKTtcbiAgaWYgKCRmcm9tLnBhcmVudC50eXBlLnNwZWMuY29kZSkgeyByZXR1cm4gZmFsc2UgfVxuICB2YXIgdGV4dEJlZm9yZSA9ICRmcm9tLnBhcmVudC50ZXh0QmV0d2VlbihNYXRoLm1heCgwLCAkZnJvbS5wYXJlbnRPZmZzZXQgLSBNQVhfTUFUQ0gpLCAkZnJvbS5wYXJlbnRPZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsIFwiXFx1ZmZmY1wiKSArIHRleHQ7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbWF0Y2ggPSBydWxlc1tpXS5tYXRjaC5leGVjKHRleHRCZWZvcmUpO1xuICAgIHZhciB0ciA9IG1hdGNoICYmIHJ1bGVzW2ldLmhhbmRsZXIoc3RhdGUsIG1hdGNoLCBmcm9tIC0gKG1hdGNoWzBdLmxlbmd0aCAtIHRleHQubGVuZ3RoKSwgdG8pO1xuICAgIGlmICghdHIpIHsgY29udGludWUgfVxuICAgIHZpZXcuZGlzcGF0Y2godHIuc2V0TWV0YShwbHVnaW4sIHt0cmFuc2Zvcm06IHRyLCBmcm9tOiBmcm9tLCB0bzogdG8sIHRleHQ6IHRleHR9KSk7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLy8gOjogKEVkaXRvclN0YXRlLCA/KFRyYW5zYWN0aW9uKSkg4oaSIGJvb2xcbi8vIFRoaXMgaXMgYSBjb21tYW5kIHRoYXQgd2lsbCB1bmRvIGFuIGlucHV0IHJ1bGUsIGlmIGFwcGx5aW5nIHN1Y2ggYVxuLy8gcnVsZSB3YXMgdGhlIGxhc3QgdGhpbmcgdGhhdCB0aGUgdXNlciBkaWQuXG5mdW5jdGlvbiB1bmRvSW5wdXRSdWxlKHN0YXRlLCBkaXNwYXRjaCkge1xuICB2YXIgcGx1Z2lucyA9IHN0YXRlLnBsdWdpbnM7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwbHVnaW4gPSBwbHVnaW5zW2ldLCB1bmRvYWJsZSA9ICh2b2lkIDApO1xuICAgIGlmIChwbHVnaW4uc3BlYy5pc0lucHV0UnVsZXMgJiYgKHVuZG9hYmxlID0gcGx1Z2luLmdldFN0YXRlKHN0YXRlKSkpIHtcbiAgICAgIGlmIChkaXNwYXRjaCkge1xuICAgICAgICB2YXIgdHIgPSBzdGF0ZS50ciwgdG9VbmRvID0gdW5kb2FibGUudHJhbnNmb3JtO1xuICAgICAgICBmb3IgKHZhciBqID0gdG9VbmRvLnN0ZXBzLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKVxuICAgICAgICAgIHsgdHIuc3RlcCh0b1VuZG8uc3RlcHNbal0uaW52ZXJ0KHRvVW5kby5kb2NzW2pdKSk7IH1cbiAgICAgICAgaWYgKHVuZG9hYmxlLnRleHQpIHtcbiAgICAgICAgICB2YXIgbWFya3MgPSB0ci5kb2MucmVzb2x2ZSh1bmRvYWJsZS5mcm9tKS5tYXJrcygpO1xuICAgICAgICAgIHRyLnJlcGxhY2VXaXRoKHVuZG9hYmxlLmZyb20sIHVuZG9hYmxlLnRvLCBzdGF0ZS5zY2hlbWEudGV4dCh1bmRvYWJsZS50ZXh0LCBtYXJrcykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyLmRlbGV0ZSh1bmRvYWJsZS5mcm9tLCB1bmRvYWJsZS50byk7XG4gICAgICAgIH1cbiAgICAgICAgZGlzcGF0Y2godHIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8vIDo6IElucHV0UnVsZSBDb252ZXJ0cyBkb3VibGUgZGFzaGVzIHRvIGFuIGVtZGFzaC5cbnZhciBlbURhc2ggPSBuZXcgSW5wdXRSdWxlKC8tLSQvLCBcIuKAlFwiKTtcbi8vIDo6IElucHV0UnVsZSBDb252ZXJ0cyB0aHJlZSBkb3RzIHRvIGFuIGVsbGlwc2lzIGNoYXJhY3Rlci5cbnZhciBlbGxpcHNpcyA9IG5ldyBJbnB1dFJ1bGUoL1xcLlxcLlxcLiQvLCBcIuKAplwiKTtcbi8vIDo6IElucHV0UnVsZSDigJxTbWFydOKAnSBvcGVuaW5nIGRvdWJsZSBxdW90ZXMuXG52YXIgb3BlbkRvdWJsZVF1b3RlID0gbmV3IElucHV0UnVsZSgvKD86XnxbXFxzXFx7XFxbXFwoXFw8J1wiXFx1MjAxOFxcdTIwMUNdKShcIikkLywgXCLigJxcIik7XG4vLyA6OiBJbnB1dFJ1bGUg4oCcU21hcnTigJ0gY2xvc2luZyBkb3VibGUgcXVvdGVzLlxudmFyIGNsb3NlRG91YmxlUXVvdGUgPSBuZXcgSW5wdXRSdWxlKC9cIiQvLCBcIuKAnVwiKTtcbi8vIDo6IElucHV0UnVsZSDigJxTbWFydOKAnSBvcGVuaW5nIHNpbmdsZSBxdW90ZXMuXG52YXIgb3BlblNpbmdsZVF1b3RlID0gbmV3IElucHV0UnVsZSgvKD86XnxbXFxzXFx7XFxbXFwoXFw8J1wiXFx1MjAxOFxcdTIwMUNdKSgnKSQvLCBcIuKAmFwiKTtcbi8vIDo6IElucHV0UnVsZSDigJxTbWFydOKAnSBjbG9zaW5nIHNpbmdsZSBxdW90ZXMuXG52YXIgY2xvc2VTaW5nbGVRdW90ZSA9IG5ldyBJbnB1dFJ1bGUoLyckLywgXCLigJlcIik7XG5cbi8vIDo6IFtJbnB1dFJ1bGVdIFNtYXJ0LXF1b3RlIHJlbGF0ZWQgaW5wdXQgcnVsZXMuXG52YXIgc21hcnRRdW90ZXMgPSBbb3BlbkRvdWJsZVF1b3RlLCBjbG9zZURvdWJsZVF1b3RlLCBvcGVuU2luZ2xlUXVvdGUsIGNsb3NlU2luZ2xlUXVvdGVdO1xuXG4vLyA6OiAoUmVnRXhwLCBOb2RlVHlwZSwgP3VuaW9uPE9iamVjdCwgKFtzdHJpbmddKSDihpIgP09iamVjdD4sID8oW3N0cmluZ10sIE5vZGUpIOKGkiBib29sKSDihpIgSW5wdXRSdWxlXG4vLyBCdWlsZCBhbiBpbnB1dCBydWxlIGZvciBhdXRvbWF0aWNhbGx5IHdyYXBwaW5nIGEgdGV4dGJsb2NrIHdoZW4gYVxuLy8gZ2l2ZW4gc3RyaW5nIGlzIHR5cGVkLiBUaGUgYHJlZ2V4cGAgYXJndW1lbnQgaXNcbi8vIGRpcmVjdGx5IHBhc3NlZCB0aHJvdWdoIHRvIHRoZSBgSW5wdXRSdWxlYCBjb25zdHJ1Y3Rvci4gWW91J2xsXG4vLyBwcm9iYWJseSB3YW50IHRoZSByZWdleHAgdG8gc3RhcnQgd2l0aCBgXmAsIHNvIHRoYXQgdGhlIHBhdHRlcm4gY2FuXG4vLyBvbmx5IG9jY3VyIGF0IHRoZSBzdGFydCBvZiBhIHRleHRibG9jay5cbi8vXG4vLyBgbm9kZVR5cGVgIGlzIHRoZSB0eXBlIG9mIG5vZGUgdG8gd3JhcCBpbi4gSWYgaXQgbmVlZHMgYXR0cmlidXRlcyxcbi8vIHlvdSBjYW4gZWl0aGVyIHBhc3MgdGhlbSBkaXJlY3RseSwgb3IgcGFzcyBhIGZ1bmN0aW9uIHRoYXQgd2lsbFxuLy8gY29tcHV0ZSB0aGVtIGZyb20gdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBtYXRjaC5cbi8vXG4vLyBCeSBkZWZhdWx0LCBpZiB0aGVyZSdzIGEgbm9kZSB3aXRoIHRoZSBzYW1lIHR5cGUgYWJvdmUgdGhlIG5ld2x5XG4vLyB3cmFwcGVkIG5vZGUsIHRoZSBydWxlIHdpbGwgdHJ5IHRvIFtqb2luXSgjdHJhbnNmb3JtLlRyYW5zZm9ybS5qb2luKSB0aG9zZVxuLy8gdHdvIG5vZGVzLiBZb3UgY2FuIHBhc3MgYSBqb2luIHByZWRpY2F0ZSwgd2hpY2ggdGFrZXMgYSByZWd1bGFyXG4vLyBleHByZXNzaW9uIG1hdGNoIGFuZCB0aGUgbm9kZSBiZWZvcmUgdGhlIHdyYXBwZWQgbm9kZSwgYW5kIGNhblxuLy8gcmV0dXJuIGEgYm9vbGVhbiB0byBpbmRpY2F0ZSB3aGV0aGVyIGEgam9pbiBzaG91bGQgaGFwcGVuLlxuZnVuY3Rpb24gd3JhcHBpbmdJbnB1dFJ1bGUocmVnZXhwLCBub2RlVHlwZSwgZ2V0QXR0cnMsIGpvaW5QcmVkaWNhdGUpIHtcbiAgcmV0dXJuIG5ldyBJbnB1dFJ1bGUocmVnZXhwLCBmdW5jdGlvbiAoc3RhdGUsIG1hdGNoLCBzdGFydCwgZW5kKSB7XG4gICAgdmFyIGF0dHJzID0gZ2V0QXR0cnMgaW5zdGFuY2VvZiBGdW5jdGlvbiA/IGdldEF0dHJzKG1hdGNoKSA6IGdldEF0dHJzO1xuICAgIHZhciB0ciA9IHN0YXRlLnRyLmRlbGV0ZShzdGFydCwgZW5kKTtcbiAgICB2YXIgJHN0YXJ0ID0gdHIuZG9jLnJlc29sdmUoc3RhcnQpLCByYW5nZSA9ICRzdGFydC5ibG9ja1JhbmdlKCksIHdyYXBwaW5nID0gcmFuZ2UgJiYgZmluZFdyYXBwaW5nKHJhbmdlLCBub2RlVHlwZSwgYXR0cnMpO1xuICAgIGlmICghd3JhcHBpbmcpIHsgcmV0dXJuIG51bGwgfVxuICAgIHRyLndyYXAocmFuZ2UsIHdyYXBwaW5nKTtcbiAgICB2YXIgYmVmb3JlID0gdHIuZG9jLnJlc29sdmUoc3RhcnQgLSAxKS5ub2RlQmVmb3JlO1xuICAgIGlmIChiZWZvcmUgJiYgYmVmb3JlLnR5cGUgPT0gbm9kZVR5cGUgJiYgY2FuSm9pbih0ci5kb2MsIHN0YXJ0IC0gMSkgJiZcbiAgICAgICAgKCFqb2luUHJlZGljYXRlIHx8IGpvaW5QcmVkaWNhdGUobWF0Y2gsIGJlZm9yZSkpKVxuICAgICAgeyB0ci5qb2luKHN0YXJ0IC0gMSk7IH1cbiAgICByZXR1cm4gdHJcbiAgfSlcbn1cblxuLy8gOjogKFJlZ0V4cCwgTm9kZVR5cGUsID91bmlvbjxPYmplY3QsIChbc3RyaW5nXSkg4oaSID9PYmplY3Q+KSDihpIgSW5wdXRSdWxlXG4vLyBCdWlsZCBhbiBpbnB1dCBydWxlIHRoYXQgY2hhbmdlcyB0aGUgdHlwZSBvZiBhIHRleHRibG9jayB3aGVuIHRoZVxuLy8gbWF0Y2hlZCB0ZXh0IGlzIHR5cGVkIGludG8gaXQuIFlvdSdsbCB1c3VhbGx5IHdhbnQgdG8gc3RhcnQgeW91clxuLy8gcmVnZXhwIHdpdGggYF5gIHRvIHRoYXQgaXQgaXMgb25seSBtYXRjaGVkIGF0IHRoZSBzdGFydCBvZiBhXG4vLyB0ZXh0YmxvY2suIFRoZSBvcHRpb25hbCBgZ2V0QXR0cnNgIHBhcmFtZXRlciBjYW4gYmUgdXNlZCB0byBjb21wdXRlXG4vLyB0aGUgbmV3IG5vZGUncyBhdHRyaWJ1dGVzLCBhbmQgd29ya3MgdGhlIHNhbWUgYXMgaW4gdGhlXG4vLyBgd3JhcHBpbmdJbnB1dFJ1bGVgIGZ1bmN0aW9uLlxuZnVuY3Rpb24gdGV4dGJsb2NrVHlwZUlucHV0UnVsZShyZWdleHAsIG5vZGVUeXBlLCBnZXRBdHRycykge1xuICByZXR1cm4gbmV3IElucHV0UnVsZShyZWdleHAsIGZ1bmN0aW9uIChzdGF0ZSwgbWF0Y2gsIHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgJHN0YXJ0ID0gc3RhdGUuZG9jLnJlc29sdmUoc3RhcnQpO1xuICAgIHZhciBhdHRycyA9IGdldEF0dHJzIGluc3RhbmNlb2YgRnVuY3Rpb24gPyBnZXRBdHRycyhtYXRjaCkgOiBnZXRBdHRycztcbiAgICBpZiAoISRzdGFydC5ub2RlKC0xKS5jYW5SZXBsYWNlV2l0aCgkc3RhcnQuaW5kZXgoLTEpLCAkc3RhcnQuaW5kZXhBZnRlcigtMSksIG5vZGVUeXBlKSkgeyByZXR1cm4gbnVsbCB9XG4gICAgcmV0dXJuIHN0YXRlLnRyXG4gICAgICAuZGVsZXRlKHN0YXJ0LCBlbmQpXG4gICAgICAuc2V0QmxvY2tUeXBlKHN0YXJ0LCBzdGFydCwgbm9kZVR5cGUsIGF0dHJzKVxuICB9KVxufVxuXG5leHBvcnQgeyBJbnB1dFJ1bGUsIGNsb3NlRG91YmxlUXVvdGUsIGNsb3NlU2luZ2xlUXVvdGUsIGVsbGlwc2lzLCBlbURhc2gsIGlucHV0UnVsZXMsIG9wZW5Eb3VibGVRdW90ZSwgb3BlblNpbmdsZVF1b3RlLCBzbWFydFF1b3RlcywgdGV4dGJsb2NrVHlwZUlucHV0UnVsZSwgdW5kb0lucHV0UnVsZSwgd3JhcHBpbmdJbnB1dFJ1bGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzLmpzLm1hcFxuIiwiZXhwb3J0IHZhciBiYXNlID0ge1xuICA4OiBcIkJhY2tzcGFjZVwiLFxuICA5OiBcIlRhYlwiLFxuICAxMDogXCJFbnRlclwiLFxuICAxMjogXCJOdW1Mb2NrXCIsXG4gIDEzOiBcIkVudGVyXCIsXG4gIDE2OiBcIlNoaWZ0XCIsXG4gIDE3OiBcIkNvbnRyb2xcIixcbiAgMTg6IFwiQWx0XCIsXG4gIDIwOiBcIkNhcHNMb2NrXCIsXG4gIDI3OiBcIkVzY2FwZVwiLFxuICAzMjogXCIgXCIsXG4gIDMzOiBcIlBhZ2VVcFwiLFxuICAzNDogXCJQYWdlRG93blwiLFxuICAzNTogXCJFbmRcIixcbiAgMzY6IFwiSG9tZVwiLFxuICAzNzogXCJBcnJvd0xlZnRcIixcbiAgMzg6IFwiQXJyb3dVcFwiLFxuICAzOTogXCJBcnJvd1JpZ2h0XCIsXG4gIDQwOiBcIkFycm93RG93blwiLFxuICA0NDogXCJQcmludFNjcmVlblwiLFxuICA0NTogXCJJbnNlcnRcIixcbiAgNDY6IFwiRGVsZXRlXCIsXG4gIDU5OiBcIjtcIixcbiAgNjE6IFwiPVwiLFxuICA5MTogXCJNZXRhXCIsXG4gIDkyOiBcIk1ldGFcIixcbiAgMTA2OiBcIipcIixcbiAgMTA3OiBcIitcIixcbiAgMTA4OiBcIixcIixcbiAgMTA5OiBcIi1cIixcbiAgMTEwOiBcIi5cIixcbiAgMTExOiBcIi9cIixcbiAgMTQ0OiBcIk51bUxvY2tcIixcbiAgMTQ1OiBcIlNjcm9sbExvY2tcIixcbiAgMTYwOiBcIlNoaWZ0XCIsXG4gIDE2MTogXCJTaGlmdFwiLFxuICAxNjI6IFwiQ29udHJvbFwiLFxuICAxNjM6IFwiQ29udHJvbFwiLFxuICAxNjQ6IFwiQWx0XCIsXG4gIDE2NTogXCJBbHRcIixcbiAgMTczOiBcIi1cIixcbiAgMTg2OiBcIjtcIixcbiAgMTg3OiBcIj1cIixcbiAgMTg4OiBcIixcIixcbiAgMTg5OiBcIi1cIixcbiAgMTkwOiBcIi5cIixcbiAgMTkxOiBcIi9cIixcbiAgMTkyOiBcImBcIixcbiAgMjE5OiBcIltcIixcbiAgMjIwOiBcIlxcXFxcIixcbiAgMjIxOiBcIl1cIixcbiAgMjIyOiBcIidcIixcbiAgMjI5OiBcInFcIlxufVxuXG5leHBvcnQgdmFyIHNoaWZ0ID0ge1xuICA0ODogXCIpXCIsXG4gIDQ5OiBcIiFcIixcbiAgNTA6IFwiQFwiLFxuICA1MTogXCIjXCIsXG4gIDUyOiBcIiRcIixcbiAgNTM6IFwiJVwiLFxuICA1NDogXCJeXCIsXG4gIDU1OiBcIiZcIixcbiAgNTY6IFwiKlwiLFxuICA1NzogXCIoXCIsXG4gIDU5OiBcIjpcIixcbiAgNjE6IFwiK1wiLFxuICAxNzM6IFwiX1wiLFxuICAxODY6IFwiOlwiLFxuICAxODc6IFwiK1wiLFxuICAxODg6IFwiPFwiLFxuICAxODk6IFwiX1wiLFxuICAxOTA6IFwiPlwiLFxuICAxOTE6IFwiP1wiLFxuICAxOTI6IFwiflwiLFxuICAyMTk6IFwie1wiLFxuICAyMjA6IFwifFwiLFxuICAyMjE6IFwifVwiLFxuICAyMjI6IFwiXFxcIlwiLFxuICAyMjk6IFwiUVwiXG59XG5cbnZhciBjaHJvbWUgPSB0eXBlb2YgbmF2aWdhdG9yICE9IFwidW5kZWZpbmVkXCIgJiYgL0Nocm9tZVxcLyhcXGQrKS8uZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KVxudmFyIHNhZmFyaSA9IHR5cGVvZiBuYXZpZ2F0b3IgIT0gXCJ1bmRlZmluZWRcIiAmJiAvQXBwbGUgQ29tcHV0ZXIvLnRlc3QobmF2aWdhdG9yLnZlbmRvcilcbnZhciBnZWNrbyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT0gXCJ1bmRlZmluZWRcIiAmJiAvR2Vja29cXC9cXGQrLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpXG52YXIgbWFjID0gdHlwZW9mIG5hdmlnYXRvciAhPSBcInVuZGVmaW5lZFwiICYmIC9NYWMvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKVxudmFyIGllID0gdHlwZW9mIG5hdmlnYXRvciAhPSBcInVuZGVmaW5lZFwiICYmIC9NU0lFIFxcZHxUcmlkZW50XFwvKD86WzctOV18XFxkezIsfSlcXC4uKnJ2OihcXGQrKS8uZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KVxudmFyIGJyb2tlbk1vZGlmaWVyTmFtZXMgPSBjaHJvbWUgJiYgKG1hYyB8fCArY2hyb21lWzFdIDwgNTcpIHx8IGdlY2tvICYmIG1hY1xuXG4vLyBGaWxsIGluIHRoZSBkaWdpdCBrZXlzXG5mb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIGJhc2VbNDggKyBpXSA9IGJhc2VbOTYgKyBpXSA9IFN0cmluZyhpKVxuXG4vLyBUaGUgZnVuY3Rpb24ga2V5c1xuZm9yICh2YXIgaSA9IDE7IGkgPD0gMjQ7IGkrKykgYmFzZVtpICsgMTExXSA9IFwiRlwiICsgaVxuXG4vLyBBbmQgdGhlIGFscGhhYmV0aWMga2V5c1xuZm9yICh2YXIgaSA9IDY1OyBpIDw9IDkwOyBpKyspIHtcbiAgYmFzZVtpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoaSArIDMyKVxuICBzaGlmdFtpXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoaSlcbn1cblxuLy8gRm9yIGVhY2ggY29kZSB0aGF0IGRvZXNuJ3QgaGF2ZSBhIHNoaWZ0LWVxdWl2YWxlbnQsIGNvcHkgdGhlIGJhc2UgbmFtZVxuZm9yICh2YXIgY29kZSBpbiBiYXNlKSBpZiAoIXNoaWZ0Lmhhc093blByb3BlcnR5KGNvZGUpKSBzaGlmdFtjb2RlXSA9IGJhc2VbY29kZV1cblxuZXhwb3J0IGZ1bmN0aW9uIGtleU5hbWUoZXZlbnQpIHtcbiAgLy8gRG9uJ3QgdHJ1c3QgZXZlbnQua2V5IGluIENocm9tZSB3aGVuIHRoZXJlIGFyZSBtb2RpZmllcnMgdW50aWxcbiAgLy8gdGhleSBmaXggaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NjMzODM4XG4gIHZhciBpZ25vcmVLZXkgPSBicm9rZW5Nb2RpZmllck5hbWVzICYmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5tZXRhS2V5KSB8fFxuICAgIChzYWZhcmkgfHwgaWUpICYmIGV2ZW50LnNoaWZ0S2V5ICYmIGV2ZW50LmtleSAmJiBldmVudC5rZXkubGVuZ3RoID09IDFcbiAgdmFyIG5hbWUgPSAoIWlnbm9yZUtleSAmJiBldmVudC5rZXkpIHx8XG4gICAgKGV2ZW50LnNoaWZ0S2V5ID8gc2hpZnQgOiBiYXNlKVtldmVudC5rZXlDb2RlXSB8fFxuICAgIGV2ZW50LmtleSB8fCBcIlVuaWRlbnRpZmllZFwiXG4gIC8vIEVkZ2Ugc29tZXRpbWVzIHByb2R1Y2VzIHdyb25nIG5hbWVzIChJc3N1ZSAjMylcbiAgaWYgKG5hbWUgPT0gXCJFc2NcIikgbmFtZSA9IFwiRXNjYXBlXCJcbiAgaWYgKG5hbWUgPT0gXCJEZWxcIikgbmFtZSA9IFwiRGVsZXRlXCJcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvODg2MDU3MS9cbiAgaWYgKG5hbWUgPT0gXCJMZWZ0XCIpIG5hbWUgPSBcIkFycm93TGVmdFwiXG4gIGlmIChuYW1lID09IFwiVXBcIikgbmFtZSA9IFwiQXJyb3dVcFwiXG4gIGlmIChuYW1lID09IFwiUmlnaHRcIikgbmFtZSA9IFwiQXJyb3dSaWdodFwiXG4gIGlmIChuYW1lID09IFwiRG93blwiKSBuYW1lID0gXCJBcnJvd0Rvd25cIlxuICByZXR1cm4gbmFtZVxufVxuIiwiaW1wb3J0IHsga2V5TmFtZSwgYmFzZSB9IGZyb20gJ3czYy1rZXluYW1lJztcbmltcG9ydCB7IFBsdWdpbiB9IGZyb20gJ3Byb3NlbWlycm9yLXN0YXRlJztcblxuLy8gZGVjbGFyZSBnbG9iYWw6IG5hdmlnYXRvclxuXG52YXIgbWFjID0gdHlwZW9mIG5hdmlnYXRvciAhPSBcInVuZGVmaW5lZFwiID8gL01hYy8udGVzdChuYXZpZ2F0b3IucGxhdGZvcm0pIDogZmFsc2U7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUtleU5hbWUobmFtZSkge1xuICB2YXIgcGFydHMgPSBuYW1lLnNwbGl0KC8tKD8hJCkvKSwgcmVzdWx0ID0gcGFydHNbcGFydHMubGVuZ3RoIC0gMV07XG4gIGlmIChyZXN1bHQgPT0gXCJTcGFjZVwiKSB7IHJlc3VsdCA9IFwiIFwiOyB9XG4gIHZhciBhbHQsIGN0cmwsIHNoaWZ0LCBtZXRhO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIHZhciBtb2QgPSBwYXJ0c1tpXTtcbiAgICBpZiAoL14oY21kfG1ldGF8bSkkL2kudGVzdChtb2QpKSB7IG1ldGEgPSB0cnVlOyB9XG4gICAgZWxzZSBpZiAoL15hKGx0KT8kL2kudGVzdChtb2QpKSB7IGFsdCA9IHRydWU7IH1cbiAgICBlbHNlIGlmICgvXihjfGN0cmx8Y29udHJvbCkkL2kudGVzdChtb2QpKSB7IGN0cmwgPSB0cnVlOyB9XG4gICAgZWxzZSBpZiAoL15zKGhpZnQpPyQvaS50ZXN0KG1vZCkpIHsgc2hpZnQgPSB0cnVlOyB9XG4gICAgZWxzZSBpZiAoL15tb2QkL2kudGVzdChtb2QpKSB7IGlmIChtYWMpIHsgbWV0YSA9IHRydWU7IH0gZWxzZSB7IGN0cmwgPSB0cnVlOyB9IH1cbiAgICBlbHNlIHsgdGhyb3cgbmV3IEVycm9yKFwiVW5yZWNvZ25pemVkIG1vZGlmaWVyIG5hbWU6IFwiICsgbW9kKSB9XG4gIH1cbiAgaWYgKGFsdCkgeyByZXN1bHQgPSBcIkFsdC1cIiArIHJlc3VsdDsgfVxuICBpZiAoY3RybCkgeyByZXN1bHQgPSBcIkN0cmwtXCIgKyByZXN1bHQ7IH1cbiAgaWYgKG1ldGEpIHsgcmVzdWx0ID0gXCJNZXRhLVwiICsgcmVzdWx0OyB9XG4gIGlmIChzaGlmdCkgeyByZXN1bHQgPSBcIlNoaWZ0LVwiICsgcmVzdWx0OyB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplKG1hcCkge1xuICB2YXIgY29weSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGZvciAodmFyIHByb3AgaW4gbWFwKSB7IGNvcHlbbm9ybWFsaXplS2V5TmFtZShwcm9wKV0gPSBtYXBbcHJvcF07IH1cbiAgcmV0dXJuIGNvcHlcbn1cblxuZnVuY3Rpb24gbW9kaWZpZXJzKG5hbWUsIGV2ZW50LCBzaGlmdCkge1xuICBpZiAoZXZlbnQuYWx0S2V5KSB7IG5hbWUgPSBcIkFsdC1cIiArIG5hbWU7IH1cbiAgaWYgKGV2ZW50LmN0cmxLZXkpIHsgbmFtZSA9IFwiQ3RybC1cIiArIG5hbWU7IH1cbiAgaWYgKGV2ZW50Lm1ldGFLZXkpIHsgbmFtZSA9IFwiTWV0YS1cIiArIG5hbWU7IH1cbiAgaWYgKHNoaWZ0ICE9PSBmYWxzZSAmJiBldmVudC5zaGlmdEtleSkgeyBuYW1lID0gXCJTaGlmdC1cIiArIG5hbWU7IH1cbiAgcmV0dXJuIG5hbWVcbn1cblxuLy8gOjogKE9iamVjdCkg4oaSIFBsdWdpblxuLy8gQ3JlYXRlIGEga2V5bWFwIHBsdWdpbiBmb3IgdGhlIGdpdmVuIHNldCBvZiBiaW5kaW5ncy5cbi8vXG4vLyBCaW5kaW5ncyBzaG91bGQgbWFwIGtleSBuYW1lcyB0byBbY29tbWFuZF0oI2NvbW1hbmRzKS1zdHlsZVxuLy8gZnVuY3Rpb25zLCB3aGljaCB3aWxsIGJlIGNhbGxlZCB3aXRoIGAoRWRpdG9yU3RhdGUsIGRpc3BhdGNoLFxuLy8gRWRpdG9yVmlldylgIGFyZ3VtZW50cywgYW5kIHNob3VsZCByZXR1cm4gdHJ1ZSB3aGVuIHRoZXkndmUgaGFuZGxlZFxuLy8gdGhlIGtleS4gTm90ZSB0aGF0IHRoZSB2aWV3IGFyZ3VtZW50IGlzbid0IHBhcnQgb2YgdGhlIGNvbW1hbmRcbi8vIHByb3RvY29sLCBidXQgY2FuIGJlIHVzZWQgYXMgYW4gZXNjYXBlIGhhdGNoIGlmIGEgYmluZGluZyBuZWVkcyB0b1xuLy8gZGlyZWN0bHkgaW50ZXJhY3Qgd2l0aCB0aGUgVUkuXG4vL1xuLy8gS2V5IG5hbWVzIG1heSBiZSBzdHJpbmdzIGxpa2UgYFwiU2hpZnQtQ3RybC1FbnRlclwiYOKAlGEga2V5XG4vLyBpZGVudGlmaWVyIHByZWZpeGVkIHdpdGggemVybyBvciBtb3JlIG1vZGlmaWVycy4gS2V5IGlkZW50aWZpZXJzXG4vLyBhcmUgYmFzZWQgb24gdGhlIHN0cmluZ3MgdGhhdCBjYW4gYXBwZWFyIGluXG4vLyBbYEtleUV2ZW50LmtleWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L2tleSkuXG4vLyBVc2UgbG93ZXJjYXNlIGxldHRlcnMgdG8gcmVmZXIgdG8gbGV0dGVyIGtleXMgKG9yIHVwcGVyY2FzZSBsZXR0ZXJzXG4vLyBpZiB5b3Ugd2FudCBzaGlmdCB0byBiZSBoZWxkKS4gWW91IG1heSB1c2UgYFwiU3BhY2VcImAgYXMgYW4gYWxpYXNcbi8vIGZvciB0aGUgYFwiIFwiYCBuYW1lLlxuLy9cbi8vIE1vZGlmaWVycyBjYW4gYmUgZ2l2ZW4gaW4gYW55IG9yZGVyLiBgU2hpZnQtYCAob3IgYHMtYCksIGBBbHQtYCAob3Jcbi8vIGBhLWApLCBgQ3RybC1gIChvciBgYy1gIG9yIGBDb250cm9sLWApIGFuZCBgQ21kLWAgKG9yIGBtLWAgb3Jcbi8vIGBNZXRhLWApIGFyZSByZWNvZ25pemVkLiBGb3IgY2hhcmFjdGVycyB0aGF0IGFyZSBjcmVhdGVkIGJ5IGhvbGRpbmdcbi8vIHNoaWZ0LCB0aGUgYFNoaWZ0LWAgcHJlZml4IGlzIGltcGxpZWQsIGFuZCBzaG91bGQgbm90IGJlIGFkZGVkXG4vLyBleHBsaWNpdGx5LlxuLy9cbi8vIFlvdSBjYW4gdXNlIGBNb2QtYCBhcyBhIHNob3J0aGFuZCBmb3IgYENtZC1gIG9uIE1hYyBhbmQgYEN0cmwtYCBvblxuLy8gb3RoZXIgcGxhdGZvcm1zLlxuLy9cbi8vIFlvdSBjYW4gYWRkIG11bHRpcGxlIGtleW1hcCBwbHVnaW5zIHRvIGFuIGVkaXRvci4gVGhlIG9yZGVyIGluXG4vLyB3aGljaCB0aGV5IGFwcGVhciBkZXRlcm1pbmVzIHRoZWlyIHByZWNlZGVuY2UgKHRoZSBvbmVzIGVhcmx5IGluXG4vLyB0aGUgYXJyYXkgZ2V0IHRvIGRpc3BhdGNoIGZpcnN0KS5cbmZ1bmN0aW9uIGtleW1hcChiaW5kaW5ncykge1xuICByZXR1cm4gbmV3IFBsdWdpbih7cHJvcHM6IHtoYW5kbGVLZXlEb3duOiBrZXlkb3duSGFuZGxlcihiaW5kaW5ncyl9fSlcbn1cblxuLy8gOjogKE9iamVjdCkg4oaSICh2aWV3OiBFZGl0b3JWaWV3LCBldmVudDogZG9tLkV2ZW50KSDihpIgYm9vbFxuLy8gR2l2ZW4gYSBzZXQgb2YgYmluZGluZ3MgKHVzaW5nIHRoZSBzYW1lIGZvcm1hdCBhc1xuLy8gW2BrZXltYXBgXSgja2V5bWFwLmtleW1hcCksIHJldHVybiBhIFtrZXlkb3duXG4vLyBoYW5kbGVyXSgjdmlldy5FZGl0b3JQcm9wcy5oYW5kbGVLZXlEb3duKSB0aGF0IGhhbmRsZXMgdGhlbS5cbmZ1bmN0aW9uIGtleWRvd25IYW5kbGVyKGJpbmRpbmdzKSB7XG4gIHZhciBtYXAgPSBub3JtYWxpemUoYmluZGluZ3MpO1xuICByZXR1cm4gZnVuY3Rpb24odmlldywgZXZlbnQpIHtcbiAgICB2YXIgbmFtZSA9IGtleU5hbWUoZXZlbnQpLCBpc0NoYXIgPSBuYW1lLmxlbmd0aCA9PSAxICYmIG5hbWUgIT0gXCIgXCIsIGJhc2VOYW1lO1xuICAgIHZhciBkaXJlY3QgPSBtYXBbbW9kaWZpZXJzKG5hbWUsIGV2ZW50LCAhaXNDaGFyKV07XG4gICAgaWYgKGRpcmVjdCAmJiBkaXJlY3Qodmlldy5zdGF0ZSwgdmlldy5kaXNwYXRjaCwgdmlldykpIHsgcmV0dXJuIHRydWUgfVxuICAgIGlmIChpc0NoYXIgJiYgKGV2ZW50LnNoaWZ0S2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5tZXRhS2V5IHx8IG5hbWUuY2hhckNvZGVBdCgwKSA+IDEyNykgJiZcbiAgICAgICAgKGJhc2VOYW1lID0gYmFzZVtldmVudC5rZXlDb2RlXSkgJiYgYmFzZU5hbWUgIT0gbmFtZSkge1xuICAgICAgLy8gVHJ5IGZhbGxpbmcgYmFjayB0byB0aGUga2V5Q29kZSB3aGVuIHRoZXJlJ3MgYSBtb2RpZmllclxuICAgICAgLy8gYWN0aXZlIG9yIHRoZSBjaGFyYWN0ZXIgcHJvZHVjZWQgaXNuJ3QgQVNDSUksIGFuZCBvdXIgdGFibGVcbiAgICAgIC8vIHByb2R1Y2VzIGEgZGlmZmVyZW50IG5hbWUgZnJvbSB0aGUgdGhlIGtleUNvZGUuIFNlZSAjNjY4LFxuICAgICAgLy8gIzEwNjBcbiAgICAgIHZhciBmcm9tQ29kZSA9IG1hcFttb2RpZmllcnMoYmFzZU5hbWUsIGV2ZW50LCB0cnVlKV07XG4gICAgICBpZiAoZnJvbUNvZGUgJiYgZnJvbUNvZGUodmlldy5zdGF0ZSwgdmlldy5kaXNwYXRjaCwgdmlldykpIHsgcmV0dXJuIHRydWUgfVxuICAgIH0gZWxzZSBpZiAoaXNDaGFyICYmIGV2ZW50LnNoaWZ0S2V5KSB7XG4gICAgICAvLyBPdGhlcndpc2UsIGlmIHNoaWZ0IGlzIGFjdGl2ZSwgYWxzbyB0cnkgdGhlIGJpbmRpbmcgd2l0aCB0aGVcbiAgICAgIC8vIFNoaWZ0LSBwcmVmaXggZW5hYmxlZC4gU2VlICM5OTdcbiAgICAgIHZhciB3aXRoU2hpZnQgPSBtYXBbbW9kaWZpZXJzKG5hbWUsIGV2ZW50LCB0cnVlKV07XG4gICAgICBpZiAod2l0aFNoaWZ0ICYmIHdpdGhTaGlmdCh2aWV3LnN0YXRlLCB2aWV3LmRpc3BhdGNoLCB2aWV3KSkgeyByZXR1cm4gdHJ1ZSB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmV4cG9ydCB7IGtleWRvd25IYW5kbGVyLCBrZXltYXAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzLmpzLm1hcFxuIiwiLy8gOjotIFBlcnNpc3RlbnQgZGF0YSBzdHJ1Y3R1cmUgcmVwcmVzZW50aW5nIGFuIG9yZGVyZWQgbWFwcGluZyBmcm9tXG4vLyBzdHJpbmdzIHRvIHZhbHVlcywgd2l0aCBzb21lIGNvbnZlbmllbnQgdXBkYXRlIG1ldGhvZHMuXG5mdW5jdGlvbiBPcmRlcmVkTWFwKGNvbnRlbnQpIHtcbiAgdGhpcy5jb250ZW50ID0gY29udGVudDtcbn1cblxuT3JkZXJlZE1hcC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBPcmRlcmVkTWFwLFxuXG4gIGZpbmQ6IGZ1bmN0aW9uKGtleSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jb250ZW50Lmxlbmd0aDsgaSArPSAyKVxuICAgICAgaWYgKHRoaXMuY29udGVudFtpXSA9PT0ga2V5KSByZXR1cm4gaVxuICAgIHJldHVybiAtMVxuICB9LFxuXG4gIC8vIDo6IChzdHJpbmcpIOKGkiA/YW55XG4gIC8vIFJldHJpZXZlIHRoZSB2YWx1ZSBzdG9yZWQgdW5kZXIgYGtleWAsIG9yIHJldHVybiB1bmRlZmluZWQgd2hlblxuICAvLyBubyBzdWNoIGtleSBleGlzdHMuXG4gIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgdmFyIGZvdW5kID0gdGhpcy5maW5kKGtleSk7XG4gICAgcmV0dXJuIGZvdW5kID09IC0xID8gdW5kZWZpbmVkIDogdGhpcy5jb250ZW50W2ZvdW5kICsgMV1cbiAgfSxcblxuICAvLyA6OiAoc3RyaW5nLCBhbnksID9zdHJpbmcpIOKGkiBPcmRlcmVkTWFwXG4gIC8vIENyZWF0ZSBhIG5ldyBtYXAgYnkgcmVwbGFjaW5nIHRoZSB2YWx1ZSBvZiBga2V5YCB3aXRoIGEgbmV3XG4gIC8vIHZhbHVlLCBvciBhZGRpbmcgYSBiaW5kaW5nIHRvIHRoZSBlbmQgb2YgdGhlIG1hcC4gSWYgYG5ld0tleWAgaXNcbiAgLy8gZ2l2ZW4sIHRoZSBrZXkgb2YgdGhlIGJpbmRpbmcgd2lsbCBiZSByZXBsYWNlZCB3aXRoIHRoYXQga2V5LlxuICB1cGRhdGU6IGZ1bmN0aW9uKGtleSwgdmFsdWUsIG5ld0tleSkge1xuICAgIHZhciBzZWxmID0gbmV3S2V5ICYmIG5ld0tleSAhPSBrZXkgPyB0aGlzLnJlbW92ZShuZXdLZXkpIDogdGhpcztcbiAgICB2YXIgZm91bmQgPSBzZWxmLmZpbmQoa2V5KSwgY29udGVudCA9IHNlbGYuY29udGVudC5zbGljZSgpO1xuICAgIGlmIChmb3VuZCA9PSAtMSkge1xuICAgICAgY29udGVudC5wdXNoKG5ld0tleSB8fCBrZXksIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGVudFtmb3VuZCArIDFdID0gdmFsdWU7XG4gICAgICBpZiAobmV3S2V5KSBjb250ZW50W2ZvdW5kXSA9IG5ld0tleTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPcmRlcmVkTWFwKGNvbnRlbnQpXG4gIH0sXG5cbiAgLy8gOjogKHN0cmluZykg4oaSIE9yZGVyZWRNYXBcbiAgLy8gUmV0dXJuIGEgbWFwIHdpdGggdGhlIGdpdmVuIGtleSByZW1vdmVkLCBpZiBpdCBleGlzdGVkLlxuICByZW1vdmU6IGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBmb3VuZCA9IHRoaXMuZmluZChrZXkpO1xuICAgIGlmIChmb3VuZCA9PSAtMSkgcmV0dXJuIHRoaXNcbiAgICB2YXIgY29udGVudCA9IHRoaXMuY29udGVudC5zbGljZSgpO1xuICAgIGNvbnRlbnQuc3BsaWNlKGZvdW5kLCAyKTtcbiAgICByZXR1cm4gbmV3IE9yZGVyZWRNYXAoY29udGVudClcbiAgfSxcblxuICAvLyA6OiAoc3RyaW5nLCBhbnkpIOKGkiBPcmRlcmVkTWFwXG4gIC8vIEFkZCBhIG5ldyBrZXkgdG8gdGhlIHN0YXJ0IG9mIHRoZSBtYXAuXG4gIGFkZFRvU3RhcnQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IE9yZGVyZWRNYXAoW2tleSwgdmFsdWVdLmNvbmNhdCh0aGlzLnJlbW92ZShrZXkpLmNvbnRlbnQpKVxuICB9LFxuXG4gIC8vIDo6IChzdHJpbmcsIGFueSkg4oaSIE9yZGVyZWRNYXBcbiAgLy8gQWRkIGEgbmV3IGtleSB0byB0aGUgZW5kIG9mIHRoZSBtYXAuXG4gIGFkZFRvRW5kOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLnJlbW92ZShrZXkpLmNvbnRlbnQuc2xpY2UoKTtcbiAgICBjb250ZW50LnB1c2goa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuIG5ldyBPcmRlcmVkTWFwKGNvbnRlbnQpXG4gIH0sXG5cbiAgLy8gOjogKHN0cmluZywgc3RyaW5nLCBhbnkpIOKGkiBPcmRlcmVkTWFwXG4gIC8vIEFkZCBhIGtleSBhZnRlciB0aGUgZ2l2ZW4ga2V5LiBJZiBgcGxhY2VgIGlzIG5vdCBmb3VuZCwgdGhlIG5ld1xuICAvLyBrZXkgaXMgYWRkZWQgdG8gdGhlIGVuZC5cbiAgYWRkQmVmb3JlOiBmdW5jdGlvbihwbGFjZSwga2V5LCB2YWx1ZSkge1xuICAgIHZhciB3aXRob3V0ID0gdGhpcy5yZW1vdmUoa2V5KSwgY29udGVudCA9IHdpdGhvdXQuY29udGVudC5zbGljZSgpO1xuICAgIHZhciBmb3VuZCA9IHdpdGhvdXQuZmluZChwbGFjZSk7XG4gICAgY29udGVudC5zcGxpY2UoZm91bmQgPT0gLTEgPyBjb250ZW50Lmxlbmd0aCA6IGZvdW5kLCAwLCBrZXksIHZhbHVlKTtcbiAgICByZXR1cm4gbmV3IE9yZGVyZWRNYXAoY29udGVudClcbiAgfSxcblxuICAvLyA6OiAoKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KSlcbiAgLy8gQ2FsbCB0aGUgZ2l2ZW4gZnVuY3Rpb24gZm9yIGVhY2gga2V5L3ZhbHVlIHBhaXIgaW4gdGhlIG1hcCwgaW5cbiAgLy8gb3JkZXIuXG4gIGZvckVhY2g6IGZ1bmN0aW9uKGYpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY29udGVudC5sZW5ndGg7IGkgKz0gMilcbiAgICAgIGYodGhpcy5jb250ZW50W2ldLCB0aGlzLmNvbnRlbnRbaSArIDFdKTtcbiAgfSxcblxuICAvLyA6OiAodW5pb248T2JqZWN0LCBPcmRlcmVkTWFwPikg4oaSIE9yZGVyZWRNYXBcbiAgLy8gQ3JlYXRlIGEgbmV3IG1hcCBieSBwcmVwZW5kaW5nIHRoZSBrZXlzIGluIHRoaXMgbWFwIHRoYXQgZG9uJ3RcbiAgLy8gYXBwZWFyIGluIGBtYXBgIGJlZm9yZSB0aGUga2V5cyBpbiBgbWFwYC5cbiAgcHJlcGVuZDogZnVuY3Rpb24obWFwKSB7XG4gICAgbWFwID0gT3JkZXJlZE1hcC5mcm9tKG1hcCk7XG4gICAgaWYgKCFtYXAuc2l6ZSkgcmV0dXJuIHRoaXNcbiAgICByZXR1cm4gbmV3IE9yZGVyZWRNYXAobWFwLmNvbnRlbnQuY29uY2F0KHRoaXMuc3VidHJhY3QobWFwKS5jb250ZW50KSlcbiAgfSxcblxuICAvLyA6OiAodW5pb248T2JqZWN0LCBPcmRlcmVkTWFwPikg4oaSIE9yZGVyZWRNYXBcbiAgLy8gQ3JlYXRlIGEgbmV3IG1hcCBieSBhcHBlbmRpbmcgdGhlIGtleXMgaW4gdGhpcyBtYXAgdGhhdCBkb24ndFxuICAvLyBhcHBlYXIgaW4gYG1hcGAgYWZ0ZXIgdGhlIGtleXMgaW4gYG1hcGAuXG4gIGFwcGVuZDogZnVuY3Rpb24obWFwKSB7XG4gICAgbWFwID0gT3JkZXJlZE1hcC5mcm9tKG1hcCk7XG4gICAgaWYgKCFtYXAuc2l6ZSkgcmV0dXJuIHRoaXNcbiAgICByZXR1cm4gbmV3IE9yZGVyZWRNYXAodGhpcy5zdWJ0cmFjdChtYXApLmNvbnRlbnQuY29uY2F0KG1hcC5jb250ZW50KSlcbiAgfSxcblxuICAvLyA6OiAodW5pb248T2JqZWN0LCBPcmRlcmVkTWFwPikg4oaSIE9yZGVyZWRNYXBcbiAgLy8gQ3JlYXRlIGEgbWFwIGNvbnRhaW5pbmcgYWxsIHRoZSBrZXlzIGluIHRoaXMgbWFwIHRoYXQgZG9uJ3RcbiAgLy8gYXBwZWFyIGluIGBtYXBgLlxuICBzdWJ0cmFjdDogZnVuY3Rpb24obWFwKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXM7XG4gICAgbWFwID0gT3JkZXJlZE1hcC5mcm9tKG1hcCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXAuY29udGVudC5sZW5ndGg7IGkgKz0gMilcbiAgICAgIHJlc3VsdCA9IHJlc3VsdC5yZW1vdmUobWFwLmNvbnRlbnRbaV0pO1xuICAgIHJldHVybiByZXN1bHRcbiAgfSxcblxuICAvLyA6OiBudW1iZXJcbiAgLy8gVGhlIGFtb3VudCBvZiBrZXlzIGluIHRoaXMgbWFwLlxuICBnZXQgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50Lmxlbmd0aCA+PiAxXG4gIH1cbn07XG5cbi8vIDo6ICg/dW5pb248T2JqZWN0LCBPcmRlcmVkTWFwPikg4oaSIE9yZGVyZWRNYXBcbi8vIFJldHVybiBhIG1hcCB3aXRoIHRoZSBnaXZlbiBjb250ZW50LiBJZiBudWxsLCBjcmVhdGUgYW4gZW1wdHlcbi8vIG1hcC4gSWYgZ2l2ZW4gYW4gb3JkZXJlZCBtYXAsIHJldHVybiB0aGF0IG1hcCBpdHNlbGYuIElmIGdpdmVuIGFuXG4vLyBvYmplY3QsIGNyZWF0ZSBhIG1hcCBmcm9tIHRoZSBvYmplY3QncyBwcm9wZXJ0aWVzLlxuT3JkZXJlZE1hcC5mcm9tID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgT3JkZXJlZE1hcCkgcmV0dXJuIHZhbHVlXG4gIHZhciBjb250ZW50ID0gW107XG4gIGlmICh2YWx1ZSkgZm9yICh2YXIgcHJvcCBpbiB2YWx1ZSkgY29udGVudC5wdXNoKHByb3AsIHZhbHVlW3Byb3BdKTtcbiAgcmV0dXJuIG5ldyBPcmRlcmVkTWFwKGNvbnRlbnQpXG59O1xuXG52YXIgb3JkZXJlZG1hcCA9IE9yZGVyZWRNYXA7XG5cbmV4cG9ydCBkZWZhdWx0IG9yZGVyZWRtYXA7XG4iLCJpbXBvcnQgT3JkZXJlZE1hcCBmcm9tICdvcmRlcmVkbWFwJztcblxuZnVuY3Rpb24gZmluZERpZmZTdGFydChhLCBiLCBwb3MpIHtcbiAgZm9yICh2YXIgaSA9IDA7OyBpKyspIHtcbiAgICBpZiAoaSA9PSBhLmNoaWxkQ291bnQgfHwgaSA9PSBiLmNoaWxkQ291bnQpXG4gICAgICB7IHJldHVybiBhLmNoaWxkQ291bnQgPT0gYi5jaGlsZENvdW50ID8gbnVsbCA6IHBvcyB9XG5cbiAgICB2YXIgY2hpbGRBID0gYS5jaGlsZChpKSwgY2hpbGRCID0gYi5jaGlsZChpKTtcbiAgICBpZiAoY2hpbGRBID09IGNoaWxkQikgeyBwb3MgKz0gY2hpbGRBLm5vZGVTaXplOyBjb250aW51ZSB9XG5cbiAgICBpZiAoIWNoaWxkQS5zYW1lTWFya3VwKGNoaWxkQikpIHsgcmV0dXJuIHBvcyB9XG5cbiAgICBpZiAoY2hpbGRBLmlzVGV4dCAmJiBjaGlsZEEudGV4dCAhPSBjaGlsZEIudGV4dCkge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGNoaWxkQS50ZXh0W2pdID09IGNoaWxkQi50ZXh0W2pdOyBqKyspXG4gICAgICAgIHsgcG9zKys7IH1cbiAgICAgIHJldHVybiBwb3NcbiAgICB9XG4gICAgaWYgKGNoaWxkQS5jb250ZW50LnNpemUgfHwgY2hpbGRCLmNvbnRlbnQuc2l6ZSkge1xuICAgICAgdmFyIGlubmVyID0gZmluZERpZmZTdGFydChjaGlsZEEuY29udGVudCwgY2hpbGRCLmNvbnRlbnQsIHBvcyArIDEpO1xuICAgICAgaWYgKGlubmVyICE9IG51bGwpIHsgcmV0dXJuIGlubmVyIH1cbiAgICB9XG4gICAgcG9zICs9IGNoaWxkQS5ub2RlU2l6ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kRGlmZkVuZChhLCBiLCBwb3NBLCBwb3NCKSB7XG4gIGZvciAodmFyIGlBID0gYS5jaGlsZENvdW50LCBpQiA9IGIuY2hpbGRDb3VudDs7KSB7XG4gICAgaWYgKGlBID09IDAgfHwgaUIgPT0gMClcbiAgICAgIHsgcmV0dXJuIGlBID09IGlCID8gbnVsbCA6IHthOiBwb3NBLCBiOiBwb3NCfSB9XG5cbiAgICB2YXIgY2hpbGRBID0gYS5jaGlsZCgtLWlBKSwgY2hpbGRCID0gYi5jaGlsZCgtLWlCKSwgc2l6ZSA9IGNoaWxkQS5ub2RlU2l6ZTtcbiAgICBpZiAoY2hpbGRBID09IGNoaWxkQikge1xuICAgICAgcG9zQSAtPSBzaXplOyBwb3NCIC09IHNpemU7XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIGlmICghY2hpbGRBLnNhbWVNYXJrdXAoY2hpbGRCKSkgeyByZXR1cm4ge2E6IHBvc0EsIGI6IHBvc0J9IH1cblxuICAgIGlmIChjaGlsZEEuaXNUZXh0ICYmIGNoaWxkQS50ZXh0ICE9IGNoaWxkQi50ZXh0KSB7XG4gICAgICB2YXIgc2FtZSA9IDAsIG1pblNpemUgPSBNYXRoLm1pbihjaGlsZEEudGV4dC5sZW5ndGgsIGNoaWxkQi50ZXh0Lmxlbmd0aCk7XG4gICAgICB3aGlsZSAoc2FtZSA8IG1pblNpemUgJiYgY2hpbGRBLnRleHRbY2hpbGRBLnRleHQubGVuZ3RoIC0gc2FtZSAtIDFdID09IGNoaWxkQi50ZXh0W2NoaWxkQi50ZXh0Lmxlbmd0aCAtIHNhbWUgLSAxXSkge1xuICAgICAgICBzYW1lKys7IHBvc0EtLTsgcG9zQi0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHthOiBwb3NBLCBiOiBwb3NCfVxuICAgIH1cbiAgICBpZiAoY2hpbGRBLmNvbnRlbnQuc2l6ZSB8fCBjaGlsZEIuY29udGVudC5zaXplKSB7XG4gICAgICB2YXIgaW5uZXIgPSBmaW5kRGlmZkVuZChjaGlsZEEuY29udGVudCwgY2hpbGRCLmNvbnRlbnQsIHBvc0EgLSAxLCBwb3NCIC0gMSk7XG4gICAgICBpZiAoaW5uZXIpIHsgcmV0dXJuIGlubmVyIH1cbiAgICB9XG4gICAgcG9zQSAtPSBzaXplOyBwb3NCIC09IHNpemU7XG4gIH1cbn1cblxuLy8gOjotIEEgZnJhZ21lbnQgcmVwcmVzZW50cyBhIG5vZGUncyBjb2xsZWN0aW9uIG9mIGNoaWxkIG5vZGVzLlxuLy9cbi8vIExpa2Ugbm9kZXMsIGZyYWdtZW50cyBhcmUgcGVyc2lzdGVudCBkYXRhIHN0cnVjdHVyZXMsIGFuZCB5b3Vcbi8vIHNob3VsZCBub3QgbXV0YXRlIHRoZW0gb3IgdGhlaXIgY29udGVudC4gUmF0aGVyLCB5b3UgY3JlYXRlIG5ld1xuLy8gaW5zdGFuY2VzIHdoZW5ldmVyIG5lZWRlZC4gVGhlIEFQSSB0cmllcyB0byBtYWtlIHRoaXMgZWFzeS5cbnZhciBGcmFnbWVudCA9IGZ1bmN0aW9uIEZyYWdtZW50KGNvbnRlbnQsIHNpemUpIHtcbiAgdGhpcy5jb250ZW50ID0gY29udGVudDtcbiAgLy8gOjogbnVtYmVyXG4gIC8vIFRoZSBzaXplIG9mIHRoZSBmcmFnbWVudCwgd2hpY2ggaXMgdGhlIHRvdGFsIG9mIHRoZSBzaXplIG9mIGl0c1xuICAvLyBjb250ZW50IG5vZGVzLlxuICB0aGlzLnNpemUgPSBzaXplIHx8IDA7XG4gIGlmIChzaXplID09IG51bGwpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250ZW50Lmxlbmd0aDsgaSsrKVxuICAgIHsgdGhpcy5zaXplICs9IGNvbnRlbnRbaV0ubm9kZVNpemU7IH0gfVxufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgZmlyc3RDaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSxsYXN0Q2hpbGQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sY2hpbGRDb3VudDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyA6OiAobnVtYmVyLCBudW1iZXIsIChub2RlOiBOb2RlLCBzdGFydDogbnVtYmVyLCBwYXJlbnQ6IE5vZGUsIGluZGV4OiBudW1iZXIpIOKGkiA/Ym9vbCwgP251bWJlcilcbi8vIEludm9rZSBhIGNhbGxiYWNrIGZvciBhbGwgZGVzY2VuZGFudCBub2RlcyBiZXR3ZWVuIHRoZSBnaXZlbiB0d29cbi8vIHBvc2l0aW9ucyAocmVsYXRpdmUgdG8gc3RhcnQgb2YgdGhpcyBmcmFnbWVudCkuIERvZXNuJ3QgZGVzY2VuZFxuLy8gaW50byBhIG5vZGUgd2hlbiB0aGUgY2FsbGJhY2sgcmV0dXJucyBgZmFsc2VgLlxuRnJhZ21lbnQucHJvdG90eXBlLm5vZGVzQmV0d2VlbiA9IGZ1bmN0aW9uIG5vZGVzQmV0d2VlbiAoZnJvbSwgdG8sIGYsIG5vZGVTdGFydCwgcGFyZW50KSB7XG4gICAgaWYgKCBub2RlU3RhcnQgPT09IHZvaWQgMCApIG5vZGVTdGFydCA9IDA7XG5cbiAgZm9yICh2YXIgaSA9IDAsIHBvcyA9IDA7IHBvcyA8IHRvOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLmNvbnRlbnRbaV0sIGVuZCA9IHBvcyArIGNoaWxkLm5vZGVTaXplO1xuICAgIGlmIChlbmQgPiBmcm9tICYmIGYoY2hpbGQsIG5vZGVTdGFydCArIHBvcywgcGFyZW50LCBpKSAhPT0gZmFsc2UgJiYgY2hpbGQuY29udGVudC5zaXplKSB7XG4gICAgICB2YXIgc3RhcnQgPSBwb3MgKyAxO1xuICAgICAgY2hpbGQubm9kZXNCZXR3ZWVuKE1hdGgubWF4KDAsIGZyb20gLSBzdGFydCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4oY2hpbGQuY29udGVudC5zaXplLCB0byAtIHN0YXJ0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBmLCBub2RlU3RhcnQgKyBzdGFydCk7XG4gICAgfVxuICAgIHBvcyA9IGVuZDtcbiAgfVxufTtcblxuLy8gOjogKChub2RlOiBOb2RlLCBwb3M6IG51bWJlciwgcGFyZW50OiBOb2RlKSDihpIgP2Jvb2wpXG4vLyBDYWxsIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgZXZlcnkgZGVzY2VuZGFudCBub2RlLiBUaGUgY2FsbGJhY2tcbi8vIG1heSByZXR1cm4gYGZhbHNlYCB0byBwcmV2ZW50IHRyYXZlcnNhbCBvZiBhIGdpdmVuIG5vZGUncyBjaGlsZHJlbi5cbkZyYWdtZW50LnByb3RvdHlwZS5kZXNjZW5kYW50cyA9IGZ1bmN0aW9uIGRlc2NlbmRhbnRzIChmKSB7XG4gIHRoaXMubm9kZXNCZXR3ZWVuKDAsIHRoaXMuc2l6ZSwgZik7XG59O1xuXG4vLyA6OiAobnVtYmVyLCBudW1iZXIsID9zdHJpbmcsID9zdHJpbmcpIOKGkiBzdHJpbmdcbi8vIEV4dHJhY3QgdGhlIHRleHQgYmV0d2VlbiBgZnJvbWAgYW5kIGB0b2AuIFNlZSB0aGUgc2FtZSBtZXRob2Qgb25cbi8vIFtgTm9kZWBdKCNtb2RlbC5Ob2RlLnRleHRCZXR3ZWVuKS5cbkZyYWdtZW50LnByb3RvdHlwZS50ZXh0QmV0d2VlbiA9IGZ1bmN0aW9uIHRleHRCZXR3ZWVuIChmcm9tLCB0bywgYmxvY2tTZXBhcmF0b3IsIGxlYWZUZXh0KSB7XG4gIHZhciB0ZXh0ID0gXCJcIiwgc2VwYXJhdGVkID0gdHJ1ZTtcbiAgdGhpcy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIGZ1bmN0aW9uIChub2RlLCBwb3MpIHtcbiAgICBpZiAobm9kZS5pc1RleHQpIHtcbiAgICAgIHRleHQgKz0gbm9kZS50ZXh0LnNsaWNlKE1hdGgubWF4KGZyb20sIHBvcykgLSBwb3MsIHRvIC0gcG9zKTtcbiAgICAgIHNlcGFyYXRlZCA9ICFibG9ja1NlcGFyYXRvcjtcbiAgICB9IGVsc2UgaWYgKG5vZGUuaXNMZWFmICYmIGxlYWZUZXh0KSB7XG4gICAgICB0ZXh0ICs9IGxlYWZUZXh0O1xuICAgICAgc2VwYXJhdGVkID0gIWJsb2NrU2VwYXJhdG9yO1xuICAgIH0gZWxzZSBpZiAoIXNlcGFyYXRlZCAmJiBub2RlLmlzQmxvY2spIHtcbiAgICAgIHRleHQgKz0gYmxvY2tTZXBhcmF0b3I7XG4gICAgICBzZXBhcmF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfSwgMCk7XG4gIHJldHVybiB0ZXh0XG59O1xuXG4vLyA6OiAoRnJhZ21lbnQpIOKGkiBGcmFnbWVudFxuLy8gQ3JlYXRlIGEgbmV3IGZyYWdtZW50IGNvbnRhaW5pbmcgdGhlIGNvbWJpbmVkIGNvbnRlbnQgb2YgdGhpc1xuLy8gZnJhZ21lbnQgYW5kIHRoZSBvdGhlci5cbkZyYWdtZW50LnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiBhcHBlbmQgKG90aGVyKSB7XG4gIGlmICghb3RoZXIuc2l6ZSkgeyByZXR1cm4gdGhpcyB9XG4gIGlmICghdGhpcy5zaXplKSB7IHJldHVybiBvdGhlciB9XG4gIHZhciBsYXN0ID0gdGhpcy5sYXN0Q2hpbGQsIGZpcnN0ID0gb3RoZXIuZmlyc3RDaGlsZCwgY29udGVudCA9IHRoaXMuY29udGVudC5zbGljZSgpLCBpID0gMDtcbiAgaWYgKGxhc3QuaXNUZXh0ICYmIGxhc3Quc2FtZU1hcmt1cChmaXJzdCkpIHtcbiAgICBjb250ZW50W2NvbnRlbnQubGVuZ3RoIC0gMV0gPSBsYXN0LndpdGhUZXh0KGxhc3QudGV4dCArIGZpcnN0LnRleHQpO1xuICAgIGkgPSAxO1xuICB9XG4gIGZvciAoOyBpIDwgb3RoZXIuY29udGVudC5sZW5ndGg7IGkrKykgeyBjb250ZW50LnB1c2gob3RoZXIuY29udGVudFtpXSk7IH1cbiAgcmV0dXJuIG5ldyBGcmFnbWVudChjb250ZW50LCB0aGlzLnNpemUgKyBvdGhlci5zaXplKVxufTtcblxuLy8gOjogKG51bWJlciwgP251bWJlcikg4oaSIEZyYWdtZW50XG4vLyBDdXQgb3V0IHRoZSBzdWItZnJhZ21lbnQgYmV0d2VlbiB0aGUgdHdvIGdpdmVuIHBvc2l0aW9ucy5cbkZyYWdtZW50LnByb3RvdHlwZS5jdXQgPSBmdW5jdGlvbiBjdXQgKGZyb20sIHRvKSB7XG4gIGlmICh0byA9PSBudWxsKSB7IHRvID0gdGhpcy5zaXplOyB9XG4gIGlmIChmcm9tID09IDAgJiYgdG8gPT0gdGhpcy5zaXplKSB7IHJldHVybiB0aGlzIH1cbiAgdmFyIHJlc3VsdCA9IFtdLCBzaXplID0gMDtcbiAgaWYgKHRvID4gZnJvbSkgeyBmb3IgKHZhciBpID0gMCwgcG9zID0gMDsgcG9zIDwgdG87IGkrKykge1xuICAgIHZhciBjaGlsZCA9IHRoaXMuY29udGVudFtpXSwgZW5kID0gcG9zICsgY2hpbGQubm9kZVNpemU7XG4gICAgaWYgKGVuZCA+IGZyb20pIHtcbiAgICAgIGlmIChwb3MgPCBmcm9tIHx8IGVuZCA+IHRvKSB7XG4gICAgICAgIGlmIChjaGlsZC5pc1RleHQpXG4gICAgICAgICAgeyBjaGlsZCA9IGNoaWxkLmN1dChNYXRoLm1heCgwLCBmcm9tIC0gcG9zKSwgTWF0aC5taW4oY2hpbGQudGV4dC5sZW5ndGgsIHRvIC0gcG9zKSk7IH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgIHsgY2hpbGQgPSBjaGlsZC5jdXQoTWF0aC5tYXgoMCwgZnJvbSAtIHBvcyAtIDEpLCBNYXRoLm1pbihjaGlsZC5jb250ZW50LnNpemUsIHRvIC0gcG9zIC0gMSkpOyB9XG4gICAgICB9XG4gICAgICByZXN1bHQucHVzaChjaGlsZCk7XG4gICAgICBzaXplICs9IGNoaWxkLm5vZGVTaXplO1xuICAgIH1cbiAgICBwb3MgPSBlbmQ7XG4gIH0gfVxuICByZXR1cm4gbmV3IEZyYWdtZW50KHJlc3VsdCwgc2l6ZSlcbn07XG5cbkZyYWdtZW50LnByb3RvdHlwZS5jdXRCeUluZGV4ID0gZnVuY3Rpb24gY3V0QnlJbmRleCAoZnJvbSwgdG8pIHtcbiAgaWYgKGZyb20gPT0gdG8pIHsgcmV0dXJuIEZyYWdtZW50LmVtcHR5IH1cbiAgaWYgKGZyb20gPT0gMCAmJiB0byA9PSB0aGlzLmNvbnRlbnQubGVuZ3RoKSB7IHJldHVybiB0aGlzIH1cbiAgcmV0dXJuIG5ldyBGcmFnbWVudCh0aGlzLmNvbnRlbnQuc2xpY2UoZnJvbSwgdG8pKVxufTtcblxuLy8gOjogKG51bWJlciwgTm9kZSkg4oaSIEZyYWdtZW50XG4vLyBDcmVhdGUgYSBuZXcgZnJhZ21lbnQgaW4gd2hpY2ggdGhlIG5vZGUgYXQgdGhlIGdpdmVuIGluZGV4IGlzXG4vLyByZXBsYWNlZCBieSB0aGUgZ2l2ZW4gbm9kZS5cbkZyYWdtZW50LnByb3RvdHlwZS5yZXBsYWNlQ2hpbGQgPSBmdW5jdGlvbiByZXBsYWNlQ2hpbGQgKGluZGV4LCBub2RlKSB7XG4gIHZhciBjdXJyZW50ID0gdGhpcy5jb250ZW50W2luZGV4XTtcbiAgaWYgKGN1cnJlbnQgPT0gbm9kZSkgeyByZXR1cm4gdGhpcyB9XG4gIHZhciBjb3B5ID0gdGhpcy5jb250ZW50LnNsaWNlKCk7XG4gIHZhciBzaXplID0gdGhpcy5zaXplICsgbm9kZS5ub2RlU2l6ZSAtIGN1cnJlbnQubm9kZVNpemU7XG4gIGNvcHlbaW5kZXhdID0gbm9kZTtcbiAgcmV0dXJuIG5ldyBGcmFnbWVudChjb3B5LCBzaXplKVxufTtcblxuLy8gOiAoTm9kZSkg4oaSIEZyYWdtZW50XG4vLyBDcmVhdGUgYSBuZXcgZnJhZ21lbnQgYnkgcHJlcGVuZGluZyB0aGUgZ2l2ZW4gbm9kZSB0byB0aGlzXG4vLyBmcmFnbWVudC5cbkZyYWdtZW50LnByb3RvdHlwZS5hZGRUb1N0YXJ0ID0gZnVuY3Rpb24gYWRkVG9TdGFydCAobm9kZSkge1xuICByZXR1cm4gbmV3IEZyYWdtZW50KFtub2RlXS5jb25jYXQodGhpcy5jb250ZW50KSwgdGhpcy5zaXplICsgbm9kZS5ub2RlU2l6ZSlcbn07XG5cbi8vIDogKE5vZGUpIOKGkiBGcmFnbWVudFxuLy8gQ3JlYXRlIGEgbmV3IGZyYWdtZW50IGJ5IGFwcGVuZGluZyB0aGUgZ2l2ZW4gbm9kZSB0byB0aGlzXG4vLyBmcmFnbWVudC5cbkZyYWdtZW50LnByb3RvdHlwZS5hZGRUb0VuZCA9IGZ1bmN0aW9uIGFkZFRvRW5kIChub2RlKSB7XG4gIHJldHVybiBuZXcgRnJhZ21lbnQodGhpcy5jb250ZW50LmNvbmNhdChub2RlKSwgdGhpcy5zaXplICsgbm9kZS5ub2RlU2l6ZSlcbn07XG5cbi8vIDo6IChGcmFnbWVudCkg4oaSIGJvb2xcbi8vIENvbXBhcmUgdGhpcyBmcmFnbWVudCB0byBhbm90aGVyIG9uZS5cbkZyYWdtZW50LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChvdGhlcikge1xuICBpZiAodGhpcy5jb250ZW50Lmxlbmd0aCAhPSBvdGhlci5jb250ZW50Lmxlbmd0aCkgeyByZXR1cm4gZmFsc2UgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY29udGVudC5sZW5ndGg7IGkrKylcbiAgICB7IGlmICghdGhpcy5jb250ZW50W2ldLmVxKG90aGVyLmNvbnRlbnRbaV0pKSB7IHJldHVybiBmYWxzZSB9IH1cbiAgcmV0dXJuIHRydWVcbn07XG5cbi8vIDo6ID9Ob2RlXG4vLyBUaGUgZmlyc3QgY2hpbGQgb2YgdGhlIGZyYWdtZW50LCBvciBgbnVsbGAgaWYgaXQgaXMgZW1wdHkuXG5wcm90b3R5cGVBY2Nlc3NvcnMuZmlyc3RDaGlsZC5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmNvbnRlbnQubGVuZ3RoID8gdGhpcy5jb250ZW50WzBdIDogbnVsbCB9O1xuXG4vLyA6OiA/Tm9kZVxuLy8gVGhlIGxhc3QgY2hpbGQgb2YgdGhlIGZyYWdtZW50LCBvciBgbnVsbGAgaWYgaXQgaXMgZW1wdHkuXG5wcm90b3R5cGVBY2Nlc3NvcnMubGFzdENoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuY29udGVudC5sZW5ndGggPyB0aGlzLmNvbnRlbnRbdGhpcy5jb250ZW50Lmxlbmd0aCAtIDFdIDogbnVsbCB9O1xuXG4vLyA6OiBudW1iZXJcbi8vIFRoZSBudW1iZXIgb2YgY2hpbGQgbm9kZXMgaW4gdGhpcyBmcmFnbWVudC5cbnByb3RvdHlwZUFjY2Vzc29ycy5jaGlsZENvdW50LmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuY29udGVudC5sZW5ndGggfTtcblxuLy8gOjogKG51bWJlcikg4oaSIE5vZGVcbi8vIEdldCB0aGUgY2hpbGQgbm9kZSBhdCB0aGUgZ2l2ZW4gaW5kZXguIFJhaXNlIGFuIGVycm9yIHdoZW4gdGhlXG4vLyBpbmRleCBpcyBvdXQgb2YgcmFuZ2UuXG5GcmFnbWVudC5wcm90b3R5cGUuY2hpbGQgPSBmdW5jdGlvbiBjaGlsZCAoaW5kZXgpIHtcbiAgdmFyIGZvdW5kID0gdGhpcy5jb250ZW50W2luZGV4XTtcbiAgaWYgKCFmb3VuZCkgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkluZGV4IFwiICsgaW5kZXggKyBcIiBvdXQgb2YgcmFuZ2UgZm9yIFwiICsgdGhpcykgfVxuICByZXR1cm4gZm91bmRcbn07XG5cbi8vIDo6IChudW1iZXIpIOKGkiA/Tm9kZVxuLy8gR2V0IHRoZSBjaGlsZCBub2RlIGF0IHRoZSBnaXZlbiBpbmRleCwgaWYgaXQgZXhpc3RzLlxuRnJhZ21lbnQucHJvdG90eXBlLm1heWJlQ2hpbGQgPSBmdW5jdGlvbiBtYXliZUNoaWxkIChpbmRleCkge1xuICByZXR1cm4gdGhpcy5jb250ZW50W2luZGV4XVxufTtcblxuLy8gOjogKChub2RlOiBOb2RlLCBvZmZzZXQ6IG51bWJlciwgaW5kZXg6IG51bWJlcikpXG4vLyBDYWxsIGBmYCBmb3IgZXZlcnkgY2hpbGQgbm9kZSwgcGFzc2luZyB0aGUgbm9kZSwgaXRzIG9mZnNldFxuLy8gaW50byB0aGlzIHBhcmVudCBub2RlLCBhbmQgaXRzIGluZGV4LlxuRnJhZ21lbnQucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoIChmKSB7XG4gIGZvciAodmFyIGkgPSAwLCBwID0gMDsgaSA8IHRoaXMuY29udGVudC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IHRoaXMuY29udGVudFtpXTtcbiAgICBmKGNoaWxkLCBwLCBpKTtcbiAgICBwICs9IGNoaWxkLm5vZGVTaXplO1xuICB9XG59O1xuXG4vLyA6OiAoRnJhZ21lbnQpIOKGkiA/bnVtYmVyXG4vLyBGaW5kIHRoZSBmaXJzdCBwb3NpdGlvbiBhdCB3aGljaCB0aGlzIGZyYWdtZW50IGFuZCBhbm90aGVyXG4vLyBmcmFnbWVudCBkaWZmZXIsIG9yIGBudWxsYCBpZiB0aGV5IGFyZSB0aGUgc2FtZS5cbkZyYWdtZW50LnByb3RvdHlwZS5maW5kRGlmZlN0YXJ0ID0gZnVuY3Rpb24gZmluZERpZmZTdGFydCQxIChvdGhlciwgcG9zKSB7XG4gICAgaWYgKCBwb3MgPT09IHZvaWQgMCApIHBvcyA9IDA7XG5cbiAgcmV0dXJuIGZpbmREaWZmU3RhcnQodGhpcywgb3RoZXIsIHBvcylcbn07XG5cbi8vIDo6IChGcmFnbWVudCkg4oaSID97YTogbnVtYmVyLCBiOiBudW1iZXJ9XG4vLyBGaW5kIHRoZSBmaXJzdCBwb3NpdGlvbiwgc2VhcmNoaW5nIGZyb20gdGhlIGVuZCwgYXQgd2hpY2ggdGhpc1xuLy8gZnJhZ21lbnQgYW5kIHRoZSBnaXZlbiBmcmFnbWVudCBkaWZmZXIsIG9yIGBudWxsYCBpZiB0aGV5IGFyZSB0aGVcbi8vIHNhbWUuIFNpbmNlIHRoaXMgcG9zaXRpb24gd2lsbCBub3QgYmUgdGhlIHNhbWUgaW4gYm90aCBub2RlcywgYW5cbi8vIG9iamVjdCB3aXRoIHR3byBzZXBhcmF0ZSBwb3NpdGlvbnMgaXMgcmV0dXJuZWQuXG5GcmFnbWVudC5wcm90b3R5cGUuZmluZERpZmZFbmQgPSBmdW5jdGlvbiBmaW5kRGlmZkVuZCQxIChvdGhlciwgcG9zLCBvdGhlclBvcykge1xuICAgIGlmICggcG9zID09PSB2b2lkIDAgKSBwb3MgPSB0aGlzLnNpemU7XG4gICAgaWYgKCBvdGhlclBvcyA9PT0gdm9pZCAwICkgb3RoZXJQb3MgPSBvdGhlci5zaXplO1xuXG4gIHJldHVybiBmaW5kRGlmZkVuZCh0aGlzLCBvdGhlciwgcG9zLCBvdGhlclBvcylcbn07XG5cbi8vIDogKG51bWJlciwgP251bWJlcikg4oaSIHtpbmRleDogbnVtYmVyLCBvZmZzZXQ6IG51bWJlcn1cbi8vIEZpbmQgdGhlIGluZGV4IGFuZCBpbm5lciBvZmZzZXQgY29ycmVzcG9uZGluZyB0byBhIGdpdmVuIHJlbGF0aXZlXG4vLyBwb3NpdGlvbiBpbiB0aGlzIGZyYWdtZW50LiBUaGUgcmVzdWx0IG9iamVjdCB3aWxsIGJlIHJldXNlZFxuLy8gKG92ZXJ3cml0dGVuKSB0aGUgbmV4dCB0aW1lIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQuIChOb3QgcHVibGljLilcbkZyYWdtZW50LnByb3RvdHlwZS5maW5kSW5kZXggPSBmdW5jdGlvbiBmaW5kSW5kZXggKHBvcywgcm91bmQpIHtcbiAgICBpZiAoIHJvdW5kID09PSB2b2lkIDAgKSByb3VuZCA9IC0xO1xuXG4gIGlmIChwb3MgPT0gMCkgeyByZXR1cm4gcmV0SW5kZXgoMCwgcG9zKSB9XG4gIGlmIChwb3MgPT0gdGhpcy5zaXplKSB7IHJldHVybiByZXRJbmRleCh0aGlzLmNvbnRlbnQubGVuZ3RoLCBwb3MpIH1cbiAgaWYgKHBvcyA+IHRoaXMuc2l6ZSB8fCBwb3MgPCAwKSB7IHRocm93IG5ldyBSYW5nZUVycm9yKChcIlBvc2l0aW9uIFwiICsgcG9zICsgXCIgb3V0c2lkZSBvZiBmcmFnbWVudCAoXCIgKyAodGhpcykgKyBcIilcIikpIH1cbiAgZm9yICh2YXIgaSA9IDAsIGN1clBvcyA9IDA7OyBpKyspIHtcbiAgICB2YXIgY3VyID0gdGhpcy5jaGlsZChpKSwgZW5kID0gY3VyUG9zICsgY3VyLm5vZGVTaXplO1xuICAgIGlmIChlbmQgPj0gcG9zKSB7XG4gICAgICBpZiAoZW5kID09IHBvcyB8fCByb3VuZCA+IDApIHsgcmV0dXJuIHJldEluZGV4KGkgKyAxLCBlbmQpIH1cbiAgICAgIHJldHVybiByZXRJbmRleChpLCBjdXJQb3MpXG4gICAgfVxuICAgIGN1clBvcyA9IGVuZDtcbiAgfVxufTtcblxuLy8gOjogKCkg4oaSIHN0cmluZ1xuLy8gUmV0dXJuIGEgZGVidWdnaW5nIHN0cmluZyB0aGF0IGRlc2NyaWJlcyB0aGlzIGZyYWdtZW50LlxuRnJhZ21lbnQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkgeyByZXR1cm4gXCI8XCIgKyB0aGlzLnRvU3RyaW5nSW5uZXIoKSArIFwiPlwiIH07XG5cbkZyYWdtZW50LnByb3RvdHlwZS50b1N0cmluZ0lubmVyID0gZnVuY3Rpb24gdG9TdHJpbmdJbm5lciAoKSB7IHJldHVybiB0aGlzLmNvbnRlbnQuam9pbihcIiwgXCIpIH07XG5cbi8vIDo6ICgpIOKGkiA/T2JqZWN0XG4vLyBDcmVhdGUgYSBKU09OLXNlcmlhbGl6ZWFibGUgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBmcmFnbWVudC5cbkZyYWdtZW50LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4gdGhpcy5jb250ZW50Lmxlbmd0aCA/IHRoaXMuY29udGVudC5tYXAoZnVuY3Rpb24gKG4pIHsgcmV0dXJuIG4udG9KU09OKCk7IH0pIDogbnVsbFxufTtcblxuLy8gOjogKFNjaGVtYSwgP09iamVjdCkg4oaSIEZyYWdtZW50XG4vLyBEZXNlcmlhbGl6ZSBhIGZyYWdtZW50IGZyb20gaXRzIEpTT04gcmVwcmVzZW50YXRpb24uXG5GcmFnbWVudC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OIChzY2hlbWEsIHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHsgcmV0dXJuIEZyYWdtZW50LmVtcHR5IH1cbiAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgaW5wdXQgZm9yIEZyYWdtZW50LmZyb21KU09OXCIpIH1cbiAgcmV0dXJuIG5ldyBGcmFnbWVudCh2YWx1ZS5tYXAoc2NoZW1hLm5vZGVGcm9tSlNPTikpXG59O1xuXG4vLyA6OiAoW05vZGVdKSDihpIgRnJhZ21lbnRcbi8vIEJ1aWxkIGEgZnJhZ21lbnQgZnJvbSBhbiBhcnJheSBvZiBub2Rlcy4gRW5zdXJlcyB0aGF0IGFkamFjZW50XG4vLyB0ZXh0IG5vZGVzIHdpdGggdGhlIHNhbWUgbWFya3MgYXJlIGpvaW5lZCB0b2dldGhlci5cbkZyYWdtZW50LmZyb21BcnJheSA9IGZ1bmN0aW9uIGZyb21BcnJheSAoYXJyYXkpIHtcbiAgaWYgKCFhcnJheS5sZW5ndGgpIHsgcmV0dXJuIEZyYWdtZW50LmVtcHR5IH1cbiAgdmFyIGpvaW5lZCwgc2l6ZSA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbm9kZSA9IGFycmF5W2ldO1xuICAgIHNpemUgKz0gbm9kZS5ub2RlU2l6ZTtcbiAgICBpZiAoaSAmJiBub2RlLmlzVGV4dCAmJiBhcnJheVtpIC0gMV0uc2FtZU1hcmt1cChub2RlKSkge1xuICAgICAgaWYgKCFqb2luZWQpIHsgam9pbmVkID0gYXJyYXkuc2xpY2UoMCwgaSk7IH1cbiAgICAgIGpvaW5lZFtqb2luZWQubGVuZ3RoIC0gMV0gPSBub2RlLndpdGhUZXh0KGpvaW5lZFtqb2luZWQubGVuZ3RoIC0gMV0udGV4dCArIG5vZGUudGV4dCk7XG4gICAgfSBlbHNlIGlmIChqb2luZWQpIHtcbiAgICAgIGpvaW5lZC5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IEZyYWdtZW50KGpvaW5lZCB8fCBhcnJheSwgc2l6ZSlcbn07XG5cbi8vIDo6ICg/dW5pb248RnJhZ21lbnQsIE5vZGUsIFtOb2RlXT4pIOKGkiBGcmFnbWVudFxuLy8gQ3JlYXRlIGEgZnJhZ21lbnQgZnJvbSBzb21ldGhpbmcgdGhhdCBjYW4gYmUgaW50ZXJwcmV0ZWQgYXMgYSBzZXRcbi8vIG9mIG5vZGVzLiBGb3IgYG51bGxgLCBpdCByZXR1cm5zIHRoZSBlbXB0eSBmcmFnbWVudC4gRm9yIGFcbi8vIGZyYWdtZW50LCB0aGUgZnJhZ21lbnQgaXRzZWxmLiBGb3IgYSBub2RlIG9yIGFycmF5IG9mIG5vZGVzLCBhXG4vLyBmcmFnbWVudCBjb250YWluaW5nIHRob3NlIG5vZGVzLlxuRnJhZ21lbnQuZnJvbSA9IGZ1bmN0aW9uIGZyb20gKG5vZGVzKSB7XG4gIGlmICghbm9kZXMpIHsgcmV0dXJuIEZyYWdtZW50LmVtcHR5IH1cbiAgaWYgKG5vZGVzIGluc3RhbmNlb2YgRnJhZ21lbnQpIHsgcmV0dXJuIG5vZGVzIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkobm9kZXMpKSB7IHJldHVybiB0aGlzLmZyb21BcnJheShub2RlcykgfVxuICBpZiAobm9kZXMuYXR0cnMpIHsgcmV0dXJuIG5ldyBGcmFnbWVudChbbm9kZXNdLCBub2Rlcy5ub2RlU2l6ZSkgfVxuICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkNhbiBub3QgY29udmVydCBcIiArIG5vZGVzICsgXCIgdG8gYSBGcmFnbWVudFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgKG5vZGVzLm5vZGVzQmV0d2VlbiA/IFwiIChsb29rcyBsaWtlIG11bHRpcGxlIHZlcnNpb25zIG9mIHByb3NlbWlycm9yLW1vZGVsIHdlcmUgbG9hZGVkKVwiIDogXCJcIikpXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggRnJhZ21lbnQucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxudmFyIGZvdW5kID0ge2luZGV4OiAwLCBvZmZzZXQ6IDB9O1xuZnVuY3Rpb24gcmV0SW5kZXgoaW5kZXgsIG9mZnNldCkge1xuICBmb3VuZC5pbmRleCA9IGluZGV4O1xuICBmb3VuZC5vZmZzZXQgPSBvZmZzZXQ7XG4gIHJldHVybiBmb3VuZFxufVxuXG4vLyA6OiBGcmFnbWVudFxuLy8gQW4gZW1wdHkgZnJhZ21lbnQuIEludGVuZGVkIHRvIGJlIHJldXNlZCB3aGVuZXZlciBhIG5vZGUgZG9lc24ndFxuLy8gY29udGFpbiBhbnl0aGluZyAocmF0aGVyIHRoYW4gYWxsb2NhdGluZyBhIG5ldyBlbXB0eSBmcmFnbWVudCBmb3Jcbi8vIGVhY2ggbGVhZiBub2RlKS5cbkZyYWdtZW50LmVtcHR5ID0gbmV3IEZyYWdtZW50KFtdLCAwKTtcblxuZnVuY3Rpb24gY29tcGFyZURlZXAoYSwgYikge1xuICBpZiAoYSA9PT0gYikgeyByZXR1cm4gdHJ1ZSB9XG4gIGlmICghKGEgJiYgdHlwZW9mIGEgPT0gXCJvYmplY3RcIikgfHxcbiAgICAgICEoYiAmJiB0eXBlb2YgYiA9PSBcIm9iamVjdFwiKSkgeyByZXR1cm4gZmFsc2UgfVxuICB2YXIgYXJyYXkgPSBBcnJheS5pc0FycmF5KGEpO1xuICBpZiAoQXJyYXkuaXNBcnJheShiKSAhPSBhcnJheSkgeyByZXR1cm4gZmFsc2UgfVxuICBpZiAoYXJyYXkpIHtcbiAgICBpZiAoYS5sZW5ndGggIT0gYi5sZW5ndGgpIHsgcmV0dXJuIGZhbHNlIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHsgaWYgKCFjb21wYXJlRGVlcChhW2ldLCBiW2ldKSkgeyByZXR1cm4gZmFsc2UgfSB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgcCBpbiBhKSB7IGlmICghKHAgaW4gYikgfHwgIWNvbXBhcmVEZWVwKGFbcF0sIGJbcF0pKSB7IHJldHVybiBmYWxzZSB9IH1cbiAgICBmb3IgKHZhciBwJDEgaW4gYikgeyBpZiAoIShwJDEgaW4gYSkpIHsgcmV0dXJuIGZhbHNlIH0gfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbi8vIDo6LSBBIG1hcmsgaXMgYSBwaWVjZSBvZiBpbmZvcm1hdGlvbiB0aGF0IGNhbiBiZSBhdHRhY2hlZCB0byBhIG5vZGUsXG4vLyBzdWNoIGFzIGl0IGJlaW5nIGVtcGhhc2l6ZWQsIGluIGNvZGUgZm9udCwgb3IgYSBsaW5rLiBJdCBoYXMgYSB0eXBlXG4vLyBhbmQgb3B0aW9uYWxseSBhIHNldCBvZiBhdHRyaWJ1dGVzIHRoYXQgcHJvdmlkZSBmdXJ0aGVyIGluZm9ybWF0aW9uXG4vLyAoc3VjaCBhcyB0aGUgdGFyZ2V0IG9mIHRoZSBsaW5rKS4gTWFya3MgYXJlIGNyZWF0ZWQgdGhyb3VnaCBhXG4vLyBgU2NoZW1hYCwgd2hpY2ggY29udHJvbHMgd2hpY2ggdHlwZXMgZXhpc3QgYW5kIHdoaWNoXG4vLyBhdHRyaWJ1dGVzIHRoZXkgaGF2ZS5cbnZhciBNYXJrID0gZnVuY3Rpb24gTWFyayh0eXBlLCBhdHRycykge1xuICAvLyA6OiBNYXJrVHlwZVxuICAvLyBUaGUgdHlwZSBvZiB0aGlzIG1hcmsuXG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIC8vIDo6IE9iamVjdFxuICAvLyBUaGUgYXR0cmlidXRlcyBhc3NvY2lhdGVkIHdpdGggdGhpcyBtYXJrLlxuICB0aGlzLmF0dHJzID0gYXR0cnM7XG59O1xuXG4vLyA6OiAoW01hcmtdKSDihpIgW01hcmtdXG4vLyBHaXZlbiBhIHNldCBvZiBtYXJrcywgY3JlYXRlIGEgbmV3IHNldCB3aGljaCBjb250YWlucyB0aGlzIG9uZSBhc1xuLy8gd2VsbCwgaW4gdGhlIHJpZ2h0IHBvc2l0aW9uLiBJZiB0aGlzIG1hcmsgaXMgYWxyZWFkeSBpbiB0aGUgc2V0LFxuLy8gdGhlIHNldCBpdHNlbGYgaXMgcmV0dXJuZWQuIElmIGFueSBtYXJrcyB0aGF0IGFyZSBzZXQgdG8gYmVcbi8vIFtleGNsdXNpdmVdKCNtb2RlbC5NYXJrU3BlYy5leGNsdWRlcykgd2l0aCB0aGlzIG1hcmsgYXJlIHByZXNlbnQsXG4vLyB0aG9zZSBhcmUgcmVwbGFjZWQgYnkgdGhpcyBvbmUuXG5NYXJrLnByb3RvdHlwZS5hZGRUb1NldCA9IGZ1bmN0aW9uIGFkZFRvU2V0IChzZXQpIHtcbiAgdmFyIGNvcHksIHBsYWNlZCA9IGZhbHNlO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHNldC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBvdGhlciA9IHNldFtpXTtcbiAgICBpZiAodGhpcy5lcShvdGhlcikpIHsgcmV0dXJuIHNldCB9XG4gICAgaWYgKHRoaXMudHlwZS5leGNsdWRlcyhvdGhlci50eXBlKSkge1xuICAgICAgaWYgKCFjb3B5KSB7IGNvcHkgPSBzZXQuc2xpY2UoMCwgaSk7IH1cbiAgICB9IGVsc2UgaWYgKG90aGVyLnR5cGUuZXhjbHVkZXModGhpcy50eXBlKSkge1xuICAgICAgcmV0dXJuIHNldFxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXBsYWNlZCAmJiBvdGhlci50eXBlLnJhbmsgPiB0aGlzLnR5cGUucmFuaykge1xuICAgICAgICBpZiAoIWNvcHkpIHsgY29weSA9IHNldC5zbGljZSgwLCBpKTsgfVxuICAgICAgICBjb3B5LnB1c2godGhpcyk7XG4gICAgICAgIHBsYWNlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoY29weSkgeyBjb3B5LnB1c2gob3RoZXIpOyB9XG4gICAgfVxuICB9XG4gIGlmICghY29weSkgeyBjb3B5ID0gc2V0LnNsaWNlKCk7IH1cbiAgaWYgKCFwbGFjZWQpIHsgY29weS5wdXNoKHRoaXMpOyB9XG4gIHJldHVybiBjb3B5XG59O1xuXG4vLyA6OiAoW01hcmtdKSDihpIgW01hcmtdXG4vLyBSZW1vdmUgdGhpcyBtYXJrIGZyb20gdGhlIGdpdmVuIHNldCwgcmV0dXJuaW5nIGEgbmV3IHNldC4gSWYgdGhpc1xuLy8gbWFyayBpcyBub3QgaW4gdGhlIHNldCwgdGhlIHNldCBpdHNlbGYgaXMgcmV0dXJuZWQuXG5NYXJrLnByb3RvdHlwZS5yZW1vdmVGcm9tU2V0ID0gZnVuY3Rpb24gcmVtb3ZlRnJvbVNldCAoc2V0KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2V0Lmxlbmd0aDsgaSsrKVxuICAgIHsgaWYgKHRoaXMuZXEoc2V0W2ldKSlcbiAgICAgIHsgcmV0dXJuIHNldC5zbGljZSgwLCBpKS5jb25jYXQoc2V0LnNsaWNlKGkgKyAxKSkgfSB9XG4gIHJldHVybiBzZXRcbn07XG5cbi8vIDo6IChbTWFya10pIOKGkiBib29sXG4vLyBUZXN0IHdoZXRoZXIgdGhpcyBtYXJrIGlzIGluIHRoZSBnaXZlbiBzZXQgb2YgbWFya3MuXG5NYXJrLnByb3RvdHlwZS5pc0luU2V0ID0gZnVuY3Rpb24gaXNJblNldCAoc2V0KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2V0Lmxlbmd0aDsgaSsrKVxuICAgIHsgaWYgKHRoaXMuZXEoc2V0W2ldKSkgeyByZXR1cm4gdHJ1ZSB9IH1cbiAgcmV0dXJuIGZhbHNlXG59O1xuXG4vLyA6OiAoTWFyaykg4oaSIGJvb2xcbi8vIFRlc3Qgd2hldGhlciB0aGlzIG1hcmsgaGFzIHRoZSBzYW1lIHR5cGUgYW5kIGF0dHJpYnV0ZXMgYXNcbi8vIGFub3RoZXIgbWFyay5cbk1hcmsucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG90aGVyKSB7XG4gIHJldHVybiB0aGlzID09IG90aGVyIHx8XG4gICAgKHRoaXMudHlwZSA9PSBvdGhlci50eXBlICYmIGNvbXBhcmVEZWVwKHRoaXMuYXR0cnMsIG90aGVyLmF0dHJzKSlcbn07XG5cbi8vIDo6ICgpIOKGkiBPYmplY3Rcbi8vIENvbnZlcnQgdGhpcyBtYXJrIHRvIGEgSlNPTi1zZXJpYWxpemVhYmxlIHJlcHJlc2VudGF0aW9uLlxuTWFyay5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgdmFyIG9iaiA9IHt0eXBlOiB0aGlzLnR5cGUubmFtZX07XG4gIGZvciAodmFyIF8gaW4gdGhpcy5hdHRycykge1xuICAgIG9iai5hdHRycyA9IHRoaXMuYXR0cnM7XG4gICAgYnJlYWtcbiAgfVxuICByZXR1cm4gb2JqXG59O1xuXG4vLyA6OiAoU2NoZW1hLCBPYmplY3QpIOKGkiBNYXJrXG5NYXJrLmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04gKHNjaGVtYSwganNvbikge1xuICBpZiAoIWpzb24pIHsgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBNYXJrLmZyb21KU09OXCIpIH1cbiAgdmFyIHR5cGUgPSBzY2hlbWEubWFya3NbanNvbi50eXBlXTtcbiAgaWYgKCF0eXBlKSB7IHRocm93IG5ldyBSYW5nZUVycm9yKChcIlRoZXJlIGlzIG5vIG1hcmsgdHlwZSBcIiArIChqc29uLnR5cGUpICsgXCIgaW4gdGhpcyBzY2hlbWFcIikpIH1cbiAgcmV0dXJuIHR5cGUuY3JlYXRlKGpzb24uYXR0cnMpXG59O1xuXG4vLyA6OiAoW01hcmtdLCBbTWFya10pIOKGkiBib29sXG4vLyBUZXN0IHdoZXRoZXIgdHdvIHNldHMgb2YgbWFya3MgYXJlIGlkZW50aWNhbC5cbk1hcmsuc2FtZVNldCA9IGZ1bmN0aW9uIHNhbWVTZXQgKGEsIGIpIHtcbiAgaWYgKGEgPT0gYikgeyByZXR1cm4gdHJ1ZSB9XG4gIGlmIChhLmxlbmd0aCAhPSBiLmxlbmd0aCkgeyByZXR1cm4gZmFsc2UgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspXG4gICAgeyBpZiAoIWFbaV0uZXEoYltpXSkpIHsgcmV0dXJuIGZhbHNlIH0gfVxuICByZXR1cm4gdHJ1ZVxufTtcblxuLy8gOjogKD91bmlvbjxNYXJrLCBbTWFya10+KSDihpIgW01hcmtdXG4vLyBDcmVhdGUgYSBwcm9wZXJseSBzb3J0ZWQgbWFyayBzZXQgZnJvbSBudWxsLCBhIHNpbmdsZSBtYXJrLCBvciBhblxuLy8gdW5zb3J0ZWQgYXJyYXkgb2YgbWFya3MuXG5NYXJrLnNldEZyb20gPSBmdW5jdGlvbiBzZXRGcm9tIChtYXJrcykge1xuICBpZiAoIW1hcmtzIHx8IG1hcmtzLmxlbmd0aCA9PSAwKSB7IHJldHVybiBNYXJrLm5vbmUgfVxuICBpZiAobWFya3MgaW5zdGFuY2VvZiBNYXJrKSB7IHJldHVybiBbbWFya3NdIH1cbiAgdmFyIGNvcHkgPSBtYXJrcy5zbGljZSgpO1xuICBjb3B5LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEudHlwZS5yYW5rIC0gYi50eXBlLnJhbms7IH0pO1xuICByZXR1cm4gY29weVxufTtcblxuLy8gOjogW01hcmtdIFRoZSBlbXB0eSBzZXQgb2YgbWFya3MuXG5NYXJrLm5vbmUgPSBbXTtcblxuLy8gUmVwbGFjZUVycm9yOjogY2xhc3MgZXh0ZW5kcyBFcnJvclxuLy8gRXJyb3IgdHlwZSByYWlzZWQgYnkgW2BOb2RlLnJlcGxhY2VgXSgjbW9kZWwuTm9kZS5yZXBsYWNlKSB3aGVuXG4vLyBnaXZlbiBhbiBpbnZhbGlkIHJlcGxhY2VtZW50LlxuXG5mdW5jdGlvbiBSZXBsYWNlRXJyb3IobWVzc2FnZSkge1xuICB2YXIgZXJyID0gRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcbiAgZXJyLl9fcHJvdG9fXyA9IFJlcGxhY2VFcnJvci5wcm90b3R5cGU7XG4gIHJldHVybiBlcnJcbn1cblxuUmVwbGFjZUVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcblJlcGxhY2VFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZXBsYWNlRXJyb3I7XG5SZXBsYWNlRXJyb3IucHJvdG90eXBlLm5hbWUgPSBcIlJlcGxhY2VFcnJvclwiO1xuXG4vLyA6Oi0gQSBzbGljZSByZXByZXNlbnRzIGEgcGllY2UgY3V0IG91dCBvZiBhIGxhcmdlciBkb2N1bWVudC4gSXRcbi8vIHN0b3JlcyBub3Qgb25seSBhIGZyYWdtZW50LCBidXQgYWxzbyB0aGUgZGVwdGggdXAgdG8gd2hpY2ggbm9kZXMgb25cbi8vIGJvdGggc2lkZSBhcmUg4oCYb3BlbuKAmSAoY3V0IHRocm91Z2gpLlxudmFyIFNsaWNlID0gZnVuY3Rpb24gU2xpY2UoY29udGVudCwgb3BlblN0YXJ0LCBvcGVuRW5kKSB7XG4gIC8vIDo6IEZyYWdtZW50IFRoZSBzbGljZSdzIGNvbnRlbnQuXG4gIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG4gIC8vIDo6IG51bWJlciBUaGUgb3BlbiBkZXB0aCBhdCB0aGUgc3RhcnQuXG4gIHRoaXMub3BlblN0YXJ0ID0gb3BlblN0YXJ0O1xuICAvLyA6OiBudW1iZXIgVGhlIG9wZW4gZGVwdGggYXQgdGhlIGVuZC5cbiAgdGhpcy5vcGVuRW5kID0gb3BlbkVuZDtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMSA9IHsgc2l6ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyA6OiBudW1iZXJcbi8vIFRoZSBzaXplIHRoaXMgc2xpY2Ugd291bGQgYWRkIHdoZW4gaW5zZXJ0ZWQgaW50byBhIGRvY3VtZW50LlxucHJvdG90eXBlQWNjZXNzb3JzJDEuc2l6ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmNvbnRlbnQuc2l6ZSAtIHRoaXMub3BlblN0YXJ0IC0gdGhpcy5vcGVuRW5kXG59O1xuXG5TbGljZS5wcm90b3R5cGUuaW5zZXJ0QXQgPSBmdW5jdGlvbiBpbnNlcnRBdCAocG9zLCBmcmFnbWVudCkge1xuICB2YXIgY29udGVudCA9IGluc2VydEludG8odGhpcy5jb250ZW50LCBwb3MgKyB0aGlzLm9wZW5TdGFydCwgZnJhZ21lbnQsIG51bGwpO1xuICByZXR1cm4gY29udGVudCAmJiBuZXcgU2xpY2UoY29udGVudCwgdGhpcy5vcGVuU3RhcnQsIHRoaXMub3BlbkVuZClcbn07XG5cblNsaWNlLnByb3RvdHlwZS5yZW1vdmVCZXR3ZWVuID0gZnVuY3Rpb24gcmVtb3ZlQmV0d2VlbiAoZnJvbSwgdG8pIHtcbiAgcmV0dXJuIG5ldyBTbGljZShyZW1vdmVSYW5nZSh0aGlzLmNvbnRlbnQsIGZyb20gKyB0aGlzLm9wZW5TdGFydCwgdG8gKyB0aGlzLm9wZW5TdGFydCksIHRoaXMub3BlblN0YXJ0LCB0aGlzLm9wZW5FbmQpXG59O1xuXG4vLyA6OiAoU2xpY2UpIOKGkiBib29sXG4vLyBUZXN0cyB3aGV0aGVyIHRoaXMgc2xpY2UgaXMgZXF1YWwgdG8gYW5vdGhlciBzbGljZS5cblNsaWNlLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChvdGhlcikge1xuICByZXR1cm4gdGhpcy5jb250ZW50LmVxKG90aGVyLmNvbnRlbnQpICYmIHRoaXMub3BlblN0YXJ0ID09IG90aGVyLm9wZW5TdGFydCAmJiB0aGlzLm9wZW5FbmQgPT0gb3RoZXIub3BlbkVuZFxufTtcblxuU2xpY2UucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICByZXR1cm4gdGhpcy5jb250ZW50ICsgXCIoXCIgKyB0aGlzLm9wZW5TdGFydCArIFwiLFwiICsgdGhpcy5vcGVuRW5kICsgXCIpXCJcbn07XG5cbi8vIDo6ICgpIOKGkiA/T2JqZWN0XG4vLyBDb252ZXJ0IGEgc2xpY2UgdG8gYSBKU09OLXNlcmlhbGl6YWJsZSByZXByZXNlbnRhdGlvbi5cblNsaWNlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICBpZiAoIXRoaXMuY29udGVudC5zaXplKSB7IHJldHVybiBudWxsIH1cbiAgdmFyIGpzb24gPSB7Y29udGVudDogdGhpcy5jb250ZW50LnRvSlNPTigpfTtcbiAgaWYgKHRoaXMub3BlblN0YXJ0ID4gMCkgeyBqc29uLm9wZW5TdGFydCA9IHRoaXMub3BlblN0YXJ0OyB9XG4gIGlmICh0aGlzLm9wZW5FbmQgPiAwKSB7IGpzb24ub3BlbkVuZCA9IHRoaXMub3BlbkVuZDsgfVxuICByZXR1cm4ganNvblxufTtcblxuLy8gOjogKFNjaGVtYSwgP09iamVjdCkg4oaSIFNsaWNlXG4vLyBEZXNlcmlhbGl6ZSBhIHNsaWNlIGZyb20gaXRzIEpTT04gcmVwcmVzZW50YXRpb24uXG5TbGljZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OIChzY2hlbWEsIGpzb24pIHtcbiAgaWYgKCFqc29uKSB7IHJldHVybiBTbGljZS5lbXB0eSB9XG4gIHZhciBvcGVuU3RhcnQgPSBqc29uLm9wZW5TdGFydCB8fCAwLCBvcGVuRW5kID0ganNvbi5vcGVuRW5kIHx8IDA7XG4gIGlmICh0eXBlb2Ygb3BlblN0YXJ0ICE9IFwibnVtYmVyXCIgfHwgdHlwZW9mIG9wZW5FbmQgIT0gXCJudW1iZXJcIilcbiAgICB7IHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgU2xpY2UuZnJvbUpTT05cIikgfVxuICByZXR1cm4gbmV3IFNsaWNlKEZyYWdtZW50LmZyb21KU09OKHNjaGVtYSwganNvbi5jb250ZW50KSwgb3BlblN0YXJ0LCBvcGVuRW5kKVxufTtcblxuLy8gOjogKEZyYWdtZW50LCA/Ym9vbCkg4oaSIFNsaWNlXG4vLyBDcmVhdGUgYSBzbGljZSBmcm9tIGEgZnJhZ21lbnQgYnkgdGFraW5nIHRoZSBtYXhpbXVtIHBvc3NpYmxlXG4vLyBvcGVuIHZhbHVlIG9uIGJvdGggc2lkZSBvZiB0aGUgZnJhZ21lbnQuXG5TbGljZS5tYXhPcGVuID0gZnVuY3Rpb24gbWF4T3BlbiAoZnJhZ21lbnQsIG9wZW5Jc29sYXRpbmcpIHtcbiAgICBpZiAoIG9wZW5Jc29sYXRpbmcgPT09IHZvaWQgMCApIG9wZW5Jc29sYXRpbmc9dHJ1ZTtcblxuICB2YXIgb3BlblN0YXJ0ID0gMCwgb3BlbkVuZCA9IDA7XG4gIGZvciAodmFyIG4gPSBmcmFnbWVudC5maXJzdENoaWxkOyBuICYmICFuLmlzTGVhZiAmJiAob3Blbklzb2xhdGluZyB8fCAhbi50eXBlLnNwZWMuaXNvbGF0aW5nKTsgbiA9IG4uZmlyc3RDaGlsZCkgeyBvcGVuU3RhcnQrKzsgfVxuICBmb3IgKHZhciBuJDEgPSBmcmFnbWVudC5sYXN0Q2hpbGQ7IG4kMSAmJiAhbiQxLmlzTGVhZiAmJiAob3Blbklzb2xhdGluZyB8fCAhbiQxLnR5cGUuc3BlYy5pc29sYXRpbmcpOyBuJDEgPSBuJDEubGFzdENoaWxkKSB7IG9wZW5FbmQrKzsgfVxuICByZXR1cm4gbmV3IFNsaWNlKGZyYWdtZW50LCBvcGVuU3RhcnQsIG9wZW5FbmQpXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggU2xpY2UucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMSApO1xuXG5mdW5jdGlvbiByZW1vdmVSYW5nZShjb250ZW50LCBmcm9tLCB0bykge1xuICB2YXIgcmVmID0gY29udGVudC5maW5kSW5kZXgoZnJvbSk7XG4gIHZhciBpbmRleCA9IHJlZi5pbmRleDtcbiAgdmFyIG9mZnNldCA9IHJlZi5vZmZzZXQ7XG4gIHZhciBjaGlsZCA9IGNvbnRlbnQubWF5YmVDaGlsZChpbmRleCk7XG4gIHZhciByZWYkMSA9IGNvbnRlbnQuZmluZEluZGV4KHRvKTtcbiAgdmFyIGluZGV4VG8gPSByZWYkMS5pbmRleDtcbiAgdmFyIG9mZnNldFRvID0gcmVmJDEub2Zmc2V0O1xuICBpZiAob2Zmc2V0ID09IGZyb20gfHwgY2hpbGQuaXNUZXh0KSB7XG4gICAgaWYgKG9mZnNldFRvICE9IHRvICYmICFjb250ZW50LmNoaWxkKGluZGV4VG8pLmlzVGV4dCkgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlJlbW92aW5nIG5vbi1mbGF0IHJhbmdlXCIpIH1cbiAgICByZXR1cm4gY29udGVudC5jdXQoMCwgZnJvbSkuYXBwZW5kKGNvbnRlbnQuY3V0KHRvKSlcbiAgfVxuICBpZiAoaW5kZXggIT0gaW5kZXhUbykgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlJlbW92aW5nIG5vbi1mbGF0IHJhbmdlXCIpIH1cbiAgcmV0dXJuIGNvbnRlbnQucmVwbGFjZUNoaWxkKGluZGV4LCBjaGlsZC5jb3B5KHJlbW92ZVJhbmdlKGNoaWxkLmNvbnRlbnQsIGZyb20gLSBvZmZzZXQgLSAxLCB0byAtIG9mZnNldCAtIDEpKSlcbn1cblxuZnVuY3Rpb24gaW5zZXJ0SW50byhjb250ZW50LCBkaXN0LCBpbnNlcnQsIHBhcmVudCkge1xuICB2YXIgcmVmID0gY29udGVudC5maW5kSW5kZXgoZGlzdCk7XG4gIHZhciBpbmRleCA9IHJlZi5pbmRleDtcbiAgdmFyIG9mZnNldCA9IHJlZi5vZmZzZXQ7XG4gIHZhciBjaGlsZCA9IGNvbnRlbnQubWF5YmVDaGlsZChpbmRleCk7XG4gIGlmIChvZmZzZXQgPT0gZGlzdCB8fCBjaGlsZC5pc1RleHQpIHtcbiAgICBpZiAocGFyZW50ICYmICFwYXJlbnQuY2FuUmVwbGFjZShpbmRleCwgaW5kZXgsIGluc2VydCkpIHsgcmV0dXJuIG51bGwgfVxuICAgIHJldHVybiBjb250ZW50LmN1dCgwLCBkaXN0KS5hcHBlbmQoaW5zZXJ0KS5hcHBlbmQoY29udGVudC5jdXQoZGlzdCkpXG4gIH1cbiAgdmFyIGlubmVyID0gaW5zZXJ0SW50byhjaGlsZC5jb250ZW50LCBkaXN0IC0gb2Zmc2V0IC0gMSwgaW5zZXJ0KTtcbiAgcmV0dXJuIGlubmVyICYmIGNvbnRlbnQucmVwbGFjZUNoaWxkKGluZGV4LCBjaGlsZC5jb3B5KGlubmVyKSlcbn1cblxuLy8gOjogU2xpY2Vcbi8vIFRoZSBlbXB0eSBzbGljZS5cblNsaWNlLmVtcHR5ID0gbmV3IFNsaWNlKEZyYWdtZW50LmVtcHR5LCAwLCAwKTtcblxuZnVuY3Rpb24gcmVwbGFjZSgkZnJvbSwgJHRvLCBzbGljZSkge1xuICBpZiAoc2xpY2Uub3BlblN0YXJ0ID4gJGZyb20uZGVwdGgpXG4gICAgeyB0aHJvdyBuZXcgUmVwbGFjZUVycm9yKFwiSW5zZXJ0ZWQgY29udGVudCBkZWVwZXIgdGhhbiBpbnNlcnRpb24gcG9zaXRpb25cIikgfVxuICBpZiAoJGZyb20uZGVwdGggLSBzbGljZS5vcGVuU3RhcnQgIT0gJHRvLmRlcHRoIC0gc2xpY2Uub3BlbkVuZClcbiAgICB7IHRocm93IG5ldyBSZXBsYWNlRXJyb3IoXCJJbmNvbnNpc3RlbnQgb3BlbiBkZXB0aHNcIikgfVxuICByZXR1cm4gcmVwbGFjZU91dGVyKCRmcm9tLCAkdG8sIHNsaWNlLCAwKVxufVxuXG5mdW5jdGlvbiByZXBsYWNlT3V0ZXIoJGZyb20sICR0bywgc2xpY2UsIGRlcHRoKSB7XG4gIHZhciBpbmRleCA9ICRmcm9tLmluZGV4KGRlcHRoKSwgbm9kZSA9ICRmcm9tLm5vZGUoZGVwdGgpO1xuICBpZiAoaW5kZXggPT0gJHRvLmluZGV4KGRlcHRoKSAmJiBkZXB0aCA8ICRmcm9tLmRlcHRoIC0gc2xpY2Uub3BlblN0YXJ0KSB7XG4gICAgdmFyIGlubmVyID0gcmVwbGFjZU91dGVyKCRmcm9tLCAkdG8sIHNsaWNlLCBkZXB0aCArIDEpO1xuICAgIHJldHVybiBub2RlLmNvcHkobm9kZS5jb250ZW50LnJlcGxhY2VDaGlsZChpbmRleCwgaW5uZXIpKVxuICB9IGVsc2UgaWYgKCFzbGljZS5jb250ZW50LnNpemUpIHtcbiAgICByZXR1cm4gY2xvc2Uobm9kZSwgcmVwbGFjZVR3b1dheSgkZnJvbSwgJHRvLCBkZXB0aCkpXG4gIH0gZWxzZSBpZiAoIXNsaWNlLm9wZW5TdGFydCAmJiAhc2xpY2Uub3BlbkVuZCAmJiAkZnJvbS5kZXB0aCA9PSBkZXB0aCAmJiAkdG8uZGVwdGggPT0gZGVwdGgpIHsgLy8gU2ltcGxlLCBmbGF0IGNhc2VcbiAgICB2YXIgcGFyZW50ID0gJGZyb20ucGFyZW50LCBjb250ZW50ID0gcGFyZW50LmNvbnRlbnQ7XG4gICAgcmV0dXJuIGNsb3NlKHBhcmVudCwgY29udGVudC5jdXQoMCwgJGZyb20ucGFyZW50T2Zmc2V0KS5hcHBlbmQoc2xpY2UuY29udGVudCkuYXBwZW5kKGNvbnRlbnQuY3V0KCR0by5wYXJlbnRPZmZzZXQpKSlcbiAgfSBlbHNlIHtcbiAgICB2YXIgcmVmID0gcHJlcGFyZVNsaWNlRm9yUmVwbGFjZShzbGljZSwgJGZyb20pO1xuICAgIHZhciBzdGFydCA9IHJlZi5zdGFydDtcbiAgICB2YXIgZW5kID0gcmVmLmVuZDtcbiAgICByZXR1cm4gY2xvc2Uobm9kZSwgcmVwbGFjZVRocmVlV2F5KCRmcm9tLCBzdGFydCwgZW5kLCAkdG8sIGRlcHRoKSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0pvaW4obWFpbiwgc3ViKSB7XG4gIGlmICghc3ViLnR5cGUuY29tcGF0aWJsZUNvbnRlbnQobWFpbi50eXBlKSlcbiAgICB7IHRocm93IG5ldyBSZXBsYWNlRXJyb3IoXCJDYW5ub3Qgam9pbiBcIiArIHN1Yi50eXBlLm5hbWUgKyBcIiBvbnRvIFwiICsgbWFpbi50eXBlLm5hbWUpIH1cbn1cblxuZnVuY3Rpb24gam9pbmFibGUoJGJlZm9yZSwgJGFmdGVyLCBkZXB0aCkge1xuICB2YXIgbm9kZSA9ICRiZWZvcmUubm9kZShkZXB0aCk7XG4gIGNoZWNrSm9pbihub2RlLCAkYWZ0ZXIubm9kZShkZXB0aCkpO1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiBhZGROb2RlKGNoaWxkLCB0YXJnZXQpIHtcbiAgdmFyIGxhc3QgPSB0YXJnZXQubGVuZ3RoIC0gMTtcbiAgaWYgKGxhc3QgPj0gMCAmJiBjaGlsZC5pc1RleHQgJiYgY2hpbGQuc2FtZU1hcmt1cCh0YXJnZXRbbGFzdF0pKVxuICAgIHsgdGFyZ2V0W2xhc3RdID0gY2hpbGQud2l0aFRleHQodGFyZ2V0W2xhc3RdLnRleHQgKyBjaGlsZC50ZXh0KTsgfVxuICBlbHNlXG4gICAgeyB0YXJnZXQucHVzaChjaGlsZCk7IH1cbn1cblxuZnVuY3Rpb24gYWRkUmFuZ2UoJHN0YXJ0LCAkZW5kLCBkZXB0aCwgdGFyZ2V0KSB7XG4gIHZhciBub2RlID0gKCRlbmQgfHwgJHN0YXJ0KS5ub2RlKGRlcHRoKTtcbiAgdmFyIHN0YXJ0SW5kZXggPSAwLCBlbmRJbmRleCA9ICRlbmQgPyAkZW5kLmluZGV4KGRlcHRoKSA6IG5vZGUuY2hpbGRDb3VudDtcbiAgaWYgKCRzdGFydCkge1xuICAgIHN0YXJ0SW5kZXggPSAkc3RhcnQuaW5kZXgoZGVwdGgpO1xuICAgIGlmICgkc3RhcnQuZGVwdGggPiBkZXB0aCkge1xuICAgICAgc3RhcnRJbmRleCsrO1xuICAgIH0gZWxzZSBpZiAoJHN0YXJ0LnRleHRPZmZzZXQpIHtcbiAgICAgIGFkZE5vZGUoJHN0YXJ0Lm5vZGVBZnRlciwgdGFyZ2V0KTtcbiAgICAgIHN0YXJ0SW5kZXgrKztcbiAgICB9XG4gIH1cbiAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCBlbmRJbmRleDsgaSsrKSB7IGFkZE5vZGUobm9kZS5jaGlsZChpKSwgdGFyZ2V0KTsgfVxuICBpZiAoJGVuZCAmJiAkZW5kLmRlcHRoID09IGRlcHRoICYmICRlbmQudGV4dE9mZnNldClcbiAgICB7IGFkZE5vZGUoJGVuZC5ub2RlQmVmb3JlLCB0YXJnZXQpOyB9XG59XG5cbmZ1bmN0aW9uIGNsb3NlKG5vZGUsIGNvbnRlbnQpIHtcbiAgaWYgKCFub2RlLnR5cGUudmFsaWRDb250ZW50KGNvbnRlbnQpKVxuICAgIHsgdGhyb3cgbmV3IFJlcGxhY2VFcnJvcihcIkludmFsaWQgY29udGVudCBmb3Igbm9kZSBcIiArIG5vZGUudHlwZS5uYW1lKSB9XG4gIHJldHVybiBub2RlLmNvcHkoY29udGVudClcbn1cblxuZnVuY3Rpb24gcmVwbGFjZVRocmVlV2F5KCRmcm9tLCAkc3RhcnQsICRlbmQsICR0bywgZGVwdGgpIHtcbiAgdmFyIG9wZW5TdGFydCA9ICRmcm9tLmRlcHRoID4gZGVwdGggJiYgam9pbmFibGUoJGZyb20sICRzdGFydCwgZGVwdGggKyAxKTtcbiAgdmFyIG9wZW5FbmQgPSAkdG8uZGVwdGggPiBkZXB0aCAmJiBqb2luYWJsZSgkZW5kLCAkdG8sIGRlcHRoICsgMSk7XG5cbiAgdmFyIGNvbnRlbnQgPSBbXTtcbiAgYWRkUmFuZ2UobnVsbCwgJGZyb20sIGRlcHRoLCBjb250ZW50KTtcbiAgaWYgKG9wZW5TdGFydCAmJiBvcGVuRW5kICYmICRzdGFydC5pbmRleChkZXB0aCkgPT0gJGVuZC5pbmRleChkZXB0aCkpIHtcbiAgICBjaGVja0pvaW4ob3BlblN0YXJ0LCBvcGVuRW5kKTtcbiAgICBhZGROb2RlKGNsb3NlKG9wZW5TdGFydCwgcmVwbGFjZVRocmVlV2F5KCRmcm9tLCAkc3RhcnQsICRlbmQsICR0bywgZGVwdGggKyAxKSksIGNvbnRlbnQpO1xuICB9IGVsc2Uge1xuICAgIGlmIChvcGVuU3RhcnQpXG4gICAgICB7IGFkZE5vZGUoY2xvc2Uob3BlblN0YXJ0LCByZXBsYWNlVHdvV2F5KCRmcm9tLCAkc3RhcnQsIGRlcHRoICsgMSkpLCBjb250ZW50KTsgfVxuICAgIGFkZFJhbmdlKCRzdGFydCwgJGVuZCwgZGVwdGgsIGNvbnRlbnQpO1xuICAgIGlmIChvcGVuRW5kKVxuICAgICAgeyBhZGROb2RlKGNsb3NlKG9wZW5FbmQsIHJlcGxhY2VUd29XYXkoJGVuZCwgJHRvLCBkZXB0aCArIDEpKSwgY29udGVudCk7IH1cbiAgfVxuICBhZGRSYW5nZSgkdG8sIG51bGwsIGRlcHRoLCBjb250ZW50KTtcbiAgcmV0dXJuIG5ldyBGcmFnbWVudChjb250ZW50KVxufVxuXG5mdW5jdGlvbiByZXBsYWNlVHdvV2F5KCRmcm9tLCAkdG8sIGRlcHRoKSB7XG4gIHZhciBjb250ZW50ID0gW107XG4gIGFkZFJhbmdlKG51bGwsICRmcm9tLCBkZXB0aCwgY29udGVudCk7XG4gIGlmICgkZnJvbS5kZXB0aCA+IGRlcHRoKSB7XG4gICAgdmFyIHR5cGUgPSBqb2luYWJsZSgkZnJvbSwgJHRvLCBkZXB0aCArIDEpO1xuICAgIGFkZE5vZGUoY2xvc2UodHlwZSwgcmVwbGFjZVR3b1dheSgkZnJvbSwgJHRvLCBkZXB0aCArIDEpKSwgY29udGVudCk7XG4gIH1cbiAgYWRkUmFuZ2UoJHRvLCBudWxsLCBkZXB0aCwgY29udGVudCk7XG4gIHJldHVybiBuZXcgRnJhZ21lbnQoY29udGVudClcbn1cblxuZnVuY3Rpb24gcHJlcGFyZVNsaWNlRm9yUmVwbGFjZShzbGljZSwgJGFsb25nKSB7XG4gIHZhciBleHRyYSA9ICRhbG9uZy5kZXB0aCAtIHNsaWNlLm9wZW5TdGFydCwgcGFyZW50ID0gJGFsb25nLm5vZGUoZXh0cmEpO1xuICB2YXIgbm9kZSA9IHBhcmVudC5jb3B5KHNsaWNlLmNvbnRlbnQpO1xuICBmb3IgKHZhciBpID0gZXh0cmEgLSAxOyBpID49IDA7IGktLSlcbiAgICB7IG5vZGUgPSAkYWxvbmcubm9kZShpKS5jb3B5KEZyYWdtZW50LmZyb20obm9kZSkpOyB9XG4gIHJldHVybiB7c3RhcnQ6IG5vZGUucmVzb2x2ZU5vQ2FjaGUoc2xpY2Uub3BlblN0YXJ0ICsgZXh0cmEpLFxuICAgICAgICAgIGVuZDogbm9kZS5yZXNvbHZlTm9DYWNoZShub2RlLmNvbnRlbnQuc2l6ZSAtIHNsaWNlLm9wZW5FbmQgLSBleHRyYSl9XG59XG5cbi8vIDo6LSBZb3UgY2FuIFtfcmVzb2x2ZV9dKCNtb2RlbC5Ob2RlLnJlc29sdmUpIGEgcG9zaXRpb24gdG8gZ2V0IG1vcmVcbi8vIGluZm9ybWF0aW9uIGFib3V0IGl0LiBPYmplY3RzIG9mIHRoaXMgY2xhc3MgcmVwcmVzZW50IHN1Y2ggYVxuLy8gcmVzb2x2ZWQgcG9zaXRpb24sIHByb3ZpZGluZyB2YXJpb3VzIHBpZWNlcyBvZiBjb250ZXh0IGluZm9ybWF0aW9uLFxuLy8gYW5kIHNvbWUgaGVscGVyIG1ldGhvZHMuXG4vL1xuLy8gVGhyb3VnaG91dCB0aGlzIGludGVyZmFjZSwgbWV0aG9kcyB0aGF0IHRha2UgYW4gb3B0aW9uYWwgYGRlcHRoYFxuLy8gcGFyYW1ldGVyIHdpbGwgaW50ZXJwcmV0IHVuZGVmaW5lZCBhcyBgdGhpcy5kZXB0aGAgYW5kIG5lZ2F0aXZlXG4vLyBudW1iZXJzIGFzIGB0aGlzLmRlcHRoICsgdmFsdWVgLlxudmFyIFJlc29sdmVkUG9zID0gZnVuY3Rpb24gUmVzb2x2ZWRQb3MocG9zLCBwYXRoLCBwYXJlbnRPZmZzZXQpIHtcbiAgLy8gOjogbnVtYmVyIFRoZSBwb3NpdGlvbiB0aGF0IHdhcyByZXNvbHZlZC5cbiAgdGhpcy5wb3MgPSBwb3M7XG4gIHRoaXMucGF0aCA9IHBhdGg7XG4gIC8vIDo6IG51bWJlclxuICAvLyBUaGUgbnVtYmVyIG9mIGxldmVscyB0aGUgcGFyZW50IG5vZGUgaXMgZnJvbSB0aGUgcm9vdC4gSWYgdGhpc1xuICAvLyBwb3NpdGlvbiBwb2ludHMgZGlyZWN0bHkgaW50byB0aGUgcm9vdCBub2RlLCBpdCBpcyAwLiBJZiBpdFxuICAvLyBwb2ludHMgaW50byBhIHRvcC1sZXZlbCBwYXJhZ3JhcGgsIDEsIGFuZCBzbyBvbi5cbiAgdGhpcy5kZXB0aCA9IHBhdGgubGVuZ3RoIC8gMyAtIDE7XG4gIC8vIDo6IG51bWJlciBUaGUgb2Zmc2V0IHRoaXMgcG9zaXRpb24gaGFzIGludG8gaXRzIHBhcmVudCBub2RlLlxuICB0aGlzLnBhcmVudE9mZnNldCA9IHBhcmVudE9mZnNldDtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMiA9IHsgcGFyZW50OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGRvYzogeyBjb25maWd1cmFibGU6IHRydWUgfSx0ZXh0T2Zmc2V0OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LG5vZGVBZnRlcjogeyBjb25maWd1cmFibGU6IHRydWUgfSxub2RlQmVmb3JlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cblJlc29sdmVkUG9zLnByb3RvdHlwZS5yZXNvbHZlRGVwdGggPSBmdW5jdGlvbiByZXNvbHZlRGVwdGggKHZhbCkge1xuICBpZiAodmFsID09IG51bGwpIHsgcmV0dXJuIHRoaXMuZGVwdGggfVxuICBpZiAodmFsIDwgMCkgeyByZXR1cm4gdGhpcy5kZXB0aCArIHZhbCB9XG4gIHJldHVybiB2YWxcbn07XG5cbi8vIDo6IE5vZGVcbi8vIFRoZSBwYXJlbnQgbm9kZSB0aGF0IHRoZSBwb3NpdGlvbiBwb2ludHMgaW50by4gTm90ZSB0aGF0IGV2ZW4gaWZcbi8vIGEgcG9zaXRpb24gcG9pbnRzIGludG8gYSB0ZXh0IG5vZGUsIHRoYXQgbm9kZSBpcyBub3QgY29uc2lkZXJlZFxuLy8gdGhlIHBhcmVudOKAlHRleHQgbm9kZXMgYXJlIOKAmGZsYXTigJkgaW4gdGhpcyBtb2RlbCwgYW5kIGhhdmUgbm8gY29udGVudC5cbnByb3RvdHlwZUFjY2Vzc29ycyQyLnBhcmVudC5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLm5vZGUodGhpcy5kZXB0aCkgfTtcblxuLy8gOjogTm9kZVxuLy8gVGhlIHJvb3Qgbm9kZSBpbiB3aGljaCB0aGUgcG9zaXRpb24gd2FzIHJlc29sdmVkLlxucHJvdG90eXBlQWNjZXNzb3JzJDIuZG9jLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMubm9kZSgwKSB9O1xuXG4vLyA6OiAoP251bWJlcikg4oaSIE5vZGVcbi8vIFRoZSBhbmNlc3RvciBub2RlIGF0IHRoZSBnaXZlbiBsZXZlbC4gYHAubm9kZShwLmRlcHRoKWAgaXMgdGhlXG4vLyBzYW1lIGFzIGBwLnBhcmVudGAuXG5SZXNvbHZlZFBvcy5wcm90b3R5cGUubm9kZSA9IGZ1bmN0aW9uIG5vZGUgKGRlcHRoKSB7IHJldHVybiB0aGlzLnBhdGhbdGhpcy5yZXNvbHZlRGVwdGgoZGVwdGgpICogM10gfTtcblxuLy8gOjogKD9udW1iZXIpIOKGkiBudW1iZXJcbi8vIFRoZSBpbmRleCBpbnRvIHRoZSBhbmNlc3RvciBhdCB0aGUgZ2l2ZW4gbGV2ZWwuIElmIHRoaXMgcG9pbnRzIGF0XG4vLyB0aGUgM3JkIG5vZGUgaW4gdGhlIDJuZCBwYXJhZ3JhcGggb24gdGhlIHRvcCBsZXZlbCwgZm9yIGV4YW1wbGUsXG4vLyBgcC5pbmRleCgwKWAgaXMgMSBhbmQgYHAuaW5kZXgoMSlgIGlzIDIuXG5SZXNvbHZlZFBvcy5wcm90b3R5cGUuaW5kZXggPSBmdW5jdGlvbiBpbmRleCAoZGVwdGgpIHsgcmV0dXJuIHRoaXMucGF0aFt0aGlzLnJlc29sdmVEZXB0aChkZXB0aCkgKiAzICsgMV0gfTtcblxuLy8gOjogKD9udW1iZXIpIOKGkiBudW1iZXJcbi8vIFRoZSBpbmRleCBwb2ludGluZyBhZnRlciB0aGlzIHBvc2l0aW9uIGludG8gdGhlIGFuY2VzdG9yIGF0IHRoZVxuLy8gZ2l2ZW4gbGV2ZWwuXG5SZXNvbHZlZFBvcy5wcm90b3R5cGUuaW5kZXhBZnRlciA9IGZ1bmN0aW9uIGluZGV4QWZ0ZXIgKGRlcHRoKSB7XG4gIGRlcHRoID0gdGhpcy5yZXNvbHZlRGVwdGgoZGVwdGgpO1xuICByZXR1cm4gdGhpcy5pbmRleChkZXB0aCkgKyAoZGVwdGggPT0gdGhpcy5kZXB0aCAmJiAhdGhpcy50ZXh0T2Zmc2V0ID8gMCA6IDEpXG59O1xuXG4vLyA6OiAoP251bWJlcikg4oaSIG51bWJlclxuLy8gVGhlIChhYnNvbHV0ZSkgcG9zaXRpb24gYXQgdGhlIHN0YXJ0IG9mIHRoZSBub2RlIGF0IHRoZSBnaXZlblxuLy8gbGV2ZWwuXG5SZXNvbHZlZFBvcy5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiBzdGFydCAoZGVwdGgpIHtcbiAgZGVwdGggPSB0aGlzLnJlc29sdmVEZXB0aChkZXB0aCk7XG4gIHJldHVybiBkZXB0aCA9PSAwID8gMCA6IHRoaXMucGF0aFtkZXB0aCAqIDMgLSAxXSArIDFcbn07XG5cbi8vIDo6ICg/bnVtYmVyKSDihpIgbnVtYmVyXG4vLyBUaGUgKGFic29sdXRlKSBwb3NpdGlvbiBhdCB0aGUgZW5kIG9mIHRoZSBub2RlIGF0IHRoZSBnaXZlblxuLy8gbGV2ZWwuXG5SZXNvbHZlZFBvcy5wcm90b3R5cGUuZW5kID0gZnVuY3Rpb24gZW5kIChkZXB0aCkge1xuICBkZXB0aCA9IHRoaXMucmVzb2x2ZURlcHRoKGRlcHRoKTtcbiAgcmV0dXJuIHRoaXMuc3RhcnQoZGVwdGgpICsgdGhpcy5ub2RlKGRlcHRoKS5jb250ZW50LnNpemVcbn07XG5cbi8vIDo6ICg/bnVtYmVyKSDihpIgbnVtYmVyXG4vLyBUaGUgKGFic29sdXRlKSBwb3NpdGlvbiBkaXJlY3RseSBiZWZvcmUgdGhlIHdyYXBwaW5nIG5vZGUgYXQgdGhlXG4vLyBnaXZlbiBsZXZlbCwgb3IsIHdoZW4gYGRlcHRoYCBpcyBgdGhpcy5kZXB0aCArIDFgLCB0aGUgb3JpZ2luYWxcbi8vIHBvc2l0aW9uLlxuUmVzb2x2ZWRQb3MucHJvdG90eXBlLmJlZm9yZSA9IGZ1bmN0aW9uIGJlZm9yZSAoZGVwdGgpIHtcbiAgZGVwdGggPSB0aGlzLnJlc29sdmVEZXB0aChkZXB0aCk7XG4gIGlmICghZGVwdGgpIHsgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJUaGVyZSBpcyBubyBwb3NpdGlvbiBiZWZvcmUgdGhlIHRvcC1sZXZlbCBub2RlXCIpIH1cbiAgcmV0dXJuIGRlcHRoID09IHRoaXMuZGVwdGggKyAxID8gdGhpcy5wb3MgOiB0aGlzLnBhdGhbZGVwdGggKiAzIC0gMV1cbn07XG5cbi8vIDo6ICg/bnVtYmVyKSDihpIgbnVtYmVyXG4vLyBUaGUgKGFic29sdXRlKSBwb3NpdGlvbiBkaXJlY3RseSBhZnRlciB0aGUgd3JhcHBpbmcgbm9kZSBhdCB0aGVcbi8vIGdpdmVuIGxldmVsLCBvciB0aGUgb3JpZ2luYWwgcG9zaXRpb24gd2hlbiBgZGVwdGhgIGlzIGB0aGlzLmRlcHRoICsgMWAuXG5SZXNvbHZlZFBvcy5wcm90b3R5cGUuYWZ0ZXIgPSBmdW5jdGlvbiBhZnRlciAoZGVwdGgpIHtcbiAgZGVwdGggPSB0aGlzLnJlc29sdmVEZXB0aChkZXB0aCk7XG4gIGlmICghZGVwdGgpIHsgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJUaGVyZSBpcyBubyBwb3NpdGlvbiBhZnRlciB0aGUgdG9wLWxldmVsIG5vZGVcIikgfVxuICByZXR1cm4gZGVwdGggPT0gdGhpcy5kZXB0aCArIDEgPyB0aGlzLnBvcyA6IHRoaXMucGF0aFtkZXB0aCAqIDMgLSAxXSArIHRoaXMucGF0aFtkZXB0aCAqIDNdLm5vZGVTaXplXG59O1xuXG4vLyA6OiBudW1iZXJcbi8vIFdoZW4gdGhpcyBwb3NpdGlvbiBwb2ludHMgaW50byBhIHRleHQgbm9kZSwgdGhpcyByZXR1cm5zIHRoZVxuLy8gZGlzdGFuY2UgYmV0d2VlbiB0aGUgcG9zaXRpb24gYW5kIHRoZSBzdGFydCBvZiB0aGUgdGV4dCBub2RlLlxuLy8gV2lsbCBiZSB6ZXJvIGZvciBwb3NpdGlvbnMgdGhhdCBwb2ludCBiZXR3ZWVuIG5vZGVzLlxucHJvdG90eXBlQWNjZXNzb3JzJDIudGV4dE9mZnNldC5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnBvcyAtIHRoaXMucGF0aFt0aGlzLnBhdGgubGVuZ3RoIC0gMV0gfTtcblxuLy8gOjogP05vZGVcbi8vIEdldCB0aGUgbm9kZSBkaXJlY3RseSBhZnRlciB0aGUgcG9zaXRpb24sIGlmIGFueS4gSWYgdGhlIHBvc2l0aW9uXG4vLyBwb2ludHMgaW50byBhIHRleHQgbm9kZSwgb25seSB0aGUgcGFydCBvZiB0aGF0IG5vZGUgYWZ0ZXIgdGhlXG4vLyBwb3NpdGlvbiBpcyByZXR1cm5lZC5cbnByb3RvdHlwZUFjY2Vzc29ycyQyLm5vZGVBZnRlci5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudCwgaW5kZXggPSB0aGlzLmluZGV4KHRoaXMuZGVwdGgpO1xuICBpZiAoaW5kZXggPT0gcGFyZW50LmNoaWxkQ291bnQpIHsgcmV0dXJuIG51bGwgfVxuICB2YXIgZE9mZiA9IHRoaXMucG9zIC0gdGhpcy5wYXRoW3RoaXMucGF0aC5sZW5ndGggLSAxXSwgY2hpbGQgPSBwYXJlbnQuY2hpbGQoaW5kZXgpO1xuICByZXR1cm4gZE9mZiA/IHBhcmVudC5jaGlsZChpbmRleCkuY3V0KGRPZmYpIDogY2hpbGRcbn07XG5cbi8vIDo6ID9Ob2RlXG4vLyBHZXQgdGhlIG5vZGUgZGlyZWN0bHkgYmVmb3JlIHRoZSBwb3NpdGlvbiwgaWYgYW55LiBJZiB0aGVcbi8vIHBvc2l0aW9uIHBvaW50cyBpbnRvIGEgdGV4dCBub2RlLCBvbmx5IHRoZSBwYXJ0IG9mIHRoYXQgbm9kZVxuLy8gYmVmb3JlIHRoZSBwb3NpdGlvbiBpcyByZXR1cm5lZC5cbnByb3RvdHlwZUFjY2Vzc29ycyQyLm5vZGVCZWZvcmUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaW5kZXggPSB0aGlzLmluZGV4KHRoaXMuZGVwdGgpO1xuICB2YXIgZE9mZiA9IHRoaXMucG9zIC0gdGhpcy5wYXRoW3RoaXMucGF0aC5sZW5ndGggLSAxXTtcbiAgaWYgKGRPZmYpIHsgcmV0dXJuIHRoaXMucGFyZW50LmNoaWxkKGluZGV4KS5jdXQoMCwgZE9mZikgfVxuICByZXR1cm4gaW5kZXggPT0gMCA/IG51bGwgOiB0aGlzLnBhcmVudC5jaGlsZChpbmRleCAtIDEpXG59O1xuXG4vLyA6OiAobnVtYmVyLCA/bnVtYmVyKSDihpIgbnVtYmVyXG4vLyBHZXQgdGhlIHBvc2l0aW9uIGF0IHRoZSBnaXZlbiBpbmRleCBpbiB0aGUgcGFyZW50IG5vZGUgYXQgdGhlXG4vLyBnaXZlbiBkZXB0aCAod2hpY2ggZGVmYXVsdHMgdG8gYHRoaXMuZGVwdGhgKS5cblJlc29sdmVkUG9zLnByb3RvdHlwZS5wb3NBdEluZGV4ID0gZnVuY3Rpb24gcG9zQXRJbmRleCAoaW5kZXgsIGRlcHRoKSB7XG4gIGRlcHRoID0gdGhpcy5yZXNvbHZlRGVwdGgoZGVwdGgpO1xuICB2YXIgbm9kZSA9IHRoaXMucGF0aFtkZXB0aCAqIDNdLCBwb3MgPSBkZXB0aCA9PSAwID8gMCA6IHRoaXMucGF0aFtkZXB0aCAqIDMgLSAxXSArIDE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaW5kZXg7IGkrKykgeyBwb3MgKz0gbm9kZS5jaGlsZChpKS5ub2RlU2l6ZTsgfVxuICByZXR1cm4gcG9zXG59O1xuXG4vLyA6OiAoKSDihpIgW01hcmtdXG4vLyBHZXQgdGhlIG1hcmtzIGF0IHRoaXMgcG9zaXRpb24sIGZhY3RvcmluZyBpbiB0aGUgc3Vycm91bmRpbmdcbi8vIG1hcmtzJyBbYGluY2x1c2l2ZWBdKCNtb2RlbC5NYXJrU3BlYy5pbmNsdXNpdmUpIHByb3BlcnR5LiBJZiB0aGVcbi8vIHBvc2l0aW9uIGlzIGF0IHRoZSBzdGFydCBvZiBhIG5vbi1lbXB0eSBub2RlLCB0aGUgbWFya3Mgb2YgdGhlXG4vLyBub2RlIGFmdGVyIGl0IChpZiBhbnkpIGFyZSByZXR1cm5lZC5cblJlc29sdmVkUG9zLnByb3RvdHlwZS5tYXJrcyA9IGZ1bmN0aW9uIG1hcmtzICgpIHtcbiAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50LCBpbmRleCA9IHRoaXMuaW5kZXgoKTtcblxuICAvLyBJbiBhbiBlbXB0eSBwYXJlbnQsIHJldHVybiB0aGUgZW1wdHkgYXJyYXlcbiAgaWYgKHBhcmVudC5jb250ZW50LnNpemUgPT0gMCkgeyByZXR1cm4gTWFyay5ub25lIH1cblxuICAvLyBXaGVuIGluc2lkZSBhIHRleHQgbm9kZSwganVzdCByZXR1cm4gdGhlIHRleHQgbm9kZSdzIG1hcmtzXG4gIGlmICh0aGlzLnRleHRPZmZzZXQpIHsgcmV0dXJuIHBhcmVudC5jaGlsZChpbmRleCkubWFya3MgfVxuXG4gIHZhciBtYWluID0gcGFyZW50Lm1heWJlQ2hpbGQoaW5kZXggLSAxKSwgb3RoZXIgPSBwYXJlbnQubWF5YmVDaGlsZChpbmRleCk7XG4gIC8vIElmIHRoZSBgYWZ0ZXJgIGZsYWcgaXMgdHJ1ZSBvZiB0aGVyZSBpcyBubyBub2RlIGJlZm9yZSwgbWFrZVxuICAvLyB0aGUgbm9kZSBhZnRlciB0aGlzIHBvc2l0aW9uIHRoZSBtYWluIHJlZmVyZW5jZS5cbiAgaWYgKCFtYWluKSB7IHZhciB0bXAgPSBtYWluOyBtYWluID0gb3RoZXI7IG90aGVyID0gdG1wOyB9XG5cbiAgLy8gVXNlIGFsbCBtYXJrcyBpbiB0aGUgbWFpbiBub2RlLCBleGNlcHQgdGhvc2UgdGhhdCBoYXZlXG4gIC8vIGBpbmNsdXNpdmVgIHNldCB0byBmYWxzZSBhbmQgYXJlIG5vdCBwcmVzZW50IGluIHRoZSBvdGhlciBub2RlLlxuICB2YXIgbWFya3MgPSBtYWluLm1hcmtzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG1hcmtzLmxlbmd0aDsgaSsrKVxuICAgIHsgaWYgKG1hcmtzW2ldLnR5cGUuc3BlYy5pbmNsdXNpdmUgPT09IGZhbHNlICYmICghb3RoZXIgfHwgIW1hcmtzW2ldLmlzSW5TZXQob3RoZXIubWFya3MpKSlcbiAgICAgIHsgbWFya3MgPSBtYXJrc1tpLS1dLnJlbW92ZUZyb21TZXQobWFya3MpOyB9IH1cblxuICByZXR1cm4gbWFya3Ncbn07XG5cbi8vIDo6IChSZXNvbHZlZFBvcykg4oaSID9bTWFya11cbi8vIEdldCB0aGUgbWFya3MgYWZ0ZXIgdGhlIGN1cnJlbnQgcG9zaXRpb24sIGlmIGFueSwgZXhjZXB0IHRob3NlXG4vLyB0aGF0IGFyZSBub24taW5jbHVzaXZlIGFuZCBub3QgcHJlc2VudCBhdCBwb3NpdGlvbiBgJGVuZGAuIFRoaXNcbi8vIGlzIG1vc3RseSB1c2VmdWwgZm9yIGdldHRpbmcgdGhlIHNldCBvZiBtYXJrcyB0byBwcmVzZXJ2ZSBhZnRlciBhXG4vLyBkZWxldGlvbi4gV2lsbCByZXR1cm4gYG51bGxgIGlmIHRoaXMgcG9zaXRpb24gaXMgYXQgdGhlIGVuZCBvZlxuLy8gaXRzIHBhcmVudCBub2RlIG9yIGl0cyBwYXJlbnQgbm9kZSBpc24ndCBhIHRleHRibG9jayAoaW4gd2hpY2hcbi8vIGNhc2Ugbm8gbWFya3Mgc2hvdWxkIGJlIHByZXNlcnZlZCkuXG5SZXNvbHZlZFBvcy5wcm90b3R5cGUubWFya3NBY3Jvc3MgPSBmdW5jdGlvbiBtYXJrc0Fjcm9zcyAoJGVuZCkge1xuICB2YXIgYWZ0ZXIgPSB0aGlzLnBhcmVudC5tYXliZUNoaWxkKHRoaXMuaW5kZXgoKSk7XG4gIGlmICghYWZ0ZXIgfHwgIWFmdGVyLmlzSW5saW5lKSB7IHJldHVybiBudWxsIH1cblxuICB2YXIgbWFya3MgPSBhZnRlci5tYXJrcywgbmV4dCA9ICRlbmQucGFyZW50Lm1heWJlQ2hpbGQoJGVuZC5pbmRleCgpKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXJrcy5sZW5ndGg7IGkrKylcbiAgICB7IGlmIChtYXJrc1tpXS50eXBlLnNwZWMuaW5jbHVzaXZlID09PSBmYWxzZSAmJiAoIW5leHQgfHwgIW1hcmtzW2ldLmlzSW5TZXQobmV4dC5tYXJrcykpKVxuICAgICAgeyBtYXJrcyA9IG1hcmtzW2ktLV0ucmVtb3ZlRnJvbVNldChtYXJrcyk7IH0gfVxuICByZXR1cm4gbWFya3Ncbn07XG5cbi8vIDo6IChudW1iZXIpIOKGkiBudW1iZXJcbi8vIFRoZSBkZXB0aCB1cCB0byB3aGljaCB0aGlzIHBvc2l0aW9uIGFuZCB0aGUgZ2l2ZW4gKG5vbi1yZXNvbHZlZClcbi8vIHBvc2l0aW9uIHNoYXJlIHRoZSBzYW1lIHBhcmVudCBub2Rlcy5cblJlc29sdmVkUG9zLnByb3RvdHlwZS5zaGFyZWREZXB0aCA9IGZ1bmN0aW9uIHNoYXJlZERlcHRoIChwb3MpIHtcbiAgZm9yICh2YXIgZGVwdGggPSB0aGlzLmRlcHRoOyBkZXB0aCA+IDA7IGRlcHRoLS0pXG4gICAgeyBpZiAodGhpcy5zdGFydChkZXB0aCkgPD0gcG9zICYmIHRoaXMuZW5kKGRlcHRoKSA+PSBwb3MpIHsgcmV0dXJuIGRlcHRoIH0gfVxuICByZXR1cm4gMFxufTtcblxuLy8gOjogKD9SZXNvbHZlZFBvcywgPyhOb2RlKSDihpIgYm9vbCkg4oaSID9Ob2RlUmFuZ2Vcbi8vIFJldHVybnMgYSByYW5nZSBiYXNlZCBvbiB0aGUgcGxhY2Ugd2hlcmUgdGhpcyBwb3NpdGlvbiBhbmQgdGhlXG4vLyBnaXZlbiBwb3NpdGlvbiBkaXZlcmdlIGFyb3VuZCBibG9jayBjb250ZW50LiBJZiBib3RoIHBvaW50IGludG9cbi8vIHRoZSBzYW1lIHRleHRibG9jaywgZm9yIGV4YW1wbGUsIGEgcmFuZ2UgYXJvdW5kIHRoYXQgdGV4dGJsb2NrXG4vLyB3aWxsIGJlIHJldHVybmVkLiBJZiB0aGV5IHBvaW50IGludG8gZGlmZmVyZW50IGJsb2NrcywgdGhlIHJhbmdlXG4vLyBhcm91bmQgdGhvc2UgYmxvY2tzIGluIHRoZWlyIHNoYXJlZCBhbmNlc3RvciBpcyByZXR1cm5lZC4gWW91IGNhblxuLy8gcGFzcyBpbiBhbiBvcHRpb25hbCBwcmVkaWNhdGUgdGhhdCB3aWxsIGJlIGNhbGxlZCB3aXRoIGEgcGFyZW50XG4vLyBub2RlIHRvIHNlZSBpZiBhIHJhbmdlIGludG8gdGhhdCBwYXJlbnQgaXMgYWNjZXB0YWJsZS5cblJlc29sdmVkUG9zLnByb3RvdHlwZS5ibG9ja1JhbmdlID0gZnVuY3Rpb24gYmxvY2tSYW5nZSAob3RoZXIsIHByZWQpIHtcbiAgICBpZiAoIG90aGVyID09PSB2b2lkIDAgKSBvdGhlciA9IHRoaXM7XG5cbiAgaWYgKG90aGVyLnBvcyA8IHRoaXMucG9zKSB7IHJldHVybiBvdGhlci5ibG9ja1JhbmdlKHRoaXMpIH1cbiAgZm9yICh2YXIgZCA9IHRoaXMuZGVwdGggLSAodGhpcy5wYXJlbnQuaW5saW5lQ29udGVudCB8fCB0aGlzLnBvcyA9PSBvdGhlci5wb3MgPyAxIDogMCk7IGQgPj0gMDsgZC0tKVxuICAgIHsgaWYgKG90aGVyLnBvcyA8PSB0aGlzLmVuZChkKSAmJiAoIXByZWQgfHwgcHJlZCh0aGlzLm5vZGUoZCkpKSlcbiAgICAgIHsgcmV0dXJuIG5ldyBOb2RlUmFuZ2UodGhpcywgb3RoZXIsIGQpIH0gfVxufTtcblxuLy8gOjogKFJlc29sdmVkUG9zKSDihpIgYm9vbFxuLy8gUXVlcnkgd2hldGhlciB0aGUgZ2l2ZW4gcG9zaXRpb24gc2hhcmVzIHRoZSBzYW1lIHBhcmVudCBub2RlLlxuUmVzb2x2ZWRQb3MucHJvdG90eXBlLnNhbWVQYXJlbnQgPSBmdW5jdGlvbiBzYW1lUGFyZW50IChvdGhlcikge1xuICByZXR1cm4gdGhpcy5wb3MgLSB0aGlzLnBhcmVudE9mZnNldCA9PSBvdGhlci5wb3MgLSBvdGhlci5wYXJlbnRPZmZzZXRcbn07XG5cbi8vIDo6IChSZXNvbHZlZFBvcykg4oaSIFJlc29sdmVkUG9zXG4vLyBSZXR1cm4gdGhlIGdyZWF0ZXIgb2YgdGhpcyBhbmQgdGhlIGdpdmVuIHBvc2l0aW9uLlxuUmVzb2x2ZWRQb3MucHJvdG90eXBlLm1heCA9IGZ1bmN0aW9uIG1heCAob3RoZXIpIHtcbiAgcmV0dXJuIG90aGVyLnBvcyA+IHRoaXMucG9zID8gb3RoZXIgOiB0aGlzXG59O1xuXG4vLyA6OiAoUmVzb2x2ZWRQb3MpIOKGkiBSZXNvbHZlZFBvc1xuLy8gUmV0dXJuIHRoZSBzbWFsbGVyIG9mIHRoaXMgYW5kIHRoZSBnaXZlbiBwb3NpdGlvbi5cblJlc29sdmVkUG9zLnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbiBtaW4gKG90aGVyKSB7XG4gIHJldHVybiBvdGhlci5wb3MgPCB0aGlzLnBvcyA/IG90aGVyIDogdGhpc1xufTtcblxuUmVzb2x2ZWRQb3MucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgc3RyID0gXCJcIjtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPD0gdGhpcy5kZXB0aDsgaSsrKVxuICAgIHsgc3RyICs9IChzdHIgPyBcIi9cIiA6IFwiXCIpICsgdGhpcy5ub2RlKGkpLnR5cGUubmFtZSArIFwiX1wiICsgdGhpcy5pbmRleChpIC0gMSk7IH1cbiAgcmV0dXJuIHN0ciArIFwiOlwiICsgdGhpcy5wYXJlbnRPZmZzZXRcbn07XG5cblJlc29sdmVkUG9zLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlIChkb2MsIHBvcykge1xuICBpZiAoIShwb3MgPj0gMCAmJiBwb3MgPD0gZG9jLmNvbnRlbnQuc2l6ZSkpIHsgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJQb3NpdGlvbiBcIiArIHBvcyArIFwiIG91dCBvZiByYW5nZVwiKSB9XG4gIHZhciBwYXRoID0gW107XG4gIHZhciBzdGFydCA9IDAsIHBhcmVudE9mZnNldCA9IHBvcztcbiAgZm9yICh2YXIgbm9kZSA9IGRvYzs7KSB7XG4gICAgdmFyIHJlZiA9IG5vZGUuY29udGVudC5maW5kSW5kZXgocGFyZW50T2Zmc2V0KTtcbiAgICAgIHZhciBpbmRleCA9IHJlZi5pbmRleDtcbiAgICAgIHZhciBvZmZzZXQgPSByZWYub2Zmc2V0O1xuICAgIHZhciByZW0gPSBwYXJlbnRPZmZzZXQgLSBvZmZzZXQ7XG4gICAgcGF0aC5wdXNoKG5vZGUsIGluZGV4LCBzdGFydCArIG9mZnNldCk7XG4gICAgaWYgKCFyZW0pIHsgYnJlYWsgfVxuICAgIG5vZGUgPSBub2RlLmNoaWxkKGluZGV4KTtcbiAgICBpZiAobm9kZS5pc1RleHQpIHsgYnJlYWsgfVxuICAgIHBhcmVudE9mZnNldCA9IHJlbSAtIDE7XG4gICAgc3RhcnQgKz0gb2Zmc2V0ICsgMTtcbiAgfVxuICByZXR1cm4gbmV3IFJlc29sdmVkUG9zKHBvcywgcGF0aCwgcGFyZW50T2Zmc2V0KVxufTtcblxuUmVzb2x2ZWRQb3MucmVzb2x2ZUNhY2hlZCA9IGZ1bmN0aW9uIHJlc29sdmVDYWNoZWQgKGRvYywgcG9zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzb2x2ZUNhY2hlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGNhY2hlZCA9IHJlc29sdmVDYWNoZVtpXTtcbiAgICBpZiAoY2FjaGVkLnBvcyA9PSBwb3MgJiYgY2FjaGVkLmRvYyA9PSBkb2MpIHsgcmV0dXJuIGNhY2hlZCB9XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHJlc29sdmVDYWNoZVtyZXNvbHZlQ2FjaGVQb3NdID0gUmVzb2x2ZWRQb3MucmVzb2x2ZShkb2MsIHBvcyk7XG4gIHJlc29sdmVDYWNoZVBvcyA9IChyZXNvbHZlQ2FjaGVQb3MgKyAxKSAlIHJlc29sdmVDYWNoZVNpemU7XG4gIHJldHVybiByZXN1bHRcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBSZXNvbHZlZFBvcy5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQyICk7XG5cbnZhciByZXNvbHZlQ2FjaGUgPSBbXSwgcmVzb2x2ZUNhY2hlUG9zID0gMCwgcmVzb2x2ZUNhY2hlU2l6ZSA9IDEyO1xuXG4vLyA6Oi0gUmVwcmVzZW50cyBhIGZsYXQgcmFuZ2Ugb2YgY29udGVudCwgaS5lLiBvbmUgdGhhdCBzdGFydHMgYW5kXG4vLyBlbmRzIGluIHRoZSBzYW1lIG5vZGUuXG52YXIgTm9kZVJhbmdlID0gZnVuY3Rpb24gTm9kZVJhbmdlKCRmcm9tLCAkdG8sIGRlcHRoKSB7XG4gIC8vIDo6IFJlc29sdmVkUG9zIEEgcmVzb2x2ZWQgcG9zaXRpb24gYWxvbmcgdGhlIHN0YXJ0IG9mIHRoZVxuICAvLyBjb250ZW50LiBNYXkgaGF2ZSBhIGBkZXB0aGAgZ3JlYXRlciB0aGFuIHRoaXMgb2JqZWN0J3MgYGRlcHRoYFxuICAvLyBwcm9wZXJ0eSwgc2luY2UgdGhlc2UgYXJlIHRoZSBwb3NpdGlvbnMgdGhhdCB3ZXJlIHVzZWQgdG9cbiAgLy8gY29tcHV0ZSB0aGUgcmFuZ2UsIG5vdCByZS1yZXNvbHZlZCBwb3NpdGlvbnMgZGlyZWN0bHkgYXQgaXRzXG4gIC8vIGJvdW5kYXJpZXMuXG4gIHRoaXMuJGZyb20gPSAkZnJvbTtcbiAgLy8gOjogUmVzb2x2ZWRQb3MgQSBwb3NpdGlvbiBhbG9uZyB0aGUgZW5kIG9mIHRoZSBjb250ZW50LiBTZWVcbiAgLy8gY2F2ZWF0IGZvciBbYCRmcm9tYF0oI21vZGVsLk5vZGVSYW5nZS4kZnJvbSkuXG4gIHRoaXMuJHRvID0gJHRvO1xuICAvLyA6OiBudW1iZXIgVGhlIGRlcHRoIG9mIHRoZSBub2RlIHRoYXQgdGhpcyByYW5nZSBwb2ludHMgaW50by5cbiAgdGhpcy5kZXB0aCA9IGRlcHRoO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQxJDEgPSB7IHN0YXJ0OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGVuZDogeyBjb25maWd1cmFibGU6IHRydWUgfSxwYXJlbnQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sc3RhcnRJbmRleDogeyBjb25maWd1cmFibGU6IHRydWUgfSxlbmRJbmRleDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyA6OiBudW1iZXIgVGhlIHBvc2l0aW9uIGF0IHRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMSQxLnN0YXJ0LmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuJGZyb20uYmVmb3JlKHRoaXMuZGVwdGggKyAxKSB9O1xuLy8gOjogbnVtYmVyIFRoZSBwb3NpdGlvbiBhdCB0aGUgZW5kIG9mIHRoZSByYW5nZS5cbnByb3RvdHlwZUFjY2Vzc29ycyQxJDEuZW5kLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuJHRvLmFmdGVyKHRoaXMuZGVwdGggKyAxKSB9O1xuXG4vLyA6OiBOb2RlIFRoZSBwYXJlbnQgbm9kZSB0aGF0IHRoZSByYW5nZSBwb2ludHMgaW50by5cbnByb3RvdHlwZUFjY2Vzc29ycyQxJDEucGFyZW50LmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuJGZyb20ubm9kZSh0aGlzLmRlcHRoKSB9O1xuLy8gOjogbnVtYmVyIFRoZSBzdGFydCBpbmRleCBvZiB0aGUgcmFuZ2UgaW4gdGhlIHBhcmVudCBub2RlLlxucHJvdG90eXBlQWNjZXNzb3JzJDEkMS5zdGFydEluZGV4LmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuJGZyb20uaW5kZXgodGhpcy5kZXB0aCkgfTtcbi8vIDo6IG51bWJlciBUaGUgZW5kIGluZGV4IG9mIHRoZSByYW5nZSBpbiB0aGUgcGFyZW50IG5vZGUuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMSQxLmVuZEluZGV4LmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuJHRvLmluZGV4QWZ0ZXIodGhpcy5kZXB0aCkgfTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE5vZGVSYW5nZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQxJDEgKTtcblxudmFyIGVtcHR5QXR0cnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4vLyA6Oi0gVGhpcyBjbGFzcyByZXByZXNlbnRzIGEgbm9kZSBpbiB0aGUgdHJlZSB0aGF0IG1ha2VzIHVwIGFcbi8vIFByb3NlTWlycm9yIGRvY3VtZW50LiBTbyBhIGRvY3VtZW50IGlzIGFuIGluc3RhbmNlIG9mIGBOb2RlYCwgd2l0aFxuLy8gY2hpbGRyZW4gdGhhdCBhcmUgYWxzbyBpbnN0YW5jZXMgb2YgYE5vZGVgLlxuLy9cbi8vIE5vZGVzIGFyZSBwZXJzaXN0ZW50IGRhdGEgc3RydWN0dXJlcy4gSW5zdGVhZCBvZiBjaGFuZ2luZyB0aGVtLCB5b3Vcbi8vIGNyZWF0ZSBuZXcgb25lcyB3aXRoIHRoZSBjb250ZW50IHlvdSB3YW50LiBPbGQgb25lcyBrZWVwIHBvaW50aW5nXG4vLyBhdCB0aGUgb2xkIGRvY3VtZW50IHNoYXBlLiBUaGlzIGlzIG1hZGUgY2hlYXBlciBieSBzaGFyaW5nXG4vLyBzdHJ1Y3R1cmUgYmV0d2VlbiB0aGUgb2xkIGFuZCBuZXcgZGF0YSBhcyBtdWNoIGFzIHBvc3NpYmxlLCB3aGljaCBhXG4vLyB0cmVlIHNoYXBlIGxpa2UgdGhpcyAod2l0aG91dCBiYWNrIHBvaW50ZXJzKSBtYWtlcyBlYXN5LlxuLy9cbi8vICoqRG8gbm90KiogZGlyZWN0bHkgbXV0YXRlIHRoZSBwcm9wZXJ0aWVzIG9mIGEgYE5vZGVgIG9iamVjdC4gU2VlXG4vLyBbdGhlIGd1aWRlXSgvZG9jcy9ndWlkZS8jZG9jKSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbnZhciBOb2RlID0gZnVuY3Rpb24gTm9kZSh0eXBlLCBhdHRycywgY29udGVudCwgbWFya3MpIHtcbiAgLy8gOjogTm9kZVR5cGVcbiAgLy8gVGhlIHR5cGUgb2Ygbm9kZSB0aGF0IHRoaXMgaXMuXG4gIHRoaXMudHlwZSA9IHR5cGU7XG5cbiAgLy8gOjogT2JqZWN0XG4gIC8vIEFuIG9iamVjdCBtYXBwaW5nIGF0dHJpYnV0ZSBuYW1lcyB0byB2YWx1ZXMuIFRoZSBraW5kIG9mXG4gIC8vIGF0dHJpYnV0ZXMgYWxsb3dlZCBhbmQgcmVxdWlyZWQgYXJlXG4gIC8vIFtkZXRlcm1pbmVkXSgjbW9kZWwuTm9kZVNwZWMuYXR0cnMpIGJ5IHRoZSBub2RlIHR5cGUuXG4gIHRoaXMuYXR0cnMgPSBhdHRycztcblxuICAvLyA6OiBGcmFnbWVudFxuICAvLyBBIGNvbnRhaW5lciBob2xkaW5nIHRoZSBub2RlJ3MgY2hpbGRyZW4uXG4gIHRoaXMuY29udGVudCA9IGNvbnRlbnQgfHwgRnJhZ21lbnQuZW1wdHk7XG5cbiAgLy8gOjogW01hcmtdXG4gIC8vIFRoZSBtYXJrcyAodGhpbmdzIGxpa2Ugd2hldGhlciBpdCBpcyBlbXBoYXNpemVkIG9yIHBhcnQgb2YgYVxuICAvLyBsaW5rKSBhcHBsaWVkIHRvIHRoaXMgbm9kZS5cbiAgdGhpcy5tYXJrcyA9IG1hcmtzIHx8IE1hcmsubm9uZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMyA9IHsgbm9kZVNpemU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sY2hpbGRDb3VudDogeyBjb25maWd1cmFibGU6IHRydWUgfSx0ZXh0Q29udGVudDogeyBjb25maWd1cmFibGU6IHRydWUgfSxmaXJzdENoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGxhc3RDaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSxpc0Jsb2NrOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGlzVGV4dGJsb2NrOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGlubGluZUNvbnRlbnQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0saXNJbmxpbmU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0saXNUZXh0OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGlzTGVhZjogeyBjb25maWd1cmFibGU6IHRydWUgfSxpc0F0b206IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLy8gdGV4dDo6ID9zdHJpbmdcbi8vIEZvciB0ZXh0IG5vZGVzLCB0aGlzIGNvbnRhaW5zIHRoZSBub2RlJ3MgdGV4dCBjb250ZW50LlxuXG4vLyA6OiBudW1iZXJcbi8vIFRoZSBzaXplIG9mIHRoaXMgbm9kZSwgYXMgZGVmaW5lZCBieSB0aGUgaW50ZWdlci1iYXNlZCBbaW5kZXhpbmdcbi8vIHNjaGVtZV0oL2RvY3MvZ3VpZGUvI2RvYy5pbmRleGluZykuIEZvciB0ZXh0IG5vZGVzLCB0aGlzIGlzIHRoZVxuLy8gYW1vdW50IG9mIGNoYXJhY3RlcnMuIEZvciBvdGhlciBsZWFmIG5vZGVzLCBpdCBpcyBvbmUuIEZvclxuLy8gbm9uLWxlYWYgbm9kZXMsIGl0IGlzIHRoZSBzaXplIG9mIHRoZSBjb250ZW50IHBsdXMgdHdvICh0aGUgc3RhcnRcbi8vIGFuZCBlbmQgdG9rZW4pLlxucHJvdG90eXBlQWNjZXNzb3JzJDMubm9kZVNpemUuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5pc0xlYWYgPyAxIDogMiArIHRoaXMuY29udGVudC5zaXplIH07XG5cbi8vIDo6IG51bWJlclxuLy8gVGhlIG51bWJlciBvZiBjaGlsZHJlbiB0aGF0IHRoZSBub2RlIGhhcy5cbnByb3RvdHlwZUFjY2Vzc29ycyQzLmNoaWxkQ291bnQuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5jb250ZW50LmNoaWxkQ291bnQgfTtcblxuLy8gOjogKG51bWJlcikg4oaSIE5vZGVcbi8vIEdldCB0aGUgY2hpbGQgbm9kZSBhdCB0aGUgZ2l2ZW4gaW5kZXguIFJhaXNlcyBhbiBlcnJvciB3aGVuIHRoZVxuLy8gaW5kZXggaXMgb3V0IG9mIHJhbmdlLlxuTm9kZS5wcm90b3R5cGUuY2hpbGQgPSBmdW5jdGlvbiBjaGlsZCAoaW5kZXgpIHsgcmV0dXJuIHRoaXMuY29udGVudC5jaGlsZChpbmRleCkgfTtcblxuLy8gOjogKG51bWJlcikg4oaSID9Ob2RlXG4vLyBHZXQgdGhlIGNoaWxkIG5vZGUgYXQgdGhlIGdpdmVuIGluZGV4LCBpZiBpdCBleGlzdHMuXG5Ob2RlLnByb3RvdHlwZS5tYXliZUNoaWxkID0gZnVuY3Rpb24gbWF5YmVDaGlsZCAoaW5kZXgpIHsgcmV0dXJuIHRoaXMuY29udGVudC5tYXliZUNoaWxkKGluZGV4KSB9O1xuXG4vLyA6OiAoKG5vZGU6IE5vZGUsIG9mZnNldDogbnVtYmVyLCBpbmRleDogbnVtYmVyKSlcbi8vIENhbGwgYGZgIGZvciBldmVyeSBjaGlsZCBub2RlLCBwYXNzaW5nIHRoZSBub2RlLCBpdHMgb2Zmc2V0XG4vLyBpbnRvIHRoaXMgcGFyZW50IG5vZGUsIGFuZCBpdHMgaW5kZXguXG5Ob2RlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaCAoZikgeyB0aGlzLmNvbnRlbnQuZm9yRWFjaChmKTsgfTtcblxuLy8gOjogKG51bWJlciwgbnVtYmVyLCAobm9kZTogTm9kZSwgcG9zOiBudW1iZXIsIHBhcmVudDogTm9kZSwgaW5kZXg6IG51bWJlcikg4oaSID9ib29sLCA/bnVtYmVyKVxuLy8gSW52b2tlIGEgY2FsbGJhY2sgZm9yIGFsbCBkZXNjZW5kYW50IG5vZGVzIHJlY3Vyc2l2ZWx5IGJldHdlZW5cbi8vIHRoZSBnaXZlbiB0d28gcG9zaXRpb25zIHRoYXQgYXJlIHJlbGF0aXZlIHRvIHN0YXJ0IG9mIHRoaXMgbm9kZSdzXG4vLyBjb250ZW50LiBUaGUgY2FsbGJhY2sgaXMgaW52b2tlZCB3aXRoIHRoZSBub2RlLCBpdHNcbi8vIHBhcmVudC1yZWxhdGl2ZSBwb3NpdGlvbiwgaXRzIHBhcmVudCBub2RlLCBhbmQgaXRzIGNoaWxkIGluZGV4LlxuLy8gV2hlbiB0aGUgY2FsbGJhY2sgcmV0dXJucyBmYWxzZSBmb3IgYSBnaXZlbiBub2RlLCB0aGF0IG5vZGUnc1xuLy8gY2hpbGRyZW4gd2lsbCBub3QgYmUgcmVjdXJzZWQgb3Zlci4gVGhlIGxhc3QgcGFyYW1ldGVyIGNhbiBiZVxuLy8gdXNlZCB0byBzcGVjaWZ5IGEgc3RhcnRpbmcgcG9zaXRpb24gdG8gY291bnQgZnJvbS5cbk5vZGUucHJvdG90eXBlLm5vZGVzQmV0d2VlbiA9IGZ1bmN0aW9uIG5vZGVzQmV0d2VlbiAoZnJvbSwgdG8sIGYsIHN0YXJ0UG9zKSB7XG4gICAgaWYgKCBzdGFydFBvcyA9PT0gdm9pZCAwICkgc3RhcnRQb3MgPSAwO1xuXG4gIHRoaXMuY29udGVudC5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIGYsIHN0YXJ0UG9zLCB0aGlzKTtcbn07XG5cbi8vIDo6ICgobm9kZTogTm9kZSwgcG9zOiBudW1iZXIsIHBhcmVudDogTm9kZSkg4oaSID9ib29sKVxuLy8gQ2FsbCB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGV2ZXJ5IGRlc2NlbmRhbnQgbm9kZS4gRG9lc24ndFxuLy8gZGVzY2VuZCBpbnRvIGEgbm9kZSB3aGVuIHRoZSBjYWxsYmFjayByZXR1cm5zIGBmYWxzZWAuXG5Ob2RlLnByb3RvdHlwZS5kZXNjZW5kYW50cyA9IGZ1bmN0aW9uIGRlc2NlbmRhbnRzIChmKSB7XG4gIHRoaXMubm9kZXNCZXR3ZWVuKDAsIHRoaXMuY29udGVudC5zaXplLCBmKTtcbn07XG5cbi8vIDo6IHN0cmluZ1xuLy8gQ29uY2F0ZW5hdGVzIGFsbCB0aGUgdGV4dCBub2RlcyBmb3VuZCBpbiB0aGlzIGZyYWdtZW50IGFuZCBpdHNcbi8vIGNoaWxkcmVuLlxucHJvdG90eXBlQWNjZXNzb3JzJDMudGV4dENvbnRlbnQuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy50ZXh0QmV0d2VlbigwLCB0aGlzLmNvbnRlbnQuc2l6ZSwgXCJcIikgfTtcblxuLy8gOjogKG51bWJlciwgbnVtYmVyLCA/c3RyaW5nLCA/c3RyaW5nKSDihpIgc3RyaW5nXG4vLyBHZXQgYWxsIHRleHQgYmV0d2VlbiBwb3NpdGlvbnMgYGZyb21gIGFuZCBgdG9gLiBXaGVuXG4vLyBgYmxvY2tTZXBhcmF0b3JgIGlzIGdpdmVuLCBpdCB3aWxsIGJlIGluc2VydGVkIHdoZW5ldmVyIGEgbmV3XG4vLyBibG9jayBub2RlIGlzIHN0YXJ0ZWQuIFdoZW4gYGxlYWZUZXh0YCBpcyBnaXZlbiwgaXQnbGwgYmVcbi8vIGluc2VydGVkIGZvciBldmVyeSBub24tdGV4dCBsZWFmIG5vZGUgZW5jb3VudGVyZWQuXG5Ob2RlLnByb3RvdHlwZS50ZXh0QmV0d2VlbiA9IGZ1bmN0aW9uIHRleHRCZXR3ZWVuIChmcm9tLCB0bywgYmxvY2tTZXBhcmF0b3IsIGxlYWZUZXh0KSB7XG4gIHJldHVybiB0aGlzLmNvbnRlbnQudGV4dEJldHdlZW4oZnJvbSwgdG8sIGJsb2NrU2VwYXJhdG9yLCBsZWFmVGV4dClcbn07XG5cbi8vIDo6ID9Ob2RlXG4vLyBSZXR1cm5zIHRoaXMgbm9kZSdzIGZpcnN0IGNoaWxkLCBvciBgbnVsbGAgaWYgdGhlcmUgYXJlIG5vXG4vLyBjaGlsZHJlbi5cbnByb3RvdHlwZUFjY2Vzc29ycyQzLmZpcnN0Q2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5jb250ZW50LmZpcnN0Q2hpbGQgfTtcblxuLy8gOjogP05vZGVcbi8vIFJldHVybnMgdGhpcyBub2RlJ3MgbGFzdCBjaGlsZCwgb3IgYG51bGxgIGlmIHRoZXJlIGFyZSBub1xuLy8gY2hpbGRyZW4uXG5wcm90b3R5cGVBY2Nlc3NvcnMkMy5sYXN0Q2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5jb250ZW50Lmxhc3RDaGlsZCB9O1xuXG4vLyA6OiAoTm9kZSkg4oaSIGJvb2xcbi8vIFRlc3Qgd2hldGhlciB0d28gbm9kZXMgcmVwcmVzZW50IHRoZSBzYW1lIHBpZWNlIG9mIGRvY3VtZW50LlxuTm9kZS5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSAob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMgPT0gb3RoZXIgfHwgKHRoaXMuc2FtZU1hcmt1cChvdGhlcikgJiYgdGhpcy5jb250ZW50LmVxKG90aGVyLmNvbnRlbnQpKVxufTtcblxuLy8gOjogKE5vZGUpIOKGkiBib29sXG4vLyBDb21wYXJlIHRoZSBtYXJrdXAgKHR5cGUsIGF0dHJpYnV0ZXMsIGFuZCBtYXJrcykgb2YgdGhpcyBub2RlIHRvXG4vLyB0aG9zZSBvZiBhbm90aGVyLiBSZXR1cm5zIGB0cnVlYCBpZiBib3RoIGhhdmUgdGhlIHNhbWUgbWFya3VwLlxuTm9kZS5wcm90b3R5cGUuc2FtZU1hcmt1cCA9IGZ1bmN0aW9uIHNhbWVNYXJrdXAgKG90aGVyKSB7XG4gIHJldHVybiB0aGlzLmhhc01hcmt1cChvdGhlci50eXBlLCBvdGhlci5hdHRycywgb3RoZXIubWFya3MpXG59O1xuXG4vLyA6OiAoTm9kZVR5cGUsID9PYmplY3QsID9bTWFya10pIOKGkiBib29sXG4vLyBDaGVjayB3aGV0aGVyIHRoaXMgbm9kZSdzIG1hcmt1cCBjb3JyZXNwb25kIHRvIHRoZSBnaXZlbiB0eXBlLFxuLy8gYXR0cmlidXRlcywgYW5kIG1hcmtzLlxuTm9kZS5wcm90b3R5cGUuaGFzTWFya3VwID0gZnVuY3Rpb24gaGFzTWFya3VwICh0eXBlLCBhdHRycywgbWFya3MpIHtcbiAgcmV0dXJuIHRoaXMudHlwZSA9PSB0eXBlICYmXG4gICAgY29tcGFyZURlZXAodGhpcy5hdHRycywgYXR0cnMgfHwgdHlwZS5kZWZhdWx0QXR0cnMgfHwgZW1wdHlBdHRycykgJiZcbiAgICBNYXJrLnNhbWVTZXQodGhpcy5tYXJrcywgbWFya3MgfHwgTWFyay5ub25lKVxufTtcblxuLy8gOjogKD9GcmFnbWVudCkg4oaSIE5vZGVcbi8vIENyZWF0ZSBhIG5ldyBub2RlIHdpdGggdGhlIHNhbWUgbWFya3VwIGFzIHRoaXMgbm9kZSwgY29udGFpbmluZ1xuLy8gdGhlIGdpdmVuIGNvbnRlbnQgKG9yIGVtcHR5LCBpZiBubyBjb250ZW50IGlzIGdpdmVuKS5cbk5vZGUucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5IChjb250ZW50KSB7XG4gICAgaWYgKCBjb250ZW50ID09PSB2b2lkIDAgKSBjb250ZW50ID0gbnVsbDtcblxuICBpZiAoY29udGVudCA9PSB0aGlzLmNvbnRlbnQpIHsgcmV0dXJuIHRoaXMgfVxuICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy50eXBlLCB0aGlzLmF0dHJzLCBjb250ZW50LCB0aGlzLm1hcmtzKVxufTtcblxuLy8gOjogKFtNYXJrXSkg4oaSIE5vZGVcbi8vIENyZWF0ZSBhIGNvcHkgb2YgdGhpcyBub2RlLCB3aXRoIHRoZSBnaXZlbiBzZXQgb2YgbWFya3MgaW5zdGVhZFxuLy8gb2YgdGhlIG5vZGUncyBvd24gbWFya3MuXG5Ob2RlLnByb3RvdHlwZS5tYXJrID0gZnVuY3Rpb24gbWFyayAobWFya3MpIHtcbiAgcmV0dXJuIG1hcmtzID09IHRoaXMubWFya3MgPyB0aGlzIDogbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy50eXBlLCB0aGlzLmF0dHJzLCB0aGlzLmNvbnRlbnQsIG1hcmtzKVxufTtcblxuLy8gOjogKG51bWJlciwgP251bWJlcikg4oaSIE5vZGVcbi8vIENyZWF0ZSBhIGNvcHkgb2YgdGhpcyBub2RlIHdpdGggb25seSB0aGUgY29udGVudCBiZXR3ZWVuIHRoZVxuLy8gZ2l2ZW4gcG9zaXRpb25zLiBJZiBgdG9gIGlzIG5vdCBnaXZlbiwgaXQgZGVmYXVsdHMgdG8gdGhlIGVuZCBvZlxuLy8gdGhlIG5vZGUuXG5Ob2RlLnByb3RvdHlwZS5jdXQgPSBmdW5jdGlvbiBjdXQgKGZyb20sIHRvKSB7XG4gIGlmIChmcm9tID09IDAgJiYgdG8gPT0gdGhpcy5jb250ZW50LnNpemUpIHsgcmV0dXJuIHRoaXMgfVxuICByZXR1cm4gdGhpcy5jb3B5KHRoaXMuY29udGVudC5jdXQoZnJvbSwgdG8pKVxufTtcblxuLy8gOjogKG51bWJlciwgP251bWJlcikg4oaSIFNsaWNlXG4vLyBDdXQgb3V0IHRoZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBiZXR3ZWVuIHRoZSBnaXZlbiBwb3NpdGlvbnMsIGFuZFxuLy8gcmV0dXJuIGl0IGFzIGEgYFNsaWNlYCBvYmplY3QuXG5Ob2RlLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChmcm9tLCB0bywgaW5jbHVkZVBhcmVudHMpIHtcbiAgICBpZiAoIHRvID09PSB2b2lkIDAgKSB0byA9IHRoaXMuY29udGVudC5zaXplO1xuICAgIGlmICggaW5jbHVkZVBhcmVudHMgPT09IHZvaWQgMCApIGluY2x1ZGVQYXJlbnRzID0gZmFsc2U7XG5cbiAgaWYgKGZyb20gPT0gdG8pIHsgcmV0dXJuIFNsaWNlLmVtcHR5IH1cblxuICB2YXIgJGZyb20gPSB0aGlzLnJlc29sdmUoZnJvbSksICR0byA9IHRoaXMucmVzb2x2ZSh0byk7XG4gIHZhciBkZXB0aCA9IGluY2x1ZGVQYXJlbnRzID8gMCA6ICRmcm9tLnNoYXJlZERlcHRoKHRvKTtcbiAgdmFyIHN0YXJ0ID0gJGZyb20uc3RhcnQoZGVwdGgpLCBub2RlID0gJGZyb20ubm9kZShkZXB0aCk7XG4gIHZhciBjb250ZW50ID0gbm9kZS5jb250ZW50LmN1dCgkZnJvbS5wb3MgLSBzdGFydCwgJHRvLnBvcyAtIHN0YXJ0KTtcbiAgcmV0dXJuIG5ldyBTbGljZShjb250ZW50LCAkZnJvbS5kZXB0aCAtIGRlcHRoLCAkdG8uZGVwdGggLSBkZXB0aClcbn07XG5cbi8vIDo6IChudW1iZXIsIG51bWJlciwgU2xpY2UpIOKGkiBOb2RlXG4vLyBSZXBsYWNlIHRoZSBwYXJ0IG9mIHRoZSBkb2N1bWVudCBiZXR3ZWVuIHRoZSBnaXZlbiBwb3NpdGlvbnMgd2l0aFxuLy8gdGhlIGdpdmVuIHNsaWNlLiBUaGUgc2xpY2UgbXVzdCAnZml0JywgbWVhbmluZyBpdHMgb3BlbiBzaWRlc1xuLy8gbXVzdCBiZSBhYmxlIHRvIGNvbm5lY3QgdG8gdGhlIHN1cnJvdW5kaW5nIGNvbnRlbnQsIGFuZCBpdHNcbi8vIGNvbnRlbnQgbm9kZXMgbXVzdCBiZSB2YWxpZCBjaGlsZHJlbiBmb3IgdGhlIG5vZGUgdGhleSBhcmUgcGxhY2VkXG4vLyBpbnRvLiBJZiBhbnkgb2YgdGhpcyBpcyB2aW9sYXRlZCwgYW4gZXJyb3Igb2YgdHlwZVxuLy8gW2BSZXBsYWNlRXJyb3JgXSgjbW9kZWwuUmVwbGFjZUVycm9yKSBpcyB0aHJvd24uXG5Ob2RlLnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSQxIChmcm9tLCB0bywgc2xpY2UpIHtcbiAgcmV0dXJuIHJlcGxhY2UodGhpcy5yZXNvbHZlKGZyb20pLCB0aGlzLnJlc29sdmUodG8pLCBzbGljZSlcbn07XG5cbi8vIDo6IChudW1iZXIpIOKGkiA/Tm9kZVxuLy8gRmluZCB0aGUgbm9kZSBkaXJlY3RseSBhZnRlciB0aGUgZ2l2ZW4gcG9zaXRpb24uXG5Ob2RlLnByb3RvdHlwZS5ub2RlQXQgPSBmdW5jdGlvbiBub2RlQXQgKHBvcykge1xuICBmb3IgKHZhciBub2RlID0gdGhpczs7KSB7XG4gICAgdmFyIHJlZiA9IG5vZGUuY29udGVudC5maW5kSW5kZXgocG9zKTtcbiAgICAgIHZhciBpbmRleCA9IHJlZi5pbmRleDtcbiAgICAgIHZhciBvZmZzZXQgPSByZWYub2Zmc2V0O1xuICAgIG5vZGUgPSBub2RlLm1heWJlQ2hpbGQoaW5kZXgpO1xuICAgIGlmICghbm9kZSkgeyByZXR1cm4gbnVsbCB9XG4gICAgaWYgKG9mZnNldCA9PSBwb3MgfHwgbm9kZS5pc1RleHQpIHsgcmV0dXJuIG5vZGUgfVxuICAgIHBvcyAtPSBvZmZzZXQgKyAxO1xuICB9XG59O1xuXG4vLyA6OiAobnVtYmVyKSDihpIge25vZGU6ID9Ob2RlLCBpbmRleDogbnVtYmVyLCBvZmZzZXQ6IG51bWJlcn1cbi8vIEZpbmQgdGhlIChkaXJlY3QpIGNoaWxkIG5vZGUgYWZ0ZXIgdGhlIGdpdmVuIG9mZnNldCwgaWYgYW55LFxuLy8gYW5kIHJldHVybiBpdCBhbG9uZyB3aXRoIGl0cyBpbmRleCBhbmQgb2Zmc2V0IHJlbGF0aXZlIHRvIHRoaXNcbi8vIG5vZGUuXG5Ob2RlLnByb3RvdHlwZS5jaGlsZEFmdGVyID0gZnVuY3Rpb24gY2hpbGRBZnRlciAocG9zKSB7XG4gIHZhciByZWYgPSB0aGlzLmNvbnRlbnQuZmluZEluZGV4KHBvcyk7XG4gICAgdmFyIGluZGV4ID0gcmVmLmluZGV4O1xuICAgIHZhciBvZmZzZXQgPSByZWYub2Zmc2V0O1xuICByZXR1cm4ge25vZGU6IHRoaXMuY29udGVudC5tYXliZUNoaWxkKGluZGV4KSwgaW5kZXg6IGluZGV4LCBvZmZzZXQ6IG9mZnNldH1cbn07XG5cbi8vIDo6IChudW1iZXIpIOKGkiB7bm9kZTogP05vZGUsIGluZGV4OiBudW1iZXIsIG9mZnNldDogbnVtYmVyfVxuLy8gRmluZCB0aGUgKGRpcmVjdCkgY2hpbGQgbm9kZSBiZWZvcmUgdGhlIGdpdmVuIG9mZnNldCwgaWYgYW55LFxuLy8gYW5kIHJldHVybiBpdCBhbG9uZyB3aXRoIGl0cyBpbmRleCBhbmQgb2Zmc2V0IHJlbGF0aXZlIHRvIHRoaXNcbi8vIG5vZGUuXG5Ob2RlLnByb3RvdHlwZS5jaGlsZEJlZm9yZSA9IGZ1bmN0aW9uIGNoaWxkQmVmb3JlIChwb3MpIHtcbiAgaWYgKHBvcyA9PSAwKSB7IHJldHVybiB7bm9kZTogbnVsbCwgaW5kZXg6IDAsIG9mZnNldDogMH0gfVxuICB2YXIgcmVmID0gdGhpcy5jb250ZW50LmZpbmRJbmRleChwb3MpO1xuICAgIHZhciBpbmRleCA9IHJlZi5pbmRleDtcbiAgICB2YXIgb2Zmc2V0ID0gcmVmLm9mZnNldDtcbiAgaWYgKG9mZnNldCA8IHBvcykgeyByZXR1cm4ge25vZGU6IHRoaXMuY29udGVudC5jaGlsZChpbmRleCksIGluZGV4OiBpbmRleCwgb2Zmc2V0OiBvZmZzZXR9IH1cbiAgdmFyIG5vZGUgPSB0aGlzLmNvbnRlbnQuY2hpbGQoaW5kZXggLSAxKTtcbiAgcmV0dXJuIHtub2RlOiBub2RlLCBpbmRleDogaW5kZXggLSAxLCBvZmZzZXQ6IG9mZnNldCAtIG5vZGUubm9kZVNpemV9XG59O1xuXG4vLyA6OiAobnVtYmVyKSDihpIgUmVzb2x2ZWRQb3Ncbi8vIFJlc29sdmUgdGhlIGdpdmVuIHBvc2l0aW9uIGluIHRoZSBkb2N1bWVudCwgcmV0dXJuaW5nIGFuXG4vLyBbb2JqZWN0XSgjbW9kZWwuUmVzb2x2ZWRQb3MpIHdpdGggaW5mb3JtYXRpb24gYWJvdXQgaXRzIGNvbnRleHQuXG5Ob2RlLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSAocG9zKSB7IHJldHVybiBSZXNvbHZlZFBvcy5yZXNvbHZlQ2FjaGVkKHRoaXMsIHBvcykgfTtcblxuTm9kZS5wcm90b3R5cGUucmVzb2x2ZU5vQ2FjaGUgPSBmdW5jdGlvbiByZXNvbHZlTm9DYWNoZSAocG9zKSB7IHJldHVybiBSZXNvbHZlZFBvcy5yZXNvbHZlKHRoaXMsIHBvcykgfTtcblxuLy8gOjogKG51bWJlciwgbnVtYmVyLCB1bmlvbjxNYXJrLCBNYXJrVHlwZT4pIOKGkiBib29sXG4vLyBUZXN0IHdoZXRoZXIgYSBnaXZlbiBtYXJrIG9yIG1hcmsgdHlwZSBvY2N1cnMgaW4gdGhpcyBkb2N1bWVudFxuLy8gYmV0d2VlbiB0aGUgdHdvIGdpdmVuIHBvc2l0aW9ucy5cbk5vZGUucHJvdG90eXBlLnJhbmdlSGFzTWFyayA9IGZ1bmN0aW9uIHJhbmdlSGFzTWFyayAoZnJvbSwgdG8sIHR5cGUpIHtcbiAgdmFyIGZvdW5kID0gZmFsc2U7XG4gIGlmICh0byA+IGZyb20pIHsgdGhpcy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKHR5cGUuaXNJblNldChub2RlLm1hcmtzKSkgeyBmb3VuZCA9IHRydWU7IH1cbiAgICByZXR1cm4gIWZvdW5kXG4gIH0pOyB9XG4gIHJldHVybiBmb3VuZFxufTtcblxuLy8gOjogYm9vbFxuLy8gVHJ1ZSB3aGVuIHRoaXMgaXMgYSBibG9jayAobm9uLWlubGluZSBub2RlKVxucHJvdG90eXBlQWNjZXNzb3JzJDMuaXNCbG9jay5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnR5cGUuaXNCbG9jayB9O1xuXG4vLyA6OiBib29sXG4vLyBUcnVlIHdoZW4gdGhpcyBpcyBhIHRleHRibG9jayBub2RlLCBhIGJsb2NrIG5vZGUgd2l0aCBpbmxpbmVcbi8vIGNvbnRlbnQuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMy5pc1RleHRibG9jay5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnR5cGUuaXNUZXh0YmxvY2sgfTtcblxuLy8gOjogYm9vbFxuLy8gVHJ1ZSB3aGVuIHRoaXMgbm9kZSBhbGxvd3MgaW5saW5lIGNvbnRlbnQuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMy5pbmxpbmVDb250ZW50LmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMudHlwZS5pbmxpbmVDb250ZW50IH07XG5cbi8vIDo6IGJvb2xcbi8vIFRydWUgd2hlbiB0aGlzIGlzIGFuIGlubGluZSBub2RlIChhIHRleHQgbm9kZSBvciBhIG5vZGUgdGhhdCBjYW5cbi8vIGFwcGVhciBhbW9uZyB0ZXh0KS5cbnByb3RvdHlwZUFjY2Vzc29ycyQzLmlzSW5saW5lLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMudHlwZS5pc0lubGluZSB9O1xuXG4vLyA6OiBib29sXG4vLyBUcnVlIHdoZW4gdGhpcyBpcyBhIHRleHQgbm9kZS5cbnByb3RvdHlwZUFjY2Vzc29ycyQzLmlzVGV4dC5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnR5cGUuaXNUZXh0IH07XG5cbi8vIDo6IGJvb2xcbi8vIFRydWUgd2hlbiB0aGlzIGlzIGEgbGVhZiBub2RlLlxucHJvdG90eXBlQWNjZXNzb3JzJDMuaXNMZWFmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMudHlwZS5pc0xlYWYgfTtcblxuLy8gOjogYm9vbFxuLy8gVHJ1ZSB3aGVuIHRoaXMgaXMgYW4gYXRvbSwgaS5lLiB3aGVuIGl0IGRvZXMgbm90IGhhdmUgZGlyZWN0bHlcbi8vIGVkaXRhYmxlIGNvbnRlbnQuIFRoaXMgaXMgdXN1YWxseSB0aGUgc2FtZSBhcyBgaXNMZWFmYCwgYnV0IGNhblxuLy8gYmUgY29uZmlndXJlZCB3aXRoIHRoZSBbYGF0b21gIHByb3BlcnR5XSgjbW9kZWwuTm9kZVNwZWMuYXRvbSkgb25cbi8vIGEgbm9kZSdzIHNwZWMgKHR5cGljYWxseSB1c2VkIHdoZW4gdGhlIG5vZGUgaXMgZGlzcGxheWVkIGFzIGFuXG4vLyB1bmVkaXRhYmxlIFtub2RlIHZpZXddKCN2aWV3Lk5vZGVWaWV3KSkuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMy5pc0F0b20uZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy50eXBlLmlzQXRvbSB9O1xuXG4vLyA6OiAoKSDihpIgc3RyaW5nXG4vLyBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBub2RlIGZvciBkZWJ1Z2dpbmdcbi8vIHB1cnBvc2VzLlxuTm9kZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIGlmICh0aGlzLnR5cGUuc3BlYy50b0RlYnVnU3RyaW5nKSB7IHJldHVybiB0aGlzLnR5cGUuc3BlYy50b0RlYnVnU3RyaW5nKHRoaXMpIH1cbiAgdmFyIG5hbWUgPSB0aGlzLnR5cGUubmFtZTtcbiAgaWYgKHRoaXMuY29udGVudC5zaXplKVxuICAgIHsgbmFtZSArPSBcIihcIiArIHRoaXMuY29udGVudC50b1N0cmluZ0lubmVyKCkgKyBcIilcIjsgfVxuICByZXR1cm4gd3JhcE1hcmtzKHRoaXMubWFya3MsIG5hbWUpXG59O1xuXG4vLyA6OiAobnVtYmVyKSDihpIgQ29udGVudE1hdGNoXG4vLyBHZXQgdGhlIGNvbnRlbnQgbWF0Y2ggaW4gdGhpcyBub2RlIGF0IHRoZSBnaXZlbiBpbmRleC5cbk5vZGUucHJvdG90eXBlLmNvbnRlbnRNYXRjaEF0ID0gZnVuY3Rpb24gY29udGVudE1hdGNoQXQgKGluZGV4KSB7XG4gIHZhciBtYXRjaCA9IHRoaXMudHlwZS5jb250ZW50TWF0Y2gubWF0Y2hGcmFnbWVudCh0aGlzLmNvbnRlbnQsIDAsIGluZGV4KTtcbiAgaWYgKCFtYXRjaCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJDYWxsZWQgY29udGVudE1hdGNoQXQgb24gYSBub2RlIHdpdGggaW52YWxpZCBjb250ZW50XCIpIH1cbiAgcmV0dXJuIG1hdGNoXG59O1xuXG4vLyA6OiAobnVtYmVyLCBudW1iZXIsID9GcmFnbWVudCwgP251bWJlciwgP251bWJlcikg4oaSIGJvb2xcbi8vIFRlc3Qgd2hldGhlciByZXBsYWNpbmcgdGhlIHJhbmdlIGJldHdlZW4gYGZyb21gIGFuZCBgdG9gIChieVxuLy8gY2hpbGQgaW5kZXgpIHdpdGggdGhlIGdpdmVuIHJlcGxhY2VtZW50IGZyYWdtZW50ICh3aGljaCBkZWZhdWx0c1xuLy8gdG8gdGhlIGVtcHR5IGZyYWdtZW50KSB3b3VsZCBsZWF2ZSB0aGUgbm9kZSdzIGNvbnRlbnQgdmFsaWQuIFlvdVxuLy8gY2FuIG9wdGlvbmFsbHkgcGFzcyBgc3RhcnRgIGFuZCBgZW5kYCBpbmRpY2VzIGludG8gdGhlXG4vLyByZXBsYWNlbWVudCBmcmFnbWVudC5cbk5vZGUucHJvdG90eXBlLmNhblJlcGxhY2UgPSBmdW5jdGlvbiBjYW5SZXBsYWNlIChmcm9tLCB0bywgcmVwbGFjZW1lbnQsIHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAoIHJlcGxhY2VtZW50ID09PSB2b2lkIDAgKSByZXBsYWNlbWVudCA9IEZyYWdtZW50LmVtcHR5O1xuICAgIGlmICggc3RhcnQgPT09IHZvaWQgMCApIHN0YXJ0ID0gMDtcbiAgICBpZiAoIGVuZCA9PT0gdm9pZCAwICkgZW5kID0gcmVwbGFjZW1lbnQuY2hpbGRDb3VudDtcblxuICB2YXIgb25lID0gdGhpcy5jb250ZW50TWF0Y2hBdChmcm9tKS5tYXRjaEZyYWdtZW50KHJlcGxhY2VtZW50LCBzdGFydCwgZW5kKTtcbiAgdmFyIHR3byA9IG9uZSAmJiBvbmUubWF0Y2hGcmFnbWVudCh0aGlzLmNvbnRlbnQsIHRvKTtcbiAgaWYgKCF0d28gfHwgIXR3by52YWxpZEVuZCkgeyByZXR1cm4gZmFsc2UgfVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykgeyBpZiAoIXRoaXMudHlwZS5hbGxvd3NNYXJrcyhyZXBsYWNlbWVudC5jaGlsZChpKS5tYXJrcykpIHsgcmV0dXJuIGZhbHNlIH0gfVxuICByZXR1cm4gdHJ1ZVxufTtcblxuLy8gOjogKG51bWJlciwgbnVtYmVyLCBOb2RlVHlwZSwgP1tNYXJrXSkg4oaSIGJvb2xcbi8vIFRlc3Qgd2hldGhlciByZXBsYWNpbmcgdGhlIHJhbmdlIGBmcm9tYCB0byBgdG9gIChieSBpbmRleCkgd2l0aCBhXG4vLyBub2RlIG9mIHRoZSBnaXZlbiB0eXBlIHdvdWxkIGxlYXZlIHRoZSBub2RlJ3MgY29udGVudCB2YWxpZC5cbk5vZGUucHJvdG90eXBlLmNhblJlcGxhY2VXaXRoID0gZnVuY3Rpb24gY2FuUmVwbGFjZVdpdGggKGZyb20sIHRvLCB0eXBlLCBtYXJrcykge1xuICBpZiAobWFya3MgJiYgIXRoaXMudHlwZS5hbGxvd3NNYXJrcyhtYXJrcykpIHsgcmV0dXJuIGZhbHNlIH1cbiAgdmFyIHN0YXJ0ID0gdGhpcy5jb250ZW50TWF0Y2hBdChmcm9tKS5tYXRjaFR5cGUodHlwZSk7XG4gIHZhciBlbmQgPSBzdGFydCAmJiBzdGFydC5tYXRjaEZyYWdtZW50KHRoaXMuY29udGVudCwgdG8pO1xuICByZXR1cm4gZW5kID8gZW5kLnZhbGlkRW5kIDogZmFsc2Vcbn07XG5cbi8vIDo6IChOb2RlKSDihpIgYm9vbFxuLy8gVGVzdCB3aGV0aGVyIHRoZSBnaXZlbiBub2RlJ3MgY29udGVudCBjb3VsZCBiZSBhcHBlbmRlZCB0byB0aGlzXG4vLyBub2RlLiBJZiB0aGF0IG5vZGUgaXMgZW1wdHksIHRoaXMgd2lsbCBvbmx5IHJldHVybiB0cnVlIGlmIHRoZXJlXG4vLyBpcyBhdCBsZWFzdCBvbmUgbm9kZSB0eXBlIHRoYXQgY2FuIGFwcGVhciBpbiBib3RoIG5vZGVzICh0byBhdm9pZFxuLy8gbWVyZ2luZyBjb21wbGV0ZWx5IGluY29tcGF0aWJsZSBub2RlcykuXG5Ob2RlLnByb3RvdHlwZS5jYW5BcHBlbmQgPSBmdW5jdGlvbiBjYW5BcHBlbmQgKG90aGVyKSB7XG4gIGlmIChvdGhlci5jb250ZW50LnNpemUpIHsgcmV0dXJuIHRoaXMuY2FuUmVwbGFjZSh0aGlzLmNoaWxkQ291bnQsIHRoaXMuY2hpbGRDb3VudCwgb3RoZXIuY29udGVudCkgfVxuICBlbHNlIHsgcmV0dXJuIHRoaXMudHlwZS5jb21wYXRpYmxlQ29udGVudChvdGhlci50eXBlKSB9XG59O1xuXG4vLyA6OiAoKVxuLy8gQ2hlY2sgd2hldGhlciB0aGlzIG5vZGUgYW5kIGl0cyBkZXNjZW5kYW50cyBjb25mb3JtIHRvIHRoZVxuLy8gc2NoZW1hLCBhbmQgcmFpc2UgZXJyb3Igd2hlbiB0aGV5IGRvIG5vdC5cbk5vZGUucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24gY2hlY2sgKCkge1xuICBpZiAoIXRoaXMudHlwZS52YWxpZENvbnRlbnQodGhpcy5jb250ZW50KSlcbiAgICB7IHRocm93IG5ldyBSYW5nZUVycm9yKChcIkludmFsaWQgY29udGVudCBmb3Igbm9kZSBcIiArICh0aGlzLnR5cGUubmFtZSkgKyBcIjogXCIgKyAodGhpcy5jb250ZW50LnRvU3RyaW5nKCkuc2xpY2UoMCwgNTApKSkpIH1cbiAgdmFyIGNvcHkgPSBNYXJrLm5vbmU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tYXJrcy5sZW5ndGg7IGkrKykgeyBjb3B5ID0gdGhpcy5tYXJrc1tpXS5hZGRUb1NldChjb3B5KTsgfVxuICBpZiAoIU1hcmsuc2FtZVNldChjb3B5LCB0aGlzLm1hcmtzKSlcbiAgICB7IHRocm93IG5ldyBSYW5nZUVycm9yKChcIkludmFsaWQgY29sbGVjdGlvbiBvZiBtYXJrcyBmb3Igbm9kZSBcIiArICh0aGlzLnR5cGUubmFtZSkgKyBcIjogXCIgKyAodGhpcy5tYXJrcy5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0udHlwZS5uYW1lOyB9KSkpKSB9XG4gIHRoaXMuY29udGVudC5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBub2RlLmNoZWNrKCk7IH0pO1xufTtcblxuLy8gOjogKCkg4oaSIE9iamVjdFxuLy8gUmV0dXJuIGEgSlNPTi1zZXJpYWxpemVhYmxlIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgbm9kZS5cbk5vZGUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHZhciBvYmogPSB7dHlwZTogdGhpcy50eXBlLm5hbWV9O1xuICBmb3IgKHZhciBfIGluIHRoaXMuYXR0cnMpIHtcbiAgICBvYmouYXR0cnMgPSB0aGlzLmF0dHJzO1xuICAgIGJyZWFrXG4gIH1cbiAgaWYgKHRoaXMuY29udGVudC5zaXplKVxuICAgIHsgb2JqLmNvbnRlbnQgPSB0aGlzLmNvbnRlbnQudG9KU09OKCk7IH1cbiAgaWYgKHRoaXMubWFya3MubGVuZ3RoKVxuICAgIHsgb2JqLm1hcmtzID0gdGhpcy5tYXJrcy5tYXAoZnVuY3Rpb24gKG4pIHsgcmV0dXJuIG4udG9KU09OKCk7IH0pOyB9XG4gIHJldHVybiBvYmpcbn07XG5cbi8vIDo6IChTY2hlbWEsIE9iamVjdCkg4oaSIE5vZGVcbi8vIERlc2VyaWFsaXplIGEgbm9kZSBmcm9tIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uLlxuTm9kZS5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OIChzY2hlbWEsIGpzb24pIHtcbiAgaWYgKCFqc29uKSB7IHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgTm9kZS5mcm9tSlNPTlwiKSB9XG4gIHZhciBtYXJrcyA9IG51bGw7XG4gIGlmIChqc29uLm1hcmtzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGpzb24ubWFya3MpKSB7IHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBtYXJrIGRhdGEgZm9yIE5vZGUuZnJvbUpTT05cIikgfVxuICAgIG1hcmtzID0ganNvbi5tYXJrcy5tYXAoc2NoZW1hLm1hcmtGcm9tSlNPTik7XG4gIH1cbiAgaWYgKGpzb24udHlwZSA9PSBcInRleHRcIikge1xuICAgIGlmICh0eXBlb2YganNvbi50ZXh0ICE9IFwic3RyaW5nXCIpIHsgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIHRleHQgbm9kZSBpbiBKU09OXCIpIH1cbiAgICByZXR1cm4gc2NoZW1hLnRleHQoanNvbi50ZXh0LCBtYXJrcylcbiAgfVxuICB2YXIgY29udGVudCA9IEZyYWdtZW50LmZyb21KU09OKHNjaGVtYSwganNvbi5jb250ZW50KTtcbiAgcmV0dXJuIHNjaGVtYS5ub2RlVHlwZShqc29uLnR5cGUpLmNyZWF0ZShqc29uLmF0dHJzLCBjb250ZW50LCBtYXJrcylcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDMgKTtcblxudmFyIFRleHROb2RlID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoTm9kZSkge1xuICBmdW5jdGlvbiBUZXh0Tm9kZSh0eXBlLCBhdHRycywgY29udGVudCwgbWFya3MpIHtcbiAgICBOb2RlLmNhbGwodGhpcywgdHlwZSwgYXR0cnMsIG51bGwsIG1hcmtzKTtcblxuICAgIGlmICghY29udGVudCkgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkVtcHR5IHRleHQgbm9kZXMgYXJlIG5vdCBhbGxvd2VkXCIpIH1cblxuICAgIHRoaXMudGV4dCA9IGNvbnRlbnQ7XG4gIH1cblxuICBpZiAoIE5vZGUgKSBUZXh0Tm9kZS5fX3Byb3RvX18gPSBOb2RlO1xuICBUZXh0Tm9kZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBOb2RlICYmIE5vZGUucHJvdG90eXBlICk7XG4gIFRleHROb2RlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRleHROb2RlO1xuXG4gIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMSA9IHsgdGV4dENvbnRlbnQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sbm9kZVNpemU6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuICBUZXh0Tm9kZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gICAgaWYgKHRoaXMudHlwZS5zcGVjLnRvRGVidWdTdHJpbmcpIHsgcmV0dXJuIHRoaXMudHlwZS5zcGVjLnRvRGVidWdTdHJpbmcodGhpcykgfVxuICAgIHJldHVybiB3cmFwTWFya3ModGhpcy5tYXJrcywgSlNPTi5zdHJpbmdpZnkodGhpcy50ZXh0KSlcbiAgfTtcblxuICBwcm90b3R5cGVBY2Nlc3NvcnMkMS50ZXh0Q29udGVudC5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnRleHQgfTtcblxuICBUZXh0Tm9kZS5wcm90b3R5cGUudGV4dEJldHdlZW4gPSBmdW5jdGlvbiB0ZXh0QmV0d2VlbiAoZnJvbSwgdG8pIHsgcmV0dXJuIHRoaXMudGV4dC5zbGljZShmcm9tLCB0bykgfTtcblxuICBwcm90b3R5cGVBY2Nlc3NvcnMkMS5ub2RlU2l6ZS5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnRleHQubGVuZ3RoIH07XG5cbiAgVGV4dE5vZGUucHJvdG90eXBlLm1hcmsgPSBmdW5jdGlvbiBtYXJrIChtYXJrcykge1xuICAgIHJldHVybiBtYXJrcyA9PSB0aGlzLm1hcmtzID8gdGhpcyA6IG5ldyBUZXh0Tm9kZSh0aGlzLnR5cGUsIHRoaXMuYXR0cnMsIHRoaXMudGV4dCwgbWFya3MpXG4gIH07XG5cbiAgVGV4dE5vZGUucHJvdG90eXBlLndpdGhUZXh0ID0gZnVuY3Rpb24gd2l0aFRleHQgKHRleHQpIHtcbiAgICBpZiAodGV4dCA9PSB0aGlzLnRleHQpIHsgcmV0dXJuIHRoaXMgfVxuICAgIHJldHVybiBuZXcgVGV4dE5vZGUodGhpcy50eXBlLCB0aGlzLmF0dHJzLCB0ZXh0LCB0aGlzLm1hcmtzKVxuICB9O1xuXG4gIFRleHROb2RlLnByb3RvdHlwZS5jdXQgPSBmdW5jdGlvbiBjdXQgKGZyb20sIHRvKSB7XG4gICAgaWYgKCBmcm9tID09PSB2b2lkIDAgKSBmcm9tID0gMDtcbiAgICBpZiAoIHRvID09PSB2b2lkIDAgKSB0byA9IHRoaXMudGV4dC5sZW5ndGg7XG5cbiAgICBpZiAoZnJvbSA9PSAwICYmIHRvID09IHRoaXMudGV4dC5sZW5ndGgpIHsgcmV0dXJuIHRoaXMgfVxuICAgIHJldHVybiB0aGlzLndpdGhUZXh0KHRoaXMudGV4dC5zbGljZShmcm9tLCB0bykpXG4gIH07XG5cbiAgVGV4dE5vZGUucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG90aGVyKSB7XG4gICAgcmV0dXJuIHRoaXMuc2FtZU1hcmt1cChvdGhlcikgJiYgdGhpcy50ZXh0ID09IG90aGVyLnRleHRcbiAgfTtcblxuICBUZXh0Tm9kZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICB2YXIgYmFzZSA9IE5vZGUucHJvdG90eXBlLnRvSlNPTi5jYWxsKHRoaXMpO1xuICAgIGJhc2UudGV4dCA9IHRoaXMudGV4dDtcbiAgICByZXR1cm4gYmFzZVxuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBUZXh0Tm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQxICk7XG5cbiAgcmV0dXJuIFRleHROb2RlO1xufShOb2RlKSk7XG5cbmZ1bmN0aW9uIHdyYXBNYXJrcyhtYXJrcywgc3RyKSB7XG4gIGZvciAodmFyIGkgPSBtYXJrcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcbiAgICB7IHN0ciA9IG1hcmtzW2ldLnR5cGUubmFtZSArIFwiKFwiICsgc3RyICsgXCIpXCI7IH1cbiAgcmV0dXJuIHN0clxufVxuXG4vLyA6Oi0gSW5zdGFuY2VzIG9mIHRoaXMgY2xhc3MgcmVwcmVzZW50IGEgbWF0Y2ggc3RhdGUgb2YgYSBub2RlXG4vLyB0eXBlJ3MgW2NvbnRlbnQgZXhwcmVzc2lvbl0oI21vZGVsLk5vZGVTcGVjLmNvbnRlbnQpLCBhbmQgY2FuIGJlXG4vLyB1c2VkIHRvIGZpbmQgb3V0IHdoZXRoZXIgZnVydGhlciBjb250ZW50IG1hdGNoZXMgaGVyZSwgYW5kIHdoZXRoZXJcbi8vIGEgZ2l2ZW4gcG9zaXRpb24gaXMgYSB2YWxpZCBlbmQgb2YgdGhlIG5vZGUuXG52YXIgQ29udGVudE1hdGNoID0gZnVuY3Rpb24gQ29udGVudE1hdGNoKHZhbGlkRW5kKSB7XG4gIC8vIDo6IGJvb2xcbiAgLy8gVHJ1ZSB3aGVuIHRoaXMgbWF0Y2ggc3RhdGUgcmVwcmVzZW50cyBhIHZhbGlkIGVuZCBvZiB0aGUgbm9kZS5cbiAgdGhpcy52YWxpZEVuZCA9IHZhbGlkRW5kO1xuICB0aGlzLm5leHQgPSBbXTtcbiAgdGhpcy53cmFwQ2FjaGUgPSBbXTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMkNCA9IHsgaW5saW5lQ29udGVudDogeyBjb25maWd1cmFibGU6IHRydWUgfSxkZWZhdWx0VHlwZTogeyBjb25maWd1cmFibGU6IHRydWUgfSxlZGdlQ291bnQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuQ29udGVudE1hdGNoLnBhcnNlID0gZnVuY3Rpb24gcGFyc2UgKHN0cmluZywgbm9kZVR5cGVzKSB7XG4gIHZhciBzdHJlYW0gPSBuZXcgVG9rZW5TdHJlYW0oc3RyaW5nLCBub2RlVHlwZXMpO1xuICBpZiAoc3RyZWFtLm5leHQgPT0gbnVsbCkgeyByZXR1cm4gQ29udGVudE1hdGNoLmVtcHR5IH1cbiAgdmFyIGV4cHIgPSBwYXJzZUV4cHIoc3RyZWFtKTtcbiAgaWYgKHN0cmVhbS5uZXh0KSB7IHN0cmVhbS5lcnIoXCJVbmV4cGVjdGVkIHRyYWlsaW5nIHRleHRcIik7IH1cbiAgdmFyIG1hdGNoID0gZGZhKG5mYShleHByKSk7XG4gIGNoZWNrRm9yRGVhZEVuZHMobWF0Y2gsIHN0cmVhbSk7XG4gIHJldHVybiBtYXRjaFxufTtcblxuLy8gOjogKE5vZGVUeXBlKSDihpIgP0NvbnRlbnRNYXRjaFxuLy8gTWF0Y2ggYSBub2RlIHR5cGUsIHJldHVybmluZyBhIG1hdGNoIGFmdGVyIHRoYXQgbm9kZSBpZlxuLy8gc3VjY2Vzc2Z1bC5cbkNvbnRlbnRNYXRjaC5wcm90b3R5cGUubWF0Y2hUeXBlID0gZnVuY3Rpb24gbWF0Y2hUeXBlICh0eXBlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5uZXh0Lmxlbmd0aDsgaSArPSAyKVxuICAgIHsgaWYgKHRoaXMubmV4dFtpXSA9PSB0eXBlKSB7IHJldHVybiB0aGlzLm5leHRbaSArIDFdIH0gfVxuICByZXR1cm4gbnVsbFxufTtcblxuLy8gOjogKEZyYWdtZW50LCA/bnVtYmVyLCA/bnVtYmVyKSDihpIgP0NvbnRlbnRNYXRjaFxuLy8gVHJ5IHRvIG1hdGNoIGEgZnJhZ21lbnQuIFJldHVybnMgdGhlIHJlc3VsdGluZyBtYXRjaCB3aGVuXG4vLyBzdWNjZXNzZnVsLlxuQ29udGVudE1hdGNoLnByb3RvdHlwZS5tYXRjaEZyYWdtZW50ID0gZnVuY3Rpb24gbWF0Y2hGcmFnbWVudCAoZnJhZywgc3RhcnQsIGVuZCkge1xuICAgIGlmICggc3RhcnQgPT09IHZvaWQgMCApIHN0YXJ0ID0gMDtcbiAgICBpZiAoIGVuZCA9PT0gdm9pZCAwICkgZW5kID0gZnJhZy5jaGlsZENvdW50O1xuXG4gIHZhciBjdXIgPSB0aGlzO1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGN1ciAmJiBpIDwgZW5kOyBpKyspXG4gICAgeyBjdXIgPSBjdXIubWF0Y2hUeXBlKGZyYWcuY2hpbGQoaSkudHlwZSk7IH1cbiAgcmV0dXJuIGN1clxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDQuaW5saW5lQ29udGVudC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBmaXJzdCA9IHRoaXMubmV4dFswXTtcbiAgcmV0dXJuIGZpcnN0ID8gZmlyc3QuaXNJbmxpbmUgOiBmYWxzZVxufTtcblxuLy8gOjogP05vZGVUeXBlXG4vLyBHZXQgdGhlIGZpcnN0IG1hdGNoaW5nIG5vZGUgdHlwZSBhdCB0aGlzIG1hdGNoIHBvc2l0aW9uIHRoYXQgY2FuXG4vLyBiZSBnZW5lcmF0ZWQuXG5wcm90b3R5cGVBY2Nlc3NvcnMkNC5kZWZhdWx0VHlwZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5uZXh0Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIHR5cGUgPSB0aGlzLm5leHRbaV07XG4gICAgaWYgKCEodHlwZS5pc1RleHQgfHwgdHlwZS5oYXNSZXF1aXJlZEF0dHJzKCkpKSB7IHJldHVybiB0eXBlIH1cbiAgfVxufTtcblxuQ29udGVudE1hdGNoLnByb3RvdHlwZS5jb21wYXRpYmxlID0gZnVuY3Rpb24gY29tcGF0aWJsZSAob3RoZXIpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm5leHQubGVuZ3RoOyBpICs9IDIpXG4gICAgeyBmb3IgKHZhciBqID0gMDsgaiA8IG90aGVyLm5leHQubGVuZ3RoOyBqICs9IDIpXG4gICAgICB7IGlmICh0aGlzLm5leHRbaV0gPT0gb3RoZXIubmV4dFtqXSkgeyByZXR1cm4gdHJ1ZSB9IH0gfVxuICByZXR1cm4gZmFsc2Vcbn07XG5cbi8vIDo6IChGcmFnbWVudCwgYm9vbCwgP251bWJlcikg4oaSID9GcmFnbWVudFxuLy8gVHJ5IHRvIG1hdGNoIHRoZSBnaXZlbiBmcmFnbWVudCwgYW5kIGlmIHRoYXQgZmFpbHMsIHNlZSBpZiBpdCBjYW5cbi8vIGJlIG1hZGUgdG8gbWF0Y2ggYnkgaW5zZXJ0aW5nIG5vZGVzIGluIGZyb250IG9mIGl0LiBXaGVuXG4vLyBzdWNjZXNzZnVsLCByZXR1cm4gYSBmcmFnbWVudCBvZiBpbnNlcnRlZCBub2RlcyAod2hpY2ggbWF5IGJlXG4vLyBlbXB0eSBpZiBub3RoaW5nIGhhZCB0byBiZSBpbnNlcnRlZCkuIFdoZW4gYHRvRW5kYCBpcyB0cnVlLCBvbmx5XG4vLyByZXR1cm4gYSBmcmFnbWVudCBpZiB0aGUgcmVzdWx0aW5nIG1hdGNoIGdvZXMgdG8gdGhlIGVuZCBvZiB0aGVcbi8vIGNvbnRlbnQgZXhwcmVzc2lvbi5cbkNvbnRlbnRNYXRjaC5wcm90b3R5cGUuZmlsbEJlZm9yZSA9IGZ1bmN0aW9uIGZpbGxCZWZvcmUgKGFmdGVyLCB0b0VuZCwgc3RhcnRJbmRleCkge1xuICAgIGlmICggdG9FbmQgPT09IHZvaWQgMCApIHRvRW5kID0gZmFsc2U7XG4gICAgaWYgKCBzdGFydEluZGV4ID09PSB2b2lkIDAgKSBzdGFydEluZGV4ID0gMDtcblxuICB2YXIgc2VlbiA9IFt0aGlzXTtcbiAgZnVuY3Rpb24gc2VhcmNoKG1hdGNoLCB0eXBlcykge1xuICAgIHZhciBmaW5pc2hlZCA9IG1hdGNoLm1hdGNoRnJhZ21lbnQoYWZ0ZXIsIHN0YXJ0SW5kZXgpO1xuICAgIGlmIChmaW5pc2hlZCAmJiAoIXRvRW5kIHx8IGZpbmlzaGVkLnZhbGlkRW5kKSlcbiAgICAgIHsgcmV0dXJuIEZyYWdtZW50LmZyb20odHlwZXMubWFwKGZ1bmN0aW9uICh0cCkgeyByZXR1cm4gdHAuY3JlYXRlQW5kRmlsbCgpOyB9KSkgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRjaC5uZXh0Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICB2YXIgdHlwZSA9IG1hdGNoLm5leHRbaV0sIG5leHQgPSBtYXRjaC5uZXh0W2kgKyAxXTtcbiAgICAgIGlmICghKHR5cGUuaXNUZXh0IHx8IHR5cGUuaGFzUmVxdWlyZWRBdHRycygpKSAmJiBzZWVuLmluZGV4T2YobmV4dCkgPT0gLTEpIHtcbiAgICAgICAgc2Vlbi5wdXNoKG5leHQpO1xuICAgICAgICB2YXIgZm91bmQgPSBzZWFyY2gobmV4dCwgdHlwZXMuY29uY2F0KHR5cGUpKTtcbiAgICAgICAgaWYgKGZvdW5kKSB7IHJldHVybiBmb3VuZCB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNlYXJjaCh0aGlzLCBbXSlcbn07XG5cbi8vIDo6IChOb2RlVHlwZSkg4oaSID9bTm9kZVR5cGVdXG4vLyBGaW5kIGEgc2V0IG9mIHdyYXBwaW5nIG5vZGUgdHlwZXMgdGhhdCB3b3VsZCBhbGxvdyBhIG5vZGUgb2YgdGhlXG4vLyBnaXZlbiB0eXBlIHRvIGFwcGVhciBhdCB0aGlzIHBvc2l0aW9uLiBUaGUgcmVzdWx0IG1heSBiZSBlbXB0eVxuLy8gKHdoZW4gaXQgZml0cyBkaXJlY3RseSkgYW5kIHdpbGwgYmUgbnVsbCB3aGVuIG5vIHN1Y2ggd3JhcHBpbmdcbi8vIGV4aXN0cy5cbkNvbnRlbnRNYXRjaC5wcm90b3R5cGUuZmluZFdyYXBwaW5nID0gZnVuY3Rpb24gZmluZFdyYXBwaW5nICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLndyYXBDYWNoZS5sZW5ndGg7IGkgKz0gMilcbiAgICB7IGlmICh0aGlzLndyYXBDYWNoZVtpXSA9PSB0YXJnZXQpIHsgcmV0dXJuIHRoaXMud3JhcENhY2hlW2kgKyAxXSB9IH1cbiAgdmFyIGNvbXB1dGVkID0gdGhpcy5jb21wdXRlV3JhcHBpbmcodGFyZ2V0KTtcbiAgdGhpcy53cmFwQ2FjaGUucHVzaCh0YXJnZXQsIGNvbXB1dGVkKTtcbiAgcmV0dXJuIGNvbXB1dGVkXG59O1xuXG5Db250ZW50TWF0Y2gucHJvdG90eXBlLmNvbXB1dGVXcmFwcGluZyA9IGZ1bmN0aW9uIGNvbXB1dGVXcmFwcGluZyAodGFyZ2V0KSB7XG4gIHZhciBzZWVuID0gT2JqZWN0LmNyZWF0ZShudWxsKSwgYWN0aXZlID0gW3ttYXRjaDogdGhpcywgdHlwZTogbnVsbCwgdmlhOiBudWxsfV07XG4gIHdoaWxlIChhY3RpdmUubGVuZ3RoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSBhY3RpdmUuc2hpZnQoKSwgbWF0Y2ggPSBjdXJyZW50Lm1hdGNoO1xuICAgIGlmIChtYXRjaC5tYXRjaFR5cGUodGFyZ2V0KSkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgZm9yICh2YXIgb2JqID0gY3VycmVudDsgb2JqLnR5cGU7IG9iaiA9IG9iai52aWEpXG4gICAgICAgIHsgcmVzdWx0LnB1c2gob2JqLnR5cGUpOyB9XG4gICAgICByZXR1cm4gcmVzdWx0LnJldmVyc2UoKVxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdGNoLm5leHQubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgIHZhciB0eXBlID0gbWF0Y2gubmV4dFtpXTtcbiAgICAgIGlmICghdHlwZS5pc0xlYWYgJiYgIXR5cGUuaGFzUmVxdWlyZWRBdHRycygpICYmICEodHlwZS5uYW1lIGluIHNlZW4pICYmICghY3VycmVudC50eXBlIHx8IG1hdGNoLm5leHRbaSArIDFdLnZhbGlkRW5kKSkge1xuICAgICAgICBhY3RpdmUucHVzaCh7bWF0Y2g6IHR5cGUuY29udGVudE1hdGNoLCB0eXBlOiB0eXBlLCB2aWE6IGN1cnJlbnR9KTtcbiAgICAgICAgc2Vlblt0eXBlLm5hbWVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8vIDo6IG51bWJlclxuLy8gVGhlIG51bWJlciBvZiBvdXRnb2luZyBlZGdlcyB0aGlzIG5vZGUgaGFzIGluIHRoZSBmaW5pdGVcbi8vIGF1dG9tYXRvbiB0aGF0IGRlc2NyaWJlcyB0aGUgY29udGVudCBleHByZXNzaW9uLlxucHJvdG90eXBlQWNjZXNzb3JzJDQuZWRnZUNvdW50LmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMubmV4dC5sZW5ndGggPj4gMVxufTtcblxuLy8gOjogKG51bWJlcikg4oaSIHt0eXBlOiBOb2RlVHlwZSwgbmV4dDogQ29udGVudE1hdGNofVxuLy8gR2V0IHRoZSBfbl/igIt0aCBvdXRnb2luZyBlZGdlIGZyb20gdGhpcyBub2RlIGluIHRoZSBmaW5pdGVcbi8vIGF1dG9tYXRvbiB0aGF0IGRlc2NyaWJlcyB0aGUgY29udGVudCBleHByZXNzaW9uLlxuQ29udGVudE1hdGNoLnByb3RvdHlwZS5lZGdlID0gZnVuY3Rpb24gZWRnZSAobikge1xuICB2YXIgaSA9IG4gPDwgMTtcbiAgaWYgKGkgPj0gdGhpcy5uZXh0Lmxlbmd0aCkgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcigoXCJUaGVyZSdzIG5vIFwiICsgbiArIFwidGggZWRnZSBpbiB0aGlzIGNvbnRlbnQgbWF0Y2hcIikpIH1cbiAgcmV0dXJuIHt0eXBlOiB0aGlzLm5leHRbaV0sIG5leHQ6IHRoaXMubmV4dFtpICsgMV19XG59O1xuXG5Db250ZW50TWF0Y2gucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgc2VlbiA9IFtdO1xuICBmdW5jdGlvbiBzY2FuKG0pIHtcbiAgICBzZWVuLnB1c2gobSk7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBtLm5leHQubGVuZ3RoOyBpICs9IDIpXG4gICAgICB7IGlmIChzZWVuLmluZGV4T2YobS5uZXh0W2ldKSA9PSAtMSkgeyBzY2FuKG0ubmV4dFtpXSk7IH0gfVxuICB9XG4gIHNjYW4odGhpcyk7XG4gIHJldHVybiBzZWVuLm1hcChmdW5jdGlvbiAobSwgaSkge1xuICAgIHZhciBvdXQgPSBpICsgKG0udmFsaWRFbmQgPyBcIipcIiA6IFwiIFwiKSArIFwiIFwiO1xuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IG0ubmV4dC5sZW5ndGg7IGkkMSArPSAyKVxuICAgICAgeyBvdXQgKz0gKGkkMSA/IFwiLCBcIiA6IFwiXCIpICsgbS5uZXh0W2kkMV0ubmFtZSArIFwiLT5cIiArIHNlZW4uaW5kZXhPZihtLm5leHRbaSQxICsgMV0pOyB9XG4gICAgcmV0dXJuIG91dFxuICB9KS5qb2luKFwiXFxuXCIpXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggQ29udGVudE1hdGNoLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDQgKTtcblxuQ29udGVudE1hdGNoLmVtcHR5ID0gbmV3IENvbnRlbnRNYXRjaCh0cnVlKTtcblxudmFyIFRva2VuU3RyZWFtID0gZnVuY3Rpb24gVG9rZW5TdHJlYW0oc3RyaW5nLCBub2RlVHlwZXMpIHtcbiAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG4gIHRoaXMubm9kZVR5cGVzID0gbm9kZVR5cGVzO1xuICB0aGlzLmlubGluZSA9IG51bGw7XG4gIHRoaXMucG9zID0gMDtcbiAgdGhpcy50b2tlbnMgPSBzdHJpbmcuc3BsaXQoL1xccyooPz1cXGJ8XFxXfCQpLyk7XG4gIGlmICh0aGlzLnRva2Vuc1t0aGlzLnRva2Vucy5sZW5ndGggLSAxXSA9PSBcIlwiKSB7IHRoaXMudG9rZW5zLnBvcCgpOyB9XG4gIGlmICh0aGlzLnRva2Vuc1swXSA9PSBcIlwiKSB7IHRoaXMudG9rZW5zLnNoaWZ0KCk7IH1cbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMSQyID0geyBuZXh0OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQxJDIubmV4dC5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnRva2Vuc1t0aGlzLnBvc10gfTtcblxuVG9rZW5TdHJlYW0ucHJvdG90eXBlLmVhdCA9IGZ1bmN0aW9uIGVhdCAodG9rKSB7IHJldHVybiB0aGlzLm5leHQgPT0gdG9rICYmICh0aGlzLnBvcysrIHx8IHRydWUpIH07XG5cblRva2VuU3RyZWFtLnByb3RvdHlwZS5lcnIgPSBmdW5jdGlvbiBlcnIgKHN0cikgeyB0aHJvdyBuZXcgU3ludGF4RXJyb3Ioc3RyICsgXCIgKGluIGNvbnRlbnQgZXhwcmVzc2lvbiAnXCIgKyB0aGlzLnN0cmluZyArIFwiJylcIikgfTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFRva2VuU3RyZWFtLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDEkMiApO1xuXG5mdW5jdGlvbiBwYXJzZUV4cHIoc3RyZWFtKSB7XG4gIHZhciBleHBycyA9IFtdO1xuICBkbyB7IGV4cHJzLnB1c2gocGFyc2VFeHByU2VxKHN0cmVhbSkpOyB9XG4gIHdoaWxlIChzdHJlYW0uZWF0KFwifFwiKSlcbiAgcmV0dXJuIGV4cHJzLmxlbmd0aCA9PSAxID8gZXhwcnNbMF0gOiB7dHlwZTogXCJjaG9pY2VcIiwgZXhwcnM6IGV4cHJzfVxufVxuXG5mdW5jdGlvbiBwYXJzZUV4cHJTZXEoc3RyZWFtKSB7XG4gIHZhciBleHBycyA9IFtdO1xuICBkbyB7IGV4cHJzLnB1c2gocGFyc2VFeHByU3Vic2NyaXB0KHN0cmVhbSkpOyB9XG4gIHdoaWxlIChzdHJlYW0ubmV4dCAmJiBzdHJlYW0ubmV4dCAhPSBcIilcIiAmJiBzdHJlYW0ubmV4dCAhPSBcInxcIilcbiAgcmV0dXJuIGV4cHJzLmxlbmd0aCA9PSAxID8gZXhwcnNbMF0gOiB7dHlwZTogXCJzZXFcIiwgZXhwcnM6IGV4cHJzfVxufVxuXG5mdW5jdGlvbiBwYXJzZUV4cHJTdWJzY3JpcHQoc3RyZWFtKSB7XG4gIHZhciBleHByID0gcGFyc2VFeHByQXRvbShzdHJlYW0pO1xuICBmb3IgKDs7KSB7XG4gICAgaWYgKHN0cmVhbS5lYXQoXCIrXCIpKVxuICAgICAgeyBleHByID0ge3R5cGU6IFwicGx1c1wiLCBleHByOiBleHByfTsgfVxuICAgIGVsc2UgaWYgKHN0cmVhbS5lYXQoXCIqXCIpKVxuICAgICAgeyBleHByID0ge3R5cGU6IFwic3RhclwiLCBleHByOiBleHByfTsgfVxuICAgIGVsc2UgaWYgKHN0cmVhbS5lYXQoXCI/XCIpKVxuICAgICAgeyBleHByID0ge3R5cGU6IFwib3B0XCIsIGV4cHI6IGV4cHJ9OyB9XG4gICAgZWxzZSBpZiAoc3RyZWFtLmVhdChcIntcIikpXG4gICAgICB7IGV4cHIgPSBwYXJzZUV4cHJSYW5nZShzdHJlYW0sIGV4cHIpOyB9XG4gICAgZWxzZSB7IGJyZWFrIH1cbiAgfVxuICByZXR1cm4gZXhwclxufVxuXG5mdW5jdGlvbiBwYXJzZU51bShzdHJlYW0pIHtcbiAgaWYgKC9cXEQvLnRlc3Qoc3RyZWFtLm5leHQpKSB7IHN0cmVhbS5lcnIoXCJFeHBlY3RlZCBudW1iZXIsIGdvdCAnXCIgKyBzdHJlYW0ubmV4dCArIFwiJ1wiKTsgfVxuICB2YXIgcmVzdWx0ID0gTnVtYmVyKHN0cmVhbS5uZXh0KTtcbiAgc3RyZWFtLnBvcysrO1xuICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIHBhcnNlRXhwclJhbmdlKHN0cmVhbSwgZXhwcikge1xuICB2YXIgbWluID0gcGFyc2VOdW0oc3RyZWFtKSwgbWF4ID0gbWluO1xuICBpZiAoc3RyZWFtLmVhdChcIixcIikpIHtcbiAgICBpZiAoc3RyZWFtLm5leHQgIT0gXCJ9XCIpIHsgbWF4ID0gcGFyc2VOdW0oc3RyZWFtKTsgfVxuICAgIGVsc2UgeyBtYXggPSAtMTsgfVxuICB9XG4gIGlmICghc3RyZWFtLmVhdChcIn1cIikpIHsgc3RyZWFtLmVycihcIlVuY2xvc2VkIGJyYWNlZCByYW5nZVwiKTsgfVxuICByZXR1cm4ge3R5cGU6IFwicmFuZ2VcIiwgbWluOiBtaW4sIG1heDogbWF4LCBleHByOiBleHByfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlTmFtZShzdHJlYW0sIG5hbWUpIHtcbiAgdmFyIHR5cGVzID0gc3RyZWFtLm5vZGVUeXBlcywgdHlwZSA9IHR5cGVzW25hbWVdO1xuICBpZiAodHlwZSkgeyByZXR1cm4gW3R5cGVdIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciB0eXBlTmFtZSBpbiB0eXBlcykge1xuICAgIHZhciB0eXBlJDEgPSB0eXBlc1t0eXBlTmFtZV07XG4gICAgaWYgKHR5cGUkMS5ncm91cHMuaW5kZXhPZihuYW1lKSA+IC0xKSB7IHJlc3VsdC5wdXNoKHR5cGUkMSk7IH1cbiAgfVxuICBpZiAocmVzdWx0Lmxlbmd0aCA9PSAwKSB7IHN0cmVhbS5lcnIoXCJObyBub2RlIHR5cGUgb3IgZ3JvdXAgJ1wiICsgbmFtZSArIFwiJyBmb3VuZFwiKTsgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIHBhcnNlRXhwckF0b20oc3RyZWFtKSB7XG4gIGlmIChzdHJlYW0uZWF0KFwiKFwiKSkge1xuICAgIHZhciBleHByID0gcGFyc2VFeHByKHN0cmVhbSk7XG4gICAgaWYgKCFzdHJlYW0uZWF0KFwiKVwiKSkgeyBzdHJlYW0uZXJyKFwiTWlzc2luZyBjbG9zaW5nIHBhcmVuXCIpOyB9XG4gICAgcmV0dXJuIGV4cHJcbiAgfSBlbHNlIGlmICghL1xcVy8udGVzdChzdHJlYW0ubmV4dCkpIHtcbiAgICB2YXIgZXhwcnMgPSByZXNvbHZlTmFtZShzdHJlYW0sIHN0cmVhbS5uZXh0KS5tYXAoZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIGlmIChzdHJlYW0uaW5saW5lID09IG51bGwpIHsgc3RyZWFtLmlubGluZSA9IHR5cGUuaXNJbmxpbmU7IH1cbiAgICAgIGVsc2UgaWYgKHN0cmVhbS5pbmxpbmUgIT0gdHlwZS5pc0lubGluZSkgeyBzdHJlYW0uZXJyKFwiTWl4aW5nIGlubGluZSBhbmQgYmxvY2sgY29udGVudFwiKTsgfVxuICAgICAgcmV0dXJuIHt0eXBlOiBcIm5hbWVcIiwgdmFsdWU6IHR5cGV9XG4gICAgfSk7XG4gICAgc3RyZWFtLnBvcysrO1xuICAgIHJldHVybiBleHBycy5sZW5ndGggPT0gMSA/IGV4cHJzWzBdIDoge3R5cGU6IFwiY2hvaWNlXCIsIGV4cHJzOiBleHByc31cbiAgfSBlbHNlIHtcbiAgICBzdHJlYW0uZXJyKFwiVW5leHBlY3RlZCB0b2tlbiAnXCIgKyBzdHJlYW0ubmV4dCArIFwiJ1wiKTtcbiAgfVxufVxuXG4vLyBUaGUgY29kZSBiZWxvdyBoZWxwcyBjb21waWxlIGEgcmVndWxhci1leHByZXNzaW9uLWxpa2UgbGFuZ3VhZ2Vcbi8vIGludG8gYSBkZXRlcm1pbmlzdGljIGZpbml0ZSBhdXRvbWF0b24uIEZvciBhIGdvb2QgaW50cm9kdWN0aW9uIHRvXG4vLyB0aGVzZSBjb25jZXB0cywgc2VlIGh0dHBzOi8vc3d0Y2guY29tL35yc2MvcmVnZXhwL3JlZ2V4cDEuaHRtbFxuXG4vLyA6IChPYmplY3QpIOKGkiBbW3t0ZXJtOiA/YW55LCB0bzogbnVtYmVyfV1dXG4vLyBDb25zdHJ1Y3QgYW4gTkZBIGZyb20gYW4gZXhwcmVzc2lvbiBhcyByZXR1cm5lZCBieSB0aGUgcGFyc2VyLiBUaGVcbi8vIE5GQSBpcyByZXByZXNlbnRlZCBhcyBhbiBhcnJheSBvZiBzdGF0ZXMsIHdoaWNoIGFyZSB0aGVtc2VsdmVzXG4vLyBhcnJheXMgb2YgZWRnZXMsIHdoaWNoIGFyZSBge3Rlcm0sIHRvfWAgb2JqZWN0cy4gVGhlIGZpcnN0IHN0YXRlIGlzXG4vLyB0aGUgZW50cnkgc3RhdGUgYW5kIHRoZSBsYXN0IG5vZGUgaXMgdGhlIHN1Y2Nlc3Mgc3RhdGUuXG4vL1xuLy8gTm90ZSB0aGF0IHVubGlrZSB0eXBpY2FsIE5GQXMsIHRoZSBlZGdlIG9yZGVyaW5nIGluIHRoaXMgb25lIGlzXG4vLyBzaWduaWZpY2FudCwgaW4gdGhhdCBpdCBpcyB1c2VkIHRvIGNvbnRydWN0IGZpbGxlciBjb250ZW50IHdoZW5cbi8vIG5lY2Vzc2FyeS5cbmZ1bmN0aW9uIG5mYShleHByKSB7XG4gIHZhciBuZmEgPSBbW11dO1xuICBjb25uZWN0KGNvbXBpbGUoZXhwciwgMCksIG5vZGUoKSk7XG4gIHJldHVybiBuZmFcblxuICBmdW5jdGlvbiBub2RlKCkgeyByZXR1cm4gbmZhLnB1c2goW10pIC0gMSB9XG4gIGZ1bmN0aW9uIGVkZ2UoZnJvbSwgdG8sIHRlcm0pIHtcbiAgICB2YXIgZWRnZSA9IHt0ZXJtOiB0ZXJtLCB0bzogdG99O1xuICAgIG5mYVtmcm9tXS5wdXNoKGVkZ2UpO1xuICAgIHJldHVybiBlZGdlXG4gIH1cbiAgZnVuY3Rpb24gY29ubmVjdChlZGdlcywgdG8pIHsgZWRnZXMuZm9yRWFjaChmdW5jdGlvbiAoZWRnZSkgeyByZXR1cm4gZWRnZS50byA9IHRvOyB9KTsgfVxuXG4gIGZ1bmN0aW9uIGNvbXBpbGUoZXhwciwgZnJvbSkge1xuICAgIGlmIChleHByLnR5cGUgPT0gXCJjaG9pY2VcIikge1xuICAgICAgcmV0dXJuIGV4cHIuZXhwcnMucmVkdWNlKGZ1bmN0aW9uIChvdXQsIGV4cHIpIHsgcmV0dXJuIG91dC5jb25jYXQoY29tcGlsZShleHByLCBmcm9tKSk7IH0sIFtdKVxuICAgIH0gZWxzZSBpZiAoZXhwci50eXBlID09IFwic2VxXCIpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOzsgaSsrKSB7XG4gICAgICAgIHZhciBuZXh0ID0gY29tcGlsZShleHByLmV4cHJzW2ldLCBmcm9tKTtcbiAgICAgICAgaWYgKGkgPT0gZXhwci5leHBycy5sZW5ndGggLSAxKSB7IHJldHVybiBuZXh0IH1cbiAgICAgICAgY29ubmVjdChuZXh0LCBmcm9tID0gbm9kZSgpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGV4cHIudHlwZSA9PSBcInN0YXJcIikge1xuICAgICAgdmFyIGxvb3AgPSBub2RlKCk7XG4gICAgICBlZGdlKGZyb20sIGxvb3ApO1xuICAgICAgY29ubmVjdChjb21waWxlKGV4cHIuZXhwciwgbG9vcCksIGxvb3ApO1xuICAgICAgcmV0dXJuIFtlZGdlKGxvb3ApXVxuICAgIH0gZWxzZSBpZiAoZXhwci50eXBlID09IFwicGx1c1wiKSB7XG4gICAgICB2YXIgbG9vcCQxID0gbm9kZSgpO1xuICAgICAgY29ubmVjdChjb21waWxlKGV4cHIuZXhwciwgZnJvbSksIGxvb3AkMSk7XG4gICAgICBjb25uZWN0KGNvbXBpbGUoZXhwci5leHByLCBsb29wJDEpLCBsb29wJDEpO1xuICAgICAgcmV0dXJuIFtlZGdlKGxvb3AkMSldXG4gICAgfSBlbHNlIGlmIChleHByLnR5cGUgPT0gXCJvcHRcIikge1xuICAgICAgcmV0dXJuIFtlZGdlKGZyb20pXS5jb25jYXQoY29tcGlsZShleHByLmV4cHIsIGZyb20pKVxuICAgIH0gZWxzZSBpZiAoZXhwci50eXBlID09IFwicmFuZ2VcIikge1xuICAgICAgdmFyIGN1ciA9IGZyb207XG4gICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBleHByLm1pbjsgaSQxKyspIHtcbiAgICAgICAgdmFyIG5leHQkMSA9IG5vZGUoKTtcbiAgICAgICAgY29ubmVjdChjb21waWxlKGV4cHIuZXhwciwgY3VyKSwgbmV4dCQxKTtcbiAgICAgICAgY3VyID0gbmV4dCQxO1xuICAgICAgfVxuICAgICAgaWYgKGV4cHIubWF4ID09IC0xKSB7XG4gICAgICAgIGNvbm5lY3QoY29tcGlsZShleHByLmV4cHIsIGN1ciksIGN1cik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpJDIgPSBleHByLm1pbjsgaSQyIDwgZXhwci5tYXg7IGkkMisrKSB7XG4gICAgICAgICAgdmFyIG5leHQkMiA9IG5vZGUoKTtcbiAgICAgICAgICBlZGdlKGN1ciwgbmV4dCQyKTtcbiAgICAgICAgICBjb25uZWN0KGNvbXBpbGUoZXhwci5leHByLCBjdXIpLCBuZXh0JDIpO1xuICAgICAgICAgIGN1ciA9IG5leHQkMjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIFtlZGdlKGN1cildXG4gICAgfSBlbHNlIGlmIChleHByLnR5cGUgPT0gXCJuYW1lXCIpIHtcbiAgICAgIHJldHVybiBbZWRnZShmcm9tLCBudWxsLCBleHByLnZhbHVlKV1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY21wKGEsIGIpIHsgcmV0dXJuIGIgLSBhIH1cblxuLy8gR2V0IHRoZSBzZXQgb2Ygbm9kZXMgcmVhY2hhYmxlIGJ5IG51bGwgZWRnZXMgZnJvbSBgbm9kZWAuIE9taXRcbi8vIG5vZGVzIHdpdGggb25seSBhIHNpbmdsZSBudWxsLW91dC1lZGdlLCBzaW5jZSB0aGV5IG1heSBsZWFkIHRvXG4vLyBuZWVkbGVzcyBkdXBsaWNhdGVkIG5vZGVzLlxuZnVuY3Rpb24gbnVsbEZyb20obmZhLCBub2RlKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgc2Nhbihub2RlKTtcbiAgcmV0dXJuIHJlc3VsdC5zb3J0KGNtcClcblxuICBmdW5jdGlvbiBzY2FuKG5vZGUpIHtcbiAgICB2YXIgZWRnZXMgPSBuZmFbbm9kZV07XG4gICAgaWYgKGVkZ2VzLmxlbmd0aCA9PSAxICYmICFlZGdlc1swXS50ZXJtKSB7IHJldHVybiBzY2FuKGVkZ2VzWzBdLnRvKSB9XG4gICAgcmVzdWx0LnB1c2gobm9kZSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlZGdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJlZiA9IGVkZ2VzW2ldO1xuICAgICAgdmFyIHRlcm0gPSByZWYudGVybTtcbiAgICAgIHZhciB0byA9IHJlZi50bztcbiAgICAgIGlmICghdGVybSAmJiByZXN1bHQuaW5kZXhPZih0bykgPT0gLTEpIHsgc2Nhbih0byk7IH1cbiAgICB9XG4gIH1cbn1cblxuLy8gOiAoW1t7dGVybTogP2FueSwgdG86IG51bWJlcn1dXSkg4oaSIENvbnRlbnRNYXRjaFxuLy8gQ29tcGlsZXMgYW4gTkZBIGFzIHByb2R1Y2VkIGJ5IGBuZmFgIGludG8gYSBERkEsIG1vZGVsZWQgYXMgYSBzZXRcbi8vIG9mIHN0YXRlIG9iamVjdHMgKGBDb250ZW50TWF0Y2hgIGluc3RhbmNlcykgd2l0aCB0cmFuc2l0aW9uc1xuLy8gYmV0d2VlbiB0aGVtLlxuZnVuY3Rpb24gZGZhKG5mYSkge1xuICB2YXIgbGFiZWxlZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiBleHBsb3JlKG51bGxGcm9tKG5mYSwgMCkpXG5cbiAgZnVuY3Rpb24gZXhwbG9yZShzdGF0ZXMpIHtcbiAgICB2YXIgb3V0ID0gW107XG4gICAgc3RhdGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIG5mYVtub2RlXS5mb3JFYWNoKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgICAgdmFyIHRlcm0gPSByZWYudGVybTtcbiAgICAgICAgdmFyIHRvID0gcmVmLnRvO1xuXG4gICAgICAgIGlmICghdGVybSkgeyByZXR1cm4gfVxuICAgICAgICB2YXIga25vd24gPSBvdXQuaW5kZXhPZih0ZXJtKSwgc2V0ID0ga25vd24gPiAtMSAmJiBvdXRba25vd24gKyAxXTtcbiAgICAgICAgbnVsbEZyb20obmZhLCB0bykuZm9yRWFjaChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICAgIGlmICghc2V0KSB7IG91dC5wdXNoKHRlcm0sIHNldCA9IFtdKTsgfVxuICAgICAgICAgIGlmIChzZXQuaW5kZXhPZihub2RlKSA9PSAtMSkgeyBzZXQucHVzaChub2RlKTsgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHZhciBzdGF0ZSA9IGxhYmVsZWRbc3RhdGVzLmpvaW4oXCIsXCIpXSA9IG5ldyBDb250ZW50TWF0Y2goc3RhdGVzLmluZGV4T2YobmZhLmxlbmd0aCAtIDEpID4gLTEpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3V0Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICB2YXIgc3RhdGVzJDEgPSBvdXRbaSArIDFdLnNvcnQoY21wKTtcbiAgICAgIHN0YXRlLm5leHQucHVzaChvdXRbaV0sIGxhYmVsZWRbc3RhdGVzJDEuam9pbihcIixcIildIHx8IGV4cGxvcmUoc3RhdGVzJDEpKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlXG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JEZWFkRW5kcyhtYXRjaCwgc3RyZWFtKSB7XG4gIGZvciAodmFyIGkgPSAwLCB3b3JrID0gW21hdGNoXTsgaSA8IHdvcmsubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3RhdGUgPSB3b3JrW2ldLCBkZWFkID0gIXN0YXRlLnZhbGlkRW5kLCBub2RlcyA9IFtdO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgc3RhdGUubmV4dC5sZW5ndGg7IGogKz0gMikge1xuICAgICAgdmFyIG5vZGUgPSBzdGF0ZS5uZXh0W2pdLCBuZXh0ID0gc3RhdGUubmV4dFtqICsgMV07XG4gICAgICBub2Rlcy5wdXNoKG5vZGUubmFtZSk7XG4gICAgICBpZiAoZGVhZCAmJiAhKG5vZGUuaXNUZXh0IHx8IG5vZGUuaGFzUmVxdWlyZWRBdHRycygpKSkgeyBkZWFkID0gZmFsc2U7IH1cbiAgICAgIGlmICh3b3JrLmluZGV4T2YobmV4dCkgPT0gLTEpIHsgd29yay5wdXNoKG5leHQpOyB9XG4gICAgfVxuICAgIGlmIChkZWFkKSB7IHN0cmVhbS5lcnIoXCJPbmx5IG5vbi1nZW5lcmF0YWJsZSBub2RlcyAoXCIgKyBub2Rlcy5qb2luKFwiLCBcIikgKyBcIikgaW4gYSByZXF1aXJlZCBwb3NpdGlvbiAoc2VlIGh0dHBzOi8vcHJvc2VtaXJyb3IubmV0L2RvY3MvZ3VpZGUvI2dlbmVyYXRhYmxlKVwiKTsgfVxuICB9XG59XG5cbi8vIEZvciBub2RlIHR5cGVzIHdoZXJlIGFsbCBhdHRycyBoYXZlIGEgZGVmYXVsdCB2YWx1ZSAob3Igd2hpY2ggZG9uJ3Rcbi8vIGhhdmUgYW55IGF0dHJpYnV0ZXMpLCBidWlsZCB1cCBhIHNpbmdsZSByZXVzYWJsZSBkZWZhdWx0IGF0dHJpYnV0ZVxuLy8gb2JqZWN0LCBhbmQgdXNlIGl0IGZvciBhbGwgbm9kZXMgdGhhdCBkb24ndCBzcGVjaWZ5IHNwZWNpZmljXG4vLyBhdHRyaWJ1dGVzLlxuZnVuY3Rpb24gZGVmYXVsdEF0dHJzKGF0dHJzKSB7XG4gIHZhciBkZWZhdWx0cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGZvciAodmFyIGF0dHJOYW1lIGluIGF0dHJzKSB7XG4gICAgdmFyIGF0dHIgPSBhdHRyc1thdHRyTmFtZV07XG4gICAgaWYgKCFhdHRyLmhhc0RlZmF1bHQpIHsgcmV0dXJuIG51bGwgfVxuICAgIGRlZmF1bHRzW2F0dHJOYW1lXSA9IGF0dHIuZGVmYXVsdDtcbiAgfVxuICByZXR1cm4gZGVmYXVsdHNcbn1cblxuZnVuY3Rpb24gY29tcHV0ZUF0dHJzKGF0dHJzLCB2YWx1ZSkge1xuICB2YXIgYnVpbHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBmb3IgKHZhciBuYW1lIGluIGF0dHJzKSB7XG4gICAgdmFyIGdpdmVuID0gdmFsdWUgJiYgdmFsdWVbbmFtZV07XG4gICAgaWYgKGdpdmVuID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBhdHRyID0gYXR0cnNbbmFtZV07XG4gICAgICBpZiAoYXR0ci5oYXNEZWZhdWx0KSB7IGdpdmVuID0gYXR0ci5kZWZhdWx0OyB9XG4gICAgICBlbHNlIHsgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJObyB2YWx1ZSBzdXBwbGllZCBmb3IgYXR0cmlidXRlIFwiICsgbmFtZSkgfVxuICAgIH1cbiAgICBidWlsdFtuYW1lXSA9IGdpdmVuO1xuICB9XG4gIHJldHVybiBidWlsdFxufVxuXG5mdW5jdGlvbiBpbml0QXR0cnMoYXR0cnMpIHtcbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGlmIChhdHRycykgeyBmb3IgKHZhciBuYW1lIGluIGF0dHJzKSB7IHJlc3VsdFtuYW1lXSA9IG5ldyBBdHRyaWJ1dGUoYXR0cnNbbmFtZV0pOyB9IH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vLyA6Oi0gTm9kZSB0eXBlcyBhcmUgb2JqZWN0cyBhbGxvY2F0ZWQgb25jZSBwZXIgYFNjaGVtYWAgYW5kIHVzZWQgdG9cbi8vIFt0YWddKCNtb2RlbC5Ob2RlLnR5cGUpIGBOb2RlYCBpbnN0YW5jZXMuIFRoZXkgY29udGFpbiBpbmZvcm1hdGlvblxuLy8gYWJvdXQgdGhlIG5vZGUgdHlwZSwgc3VjaCBhcyBpdHMgbmFtZSBhbmQgd2hhdCBraW5kIG9mIG5vZGUgaXRcbi8vIHJlcHJlc2VudHMuXG52YXIgTm9kZVR5cGUgPSBmdW5jdGlvbiBOb2RlVHlwZShuYW1lLCBzY2hlbWEsIHNwZWMpIHtcbiAgLy8gOjogc3RyaW5nXG4gIC8vIFRoZSBuYW1lIHRoZSBub2RlIHR5cGUgaGFzIGluIHRoaXMgc2NoZW1hLlxuICB0aGlzLm5hbWUgPSBuYW1lO1xuXG4gIC8vIDo6IFNjaGVtYVxuICAvLyBBIGxpbmsgYmFjayB0byB0aGUgYFNjaGVtYWAgdGhlIG5vZGUgdHlwZSBiZWxvbmdzIHRvLlxuICB0aGlzLnNjaGVtYSA9IHNjaGVtYTtcblxuICAvLyA6OiBOb2RlU3BlY1xuICAvLyBUaGUgc3BlYyB0aGF0IHRoaXMgdHlwZSBpcyBiYXNlZCBvblxuICB0aGlzLnNwZWMgPSBzcGVjO1xuXG4gIHRoaXMuZ3JvdXBzID0gc3BlYy5ncm91cCA/IHNwZWMuZ3JvdXAuc3BsaXQoXCIgXCIpIDogW107XG4gIHRoaXMuYXR0cnMgPSBpbml0QXR0cnMoc3BlYy5hdHRycyk7XG5cbiAgdGhpcy5kZWZhdWx0QXR0cnMgPSBkZWZhdWx0QXR0cnModGhpcy5hdHRycyk7XG5cbiAgLy8gOjogQ29udGVudE1hdGNoXG4gIC8vIFRoZSBzdGFydGluZyBtYXRjaCBvZiB0aGUgbm9kZSB0eXBlJ3MgY29udGVudCBleHByZXNzaW9uLlxuICB0aGlzLmNvbnRlbnRNYXRjaCA9IG51bGw7XG5cbiAgLy8gOiA/W01hcmtUeXBlXVxuICAvLyBUaGUgc2V0IG9mIG1hcmtzIGFsbG93ZWQgaW4gdGhpcyBub2RlLiBgbnVsbGAgbWVhbnMgYWxsIG1hcmtzXG4gIC8vIGFyZSBhbGxvd2VkLlxuICB0aGlzLm1hcmtTZXQgPSBudWxsO1xuXG4gIC8vIDo6IGJvb2xcbiAgLy8gVHJ1ZSBpZiB0aGlzIG5vZGUgdHlwZSBoYXMgaW5saW5lIGNvbnRlbnQuXG4gIHRoaXMuaW5saW5lQ29udGVudCA9IG51bGw7XG5cbiAgLy8gOjogYm9vbFxuICAvLyBUcnVlIGlmIHRoaXMgaXMgYSBibG9jayB0eXBlXG4gIHRoaXMuaXNCbG9jayA9ICEoc3BlYy5pbmxpbmUgfHwgbmFtZSA9PSBcInRleHRcIik7XG5cbiAgLy8gOjogYm9vbFxuICAvLyBUcnVlIGlmIHRoaXMgaXMgdGhlIHRleHQgbm9kZSB0eXBlLlxuICB0aGlzLmlzVGV4dCA9IG5hbWUgPT0gXCJ0ZXh0XCI7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzJDUgPSB7IGlzSW5saW5lOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGlzVGV4dGJsb2NrOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGlzTGVhZjogeyBjb25maWd1cmFibGU6IHRydWUgfSxpc0F0b206IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLy8gOjogYm9vbFxuLy8gVHJ1ZSBpZiB0aGlzIGlzIGFuIGlubGluZSB0eXBlLlxucHJvdG90eXBlQWNjZXNzb3JzJDUuaXNJbmxpbmUuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gIXRoaXMuaXNCbG9jayB9O1xuXG4vLyA6OiBib29sXG4vLyBUcnVlIGlmIHRoaXMgaXMgYSB0ZXh0YmxvY2sgdHlwZSwgYSBibG9jayB0aGF0IGNvbnRhaW5zIGlubGluZVxuLy8gY29udGVudC5cbnByb3RvdHlwZUFjY2Vzc29ycyQ1LmlzVGV4dGJsb2NrLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuaXNCbG9jayAmJiB0aGlzLmlubGluZUNvbnRlbnQgfTtcblxuLy8gOjogYm9vbFxuLy8gVHJ1ZSBmb3Igbm9kZSB0eXBlcyB0aGF0IGFsbG93IG5vIGNvbnRlbnQuXG5wcm90b3R5cGVBY2Nlc3NvcnMkNS5pc0xlYWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5jb250ZW50TWF0Y2ggPT0gQ29udGVudE1hdGNoLmVtcHR5IH07XG5cbi8vIDo6IGJvb2xcbi8vIFRydWUgd2hlbiB0aGlzIG5vZGUgaXMgYW4gYXRvbSwgaS5lLiB3aGVuIGl0IGRvZXMgbm90IGhhdmVcbi8vIGRpcmVjdGx5IGVkaXRhYmxlIGNvbnRlbnQuXG5wcm90b3R5cGVBY2Nlc3NvcnMkNS5pc0F0b20uZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5pc0xlYWYgfHwgdGhpcy5zcGVjLmF0b20gfTtcblxuLy8gOjogKCkg4oaSIGJvb2xcbi8vIFRlbGxzIHlvdSB3aGV0aGVyIHRoaXMgbm9kZSB0eXBlIGhhcyBhbnkgcmVxdWlyZWQgYXR0cmlidXRlcy5cbk5vZGVUeXBlLnByb3RvdHlwZS5oYXNSZXF1aXJlZEF0dHJzID0gZnVuY3Rpb24gaGFzUmVxdWlyZWRBdHRycyAoKSB7XG4gIGZvciAodmFyIG4gaW4gdGhpcy5hdHRycykgeyBpZiAodGhpcy5hdHRyc1tuXS5pc1JlcXVpcmVkKSB7IHJldHVybiB0cnVlIH0gfVxuICByZXR1cm4gZmFsc2Vcbn07XG5cbk5vZGVUeXBlLnByb3RvdHlwZS5jb21wYXRpYmxlQ29udGVudCA9IGZ1bmN0aW9uIGNvbXBhdGlibGVDb250ZW50IChvdGhlcikge1xuICByZXR1cm4gdGhpcyA9PSBvdGhlciB8fCB0aGlzLmNvbnRlbnRNYXRjaC5jb21wYXRpYmxlKG90aGVyLmNvbnRlbnRNYXRjaClcbn07XG5cbk5vZGVUeXBlLnByb3RvdHlwZS5jb21wdXRlQXR0cnMgPSBmdW5jdGlvbiBjb21wdXRlQXR0cnMkMSAoYXR0cnMpIHtcbiAgaWYgKCFhdHRycyAmJiB0aGlzLmRlZmF1bHRBdHRycykgeyByZXR1cm4gdGhpcy5kZWZhdWx0QXR0cnMgfVxuICBlbHNlIHsgcmV0dXJuIGNvbXB1dGVBdHRycyh0aGlzLmF0dHJzLCBhdHRycykgfVxufTtcblxuLy8gOjogKD9PYmplY3QsID91bmlvbjxGcmFnbWVudCwgTm9kZSwgW05vZGVdPiwgP1tNYXJrXSkg4oaSIE5vZGVcbi8vIENyZWF0ZSBhIGBOb2RlYCBvZiB0aGlzIHR5cGUuIFRoZSBnaXZlbiBhdHRyaWJ1dGVzIGFyZVxuLy8gY2hlY2tlZCBhbmQgZGVmYXVsdGVkICh5b3UgY2FuIHBhc3MgYG51bGxgIHRvIHVzZSB0aGUgdHlwZSdzXG4vLyBkZWZhdWx0cyBlbnRpcmVseSwgaWYgbm8gcmVxdWlyZWQgYXR0cmlidXRlcyBleGlzdCkuIGBjb250ZW50YFxuLy8gbWF5IGJlIGEgYEZyYWdtZW50YCwgYSBub2RlLCBhbiBhcnJheSBvZiBub2Rlcywgb3Jcbi8vIGBudWxsYC4gU2ltaWxhcmx5IGBtYXJrc2AgbWF5IGJlIGBudWxsYCB0byBkZWZhdWx0IHRvIHRoZSBlbXB0eVxuLy8gc2V0IG9mIG1hcmtzLlxuTm9kZVR5cGUucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZSAoYXR0cnMsIGNvbnRlbnQsIG1hcmtzKSB7XG4gIGlmICh0aGlzLmlzVGV4dCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJOb2RlVHlwZS5jcmVhdGUgY2FuJ3QgY29uc3RydWN0IHRleHQgbm9kZXNcIikgfVxuICByZXR1cm4gbmV3IE5vZGUodGhpcywgdGhpcy5jb21wdXRlQXR0cnMoYXR0cnMpLCBGcmFnbWVudC5mcm9tKGNvbnRlbnQpLCBNYXJrLnNldEZyb20obWFya3MpKVxufTtcblxuLy8gOjogKD9PYmplY3QsID91bmlvbjxGcmFnbWVudCwgTm9kZSwgW05vZGVdPiwgP1tNYXJrXSkg4oaSIE5vZGVcbi8vIExpa2UgW2BjcmVhdGVgXSgjbW9kZWwuTm9kZVR5cGUuY3JlYXRlKSwgYnV0IGNoZWNrIHRoZSBnaXZlbiBjb250ZW50XG4vLyBhZ2FpbnN0IHRoZSBub2RlIHR5cGUncyBjb250ZW50IHJlc3RyaWN0aW9ucywgYW5kIHRocm93IGFuIGVycm9yXG4vLyBpZiBpdCBkb2Vzbid0IG1hdGNoLlxuTm9kZVR5cGUucHJvdG90eXBlLmNyZWF0ZUNoZWNrZWQgPSBmdW5jdGlvbiBjcmVhdGVDaGVja2VkIChhdHRycywgY29udGVudCwgbWFya3MpIHtcbiAgY29udGVudCA9IEZyYWdtZW50LmZyb20oY29udGVudCk7XG4gIGlmICghdGhpcy52YWxpZENvbnRlbnQoY29udGVudCkpXG4gICAgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgY29udGVudCBmb3Igbm9kZSBcIiArIHRoaXMubmFtZSkgfVxuICByZXR1cm4gbmV3IE5vZGUodGhpcywgdGhpcy5jb21wdXRlQXR0cnMoYXR0cnMpLCBjb250ZW50LCBNYXJrLnNldEZyb20obWFya3MpKVxufTtcblxuLy8gOjogKD9PYmplY3QsID91bmlvbjxGcmFnbWVudCwgTm9kZSwgW05vZGVdPiwgP1tNYXJrXSkg4oaSID9Ob2RlXG4vLyBMaWtlIFtgY3JlYXRlYF0oI21vZGVsLk5vZGVUeXBlLmNyZWF0ZSksIGJ1dCBzZWUgaWYgaXQgaXMgbmVjZXNzYXJ5IHRvXG4vLyBhZGQgbm9kZXMgdG8gdGhlIHN0YXJ0IG9yIGVuZCBvZiB0aGUgZ2l2ZW4gZnJhZ21lbnQgdG8gbWFrZSBpdFxuLy8gZml0IHRoZSBub2RlLiBJZiBubyBmaXR0aW5nIHdyYXBwaW5nIGNhbiBiZSBmb3VuZCwgcmV0dXJuIG51bGwuXG4vLyBOb3RlIHRoYXQsIGR1ZSB0byB0aGUgZmFjdCB0aGF0IHJlcXVpcmVkIG5vZGVzIGNhbiBhbHdheXMgYmVcbi8vIGNyZWF0ZWQsIHRoaXMgd2lsbCBhbHdheXMgc3VjY2VlZCBpZiB5b3UgcGFzcyBudWxsIG9yXG4vLyBgRnJhZ21lbnQuZW1wdHlgIGFzIGNvbnRlbnQuXG5Ob2RlVHlwZS5wcm90b3R5cGUuY3JlYXRlQW5kRmlsbCA9IGZ1bmN0aW9uIGNyZWF0ZUFuZEZpbGwgKGF0dHJzLCBjb250ZW50LCBtYXJrcykge1xuICBhdHRycyA9IHRoaXMuY29tcHV0ZUF0dHJzKGF0dHJzKTtcbiAgY29udGVudCA9IEZyYWdtZW50LmZyb20oY29udGVudCk7XG4gIGlmIChjb250ZW50LnNpemUpIHtcbiAgICB2YXIgYmVmb3JlID0gdGhpcy5jb250ZW50TWF0Y2guZmlsbEJlZm9yZShjb250ZW50KTtcbiAgICBpZiAoIWJlZm9yZSkgeyByZXR1cm4gbnVsbCB9XG4gICAgY29udGVudCA9IGJlZm9yZS5hcHBlbmQoY29udGVudCk7XG4gIH1cbiAgdmFyIGFmdGVyID0gdGhpcy5jb250ZW50TWF0Y2gubWF0Y2hGcmFnbWVudChjb250ZW50KS5maWxsQmVmb3JlKEZyYWdtZW50LmVtcHR5LCB0cnVlKTtcbiAgaWYgKCFhZnRlcikgeyByZXR1cm4gbnVsbCB9XG4gIHJldHVybiBuZXcgTm9kZSh0aGlzLCBhdHRycywgY29udGVudC5hcHBlbmQoYWZ0ZXIpLCBNYXJrLnNldEZyb20obWFya3MpKVxufTtcblxuLy8gOjogKEZyYWdtZW50KSDihpIgYm9vbFxuLy8gUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBmcmFnbWVudCBpcyB2YWxpZCBjb250ZW50IGZvciB0aGlzIG5vZGVcbi8vIHR5cGUgd2l0aCB0aGUgZ2l2ZW4gYXR0cmlidXRlcy5cbk5vZGVUeXBlLnByb3RvdHlwZS52YWxpZENvbnRlbnQgPSBmdW5jdGlvbiB2YWxpZENvbnRlbnQgKGNvbnRlbnQpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuY29udGVudE1hdGNoLm1hdGNoRnJhZ21lbnQoY29udGVudCk7XG4gIGlmICghcmVzdWx0IHx8ICFyZXN1bHQudmFsaWRFbmQpIHsgcmV0dXJuIGZhbHNlIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250ZW50LmNoaWxkQ291bnQ7IGkrKylcbiAgICB7IGlmICghdGhpcy5hbGxvd3NNYXJrcyhjb250ZW50LmNoaWxkKGkpLm1hcmtzKSkgeyByZXR1cm4gZmFsc2UgfSB9XG4gIHJldHVybiB0cnVlXG59O1xuXG4vLyA6OiAoTWFya1R5cGUpIOKGkiBib29sXG4vLyBDaGVjayB3aGV0aGVyIHRoZSBnaXZlbiBtYXJrIHR5cGUgaXMgYWxsb3dlZCBpbiB0aGlzIG5vZGUuXG5Ob2RlVHlwZS5wcm90b3R5cGUuYWxsb3dzTWFya1R5cGUgPSBmdW5jdGlvbiBhbGxvd3NNYXJrVHlwZSAobWFya1R5cGUpIHtcbiAgcmV0dXJuIHRoaXMubWFya1NldCA9PSBudWxsIHx8IHRoaXMubWFya1NldC5pbmRleE9mKG1hcmtUeXBlKSA+IC0xXG59O1xuXG4vLyA6OiAoW01hcmtdKSDihpIgYm9vbFxuLy8gVGVzdCB3aGV0aGVyIHRoZSBnaXZlbiBzZXQgb2YgbWFya3MgYXJlIGFsbG93ZWQgaW4gdGhpcyBub2RlLlxuTm9kZVR5cGUucHJvdG90eXBlLmFsbG93c01hcmtzID0gZnVuY3Rpb24gYWxsb3dzTWFya3MgKG1hcmtzKSB7XG4gIGlmICh0aGlzLm1hcmtTZXQgPT0gbnVsbCkgeyByZXR1cm4gdHJ1ZSB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWFya3MubGVuZ3RoOyBpKyspIHsgaWYgKCF0aGlzLmFsbG93c01hcmtUeXBlKG1hcmtzW2ldLnR5cGUpKSB7IHJldHVybiBmYWxzZSB9IH1cbiAgcmV0dXJuIHRydWVcbn07XG5cbi8vIDo6IChbTWFya10pIOKGkiBbTWFya11cbi8vIFJlbW92ZXMgdGhlIG1hcmtzIHRoYXQgYXJlIG5vdCBhbGxvd2VkIGluIHRoaXMgbm9kZSBmcm9tIHRoZSBnaXZlbiBzZXQuXG5Ob2RlVHlwZS5wcm90b3R5cGUuYWxsb3dlZE1hcmtzID0gZnVuY3Rpb24gYWxsb3dlZE1hcmtzIChtYXJrcykge1xuICBpZiAodGhpcy5tYXJrU2V0ID09IG51bGwpIHsgcmV0dXJuIG1hcmtzIH1cbiAgdmFyIGNvcHk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWFya3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIXRoaXMuYWxsb3dzTWFya1R5cGUobWFya3NbaV0udHlwZSkpIHtcbiAgICAgIGlmICghY29weSkgeyBjb3B5ID0gbWFya3Muc2xpY2UoMCwgaSk7IH1cbiAgICB9IGVsc2UgaWYgKGNvcHkpIHtcbiAgICAgIGNvcHkucHVzaChtYXJrc1tpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiAhY29weSA/IG1hcmtzIDogY29weS5sZW5ndGggPyBjb3B5IDogTWFyay5lbXB0eVxufTtcblxuTm9kZVR5cGUuY29tcGlsZSA9IGZ1bmN0aW9uIGNvbXBpbGUgKG5vZGVzLCBzY2hlbWEpIHtcbiAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIG5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUsIHNwZWMpIHsgcmV0dXJuIHJlc3VsdFtuYW1lXSA9IG5ldyBOb2RlVHlwZShuYW1lLCBzY2hlbWEsIHNwZWMpOyB9KTtcblxuICB2YXIgdG9wVHlwZSA9IHNjaGVtYS5zcGVjLnRvcE5vZGUgfHwgXCJkb2NcIjtcbiAgaWYgKCFyZXN1bHRbdG9wVHlwZV0pIHsgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJTY2hlbWEgaXMgbWlzc2luZyBpdHMgdG9wIG5vZGUgdHlwZSAoJ1wiICsgdG9wVHlwZSArIFwiJylcIikgfVxuICBpZiAoIXJlc3VsdC50ZXh0KSB7IHRocm93IG5ldyBSYW5nZUVycm9yKFwiRXZlcnkgc2NoZW1hIG5lZWRzIGEgJ3RleHQnIHR5cGVcIikgfVxuICBmb3IgKHZhciBfIGluIHJlc3VsdC50ZXh0LmF0dHJzKSB7IHRocm93IG5ldyBSYW5nZUVycm9yKFwiVGhlIHRleHQgbm9kZSB0eXBlIHNob3VsZCBub3QgaGF2ZSBhdHRyaWJ1dGVzXCIpIH1cblxuICByZXR1cm4gcmVzdWx0XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggTm9kZVR5cGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkNSApO1xuXG4vLyBBdHRyaWJ1dGUgZGVzY3JpcHRvcnNcblxudmFyIEF0dHJpYnV0ZSA9IGZ1bmN0aW9uIEF0dHJpYnV0ZShvcHRpb25zKSB7XG4gIHRoaXMuaGFzRGVmYXVsdCA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvcHRpb25zLCBcImRlZmF1bHRcIik7XG4gIHRoaXMuZGVmYXVsdCA9IG9wdGlvbnMuZGVmYXVsdDtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMSQzID0geyBpc1JlcXVpcmVkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQxJDMuaXNSZXF1aXJlZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAhdGhpcy5oYXNEZWZhdWx0XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggQXR0cmlidXRlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDEkMyApO1xuXG4vLyBNYXJrc1xuXG4vLyA6Oi0gTGlrZSBub2RlcywgbWFya3MgKHdoaWNoIGFyZSBhc3NvY2lhdGVkIHdpdGggbm9kZXMgdG8gc2lnbmlmeVxuLy8gdGhpbmdzIGxpa2UgZW1waGFzaXMgb3IgYmVpbmcgcGFydCBvZiBhIGxpbmspIGFyZVxuLy8gW3RhZ2dlZF0oI21vZGVsLk1hcmsudHlwZSkgd2l0aCB0eXBlIG9iamVjdHMsIHdoaWNoIGFyZVxuLy8gaW5zdGFudGlhdGVkIG9uY2UgcGVyIGBTY2hlbWFgLlxudmFyIE1hcmtUeXBlID0gZnVuY3Rpb24gTWFya1R5cGUobmFtZSwgcmFuaywgc2NoZW1hLCBzcGVjKSB7XG4gIC8vIDo6IHN0cmluZ1xuICAvLyBUaGUgbmFtZSBvZiB0aGUgbWFyayB0eXBlLlxuICB0aGlzLm5hbWUgPSBuYW1lO1xuXG4gIC8vIDo6IFNjaGVtYVxuICAvLyBUaGUgc2NoZW1hIHRoYXQgdGhpcyBtYXJrIHR5cGUgaW5zdGFuY2UgaXMgcGFydCBvZi5cbiAgdGhpcy5zY2hlbWEgPSBzY2hlbWE7XG5cbiAgLy8gOjogTWFya1NwZWNcbiAgLy8gVGhlIHNwZWMgb24gd2hpY2ggdGhlIHR5cGUgaXMgYmFzZWQuXG4gIHRoaXMuc3BlYyA9IHNwZWM7XG5cbiAgdGhpcy5hdHRycyA9IGluaXRBdHRycyhzcGVjLmF0dHJzKTtcblxuICB0aGlzLnJhbmsgPSByYW5rO1xuICB0aGlzLmV4Y2x1ZGVkID0gbnVsbDtcbiAgdmFyIGRlZmF1bHRzID0gZGVmYXVsdEF0dHJzKHRoaXMuYXR0cnMpO1xuICB0aGlzLmluc3RhbmNlID0gZGVmYXVsdHMgJiYgbmV3IE1hcmsodGhpcywgZGVmYXVsdHMpO1xufTtcblxuLy8gOjogKD9PYmplY3QpIOKGkiBNYXJrXG4vLyBDcmVhdGUgYSBtYXJrIG9mIHRoaXMgdHlwZS4gYGF0dHJzYCBtYXkgYmUgYG51bGxgIG9yIGFuIG9iamVjdFxuLy8gY29udGFpbmluZyBvbmx5IHNvbWUgb2YgdGhlIG1hcmsncyBhdHRyaWJ1dGVzLiBUaGUgb3RoZXJzLCBpZlxuLy8gdGhleSBoYXZlIGRlZmF1bHRzLCB3aWxsIGJlIGFkZGVkLlxuTWFya1R5cGUucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZSAoYXR0cnMpIHtcbiAgaWYgKCFhdHRycyAmJiB0aGlzLmluc3RhbmNlKSB7IHJldHVybiB0aGlzLmluc3RhbmNlIH1cbiAgcmV0dXJuIG5ldyBNYXJrKHRoaXMsIGNvbXB1dGVBdHRycyh0aGlzLmF0dHJzLCBhdHRycykpXG59O1xuXG5NYXJrVHlwZS5jb21waWxlID0gZnVuY3Rpb24gY29tcGlsZSAobWFya3MsIHNjaGVtYSkge1xuICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKSwgcmFuayA9IDA7XG4gIG1hcmtzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUsIHNwZWMpIHsgcmV0dXJuIHJlc3VsdFtuYW1lXSA9IG5ldyBNYXJrVHlwZShuYW1lLCByYW5rKyssIHNjaGVtYSwgc3BlYyk7IH0pO1xuICByZXR1cm4gcmVzdWx0XG59O1xuXG4vLyA6OiAoW01hcmtdKSDihpIgW01hcmtdXG4vLyBXaGVuIHRoZXJlIGlzIGEgbWFyayBvZiB0aGlzIHR5cGUgaW4gdGhlIGdpdmVuIHNldCwgYSBuZXcgc2V0XG4vLyB3aXRob3V0IGl0IGlzIHJldHVybmVkLiBPdGhlcndpc2UsIHRoZSBpbnB1dCBzZXQgaXMgcmV0dXJuZWQuXG5NYXJrVHlwZS5wcm90b3R5cGUucmVtb3ZlRnJvbVNldCA9IGZ1bmN0aW9uIHJlbW92ZUZyb21TZXQgKHNldCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHNldC5sZW5ndGg7IGkrKykgeyBpZiAoc2V0W2ldLnR5cGUgPT0gdGhpcykge1xuICAgIHNldCA9IHNldC5zbGljZSgwLCBpKS5jb25jYXQoc2V0LnNsaWNlKGkgKyAxKSk7XG4gICAgaS0tO1xuICB9IH1cbiAgcmV0dXJuIHNldFxufTtcblxuLy8gOjogKFtNYXJrXSkg4oaSID9NYXJrXG4vLyBUZXN0cyB3aGV0aGVyIHRoZXJlIGlzIGEgbWFyayBvZiB0aGlzIHR5cGUgaW4gdGhlIGdpdmVuIHNldC5cbk1hcmtUeXBlLnByb3RvdHlwZS5pc0luU2V0ID0gZnVuY3Rpb24gaXNJblNldCAoc2V0KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2V0Lmxlbmd0aDsgaSsrKVxuICAgIHsgaWYgKHNldFtpXS50eXBlID09IHRoaXMpIHsgcmV0dXJuIHNldFtpXSB9IH1cbn07XG5cbi8vIDo6IChNYXJrVHlwZSkg4oaSIGJvb2xcbi8vIFF1ZXJpZXMgd2hldGhlciBhIGdpdmVuIG1hcmsgdHlwZSBpc1xuLy8gW2V4Y2x1ZGVkXSgjbW9kZWwuTWFya1NwZWMuZXhjbHVkZXMpIGJ5IHRoaXMgb25lLlxuTWFya1R5cGUucHJvdG90eXBlLmV4Y2x1ZGVzID0gZnVuY3Rpb24gZXhjbHVkZXMgKG90aGVyKSB7XG4gIHJldHVybiB0aGlzLmV4Y2x1ZGVkLmluZGV4T2Yob3RoZXIpID4gLTFcbn07XG5cbi8vIFNjaGVtYVNwZWM6OiBpbnRlcmZhY2Vcbi8vIEFuIG9iamVjdCBkZXNjcmliaW5nIGEgc2NoZW1hLCBhcyBwYXNzZWQgdG8gdGhlIFtgU2NoZW1hYF0oI21vZGVsLlNjaGVtYSlcbi8vIGNvbnN0cnVjdG9yLlxuLy9cbi8vICAgbm9kZXM6OiB1bmlvbjxPYmplY3Q8Tm9kZVNwZWM+LCBPcmRlcmVkTWFwPE5vZGVTcGVjPj5cbi8vICAgVGhlIG5vZGUgdHlwZXMgaW4gdGhpcyBzY2hlbWEuIE1hcHMgbmFtZXMgdG9cbi8vICAgW2BOb2RlU3BlY2BdKCNtb2RlbC5Ob2RlU3BlYykgb2JqZWN0cyB0aGF0IGRlc2NyaWJlIHRoZSBub2RlIHR5cGVcbi8vICAgYXNzb2NpYXRlZCB3aXRoIHRoYXQgbmFtZS4gVGhlaXIgb3JkZXIgaXMgc2lnbmlmaWNhbnTigJRpdFxuLy8gICBkZXRlcm1pbmVzIHdoaWNoIFtwYXJzZSBydWxlc10oI21vZGVsLk5vZGVTcGVjLnBhcnNlRE9NKSB0YWtlXG4vLyAgIHByZWNlZGVuY2UgYnkgZGVmYXVsdCwgYW5kIHdoaWNoIG5vZGVzIGNvbWUgZmlyc3QgaW4gYSBnaXZlblxuLy8gICBbZ3JvdXBdKCNtb2RlbC5Ob2RlU3BlYy5ncm91cCkuXG4vL1xuLy8gICBtYXJrczo6ID91bmlvbjxPYmplY3Q8TWFya1NwZWM+LCBPcmRlcmVkTWFwPE1hcmtTcGVjPj5cbi8vICAgVGhlIG1hcmsgdHlwZXMgdGhhdCBleGlzdCBpbiB0aGlzIHNjaGVtYS4gVGhlIG9yZGVyIGluIHdoaWNoIHRoZXlcbi8vICAgYXJlIHByb3ZpZGVkIGRldGVybWluZXMgdGhlIG9yZGVyIGluIHdoaWNoIFttYXJrXG4vLyAgIHNldHNdKCNtb2RlbC5NYXJrLmFkZFRvU2V0KSBhcmUgc29ydGVkIGFuZCBpbiB3aGljaCBbcGFyc2Vcbi8vICAgcnVsZXNdKCNtb2RlbC5NYXJrU3BlYy5wYXJzZURPTSkgYXJlIHRyaWVkLlxuLy9cbi8vICAgdG9wTm9kZTo6ID9zdHJpbmdcbi8vICAgVGhlIG5hbWUgb2YgdGhlIGRlZmF1bHQgdG9wLWxldmVsIG5vZGUgZm9yIHRoZSBzY2hlbWEuIERlZmF1bHRzXG4vLyAgIHRvIGBcImRvY1wiYC5cblxuLy8gTm9kZVNwZWM6OiBpbnRlcmZhY2Vcbi8vXG4vLyAgIGNvbnRlbnQ6OiA/c3RyaW5nXG4vLyAgIFRoZSBjb250ZW50IGV4cHJlc3Npb24gZm9yIHRoaXMgbm9kZSwgYXMgZGVzY3JpYmVkIGluIHRoZSBbc2NoZW1hXG4vLyAgIGd1aWRlXSgvZG9jcy9ndWlkZS8jc2NoZW1hLmNvbnRlbnRfZXhwcmVzc2lvbnMpLiBXaGVuIG5vdCBnaXZlbixcbi8vICAgdGhlIG5vZGUgZG9lcyBub3QgYWxsb3cgYW55IGNvbnRlbnQuXG4vL1xuLy8gICBtYXJrczo6ID9zdHJpbmdcbi8vICAgVGhlIG1hcmtzIHRoYXQgYXJlIGFsbG93ZWQgaW5zaWRlIG9mIHRoaXMgbm9kZS4gTWF5IGJlIGFcbi8vICAgc3BhY2Utc2VwYXJhdGVkIHN0cmluZyByZWZlcnJpbmcgdG8gbWFyayBuYW1lcyBvciBncm91cHMsIGBcIl9cImBcbi8vICAgdG8gZXhwbGljaXRseSBhbGxvdyBhbGwgbWFya3MsIG9yIGBcIlwiYCB0byBkaXNhbGxvdyBtYXJrcy4gV2hlblxuLy8gICBub3QgZ2l2ZW4sIG5vZGVzIHdpdGggaW5saW5lIGNvbnRlbnQgZGVmYXVsdCB0byBhbGxvd2luZyBhbGxcbi8vICAgbWFya3MsIG90aGVyIG5vZGVzIGRlZmF1bHQgdG8gbm90IGFsbG93aW5nIG1hcmtzLlxuLy9cbi8vICAgZ3JvdXA6OiA/c3RyaW5nXG4vLyAgIFRoZSBncm91cCBvciBzcGFjZS1zZXBhcmF0ZWQgZ3JvdXBzIHRvIHdoaWNoIHRoaXMgbm9kZSBiZWxvbmdzLFxuLy8gICB3aGljaCBjYW4gYmUgcmVmZXJyZWQgdG8gaW4gdGhlIGNvbnRlbnQgZXhwcmVzc2lvbnMgZm9yIHRoZVxuLy8gICBzY2hlbWEuXG4vL1xuLy8gICBpbmxpbmU6OiA/Ym9vbFxuLy8gICBTaG91bGQgYmUgc2V0IHRvIHRydWUgZm9yIGlubGluZSBub2Rlcy4gKEltcGxpZWQgZm9yIHRleHQgbm9kZXMuKVxuLy9cbi8vICAgYXRvbTo6ID9ib29sXG4vLyAgIENhbiBiZSBzZXQgdG8gdHJ1ZSB0byBpbmRpY2F0ZSB0aGF0LCB0aG91Z2ggdGhpcyBpc24ndCBhIFtsZWFmXG4vLyAgIG5vZGVdKCNtb2RlbC5Ob2RlVHlwZS5pc0xlYWYpLCBpdCBkb2Vzbid0IGhhdmUgZGlyZWN0bHkgZWRpdGFibGVcbi8vICAgY29udGVudCBhbmQgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgYSBzaW5nbGUgdW5pdCBpbiB0aGUgdmlldy5cbi8vXG4vLyAgIGF0dHJzOjogP09iamVjdDxBdHRyaWJ1dGVTcGVjPlxuLy8gICBUaGUgYXR0cmlidXRlcyB0aGF0IG5vZGVzIG9mIHRoaXMgdHlwZSBnZXQuXG4vL1xuLy8gICBzZWxlY3RhYmxlOjogP2Jvb2xcbi8vICAgQ29udHJvbHMgd2hldGhlciBub2RlcyBvZiB0aGlzIHR5cGUgY2FuIGJlIHNlbGVjdGVkIGFzIGEgW25vZGVcbi8vICAgc2VsZWN0aW9uXSgjc3RhdGUuTm9kZVNlbGVjdGlvbikuIERlZmF1bHRzIHRvIHRydWUgZm9yIG5vbi10ZXh0XG4vLyAgIG5vZGVzLlxuLy9cbi8vICAgZHJhZ2dhYmxlOjogP2Jvb2xcbi8vICAgRGV0ZXJtaW5lcyB3aGV0aGVyIG5vZGVzIG9mIHRoaXMgdHlwZSBjYW4gYmUgZHJhZ2dlZCB3aXRob3V0XG4vLyAgIGJlaW5nIHNlbGVjdGVkLiBEZWZhdWx0cyB0byBmYWxzZS5cbi8vXG4vLyAgIGNvZGU6OiA/Ym9vbFxuLy8gICBDYW4gYmUgdXNlZCB0byBpbmRpY2F0ZSB0aGF0IHRoaXMgbm9kZSBjb250YWlucyBjb2RlLCB3aGljaFxuLy8gICBjYXVzZXMgc29tZSBjb21tYW5kcyB0byBiZWhhdmUgZGlmZmVyZW50bHkuXG4vL1xuLy8gICBkZWZpbmluZzo6ID9ib29sXG4vLyAgIERldGVybWluZXMgd2hldGhlciB0aGlzIG5vZGUgaXMgY29uc2lkZXJlZCBhbiBpbXBvcnRhbnQgcGFyZW50XG4vLyAgIG5vZGUgZHVyaW5nIHJlcGxhY2Ugb3BlcmF0aW9ucyAoc3VjaCBhcyBwYXN0ZSkuIE5vbi1kZWZpbmluZyAodGhlXG4vLyAgIGRlZmF1bHQpIG5vZGVzIGdldCBkcm9wcGVkIHdoZW4gdGhlaXIgZW50aXJlIGNvbnRlbnQgaXMgcmVwbGFjZWQsXG4vLyAgIHdoZXJlYXMgZGVmaW5pbmcgbm9kZXMgcGVyc2lzdCBhbmQgd3JhcCB0aGUgaW5zZXJ0ZWQgY29udGVudC5cbi8vICAgTGlrZXdpc2UsIGluIF9pbnNlcnRlZF8gY29udGVudCB0aGUgZGVmaW5pbmcgcGFyZW50cyBvZiB0aGVcbi8vICAgY29udGVudCBhcmUgcHJlc2VydmVkIHdoZW4gcG9zc2libGUuIFR5cGljYWxseSxcbi8vICAgbm9uLWRlZmF1bHQtcGFyYWdyYXBoIHRleHRibG9jayB0eXBlcywgYW5kIHBvc3NpYmx5IGxpc3QgaXRlbXMsXG4vLyAgIGFyZSBtYXJrZWQgYXMgZGVmaW5pbmcuXG4vL1xuLy8gICBpc29sYXRpbmc6OiA/Ym9vbFxuLy8gICBXaGVuIGVuYWJsZWQgKGRlZmF1bHQgaXMgZmFsc2UpLCB0aGUgc2lkZXMgb2Ygbm9kZXMgb2YgdGhpcyB0eXBlXG4vLyAgIGNvdW50IGFzIGJvdW5kYXJpZXMgdGhhdCByZWd1bGFyIGVkaXRpbmcgb3BlcmF0aW9ucywgbGlrZVxuLy8gICBiYWNrc3BhY2luZyBvciBsaWZ0aW5nLCB3b24ndCBjcm9zcy4gQW4gZXhhbXBsZSBvZiBhIG5vZGUgdGhhdFxuLy8gICBzaG91bGQgcHJvYmFibHkgaGF2ZSB0aGlzIGVuYWJsZWQgaXMgYSB0YWJsZSBjZWxsLlxuLy9cbi8vICAgdG9ET006OiA/KG5vZGU6IE5vZGUpIOKGkiBET01PdXRwdXRTcGVjXG4vLyAgIERlZmluZXMgdGhlIGRlZmF1bHQgd2F5IGEgbm9kZSBvZiB0aGlzIHR5cGUgc2hvdWxkIGJlIHNlcmlhbGl6ZWRcbi8vICAgdG8gRE9NL0hUTUwgKGFzIHVzZWQgYnlcbi8vICAgW2BET01TZXJpYWxpemVyLmZyb21TY2hlbWFgXSgjbW9kZWwuRE9NU2VyaWFsaXplcl5mcm9tU2NoZW1hKSkuXG4vLyAgIFNob3VsZCByZXR1cm4gYSBET00gbm9kZSBvciBhbiBbYXJyYXlcbi8vICAgc3RydWN0dXJlXSgjbW9kZWwuRE9NT3V0cHV0U3BlYykgdGhhdCBkZXNjcmliZXMgb25lLCB3aXRoIGFuXG4vLyAgIG9wdGlvbmFsIG51bWJlciB6ZXJvICjigJxob2xl4oCdKSBpbiBpdCB0byBpbmRpY2F0ZSB3aGVyZSB0aGUgbm9kZSdzXG4vLyAgIGNvbnRlbnQgc2hvdWxkIGJlIGluc2VydGVkLlxuLy9cbi8vICAgRm9yIHRleHQgbm9kZXMsIHRoZSBkZWZhdWx0IGlzIHRvIGNyZWF0ZSBhIHRleHQgRE9NIG5vZGUuIFRob3VnaFxuLy8gICBpdCBpcyBwb3NzaWJsZSB0byBjcmVhdGUgYSBzZXJpYWxpemVyIHdoZXJlIHRleHQgaXMgcmVuZGVyZWRcbi8vICAgZGlmZmVyZW50bHksIHRoaXMgaXMgbm90IHN1cHBvcnRlZCBpbnNpZGUgdGhlIGVkaXRvciwgc28geW91XG4vLyAgIHNob3VsZG4ndCBvdmVycmlkZSB0aGF0IGluIHlvdXIgdGV4dCBub2RlIHNwZWMuXG4vL1xuLy8gICBwYXJzZURPTTo6ID9bUGFyc2VSdWxlXVxuLy8gICBBc3NvY2lhdGVzIERPTSBwYXJzZXIgaW5mb3JtYXRpb24gd2l0aCB0aGlzIG5vZGUsIHdoaWNoIGNhbiBiZVxuLy8gICB1c2VkIGJ5IFtgRE9NUGFyc2VyLmZyb21TY2hlbWFgXSgjbW9kZWwuRE9NUGFyc2VyXmZyb21TY2hlbWEpIHRvXG4vLyAgIGF1dG9tYXRpY2FsbHkgZGVyaXZlIGEgcGFyc2VyLiBUaGUgYG5vZGVgIGZpZWxkIGluIHRoZSBydWxlcyBpc1xuLy8gICBpbXBsaWVkICh0aGUgbmFtZSBvZiB0aGlzIG5vZGUgd2lsbCBiZSBmaWxsZWQgaW4gYXV0b21hdGljYWxseSkuXG4vLyAgIElmIHlvdSBzdXBwbHkgeW91ciBvd24gcGFyc2VyLCB5b3UgZG8gbm90IG5lZWQgdG8gYWxzbyBzcGVjaWZ5XG4vLyAgIHBhcnNpbmcgcnVsZXMgaW4geW91ciBzY2hlbWEuXG4vL1xuLy8gICB0b0RlYnVnU3RyaW5nOjogPyhub2RlOiBOb2RlKSAtPiBzdHJpbmdcbi8vICAgRGVmaW5lcyB0aGUgZGVmYXVsdCB3YXkgYSBub2RlIG9mIHRoaXMgdHlwZSBzaG91bGQgYmUgc2VyaWFsaXplZFxuLy8gICB0byBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBmb3IgZGVidWdnaW5nIChlLmcuIGluIGVycm9yIG1lc3NhZ2VzKS5cblxuLy8gTWFya1NwZWM6OiBpbnRlcmZhY2Vcbi8vXG4vLyAgIGF0dHJzOjogP09iamVjdDxBdHRyaWJ1dGVTcGVjPlxuLy8gICBUaGUgYXR0cmlidXRlcyB0aGF0IG1hcmtzIG9mIHRoaXMgdHlwZSBnZXQuXG4vL1xuLy8gICBpbmNsdXNpdmU6OiA/Ym9vbFxuLy8gICBXaGV0aGVyIHRoaXMgbWFyayBzaG91bGQgYmUgYWN0aXZlIHdoZW4gdGhlIGN1cnNvciBpcyBwb3NpdGlvbmVkXG4vLyAgIGF0IGl0cyBlbmQgKG9yIGF0IGl0cyBzdGFydCB3aGVuIHRoYXQgaXMgYWxzbyB0aGUgc3RhcnQgb2YgdGhlXG4vLyAgIHBhcmVudCBub2RlKS4gRGVmYXVsdHMgdG8gdHJ1ZS5cbi8vXG4vLyAgIGV4Y2x1ZGVzOjogP3N0cmluZ1xuLy8gICBEZXRlcm1pbmVzIHdoaWNoIG90aGVyIG1hcmtzIHRoaXMgbWFyayBjYW4gY29leGlzdCB3aXRoLiBTaG91bGRcbi8vICAgYmUgYSBzcGFjZS1zZXBhcmF0ZWQgc3RyaW5ncyBuYW1pbmcgb3RoZXIgbWFya3Mgb3IgZ3JvdXBzIG9mIG1hcmtzLlxuLy8gICBXaGVuIGEgbWFyayBpcyBbYWRkZWRdKCNtb2RlbC5NYXJrLmFkZFRvU2V0KSB0byBhIHNldCwgYWxsIG1hcmtzXG4vLyAgIHRoYXQgaXQgZXhjbHVkZXMgYXJlIHJlbW92ZWQgaW4gdGhlIHByb2Nlc3MuIElmIHRoZSBzZXQgY29udGFpbnNcbi8vICAgYW55IG1hcmsgdGhhdCBleGNsdWRlcyB0aGUgbmV3IG1hcmsgYnV0IGlzIG5vdCwgaXRzZWxmLCBleGNsdWRlZFxuLy8gICBieSB0aGUgbmV3IG1hcmssIHRoZSBtYXJrIGNhbiBub3QgYmUgYWRkZWQgYW4gdGhlIHNldC4gWW91IGNhblxuLy8gICB1c2UgdGhlIHZhbHVlIGBcIl9cImAgdG8gaW5kaWNhdGUgdGhhdCB0aGUgbWFyayBleGNsdWRlcyBhbGxcbi8vICAgbWFya3MgaW4gdGhlIHNjaGVtYS5cbi8vXG4vLyAgIERlZmF1bHRzIHRvIG9ubHkgYmVpbmcgZXhjbHVzaXZlIHdpdGggbWFya3Mgb2YgdGhlIHNhbWUgdHlwZS4gWW91XG4vLyAgIGNhbiBzZXQgaXQgdG8gYW4gZW1wdHkgc3RyaW5nIChvciBhbnkgc3RyaW5nIG5vdCBjb250YWluaW5nIHRoZVxuLy8gICBtYXJrJ3Mgb3duIG5hbWUpIHRvIGFsbG93IG11bHRpcGxlIG1hcmtzIG9mIGEgZ2l2ZW4gdHlwZSB0b1xuLy8gICBjb2V4aXN0IChhcyBsb25nIGFzIHRoZXkgaGF2ZSBkaWZmZXJlbnQgYXR0cmlidXRlcykuXG4vL1xuLy8gICBncm91cDo6ID9zdHJpbmdcbi8vICAgVGhlIGdyb3VwIG9yIHNwYWNlLXNlcGFyYXRlZCBncm91cHMgdG8gd2hpY2ggdGhpcyBtYXJrIGJlbG9uZ3MuXG4vL1xuLy8gICBzcGFubmluZzo6ID9ib29sXG4vLyAgIERldGVybWluZXMgd2hldGhlciBtYXJrcyBvZiB0aGlzIHR5cGUgY2FuIHNwYW4gbXVsdGlwbGUgYWRqYWNlbnRcbi8vICAgbm9kZXMgd2hlbiBzZXJpYWxpemVkIHRvIERPTS9IVE1MLiBEZWZhdWx0cyB0byB0cnVlLlxuLy9cbi8vICAgdG9ET006OiA/KG1hcms6IE1hcmssIGlubGluZTogYm9vbCkg4oaSIERPTU91dHB1dFNwZWNcbi8vICAgRGVmaW5lcyB0aGUgZGVmYXVsdCB3YXkgbWFya3Mgb2YgdGhpcyB0eXBlIHNob3VsZCBiZSBzZXJpYWxpemVkXG4vLyAgIHRvIERPTS9IVE1MLiBXaGVuIHRoZSByZXN1bHRpbmcgc3BlYyBjb250YWlucyBhIGhvbGUsIHRoYXQgaXNcbi8vICAgd2hlcmUgdGhlIG1hcmtlZCBjb250ZW50IGlzIHBsYWNlZC4gT3RoZXJ3aXNlLCBpdCBpcyBhcHBlbmRlZCB0b1xuLy8gICB0aGUgdG9wIG5vZGUuXG4vL1xuLy8gICBwYXJzZURPTTo6ID9bUGFyc2VSdWxlXVxuLy8gICBBc3NvY2lhdGVzIERPTSBwYXJzZXIgaW5mb3JtYXRpb24gd2l0aCB0aGlzIG1hcmsgKHNlZSB0aGVcbi8vICAgY29ycmVzcG9uZGluZyBbbm9kZSBzcGVjIGZpZWxkXSgjbW9kZWwuTm9kZVNwZWMucGFyc2VET00pKS4gVGhlXG4vLyAgIGBtYXJrYCBmaWVsZCBpbiB0aGUgcnVsZXMgaXMgaW1wbGllZC5cblxuLy8gQXR0cmlidXRlU3BlYzo6IGludGVyZmFjZVxuLy9cbi8vIFVzZWQgdG8gW2RlZmluZV0oI21vZGVsLk5vZGVTcGVjLmF0dHJzKSBhdHRyaWJ1dGVzIG9uIG5vZGVzIG9yXG4vLyBtYXJrcy5cbi8vXG4vLyAgIGRlZmF1bHQ6OiA/YW55XG4vLyAgIFRoZSBkZWZhdWx0IHZhbHVlIGZvciB0aGlzIGF0dHJpYnV0ZSwgdG8gdXNlIHdoZW4gbm8gZXhwbGljaXRcbi8vICAgdmFsdWUgaXMgcHJvdmlkZWQuIEF0dHJpYnV0ZXMgdGhhdCBoYXZlIG5vIGRlZmF1bHQgbXVzdCBiZVxuLy8gICBwcm92aWRlZCB3aGVuZXZlciBhIG5vZGUgb3IgbWFyayBvZiBhIHR5cGUgdGhhdCBoYXMgdGhlbSBpc1xuLy8gICBjcmVhdGVkLlxuXG4vLyA6Oi0gQSBkb2N1bWVudCBzY2hlbWEuIEhvbGRzIFtub2RlXSgjbW9kZWwuTm9kZVR5cGUpIGFuZCBbbWFya1xuLy8gdHlwZV0oI21vZGVsLk1hcmtUeXBlKSBvYmplY3RzIGZvciB0aGUgbm9kZXMgYW5kIG1hcmtzIHRoYXQgbWF5XG4vLyBvY2N1ciBpbiBjb25mb3JtaW5nIGRvY3VtZW50cywgYW5kIHByb3ZpZGVzIGZ1bmN0aW9uYWxpdHkgZm9yXG4vLyBjcmVhdGluZyBhbmQgZGVzZXJpYWxpemluZyBzdWNoIGRvY3VtZW50cy5cbnZhciBTY2hlbWEgPSBmdW5jdGlvbiBTY2hlbWEoc3BlYykge1xuICAvLyA6OiBTY2hlbWFTcGVjXG4gIC8vIFRoZSBbc3BlY10oI21vZGVsLlNjaGVtYVNwZWMpIG9uIHdoaWNoIHRoZSBzY2hlbWEgaXMgYmFzZWQsXG4gIC8vIHdpdGggdGhlIGFkZGVkIGd1YXJhbnRlZSB0aGF0IGl0cyBgbm9kZXNgIGFuZCBgbWFya3NgXG4gIC8vIHByb3BlcnRpZXMgYXJlXG4gIC8vIFtgT3JkZXJlZE1hcGBdKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJpam5oL29yZGVyZWRtYXApIGluc3RhbmNlc1xuICAvLyAobm90IHJhdyBvYmplY3RzKS5cbiAgdGhpcy5zcGVjID0ge307XG4gIGZvciAodmFyIHByb3AgaW4gc3BlYykgeyB0aGlzLnNwZWNbcHJvcF0gPSBzcGVjW3Byb3BdOyB9XG4gIHRoaXMuc3BlYy5ub2RlcyA9IE9yZGVyZWRNYXAuZnJvbShzcGVjLm5vZGVzKTtcbiAgdGhpcy5zcGVjLm1hcmtzID0gT3JkZXJlZE1hcC5mcm9tKHNwZWMubWFya3MpO1xuXG4gIC8vIDo6IE9iamVjdDxOb2RlVHlwZT5cbiAgLy8gQW4gb2JqZWN0IG1hcHBpbmcgdGhlIHNjaGVtYSdzIG5vZGUgbmFtZXMgdG8gbm9kZSB0eXBlIG9iamVjdHMuXG4gIHRoaXMubm9kZXMgPSBOb2RlVHlwZS5jb21waWxlKHRoaXMuc3BlYy5ub2RlcywgdGhpcyk7XG5cbiAgLy8gOjogT2JqZWN0PE1hcmtUeXBlPlxuICAvLyBBIG1hcCBmcm9tIG1hcmsgbmFtZXMgdG8gbWFyayB0eXBlIG9iamVjdHMuXG4gIHRoaXMubWFya3MgPSBNYXJrVHlwZS5jb21waWxlKHRoaXMuc3BlYy5tYXJrcywgdGhpcyk7XG5cbiAgdmFyIGNvbnRlbnRFeHByQ2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBmb3IgKHZhciBwcm9wJDEgaW4gdGhpcy5ub2Rlcykge1xuICAgIGlmIChwcm9wJDEgaW4gdGhpcy5tYXJrcylcbiAgICAgIHsgdGhyb3cgbmV3IFJhbmdlRXJyb3IocHJvcCQxICsgXCIgY2FuIG5vdCBiZSBib3RoIGEgbm9kZSBhbmQgYSBtYXJrXCIpIH1cbiAgICB2YXIgdHlwZSA9IHRoaXMubm9kZXNbcHJvcCQxXSwgY29udGVudEV4cHIgPSB0eXBlLnNwZWMuY29udGVudCB8fCBcIlwiLCBtYXJrRXhwciA9IHR5cGUuc3BlYy5tYXJrcztcbiAgICB0eXBlLmNvbnRlbnRNYXRjaCA9IGNvbnRlbnRFeHByQ2FjaGVbY29udGVudEV4cHJdIHx8XG4gICAgICAoY29udGVudEV4cHJDYWNoZVtjb250ZW50RXhwcl0gPSBDb250ZW50TWF0Y2gucGFyc2UoY29udGVudEV4cHIsIHRoaXMubm9kZXMpKTtcbiAgICB0eXBlLmlubGluZUNvbnRlbnQgPSB0eXBlLmNvbnRlbnRNYXRjaC5pbmxpbmVDb250ZW50O1xuICAgIHR5cGUubWFya1NldCA9IG1hcmtFeHByID09IFwiX1wiID8gbnVsbCA6XG4gICAgICBtYXJrRXhwciA/IGdhdGhlck1hcmtzKHRoaXMsIG1hcmtFeHByLnNwbGl0KFwiIFwiKSkgOlxuICAgICAgbWFya0V4cHIgPT0gXCJcIiB8fCAhdHlwZS5pbmxpbmVDb250ZW50ID8gW10gOiBudWxsO1xuICB9XG4gIGZvciAodmFyIHByb3AkMiBpbiB0aGlzLm1hcmtzKSB7XG4gICAgdmFyIHR5cGUkMSA9IHRoaXMubWFya3NbcHJvcCQyXSwgZXhjbCA9IHR5cGUkMS5zcGVjLmV4Y2x1ZGVzO1xuICAgIHR5cGUkMS5leGNsdWRlZCA9IGV4Y2wgPT0gbnVsbCA/IFt0eXBlJDFdIDogZXhjbCA9PSBcIlwiID8gW10gOiBnYXRoZXJNYXJrcyh0aGlzLCBleGNsLnNwbGl0KFwiIFwiKSk7XG4gIH1cblxuICB0aGlzLm5vZGVGcm9tSlNPTiA9IHRoaXMubm9kZUZyb21KU09OLmJpbmQodGhpcyk7XG4gIHRoaXMubWFya0Zyb21KU09OID0gdGhpcy5tYXJrRnJvbUpTT04uYmluZCh0aGlzKTtcblxuICAvLyA6OiBOb2RlVHlwZVxuICAvLyBUaGUgdHlwZSBvZiB0aGUgW2RlZmF1bHQgdG9wIG5vZGVdKCNtb2RlbC5TY2hlbWFTcGVjLnRvcE5vZGUpXG4gIC8vIGZvciB0aGlzIHNjaGVtYS5cbiAgdGhpcy50b3BOb2RlVHlwZSA9IHRoaXMubm9kZXNbdGhpcy5zcGVjLnRvcE5vZGUgfHwgXCJkb2NcIl07XG5cbiAgLy8gOjogT2JqZWN0XG4gIC8vIEFuIG9iamVjdCBmb3Igc3RvcmluZyB3aGF0ZXZlciB2YWx1ZXMgbW9kdWxlcyBtYXkgd2FudCB0b1xuICAvLyBjb21wdXRlIGFuZCBjYWNoZSBwZXIgc2NoZW1hLiAoSWYgeW91IHdhbnQgdG8gc3RvcmUgc29tZXRoaW5nXG4gIC8vIGluIGl0LCB0cnkgdG8gdXNlIHByb3BlcnR5IG5hbWVzIHVubGlrZWx5IHRvIGNsYXNoLilcbiAgdGhpcy5jYWNoZWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLmNhY2hlZC53cmFwcGluZ3MgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xufTtcblxuLy8gOjogKHVuaW9uPHN0cmluZywgTm9kZVR5cGU+LCA/T2JqZWN0LCA/dW5pb248RnJhZ21lbnQsIE5vZGUsIFtOb2RlXT4sID9bTWFya10pIOKGkiBOb2RlXG4vLyBDcmVhdGUgYSBub2RlIGluIHRoaXMgc2NoZW1hLiBUaGUgYHR5cGVgIG1heSBiZSBhIHN0cmluZyBvciBhXG4vLyBgTm9kZVR5cGVgIGluc3RhbmNlLiBBdHRyaWJ1dGVzIHdpbGwgYmUgZXh0ZW5kZWRcbi8vIHdpdGggZGVmYXVsdHMsIGBjb250ZW50YCBtYXkgYmUgYSBgRnJhZ21lbnRgLFxuLy8gYG51bGxgLCBhIGBOb2RlYCwgb3IgYW4gYXJyYXkgb2Ygbm9kZXMuXG5TY2hlbWEucHJvdG90eXBlLm5vZGUgPSBmdW5jdGlvbiBub2RlICh0eXBlLCBhdHRycywgY29udGVudCwgbWFya3MpIHtcbiAgaWYgKHR5cGVvZiB0eXBlID09IFwic3RyaW5nXCIpXG4gICAgeyB0eXBlID0gdGhpcy5ub2RlVHlwZSh0eXBlKTsgfVxuICBlbHNlIGlmICghKHR5cGUgaW5zdGFuY2VvZiBOb2RlVHlwZSkpXG4gICAgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgbm9kZSB0eXBlOiBcIiArIHR5cGUpIH1cbiAgZWxzZSBpZiAodHlwZS5zY2hlbWEgIT0gdGhpcylcbiAgICB7IHRocm93IG5ldyBSYW5nZUVycm9yKFwiTm9kZSB0eXBlIGZyb20gZGlmZmVyZW50IHNjaGVtYSB1c2VkIChcIiArIHR5cGUubmFtZSArIFwiKVwiKSB9XG5cbiAgcmV0dXJuIHR5cGUuY3JlYXRlQ2hlY2tlZChhdHRycywgY29udGVudCwgbWFya3MpXG59O1xuXG4vLyA6OiAoc3RyaW5nLCA/W01hcmtdKSDihpIgTm9kZVxuLy8gQ3JlYXRlIGEgdGV4dCBub2RlIGluIHRoZSBzY2hlbWEuIEVtcHR5IHRleHQgbm9kZXMgYXJlIG5vdFxuLy8gYWxsb3dlZC5cblNjaGVtYS5wcm90b3R5cGUudGV4dCA9IGZ1bmN0aW9uIHRleHQgKHRleHQkMSwgbWFya3MpIHtcbiAgdmFyIHR5cGUgPSB0aGlzLm5vZGVzLnRleHQ7XG4gIHJldHVybiBuZXcgVGV4dE5vZGUodHlwZSwgdHlwZS5kZWZhdWx0QXR0cnMsIHRleHQkMSwgTWFyay5zZXRGcm9tKG1hcmtzKSlcbn07XG5cbi8vIDo6ICh1bmlvbjxzdHJpbmcsIE1hcmtUeXBlPiwgP09iamVjdCkg4oaSIE1hcmtcbi8vIENyZWF0ZSBhIG1hcmsgd2l0aCB0aGUgZ2l2ZW4gdHlwZSBhbmQgYXR0cmlidXRlcy5cblNjaGVtYS5wcm90b3R5cGUubWFyayA9IGZ1bmN0aW9uIG1hcmsgKHR5cGUsIGF0dHJzKSB7XG4gIGlmICh0eXBlb2YgdHlwZSA9PSBcInN0cmluZ1wiKSB7IHR5cGUgPSB0aGlzLm1hcmtzW3R5cGVdOyB9XG4gIHJldHVybiB0eXBlLmNyZWF0ZShhdHRycylcbn07XG5cbi8vIDo6IChPYmplY3QpIOKGkiBOb2RlXG4vLyBEZXNlcmlhbGl6ZSBhIG5vZGUgZnJvbSBpdHMgSlNPTiByZXByZXNlbnRhdGlvbi4gVGhpcyBtZXRob2QgaXNcbi8vIGJvdW5kLlxuU2NoZW1hLnByb3RvdHlwZS5ub2RlRnJvbUpTT04gPSBmdW5jdGlvbiBub2RlRnJvbUpTT04gKGpzb24pIHtcbiAgcmV0dXJuIE5vZGUuZnJvbUpTT04odGhpcywganNvbilcbn07XG5cbi8vIDo6IChPYmplY3QpIOKGkiBNYXJrXG4vLyBEZXNlcmlhbGl6ZSBhIG1hcmsgZnJvbSBpdHMgSlNPTiByZXByZXNlbnRhdGlvbi4gVGhpcyBtZXRob2QgaXNcbi8vIGJvdW5kLlxuU2NoZW1hLnByb3RvdHlwZS5tYXJrRnJvbUpTT04gPSBmdW5jdGlvbiBtYXJrRnJvbUpTT04gKGpzb24pIHtcbiAgcmV0dXJuIE1hcmsuZnJvbUpTT04odGhpcywganNvbilcbn07XG5cblNjaGVtYS5wcm90b3R5cGUubm9kZVR5cGUgPSBmdW5jdGlvbiBub2RlVHlwZSAobmFtZSkge1xuICB2YXIgZm91bmQgPSB0aGlzLm5vZGVzW25hbWVdO1xuICBpZiAoIWZvdW5kKSB7IHRocm93IG5ldyBSYW5nZUVycm9yKFwiVW5rbm93biBub2RlIHR5cGU6IFwiICsgbmFtZSkgfVxuICByZXR1cm4gZm91bmRcbn07XG5cbmZ1bmN0aW9uIGdhdGhlck1hcmtzKHNjaGVtYSwgbWFya3MpIHtcbiAgdmFyIGZvdW5kID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbWFya3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbmFtZSA9IG1hcmtzW2ldLCBtYXJrID0gc2NoZW1hLm1hcmtzW25hbWVdLCBvayA9IG1hcms7XG4gICAgaWYgKG1hcmspIHtcbiAgICAgIGZvdW5kLnB1c2gobWFyayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIHByb3AgaW4gc2NoZW1hLm1hcmtzKSB7XG4gICAgICAgIHZhciBtYXJrJDEgPSBzY2hlbWEubWFya3NbcHJvcF07XG4gICAgICAgIGlmIChuYW1lID09IFwiX1wiIHx8IChtYXJrJDEuc3BlYy5ncm91cCAmJiBtYXJrJDEuc3BlYy5ncm91cC5zcGxpdChcIiBcIikuaW5kZXhPZihuYW1lKSA+IC0xKSlcbiAgICAgICAgICB7IGZvdW5kLnB1c2gob2sgPSBtYXJrJDEpOyB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghb2spIHsgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVW5rbm93biBtYXJrIHR5cGU6ICdcIiArIG1hcmtzW2ldICsgXCInXCIpIH1cbiAgfVxuICByZXR1cm4gZm91bmRcbn1cblxuLy8gUGFyc2VPcHRpb25zOjogaW50ZXJmYWNlXG4vLyBUaGVzZSBhcmUgdGhlIG9wdGlvbnMgcmVjb2duaXplZCBieSB0aGVcbi8vIFtgcGFyc2VgXSgjbW9kZWwuRE9NUGFyc2VyLnBhcnNlKSBhbmRcbi8vIFtgcGFyc2VTbGljZWBdKCNtb2RlbC5ET01QYXJzZXIucGFyc2VTbGljZSkgbWV0aG9kcy5cbi8vXG4vLyAgIHByZXNlcnZlV2hpdGVzcGFjZTo6ID91bmlvbjxib29sLCBcImZ1bGxcIj5cbi8vICAgQnkgZGVmYXVsdCwgd2hpdGVzcGFjZSBpcyBjb2xsYXBzZWQgYXMgcGVyIEhUTUwncyBydWxlcy4gUGFzc1xuLy8gICBgdHJ1ZWAgdG8gcHJlc2VydmUgd2hpdGVzcGFjZSwgYnV0IG5vcm1hbGl6ZSBuZXdsaW5lcyB0b1xuLy8gICBzcGFjZXMsIGFuZCBgXCJmdWxsXCJgIHRvIHByZXNlcnZlIHdoaXRlc3BhY2UgZW50aXJlbHkuXG4vL1xuLy8gICBmaW5kUG9zaXRpb25zOjogP1t7bm9kZTogZG9tLk5vZGUsIG9mZnNldDogbnVtYmVyfV1cbi8vICAgV2hlbiBnaXZlbiwgdGhlIHBhcnNlciB3aWxsLCBiZXNpZGUgcGFyc2luZyB0aGUgY29udGVudCxcbi8vICAgcmVjb3JkIHRoZSBkb2N1bWVudCBwb3NpdGlvbnMgb2YgdGhlIGdpdmVuIERPTSBwb3NpdGlvbnMuIEl0XG4vLyAgIHdpbGwgZG8gc28gYnkgd3JpdGluZyB0byB0aGUgb2JqZWN0cywgYWRkaW5nIGEgYHBvc2AgcHJvcGVydHlcbi8vICAgdGhhdCBob2xkcyB0aGUgZG9jdW1lbnQgcG9zaXRpb24uIERPTSBwb3NpdGlvbnMgdGhhdCBhcmUgbm90XG4vLyAgIGluIHRoZSBwYXJzZWQgY29udGVudCB3aWxsIG5vdCBiZSB3cml0dGVuIHRvLlxuLy9cbi8vICAgZnJvbTo6ID9udW1iZXJcbi8vICAgVGhlIGNoaWxkIG5vZGUgaW5kZXggdG8gc3RhcnQgcGFyc2luZyBmcm9tLlxuLy9cbi8vICAgdG86OiA/bnVtYmVyXG4vLyAgIFRoZSBjaGlsZCBub2RlIGluZGV4IHRvIHN0b3AgcGFyc2luZyBhdC5cbi8vXG4vLyAgIHRvcE5vZGU6OiA/Tm9kZVxuLy8gICBCeSBkZWZhdWx0LCB0aGUgY29udGVudCBpcyBwYXJzZWQgaW50byB0aGUgc2NoZW1hJ3MgZGVmYXVsdFxuLy8gICBbdG9wIG5vZGUgdHlwZV0oI21vZGVsLlNjaGVtYS50b3BOb2RlVHlwZSkuIFlvdSBjYW4gcGFzcyB0aGlzXG4vLyAgIG9wdGlvbiB0byB1c2UgdGhlIHR5cGUgYW5kIGF0dHJpYnV0ZXMgZnJvbSBhIGRpZmZlcmVudCBub2RlXG4vLyAgIGFzIHRoZSB0b3AgY29udGFpbmVyLlxuLy9cbi8vICAgdG9wTWF0Y2g6OiA/Q29udGVudE1hdGNoXG4vLyAgIFByb3ZpZGUgdGhlIHN0YXJ0aW5nIGNvbnRlbnQgbWF0Y2ggdGhhdCBjb250ZW50IHBhcnNlZCBpbnRvIHRoZVxuLy8gICB0b3Agbm9kZSBpcyBtYXRjaGVkIGFnYWluc3QuXG4vL1xuLy8gICBjb250ZXh0OjogP1Jlc29sdmVkUG9zXG4vLyAgIEEgc2V0IG9mIGFkZGl0aW9uYWwgbm9kZXMgdG8gY291bnQgYXNcbi8vICAgW2NvbnRleHRdKCNtb2RlbC5QYXJzZVJ1bGUuY29udGV4dCkgd2hlbiBwYXJzaW5nLCBhYm92ZSB0aGVcbi8vICAgZ2l2ZW4gW3RvcCBub2RlXSgjbW9kZWwuUGFyc2VPcHRpb25zLnRvcE5vZGUpLlxuXG4vLyBQYXJzZVJ1bGU6OiBpbnRlcmZhY2Vcbi8vIEEgdmFsdWUgdGhhdCBkZXNjcmliZXMgaG93IHRvIHBhcnNlIGEgZ2l2ZW4gRE9NIG5vZGUgb3IgaW5saW5lXG4vLyBzdHlsZSBhcyBhIFByb3NlTWlycm9yIG5vZGUgb3IgbWFyay5cbi8vXG4vLyAgIHRhZzo6ID9zdHJpbmdcbi8vICAgQSBDU1Mgc2VsZWN0b3IgZGVzY3JpYmluZyB0aGUga2luZCBvZiBET00gZWxlbWVudHMgdG8gbWF0Y2guIEFcbi8vICAgc2luZ2xlIHJ1bGUgc2hvdWxkIGhhdmUgX2VpdGhlcl8gYSBgdGFnYCBvciBhIGBzdHlsZWAgcHJvcGVydHkuXG4vL1xuLy8gICBuYW1lc3BhY2U6OiA/c3RyaW5nXG4vLyAgIFRoZSBuYW1lc3BhY2UgdG8gbWF0Y2guIFRoaXMgc2hvdWxkIGJlIHVzZWQgd2l0aCBgdGFnYC5cbi8vICAgTm9kZXMgYXJlIG9ubHkgbWF0Y2hlZCB3aGVuIHRoZSBuYW1lc3BhY2UgbWF0Y2hlcyBvciB0aGlzIHByb3BlcnR5XG4vLyAgIGlzIG51bGwuXG4vL1xuLy8gICBzdHlsZTo6ID9zdHJpbmdcbi8vICAgQSBDU1MgcHJvcGVydHkgbmFtZSB0byBtYXRjaC4gV2hlbiBnaXZlbiwgdGhpcyBydWxlIG1hdGNoZXNcbi8vICAgaW5saW5lIHN0eWxlcyB0aGF0IGxpc3QgdGhhdCBwcm9wZXJ0eS4gTWF5IGFsc28gaGF2ZSB0aGUgZm9ybVxuLy8gICBgXCJwcm9wZXJ0eT12YWx1ZVwiYCwgaW4gd2hpY2ggY2FzZSB0aGUgcnVsZSBvbmx5IG1hdGNoZXMgaWYgdGhlXG4vLyAgIHByb3BlcnR5J3MgdmFsdWUgZXhhY3RseSBtYXRjaGVzIHRoZSBnaXZlbiB2YWx1ZS4gKEZvciBtb3JlXG4vLyAgIGNvbXBsaWNhdGVkIGZpbHRlcnMsIHVzZSBbYGdldEF0dHJzYF0oI21vZGVsLlBhcnNlUnVsZS5nZXRBdHRycylcbi8vICAgYW5kIHJldHVybiBmYWxzZSB0byBpbmRpY2F0ZSB0aGF0IHRoZSBtYXRjaCBmYWlsZWQuKSBSdWxlc1xuLy8gICBtYXRjaGluZyBzdHlsZXMgbWF5IG9ubHkgcHJvZHVjZSBbbWFya3NdKCNtb2RlbC5QYXJzZVJ1bGUubWFyayksXG4vLyAgIG5vdCBub2Rlcy5cbi8vXG4vLyAgIHByaW9yaXR5OjogP251bWJlclxuLy8gICBDYW4gYmUgdXNlZCB0byBjaGFuZ2UgdGhlIG9yZGVyIGluIHdoaWNoIHRoZSBwYXJzZSBydWxlcyBpbiBhXG4vLyAgIHNjaGVtYSBhcmUgdHJpZWQuIFRob3NlIHdpdGggaGlnaGVyIHByaW9yaXR5IGNvbWUgZmlyc3QuIFJ1bGVzXG4vLyAgIHdpdGhvdXQgYSBwcmlvcml0eSBhcmUgY291bnRlZCBhcyBoYXZpbmcgcHJpb3JpdHkgNTAuIFRoaXNcbi8vICAgcHJvcGVydHkgaXMgb25seSBtZWFuaW5nZnVsIGluIGEgc2NoZW1h4oCUd2hlbiBkaXJlY3RseVxuLy8gICBjb25zdHJ1Y3RpbmcgYSBwYXJzZXIsIHRoZSBvcmRlciBvZiB0aGUgcnVsZSBhcnJheSBpcyB1c2VkLlxuLy9cbi8vICAgY29uc3VtaW5nOjogP2Jvb2xlYW5cbi8vICAgQnkgZGVmYXVsdCwgd2hlbiBhIHJ1bGUgbWF0Y2hlcyBhbiBlbGVtZW50IG9yIHN0eWxlLCBubyBmdXJ0aGVyXG4vLyAgIHJ1bGVzIGdldCBhIGNoYW5jZSB0byBtYXRjaCBpdC4gQnkgc2V0dGluZyB0aGlzIHRvIGBmYWxzZWAsIHlvdVxuLy8gICBpbmRpY2F0ZSB0aGF0IGV2ZW4gd2hlbiB0aGlzIHJ1bGUgbWF0Y2hlcywgb3RoZXIgcnVsZXMgdGhhdCBjb21lXG4vLyAgIGFmdGVyIGl0IHNob3VsZCBhbHNvIHJ1bi5cbi8vXG4vLyAgIGNvbnRleHQ6OiA/c3RyaW5nXG4vLyAgIFdoZW4gZ2l2ZW4sIHJlc3RyaWN0cyB0aGlzIHJ1bGUgdG8gb25seSBtYXRjaCB3aGVuIHRoZSBjdXJyZW50XG4vLyAgIGNvbnRleHTigJR0aGUgcGFyZW50IG5vZGVzIGludG8gd2hpY2ggdGhlIGNvbnRlbnQgaXMgYmVpbmdcbi8vICAgcGFyc2Vk4oCUbWF0Y2hlcyB0aGlzIGV4cHJlc3Npb24uIFNob3VsZCBjb250YWluIG9uZSBvciBtb3JlIG5vZGVcbi8vICAgbmFtZXMgb3Igbm9kZSBncm91cCBuYW1lcyBmb2xsb3dlZCBieSBzaW5nbGUgb3IgZG91YmxlIHNsYXNoZXMuXG4vLyAgIEZvciBleGFtcGxlIGBcInBhcmFncmFwaC9cImAgbWVhbnMgdGhlIHJ1bGUgb25seSBtYXRjaGVzIHdoZW4gdGhlXG4vLyAgIHBhcmVudCBub2RlIGlzIGEgcGFyYWdyYXBoLCBgXCJibG9ja3F1b3RlL3BhcmFncmFwaC9cImAgcmVzdHJpY3RzXG4vLyAgIGl0IHRvIGJlIGluIGEgcGFyYWdyYXBoIHRoYXQgaXMgaW5zaWRlIGEgYmxvY2txdW90ZSwgYW5kXG4vLyAgIGBcInNlY3Rpb24vL1wiYCBtYXRjaGVzIGFueSBwb3NpdGlvbiBpbnNpZGUgYSBzZWN0aW9u4oCUYSBkb3VibGVcbi8vICAgc2xhc2ggbWF0Y2hlcyBhbnkgc2VxdWVuY2Ugb2YgYW5jZXN0b3Igbm9kZXMuIFRvIGFsbG93IG11bHRpcGxlXG4vLyAgIGRpZmZlcmVudCBjb250ZXh0cywgdGhleSBjYW4gYmUgc2VwYXJhdGVkIGJ5IGEgcGlwZSAoYHxgKVxuLy8gICBjaGFyYWN0ZXIsIGFzIGluIGBcImJsb2NrcXVvdGUvfGxpc3RfaXRlbS9cImAuXG4vL1xuLy8gICBub2RlOjogP3N0cmluZ1xuLy8gICBUaGUgbmFtZSBvZiB0aGUgbm9kZSB0eXBlIHRvIGNyZWF0ZSB3aGVuIHRoaXMgcnVsZSBtYXRjaGVzLiBPbmx5XG4vLyAgIHZhbGlkIGZvciBydWxlcyB3aXRoIGEgYHRhZ2AgcHJvcGVydHksIG5vdCBmb3Igc3R5bGUgcnVsZXMuIEVhY2hcbi8vICAgcnVsZSBzaG91bGQgaGF2ZSBvbmUgb2YgYSBgbm9kZWAsIGBtYXJrYCwgb3IgYGlnbm9yZWAgcHJvcGVydHlcbi8vICAgKGV4Y2VwdCB3aGVuIGl0IGFwcGVhcnMgaW4gYSBbbm9kZV0oI21vZGVsLk5vZGVTcGVjLnBhcnNlRE9NKSBvclxuLy8gICBbbWFyayBzcGVjXSgjbW9kZWwuTWFya1NwZWMucGFyc2VET00pLCBpbiB3aGljaCBjYXNlIHRoZSBgbm9kZWBcbi8vICAgb3IgYG1hcmtgIHByb3BlcnR5IHdpbGwgYmUgZGVyaXZlZCBmcm9tIGl0cyBwb3NpdGlvbikuXG4vL1xuLy8gICBtYXJrOjogP3N0cmluZ1xuLy8gICBUaGUgbmFtZSBvZiB0aGUgbWFyayB0eXBlIHRvIHdyYXAgdGhlIG1hdGNoZWQgY29udGVudCBpbi5cbi8vXG4vLyAgIGlnbm9yZTo6ID9ib29sXG4vLyAgIFdoZW4gdHJ1ZSwgaWdub3JlIGNvbnRlbnQgdGhhdCBtYXRjaGVzIHRoaXMgcnVsZS5cbi8vXG4vLyAgIGNsb3NlUGFyZW50OjogP2Jvb2xcbi8vICAgV2hlbiB0cnVlLCBmaW5kaW5nIGFuIGVsZW1lbnQgdGhhdCBtYXRjaGVzIHRoaXMgcnVsZSB3aWxsIGNsb3NlXG4vLyAgIHRoZSBjdXJyZW50IG5vZGUuXG4vL1xuLy8gICBza2lwOjogP2Jvb2xcbi8vICAgV2hlbiB0cnVlLCBpZ25vcmUgdGhlIG5vZGUgdGhhdCBtYXRjaGVzIHRoaXMgcnVsZSwgYnV0IGRvIHBhcnNlXG4vLyAgIGl0cyBjb250ZW50LlxuLy9cbi8vICAgYXR0cnM6OiA/T2JqZWN0XG4vLyAgIEF0dHJpYnV0ZXMgZm9yIHRoZSBub2RlIG9yIG1hcmsgY3JlYXRlZCBieSB0aGlzIHJ1bGUuIFdoZW5cbi8vICAgYGdldEF0dHJzYCBpcyBwcm92aWRlZCwgaXQgdGFrZXMgcHJlY2VkZW5jZS5cbi8vXG4vLyAgIGdldEF0dHJzOjogPyh1bmlvbjxkb20uTm9kZSwgc3RyaW5nPikg4oaSID91bmlvbjxPYmplY3QsIGZhbHNlPlxuLy8gICBBIGZ1bmN0aW9uIHVzZWQgdG8gY29tcHV0ZSB0aGUgYXR0cmlidXRlcyBmb3IgdGhlIG5vZGUgb3IgbWFya1xuLy8gICBjcmVhdGVkIGJ5IHRoaXMgcnVsZS4gQ2FuIGFsc28gYmUgdXNlZCB0byBkZXNjcmliZSBmdXJ0aGVyXG4vLyAgIGNvbmRpdGlvbnMgdGhlIERPTSBlbGVtZW50IG9yIHN0eWxlIG11c3QgbWF0Y2guIFdoZW4gaXQgcmV0dXJuc1xuLy8gICBgZmFsc2VgLCB0aGUgcnVsZSB3b24ndCBtYXRjaC4gV2hlbiBpdCByZXR1cm5zIG51bGwgb3IgdW5kZWZpbmVkLFxuLy8gICB0aGF0IGlzIGludGVycHJldGVkIGFzIGFuIGVtcHR5L2RlZmF1bHQgc2V0IG9mIGF0dHJpYnV0ZXMuXG4vL1xuLy8gICBDYWxsZWQgd2l0aCBhIERPTSBFbGVtZW50IGZvciBgdGFnYCBydWxlcywgYW5kIHdpdGggYSBzdHJpbmcgKHRoZVxuLy8gICBzdHlsZSdzIHZhbHVlKSBmb3IgYHN0eWxlYCBydWxlcy5cbi8vXG4vLyAgIGNvbnRlbnRFbGVtZW50OjogP3VuaW9uPHN0cmluZywgKGRvbS5Ob2RlKSDihpIgZG9tLk5vZGU+XG4vLyAgIEZvciBgdGFnYCBydWxlcyB0aGF0IHByb2R1Y2Ugbm9uLWxlYWYgbm9kZXMgb3IgbWFya3MsIGJ5IGRlZmF1bHRcbi8vICAgdGhlIGNvbnRlbnQgb2YgdGhlIERPTSBlbGVtZW50IGlzIHBhcnNlZCBhcyBjb250ZW50IG9mIHRoZSBtYXJrXG4vLyAgIG9yIG5vZGUuIElmIHRoZSBjaGlsZCBub2RlcyBhcmUgaW4gYSBkZXNjZW5kZW50IG5vZGUsIHRoaXMgbWF5IGJlXG4vLyAgIGEgQ1NTIHNlbGVjdG9yIHN0cmluZyB0aGF0IHRoZSBwYXJzZXIgbXVzdCB1c2UgdG8gZmluZCB0aGUgYWN0dWFsXG4vLyAgIGNvbnRlbnQgZWxlbWVudCwgb3IgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGFjdHVhbCBjb250ZW50XG4vLyAgIGVsZW1lbnQgdG8gdGhlIHBhcnNlci5cbi8vXG4vLyAgIGdldENvbnRlbnQ6OiA/KGRvbS5Ob2RlLCBzY2hlbWE6IFNjaGVtYSkg4oaSIEZyYWdtZW50XG4vLyAgIENhbiBiZSB1c2VkIHRvIG92ZXJyaWRlIHRoZSBjb250ZW50IG9mIGEgbWF0Y2hlZCBub2RlLiBXaGVuXG4vLyAgIHByZXNlbnQsIGluc3RlYWQgb2YgcGFyc2luZyB0aGUgbm9kZSdzIGNoaWxkIG5vZGVzLCB0aGUgcmVzdWx0IG9mXG4vLyAgIHRoaXMgZnVuY3Rpb24gaXMgdXNlZC5cbi8vXG4vLyAgIHByZXNlcnZlV2hpdGVzcGFjZTo6ID91bmlvbjxib29sLCBcImZ1bGxcIj5cbi8vICAgQ29udHJvbHMgd2hldGhlciB3aGl0ZXNwYWNlIHNob3VsZCBiZSBwcmVzZXJ2ZWQgd2hlbiBwYXJzaW5nIHRoZVxuLy8gICBjb250ZW50IGluc2lkZSB0aGUgbWF0Y2hlZCBlbGVtZW50LiBgZmFsc2VgIG1lYW5zIHdoaXRlc3BhY2UgbWF5XG4vLyAgIGJlIGNvbGxhcHNlZCwgYHRydWVgIG1lYW5zIHRoYXQgd2hpdGVzcGFjZSBzaG91bGQgYmUgcHJlc2VydmVkXG4vLyAgIGJ1dCBuZXdsaW5lcyBub3JtYWxpemVkIHRvIHNwYWNlcywgYW5kIGBcImZ1bGxcImAgbWVhbnMgdGhhdFxuLy8gICBuZXdsaW5lcyBzaG91bGQgYWxzbyBiZSBwcmVzZXJ2ZWQuXG5cbi8vIDo6LSBBIERPTSBwYXJzZXIgcmVwcmVzZW50cyBhIHN0cmF0ZWd5IGZvciBwYXJzaW5nIERPTSBjb250ZW50IGludG9cbi8vIGEgUHJvc2VNaXJyb3IgZG9jdW1lbnQgY29uZm9ybWluZyB0byBhIGdpdmVuIHNjaGVtYS4gSXRzIGJlaGF2aW9yXG4vLyBpcyBkZWZpbmVkIGJ5IGFuIGFycmF5IG9mIFtydWxlc10oI21vZGVsLlBhcnNlUnVsZSkuXG52YXIgRE9NUGFyc2VyID0gZnVuY3Rpb24gRE9NUGFyc2VyKHNjaGVtYSwgcnVsZXMpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgLy8gOjogU2NoZW1hXG4gIC8vIFRoZSBzY2hlbWEgaW50byB3aGljaCB0aGUgcGFyc2VyIHBhcnNlcy5cbiAgdGhpcy5zY2hlbWEgPSBzY2hlbWE7XG4gIC8vIDo6IFtQYXJzZVJ1bGVdXG4gIC8vIFRoZSBzZXQgb2YgW3BhcnNlIHJ1bGVzXSgjbW9kZWwuUGFyc2VSdWxlKSB0aGF0IHRoZSBwYXJzZXJcbiAgLy8gdXNlcywgaW4gb3JkZXIgb2YgcHJlY2VkZW5jZS5cbiAgdGhpcy5ydWxlcyA9IHJ1bGVzO1xuICB0aGlzLnRhZ3MgPSBbXTtcbiAgdGhpcy5zdHlsZXMgPSBbXTtcblxuICBydWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgaWYgKHJ1bGUudGFnKSB7IHRoaXMkMS50YWdzLnB1c2gocnVsZSk7IH1cbiAgICBlbHNlIGlmIChydWxlLnN0eWxlKSB7IHRoaXMkMS5zdHlsZXMucHVzaChydWxlKTsgfVxuICB9KTtcblxuICAvLyBPbmx5IG5vcm1hbGl6ZSBsaXN0IGVsZW1lbnRzIHdoZW4gbGlzdHMgaW4gdGhlIHNjaGVtYSBjYW4ndCBkaXJlY3RseSBjb250YWluIHRoZW1zZWx2ZXNcbiAgdGhpcy5ub3JtYWxpemVMaXN0cyA9ICF0aGlzLnRhZ3Muc29tZShmdW5jdGlvbiAocikge1xuICAgIGlmICghL14odWx8b2wpXFxiLy50ZXN0KHIudGFnKSB8fCAhci5ub2RlKSB7IHJldHVybiBmYWxzZSB9XG4gICAgdmFyIG5vZGUgPSBzY2hlbWEubm9kZXNbci5ub2RlXTtcbiAgICByZXR1cm4gbm9kZS5jb250ZW50TWF0Y2gubWF0Y2hUeXBlKG5vZGUpXG4gIH0pO1xufTtcblxuLy8gOjogKGRvbS5Ob2RlLCA/UGFyc2VPcHRpb25zKSDihpIgTm9kZVxuLy8gUGFyc2UgYSBkb2N1bWVudCBmcm9tIHRoZSBjb250ZW50IG9mIGEgRE9NIG5vZGUuXG5ET01QYXJzZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gcGFyc2UgKGRvbSwgb3B0aW9ucykge1xuICAgIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIHZhciBjb250ZXh0ID0gbmV3IFBhcnNlQ29udGV4dCh0aGlzLCBvcHRpb25zLCBmYWxzZSk7XG4gIGNvbnRleHQuYWRkQWxsKGRvbSwgbnVsbCwgb3B0aW9ucy5mcm9tLCBvcHRpb25zLnRvKTtcbiAgcmV0dXJuIGNvbnRleHQuZmluaXNoKClcbn07XG5cbi8vIDo6IChkb20uTm9kZSwgP1BhcnNlT3B0aW9ucykg4oaSIFNsaWNlXG4vLyBQYXJzZXMgdGhlIGNvbnRlbnQgb2YgdGhlIGdpdmVuIERPTSBub2RlLCBsaWtlXG4vLyBbYHBhcnNlYF0oI21vZGVsLkRPTVBhcnNlci5wYXJzZSksIGFuZCB0YWtlcyB0aGUgc2FtZSBzZXQgb2Zcbi8vIG9wdGlvbnMuIEJ1dCB1bmxpa2UgdGhhdCBtZXRob2QsIHdoaWNoIHByb2R1Y2VzIGEgd2hvbGUgbm9kZSxcbi8vIHRoaXMgb25lIHJldHVybnMgYSBzbGljZSB0aGF0IGlzIG9wZW4gYXQgdGhlIHNpZGVzLCBtZWFuaW5nIHRoYXRcbi8vIHRoZSBzY2hlbWEgY29uc3RyYWludHMgYXJlbid0IGFwcGxpZWQgdG8gdGhlIHN0YXJ0IG9mIG5vZGVzIHRvXG4vLyB0aGUgbGVmdCBvZiB0aGUgaW5wdXQgYW5kIHRoZSBlbmQgb2Ygbm9kZXMgYXQgdGhlIGVuZC5cbkRPTVBhcnNlci5wcm90b3R5cGUucGFyc2VTbGljZSA9IGZ1bmN0aW9uIHBhcnNlU2xpY2UgKGRvbSwgb3B0aW9ucykge1xuICAgIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIHZhciBjb250ZXh0ID0gbmV3IFBhcnNlQ29udGV4dCh0aGlzLCBvcHRpb25zLCB0cnVlKTtcbiAgY29udGV4dC5hZGRBbGwoZG9tLCBudWxsLCBvcHRpb25zLmZyb20sIG9wdGlvbnMudG8pO1xuICByZXR1cm4gU2xpY2UubWF4T3Blbihjb250ZXh0LmZpbmlzaCgpKVxufTtcblxuRE9NUGFyc2VyLnByb3RvdHlwZS5tYXRjaFRhZyA9IGZ1bmN0aW9uIG1hdGNoVGFnIChkb20sIGNvbnRleHQsIGFmdGVyKSB7XG4gIGZvciAodmFyIGkgPSBhZnRlciA/IHRoaXMudGFncy5pbmRleE9mKGFmdGVyKSArIDEgOiAwOyBpIDwgdGhpcy50YWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHJ1bGUgPSB0aGlzLnRhZ3NbaV07XG4gICAgaWYgKG1hdGNoZXMoZG9tLCBydWxlLnRhZykgJiZcbiAgICAgICAgKHJ1bGUubmFtZXNwYWNlID09PSB1bmRlZmluZWQgfHwgZG9tLm5hbWVzcGFjZVVSSSA9PSBydWxlLm5hbWVzcGFjZSkgJiZcbiAgICAgICAgKCFydWxlLmNvbnRleHQgfHwgY29udGV4dC5tYXRjaGVzQ29udGV4dChydWxlLmNvbnRleHQpKSkge1xuICAgICAgaWYgKHJ1bGUuZ2V0QXR0cnMpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJ1bGUuZ2V0QXR0cnMoZG9tKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHsgY29udGludWUgfVxuICAgICAgICBydWxlLmF0dHJzID0gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJ1bGVcbiAgICB9XG4gIH1cbn07XG5cbkRPTVBhcnNlci5wcm90b3R5cGUubWF0Y2hTdHlsZSA9IGZ1bmN0aW9uIG1hdGNoU3R5bGUgKHByb3AsIHZhbHVlLCBjb250ZXh0LCBhZnRlcikge1xuICBmb3IgKHZhciBpID0gYWZ0ZXIgPyB0aGlzLnN0eWxlcy5pbmRleE9mKGFmdGVyKSArIDEgOiAwOyBpIDwgdGhpcy5zdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcnVsZSA9IHRoaXMuc3R5bGVzW2ldO1xuICAgIGlmIChydWxlLnN0eWxlLmluZGV4T2YocHJvcCkgIT0gMCB8fFxuICAgICAgICBydWxlLmNvbnRleHQgJiYgIWNvbnRleHQubWF0Y2hlc0NvbnRleHQocnVsZS5jb250ZXh0KSB8fFxuICAgICAgICAvLyBUZXN0IHRoYXQgdGhlIHN0eWxlIHN0cmluZyBlaXRoZXIgcHJlY2lzZWx5IG1hdGNoZXMgdGhlIHByb3AsXG4gICAgICAgIC8vIG9yIGhhcyBhbiAnPScgc2lnbiBhZnRlciB0aGUgcHJvcCwgZm9sbG93ZWQgYnkgdGhlIGdpdmVuXG4gICAgICAgIC8vIHZhbHVlLlxuICAgICAgICBydWxlLnN0eWxlLmxlbmd0aCA+IHByb3AubGVuZ3RoICYmXG4gICAgICAgIChydWxlLnN0eWxlLmNoYXJDb2RlQXQocHJvcC5sZW5ndGgpICE9IDYxIHx8IHJ1bGUuc3R5bGUuc2xpY2UocHJvcC5sZW5ndGggKyAxKSAhPSB2YWx1ZSkpXG4gICAgICB7IGNvbnRpbnVlIH1cbiAgICBpZiAocnVsZS5nZXRBdHRycykge1xuICAgICAgdmFyIHJlc3VsdCA9IHJ1bGUuZ2V0QXR0cnModmFsdWUpO1xuICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHsgY29udGludWUgfVxuICAgICAgcnVsZS5hdHRycyA9IHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIHJ1bGVcbiAgfVxufTtcblxuLy8gOiAoU2NoZW1hKSDihpIgW1BhcnNlUnVsZV1cbkRPTVBhcnNlci5zY2hlbWFSdWxlcyA9IGZ1bmN0aW9uIHNjaGVtYVJ1bGVzIChzY2hlbWEpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmdW5jdGlvbiBpbnNlcnQocnVsZSkge1xuICAgIHZhciBwcmlvcml0eSA9IHJ1bGUucHJpb3JpdHkgPT0gbnVsbCA/IDUwIDogcnVsZS5wcmlvcml0eSwgaSA9IDA7XG4gICAgZm9yICg7IGkgPCByZXN1bHQubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBuZXh0ID0gcmVzdWx0W2ldLCBuZXh0UHJpb3JpdHkgPSBuZXh0LnByaW9yaXR5ID09IG51bGwgPyA1MCA6IG5leHQucHJpb3JpdHk7XG4gICAgICBpZiAobmV4dFByaW9yaXR5IDwgcHJpb3JpdHkpIHsgYnJlYWsgfVxuICAgIH1cbiAgICByZXN1bHQuc3BsaWNlKGksIDAsIHJ1bGUpO1xuICB9XG5cbiAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIG5hbWUgKSB7XG4gICAgdmFyIHJ1bGVzID0gc2NoZW1hLm1hcmtzW25hbWVdLnNwZWMucGFyc2VET007XG4gICAgaWYgKHJ1bGVzKSB7IHJ1bGVzLmZvckVhY2goZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgIGluc2VydChydWxlID0gY29weShydWxlKSk7XG4gICAgICBydWxlLm1hcmsgPSBuYW1lO1xuICAgIH0pOyB9XG4gIH07XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHNjaGVtYS5tYXJrcykgbG9vcCggbmFtZSApO1xuICB2YXIgbG9vcCQxID0gZnVuY3Rpb24gKCBuYW1lICkge1xuICAgIHZhciBydWxlcyQxID0gc2NoZW1hLm5vZGVzW25hbWUkMV0uc3BlYy5wYXJzZURPTTtcbiAgICBpZiAocnVsZXMkMSkgeyBydWxlcyQxLmZvckVhY2goZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgIGluc2VydChydWxlID0gY29weShydWxlKSk7XG4gICAgICBydWxlLm5vZGUgPSBuYW1lJDE7XG4gICAgfSk7IH1cbiAgfTtcblxuICAgIGZvciAodmFyIG5hbWUkMSBpbiBzY2hlbWEubm9kZXMpIGxvb3AkMSgpO1xuICByZXR1cm4gcmVzdWx0XG59O1xuXG4vLyA6OiAoU2NoZW1hKSDihpIgRE9NUGFyc2VyXG4vLyBDb25zdHJ1Y3QgYSBET00gcGFyc2VyIHVzaW5nIHRoZSBwYXJzaW5nIHJ1bGVzIGxpc3RlZCBpbiBhXG4vLyBzY2hlbWEncyBbbm9kZSBzcGVjc10oI21vZGVsLk5vZGVTcGVjLnBhcnNlRE9NKSwgcmVvcmRlcmVkIGJ5XG4vLyBbcHJpb3JpdHldKCNtb2RlbC5QYXJzZVJ1bGUucHJpb3JpdHkpLlxuRE9NUGFyc2VyLmZyb21TY2hlbWEgPSBmdW5jdGlvbiBmcm9tU2NoZW1hIChzY2hlbWEpIHtcbiAgcmV0dXJuIHNjaGVtYS5jYWNoZWQuZG9tUGFyc2VyIHx8XG4gICAgKHNjaGVtYS5jYWNoZWQuZG9tUGFyc2VyID0gbmV3IERPTVBhcnNlcihzY2hlbWEsIERPTVBhcnNlci5zY2hlbWFSdWxlcyhzY2hlbWEpKSlcbn07XG5cbi8vIDogT2JqZWN0PGJvb2w+IFRoZSBibG9jay1sZXZlbCB0YWdzIGluIEhUTUw1XG52YXIgYmxvY2tUYWdzID0ge1xuICBhZGRyZXNzOiB0cnVlLCBhcnRpY2xlOiB0cnVlLCBhc2lkZTogdHJ1ZSwgYmxvY2txdW90ZTogdHJ1ZSwgY2FudmFzOiB0cnVlLFxuICBkZDogdHJ1ZSwgZGl2OiB0cnVlLCBkbDogdHJ1ZSwgZmllbGRzZXQ6IHRydWUsIGZpZ2NhcHRpb246IHRydWUsIGZpZ3VyZTogdHJ1ZSxcbiAgZm9vdGVyOiB0cnVlLCBmb3JtOiB0cnVlLCBoMTogdHJ1ZSwgaDI6IHRydWUsIGgzOiB0cnVlLCBoNDogdHJ1ZSwgaDU6IHRydWUsXG4gIGg2OiB0cnVlLCBoZWFkZXI6IHRydWUsIGhncm91cDogdHJ1ZSwgaHI6IHRydWUsIGxpOiB0cnVlLCBub3NjcmlwdDogdHJ1ZSwgb2w6IHRydWUsXG4gIG91dHB1dDogdHJ1ZSwgcDogdHJ1ZSwgcHJlOiB0cnVlLCBzZWN0aW9uOiB0cnVlLCB0YWJsZTogdHJ1ZSwgdGZvb3Q6IHRydWUsIHVsOiB0cnVlXG59O1xuXG4vLyA6IE9iamVjdDxib29sPiBUaGUgdGFncyB0aGF0IHdlIG5vcm1hbGx5IGlnbm9yZS5cbnZhciBpZ25vcmVUYWdzID0ge1xuICBoZWFkOiB0cnVlLCBub3NjcmlwdDogdHJ1ZSwgb2JqZWN0OiB0cnVlLCBzY3JpcHQ6IHRydWUsIHN0eWxlOiB0cnVlLCB0aXRsZTogdHJ1ZVxufTtcblxuLy8gOiBPYmplY3Q8Ym9vbD4gTGlzdCB0YWdzLlxudmFyIGxpc3RUYWdzID0ge29sOiB0cnVlLCB1bDogdHJ1ZX07XG5cbi8vIFVzaW5nIGEgYml0ZmllbGQgZm9yIG5vZGUgY29udGV4dCBvcHRpb25zXG52YXIgT1BUX1BSRVNFUlZFX1dTID0gMSwgT1BUX1BSRVNFUlZFX1dTX0ZVTEwgPSAyLCBPUFRfT1BFTl9MRUZUID0gNDtcblxuZnVuY3Rpb24gd3NPcHRpb25zRm9yKHByZXNlcnZlV2hpdGVzcGFjZSkge1xuICByZXR1cm4gKHByZXNlcnZlV2hpdGVzcGFjZSA/IE9QVF9QUkVTRVJWRV9XUyA6IDApIHwgKHByZXNlcnZlV2hpdGVzcGFjZSA9PT0gXCJmdWxsXCIgPyBPUFRfUFJFU0VSVkVfV1NfRlVMTCA6IDApXG59XG5cbnZhciBOb2RlQ29udGV4dCA9IGZ1bmN0aW9uIE5vZGVDb250ZXh0KHR5cGUsIGF0dHJzLCBtYXJrcywgcGVuZGluZ01hcmtzLCBzb2xpZCwgbWF0Y2gsIG9wdGlvbnMpIHtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5hdHRycyA9IGF0dHJzO1xuICB0aGlzLnNvbGlkID0gc29saWQ7XG4gIHRoaXMubWF0Y2ggPSBtYXRjaCB8fCAob3B0aW9ucyAmIE9QVF9PUEVOX0xFRlQgPyBudWxsIDogdHlwZS5jb250ZW50TWF0Y2gpO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLmNvbnRlbnQgPSBbXTtcbiAgLy8gTWFya3MgYXBwbGllZCB0byB0aGlzIG5vZGUgaXRzZWxmXG4gIHRoaXMubWFya3MgPSBtYXJrcztcbiAgLy8gTWFya3MgYXBwbGllZCB0byBpdHMgY2hpbGRyZW5cbiAgdGhpcy5hY3RpdmVNYXJrcyA9IE1hcmsubm9uZTtcbiAgLy8gTWFya3MgdGhhdCBjYW4ndCBhcHBseSBoZXJlLCBidXQgd2lsbCBiZSB1c2VkIGluIGNoaWxkcmVuIGlmIHBvc3NpYmxlXG4gIHRoaXMucGVuZGluZ01hcmtzID0gcGVuZGluZ01hcmtzO1xuICAvLyBOZXN0ZWQgTWFya3Mgd2l0aCBzYW1lIHR5cGVcbiAgdGhpcy5zdGFzaE1hcmtzID0gW107XG59O1xuXG5Ob2RlQ29udGV4dC5wcm90b3R5cGUuZmluZFdyYXBwaW5nID0gZnVuY3Rpb24gZmluZFdyYXBwaW5nIChub2RlKSB7XG4gIGlmICghdGhpcy5tYXRjaCkge1xuICAgIGlmICghdGhpcy50eXBlKSB7IHJldHVybiBbXSB9XG4gICAgdmFyIGZpbGwgPSB0aGlzLnR5cGUuY29udGVudE1hdGNoLmZpbGxCZWZvcmUoRnJhZ21lbnQuZnJvbShub2RlKSk7XG4gICAgaWYgKGZpbGwpIHtcbiAgICAgIHRoaXMubWF0Y2ggPSB0aGlzLnR5cGUuY29udGVudE1hdGNoLm1hdGNoRnJhZ21lbnQoZmlsbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBzdGFydCA9IHRoaXMudHlwZS5jb250ZW50TWF0Y2gsIHdyYXA7XG4gICAgICBpZiAod3JhcCA9IHN0YXJ0LmZpbmRXcmFwcGluZyhub2RlLnR5cGUpKSB7XG4gICAgICAgIHRoaXMubWF0Y2ggPSBzdGFydDtcbiAgICAgICAgcmV0dXJuIHdyYXBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzLm1hdGNoLmZpbmRXcmFwcGluZyhub2RlLnR5cGUpXG59O1xuXG5Ob2RlQ29udGV4dC5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24gZmluaXNoIChvcGVuRW5kKSB7XG4gIGlmICghKHRoaXMub3B0aW9ucyAmIE9QVF9QUkVTRVJWRV9XUykpIHsgLy8gU3RyaXAgdHJhaWxpbmcgd2hpdGVzcGFjZVxuICAgIHZhciBsYXN0ID0gdGhpcy5jb250ZW50W3RoaXMuY29udGVudC5sZW5ndGggLSAxXSwgbTtcbiAgICBpZiAobGFzdCAmJiBsYXN0LmlzVGV4dCAmJiAobSA9IC9bIFxcdFxcclxcblxcdTAwMGNdKyQvLmV4ZWMobGFzdC50ZXh0KSkpIHtcbiAgICAgIGlmIChsYXN0LnRleHQubGVuZ3RoID09IG1bMF0ubGVuZ3RoKSB7IHRoaXMuY29udGVudC5wb3AoKTsgfVxuICAgICAgZWxzZSB7IHRoaXMuY29udGVudFt0aGlzLmNvbnRlbnQubGVuZ3RoIC0gMV0gPSBsYXN0LndpdGhUZXh0KGxhc3QudGV4dC5zbGljZSgwLCBsYXN0LnRleHQubGVuZ3RoIC0gbVswXS5sZW5ndGgpKTsgfVxuICAgIH1cbiAgfVxuICB2YXIgY29udGVudCA9IEZyYWdtZW50LmZyb20odGhpcy5jb250ZW50KTtcbiAgaWYgKCFvcGVuRW5kICYmIHRoaXMubWF0Y2gpXG4gICAgeyBjb250ZW50ID0gY29udGVudC5hcHBlbmQodGhpcy5tYXRjaC5maWxsQmVmb3JlKEZyYWdtZW50LmVtcHR5LCB0cnVlKSk7IH1cbiAgcmV0dXJuIHRoaXMudHlwZSA/IHRoaXMudHlwZS5jcmVhdGUodGhpcy5hdHRycywgY29udGVudCwgdGhpcy5tYXJrcykgOiBjb250ZW50XG59O1xuXG5Ob2RlQ29udGV4dC5wcm90b3R5cGUucG9wRnJvbVN0YXNoTWFyayA9IGZ1bmN0aW9uIHBvcEZyb21TdGFzaE1hcmsgKG1hcmspIHtcbiAgZm9yICh2YXIgaSA9IHRoaXMuc3Rhc2hNYXJrcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSlcbiAgICB7IGlmIChtYXJrLmVxKHRoaXMuc3Rhc2hNYXJrc1tpXSkpIHsgcmV0dXJuIHRoaXMuc3Rhc2hNYXJrcy5zcGxpY2UoaSwgMSlbMF0gfSB9XG59O1xuXG5Ob2RlQ29udGV4dC5wcm90b3R5cGUuYXBwbHlQZW5kaW5nID0gZnVuY3Rpb24gYXBwbHlQZW5kaW5nIChuZXh0VHlwZSkge1xuICBmb3IgKHZhciBpID0gMCwgcGVuZGluZyA9IHRoaXMucGVuZGluZ01hcmtzOyBpIDwgcGVuZGluZy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBtYXJrID0gcGVuZGluZ1tpXTtcbiAgICBpZiAoKHRoaXMudHlwZSA/IHRoaXMudHlwZS5hbGxvd3NNYXJrVHlwZShtYXJrLnR5cGUpIDogbWFya01heUFwcGx5KG1hcmsudHlwZSwgbmV4dFR5cGUpKSAmJlxuICAgICAgICAhbWFyay5pc0luU2V0KHRoaXMuYWN0aXZlTWFya3MpKSB7XG4gICAgICB0aGlzLmFjdGl2ZU1hcmtzID0gbWFyay5hZGRUb1NldCh0aGlzLmFjdGl2ZU1hcmtzKTtcbiAgICAgIHRoaXMucGVuZGluZ01hcmtzID0gbWFyay5yZW1vdmVGcm9tU2V0KHRoaXMucGVuZGluZ01hcmtzKTtcbiAgICB9XG4gIH1cbn07XG5cbk5vZGVDb250ZXh0LnByb3RvdHlwZS5pbmxpbmVDb250ZXh0ID0gZnVuY3Rpb24gaW5saW5lQ29udGV4dCAobm9kZSkge1xuICBpZiAodGhpcy50eXBlKSB7IHJldHVybiB0aGlzLnR5cGUuaW5saW5lQ29udGVudCB9XG4gIGlmICh0aGlzLmNvbnRlbnQubGVuZ3RoKSB7IHJldHVybiB0aGlzLmNvbnRlbnRbMF0uaXNJbmxpbmUgfVxuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlICYmICFibG9ja1RhZ3MuaGFzT3duUHJvcGVydHkobm9kZS5wYXJlbnROb2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpXG59O1xuXG52YXIgUGFyc2VDb250ZXh0ID0gZnVuY3Rpb24gUGFyc2VDb250ZXh0KHBhcnNlciwgb3B0aW9ucywgb3Blbikge1xuICAvLyA6IERPTVBhcnNlciBUaGUgcGFyc2VyIHdlIGFyZSB1c2luZy5cbiAgdGhpcy5wYXJzZXIgPSBwYXJzZXI7XG4gIC8vIDogT2JqZWN0IFRoZSBvcHRpb25zIHBhc3NlZCB0byB0aGlzIHBhcnNlLlxuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB0aGlzLmlzT3BlbiA9IG9wZW47XG4gIHZhciB0b3BOb2RlID0gb3B0aW9ucy50b3BOb2RlLCB0b3BDb250ZXh0O1xuICB2YXIgdG9wT3B0aW9ucyA9IHdzT3B0aW9uc0ZvcihvcHRpb25zLnByZXNlcnZlV2hpdGVzcGFjZSkgfCAob3BlbiA/IE9QVF9PUEVOX0xFRlQgOiAwKTtcbiAgaWYgKHRvcE5vZGUpXG4gICAgeyB0b3BDb250ZXh0ID0gbmV3IE5vZGVDb250ZXh0KHRvcE5vZGUudHlwZSwgdG9wTm9kZS5hdHRycywgTWFyay5ub25lLCBNYXJrLm5vbmUsIHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLnRvcE1hdGNoIHx8IHRvcE5vZGUudHlwZS5jb250ZW50TWF0Y2gsIHRvcE9wdGlvbnMpOyB9XG4gIGVsc2UgaWYgKG9wZW4pXG4gICAgeyB0b3BDb250ZXh0ID0gbmV3IE5vZGVDb250ZXh0KG51bGwsIG51bGwsIE1hcmsubm9uZSwgTWFyay5ub25lLCB0cnVlLCBudWxsLCB0b3BPcHRpb25zKTsgfVxuICBlbHNlXG4gICAgeyB0b3BDb250ZXh0ID0gbmV3IE5vZGVDb250ZXh0KHBhcnNlci5zY2hlbWEudG9wTm9kZVR5cGUsIG51bGwsIE1hcmsubm9uZSwgTWFyay5ub25lLCB0cnVlLCBudWxsLCB0b3BPcHRpb25zKTsgfVxuICB0aGlzLm5vZGVzID0gW3RvcENvbnRleHRdO1xuICAvLyA6IFtNYXJrXSBUaGUgY3VycmVudCBzZXQgb2YgbWFya3NcbiAgdGhpcy5vcGVuID0gMDtcbiAgdGhpcy5maW5kID0gb3B0aW9ucy5maW5kUG9zaXRpb25zO1xuICB0aGlzLm5lZWRzQmxvY2sgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMkNiA9IHsgdG9wOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGN1cnJlbnRQb3M6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDYudG9wLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMubm9kZXNbdGhpcy5vcGVuXVxufTtcblxuLy8gOiAoZG9tLk5vZGUpXG4vLyBBZGQgYSBET00gbm9kZSB0byB0aGUgY29udGVudC4gVGV4dCBpcyBpbnNlcnRlZCBhcyB0ZXh0IG5vZGUsXG4vLyBvdGhlcndpc2UsIHRoZSBub2RlIGlzIHBhc3NlZCB0byBgYWRkRWxlbWVudGAgb3IsIGlmIGl0IGhhcyBhXG4vLyBgc3R5bGVgIGF0dHJpYnV0ZSwgYGFkZEVsZW1lbnRXaXRoU3R5bGVzYC5cblBhcnNlQ29udGV4dC5wcm90b3R5cGUuYWRkRE9NID0gZnVuY3Rpb24gYWRkRE9NIChkb20pIHtcbiAgaWYgKGRvbS5ub2RlVHlwZSA9PSAzKSB7XG4gICAgdGhpcy5hZGRUZXh0Tm9kZShkb20pO1xuICB9IGVsc2UgaWYgKGRvbS5ub2RlVHlwZSA9PSAxKSB7XG4gICAgdmFyIHN0eWxlID0gZG9tLmdldEF0dHJpYnV0ZShcInN0eWxlXCIpO1xuICAgIHZhciBtYXJrcyA9IHN0eWxlID8gdGhpcy5yZWFkU3R5bGVzKHBhcnNlU3R5bGVzKHN0eWxlKSkgOiBudWxsLCB0b3AgPSB0aGlzLnRvcDtcbiAgICBpZiAobWFya3MgIT0gbnVsbCkgeyBmb3IgKHZhciBpID0gMDsgaSA8IG1hcmtzLmxlbmd0aDsgaSsrKSB7IHRoaXMuYWRkUGVuZGluZ01hcmsobWFya3NbaV0pOyB9IH1cbiAgICB0aGlzLmFkZEVsZW1lbnQoZG9tKTtcbiAgICBpZiAobWFya3MgIT0gbnVsbCkgeyBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBtYXJrcy5sZW5ndGg7IGkkMSsrKSB7IHRoaXMucmVtb3ZlUGVuZGluZ01hcmsobWFya3NbaSQxXSwgdG9wKTsgfSB9XG4gIH1cbn07XG5cblBhcnNlQ29udGV4dC5wcm90b3R5cGUuYWRkVGV4dE5vZGUgPSBmdW5jdGlvbiBhZGRUZXh0Tm9kZSAoZG9tKSB7XG4gIHZhciB2YWx1ZSA9IGRvbS5ub2RlVmFsdWU7XG4gIHZhciB0b3AgPSB0aGlzLnRvcDtcbiAgaWYgKHRvcC5vcHRpb25zICYgT1BUX1BSRVNFUlZFX1dTX0ZVTEwgfHxcbiAgICAgIHRvcC5pbmxpbmVDb250ZXh0KGRvbSkgfHxcbiAgICAgIC9bXiBcXHRcXHJcXG5cXHUwMDBjXS8udGVzdCh2YWx1ZSkpIHtcbiAgICBpZiAoISh0b3Aub3B0aW9ucyAmIE9QVF9QUkVTRVJWRV9XUykpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvWyBcXHRcXHJcXG5cXHUwMDBjXSsvZywgXCIgXCIpO1xuICAgICAgLy8gSWYgdGhpcyBzdGFydHMgd2l0aCB3aGl0ZXNwYWNlLCBhbmQgdGhlcmUgaXMgbm8gbm9kZSBiZWZvcmUgaXQsIG9yXG4gICAgICAvLyBhIGhhcmQgYnJlYWssIG9yIGEgdGV4dCBub2RlIHRoYXQgZW5kcyB3aXRoIHdoaXRlc3BhY2UsIHN0cmlwIHRoZVxuICAgICAgLy8gbGVhZGluZyBzcGFjZS5cbiAgICAgIGlmICgvXlsgXFx0XFxyXFxuXFx1MDAwY10vLnRlc3QodmFsdWUpICYmIHRoaXMub3BlbiA9PSB0aGlzLm5vZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgdmFyIG5vZGVCZWZvcmUgPSB0b3AuY29udGVudFt0b3AuY29udGVudC5sZW5ndGggLSAxXTtcbiAgICAgICAgdmFyIGRvbU5vZGVCZWZvcmUgPSBkb20ucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICBpZiAoIW5vZGVCZWZvcmUgfHxcbiAgICAgICAgICAgIChkb21Ob2RlQmVmb3JlICYmIGRvbU5vZGVCZWZvcmUubm9kZU5hbWUgPT0gJ0JSJykgfHxcbiAgICAgICAgICAgIChub2RlQmVmb3JlLmlzVGV4dCAmJiAvWyBcXHRcXHJcXG5cXHUwMDBjXSQvLnRlc3Qobm9kZUJlZm9yZS50ZXh0KSkpXG4gICAgICAgICAgeyB2YWx1ZSA9IHZhbHVlLnNsaWNlKDEpOyB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghKHRvcC5vcHRpb25zICYgT1BUX1BSRVNFUlZFX1dTX0ZVTEwpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xccj9cXG58XFxyL2csIFwiIFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9cXHJcXG4/L2csIFwiXFxuXCIpO1xuICAgIH1cbiAgICBpZiAodmFsdWUpIHsgdGhpcy5pbnNlcnROb2RlKHRoaXMucGFyc2VyLnNjaGVtYS50ZXh0KHZhbHVlKSk7IH1cbiAgICB0aGlzLmZpbmRJblRleHQoZG9tKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmZpbmRJbnNpZGUoZG9tKTtcbiAgfVxufTtcblxuLy8gOiAoZG9tLkVsZW1lbnQsID9QYXJzZVJ1bGUpXG4vLyBUcnkgdG8gZmluZCBhIGhhbmRsZXIgZm9yIHRoZSBnaXZlbiB0YWcgYW5kIHVzZSB0aGF0IHRvIHBhcnNlLiBJZlxuLy8gbm9uZSBpcyBmb3VuZCwgdGhlIGVsZW1lbnQncyBjb250ZW50IG5vZGVzIGFyZSBhZGRlZCBkaXJlY3RseS5cblBhcnNlQ29udGV4dC5wcm90b3R5cGUuYWRkRWxlbWVudCA9IGZ1bmN0aW9uIGFkZEVsZW1lbnQgKGRvbSwgbWF0Y2hBZnRlcikge1xuICB2YXIgbmFtZSA9IGRvbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLCBydWxlSUQ7XG4gIGlmIChsaXN0VGFncy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB0aGlzLnBhcnNlci5ub3JtYWxpemVMaXN0cykgeyBub3JtYWxpemVMaXN0KGRvbSk7IH1cbiAgdmFyIHJ1bGUgPSAodGhpcy5vcHRpb25zLnJ1bGVGcm9tTm9kZSAmJiB0aGlzLm9wdGlvbnMucnVsZUZyb21Ob2RlKGRvbSkpIHx8XG4gICAgICAocnVsZUlEID0gdGhpcy5wYXJzZXIubWF0Y2hUYWcoZG9tLCB0aGlzLCBtYXRjaEFmdGVyKSk7XG4gIGlmIChydWxlID8gcnVsZS5pZ25vcmUgOiBpZ25vcmVUYWdzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgdGhpcy5maW5kSW5zaWRlKGRvbSk7XG4gICAgdGhpcy5pZ25vcmVGYWxsYmFjayhkb20pO1xuICB9IGVsc2UgaWYgKCFydWxlIHx8IHJ1bGUuc2tpcCB8fCBydWxlLmNsb3NlUGFyZW50KSB7XG4gICAgaWYgKHJ1bGUgJiYgcnVsZS5jbG9zZVBhcmVudCkgeyB0aGlzLm9wZW4gPSBNYXRoLm1heCgwLCB0aGlzLm9wZW4gLSAxKTsgfVxuICAgIGVsc2UgaWYgKHJ1bGUgJiYgcnVsZS5za2lwLm5vZGVUeXBlKSB7IGRvbSA9IHJ1bGUuc2tpcDsgfVxuICAgIHZhciBzeW5jLCB0b3AgPSB0aGlzLnRvcCwgb2xkTmVlZHNCbG9jayA9IHRoaXMubmVlZHNCbG9jaztcbiAgICBpZiAoYmxvY2tUYWdzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICBzeW5jID0gdHJ1ZTtcbiAgICAgIGlmICghdG9wLnR5cGUpIHsgdGhpcy5uZWVkc0Jsb2NrID0gdHJ1ZTsgfVxuICAgIH0gZWxzZSBpZiAoIWRvbS5maXJzdENoaWxkKSB7XG4gICAgICB0aGlzLmxlYWZGYWxsYmFjayhkb20pO1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMuYWRkQWxsKGRvbSk7XG4gICAgaWYgKHN5bmMpIHsgdGhpcy5zeW5jKHRvcCk7IH1cbiAgICB0aGlzLm5lZWRzQmxvY2sgPSBvbGROZWVkc0Jsb2NrO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuYWRkRWxlbWVudEJ5UnVsZShkb20sIHJ1bGUsIHJ1bGUuY29uc3VtaW5nID09PSBmYWxzZSA/IHJ1bGVJRCA6IG51bGwpO1xuICB9XG59O1xuXG4vLyBDYWxsZWQgZm9yIGxlYWYgRE9NIG5vZGVzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGJlIGlnbm9yZWRcblBhcnNlQ29udGV4dC5wcm90b3R5cGUubGVhZkZhbGxiYWNrID0gZnVuY3Rpb24gbGVhZkZhbGxiYWNrIChkb20pIHtcbiAgaWYgKGRvbS5ub2RlTmFtZSA9PSBcIkJSXCIgJiYgdGhpcy50b3AudHlwZSAmJiB0aGlzLnRvcC50eXBlLmlubGluZUNvbnRlbnQpXG4gICAgeyB0aGlzLmFkZFRleHROb2RlKGRvbS5vd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXFxuXCIpKTsgfVxufTtcblxuLy8gQ2FsbGVkIGZvciBpZ25vcmVkIG5vZGVzXG5QYXJzZUNvbnRleHQucHJvdG90eXBlLmlnbm9yZUZhbGxiYWNrID0gZnVuY3Rpb24gaWdub3JlRmFsbGJhY2sgKGRvbSkge1xuICAvLyBJZ25vcmVkIEJSIG5vZGVzIHNob3VsZCBhdCBsZWFzdCBjcmVhdGUgYW4gaW5saW5lIGNvbnRleHRcbiAgaWYgKGRvbS5ub2RlTmFtZSA9PSBcIkJSXCIgJiYgKCF0aGlzLnRvcC50eXBlIHx8ICF0aGlzLnRvcC50eXBlLmlubGluZUNvbnRlbnQpKVxuICAgIHsgdGhpcy5maW5kUGxhY2UodGhpcy5wYXJzZXIuc2NoZW1hLnRleHQoXCItXCIpKTsgfVxufTtcblxuLy8gUnVuIGFueSBzdHlsZSBwYXJzZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBub2RlJ3Mgc3R5bGVzLiBFaXRoZXJcbi8vIHJldHVybiBhbiBhcnJheSBvZiBtYXJrcywgb3IgbnVsbCB0byBpbmRpY2F0ZSBzb21lIG9mIHRoZSBzdHlsZXNcbi8vIGhhZCBhIHJ1bGUgd2l0aCBgaWdub3JlYCBzZXQuXG5QYXJzZUNvbnRleHQucHJvdG90eXBlLnJlYWRTdHlsZXMgPSBmdW5jdGlvbiByZWFkU3R5bGVzIChzdHlsZXMpIHtcbiAgdmFyIG1hcmtzID0gTWFyay5ub25lO1xuICBzdHlsZTogZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICBmb3IgKHZhciBhZnRlciA9IG51bGw7Oykge1xuICAgICAgdmFyIHJ1bGUgPSB0aGlzLnBhcnNlci5tYXRjaFN0eWxlKHN0eWxlc1tpXSwgc3R5bGVzW2kgKyAxXSwgdGhpcywgYWZ0ZXIpO1xuICAgICAgaWYgKCFydWxlKSB7IGNvbnRpbnVlIHN0eWxlIH1cbiAgICAgIGlmIChydWxlLmlnbm9yZSkgeyByZXR1cm4gbnVsbCB9XG4gICAgICBtYXJrcyA9IHRoaXMucGFyc2VyLnNjaGVtYS5tYXJrc1tydWxlLm1hcmtdLmNyZWF0ZShydWxlLmF0dHJzKS5hZGRUb1NldChtYXJrcyk7XG4gICAgICBpZiAocnVsZS5jb25zdW1pbmcgPT09IGZhbHNlKSB7IGFmdGVyID0gcnVsZTsgfVxuICAgICAgZWxzZSB7IGJyZWFrIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1hcmtzXG59O1xuXG4vLyA6IChkb20uRWxlbWVudCwgUGFyc2VSdWxlKSDihpIgYm9vbFxuLy8gTG9vayB1cCBhIGhhbmRsZXIgZm9yIHRoZSBnaXZlbiBub2RlLiBJZiBub25lIGFyZSBmb3VuZCwgcmV0dXJuXG4vLyBmYWxzZS4gT3RoZXJ3aXNlLCBhcHBseSBpdCwgdXNlIGl0cyByZXR1cm4gdmFsdWUgdG8gZHJpdmUgdGhlIHdheVxuLy8gdGhlIG5vZGUncyBjb250ZW50IGlzIHdyYXBwZWQsIGFuZCByZXR1cm4gdHJ1ZS5cblBhcnNlQ29udGV4dC5wcm90b3R5cGUuYWRkRWxlbWVudEJ5UnVsZSA9IGZ1bmN0aW9uIGFkZEVsZW1lbnRCeVJ1bGUgKGRvbSwgcnVsZSwgY29udGludWVBZnRlcikge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBzeW5jLCBub2RlVHlwZSwgbWFya1R5cGUsIG1hcms7XG4gIGlmIChydWxlLm5vZGUpIHtcbiAgICBub2RlVHlwZSA9IHRoaXMucGFyc2VyLnNjaGVtYS5ub2Rlc1tydWxlLm5vZGVdO1xuICAgIGlmICghbm9kZVR5cGUuaXNMZWFmKSB7XG4gICAgICBzeW5jID0gdGhpcy5lbnRlcihub2RlVHlwZSwgcnVsZS5hdHRycywgcnVsZS5wcmVzZXJ2ZVdoaXRlc3BhY2UpO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMuaW5zZXJ0Tm9kZShub2RlVHlwZS5jcmVhdGUocnVsZS5hdHRycykpKSB7XG4gICAgICB0aGlzLmxlYWZGYWxsYmFjayhkb20pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBtYXJrVHlwZSA9IHRoaXMucGFyc2VyLnNjaGVtYS5tYXJrc1tydWxlLm1hcmtdO1xuICAgIG1hcmsgPSBtYXJrVHlwZS5jcmVhdGUocnVsZS5hdHRycyk7XG4gICAgdGhpcy5hZGRQZW5kaW5nTWFyayhtYXJrKTtcbiAgfVxuICB2YXIgc3RhcnRJbiA9IHRoaXMudG9wO1xuXG4gIGlmIChub2RlVHlwZSAmJiBub2RlVHlwZS5pc0xlYWYpIHtcbiAgICB0aGlzLmZpbmRJbnNpZGUoZG9tKTtcbiAgfSBlbHNlIGlmIChjb250aW51ZUFmdGVyKSB7XG4gICAgdGhpcy5hZGRFbGVtZW50KGRvbSwgY29udGludWVBZnRlcik7XG4gIH0gZWxzZSBpZiAocnVsZS5nZXRDb250ZW50KSB7XG4gICAgdGhpcy5maW5kSW5zaWRlKGRvbSk7XG4gICAgcnVsZS5nZXRDb250ZW50KGRvbSwgdGhpcy5wYXJzZXIuc2NoZW1hKS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiB0aGlzJDEuaW5zZXJ0Tm9kZShub2RlKTsgfSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNvbnRlbnRET00gPSBydWxlLmNvbnRlbnRFbGVtZW50O1xuICAgIGlmICh0eXBlb2YgY29udGVudERPTSA9PSBcInN0cmluZ1wiKSB7IGNvbnRlbnRET00gPSBkb20ucXVlcnlTZWxlY3Rvcihjb250ZW50RE9NKTsgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBjb250ZW50RE9NID09IFwiZnVuY3Rpb25cIikgeyBjb250ZW50RE9NID0gY29udGVudERPTShkb20pOyB9XG4gICAgaWYgKCFjb250ZW50RE9NKSB7IGNvbnRlbnRET00gPSBkb207IH1cbiAgICB0aGlzLmZpbmRBcm91bmQoZG9tLCBjb250ZW50RE9NLCB0cnVlKTtcbiAgICB0aGlzLmFkZEFsbChjb250ZW50RE9NLCBzeW5jKTtcbiAgfVxuICBpZiAoc3luYykgeyB0aGlzLnN5bmMoc3RhcnRJbik7IHRoaXMub3Blbi0tOyB9XG4gIGlmIChtYXJrKSB7IHRoaXMucmVtb3ZlUGVuZGluZ01hcmsobWFyaywgc3RhcnRJbik7IH1cbn07XG5cbi8vIDogKGRvbS5Ob2RlLCA/Tm9kZUJ1aWxkZXIsID9udW1iZXIsID9udW1iZXIpXG4vLyBBZGQgYWxsIGNoaWxkIG5vZGVzIGJldHdlZW4gYHN0YXJ0SW5kZXhgIGFuZCBgZW5kSW5kZXhgIChvciB0aGVcbi8vIHdob2xlIG5vZGUsIGlmIG5vdCBnaXZlbikuIElmIGBzeW5jYCBpcyBwYXNzZWQsIHVzZSBpdCB0b1xuLy8gc3luY2hyb25pemUgYWZ0ZXIgZXZlcnkgYmxvY2sgZWxlbWVudC5cblBhcnNlQ29udGV4dC5wcm90b3R5cGUuYWRkQWxsID0gZnVuY3Rpb24gYWRkQWxsIChwYXJlbnQsIHN5bmMsIHN0YXJ0SW5kZXgsIGVuZEluZGV4KSB7XG4gIHZhciBpbmRleCA9IHN0YXJ0SW5kZXggfHwgMDtcbiAgZm9yICh2YXIgZG9tID0gc3RhcnRJbmRleCA/IHBhcmVudC5jaGlsZE5vZGVzW3N0YXJ0SW5kZXhdIDogcGFyZW50LmZpcnN0Q2hpbGQsXG4gICAgICAgICAgIGVuZCA9IGVuZEluZGV4ID09IG51bGwgPyBudWxsIDogcGFyZW50LmNoaWxkTm9kZXNbZW5kSW5kZXhdO1xuICAgICAgIGRvbSAhPSBlbmQ7IGRvbSA9IGRvbS5uZXh0U2libGluZywgKytpbmRleCkge1xuICAgIHRoaXMuZmluZEF0UG9pbnQocGFyZW50LCBpbmRleCk7XG4gICAgdGhpcy5hZGRET00oZG9tKTtcbiAgICBpZiAoc3luYyAmJiBibG9ja1RhZ3MuaGFzT3duUHJvcGVydHkoZG9tLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpKVxuICAgICAgeyB0aGlzLnN5bmMoc3luYyk7IH1cbiAgfVxuICB0aGlzLmZpbmRBdFBvaW50KHBhcmVudCwgaW5kZXgpO1xufTtcblxuLy8gVHJ5IHRvIGZpbmQgYSB3YXkgdG8gZml0IHRoZSBnaXZlbiBub2RlIHR5cGUgaW50byB0aGUgY3VycmVudFxuLy8gY29udGV4dC4gTWF5IGFkZCBpbnRlcm1lZGlhdGUgd3JhcHBlcnMgYW5kL29yIGxlYXZlIG5vbi1zb2xpZFxuLy8gbm9kZXMgdGhhdCB3ZSdyZSBpbi5cblBhcnNlQ29udGV4dC5wcm90b3R5cGUuZmluZFBsYWNlID0gZnVuY3Rpb24gZmluZFBsYWNlIChub2RlKSB7XG4gIHZhciByb3V0ZSwgc3luYztcbiAgZm9yICh2YXIgZGVwdGggPSB0aGlzLm9wZW47IGRlcHRoID49IDA7IGRlcHRoLS0pIHtcbiAgICB2YXIgY3ggPSB0aGlzLm5vZGVzW2RlcHRoXTtcbiAgICB2YXIgZm91bmQgPSBjeC5maW5kV3JhcHBpbmcobm9kZSk7XG4gICAgaWYgKGZvdW5kICYmICghcm91dGUgfHwgcm91dGUubGVuZ3RoID4gZm91bmQubGVuZ3RoKSkge1xuICAgICAgcm91dGUgPSBmb3VuZDtcbiAgICAgIHN5bmMgPSBjeDtcbiAgICAgIGlmICghZm91bmQubGVuZ3RoKSB7IGJyZWFrIH1cbiAgICB9XG4gICAgaWYgKGN4LnNvbGlkKSB7IGJyZWFrIH1cbiAgfVxuICBpZiAoIXJvdXRlKSB7IHJldHVybiBmYWxzZSB9XG4gIHRoaXMuc3luYyhzeW5jKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3V0ZS5sZW5ndGg7IGkrKylcbiAgICB7IHRoaXMuZW50ZXJJbm5lcihyb3V0ZVtpXSwgbnVsbCwgZmFsc2UpOyB9XG4gIHJldHVybiB0cnVlXG59O1xuXG4vLyA6IChOb2RlKSDihpIgP05vZGVcbi8vIFRyeSB0byBpbnNlcnQgdGhlIGdpdmVuIG5vZGUsIGFkanVzdGluZyB0aGUgY29udGV4dCB3aGVuIG5lZWRlZC5cblBhcnNlQ29udGV4dC5wcm90b3R5cGUuaW5zZXJ0Tm9kZSA9IGZ1bmN0aW9uIGluc2VydE5vZGUgKG5vZGUpIHtcbiAgaWYgKG5vZGUuaXNJbmxpbmUgJiYgdGhpcy5uZWVkc0Jsb2NrICYmICF0aGlzLnRvcC50eXBlKSB7XG4gICAgdmFyIGJsb2NrID0gdGhpcy50ZXh0YmxvY2tGcm9tQ29udGV4dCgpO1xuICAgIGlmIChibG9jaykgeyB0aGlzLmVudGVySW5uZXIoYmxvY2spOyB9XG4gIH1cbiAgaWYgKHRoaXMuZmluZFBsYWNlKG5vZGUpKSB7XG4gICAgdGhpcy5jbG9zZUV4dHJhKCk7XG4gICAgdmFyIHRvcCA9IHRoaXMudG9wO1xuICAgIHRvcC5hcHBseVBlbmRpbmcobm9kZS50eXBlKTtcbiAgICBpZiAodG9wLm1hdGNoKSB7IHRvcC5tYXRjaCA9IHRvcC5tYXRjaC5tYXRjaFR5cGUobm9kZS50eXBlKTsgfVxuICAgIHZhciBtYXJrcyA9IHRvcC5hY3RpdmVNYXJrcztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUubWFya3MubGVuZ3RoOyBpKyspXG4gICAgICB7IGlmICghdG9wLnR5cGUgfHwgdG9wLnR5cGUuYWxsb3dzTWFya1R5cGUobm9kZS5tYXJrc1tpXS50eXBlKSlcbiAgICAgICAgeyBtYXJrcyA9IG5vZGUubWFya3NbaV0uYWRkVG9TZXQobWFya3MpOyB9IH1cbiAgICB0b3AuY29udGVudC5wdXNoKG5vZGUubWFyayhtYXJrcykpO1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59O1xuXG4vLyA6IChOb2RlVHlwZSwgP09iamVjdCkg4oaSIGJvb2xcbi8vIFRyeSB0byBzdGFydCBhIG5vZGUgb2YgdGhlIGdpdmVuIHR5cGUsIGFkanVzdGluZyB0aGUgY29udGV4dCB3aGVuXG4vLyBuZWNlc3NhcnkuXG5QYXJzZUNvbnRleHQucHJvdG90eXBlLmVudGVyID0gZnVuY3Rpb24gZW50ZXIgKHR5cGUsIGF0dHJzLCBwcmVzZXJ2ZVdTKSB7XG4gIHZhciBvayA9IHRoaXMuZmluZFBsYWNlKHR5cGUuY3JlYXRlKGF0dHJzKSk7XG4gIGlmIChvaykgeyB0aGlzLmVudGVySW5uZXIodHlwZSwgYXR0cnMsIHRydWUsIHByZXNlcnZlV1MpOyB9XG4gIHJldHVybiBva1xufTtcblxuLy8gT3BlbiBhIG5vZGUgb2YgdGhlIGdpdmVuIHR5cGVcblBhcnNlQ29udGV4dC5wcm90b3R5cGUuZW50ZXJJbm5lciA9IGZ1bmN0aW9uIGVudGVySW5uZXIgKHR5cGUsIGF0dHJzLCBzb2xpZCwgcHJlc2VydmVXUykge1xuICB0aGlzLmNsb3NlRXh0cmEoKTtcbiAgdmFyIHRvcCA9IHRoaXMudG9wO1xuICB0b3AuYXBwbHlQZW5kaW5nKHR5cGUpO1xuICB0b3AubWF0Y2ggPSB0b3AubWF0Y2ggJiYgdG9wLm1hdGNoLm1hdGNoVHlwZSh0eXBlLCBhdHRycyk7XG4gIHZhciBvcHRpb25zID0gcHJlc2VydmVXUyA9PSBudWxsID8gdG9wLm9wdGlvbnMgJiB+T1BUX09QRU5fTEVGVCA6IHdzT3B0aW9uc0ZvcihwcmVzZXJ2ZVdTKTtcbiAgaWYgKCh0b3Aub3B0aW9ucyAmIE9QVF9PUEVOX0xFRlQpICYmIHRvcC5jb250ZW50Lmxlbmd0aCA9PSAwKSB7IG9wdGlvbnMgfD0gT1BUX09QRU5fTEVGVDsgfVxuICB0aGlzLm5vZGVzLnB1c2gobmV3IE5vZGVDb250ZXh0KHR5cGUsIGF0dHJzLCB0b3AuYWN0aXZlTWFya3MsIHRvcC5wZW5kaW5nTWFya3MsIHNvbGlkLCBudWxsLCBvcHRpb25zKSk7XG4gIHRoaXMub3BlbisrO1xufTtcblxuLy8gTWFrZSBzdXJlIGFsbCBub2RlcyBhYm92ZSB0aGlzLm9wZW4gYXJlIGZpbmlzaGVkIGFuZCBhZGRlZCB0b1xuLy8gdGhlaXIgcGFyZW50c1xuUGFyc2VDb250ZXh0LnByb3RvdHlwZS5jbG9zZUV4dHJhID0gZnVuY3Rpb24gY2xvc2VFeHRyYSAob3BlbkVuZCkge1xuICB2YXIgaSA9IHRoaXMubm9kZXMubGVuZ3RoIC0gMTtcbiAgaWYgKGkgPiB0aGlzLm9wZW4pIHtcbiAgICBmb3IgKDsgaSA+IHRoaXMub3BlbjsgaS0tKSB7IHRoaXMubm9kZXNbaSAtIDFdLmNvbnRlbnQucHVzaCh0aGlzLm5vZGVzW2ldLmZpbmlzaChvcGVuRW5kKSk7IH1cbiAgICB0aGlzLm5vZGVzLmxlbmd0aCA9IHRoaXMub3BlbiArIDE7XG4gIH1cbn07XG5cblBhcnNlQ29udGV4dC5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24gZmluaXNoICgpIHtcbiAgdGhpcy5vcGVuID0gMDtcbiAgdGhpcy5jbG9zZUV4dHJhKHRoaXMuaXNPcGVuKTtcbiAgcmV0dXJuIHRoaXMubm9kZXNbMF0uZmluaXNoKHRoaXMuaXNPcGVuIHx8IHRoaXMub3B0aW9ucy50b3BPcGVuKVxufTtcblxuUGFyc2VDb250ZXh0LnByb3RvdHlwZS5zeW5jID0gZnVuY3Rpb24gc3luYyAodG8pIHtcbiAgZm9yICh2YXIgaSA9IHRoaXMub3BlbjsgaSA+PSAwOyBpLS0pIHsgaWYgKHRoaXMubm9kZXNbaV0gPT0gdG8pIHtcbiAgICB0aGlzLm9wZW4gPSBpO1xuICAgIHJldHVyblxuICB9IH1cbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycyQ2LmN1cnJlbnRQb3MuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmNsb3NlRXh0cmEoKTtcbiAgdmFyIHBvcyA9IDA7XG4gIGZvciAodmFyIGkgPSB0aGlzLm9wZW47IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLm5vZGVzW2ldLmNvbnRlbnQ7XG4gICAgZm9yICh2YXIgaiA9IGNvbnRlbnQubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pXG4gICAgICB7IHBvcyArPSBjb250ZW50W2pdLm5vZGVTaXplOyB9XG4gICAgaWYgKGkpIHsgcG9zKys7IH1cbiAgfVxuICByZXR1cm4gcG9zXG59O1xuXG5QYXJzZUNvbnRleHQucHJvdG90eXBlLmZpbmRBdFBvaW50ID0gZnVuY3Rpb24gZmluZEF0UG9pbnQgKHBhcmVudCwgb2Zmc2V0KSB7XG4gIGlmICh0aGlzLmZpbmQpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmZpbmQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodGhpcy5maW5kW2ldLm5vZGUgPT0gcGFyZW50ICYmIHRoaXMuZmluZFtpXS5vZmZzZXQgPT0gb2Zmc2V0KVxuICAgICAgeyB0aGlzLmZpbmRbaV0ucG9zID0gdGhpcy5jdXJyZW50UG9zOyB9XG4gIH0gfVxufTtcblxuUGFyc2VDb250ZXh0LnByb3RvdHlwZS5maW5kSW5zaWRlID0gZnVuY3Rpb24gZmluZEluc2lkZSAocGFyZW50KSB7XG4gIGlmICh0aGlzLmZpbmQpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmZpbmQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodGhpcy5maW5kW2ldLnBvcyA9PSBudWxsICYmIHBhcmVudC5ub2RlVHlwZSA9PSAxICYmIHBhcmVudC5jb250YWlucyh0aGlzLmZpbmRbaV0ubm9kZSkpXG4gICAgICB7IHRoaXMuZmluZFtpXS5wb3MgPSB0aGlzLmN1cnJlbnRQb3M7IH1cbiAgfSB9XG59O1xuXG5QYXJzZUNvbnRleHQucHJvdG90eXBlLmZpbmRBcm91bmQgPSBmdW5jdGlvbiBmaW5kQXJvdW5kIChwYXJlbnQsIGNvbnRlbnQsIGJlZm9yZSkge1xuICBpZiAocGFyZW50ICE9IGNvbnRlbnQgJiYgdGhpcy5maW5kKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5maW5kLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHRoaXMuZmluZFtpXS5wb3MgPT0gbnVsbCAmJiBwYXJlbnQubm9kZVR5cGUgPT0gMSAmJiBwYXJlbnQuY29udGFpbnModGhpcy5maW5kW2ldLm5vZGUpKSB7XG4gICAgICB2YXIgcG9zID0gY29udGVudC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0aGlzLmZpbmRbaV0ubm9kZSk7XG4gICAgICBpZiAocG9zICYgKGJlZm9yZSA/IDIgOiA0KSlcbiAgICAgICAgeyB0aGlzLmZpbmRbaV0ucG9zID0gdGhpcy5jdXJyZW50UG9zOyB9XG4gICAgfVxuICB9IH1cbn07XG5cblBhcnNlQ29udGV4dC5wcm90b3R5cGUuZmluZEluVGV4dCA9IGZ1bmN0aW9uIGZpbmRJblRleHQgKHRleHROb2RlKSB7XG4gIGlmICh0aGlzLmZpbmQpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmZpbmQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodGhpcy5maW5kW2ldLm5vZGUgPT0gdGV4dE5vZGUpXG4gICAgICB7IHRoaXMuZmluZFtpXS5wb3MgPSB0aGlzLmN1cnJlbnRQb3MgLSAodGV4dE5vZGUubm9kZVZhbHVlLmxlbmd0aCAtIHRoaXMuZmluZFtpXS5vZmZzZXQpOyB9XG4gIH0gfVxufTtcblxuLy8gOiAoc3RyaW5nKSDihpIgYm9vbFxuLy8gRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBnaXZlbiBbY29udGV4dFxuLy8gc3RyaW5nXSgjUGFyc2VSdWxlLmNvbnRleHQpIG1hdGNoZXMgdGhpcyBjb250ZXh0LlxuUGFyc2VDb250ZXh0LnByb3RvdHlwZS5tYXRjaGVzQ29udGV4dCA9IGZ1bmN0aW9uIG1hdGNoZXNDb250ZXh0IChjb250ZXh0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKGNvbnRleHQuaW5kZXhPZihcInxcIikgPiAtMSlcbiAgICB7IHJldHVybiBjb250ZXh0LnNwbGl0KC9cXHMqXFx8XFxzKi8pLnNvbWUodGhpcy5tYXRjaGVzQ29udGV4dCwgdGhpcykgfVxuXG4gIHZhciBwYXJ0cyA9IGNvbnRleHQuc3BsaXQoXCIvXCIpO1xuICB2YXIgb3B0aW9uID0gdGhpcy5vcHRpb25zLmNvbnRleHQ7XG4gIHZhciB1c2VSb290ID0gIXRoaXMuaXNPcGVuICYmICghb3B0aW9uIHx8IG9wdGlvbi5wYXJlbnQudHlwZSA9PSB0aGlzLm5vZGVzWzBdLnR5cGUpO1xuICB2YXIgbWluRGVwdGggPSAtKG9wdGlvbiA/IG9wdGlvbi5kZXB0aCArIDEgOiAwKSArICh1c2VSb290ID8gMCA6IDEpO1xuICB2YXIgbWF0Y2ggPSBmdW5jdGlvbiAoaSwgZGVwdGgpIHtcbiAgICBmb3IgKDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBwYXJ0ID0gcGFydHNbaV07XG4gICAgICBpZiAocGFydCA9PSBcIlwiKSB7XG4gICAgICAgIGlmIChpID09IHBhcnRzLmxlbmd0aCAtIDEgfHwgaSA9PSAwKSB7IGNvbnRpbnVlIH1cbiAgICAgICAgZm9yICg7IGRlcHRoID49IG1pbkRlcHRoOyBkZXB0aC0tKVxuICAgICAgICAgIHsgaWYgKG1hdGNoKGkgLSAxLCBkZXB0aCkpIHsgcmV0dXJuIHRydWUgfSB9XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG5leHQgPSBkZXB0aCA+IDAgfHwgKGRlcHRoID09IDAgJiYgdXNlUm9vdCkgPyB0aGlzJDEubm9kZXNbZGVwdGhdLnR5cGVcbiAgICAgICAgICAgIDogb3B0aW9uICYmIGRlcHRoID49IG1pbkRlcHRoID8gb3B0aW9uLm5vZGUoZGVwdGggLSBtaW5EZXB0aCkudHlwZVxuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICBpZiAoIW5leHQgfHwgKG5leHQubmFtZSAhPSBwYXJ0ICYmIG5leHQuZ3JvdXBzLmluZGV4T2YocGFydCkgPT0gLTEpKVxuICAgICAgICAgIHsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgZGVwdGgtLTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfTtcbiAgcmV0dXJuIG1hdGNoKHBhcnRzLmxlbmd0aCAtIDEsIHRoaXMub3Blbilcbn07XG5cblBhcnNlQ29udGV4dC5wcm90b3R5cGUudGV4dGJsb2NrRnJvbUNvbnRleHQgPSBmdW5jdGlvbiB0ZXh0YmxvY2tGcm9tQ29udGV4dCAoKSB7XG4gIHZhciAkY29udGV4dCA9IHRoaXMub3B0aW9ucy5jb250ZXh0O1xuICBpZiAoJGNvbnRleHQpIHsgZm9yICh2YXIgZCA9ICRjb250ZXh0LmRlcHRoOyBkID49IDA7IGQtLSkge1xuICAgIHZhciBkZWZsdCA9ICRjb250ZXh0Lm5vZGUoZCkuY29udGVudE1hdGNoQXQoJGNvbnRleHQuaW5kZXhBZnRlcihkKSkuZGVmYXVsdFR5cGU7XG4gICAgaWYgKGRlZmx0ICYmIGRlZmx0LmlzVGV4dGJsb2NrICYmIGRlZmx0LmRlZmF1bHRBdHRycykgeyByZXR1cm4gZGVmbHQgfVxuICB9IH1cbiAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLnBhcnNlci5zY2hlbWEubm9kZXMpIHtcbiAgICB2YXIgdHlwZSA9IHRoaXMucGFyc2VyLnNjaGVtYS5ub2Rlc1tuYW1lXTtcbiAgICBpZiAodHlwZS5pc1RleHRibG9jayAmJiB0eXBlLmRlZmF1bHRBdHRycykgeyByZXR1cm4gdHlwZSB9XG4gIH1cbn07XG5cblBhcnNlQ29udGV4dC5wcm90b3R5cGUuYWRkUGVuZGluZ01hcmsgPSBmdW5jdGlvbiBhZGRQZW5kaW5nTWFyayAobWFyaykge1xuICB2YXIgZm91bmQgPSBmaW5kU2FtZU1hcmtJblNldChtYXJrLCB0aGlzLnRvcC5wZW5kaW5nTWFya3MpO1xuICBpZiAoZm91bmQpIHsgdGhpcy50b3Auc3Rhc2hNYXJrcy5wdXNoKGZvdW5kKTsgfVxuICB0aGlzLnRvcC5wZW5kaW5nTWFya3MgPSBtYXJrLmFkZFRvU2V0KHRoaXMudG9wLnBlbmRpbmdNYXJrcyk7XG59O1xuXG5QYXJzZUNvbnRleHQucHJvdG90eXBlLnJlbW92ZVBlbmRpbmdNYXJrID0gZnVuY3Rpb24gcmVtb3ZlUGVuZGluZ01hcmsgKG1hcmssIHVwdG8pIHtcbiAgZm9yICh2YXIgZGVwdGggPSB0aGlzLm9wZW47IGRlcHRoID49IDA7IGRlcHRoLS0pIHtcbiAgICB2YXIgbGV2ZWwgPSB0aGlzLm5vZGVzW2RlcHRoXTtcbiAgICB2YXIgZm91bmQgPSBsZXZlbC5wZW5kaW5nTWFya3MubGFzdEluZGV4T2YobWFyayk7XG4gICAgaWYgKGZvdW5kID4gLTEpIHtcbiAgICAgIGxldmVsLnBlbmRpbmdNYXJrcyA9IG1hcmsucmVtb3ZlRnJvbVNldChsZXZlbC5wZW5kaW5nTWFya3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXZlbC5hY3RpdmVNYXJrcyA9IG1hcmsucmVtb3ZlRnJvbVNldChsZXZlbC5hY3RpdmVNYXJrcyk7XG4gICAgICB2YXIgc3Rhc2hNYXJrID0gbGV2ZWwucG9wRnJvbVN0YXNoTWFyayhtYXJrKTtcbiAgICAgIGlmIChzdGFzaE1hcmsgJiYgbGV2ZWwudHlwZSAmJiBsZXZlbC50eXBlLmFsbG93c01hcmtUeXBlKHN0YXNoTWFyay50eXBlKSlcbiAgICAgICAgeyBsZXZlbC5hY3RpdmVNYXJrcyA9IHN0YXNoTWFyay5hZGRUb1NldChsZXZlbC5hY3RpdmVNYXJrcyk7IH1cbiAgICB9XG4gICAgaWYgKGxldmVsID09IHVwdG8pIHsgYnJlYWsgfVxuICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggUGFyc2VDb250ZXh0LnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDYgKTtcblxuLy8gS2x1ZGdlIHRvIHdvcmsgYXJvdW5kIGRpcmVjdGx5IG5lc3RlZCBsaXN0IG5vZGVzIHByb2R1Y2VkIGJ5IHNvbWVcbi8vIHRvb2xzIGFuZCBhbGxvd2VkIGJ5IGJyb3dzZXJzIHRvIG1lYW4gdGhhdCB0aGUgbmVzdGVkIGxpc3QgaXNcbi8vIGFjdHVhbGx5IHBhcnQgb2YgdGhlIGxpc3QgaXRlbSBhYm92ZSBpdC5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUxpc3QoZG9tKSB7XG4gIGZvciAodmFyIGNoaWxkID0gZG9tLmZpcnN0Q2hpbGQsIHByZXZJdGVtID0gbnVsbDsgY2hpbGQ7IGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmcpIHtcbiAgICB2YXIgbmFtZSA9IGNoaWxkLm5vZGVUeXBlID09IDEgPyBjaGlsZC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbiAgICBpZiAobmFtZSAmJiBsaXN0VGFncy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBwcmV2SXRlbSkge1xuICAgICAgcHJldkl0ZW0uYXBwZW5kQ2hpbGQoY2hpbGQpO1xuICAgICAgY2hpbGQgPSBwcmV2SXRlbTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT0gXCJsaVwiKSB7XG4gICAgICBwcmV2SXRlbSA9IGNoaWxkO1xuICAgIH0gZWxzZSBpZiAobmFtZSkge1xuICAgICAgcHJldkl0ZW0gPSBudWxsO1xuICAgIH1cbiAgfVxufVxuXG4vLyBBcHBseSBhIENTUyBzZWxlY3Rvci5cbmZ1bmN0aW9uIG1hdGNoZXMoZG9tLCBzZWxlY3Rvcikge1xuICByZXR1cm4gKGRvbS5tYXRjaGVzIHx8IGRvbS5tc01hdGNoZXNTZWxlY3RvciB8fCBkb20ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGRvbS5tb3pNYXRjaGVzU2VsZWN0b3IpLmNhbGwoZG9tLCBzZWxlY3Rvcilcbn1cblxuLy8gOiAoc3RyaW5nKSDihpIgW3N0cmluZ11cbi8vIFRva2VuaXplIGEgc3R5bGUgYXR0cmlidXRlIGludG8gcHJvcGVydHkvdmFsdWUgcGFpcnMuXG5mdW5jdGlvbiBwYXJzZVN0eWxlcyhzdHlsZSkge1xuICB2YXIgcmUgPSAvXFxzKihbXFx3LV0rKVxccyo6XFxzKihbXjtdKykvZywgbSwgcmVzdWx0ID0gW107XG4gIHdoaWxlIChtID0gcmUuZXhlYyhzdHlsZSkpIHsgcmVzdWx0LnB1c2gobVsxXSwgbVsyXS50cmltKCkpOyB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gY29weShvYmopIHtcbiAgdmFyIGNvcHkgPSB7fTtcbiAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHsgY29weVtwcm9wXSA9IG9ialtwcm9wXTsgfVxuICByZXR1cm4gY29weVxufVxuXG4vLyBVc2VkIHdoZW4gZmluZGluZyBhIG1hcmsgYXQgdGhlIHRvcCBsZXZlbCBvZiBhIGZyYWdtZW50IHBhcnNlLlxuLy8gQ2hlY2tzIHdoZXRoZXIgaXQgd291bGQgYmUgcmVhc29uYWJsZSB0byBhcHBseSBhIGdpdmVuIG1hcmsgdHlwZSB0b1xuLy8gYSBnaXZlbiBub2RlLCBieSBsb29raW5nIGF0IHRoZSB3YXkgdGhlIG1hcmsgb2NjdXJzIGluIHRoZSBzY2hlbWEuXG5mdW5jdGlvbiBtYXJrTWF5QXBwbHkobWFya1R5cGUsIG5vZGVUeXBlKSB7XG4gIHZhciBub2RlcyA9IG5vZGVUeXBlLnNjaGVtYS5ub2RlcztcbiAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIG5hbWUgKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVzW25hbWVdO1xuICAgIGlmICghcGFyZW50LmFsbG93c01hcmtUeXBlKG1hcmtUeXBlKSkgeyByZXR1cm4gfVxuICAgIHZhciBzZWVuID0gW10sIHNjYW4gPSBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgIHNlZW4ucHVzaChtYXRjaCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hdGNoLmVkZ2VDb3VudDsgaSsrKSB7XG4gICAgICAgIHZhciByZWYgPSBtYXRjaC5lZGdlKGkpO1xuICAgICAgICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICAgICAgICB2YXIgbmV4dCA9IHJlZi5uZXh0O1xuICAgICAgICBpZiAodHlwZSA9PSBub2RlVHlwZSkgeyByZXR1cm4gdHJ1ZSB9XG4gICAgICAgIGlmIChzZWVuLmluZGV4T2YobmV4dCkgPCAwICYmIHNjYW4obmV4dCkpIHsgcmV0dXJuIHRydWUgfVxuICAgICAgfVxuICAgIH07XG4gICAgaWYgKHNjYW4ocGFyZW50LmNvbnRlbnRNYXRjaCkpIHsgcmV0dXJuIHsgdjogdHJ1ZSB9IH1cbiAgfTtcblxuICBmb3IgKHZhciBuYW1lIGluIG5vZGVzKSB7XG4gICAgdmFyIHJldHVybmVkID0gbG9vcCggbmFtZSApO1xuXG4gICAgaWYgKCByZXR1cm5lZCApIHJldHVybiByZXR1cm5lZC52O1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRTYW1lTWFya0luU2V0KG1hcmssIHNldCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHNldC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChtYXJrLmVxKHNldFtpXSkpIHsgcmV0dXJuIHNldFtpXSB9XG4gIH1cbn1cblxuLy8gRE9NT3V0cHV0U3BlYzo6IGludGVyZmFjZVxuLy8gQSBkZXNjcmlwdGlvbiBvZiBhIERPTSBzdHJ1Y3R1cmUuIENhbiBiZSBlaXRoZXIgYSBzdHJpbmcsIHdoaWNoIGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhIHRleHQgbm9kZSwgYSBET00gbm9kZSwgd2hpY2ggaXMgaW50ZXJwcmV0ZWQgYXNcbi8vIGl0c2VsZiwgYSBge2RvbTogTm9kZSwgY29udGVudERPTTogP05vZGV9YCBvYmplY3QsIG9yIGFuIGFycmF5LlxuLy9cbi8vIEFuIGFycmF5IGRlc2NyaWJlcyBhIERPTSBlbGVtZW50LiBUaGUgZmlyc3QgdmFsdWUgaW4gdGhlIGFycmF5XG4vLyBzaG91bGQgYmUgYSBzdHJpbmfigJR0aGUgbmFtZSBvZiB0aGUgRE9NIGVsZW1lbnQsIG9wdGlvbmFsbHkgcHJlZml4ZWRcbi8vIGJ5IGEgbmFtZXNwYWNlIFVSTCBhbmQgYSBzcGFjZS4gSWYgdGhlIHNlY29uZCBlbGVtZW50IGlzIHBsYWluXG4vLyBvYmplY3QsIGl0IGlzIGludGVycHJldGVkIGFzIGEgc2V0IG9mIGF0dHJpYnV0ZXMgZm9yIHRoZSBlbGVtZW50LlxuLy8gQW55IGVsZW1lbnRzIGFmdGVyIHRoYXQgKGluY2x1ZGluZyB0aGUgMm5kIGlmIGl0J3Mgbm90IGFuIGF0dHJpYnV0ZVxuLy8gb2JqZWN0KSBhcmUgaW50ZXJwcmV0ZWQgYXMgY2hpbGRyZW4gb2YgdGhlIERPTSBlbGVtZW50cywgYW5kIG11c3Rcbi8vIGVpdGhlciBiZSB2YWxpZCBgRE9NT3V0cHV0U3BlY2AgdmFsdWVzLCBvciB0aGUgbnVtYmVyIHplcm8uXG4vL1xuLy8gVGhlIG51bWJlciB6ZXJvIChwcm9ub3VuY2VkIOKAnGhvbGXigJ0pIGlzIHVzZWQgdG8gaW5kaWNhdGUgdGhlIHBsYWNlXG4vLyB3aGVyZSBhIG5vZGUncyBjaGlsZCBub2RlcyBzaG91bGQgYmUgaW5zZXJ0ZWQuIElmIGl0IG9jY3VycyBpbiBhblxuLy8gb3V0cHV0IHNwZWMsIGl0IHNob3VsZCBiZSB0aGUgb25seSBjaGlsZCBlbGVtZW50IGluIGl0cyBwYXJlbnRcbi8vIG5vZGUuXG5cbi8vIDo6LSBBIERPTSBzZXJpYWxpemVyIGtub3dzIGhvdyB0byBjb252ZXJ0IFByb3NlTWlycm9yIG5vZGVzIGFuZFxuLy8gbWFya3Mgb2YgdmFyaW91cyB0eXBlcyB0byBET00gbm9kZXMuXG52YXIgRE9NU2VyaWFsaXplciA9IGZ1bmN0aW9uIERPTVNlcmlhbGl6ZXIobm9kZXMsIG1hcmtzKSB7XG4gIC8vIDo6IE9iamVjdDwobm9kZTogTm9kZSkg4oaSIERPTU91dHB1dFNwZWM+XG4gIC8vIFRoZSBub2RlIHNlcmlhbGl6YXRpb24gZnVuY3Rpb25zLlxuICB0aGlzLm5vZGVzID0gbm9kZXMgfHwge307XG4gIC8vIDo6IE9iamVjdDw/KG1hcms6IE1hcmssIGlubGluZTogYm9vbCkg4oaSIERPTU91dHB1dFNwZWM+XG4gIC8vIFRoZSBtYXJrIHNlcmlhbGl6YXRpb24gZnVuY3Rpb25zLlxuICB0aGlzLm1hcmtzID0gbWFya3MgfHwge307XG59O1xuXG4vLyA6OiAoRnJhZ21lbnQsID9PYmplY3QpIOKGkiBkb20uRG9jdW1lbnRGcmFnbWVudFxuLy8gU2VyaWFsaXplIHRoZSBjb250ZW50IG9mIHRoaXMgZnJhZ21lbnQgdG8gYSBET00gZnJhZ21lbnQuIFdoZW5cbi8vIG5vdCBpbiB0aGUgYnJvd3NlciwgdGhlIGBkb2N1bWVudGAgb3B0aW9uLCBjb250YWluaW5nIGEgRE9NXG4vLyBkb2N1bWVudCwgc2hvdWxkIGJlIHBhc3NlZCBzbyB0aGF0IHRoZSBzZXJpYWxpemVyIGNhbiBjcmVhdGVcbi8vIG5vZGVzLlxuRE9NU2VyaWFsaXplci5wcm90b3R5cGUuc2VyaWFsaXplRnJhZ21lbnQgPSBmdW5jdGlvbiBzZXJpYWxpemVGcmFnbWVudCAoZnJhZ21lbnQsIG9wdGlvbnMsIHRhcmdldCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIGlmICghdGFyZ2V0KSB7IHRhcmdldCA9IGRvYyhvcHRpb25zKS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7IH1cblxuICB2YXIgdG9wID0gdGFyZ2V0LCBhY3RpdmUgPSBudWxsO1xuICBmcmFnbWVudC5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgaWYgKGFjdGl2ZSB8fCBub2RlLm1hcmtzLmxlbmd0aCkge1xuICAgICAgaWYgKCFhY3RpdmUpIHsgYWN0aXZlID0gW107IH1cbiAgICAgIHZhciBrZWVwID0gMCwgcmVuZGVyZWQgPSAwO1xuICAgICAgd2hpbGUgKGtlZXAgPCBhY3RpdmUubGVuZ3RoICYmIHJlbmRlcmVkIDwgbm9kZS5tYXJrcy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIG5leHQgPSBub2RlLm1hcmtzW3JlbmRlcmVkXTtcbiAgICAgICAgaWYgKCF0aGlzJDEubWFya3NbbmV4dC50eXBlLm5hbWVdKSB7IHJlbmRlcmVkKys7IGNvbnRpbnVlIH1cbiAgICAgICAgaWYgKCFuZXh0LmVxKGFjdGl2ZVtrZWVwXSkgfHwgbmV4dC50eXBlLnNwZWMuc3Bhbm5pbmcgPT09IGZhbHNlKSB7IGJyZWFrIH1cbiAgICAgICAga2VlcCArPSAyOyByZW5kZXJlZCsrO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGtlZXAgPCBhY3RpdmUubGVuZ3RoKSB7XG4gICAgICAgIHRvcCA9IGFjdGl2ZS5wb3AoKTtcbiAgICAgICAgYWN0aXZlLnBvcCgpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHJlbmRlcmVkIDwgbm9kZS5tYXJrcy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGFkZCA9IG5vZGUubWFya3NbcmVuZGVyZWQrK107XG4gICAgICAgIHZhciBtYXJrRE9NID0gdGhpcyQxLnNlcmlhbGl6ZU1hcmsoYWRkLCBub2RlLmlzSW5saW5lLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKG1hcmtET00pIHtcbiAgICAgICAgICBhY3RpdmUucHVzaChhZGQsIHRvcCk7XG4gICAgICAgICAgdG9wLmFwcGVuZENoaWxkKG1hcmtET00uZG9tKTtcbiAgICAgICAgICB0b3AgPSBtYXJrRE9NLmNvbnRlbnRET00gfHwgbWFya0RPTS5kb207XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdG9wLmFwcGVuZENoaWxkKHRoaXMkMS5zZXJpYWxpemVOb2RlSW5uZXIobm9kZSwgb3B0aW9ucykpO1xuICB9KTtcblxuICByZXR1cm4gdGFyZ2V0XG59O1xuXG5ET01TZXJpYWxpemVyLnByb3RvdHlwZS5zZXJpYWxpemVOb2RlSW5uZXIgPSBmdW5jdGlvbiBzZXJpYWxpemVOb2RlSW5uZXIgKG5vZGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICB2YXIgcmVmID1cbiAgICAgIERPTVNlcmlhbGl6ZXIucmVuZGVyU3BlYyhkb2Mob3B0aW9ucyksIHRoaXMubm9kZXNbbm9kZS50eXBlLm5hbWVdKG5vZGUpKTtcbiAgICB2YXIgZG9tID0gcmVmLmRvbTtcbiAgICB2YXIgY29udGVudERPTSA9IHJlZi5jb250ZW50RE9NO1xuICBpZiAoY29udGVudERPTSkge1xuICAgIGlmIChub2RlLmlzTGVhZilcbiAgICAgIHsgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJDb250ZW50IGhvbGUgbm90IGFsbG93ZWQgaW4gYSBsZWFmIG5vZGUgc3BlY1wiKSB9XG4gICAgaWYgKG9wdGlvbnMub25Db250ZW50KVxuICAgICAgeyBvcHRpb25zLm9uQ29udGVudChub2RlLCBjb250ZW50RE9NLCBvcHRpb25zKTsgfVxuICAgIGVsc2VcbiAgICAgIHsgdGhpcy5zZXJpYWxpemVGcmFnbWVudChub2RlLmNvbnRlbnQsIG9wdGlvbnMsIGNvbnRlbnRET00pOyB9XG4gIH1cbiAgcmV0dXJuIGRvbVxufTtcblxuLy8gOjogKE5vZGUsID9PYmplY3QpIOKGkiBkb20uTm9kZVxuLy8gU2VyaWFsaXplIHRoaXMgbm9kZSB0byBhIERPTSBub2RlLiBUaGlzIGNhbiBiZSB1c2VmdWwgd2hlbiB5b3Vcbi8vIG5lZWQgdG8gc2VyaWFsaXplIGEgcGFydCBvZiBhIGRvY3VtZW50LCBhcyBvcHBvc2VkIHRvIHRoZSB3aG9sZVxuLy8gZG9jdW1lbnQuIFRvIHNlcmlhbGl6ZSBhIHdob2xlIGRvY3VtZW50LCB1c2Vcbi8vIFtgc2VyaWFsaXplRnJhZ21lbnRgXSgjbW9kZWwuRE9NU2VyaWFsaXplci5zZXJpYWxpemVGcmFnbWVudCkgb25cbi8vIGl0cyBbY29udGVudF0oI21vZGVsLk5vZGUuY29udGVudCkuXG5ET01TZXJpYWxpemVyLnByb3RvdHlwZS5zZXJpYWxpemVOb2RlID0gZnVuY3Rpb24gc2VyaWFsaXplTm9kZSAobm9kZSwgb3B0aW9ucykge1xuICAgIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIHZhciBkb20gPSB0aGlzLnNlcmlhbGl6ZU5vZGVJbm5lcihub2RlLCBvcHRpb25zKTtcbiAgZm9yICh2YXIgaSA9IG5vZGUubWFya3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgd3JhcCA9IHRoaXMuc2VyaWFsaXplTWFyayhub2RlLm1hcmtzW2ldLCBub2RlLmlzSW5saW5lLCBvcHRpb25zKTtcbiAgICBpZiAod3JhcCkge1xuKHdyYXAuY29udGVudERPTSB8fCB3cmFwLmRvbSkuYXBwZW5kQ2hpbGQoZG9tKTtcbiAgICAgIGRvbSA9IHdyYXAuZG9tO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZG9tXG59O1xuXG5ET01TZXJpYWxpemVyLnByb3RvdHlwZS5zZXJpYWxpemVNYXJrID0gZnVuY3Rpb24gc2VyaWFsaXplTWFyayAobWFyaywgaW5saW5lLCBvcHRpb25zKSB7XG4gICAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgdmFyIHRvRE9NID0gdGhpcy5tYXJrc1ttYXJrLnR5cGUubmFtZV07XG4gIHJldHVybiB0b0RPTSAmJiBET01TZXJpYWxpemVyLnJlbmRlclNwZWMoZG9jKG9wdGlvbnMpLCB0b0RPTShtYXJrLCBpbmxpbmUpKVxufTtcblxuLy8gOjogKGRvbS5Eb2N1bWVudCwgRE9NT3V0cHV0U3BlYykg4oaSIHtkb206IGRvbS5Ob2RlLCBjb250ZW50RE9NOiA/ZG9tLk5vZGV9XG4vLyBSZW5kZXIgYW4gW291dHB1dCBzcGVjXSgjbW9kZWwuRE9NT3V0cHV0U3BlYykgdG8gYSBET00gbm9kZS4gSWZcbi8vIHRoZSBzcGVjIGhhcyBhIGhvbGUgKHplcm8pIGluIGl0LCBgY29udGVudERPTWAgd2lsbCBwb2ludCBhdCB0aGVcbi8vIG5vZGUgd2l0aCB0aGUgaG9sZS5cbkRPTVNlcmlhbGl6ZXIucmVuZGVyU3BlYyA9IGZ1bmN0aW9uIHJlbmRlclNwZWMgKGRvYywgc3RydWN0dXJlLCB4bWxOUykge1xuICAgIGlmICggeG1sTlMgPT09IHZvaWQgMCApIHhtbE5TID0gbnVsbDtcblxuICBpZiAodHlwZW9mIHN0cnVjdHVyZSA9PSBcInN0cmluZ1wiKVxuICAgIHsgcmV0dXJuIHtkb206IGRvYy5jcmVhdGVUZXh0Tm9kZShzdHJ1Y3R1cmUpfSB9XG4gIGlmIChzdHJ1Y3R1cmUubm9kZVR5cGUgIT0gbnVsbClcbiAgICB7IHJldHVybiB7ZG9tOiBzdHJ1Y3R1cmV9IH1cbiAgaWYgKHN0cnVjdHVyZS5kb20gJiYgc3RydWN0dXJlLmRvbS5ub2RlVHlwZSAhPSBudWxsKVxuICAgIHsgcmV0dXJuIHN0cnVjdHVyZSB9XG4gIHZhciB0YWdOYW1lID0gc3RydWN0dXJlWzBdLCBzcGFjZSA9IHRhZ05hbWUuaW5kZXhPZihcIiBcIik7XG4gIGlmIChzcGFjZSA+IDApIHtcbiAgICB4bWxOUyA9IHRhZ05hbWUuc2xpY2UoMCwgc3BhY2UpO1xuICAgIHRhZ05hbWUgPSB0YWdOYW1lLnNsaWNlKHNwYWNlICsgMSk7XG4gIH1cbiAgdmFyIGNvbnRlbnRET00gPSBudWxsLCBkb20gPSB4bWxOUyA/IGRvYy5jcmVhdGVFbGVtZW50TlMoeG1sTlMsIHRhZ05hbWUpIDogZG9jLmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gIHZhciBhdHRycyA9IHN0cnVjdHVyZVsxXSwgc3RhcnQgPSAxO1xuICBpZiAoYXR0cnMgJiYgdHlwZW9mIGF0dHJzID09IFwib2JqZWN0XCIgJiYgYXR0cnMubm9kZVR5cGUgPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheShhdHRycykpIHtcbiAgICBzdGFydCA9IDI7XG4gICAgZm9yICh2YXIgbmFtZSBpbiBhdHRycykgeyBpZiAoYXR0cnNbbmFtZV0gIT0gbnVsbCkge1xuICAgICAgdmFyIHNwYWNlJDEgPSBuYW1lLmluZGV4T2YoXCIgXCIpO1xuICAgICAgaWYgKHNwYWNlJDEgPiAwKSB7IGRvbS5zZXRBdHRyaWJ1dGVOUyhuYW1lLnNsaWNlKDAsIHNwYWNlJDEpLCBuYW1lLnNsaWNlKHNwYWNlJDEgKyAxKSwgYXR0cnNbbmFtZV0pOyB9XG4gICAgICBlbHNlIHsgZG9tLnNldEF0dHJpYnV0ZShuYW1lLCBhdHRyc1tuYW1lXSk7IH1cbiAgICB9IH1cbiAgfVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBzdHJ1Y3R1cmUubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBzdHJ1Y3R1cmVbaV07XG4gICAgaWYgKGNoaWxkID09PSAwKSB7XG4gICAgICBpZiAoaSA8IHN0cnVjdHVyZS5sZW5ndGggLSAxIHx8IGkgPiBzdGFydClcbiAgICAgICAgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkNvbnRlbnQgaG9sZSBtdXN0IGJlIHRoZSBvbmx5IGNoaWxkIG9mIGl0cyBwYXJlbnQgbm9kZVwiKSB9XG4gICAgICByZXR1cm4ge2RvbTogZG9tLCBjb250ZW50RE9NOiBkb219XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciByZWYgPSBET01TZXJpYWxpemVyLnJlbmRlclNwZWMoZG9jLCBjaGlsZCwgeG1sTlMpO1xuICAgICAgICB2YXIgaW5uZXIgPSByZWYuZG9tO1xuICAgICAgICB2YXIgaW5uZXJDb250ZW50ID0gcmVmLmNvbnRlbnRET007XG4gICAgICBkb20uYXBwZW5kQ2hpbGQoaW5uZXIpO1xuICAgICAgaWYgKGlubmVyQ29udGVudCkge1xuICAgICAgICBpZiAoY29udGVudERPTSkgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIk11bHRpcGxlIGNvbnRlbnQgaG9sZXNcIikgfVxuICAgICAgICBjb250ZW50RE9NID0gaW5uZXJDb250ZW50O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4ge2RvbTogZG9tLCBjb250ZW50RE9NOiBjb250ZW50RE9NfVxufTtcblxuLy8gOjogKFNjaGVtYSkg4oaSIERPTVNlcmlhbGl6ZXJcbi8vIEJ1aWxkIGEgc2VyaWFsaXplciB1c2luZyB0aGUgW2B0b0RPTWBdKCNtb2RlbC5Ob2RlU3BlYy50b0RPTSlcbi8vIHByb3BlcnRpZXMgaW4gYSBzY2hlbWEncyBub2RlIGFuZCBtYXJrIHNwZWNzLlxuRE9NU2VyaWFsaXplci5mcm9tU2NoZW1hID0gZnVuY3Rpb24gZnJvbVNjaGVtYSAoc2NoZW1hKSB7XG4gIHJldHVybiBzY2hlbWEuY2FjaGVkLmRvbVNlcmlhbGl6ZXIgfHxcbiAgICAoc2NoZW1hLmNhY2hlZC5kb21TZXJpYWxpemVyID0gbmV3IERPTVNlcmlhbGl6ZXIodGhpcy5ub2Rlc0Zyb21TY2hlbWEoc2NoZW1hKSwgdGhpcy5tYXJrc0Zyb21TY2hlbWEoc2NoZW1hKSkpXG59O1xuXG4vLyA6IChTY2hlbWEpIOKGkiBPYmplY3Q8KG5vZGU6IE5vZGUpIOKGkiBET01PdXRwdXRTcGVjPlxuLy8gR2F0aGVyIHRoZSBzZXJpYWxpemVycyBpbiBhIHNjaGVtYSdzIG5vZGUgc3BlY3MgaW50byBhbiBvYmplY3QuXG4vLyBUaGlzIGNhbiBiZSB1c2VmdWwgYXMgYSBiYXNlIHRvIGJ1aWxkIGEgY3VzdG9tIHNlcmlhbGl6ZXIgZnJvbS5cbkRPTVNlcmlhbGl6ZXIubm9kZXNGcm9tU2NoZW1hID0gZnVuY3Rpb24gbm9kZXNGcm9tU2NoZW1hIChzY2hlbWEpIHtcbiAgdmFyIHJlc3VsdCA9IGdhdGhlclRvRE9NKHNjaGVtYS5ub2Rlcyk7XG4gIGlmICghcmVzdWx0LnRleHQpIHsgcmVzdWx0LnRleHQgPSBmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gbm9kZS50ZXh0OyB9OyB9XG4gIHJldHVybiByZXN1bHRcbn07XG5cbi8vIDogKFNjaGVtYSkg4oaSIE9iamVjdDwobWFyazogTWFyaykg4oaSIERPTU91dHB1dFNwZWM+XG4vLyBHYXRoZXIgdGhlIHNlcmlhbGl6ZXJzIGluIGEgc2NoZW1hJ3MgbWFyayBzcGVjcyBpbnRvIGFuIG9iamVjdC5cbkRPTVNlcmlhbGl6ZXIubWFya3NGcm9tU2NoZW1hID0gZnVuY3Rpb24gbWFya3NGcm9tU2NoZW1hIChzY2hlbWEpIHtcbiAgcmV0dXJuIGdhdGhlclRvRE9NKHNjaGVtYS5tYXJrcylcbn07XG5cbmZ1bmN0aW9uIGdhdGhlclRvRE9NKG9iaikge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZvciAodmFyIG5hbWUgaW4gb2JqKSB7XG4gICAgdmFyIHRvRE9NID0gb2JqW25hbWVdLnNwZWMudG9ET007XG4gICAgaWYgKHRvRE9NKSB7IHJlc3VsdFtuYW1lXSA9IHRvRE9NOyB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBkb2Mob3B0aW9ucykge1xuICAvLyBkZWNsYXJlIGdsb2JhbDogd2luZG93XG4gIHJldHVybiBvcHRpb25zLmRvY3VtZW50IHx8IHdpbmRvdy5kb2N1bWVudFxufVxuXG5leHBvcnQgeyBDb250ZW50TWF0Y2gsIERPTVBhcnNlciwgRE9NU2VyaWFsaXplciwgRnJhZ21lbnQsIE1hcmssIE1hcmtUeXBlLCBOb2RlLCBOb2RlUmFuZ2UsIE5vZGVUeXBlLCBSZXBsYWNlRXJyb3IsIFJlc29sdmVkUG9zLCBTY2hlbWEsIFNsaWNlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lcy5qcy5tYXBcbiIsImltcG9ydCB7IFNsaWNlLCBGcmFnbWVudCwgTWFyaywgTm9kZSB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcbmltcG9ydCB7IFJlcGxhY2VTdGVwLCBSZXBsYWNlQXJvdW5kU3RlcCwgVHJhbnNmb3JtIH0gZnJvbSAncHJvc2VtaXJyb3ItdHJhbnNmb3JtJztcblxudmFyIGNsYXNzZXNCeUlkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuLy8gOjotIFN1cGVyY2xhc3MgZm9yIGVkaXRvciBzZWxlY3Rpb25zLiBFdmVyeSBzZWxlY3Rpb24gdHlwZSBzaG91bGRcbi8vIGV4dGVuZCB0aGlzLiBTaG91bGQgbm90IGJlIGluc3RhbnRpYXRlZCBkaXJlY3RseS5cbnZhciBTZWxlY3Rpb24gPSBmdW5jdGlvbiBTZWxlY3Rpb24oJGFuY2hvciwgJGhlYWQsIHJhbmdlcykge1xuICAvLyA6OiBbU2VsZWN0aW9uUmFuZ2VdXG4gIC8vIFRoZSByYW5nZXMgY292ZXJlZCBieSB0aGUgc2VsZWN0aW9uLlxuICB0aGlzLnJhbmdlcyA9IHJhbmdlcyB8fCBbbmV3IFNlbGVjdGlvblJhbmdlKCRhbmNob3IubWluKCRoZWFkKSwgJGFuY2hvci5tYXgoJGhlYWQpKV07XG4gIC8vIDo6IFJlc29sdmVkUG9zXG4gIC8vIFRoZSByZXNvbHZlZCBhbmNob3Igb2YgdGhlIHNlbGVjdGlvbiAodGhlIHNpZGUgdGhhdCBzdGF5cyBpblxuICAvLyBwbGFjZSB3aGVuIHRoZSBzZWxlY3Rpb24gaXMgbW9kaWZpZWQpLlxuICB0aGlzLiRhbmNob3IgPSAkYW5jaG9yO1xuICAvLyA6OiBSZXNvbHZlZFBvc1xuICAvLyBUaGUgcmVzb2x2ZWQgaGVhZCBvZiB0aGUgc2VsZWN0aW9uICh0aGUgc2lkZSB0aGF0IG1vdmVzIHdoZW5cbiAgLy8gdGhlIHNlbGVjdGlvbiBpcyBtb2RpZmllZCkuXG4gIHRoaXMuJGhlYWQgPSAkaGVhZDtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGFuY2hvcjogeyBjb25maWd1cmFibGU6IHRydWUgfSxoZWFkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGZyb206IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sdG86IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sJGZyb206IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sJHRvOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGVtcHR5OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8vIDo6IG51bWJlclxuLy8gVGhlIHNlbGVjdGlvbidzIGFuY2hvciwgYXMgYW4gdW5yZXNvbHZlZCBwb3NpdGlvbi5cbnByb3RvdHlwZUFjY2Vzc29ycy5hbmNob3IuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy4kYW5jaG9yLnBvcyB9O1xuXG4vLyA6OiBudW1iZXJcbi8vIFRoZSBzZWxlY3Rpb24ncyBoZWFkLlxucHJvdG90eXBlQWNjZXNzb3JzLmhlYWQuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy4kaGVhZC5wb3MgfTtcblxuLy8gOjogbnVtYmVyXG4vLyBUaGUgbG93ZXIgYm91bmQgb2YgdGhlIHNlbGVjdGlvbidzIG1haW4gcmFuZ2UuXG5wcm90b3R5cGVBY2Nlc3NvcnMuZnJvbS5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLiRmcm9tLnBvcyB9O1xuXG4vLyA6OiBudW1iZXJcbi8vIFRoZSB1cHBlciBib3VuZCBvZiB0aGUgc2VsZWN0aW9uJ3MgbWFpbiByYW5nZS5cbnByb3RvdHlwZUFjY2Vzc29ycy50by5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLiR0by5wb3MgfTtcblxuLy8gOjogUmVzb2x2ZWRQb3Ncbi8vIFRoZSByZXNvbHZlZCBsb3dlcmJvdW5kIG9mIHRoZSBzZWxlY3Rpb24ncyBtYWluIHJhbmdlLlxucHJvdG90eXBlQWNjZXNzb3JzLiRmcm9tLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucmFuZ2VzWzBdLiRmcm9tXG59O1xuXG4vLyA6OiBSZXNvbHZlZFBvc1xuLy8gVGhlIHJlc29sdmVkIHVwcGVyIGJvdW5kIG9mIHRoZSBzZWxlY3Rpb24ncyBtYWluIHJhbmdlLlxucHJvdG90eXBlQWNjZXNzb3JzLiR0by5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnJhbmdlc1swXS4kdG9cbn07XG5cbi8vIDo6IGJvb2xcbi8vIEluZGljYXRlcyB3aGV0aGVyIHRoZSBzZWxlY3Rpb24gY29udGFpbnMgYW55IGNvbnRlbnQuXG5wcm90b3R5cGVBY2Nlc3NvcnMuZW1wdHkuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcmFuZ2VzID0gdGhpcy5yYW5nZXM7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKVxuICAgIHsgaWYgKHJhbmdlc1tpXS4kZnJvbS5wb3MgIT0gcmFuZ2VzW2ldLiR0by5wb3MpIHsgcmV0dXJuIGZhbHNlIH0gfVxuICByZXR1cm4gdHJ1ZVxufTtcblxuLy8gZXE6OiAoU2VsZWN0aW9uKSDihpIgYm9vbFxuLy8gVGVzdCB3aGV0aGVyIHRoZSBzZWxlY3Rpb24gaXMgdGhlIHNhbWUgYXMgYW5vdGhlciBzZWxlY3Rpb24uXG5cbi8vIG1hcDo6IChkb2M6IE5vZGUsIG1hcHBpbmc6IE1hcHBhYmxlKSDihpIgU2VsZWN0aW9uXG4vLyBNYXAgdGhpcyBzZWxlY3Rpb24gdGhyb3VnaCBhIFttYXBwYWJsZV0oI3RyYW5zZm9ybS5NYXBwYWJsZSkgdGhpbmcuIGBkb2NgXG4vLyBzaG91bGQgYmUgdGhlIG5ldyBkb2N1bWVudCB0byB3aGljaCB3ZSBhcmUgbWFwcGluZy5cblxuLy8gOjogKCkg4oaSIFNsaWNlXG4vLyBHZXQgdGhlIGNvbnRlbnQgb2YgdGhpcyBzZWxlY3Rpb24gYXMgYSBzbGljZS5cblNlbGVjdGlvbi5wcm90b3R5cGUuY29udGVudCA9IGZ1bmN0aW9uIGNvbnRlbnQgKCkge1xuICByZXR1cm4gdGhpcy4kZnJvbS5ub2RlKDApLnNsaWNlKHRoaXMuZnJvbSwgdGhpcy50bywgdHJ1ZSlcbn07XG5cbi8vIDo6IChUcmFuc2FjdGlvbiwgP1NsaWNlKVxuLy8gUmVwbGFjZSB0aGUgc2VsZWN0aW9uIHdpdGggYSBzbGljZSBvciwgaWYgbm8gc2xpY2UgaXMgZ2l2ZW4sXG4vLyBkZWxldGUgdGhlIHNlbGVjdGlvbi4gV2lsbCBhcHBlbmQgdG8gdGhlIGdpdmVuIHRyYW5zYWN0aW9uLlxuU2VsZWN0aW9uLnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAodHIsIGNvbnRlbnQpIHtcbiAgICBpZiAoIGNvbnRlbnQgPT09IHZvaWQgMCApIGNvbnRlbnQgPSBTbGljZS5lbXB0eTtcblxuICAvLyBQdXQgdGhlIG5ldyBzZWxlY3Rpb24gYXQgdGhlIHBvc2l0aW9uIGFmdGVyIHRoZSBpbnNlcnRlZFxuICAvLyBjb250ZW50LiBXaGVuIHRoYXQgZW5kZWQgaW4gYW4gaW5saW5lIG5vZGUsIHNlYXJjaCBiYWNrd2FyZHMsXG4gIC8vIHRvIGdldCB0aGUgcG9zaXRpb24gYWZ0ZXIgdGhhdCBub2RlLiBJZiBub3QsIHNlYXJjaCBmb3J3YXJkLlxuICB2YXIgbGFzdE5vZGUgPSBjb250ZW50LmNvbnRlbnQubGFzdENoaWxkLCBsYXN0UGFyZW50ID0gbnVsbDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250ZW50Lm9wZW5FbmQ7IGkrKykge1xuICAgIGxhc3RQYXJlbnQgPSBsYXN0Tm9kZTtcbiAgICBsYXN0Tm9kZSA9IGxhc3ROb2RlLmxhc3RDaGlsZDtcbiAgfVxuXG4gIHZhciBtYXBGcm9tID0gdHIuc3RlcHMubGVuZ3RoLCByYW5nZXMgPSB0aGlzLnJhbmdlcztcbiAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcmFuZ2VzLmxlbmd0aDsgaSQxKyspIHtcbiAgICB2YXIgcmVmID0gcmFuZ2VzW2kkMV07XG4gICAgICB2YXIgJGZyb20gPSByZWYuJGZyb207XG4gICAgICB2YXIgJHRvID0gcmVmLiR0bztcbiAgICAgIHZhciBtYXBwaW5nID0gdHIubWFwcGluZy5zbGljZShtYXBGcm9tKTtcbiAgICB0ci5yZXBsYWNlUmFuZ2UobWFwcGluZy5tYXAoJGZyb20ucG9zKSwgbWFwcGluZy5tYXAoJHRvLnBvcyksIGkkMSA/IFNsaWNlLmVtcHR5IDogY29udGVudCk7XG4gICAgaWYgKGkkMSA9PSAwKVxuICAgICAgeyBzZWxlY3Rpb25Ub0luc2VydGlvbkVuZCh0ciwgbWFwRnJvbSwgKGxhc3ROb2RlID8gbGFzdE5vZGUuaXNJbmxpbmUgOiBsYXN0UGFyZW50ICYmIGxhc3RQYXJlbnQuaXNUZXh0YmxvY2spID8gLTEgOiAxKTsgfVxuICB9XG59O1xuXG4vLyA6OiAoVHJhbnNhY3Rpb24sIE5vZGUpXG4vLyBSZXBsYWNlIHRoZSBzZWxlY3Rpb24gd2l0aCB0aGUgZ2l2ZW4gbm9kZSwgYXBwZW5kaW5nIHRoZSBjaGFuZ2VzXG4vLyB0byB0aGUgZ2l2ZW4gdHJhbnNhY3Rpb24uXG5TZWxlY3Rpb24ucHJvdG90eXBlLnJlcGxhY2VXaXRoID0gZnVuY3Rpb24gcmVwbGFjZVdpdGggKHRyLCBub2RlKSB7XG4gIHZhciBtYXBGcm9tID0gdHIuc3RlcHMubGVuZ3RoLCByYW5nZXMgPSB0aGlzLnJhbmdlcztcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcmVmID0gcmFuZ2VzW2ldO1xuICAgICAgdmFyICRmcm9tID0gcmVmLiRmcm9tO1xuICAgICAgdmFyICR0byA9IHJlZi4kdG87XG4gICAgICB2YXIgbWFwcGluZyA9IHRyLm1hcHBpbmcuc2xpY2UobWFwRnJvbSk7XG4gICAgdmFyIGZyb20gPSBtYXBwaW5nLm1hcCgkZnJvbS5wb3MpLCB0byA9IG1hcHBpbmcubWFwKCR0by5wb3MpO1xuICAgIGlmIChpKSB7XG4gICAgICB0ci5kZWxldGVSYW5nZShmcm9tLCB0byk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyLnJlcGxhY2VSYW5nZVdpdGgoZnJvbSwgdG8sIG5vZGUpO1xuICAgICAgc2VsZWN0aW9uVG9JbnNlcnRpb25FbmQodHIsIG1hcEZyb20sIG5vZGUuaXNJbmxpbmUgPyAtMSA6IDEpO1xuICAgIH1cbiAgfVxufTtcblxuLy8gdG9KU09OOjogKCkg4oaSIE9iamVjdFxuLy8gQ29udmVydCB0aGUgc2VsZWN0aW9uIHRvIGEgSlNPTiByZXByZXNlbnRhdGlvbi4gV2hlbiBpbXBsZW1lbnRpbmdcbi8vIHRoaXMgZm9yIGEgY3VzdG9tIHNlbGVjdGlvbiBjbGFzcywgbWFrZSBzdXJlIHRvIGdpdmUgdGhlIG9iamVjdCBhXG4vLyBgdHlwZWAgcHJvcGVydHkgd2hvc2UgdmFsdWUgbWF0Y2hlcyB0aGUgSUQgdW5kZXIgd2hpY2ggeW91XG4vLyBbcmVnaXN0ZXJlZF0oI3N0YXRlLlNlbGVjdGlvbl5qc29uSUQpIHlvdXIgY2xhc3MuXG5cbi8vIDo6IChSZXNvbHZlZFBvcywgbnVtYmVyLCA/Ym9vbCkg4oaSID9TZWxlY3Rpb25cbi8vIEZpbmQgYSB2YWxpZCBjdXJzb3Igb3IgbGVhZiBub2RlIHNlbGVjdGlvbiBzdGFydGluZyBhdCB0aGUgZ2l2ZW5cbi8vIHBvc2l0aW9uIGFuZCBzZWFyY2hpbmcgYmFjayBpZiBgZGlyYCBpcyBuZWdhdGl2ZSwgYW5kIGZvcndhcmQgaWZcbi8vIHBvc2l0aXZlLiBXaGVuIGB0ZXh0T25seWAgaXMgdHJ1ZSwgb25seSBjb25zaWRlciBjdXJzb3Jcbi8vIHNlbGVjdGlvbnMuIFdpbGwgcmV0dXJuIG51bGwgd2hlbiBubyB2YWxpZCBzZWxlY3Rpb24gcG9zaXRpb24gaXNcbi8vIGZvdW5kLlxuU2VsZWN0aW9uLmZpbmRGcm9tID0gZnVuY3Rpb24gZmluZEZyb20gKCRwb3MsIGRpciwgdGV4dE9ubHkpIHtcbiAgdmFyIGlubmVyID0gJHBvcy5wYXJlbnQuaW5saW5lQ29udGVudCA/IG5ldyBUZXh0U2VsZWN0aW9uKCRwb3MpXG4gICAgICA6IGZpbmRTZWxlY3Rpb25JbigkcG9zLm5vZGUoMCksICRwb3MucGFyZW50LCAkcG9zLnBvcywgJHBvcy5pbmRleCgpLCBkaXIsIHRleHRPbmx5KTtcbiAgaWYgKGlubmVyKSB7IHJldHVybiBpbm5lciB9XG5cbiAgZm9yICh2YXIgZGVwdGggPSAkcG9zLmRlcHRoIC0gMTsgZGVwdGggPj0gMDsgZGVwdGgtLSkge1xuICAgIHZhciBmb3VuZCA9IGRpciA8IDBcbiAgICAgICAgPyBmaW5kU2VsZWN0aW9uSW4oJHBvcy5ub2RlKDApLCAkcG9zLm5vZGUoZGVwdGgpLCAkcG9zLmJlZm9yZShkZXB0aCArIDEpLCAkcG9zLmluZGV4KGRlcHRoKSwgZGlyLCB0ZXh0T25seSlcbiAgICAgICAgOiBmaW5kU2VsZWN0aW9uSW4oJHBvcy5ub2RlKDApLCAkcG9zLm5vZGUoZGVwdGgpLCAkcG9zLmFmdGVyKGRlcHRoICsgMSksICRwb3MuaW5kZXgoZGVwdGgpICsgMSwgZGlyLCB0ZXh0T25seSk7XG4gICAgaWYgKGZvdW5kKSB7IHJldHVybiBmb3VuZCB9XG4gIH1cbn07XG5cbi8vIDo6IChSZXNvbHZlZFBvcywgP251bWJlcikg4oaSIFNlbGVjdGlvblxuLy8gRmluZCBhIHZhbGlkIGN1cnNvciBvciBsZWFmIG5vZGUgc2VsZWN0aW9uIG5lYXIgdGhlIGdpdmVuXG4vLyBwb3NpdGlvbi4gU2VhcmNoZXMgZm9yd2FyZCBmaXJzdCBieSBkZWZhdWx0LCBidXQgaWYgYGJpYXNgIGlzXG4vLyBuZWdhdGl2ZSwgaXQgd2lsbCBzZWFyY2ggYmFja3dhcmRzIGZpcnN0LlxuU2VsZWN0aW9uLm5lYXIgPSBmdW5jdGlvbiBuZWFyICgkcG9zLCBiaWFzKSB7XG4gICAgaWYgKCBiaWFzID09PSB2b2lkIDAgKSBiaWFzID0gMTtcblxuICByZXR1cm4gdGhpcy5maW5kRnJvbSgkcG9zLCBiaWFzKSB8fCB0aGlzLmZpbmRGcm9tKCRwb3MsIC1iaWFzKSB8fCBuZXcgQWxsU2VsZWN0aW9uKCRwb3Mubm9kZSgwKSlcbn07XG5cbi8vIDo6IChOb2RlKSDihpIgU2VsZWN0aW9uXG4vLyBGaW5kIHRoZSBjdXJzb3Igb3IgbGVhZiBub2RlIHNlbGVjdGlvbiBjbG9zZXN0IHRvIHRoZSBzdGFydCBvZlxuLy8gdGhlIGdpdmVuIGRvY3VtZW50LiBXaWxsIHJldHVybiBhblxuLy8gW2BBbGxTZWxlY3Rpb25gXSgjc3RhdGUuQWxsU2VsZWN0aW9uKSBpZiBubyB2YWxpZCBwb3NpdGlvblxuLy8gZXhpc3RzLlxuU2VsZWN0aW9uLmF0U3RhcnQgPSBmdW5jdGlvbiBhdFN0YXJ0IChkb2MpIHtcbiAgcmV0dXJuIGZpbmRTZWxlY3Rpb25Jbihkb2MsIGRvYywgMCwgMCwgMSkgfHwgbmV3IEFsbFNlbGVjdGlvbihkb2MpXG59O1xuXG4vLyA6OiAoTm9kZSkg4oaSIFNlbGVjdGlvblxuLy8gRmluZCB0aGUgY3Vyc29yIG9yIGxlYWYgbm9kZSBzZWxlY3Rpb24gY2xvc2VzdCB0byB0aGUgZW5kIG9mIHRoZVxuLy8gZ2l2ZW4gZG9jdW1lbnQuXG5TZWxlY3Rpb24uYXRFbmQgPSBmdW5jdGlvbiBhdEVuZCAoZG9jKSB7XG4gIHJldHVybiBmaW5kU2VsZWN0aW9uSW4oZG9jLCBkb2MsIGRvYy5jb250ZW50LnNpemUsIGRvYy5jaGlsZENvdW50LCAtMSkgfHwgbmV3IEFsbFNlbGVjdGlvbihkb2MpXG59O1xuXG4vLyA6OiAoTm9kZSwgT2JqZWN0KSDihpIgU2VsZWN0aW9uXG4vLyBEZXNlcmlhbGl6ZSB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiBhIHNlbGVjdGlvbi4gTXVzdCBiZVxuLy8gaW1wbGVtZW50ZWQgZm9yIGN1c3RvbSBjbGFzc2VzIChhcyBhIHN0YXRpYyBjbGFzcyBtZXRob2QpLlxuU2VsZWN0aW9uLmZyb21KU09OID0gZnVuY3Rpb24gZnJvbUpTT04gKGRvYywganNvbikge1xuICBpZiAoIWpzb24gfHwgIWpzb24udHlwZSkgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgaW5wdXQgZm9yIFNlbGVjdGlvbi5mcm9tSlNPTlwiKSB9XG4gIHZhciBjbHMgPSBjbGFzc2VzQnlJZFtqc29uLnR5cGVdO1xuICBpZiAoIWNscykgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcigoXCJObyBzZWxlY3Rpb24gdHlwZSBcIiArIChqc29uLnR5cGUpICsgXCIgZGVmaW5lZFwiKSkgfVxuICByZXR1cm4gY2xzLmZyb21KU09OKGRvYywganNvbilcbn07XG5cbi8vIDo6IChzdHJpbmcsIGNvbnN0cnVjdG9yPFNlbGVjdGlvbj4pXG4vLyBUbyBiZSBhYmxlIHRvIGRlc2VyaWFsaXplIHNlbGVjdGlvbnMgZnJvbSBKU09OLCBjdXN0b20gc2VsZWN0aW9uXG4vLyBjbGFzc2VzIG11c3QgcmVnaXN0ZXIgdGhlbXNlbHZlcyB3aXRoIGFuIElEIHN0cmluZywgc28gdGhhdCB0aGV5XG4vLyBjYW4gYmUgZGlzYW1iaWd1YXRlZC4gVHJ5IHRvIHBpY2sgc29tZXRoaW5nIHRoYXQncyB1bmxpa2VseSB0b1xuLy8gY2xhc2ggd2l0aCBjbGFzc2VzIGZyb20gb3RoZXIgbW9kdWxlcy5cblNlbGVjdGlvbi5qc29uSUQgPSBmdW5jdGlvbiBqc29uSUQgKGlkLCBzZWxlY3Rpb25DbGFzcykge1xuICBpZiAoaWQgaW4gY2xhc3Nlc0J5SWQpIHsgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJEdXBsaWNhdGUgdXNlIG9mIHNlbGVjdGlvbiBKU09OIElEIFwiICsgaWQpIH1cbiAgY2xhc3Nlc0J5SWRbaWRdID0gc2VsZWN0aW9uQ2xhc3M7XG4gIHNlbGVjdGlvbkNsYXNzLnByb3RvdHlwZS5qc29uSUQgPSBpZDtcbiAgcmV0dXJuIHNlbGVjdGlvbkNsYXNzXG59O1xuXG4vLyA6OiAoKSDihpIgU2VsZWN0aW9uQm9va21hcmtcbi8vIEdldCBhIFtib29rbWFya10oI3N0YXRlLlNlbGVjdGlvbkJvb2ttYXJrKSBmb3IgdGhpcyBzZWxlY3Rpb24sXG4vLyB3aGljaCBpcyBhIHZhbHVlIHRoYXQgY2FuIGJlIG1hcHBlZCB3aXRob3V0IGhhdmluZyBhY2Nlc3MgdG8gYVxuLy8gY3VycmVudCBkb2N1bWVudCwgYW5kIGxhdGVyIHJlc29sdmVkIHRvIGEgcmVhbCBzZWxlY3Rpb24gZm9yIGFcbi8vIGdpdmVuIGRvY3VtZW50IGFnYWluLiAoVGhpcyBpcyB1c2VkIG1vc3RseSBieSB0aGUgaGlzdG9yeSB0b1xuLy8gdHJhY2sgYW5kIHJlc3RvcmUgb2xkIHNlbGVjdGlvbnMuKSBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZlxuLy8gdGhpcyBtZXRob2QganVzdCBjb252ZXJ0cyB0aGUgc2VsZWN0aW9uIHRvIGEgdGV4dCBzZWxlY3Rpb24gYW5kXG4vLyByZXR1cm5zIHRoZSBib29rbWFyayBmb3IgdGhhdC5cblNlbGVjdGlvbi5wcm90b3R5cGUuZ2V0Qm9va21hcmsgPSBmdW5jdGlvbiBnZXRCb29rbWFyayAoKSB7XG4gIHJldHVybiBUZXh0U2VsZWN0aW9uLmJldHdlZW4odGhpcy4kYW5jaG9yLCB0aGlzLiRoZWFkKS5nZXRCb29rbWFyaygpXG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggU2VsZWN0aW9uLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbi8vIDo6IGJvb2xcbi8vIENvbnRyb2xzIHdoZXRoZXIsIHdoZW4gYSBzZWxlY3Rpb24gb2YgdGhpcyB0eXBlIGlzIGFjdGl2ZSBpbiB0aGVcbi8vIGJyb3dzZXIsIHRoZSBzZWxlY3RlZCByYW5nZSBzaG91bGQgYmUgdmlzaWJsZSB0byB0aGUgdXNlci4gRGVmYXVsdHNcbi8vIHRvIGB0cnVlYC5cblNlbGVjdGlvbi5wcm90b3R5cGUudmlzaWJsZSA9IHRydWU7XG5cbi8vIFNlbGVjdGlvbkJvb2ttYXJrOjogaW50ZXJmYWNlXG4vLyBBIGxpZ2h0d2VpZ2h0LCBkb2N1bWVudC1pbmRlcGVuZGVudCByZXByZXNlbnRhdGlvbiBvZiBhIHNlbGVjdGlvbi5cbi8vIFlvdSBjYW4gZGVmaW5lIGEgY3VzdG9tIGJvb2ttYXJrIHR5cGUgZm9yIGEgY3VzdG9tIHNlbGVjdGlvbiBjbGFzc1xuLy8gdG8gbWFrZSB0aGUgaGlzdG9yeSBoYW5kbGUgaXQgd2VsbC5cbi8vXG4vLyAgIG1hcDo6IChtYXBwaW5nOiBNYXBwaW5nKSDihpIgU2VsZWN0aW9uQm9va21hcmtcbi8vICAgTWFwIHRoZSBib29rbWFyayB0aHJvdWdoIGEgc2V0IG9mIGNoYW5nZXMuXG4vL1xuLy8gICByZXNvbHZlOjogKGRvYzogTm9kZSkg4oaSIFNlbGVjdGlvblxuLy8gICBSZXNvbHZlIHRoZSBib29rbWFyayB0byBhIHJlYWwgc2VsZWN0aW9uIGFnYWluLiBUaGlzIG1heSBuZWVkIHRvXG4vLyAgIGRvIHNvbWUgZXJyb3IgY2hlY2tpbmcgYW5kIG1heSBmYWxsIGJhY2sgdG8gYSBkZWZhdWx0ICh1c3VhbGx5XG4vLyAgIFtgVGV4dFNlbGVjdGlvbi5iZXR3ZWVuYF0oI3N0YXRlLlRleHRTZWxlY3Rpb25eYmV0d2VlbikpIGlmXG4vLyAgIG1hcHBpbmcgbWFkZSB0aGUgYm9va21hcmsgaW52YWxpZC5cblxuLy8gOjotIFJlcHJlc2VudHMgYSBzZWxlY3RlZCByYW5nZSBpbiBhIGRvY3VtZW50LlxudmFyIFNlbGVjdGlvblJhbmdlID0gZnVuY3Rpb24gU2VsZWN0aW9uUmFuZ2UoJGZyb20sICR0bykge1xuICAvLyA6OiBSZXNvbHZlZFBvc1xuICAvLyBUaGUgbG93ZXIgYm91bmQgb2YgdGhlIHJhbmdlLlxuICB0aGlzLiRmcm9tID0gJGZyb207XG4gIC8vIDo6IFJlc29sdmVkUG9zXG4gIC8vIFRoZSB1cHBlciBib3VuZCBvZiB0aGUgcmFuZ2UuXG4gIHRoaXMuJHRvID0gJHRvO1xufTtcblxuLy8gOjotIEEgdGV4dCBzZWxlY3Rpb24gcmVwcmVzZW50cyBhIGNsYXNzaWNhbCBlZGl0b3Igc2VsZWN0aW9uLCB3aXRoXG4vLyBhIGhlYWQgKHRoZSBtb3Zpbmcgc2lkZSkgYW5kIGFuY2hvciAoaW1tb2JpbGUgc2lkZSksIGJvdGggb2Ygd2hpY2hcbi8vIHBvaW50IGludG8gdGV4dGJsb2NrIG5vZGVzLiBJdCBjYW4gYmUgZW1wdHkgKGEgcmVndWxhciBjdXJzb3Jcbi8vIHBvc2l0aW9uKS5cbnZhciBUZXh0U2VsZWN0aW9uID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoU2VsZWN0aW9uKSB7XG4gIGZ1bmN0aW9uIFRleHRTZWxlY3Rpb24oJGFuY2hvciwgJGhlYWQpIHtcbiAgICBpZiAoICRoZWFkID09PSB2b2lkIDAgKSAkaGVhZCA9ICRhbmNob3I7XG5cbiAgICBTZWxlY3Rpb24uY2FsbCh0aGlzLCAkYW5jaG9yLCAkaGVhZCk7XG4gIH1cblxuICBpZiAoIFNlbGVjdGlvbiApIFRleHRTZWxlY3Rpb24uX19wcm90b19fID0gU2VsZWN0aW9uO1xuICBUZXh0U2VsZWN0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFNlbGVjdGlvbiAmJiBTZWxlY3Rpb24ucHJvdG90eXBlICk7XG4gIFRleHRTZWxlY3Rpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVGV4dFNlbGVjdGlvbjtcblxuICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzJDEgPSB7ICRjdXJzb3I6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuICAvLyA6OiA/UmVzb2x2ZWRQb3NcbiAgLy8gUmV0dXJucyBhIHJlc29sdmVkIHBvc2l0aW9uIGlmIHRoaXMgaXMgYSBjdXJzb3Igc2VsZWN0aW9uIChhblxuICAvLyBlbXB0eSB0ZXh0IHNlbGVjdGlvbiksIGFuZCBudWxsIG90aGVyd2lzZS5cbiAgcHJvdG90eXBlQWNjZXNzb3JzJDEuJGN1cnNvci5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLiRhbmNob3IucG9zID09IHRoaXMuJGhlYWQucG9zID8gdGhpcy4kaGVhZCA6IG51bGwgfTtcblxuICBUZXh0U2VsZWN0aW9uLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiBtYXAgKGRvYywgbWFwcGluZykge1xuICAgIHZhciAkaGVhZCA9IGRvYy5yZXNvbHZlKG1hcHBpbmcubWFwKHRoaXMuaGVhZCkpO1xuICAgIGlmICghJGhlYWQucGFyZW50LmlubGluZUNvbnRlbnQpIHsgcmV0dXJuIFNlbGVjdGlvbi5uZWFyKCRoZWFkKSB9XG4gICAgdmFyICRhbmNob3IgPSBkb2MucmVzb2x2ZShtYXBwaW5nLm1hcCh0aGlzLmFuY2hvcikpO1xuICAgIHJldHVybiBuZXcgVGV4dFNlbGVjdGlvbigkYW5jaG9yLnBhcmVudC5pbmxpbmVDb250ZW50ID8gJGFuY2hvciA6ICRoZWFkLCAkaGVhZClcbiAgfTtcblxuICBUZXh0U2VsZWN0aW9uLnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAodHIsIGNvbnRlbnQpIHtcbiAgICBpZiAoIGNvbnRlbnQgPT09IHZvaWQgMCApIGNvbnRlbnQgPSBTbGljZS5lbXB0eTtcblxuICAgIFNlbGVjdGlvbi5wcm90b3R5cGUucmVwbGFjZS5jYWxsKHRoaXMsIHRyLCBjb250ZW50KTtcbiAgICBpZiAoY29udGVudCA9PSBTbGljZS5lbXB0eSkge1xuICAgICAgdmFyIG1hcmtzID0gdGhpcy4kZnJvbS5tYXJrc0Fjcm9zcyh0aGlzLiR0byk7XG4gICAgICBpZiAobWFya3MpIHsgdHIuZW5zdXJlTWFya3MobWFya3MpOyB9XG4gICAgfVxuICB9O1xuXG4gIFRleHRTZWxlY3Rpb24ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG90aGVyKSB7XG4gICAgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgVGV4dFNlbGVjdGlvbiAmJiBvdGhlci5hbmNob3IgPT0gdGhpcy5hbmNob3IgJiYgb3RoZXIuaGVhZCA9PSB0aGlzLmhlYWRcbiAgfTtcblxuICBUZXh0U2VsZWN0aW9uLnByb3RvdHlwZS5nZXRCb29rbWFyayA9IGZ1bmN0aW9uIGdldEJvb2ttYXJrICgpIHtcbiAgICByZXR1cm4gbmV3IFRleHRCb29rbWFyayh0aGlzLmFuY2hvciwgdGhpcy5oZWFkKVxuICB9O1xuXG4gIFRleHRTZWxlY3Rpb24ucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gICAgcmV0dXJuIHt0eXBlOiBcInRleHRcIiwgYW5jaG9yOiB0aGlzLmFuY2hvciwgaGVhZDogdGhpcy5oZWFkfVxuICB9O1xuXG4gIFRleHRTZWxlY3Rpb24uZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTiAoZG9jLCBqc29uKSB7XG4gICAgaWYgKHR5cGVvZiBqc29uLmFuY2hvciAhPSBcIm51bWJlclwiIHx8IHR5cGVvZiBqc29uLmhlYWQgIT0gXCJudW1iZXJcIilcbiAgICAgIHsgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIGlucHV0IGZvciBUZXh0U2VsZWN0aW9uLmZyb21KU09OXCIpIH1cbiAgICByZXR1cm4gbmV3IFRleHRTZWxlY3Rpb24oZG9jLnJlc29sdmUoanNvbi5hbmNob3IpLCBkb2MucmVzb2x2ZShqc29uLmhlYWQpKVxuICB9O1xuXG4gIC8vIDo6IChOb2RlLCBudW1iZXIsID9udW1iZXIpIOKGkiBUZXh0U2VsZWN0aW9uXG4gIC8vIENyZWF0ZSBhIHRleHQgc2VsZWN0aW9uIGZyb20gbm9uLXJlc29sdmVkIHBvc2l0aW9ucy5cbiAgVGV4dFNlbGVjdGlvbi5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUgKGRvYywgYW5jaG9yLCBoZWFkKSB7XG4gICAgaWYgKCBoZWFkID09PSB2b2lkIDAgKSBoZWFkID0gYW5jaG9yO1xuXG4gICAgdmFyICRhbmNob3IgPSBkb2MucmVzb2x2ZShhbmNob3IpO1xuICAgIHJldHVybiBuZXcgdGhpcygkYW5jaG9yLCBoZWFkID09IGFuY2hvciA/ICRhbmNob3IgOiBkb2MucmVzb2x2ZShoZWFkKSlcbiAgfTtcblxuICAvLyA6OiAoUmVzb2x2ZWRQb3MsIFJlc29sdmVkUG9zLCA/bnVtYmVyKSDihpIgU2VsZWN0aW9uXG4gIC8vIFJldHVybiBhIHRleHQgc2VsZWN0aW9uIHRoYXQgc3BhbnMgdGhlIGdpdmVuIHBvc2l0aW9ucyBvciwgaWZcbiAgLy8gdGhleSBhcmVuJ3QgdGV4dCBwb3NpdGlvbnMsIGZpbmQgYSB0ZXh0IHNlbGVjdGlvbiBuZWFyIHRoZW0uXG4gIC8vIGBiaWFzYCBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIG1ldGhvZCBzZWFyY2hlcyBmb3J3YXJkIChkZWZhdWx0KVxuICAvLyBvciBiYWNrd2FyZHMgKG5lZ2F0aXZlIG51bWJlcikgZmlyc3QuIFdpbGwgZmFsbCBiYWNrIHRvIGNhbGxpbmdcbiAgLy8gW2BTZWxlY3Rpb24ubmVhcmBdKCNzdGF0ZS5TZWxlY3Rpb25ebmVhcikgd2hlbiB0aGUgZG9jdW1lbnRcbiAgLy8gZG9lc24ndCBjb250YWluIGEgdmFsaWQgdGV4dCBwb3NpdGlvbi5cbiAgVGV4dFNlbGVjdGlvbi5iZXR3ZWVuID0gZnVuY3Rpb24gYmV0d2VlbiAoJGFuY2hvciwgJGhlYWQsIGJpYXMpIHtcbiAgICB2YXIgZFBvcyA9ICRhbmNob3IucG9zIC0gJGhlYWQucG9zO1xuICAgIGlmICghYmlhcyB8fCBkUG9zKSB7IGJpYXMgPSBkUG9zID49IDAgPyAxIDogLTE7IH1cbiAgICBpZiAoISRoZWFkLnBhcmVudC5pbmxpbmVDb250ZW50KSB7XG4gICAgICB2YXIgZm91bmQgPSBTZWxlY3Rpb24uZmluZEZyb20oJGhlYWQsIGJpYXMsIHRydWUpIHx8IFNlbGVjdGlvbi5maW5kRnJvbSgkaGVhZCwgLWJpYXMsIHRydWUpO1xuICAgICAgaWYgKGZvdW5kKSB7ICRoZWFkID0gZm91bmQuJGhlYWQ7IH1cbiAgICAgIGVsc2UgeyByZXR1cm4gU2VsZWN0aW9uLm5lYXIoJGhlYWQsIGJpYXMpIH1cbiAgICB9XG4gICAgaWYgKCEkYW5jaG9yLnBhcmVudC5pbmxpbmVDb250ZW50KSB7XG4gICAgICBpZiAoZFBvcyA9PSAwKSB7XG4gICAgICAgICRhbmNob3IgPSAkaGVhZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRhbmNob3IgPSAoU2VsZWN0aW9uLmZpbmRGcm9tKCRhbmNob3IsIC1iaWFzLCB0cnVlKSB8fCBTZWxlY3Rpb24uZmluZEZyb20oJGFuY2hvciwgYmlhcywgdHJ1ZSkpLiRhbmNob3I7XG4gICAgICAgIGlmICgoJGFuY2hvci5wb3MgPCAkaGVhZC5wb3MpICE9IChkUG9zIDwgMCkpIHsgJGFuY2hvciA9ICRoZWFkOyB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgVGV4dFNlbGVjdGlvbigkYW5jaG9yLCAkaGVhZClcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggVGV4dFNlbGVjdGlvbi5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQxICk7XG5cbiAgcmV0dXJuIFRleHRTZWxlY3Rpb247XG59KFNlbGVjdGlvbikpO1xuXG5TZWxlY3Rpb24uanNvbklEKFwidGV4dFwiLCBUZXh0U2VsZWN0aW9uKTtcblxudmFyIFRleHRCb29rbWFyayA9IGZ1bmN0aW9uIFRleHRCb29rbWFyayhhbmNob3IsIGhlYWQpIHtcbiAgdGhpcy5hbmNob3IgPSBhbmNob3I7XG4gIHRoaXMuaGVhZCA9IGhlYWQ7XG59O1xuVGV4dEJvb2ttYXJrLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiBtYXAgKG1hcHBpbmcpIHtcbiAgcmV0dXJuIG5ldyBUZXh0Qm9va21hcmsobWFwcGluZy5tYXAodGhpcy5hbmNob3IpLCBtYXBwaW5nLm1hcCh0aGlzLmhlYWQpKVxufTtcblRleHRCb29rbWFyay5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUgKGRvYykge1xuICByZXR1cm4gVGV4dFNlbGVjdGlvbi5iZXR3ZWVuKGRvYy5yZXNvbHZlKHRoaXMuYW5jaG9yKSwgZG9jLnJlc29sdmUodGhpcy5oZWFkKSlcbn07XG5cbi8vIDo6LSBBIG5vZGUgc2VsZWN0aW9uIGlzIGEgc2VsZWN0aW9uIHRoYXQgcG9pbnRzIGF0IGEgc2luZ2xlIG5vZGUuXG4vLyBBbGwgbm9kZXMgbWFya2VkIFtzZWxlY3RhYmxlXSgjbW9kZWwuTm9kZVNwZWMuc2VsZWN0YWJsZSkgY2FuIGJlXG4vLyB0aGUgdGFyZ2V0IG9mIGEgbm9kZSBzZWxlY3Rpb24uIEluIHN1Y2ggYSBzZWxlY3Rpb24sIGBmcm9tYCBhbmRcbi8vIGB0b2AgcG9pbnQgZGlyZWN0bHkgYmVmb3JlIGFuZCBhZnRlciB0aGUgc2VsZWN0ZWQgbm9kZSwgYGFuY2hvcmBcbi8vIGVxdWFscyBgZnJvbWAsIGFuZCBgaGVhZGAgZXF1YWxzIGB0b2AuLlxudmFyIE5vZGVTZWxlY3Rpb24gPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChTZWxlY3Rpb24pIHtcbiAgZnVuY3Rpb24gTm9kZVNlbGVjdGlvbigkcG9zKSB7XG4gICAgdmFyIG5vZGUgPSAkcG9zLm5vZGVBZnRlcjtcbiAgICB2YXIgJGVuZCA9ICRwb3Mubm9kZSgwKS5yZXNvbHZlKCRwb3MucG9zICsgbm9kZS5ub2RlU2l6ZSk7XG4gICAgU2VsZWN0aW9uLmNhbGwodGhpcywgJHBvcywgJGVuZCk7XG4gICAgLy8gOjogTm9kZSBUaGUgc2VsZWN0ZWQgbm9kZS5cbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuICB9XG5cbiAgaWYgKCBTZWxlY3Rpb24gKSBOb2RlU2VsZWN0aW9uLl9fcHJvdG9fXyA9IFNlbGVjdGlvbjtcbiAgTm9kZVNlbGVjdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTZWxlY3Rpb24gJiYgU2VsZWN0aW9uLnByb3RvdHlwZSApO1xuICBOb2RlU2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE5vZGVTZWxlY3Rpb247XG5cbiAgTm9kZVNlbGVjdGlvbi5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gbWFwIChkb2MsIG1hcHBpbmcpIHtcbiAgICB2YXIgcmVmID0gbWFwcGluZy5tYXBSZXN1bHQodGhpcy5hbmNob3IpO1xuICAgIHZhciBkZWxldGVkID0gcmVmLmRlbGV0ZWQ7XG4gICAgdmFyIHBvcyA9IHJlZi5wb3M7XG4gICAgdmFyICRwb3MgPSBkb2MucmVzb2x2ZShwb3MpO1xuICAgIGlmIChkZWxldGVkKSB7IHJldHVybiBTZWxlY3Rpb24ubmVhcigkcG9zKSB9XG4gICAgcmV0dXJuIG5ldyBOb2RlU2VsZWN0aW9uKCRwb3MpXG4gIH07XG5cbiAgTm9kZVNlbGVjdGlvbi5wcm90b3R5cGUuY29udGVudCA9IGZ1bmN0aW9uIGNvbnRlbnQgKCkge1xuICAgIHJldHVybiBuZXcgU2xpY2UoRnJhZ21lbnQuZnJvbSh0aGlzLm5vZGUpLCAwLCAwKVxuICB9O1xuXG4gIE5vZGVTZWxlY3Rpb24ucHJvdG90eXBlLmVxID0gZnVuY3Rpb24gZXEgKG90aGVyKSB7XG4gICAgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgTm9kZVNlbGVjdGlvbiAmJiBvdGhlci5hbmNob3IgPT0gdGhpcy5hbmNob3JcbiAgfTtcblxuICBOb2RlU2VsZWN0aW9uLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHJldHVybiB7dHlwZTogXCJub2RlXCIsIGFuY2hvcjogdGhpcy5hbmNob3J9XG4gIH07XG5cbiAgTm9kZVNlbGVjdGlvbi5wcm90b3R5cGUuZ2V0Qm9va21hcmsgPSBmdW5jdGlvbiBnZXRCb29rbWFyayAoKSB7IHJldHVybiBuZXcgTm9kZUJvb2ttYXJrKHRoaXMuYW5jaG9yKSB9O1xuXG4gIE5vZGVTZWxlY3Rpb24uZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTiAoZG9jLCBqc29uKSB7XG4gICAgaWYgKHR5cGVvZiBqc29uLmFuY2hvciAhPSBcIm51bWJlclwiKVxuICAgICAgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgaW5wdXQgZm9yIE5vZGVTZWxlY3Rpb24uZnJvbUpTT05cIikgfVxuICAgIHJldHVybiBuZXcgTm9kZVNlbGVjdGlvbihkb2MucmVzb2x2ZShqc29uLmFuY2hvcikpXG4gIH07XG5cbiAgLy8gOjogKE5vZGUsIG51bWJlcikg4oaSIE5vZGVTZWxlY3Rpb25cbiAgLy8gQ3JlYXRlIGEgbm9kZSBzZWxlY3Rpb24gZnJvbSBub24tcmVzb2x2ZWQgcG9zaXRpb25zLlxuICBOb2RlU2VsZWN0aW9uLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZSAoZG9jLCBmcm9tKSB7XG4gICAgcmV0dXJuIG5ldyB0aGlzKGRvYy5yZXNvbHZlKGZyb20pKVxuICB9O1xuXG4gIC8vIDo6IChOb2RlKSDihpIgYm9vbFxuICAvLyBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGdpdmVuIG5vZGUgbWF5IGJlIHNlbGVjdGVkIGFzIGEgbm9kZVxuICAvLyBzZWxlY3Rpb24uXG4gIE5vZGVTZWxlY3Rpb24uaXNTZWxlY3RhYmxlID0gZnVuY3Rpb24gaXNTZWxlY3RhYmxlIChub2RlKSB7XG4gICAgcmV0dXJuICFub2RlLmlzVGV4dCAmJiBub2RlLnR5cGUuc3BlYy5zZWxlY3RhYmxlICE9PSBmYWxzZVxuICB9O1xuXG4gIHJldHVybiBOb2RlU2VsZWN0aW9uO1xufShTZWxlY3Rpb24pKTtcblxuTm9kZVNlbGVjdGlvbi5wcm90b3R5cGUudmlzaWJsZSA9IGZhbHNlO1xuXG5TZWxlY3Rpb24uanNvbklEKFwibm9kZVwiLCBOb2RlU2VsZWN0aW9uKTtcblxudmFyIE5vZGVCb29rbWFyayA9IGZ1bmN0aW9uIE5vZGVCb29rbWFyayhhbmNob3IpIHtcbiAgdGhpcy5hbmNob3IgPSBhbmNob3I7XG59O1xuTm9kZUJvb2ttYXJrLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiBtYXAgKG1hcHBpbmcpIHtcbiAgdmFyIHJlZiA9IG1hcHBpbmcubWFwUmVzdWx0KHRoaXMuYW5jaG9yKTtcbiAgICB2YXIgZGVsZXRlZCA9IHJlZi5kZWxldGVkO1xuICAgIHZhciBwb3MgPSByZWYucG9zO1xuICByZXR1cm4gZGVsZXRlZCA/IG5ldyBUZXh0Qm9va21hcmsocG9zLCBwb3MpIDogbmV3IE5vZGVCb29rbWFyayhwb3MpXG59O1xuTm9kZUJvb2ttYXJrLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSAoZG9jKSB7XG4gIHZhciAkcG9zID0gZG9jLnJlc29sdmUodGhpcy5hbmNob3IpLCBub2RlID0gJHBvcy5ub2RlQWZ0ZXI7XG4gIGlmIChub2RlICYmIE5vZGVTZWxlY3Rpb24uaXNTZWxlY3RhYmxlKG5vZGUpKSB7IHJldHVybiBuZXcgTm9kZVNlbGVjdGlvbigkcG9zKSB9XG4gIHJldHVybiBTZWxlY3Rpb24ubmVhcigkcG9zKVxufTtcblxuLy8gOjotIEEgc2VsZWN0aW9uIHR5cGUgdGhhdCByZXByZXNlbnRzIHNlbGVjdGluZyB0aGUgd2hvbGUgZG9jdW1lbnRcbi8vICh3aGljaCBjYW4gbm90IG5lY2Vzc2FyaWx5IGJlIGV4cHJlc3NlZCB3aXRoIGEgdGV4dCBzZWxlY3Rpb24sIHdoZW5cbi8vIHRoZXJlIGFyZSBmb3IgZXhhbXBsZSBsZWFmIGJsb2NrIG5vZGVzIGF0IHRoZSBzdGFydCBvciBlbmQgb2YgdGhlXG4vLyBkb2N1bWVudCkuXG52YXIgQWxsU2VsZWN0aW9uID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoU2VsZWN0aW9uKSB7XG4gIGZ1bmN0aW9uIEFsbFNlbGVjdGlvbihkb2MpIHtcbiAgICBTZWxlY3Rpb24uY2FsbCh0aGlzLCBkb2MucmVzb2x2ZSgwKSwgZG9jLnJlc29sdmUoZG9jLmNvbnRlbnQuc2l6ZSkpO1xuICB9XG5cbiAgaWYgKCBTZWxlY3Rpb24gKSBBbGxTZWxlY3Rpb24uX19wcm90b19fID0gU2VsZWN0aW9uO1xuICBBbGxTZWxlY3Rpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggU2VsZWN0aW9uICYmIFNlbGVjdGlvbi5wcm90b3R5cGUgKTtcbiAgQWxsU2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFsbFNlbGVjdGlvbjtcblxuICBBbGxTZWxlY3Rpb24ucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlICh0ciwgY29udGVudCkge1xuICAgIGlmICggY29udGVudCA9PT0gdm9pZCAwICkgY29udGVudCA9IFNsaWNlLmVtcHR5O1xuXG4gICAgaWYgKGNvbnRlbnQgPT0gU2xpY2UuZW1wdHkpIHtcbiAgICAgIHRyLmRlbGV0ZSgwLCB0ci5kb2MuY29udGVudC5zaXplKTtcbiAgICAgIHZhciBzZWwgPSBTZWxlY3Rpb24uYXRTdGFydCh0ci5kb2MpO1xuICAgICAgaWYgKCFzZWwuZXEodHIuc2VsZWN0aW9uKSkgeyB0ci5zZXRTZWxlY3Rpb24oc2VsKTsgfVxuICAgIH0gZWxzZSB7XG4gICAgICBTZWxlY3Rpb24ucHJvdG90eXBlLnJlcGxhY2UuY2FsbCh0aGlzLCB0ciwgY29udGVudCk7XG4gICAgfVxuICB9O1xuXG4gIEFsbFNlbGVjdGlvbi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHsgcmV0dXJuIHt0eXBlOiBcImFsbFwifSB9O1xuXG4gIEFsbFNlbGVjdGlvbi5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OIChkb2MpIHsgcmV0dXJuIG5ldyBBbGxTZWxlY3Rpb24oZG9jKSB9O1xuXG4gIEFsbFNlbGVjdGlvbi5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gbWFwIChkb2MpIHsgcmV0dXJuIG5ldyBBbGxTZWxlY3Rpb24oZG9jKSB9O1xuXG4gIEFsbFNlbGVjdGlvbi5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSAob3RoZXIpIHsgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgQWxsU2VsZWN0aW9uIH07XG5cbiAgQWxsU2VsZWN0aW9uLnByb3RvdHlwZS5nZXRCb29rbWFyayA9IGZ1bmN0aW9uIGdldEJvb2ttYXJrICgpIHsgcmV0dXJuIEFsbEJvb2ttYXJrIH07XG5cbiAgcmV0dXJuIEFsbFNlbGVjdGlvbjtcbn0oU2VsZWN0aW9uKSk7XG5cblNlbGVjdGlvbi5qc29uSUQoXCJhbGxcIiwgQWxsU2VsZWN0aW9uKTtcblxudmFyIEFsbEJvb2ttYXJrID0ge1xuICBtYXA6IGZ1bmN0aW9uIG1hcCgpIHsgcmV0dXJuIHRoaXMgfSxcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShkb2MpIHsgcmV0dXJuIG5ldyBBbGxTZWxlY3Rpb24oZG9jKSB9XG59O1xuXG4vLyBGSVhNRSB3ZSdsbCBuZWVkIHNvbWUgYXdhcmVuZXNzIG9mIHRleHQgZGlyZWN0aW9uIHdoZW4gc2Nhbm5pbmcgZm9yIHNlbGVjdGlvbnNcblxuLy8gVHJ5IHRvIGZpbmQgYSBzZWxlY3Rpb24gaW5zaWRlIHRoZSBnaXZlbiBub2RlLiBgcG9zYCBwb2ludHMgYXQgdGhlXG4vLyBwb3NpdGlvbiB3aGVyZSB0aGUgc2VhcmNoIHN0YXJ0cy4gV2hlbiBgdGV4dGAgaXMgdHJ1ZSwgb25seSByZXR1cm5cbi8vIHRleHQgc2VsZWN0aW9ucy5cbmZ1bmN0aW9uIGZpbmRTZWxlY3Rpb25Jbihkb2MsIG5vZGUsIHBvcywgaW5kZXgsIGRpciwgdGV4dCkge1xuICBpZiAobm9kZS5pbmxpbmVDb250ZW50KSB7IHJldHVybiBUZXh0U2VsZWN0aW9uLmNyZWF0ZShkb2MsIHBvcykgfVxuICBmb3IgKHZhciBpID0gaW5kZXggLSAoZGlyID4gMCA/IDAgOiAxKTsgZGlyID4gMCA/IGkgPCBub2RlLmNoaWxkQ291bnQgOiBpID49IDA7IGkgKz0gZGlyKSB7XG4gICAgdmFyIGNoaWxkID0gbm9kZS5jaGlsZChpKTtcbiAgICBpZiAoIWNoaWxkLmlzQXRvbSkge1xuICAgICAgdmFyIGlubmVyID0gZmluZFNlbGVjdGlvbkluKGRvYywgY2hpbGQsIHBvcyArIGRpciwgZGlyIDwgMCA/IGNoaWxkLmNoaWxkQ291bnQgOiAwLCBkaXIsIHRleHQpO1xuICAgICAgaWYgKGlubmVyKSB7IHJldHVybiBpbm5lciB9XG4gICAgfSBlbHNlIGlmICghdGV4dCAmJiBOb2RlU2VsZWN0aW9uLmlzU2VsZWN0YWJsZShjaGlsZCkpIHtcbiAgICAgIHJldHVybiBOb2RlU2VsZWN0aW9uLmNyZWF0ZShkb2MsIHBvcyAtIChkaXIgPCAwID8gY2hpbGQubm9kZVNpemUgOiAwKSlcbiAgICB9XG4gICAgcG9zICs9IGNoaWxkLm5vZGVTaXplICogZGlyO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvblRvSW5zZXJ0aW9uRW5kKHRyLCBzdGFydExlbiwgYmlhcykge1xuICB2YXIgbGFzdCA9IHRyLnN0ZXBzLmxlbmd0aCAtIDE7XG4gIGlmIChsYXN0IDwgc3RhcnRMZW4pIHsgcmV0dXJuIH1cbiAgdmFyIHN0ZXAgPSB0ci5zdGVwc1tsYXN0XTtcbiAgaWYgKCEoc3RlcCBpbnN0YW5jZW9mIFJlcGxhY2VTdGVwIHx8IHN0ZXAgaW5zdGFuY2VvZiBSZXBsYWNlQXJvdW5kU3RlcCkpIHsgcmV0dXJuIH1cbiAgdmFyIG1hcCA9IHRyLm1hcHBpbmcubWFwc1tsYXN0XSwgZW5kO1xuICBtYXAuZm9yRWFjaChmdW5jdGlvbiAoX2Zyb20sIF90bywgX25ld0Zyb20sIG5ld1RvKSB7IGlmIChlbmQgPT0gbnVsbCkgeyBlbmQgPSBuZXdUbzsgfSB9KTtcbiAgdHIuc2V0U2VsZWN0aW9uKFNlbGVjdGlvbi5uZWFyKHRyLmRvYy5yZXNvbHZlKGVuZCksIGJpYXMpKTtcbn1cblxudmFyIFVQREFURURfU0VMID0gMSwgVVBEQVRFRF9NQVJLUyA9IDIsIFVQREFURURfU0NST0xMID0gNDtcblxuLy8gOjotIEFuIGVkaXRvciBzdGF0ZSB0cmFuc2FjdGlvbiwgd2hpY2ggY2FuIGJlIGFwcGxpZWQgdG8gYSBzdGF0ZSB0b1xuLy8gY3JlYXRlIGFuIHVwZGF0ZWQgc3RhdGUuIFVzZVxuLy8gW2BFZGl0b3JTdGF0ZS50cmBdKCNzdGF0ZS5FZGl0b3JTdGF0ZS50cikgdG8gY3JlYXRlIGFuIGluc3RhbmNlLlxuLy9cbi8vIFRyYW5zYWN0aW9ucyB0cmFjayBjaGFuZ2VzIHRvIHRoZSBkb2N1bWVudCAodGhleSBhcmUgYSBzdWJjbGFzcyBvZlxuLy8gW2BUcmFuc2Zvcm1gXSgjdHJhbnNmb3JtLlRyYW5zZm9ybSkpLCBidXQgYWxzbyBvdGhlciBzdGF0ZSBjaGFuZ2VzLFxuLy8gbGlrZSBzZWxlY3Rpb24gdXBkYXRlcyBhbmQgYWRqdXN0bWVudHMgb2YgdGhlIHNldCBvZiBbc3RvcmVkXG4vLyBtYXJrc10oI3N0YXRlLkVkaXRvclN0YXRlLnN0b3JlZE1hcmtzKS4gSW4gYWRkaXRpb24sIHlvdSBjYW4gc3RvcmVcbi8vIG1ldGFkYXRhIHByb3BlcnRpZXMgaW4gYSB0cmFuc2FjdGlvbiwgd2hpY2ggYXJlIGV4dHJhIHBpZWNlcyBvZlxuLy8gaW5mb3JtYXRpb24gdGhhdCBjbGllbnQgY29kZSBvciBwbHVnaW5zIGNhbiB1c2UgdG8gZGVzY3JpYmUgd2hhdCBhXG4vLyB0cmFuc2FjaW9uIHJlcHJlc2VudHMsIHNvIHRoYXQgdGhleSBjYW4gdXBkYXRlIHRoZWlyIFtvd25cbi8vIHN0YXRlXSgjc3RhdGUuU3RhdGVGaWVsZCkgYWNjb3JkaW5nbHkuXG4vL1xuLy8gVGhlIFtlZGl0b3Igdmlld10oI3ZpZXcuRWRpdG9yVmlldykgdXNlcyBhIGZldyBtZXRhZGF0YSBwcm9wZXJ0aWVzOlxuLy8gaXQgd2lsbCBhdHRhY2ggYSBwcm9wZXJ0eSBgXCJwb2ludGVyXCJgIHdpdGggdGhlIHZhbHVlIGB0cnVlYCB0b1xuLy8gc2VsZWN0aW9uIHRyYW5zYWN0aW9ucyBkaXJlY3RseSBjYXVzZWQgYnkgbW91c2Ugb3IgdG91Y2ggaW5wdXQsIGFuZFxuLy8gYSBgXCJ1aUV2ZW50XCJgIHByb3BlcnR5IG9mIHRoYXQgbWF5IGJlIGBcInBhc3RlXCJgLCBgXCJjdXRcImAsIG9yIGBcImRyb3BcImAuXG52YXIgVHJhbnNhY3Rpb24gPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChUcmFuc2Zvcm0pIHtcbiAgZnVuY3Rpb24gVHJhbnNhY3Rpb24oc3RhdGUpIHtcbiAgICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCBzdGF0ZS5kb2MpO1xuICAgIC8vIDo6IG51bWJlclxuICAgIC8vIFRoZSB0aW1lc3RhbXAgYXNzb2NpYXRlZCB3aXRoIHRoaXMgdHJhbnNhY3Rpb24sIGluIHRoZSBzYW1lXG4gICAgLy8gZm9ybWF0IGFzIGBEYXRlLm5vdygpYC5cbiAgICB0aGlzLnRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHRoaXMuY3VyU2VsZWN0aW9uID0gc3RhdGUuc2VsZWN0aW9uO1xuICAgIC8vIFRoZSBzdGVwIGNvdW50IGZvciB3aGljaCB0aGUgY3VycmVudCBzZWxlY3Rpb24gaXMgdmFsaWQuXG4gICAgdGhpcy5jdXJTZWxlY3Rpb25Gb3IgPSAwO1xuICAgIC8vIDo6ID9bTWFya11cbiAgICAvLyBUaGUgc3RvcmVkIG1hcmtzIHNldCBieSB0aGlzIHRyYW5zYWN0aW9uLCBpZiBhbnkuXG4gICAgdGhpcy5zdG9yZWRNYXJrcyA9IHN0YXRlLnN0b3JlZE1hcmtzO1xuICAgIC8vIEJpdGZpZWxkIHRvIHRyYWNrIHdoaWNoIGFzcGVjdHMgb2YgdGhlIHN0YXRlIHdlcmUgdXBkYXRlZCBieVxuICAgIC8vIHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgdGhpcy51cGRhdGVkID0gMDtcbiAgICAvLyBPYmplY3QgdXNlZCB0byBzdG9yZSBtZXRhZGF0YSBwcm9wZXJ0aWVzIGZvciB0aGUgdHJhbnNhY3Rpb24uXG4gICAgdGhpcy5tZXRhID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuXG4gIGlmICggVHJhbnNmb3JtICkgVHJhbnNhY3Rpb24uX19wcm90b19fID0gVHJhbnNmb3JtO1xuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBUcmFuc2Zvcm0gJiYgVHJhbnNmb3JtLnByb3RvdHlwZSApO1xuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUcmFuc2FjdGlvbjtcblxuICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBzZWxlY3Rpb246IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sc2VsZWN0aW9uU2V0OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHN0b3JlZE1hcmtzU2V0OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGlzR2VuZXJpYzogeyBjb25maWd1cmFibGU6IHRydWUgfSxzY3JvbGxlZEludG9WaWV3OiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbiAgLy8gOjogU2VsZWN0aW9uXG4gIC8vIFRoZSB0cmFuc2FjdGlvbidzIGN1cnJlbnQgc2VsZWN0aW9uLiBUaGlzIGRlZmF1bHRzIHRvIHRoZSBlZGl0b3JcbiAgLy8gc2VsZWN0aW9uIFttYXBwZWRdKCNzdGF0ZS5TZWxlY3Rpb24ubWFwKSB0aHJvdWdoIHRoZSBzdGVwcyBpbiB0aGVcbiAgLy8gdHJhbnNhY3Rpb24sIGJ1dCBjYW4gYmUgb3ZlcndyaXR0ZW4gd2l0aFxuICAvLyBbYHNldFNlbGVjdGlvbmBdKCNzdGF0ZS5UcmFuc2FjdGlvbi5zZXRTZWxlY3Rpb24pLlxuICBwcm90b3R5cGVBY2Nlc3NvcnMuc2VsZWN0aW9uLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5jdXJTZWxlY3Rpb25Gb3IgPCB0aGlzLnN0ZXBzLmxlbmd0aCkge1xuICAgICAgdGhpcy5jdXJTZWxlY3Rpb24gPSB0aGlzLmN1clNlbGVjdGlvbi5tYXAodGhpcy5kb2MsIHRoaXMubWFwcGluZy5zbGljZSh0aGlzLmN1clNlbGVjdGlvbkZvcikpO1xuICAgICAgdGhpcy5jdXJTZWxlY3Rpb25Gb3IgPSB0aGlzLnN0ZXBzLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY3VyU2VsZWN0aW9uXG4gIH07XG5cbiAgLy8gOjogKFNlbGVjdGlvbikg4oaSIFRyYW5zYWN0aW9uXG4gIC8vIFVwZGF0ZSB0aGUgdHJhbnNhY3Rpb24ncyBjdXJyZW50IHNlbGVjdGlvbi4gV2lsbCBkZXRlcm1pbmUgdGhlXG4gIC8vIHNlbGVjdGlvbiB0aGF0IHRoZSBlZGl0b3IgZ2V0cyB3aGVuIHRoZSB0cmFuc2FjdGlvbiBpcyBhcHBsaWVkLlxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUuc2V0U2VsZWN0aW9uID0gZnVuY3Rpb24gc2V0U2VsZWN0aW9uIChzZWxlY3Rpb24pIHtcbiAgICBpZiAoc2VsZWN0aW9uLiRmcm9tLmRvYyAhPSB0aGlzLmRvYylcbiAgICAgIHsgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJTZWxlY3Rpb24gcGFzc2VkIHRvIHNldFNlbGVjdGlvbiBtdXN0IHBvaW50IGF0IHRoZSBjdXJyZW50IGRvY3VtZW50XCIpIH1cbiAgICB0aGlzLmN1clNlbGVjdGlvbiA9IHNlbGVjdGlvbjtcbiAgICB0aGlzLmN1clNlbGVjdGlvbkZvciA9IHRoaXMuc3RlcHMubGVuZ3RoO1xuICAgIHRoaXMudXBkYXRlZCA9ICh0aGlzLnVwZGF0ZWQgfCBVUERBVEVEX1NFTCkgJiB+VVBEQVRFRF9NQVJLUztcbiAgICB0aGlzLnN0b3JlZE1hcmtzID0gbnVsbDtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xuXG4gIC8vIDo6IGJvb2xcbiAgLy8gV2hldGhlciB0aGUgc2VsZWN0aW9uIHdhcyBleHBsaWNpdGx5IHVwZGF0ZWQgYnkgdGhpcyB0cmFuc2FjdGlvbi5cbiAgcHJvdG90eXBlQWNjZXNzb3JzLnNlbGVjdGlvblNldC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLnVwZGF0ZWQgJiBVUERBVEVEX1NFTCkgPiAwXG4gIH07XG5cbiAgLy8gOjogKD9bTWFya10pIOKGkiBUcmFuc2FjdGlvblxuICAvLyBTZXQgdGhlIGN1cnJlbnQgc3RvcmVkIG1hcmtzLlxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUuc2V0U3RvcmVkTWFya3MgPSBmdW5jdGlvbiBzZXRTdG9yZWRNYXJrcyAobWFya3MpIHtcbiAgICB0aGlzLnN0b3JlZE1hcmtzID0gbWFya3M7XG4gICAgdGhpcy51cGRhdGVkIHw9IFVQREFURURfTUFSS1M7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcblxuICAvLyA6OiAoW01hcmtdKSDihpIgVHJhbnNhY3Rpb25cbiAgLy8gTWFrZSBzdXJlIHRoZSBjdXJyZW50IHN0b3JlZCBtYXJrcyBvciwgaWYgdGhhdCBpcyBudWxsLCB0aGUgbWFya3NcbiAgLy8gYXQgdGhlIHNlbGVjdGlvbiwgbWF0Y2ggdGhlIGdpdmVuIHNldCBvZiBtYXJrcy4gRG9lcyBub3RoaW5nIGlmXG4gIC8vIHRoaXMgaXMgYWxyZWFkeSB0aGUgY2FzZS5cbiAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLmVuc3VyZU1hcmtzID0gZnVuY3Rpb24gZW5zdXJlTWFya3MgKG1hcmtzKSB7XG4gICAgaWYgKCFNYXJrLnNhbWVTZXQodGhpcy5zdG9yZWRNYXJrcyB8fCB0aGlzLnNlbGVjdGlvbi4kZnJvbS5tYXJrcygpLCBtYXJrcykpXG4gICAgICB7IHRoaXMuc2V0U3RvcmVkTWFya3MobWFya3MpOyB9XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcblxuICAvLyA6OiAoTWFyaykg4oaSIFRyYW5zYWN0aW9uXG4gIC8vIEFkZCBhIG1hcmsgdG8gdGhlIHNldCBvZiBzdG9yZWQgbWFya3MuXG4gIFRyYW5zYWN0aW9uLnByb3RvdHlwZS5hZGRTdG9yZWRNYXJrID0gZnVuY3Rpb24gYWRkU3RvcmVkTWFyayAobWFyaykge1xuICAgIHJldHVybiB0aGlzLmVuc3VyZU1hcmtzKG1hcmsuYWRkVG9TZXQodGhpcy5zdG9yZWRNYXJrcyB8fCB0aGlzLnNlbGVjdGlvbi4kaGVhZC5tYXJrcygpKSlcbiAgfTtcblxuICAvLyA6OiAodW5pb248TWFyaywgTWFya1R5cGU+KSDihpIgVHJhbnNhY3Rpb25cbiAgLy8gUmVtb3ZlIGEgbWFyayBvciBtYXJrIHR5cGUgZnJvbSB0aGUgc2V0IG9mIHN0b3JlZCBtYXJrcy5cbiAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0b3JlZE1hcmsgPSBmdW5jdGlvbiByZW1vdmVTdG9yZWRNYXJrIChtYXJrKSB7XG4gICAgcmV0dXJuIHRoaXMuZW5zdXJlTWFya3MobWFyay5yZW1vdmVGcm9tU2V0KHRoaXMuc3RvcmVkTWFya3MgfHwgdGhpcy5zZWxlY3Rpb24uJGhlYWQubWFya3MoKSkpXG4gIH07XG5cbiAgLy8gOjogYm9vbFxuICAvLyBXaGV0aGVyIHRoZSBzdG9yZWQgbWFya3Mgd2VyZSBleHBsaWNpdGx5IHNldCBmb3IgdGhpcyB0cmFuc2FjdGlvbi5cbiAgcHJvdG90eXBlQWNjZXNzb3JzLnN0b3JlZE1hcmtzU2V0LmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMudXBkYXRlZCAmIFVQREFURURfTUFSS1MpID4gMFxuICB9O1xuXG4gIFRyYW5zYWN0aW9uLnByb3RvdHlwZS5hZGRTdGVwID0gZnVuY3Rpb24gYWRkU3RlcCAoc3RlcCwgZG9jKSB7XG4gICAgVHJhbnNmb3JtLnByb3RvdHlwZS5hZGRTdGVwLmNhbGwodGhpcywgc3RlcCwgZG9jKTtcbiAgICB0aGlzLnVwZGF0ZWQgPSB0aGlzLnVwZGF0ZWQgJiB+VVBEQVRFRF9NQVJLUztcbiAgICB0aGlzLnN0b3JlZE1hcmtzID0gbnVsbDtcbiAgfTtcblxuICAvLyA6OiAobnVtYmVyKSDihpIgVHJhbnNhY3Rpb25cbiAgLy8gVXBkYXRlIHRoZSB0aW1lc3RhbXAgZm9yIHRoZSB0cmFuc2FjdGlvbi5cbiAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLnNldFRpbWUgPSBmdW5jdGlvbiBzZXRUaW1lICh0aW1lKSB7XG4gICAgdGhpcy50aW1lID0gdGltZTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xuXG4gIC8vIDo6IChTbGljZSkg4oaSIFRyYW5zYWN0aW9uXG4gIC8vIFJlcGxhY2UgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIHdpdGggdGhlIGdpdmVuIHNsaWNlLlxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUucmVwbGFjZVNlbGVjdGlvbiA9IGZ1bmN0aW9uIHJlcGxhY2VTZWxlY3Rpb24gKHNsaWNlKSB7XG4gICAgdGhpcy5zZWxlY3Rpb24ucmVwbGFjZSh0aGlzLCBzbGljZSk7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcblxuICAvLyA6OiAoTm9kZSwgP2Jvb2wpIOKGkiBUcmFuc2FjdGlvblxuICAvLyBSZXBsYWNlIHRoZSBzZWxlY3Rpb24gd2l0aCB0aGUgZ2l2ZW4gbm9kZS4gV2hlbiBgaW5oZXJpdE1hcmtzYCBpc1xuICAvLyB0cnVlIGFuZCB0aGUgY29udGVudCBpcyBpbmxpbmUsIGl0IGluaGVyaXRzIHRoZSBtYXJrcyBmcm9tIHRoZVxuICAvLyBwbGFjZSB3aGVyZSBpdCBpcyBpbnNlcnRlZC5cbiAgVHJhbnNhY3Rpb24ucHJvdG90eXBlLnJlcGxhY2VTZWxlY3Rpb25XaXRoID0gZnVuY3Rpb24gcmVwbGFjZVNlbGVjdGlvbldpdGggKG5vZGUsIGluaGVyaXRNYXJrcykge1xuICAgIHZhciBzZWxlY3Rpb24gPSB0aGlzLnNlbGVjdGlvbjtcbiAgICBpZiAoaW5oZXJpdE1hcmtzICE9PSBmYWxzZSlcbiAgICAgIHsgbm9kZSA9IG5vZGUubWFyayh0aGlzLnN0b3JlZE1hcmtzIHx8IChzZWxlY3Rpb24uZW1wdHkgPyBzZWxlY3Rpb24uJGZyb20ubWFya3MoKSA6IChzZWxlY3Rpb24uJGZyb20ubWFya3NBY3Jvc3Moc2VsZWN0aW9uLiR0bykgfHwgTWFyay5ub25lKSkpOyB9XG4gICAgc2VsZWN0aW9uLnJlcGxhY2VXaXRoKHRoaXMsIG5vZGUpO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG5cbiAgLy8gOjogKCkg4oaSIFRyYW5zYWN0aW9uXG4gIC8vIERlbGV0ZSB0aGUgc2VsZWN0aW9uLlxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUuZGVsZXRlU2VsZWN0aW9uID0gZnVuY3Rpb24gZGVsZXRlU2VsZWN0aW9uICgpIHtcbiAgICB0aGlzLnNlbGVjdGlvbi5yZXBsYWNlKHRoaXMpO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG5cbiAgLy8gOjogKHN0cmluZywgZnJvbTogP251bWJlciwgdG86ID9udW1iZXIpIOKGkiBUcmFuc2FjdGlvblxuICAvLyBSZXBsYWNlIHRoZSBnaXZlbiByYW5nZSwgb3IgdGhlIHNlbGVjdGlvbiBpZiBubyByYW5nZSBpcyBnaXZlbixcbiAgLy8gd2l0aCBhIHRleHQgbm9kZSBjb250YWluaW5nIHRoZSBnaXZlbiBzdHJpbmcuXG4gIFRyYW5zYWN0aW9uLnByb3RvdHlwZS5pbnNlcnRUZXh0ID0gZnVuY3Rpb24gaW5zZXJ0VGV4dCAodGV4dCwgZnJvbSwgdG8pIHtcbiAgICBpZiAoIHRvID09PSB2b2lkIDAgKSB0byA9IGZyb207XG5cbiAgICB2YXIgc2NoZW1hID0gdGhpcy5kb2MudHlwZS5zY2hlbWE7XG4gICAgaWYgKGZyb20gPT0gbnVsbCkge1xuICAgICAgaWYgKCF0ZXh0KSB7IHJldHVybiB0aGlzLmRlbGV0ZVNlbGVjdGlvbigpIH1cbiAgICAgIHJldHVybiB0aGlzLnJlcGxhY2VTZWxlY3Rpb25XaXRoKHNjaGVtYS50ZXh0KHRleHQpLCB0cnVlKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXRleHQpIHsgcmV0dXJuIHRoaXMuZGVsZXRlUmFuZ2UoZnJvbSwgdG8pIH1cbiAgICAgIHZhciBtYXJrcyA9IHRoaXMuc3RvcmVkTWFya3M7XG4gICAgICBpZiAoIW1hcmtzKSB7XG4gICAgICAgIHZhciAkZnJvbSA9IHRoaXMuZG9jLnJlc29sdmUoZnJvbSk7XG4gICAgICAgIG1hcmtzID0gdG8gPT0gZnJvbSA/ICRmcm9tLm1hcmtzKCkgOiAkZnJvbS5tYXJrc0Fjcm9zcyh0aGlzLmRvYy5yZXNvbHZlKHRvKSk7XG4gICAgICB9XG4gICAgICB0aGlzLnJlcGxhY2VSYW5nZVdpdGgoZnJvbSwgdG8sIHNjaGVtYS50ZXh0KHRleHQsIG1hcmtzKSk7XG4gICAgICBpZiAoIXRoaXMuc2VsZWN0aW9uLmVtcHR5KSB7IHRoaXMuc2V0U2VsZWN0aW9uKFNlbGVjdGlvbi5uZWFyKHRoaXMuc2VsZWN0aW9uLiR0bykpOyB9XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgfTtcblxuICAvLyA6OiAodW5pb248c3RyaW5nLCBQbHVnaW4sIFBsdWdpbktleT4sIGFueSkg4oaSIFRyYW5zYWN0aW9uXG4gIC8vIFN0b3JlIGEgbWV0YWRhdGEgcHJvcGVydHkgaW4gdGhpcyB0cmFuc2FjdGlvbiwga2V5ZWQgZWl0aGVyIGJ5XG4gIC8vIG5hbWUgb3IgYnkgcGx1Z2luLlxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUuc2V0TWV0YSA9IGZ1bmN0aW9uIHNldE1ldGEgKGtleSwgdmFsdWUpIHtcbiAgICB0aGlzLm1ldGFbdHlwZW9mIGtleSA9PSBcInN0cmluZ1wiID8ga2V5IDoga2V5LmtleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xuXG4gIC8vIDo6ICh1bmlvbjxzdHJpbmcsIFBsdWdpbiwgUGx1Z2luS2V5Pikg4oaSIGFueVxuICAvLyBSZXRyaWV2ZSBhIG1ldGFkYXRhIHByb3BlcnR5IGZvciBhIGdpdmVuIG5hbWUgb3IgcGx1Z2luLlxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUuZ2V0TWV0YSA9IGZ1bmN0aW9uIGdldE1ldGEgKGtleSkge1xuICAgIHJldHVybiB0aGlzLm1ldGFbdHlwZW9mIGtleSA9PSBcInN0cmluZ1wiID8ga2V5IDoga2V5LmtleV1cbiAgfTtcblxuICAvLyA6OiBib29sXG4gIC8vIFJldHVybnMgdHJ1ZSBpZiB0aGlzIHRyYW5zYWN0aW9uIGRvZXNuJ3QgY29udGFpbiBhbnkgbWV0YWRhdGEsXG4gIC8vIGFuZCBjYW4gdGh1cyBzYWZlbHkgYmUgZXh0ZW5kZWQuXG4gIHByb3RvdHlwZUFjY2Vzc29ycy5pc0dlbmVyaWMuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIGZvciAodmFyIF8gaW4gdGhpcy5tZXRhKSB7IHJldHVybiBmYWxzZSB9XG4gICAgcmV0dXJuIHRydWVcbiAgfTtcblxuICAvLyA6OiAoKSDihpIgVHJhbnNhY3Rpb25cbiAgLy8gSW5kaWNhdGUgdGhhdCB0aGUgZWRpdG9yIHNob3VsZCBzY3JvbGwgdGhlIHNlbGVjdGlvbiBpbnRvIHZpZXdcbiAgLy8gd2hlbiB1cGRhdGVkIHRvIHRoZSBzdGF0ZSBwcm9kdWNlZCBieSB0aGlzIHRyYW5zYWN0aW9uLlxuICBUcmFuc2FjdGlvbi5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXcgPSBmdW5jdGlvbiBzY3JvbGxJbnRvVmlldyAoKSB7XG4gICAgdGhpcy51cGRhdGVkIHw9IFVQREFURURfU0NST0xMO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG5cbiAgcHJvdG90eXBlQWNjZXNzb3JzLnNjcm9sbGVkSW50b1ZpZXcuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy51cGRhdGVkICYgVVBEQVRFRF9TQ1JPTEwpID4gMFxuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBUcmFuc2FjdGlvbi5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG4gIHJldHVybiBUcmFuc2FjdGlvbjtcbn0oVHJhbnNmb3JtKSk7XG5cbmZ1bmN0aW9uIGJpbmQoZiwgc2VsZikge1xuICByZXR1cm4gIXNlbGYgfHwgIWYgPyBmIDogZi5iaW5kKHNlbGYpXG59XG5cbnZhciBGaWVsZERlc2MgPSBmdW5jdGlvbiBGaWVsZERlc2MobmFtZSwgZGVzYywgc2VsZikge1xuICB0aGlzLm5hbWUgPSBuYW1lO1xuICB0aGlzLmluaXQgPSBiaW5kKGRlc2MuaW5pdCwgc2VsZik7XG4gIHRoaXMuYXBwbHkgPSBiaW5kKGRlc2MuYXBwbHksIHNlbGYpO1xufTtcblxudmFyIGJhc2VGaWVsZHMgPSBbXG4gIG5ldyBGaWVsZERlc2MoXCJkb2NcIiwge1xuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQoY29uZmlnKSB7IHJldHVybiBjb25maWcuZG9jIHx8IGNvbmZpZy5zY2hlbWEudG9wTm9kZVR5cGUuY3JlYXRlQW5kRmlsbCgpIH0sXG4gICAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRyKSB7IHJldHVybiB0ci5kb2MgfVxuICB9KSxcblxuICBuZXcgRmllbGREZXNjKFwic2VsZWN0aW9uXCIsIHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KGNvbmZpZywgaW5zdGFuY2UpIHsgcmV0dXJuIGNvbmZpZy5zZWxlY3Rpb24gfHwgU2VsZWN0aW9uLmF0U3RhcnQoaW5zdGFuY2UuZG9jKSB9LFxuICAgIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0cikgeyByZXR1cm4gdHIuc2VsZWN0aW9uIH1cbiAgfSksXG5cbiAgbmV3IEZpZWxkRGVzYyhcInN0b3JlZE1hcmtzXCIsIHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KGNvbmZpZykgeyByZXR1cm4gY29uZmlnLnN0b3JlZE1hcmtzIHx8IG51bGwgfSxcbiAgICBhcHBseTogZnVuY3Rpb24gYXBwbHkodHIsIF9tYXJrcywgX29sZCwgc3RhdGUpIHsgcmV0dXJuIHN0YXRlLnNlbGVjdGlvbi4kY3Vyc29yID8gdHIuc3RvcmVkTWFya3MgOiBudWxsIH1cbiAgfSksXG5cbiAgbmV3IEZpZWxkRGVzYyhcInNjcm9sbFRvU2VsZWN0aW9uXCIsIHtcbiAgICBpbml0OiBmdW5jdGlvbiBpbml0KCkgeyByZXR1cm4gMCB9LFxuICAgIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0ciwgcHJldikgeyByZXR1cm4gdHIuc2Nyb2xsZWRJbnRvVmlldyA/IHByZXYgKyAxIDogcHJldiB9XG4gIH0pXG5dO1xuXG4vLyBPYmplY3Qgd3JhcHBpbmcgdGhlIHBhcnQgb2YgYSBzdGF0ZSBvYmplY3QgdGhhdCBzdGF5cyB0aGUgc2FtZVxuLy8gYWNyb3NzIHRyYW5zYWN0aW9ucy4gU3RvcmVkIGluIHRoZSBzdGF0ZSdzIGBjb25maWdgIHByb3BlcnR5LlxudmFyIENvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbiBDb25maWd1cmF0aW9uKHNjaGVtYSwgcGx1Z2lucykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB0aGlzLnNjaGVtYSA9IHNjaGVtYTtcbiAgdGhpcy5maWVsZHMgPSBiYXNlRmllbGRzLmNvbmNhdCgpO1xuICB0aGlzLnBsdWdpbnMgPSBbXTtcbiAgdGhpcy5wbHVnaW5zQnlLZXkgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAocGx1Z2lucykgeyBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgIGlmICh0aGlzJDEucGx1Z2luc0J5S2V5W3BsdWdpbi5rZXldKVxuICAgICAgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkFkZGluZyBkaWZmZXJlbnQgaW5zdGFuY2VzIG9mIGEga2V5ZWQgcGx1Z2luIChcIiArIHBsdWdpbi5rZXkgKyBcIilcIikgfVxuICAgIHRoaXMkMS5wbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICB0aGlzJDEucGx1Z2luc0J5S2V5W3BsdWdpbi5rZXldID0gcGx1Z2luO1xuICAgIGlmIChwbHVnaW4uc3BlYy5zdGF0ZSlcbiAgICAgIHsgdGhpcyQxLmZpZWxkcy5wdXNoKG5ldyBGaWVsZERlc2MocGx1Z2luLmtleSwgcGx1Z2luLnNwZWMuc3RhdGUsIHBsdWdpbikpOyB9XG4gIH0pOyB9XG59O1xuXG4vLyA6Oi0gVGhlIHN0YXRlIG9mIGEgUHJvc2VNaXJyb3IgZWRpdG9yIGlzIHJlcHJlc2VudGVkIGJ5IGFuIG9iamVjdFxuLy8gb2YgdGhpcyB0eXBlLiBBIHN0YXRlIGlzIGEgcGVyc2lzdGVudCBkYXRhIHN0cnVjdHVyZeKAlGl0IGlzbid0XG4vLyB1cGRhdGVkLCBidXQgcmF0aGVyIGEgbmV3IHN0YXRlIHZhbHVlIGlzIGNvbXB1dGVkIGZyb20gYW4gb2xkIG9uZVxuLy8gdXNpbmcgdGhlIFtgYXBwbHlgXSgjc3RhdGUuRWRpdG9yU3RhdGUuYXBwbHkpIG1ldGhvZC5cbi8vXG4vLyBBIHN0YXRlIGhvbGRzIGEgbnVtYmVyIG9mIGJ1aWx0LWluIGZpZWxkcywgYW5kIHBsdWdpbnMgY2FuXG4vLyBbZGVmaW5lXSgjc3RhdGUuUGx1Z2luU3BlYy5zdGF0ZSkgYWRkaXRpb25hbCBmaWVsZHMuXG52YXIgRWRpdG9yU3RhdGUgPSBmdW5jdGlvbiBFZGl0b3JTdGF0ZShjb25maWcpIHtcbiAgdGhpcy5jb25maWcgPSBjb25maWc7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzJDEgPSB7IHNjaGVtYTogeyBjb25maWd1cmFibGU6IHRydWUgfSxwbHVnaW5zOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHRyOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8vIGRvYzo6IE5vZGVcbi8vIFRoZSBjdXJyZW50IGRvY3VtZW50LlxuXG4vLyBzZWxlY3Rpb246OiBTZWxlY3Rpb25cbi8vIFRoZSBzZWxlY3Rpb24uXG5cbi8vIHN0b3JlZE1hcmtzOjogP1tNYXJrXVxuLy8gQSBzZXQgb2YgbWFya3MgdG8gYXBwbHkgdG8gdGhlIG5leHQgaW5wdXQuIFdpbGwgYmUgbnVsbCB3aGVuXG4vLyBubyBleHBsaWNpdCBtYXJrcyBoYXZlIGJlZW4gc2V0LlxuXG4vLyA6OiBTY2hlbWFcbi8vIFRoZSBzY2hlbWEgb2YgdGhlIHN0YXRlJ3MgZG9jdW1lbnQuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5zY2hlbWEuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb25maWcuc2NoZW1hXG59O1xuXG4vLyA6OiBbUGx1Z2luXVxuLy8gVGhlIHBsdWdpbnMgdGhhdCBhcmUgYWN0aXZlIGluIHRoaXMgc3RhdGUuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5wbHVnaW5zLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29uZmlnLnBsdWdpbnNcbn07XG5cbi8vIDo6IChUcmFuc2FjdGlvbikg4oaSIEVkaXRvclN0YXRlXG4vLyBBcHBseSB0aGUgZ2l2ZW4gdHJhbnNhY3Rpb24gdG8gcHJvZHVjZSBhIG5ldyBzdGF0ZS5cbkVkaXRvclN0YXRlLnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uIGFwcGx5ICh0cikge1xuICByZXR1cm4gdGhpcy5hcHBseVRyYW5zYWN0aW9uKHRyKS5zdGF0ZVxufTtcblxuLy8gOiAoVHJhbnNhY3Rpb24pIOKGkiBib29sXG5FZGl0b3JTdGF0ZS5wcm90b3R5cGUuZmlsdGVyVHJhbnNhY3Rpb24gPSBmdW5jdGlvbiBmaWx0ZXJUcmFuc2FjdGlvbiAodHIsIGlnbm9yZSkge1xuICAgIGlmICggaWdub3JlID09PSB2b2lkIDAgKSBpZ25vcmUgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY29uZmlnLnBsdWdpbnMubGVuZ3RoOyBpKyspIHsgaWYgKGkgIT0gaWdub3JlKSB7XG4gICAgdmFyIHBsdWdpbiA9IHRoaXMuY29uZmlnLnBsdWdpbnNbaV07XG4gICAgaWYgKHBsdWdpbi5zcGVjLmZpbHRlclRyYW5zYWN0aW9uICYmICFwbHVnaW4uc3BlYy5maWx0ZXJUcmFuc2FjdGlvbi5jYWxsKHBsdWdpbiwgdHIsIHRoaXMpKVxuICAgICAgeyByZXR1cm4gZmFsc2UgfVxuICB9IH1cbiAgcmV0dXJuIHRydWVcbn07XG5cbi8vIDo6IChUcmFuc2FjdGlvbikg4oaSIHtzdGF0ZTogRWRpdG9yU3RhdGUsIHRyYW5zYWN0aW9uczogW1RyYW5zYWN0aW9uXX1cbi8vIFZlcmJvc2UgdmFyaWFudCBvZiBbYGFwcGx5YF0oI3N0YXRlLkVkaXRvclN0YXRlLmFwcGx5KSB0aGF0XG4vLyByZXR1cm5zIHRoZSBwcmVjaXNlIHRyYW5zYWN0aW9ucyB0aGF0IHdlcmUgYXBwbGllZCAod2hpY2ggbWlnaHRcbi8vIGJlIGluZmx1ZW5jZWQgYnkgdGhlIFt0cmFuc2FjdGlvblxuLy8gaG9va3NdKCNzdGF0ZS5QbHVnaW5TcGVjLmZpbHRlclRyYW5zYWN0aW9uKSBvZlxuLy8gcGx1Z2lucykgYWxvbmcgd2l0aCB0aGUgbmV3IHN0YXRlLlxuRWRpdG9yU3RhdGUucHJvdG90eXBlLmFwcGx5VHJhbnNhY3Rpb24gPSBmdW5jdGlvbiBhcHBseVRyYW5zYWN0aW9uIChyb290VHIpIHtcbiAgaWYgKCF0aGlzLmZpbHRlclRyYW5zYWN0aW9uKHJvb3RUcikpIHsgcmV0dXJuIHtzdGF0ZTogdGhpcywgdHJhbnNhY3Rpb25zOiBbXX0gfVxuXG4gIHZhciB0cnMgPSBbcm9vdFRyXSwgbmV3U3RhdGUgPSB0aGlzLmFwcGx5SW5uZXIocm9vdFRyKSwgc2VlbiA9IG51bGw7XG4gIC8vIFRoaXMgbG9vcCByZXBlYXRlZGx5IGdpdmVzIHBsdWdpbnMgYSBjaGFuY2UgdG8gcmVzcG9uZCB0b1xuICAvLyB0cmFuc2FjdGlvbnMgYXMgbmV3IHRyYW5zYWN0aW9ucyBhcmUgYWRkZWQsIG1ha2luZyBzdXJlIHRvIG9ubHlcbiAgLy8gcGFzcyB0aGUgdHJhbnNhY3Rpb25zIHRoZSBwbHVnaW4gZGlkIG5vdCBzZWUgYmVmb3JlLlxuICAgZm9yICg7Oykge1xuICAgIHZhciBoYXZlTmV3ID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNvbmZpZy5wbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGx1Z2luID0gdGhpcy5jb25maWcucGx1Z2luc1tpXTtcbiAgICAgIGlmIChwbHVnaW4uc3BlYy5hcHBlbmRUcmFuc2FjdGlvbikge1xuICAgICAgICB2YXIgbiA9IHNlZW4gPyBzZWVuW2ldLm4gOiAwLCBvbGRTdGF0ZSA9IHNlZW4gPyBzZWVuW2ldLnN0YXRlIDogdGhpcztcbiAgICAgICAgdmFyIHRyID0gbiA8IHRycy5sZW5ndGggJiZcbiAgICAgICAgICAgIHBsdWdpbi5zcGVjLmFwcGVuZFRyYW5zYWN0aW9uLmNhbGwocGx1Z2luLCBuID8gdHJzLnNsaWNlKG4pIDogdHJzLCBvbGRTdGF0ZSwgbmV3U3RhdGUpO1xuICAgICAgICBpZiAodHIgJiYgbmV3U3RhdGUuZmlsdGVyVHJhbnNhY3Rpb24odHIsIGkpKSB7XG4gICAgICAgICAgdHIuc2V0TWV0YShcImFwcGVuZGVkVHJhbnNhY3Rpb25cIiwgcm9vdFRyKTtcbiAgICAgICAgICBpZiAoIXNlZW4pIHtcbiAgICAgICAgICAgIHNlZW4gPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5jb25maWcucGx1Z2lucy5sZW5ndGg7IGorKylcbiAgICAgICAgICAgICAgeyBzZWVuLnB1c2goaiA8IGkgPyB7c3RhdGU6IG5ld1N0YXRlLCBuOiB0cnMubGVuZ3RofSA6IHtzdGF0ZTogdGhpcywgbjogMH0pOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRycy5wdXNoKHRyKTtcbiAgICAgICAgICBuZXdTdGF0ZSA9IG5ld1N0YXRlLmFwcGx5SW5uZXIodHIpO1xuICAgICAgICAgIGhhdmVOZXcgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWVuKSB7IHNlZW5baV0gPSB7c3RhdGU6IG5ld1N0YXRlLCBuOiB0cnMubGVuZ3RofTsgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWhhdmVOZXcpIHsgcmV0dXJuIHtzdGF0ZTogbmV3U3RhdGUsIHRyYW5zYWN0aW9uczogdHJzfSB9XG4gIH1cbn07XG5cbi8vIDogKFRyYW5zYWN0aW9uKSDihpIgRWRpdG9yU3RhdGVcbkVkaXRvclN0YXRlLnByb3RvdHlwZS5hcHBseUlubmVyID0gZnVuY3Rpb24gYXBwbHlJbm5lciAodHIpIHtcbiAgaWYgKCF0ci5iZWZvcmUuZXEodGhpcy5kb2MpKSB7IHRocm93IG5ldyBSYW5nZUVycm9yKFwiQXBwbHlpbmcgYSBtaXNtYXRjaGVkIHRyYW5zYWN0aW9uXCIpIH1cbiAgdmFyIG5ld0luc3RhbmNlID0gbmV3IEVkaXRvclN0YXRlKHRoaXMuY29uZmlnKSwgZmllbGRzID0gdGhpcy5jb25maWcuZmllbGRzO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBmaWVsZCA9IGZpZWxkc1tpXTtcbiAgICBuZXdJbnN0YW5jZVtmaWVsZC5uYW1lXSA9IGZpZWxkLmFwcGx5KHRyLCB0aGlzW2ZpZWxkLm5hbWVdLCB0aGlzLCBuZXdJbnN0YW5jZSk7XG4gIH1cbiAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgYXBwbHlMaXN0ZW5lcnMubGVuZ3RoOyBpJDErKykgeyBhcHBseUxpc3RlbmVyc1tpJDFdKHRoaXMsIHRyLCBuZXdJbnN0YW5jZSk7IH1cbiAgcmV0dXJuIG5ld0luc3RhbmNlXG59O1xuXG4vLyA6OiBUcmFuc2FjdGlvblxuLy8gU3RhcnQgYSBbdHJhbnNhY3Rpb25dKCNzdGF0ZS5UcmFuc2FjdGlvbikgZnJvbSB0aGlzIHN0YXRlLlxucHJvdG90eXBlQWNjZXNzb3JzJDEudHIuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IFRyYW5zYWN0aW9uKHRoaXMpIH07XG5cbi8vIDo6IChPYmplY3QpIOKGkiBFZGl0b3JTdGF0ZVxuLy8gQ3JlYXRlIGEgbmV3IHN0YXRlLlxuLy9cbi8vIGNvbmZpZzo6LSBDb25maWd1cmF0aW9uIG9wdGlvbnMuIE11c3QgY29udGFpbiBgc2NoZW1hYCBvciBgZG9jYCAob3IgYm90aCkuXG4vL1xuLy8gICAgc2NoZW1hOjogP1NjaGVtYVxuLy8gICAgVGhlIHNjaGVtYSB0byB1c2UgKG9ubHkgcmVsZXZhbnQgaWYgbm8gYGRvY2AgaXMgc3BlY2lmaWVkKS5cbi8vXG4vLyAgICBkb2M6OiA/Tm9kZVxuLy8gICAgVGhlIHN0YXJ0aW5nIGRvY3VtZW50LlxuLy9cbi8vICAgIHNlbGVjdGlvbjo6ID9TZWxlY3Rpb25cbi8vICAgIEEgdmFsaWQgc2VsZWN0aW9uIGluIHRoZSBkb2N1bWVudC5cbi8vXG4vLyAgICBzdG9yZWRNYXJrczo6ID9bTWFya11cbi8vICAgIFRoZSBpbml0aWFsIHNldCBvZiBbc3RvcmVkIG1hcmtzXSgjc3RhdGUuRWRpdG9yU3RhdGUuc3RvcmVkTWFya3MpLlxuLy9cbi8vICAgIHBsdWdpbnM6OiA/W1BsdWdpbl1cbi8vICAgIFRoZSBwbHVnaW5zIHRoYXQgc2hvdWxkIGJlIGFjdGl2ZSBpbiB0aGlzIHN0YXRlLlxuRWRpdG9yU3RhdGUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlIChjb25maWcpIHtcbiAgdmFyICRjb25maWcgPSBuZXcgQ29uZmlndXJhdGlvbihjb25maWcuZG9jID8gY29uZmlnLmRvYy50eXBlLnNjaGVtYSA6IGNvbmZpZy5zY2hlbWEsIGNvbmZpZy5wbHVnaW5zKTtcbiAgdmFyIGluc3RhbmNlID0gbmV3IEVkaXRvclN0YXRlKCRjb25maWcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8ICRjb25maWcuZmllbGRzLmxlbmd0aDsgaSsrKVxuICAgIHsgaW5zdGFuY2VbJGNvbmZpZy5maWVsZHNbaV0ubmFtZV0gPSAkY29uZmlnLmZpZWxkc1tpXS5pbml0KGNvbmZpZywgaW5zdGFuY2UpOyB9XG4gIHJldHVybiBpbnN0YW5jZVxufTtcblxuLy8gOjogKE9iamVjdCkg4oaSIEVkaXRvclN0YXRlXG4vLyBDcmVhdGUgYSBuZXcgc3RhdGUgYmFzZWQgb24gdGhpcyBvbmUsIGJ1dCB3aXRoIGFuIGFkanVzdGVkIHNldCBvZlxuLy8gYWN0aXZlIHBsdWdpbnMuIFN0YXRlIGZpZWxkcyB0aGF0IGV4aXN0IGluIGJvdGggc2V0cyBvZiBwbHVnaW5zXG4vLyBhcmUga2VwdCB1bmNoYW5nZWQuIFRob3NlIHRoYXQgbm8gbG9uZ2VyIGV4aXN0IGFyZSBkcm9wcGVkLCBhbmRcbi8vIHRob3NlIHRoYXQgYXJlIG5ldyBhcmUgaW5pdGlhbGl6ZWQgdXNpbmcgdGhlaXJcbi8vIFtgaW5pdGBdKCNzdGF0ZS5TdGF0ZUZpZWxkLmluaXQpIG1ldGhvZCwgcGFzc2luZyBpbiB0aGUgbmV3XG4vLyBjb25maWd1cmF0aW9uIG9iamVjdC4uXG4vL1xuLy8gY29uZmlnOjotIGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xuLy9cbi8vICAgcGx1Z2luczo6IFtQbHVnaW5dXG4vLyAgIE5ldyBzZXQgb2YgYWN0aXZlIHBsdWdpbnMuXG5FZGl0b3JTdGF0ZS5wcm90b3R5cGUucmVjb25maWd1cmUgPSBmdW5jdGlvbiByZWNvbmZpZ3VyZSAoY29uZmlnKSB7XG4gIHZhciAkY29uZmlnID0gbmV3IENvbmZpZ3VyYXRpb24odGhpcy5zY2hlbWEsIGNvbmZpZy5wbHVnaW5zKTtcbiAgdmFyIGZpZWxkcyA9ICRjb25maWcuZmllbGRzLCBpbnN0YW5jZSA9IG5ldyBFZGl0b3JTdGF0ZSgkY29uZmlnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbmFtZSA9IGZpZWxkc1tpXS5uYW1lO1xuICAgIGluc3RhbmNlW25hbWVdID0gdGhpcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IHRoaXNbbmFtZV0gOiBmaWVsZHNbaV0uaW5pdChjb25maWcsIGluc3RhbmNlKTtcbiAgfVxuICByZXR1cm4gaW5zdGFuY2Vcbn07XG5cbi8vIDo6ICg/dW5pb248T2JqZWN0PFBsdWdpbj4sIHN0cmluZywgbnVtYmVyPikg4oaSIE9iamVjdFxuLy8gU2VyaWFsaXplIHRoaXMgc3RhdGUgdG8gSlNPTi4gSWYgeW91IHdhbnQgdG8gc2VyaWFsaXplIHRoZSBzdGF0ZVxuLy8gb2YgcGx1Z2lucywgcGFzcyBhbiBvYmplY3QgbWFwcGluZyBwcm9wZXJ0eSBuYW1lcyB0byB1c2UgaW4gdGhlXG4vLyByZXN1bHRpbmcgSlNPTiBvYmplY3QgdG8gcGx1Z2luIG9iamVjdHMuIFRoZSBhcmd1bWVudCBtYXkgYWxzbyBiZVxuLy8gYSBzdHJpbmcgb3IgbnVtYmVyLCBpbiB3aGljaCBjYXNlIGl0IGlzIGlnbm9yZWQsIHRvIHN1cHBvcnQgdGhlXG4vLyB3YXkgYEpTT04uc3RyaW5naWZ5YCBjYWxscyBgdG9TdHJpbmdgIG1ldGhvZHMuXG5FZGl0b3JTdGF0ZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OIChwbHVnaW5GaWVsZHMpIHtcbiAgdmFyIHJlc3VsdCA9IHtkb2M6IHRoaXMuZG9jLnRvSlNPTigpLCBzZWxlY3Rpb246IHRoaXMuc2VsZWN0aW9uLnRvSlNPTigpfTtcbiAgaWYgKHRoaXMuc3RvcmVkTWFya3MpIHsgcmVzdWx0LnN0b3JlZE1hcmtzID0gdGhpcy5zdG9yZWRNYXJrcy5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0udG9KU09OKCk7IH0pOyB9XG4gIGlmIChwbHVnaW5GaWVsZHMgJiYgdHlwZW9mIHBsdWdpbkZpZWxkcyA9PSAnb2JqZWN0JykgeyBmb3IgKHZhciBwcm9wIGluIHBsdWdpbkZpZWxkcykge1xuICAgIGlmIChwcm9wID09IFwiZG9jXCIgfHwgcHJvcCA9PSBcInNlbGVjdGlvblwiKVxuICAgICAgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlRoZSBKU09OIGZpZWxkcyBgZG9jYCBhbmQgYHNlbGVjdGlvbmAgYXJlIHJlc2VydmVkXCIpIH1cbiAgICB2YXIgcGx1Z2luID0gcGx1Z2luRmllbGRzW3Byb3BdLCBzdGF0ZSA9IHBsdWdpbi5zcGVjLnN0YXRlO1xuICAgIGlmIChzdGF0ZSAmJiBzdGF0ZS50b0pTT04pIHsgcmVzdWx0W3Byb3BdID0gc3RhdGUudG9KU09OLmNhbGwocGx1Z2luLCB0aGlzW3BsdWdpbi5rZXldKTsgfVxuICB9IH1cbiAgcmV0dXJuIHJlc3VsdFxufTtcblxuLy8gOjogKE9iamVjdCwgT2JqZWN0LCA/T2JqZWN0PFBsdWdpbj4pIOKGkiBFZGl0b3JTdGF0ZVxuLy8gRGVzZXJpYWxpemUgYSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIGEgc3RhdGUuIGBjb25maWdgIHNob3VsZFxuLy8gaGF2ZSBhdCBsZWFzdCBhIGBzY2hlbWFgIGZpZWxkLCBhbmQgc2hvdWxkIGNvbnRhaW4gYXJyYXkgb2Zcbi8vIHBsdWdpbnMgdG8gaW5pdGlhbGl6ZSB0aGUgc3RhdGUgd2l0aC4gYHBsdWdpbkZpZWxkc2AgY2FuIGJlIHVzZWRcbi8vIHRvIGRlc2VyaWFsaXplIHRoZSBzdGF0ZSBvZiBwbHVnaW5zLCBieSBhc3NvY2lhdGluZyBwbHVnaW5cbi8vIGluc3RhbmNlcyB3aXRoIHRoZSBwcm9wZXJ0eSBuYW1lcyB0aGV5IHVzZSBpbiB0aGUgSlNPTiBvYmplY3QuXG4vL1xuLy8gY29uZmlnOjotIGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xuLy9cbi8vICAgc2NoZW1hOjogU2NoZW1hXG4vLyAgIFRoZSBzY2hlbWEgdG8gdXNlLlxuLy9cbi8vICAgcGx1Z2luczo6ID9bUGx1Z2luXVxuLy8gICBUaGUgc2V0IG9mIGFjdGl2ZSBwbHVnaW5zLlxuRWRpdG9yU3RhdGUuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTiAoY29uZmlnLCBqc29uLCBwbHVnaW5GaWVsZHMpIHtcbiAgaWYgKCFqc29uKSB7IHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgRWRpdG9yU3RhdGUuZnJvbUpTT05cIikgfVxuICBpZiAoIWNvbmZpZy5zY2hlbWEpIHsgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJSZXF1aXJlZCBjb25maWcgZmllbGQgJ3NjaGVtYScgbWlzc2luZ1wiKSB9XG4gIHZhciAkY29uZmlnID0gbmV3IENvbmZpZ3VyYXRpb24oY29uZmlnLnNjaGVtYSwgY29uZmlnLnBsdWdpbnMpO1xuICB2YXIgaW5zdGFuY2UgPSBuZXcgRWRpdG9yU3RhdGUoJGNvbmZpZyk7XG4gICRjb25maWcuZmllbGRzLmZvckVhY2goZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgaWYgKGZpZWxkLm5hbWUgPT0gXCJkb2NcIikge1xuICAgICAgaW5zdGFuY2UuZG9jID0gTm9kZS5mcm9tSlNPTihjb25maWcuc2NoZW1hLCBqc29uLmRvYyk7XG4gICAgfSBlbHNlIGlmIChmaWVsZC5uYW1lID09IFwic2VsZWN0aW9uXCIpIHtcbiAgICAgIGluc3RhbmNlLnNlbGVjdGlvbiA9IFNlbGVjdGlvbi5mcm9tSlNPTihpbnN0YW5jZS5kb2MsIGpzb24uc2VsZWN0aW9uKTtcbiAgICB9IGVsc2UgaWYgKGZpZWxkLm5hbWUgPT0gXCJzdG9yZWRNYXJrc1wiKSB7XG4gICAgICBpZiAoanNvbi5zdG9yZWRNYXJrcykgeyBpbnN0YW5jZS5zdG9yZWRNYXJrcyA9IGpzb24uc3RvcmVkTWFya3MubWFwKGNvbmZpZy5zY2hlbWEubWFya0Zyb21KU09OKTsgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGx1Z2luRmllbGRzKSB7IGZvciAodmFyIHByb3AgaW4gcGx1Z2luRmllbGRzKSB7XG4gICAgICAgIHZhciBwbHVnaW4gPSBwbHVnaW5GaWVsZHNbcHJvcF0sIHN0YXRlID0gcGx1Z2luLnNwZWMuc3RhdGU7XG4gICAgICAgIGlmIChwbHVnaW4ua2V5ID09IGZpZWxkLm5hbWUgJiYgc3RhdGUgJiYgc3RhdGUuZnJvbUpTT04gJiZcbiAgICAgICAgICAgIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChqc29uLCBwcm9wKSkge1xuICAgICAgICAgIC8vIFRoaXMgZmllbGQgYmVsb25ncyB0byBhIHBsdWdpbiBtYXBwZWQgdG8gYSBKU09OIGZpZWxkLCByZWFkIGl0IGZyb20gdGhlcmUuXG4gICAgICAgICAgaW5zdGFuY2VbZmllbGQubmFtZV0gPSBzdGF0ZS5mcm9tSlNPTi5jYWxsKHBsdWdpbiwgY29uZmlnLCBqc29uW3Byb3BdLCBpbnN0YW5jZSk7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH0gfVxuICAgICAgaW5zdGFuY2VbZmllbGQubmFtZV0gPSBmaWVsZC5pbml0KGNvbmZpZywgaW5zdGFuY2UpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBpbnN0YW5jZVxufTtcblxuLy8gS2x1ZGdlIHRvIGFsbG93IHRoZSB2aWV3IHRvIHRyYWNrIG1hcHBpbmdzIGJldHdlZW4gZGlmZmVyZW50XG4vLyBpbnN0YW5jZXMgb2YgYSBzdGF0ZS5cbi8vXG4vLyBGSVhNRSB0aGlzIGlzIG5vIGxvbmdlciBuZWVkZWQgYXMgb2YgcHJvc2VtaXJyb3ItdmlldyAxLjkuMCxcbi8vIHRob3VnaCBkdWUgdG8gYmFja3dhcmRzLWNvbXBhdCB3ZSBzaG91bGQgcHJvYmFibHkga2VlcCBpdCBhcm91bmRcbi8vIGZvciBhIHdoaWxlIChpZiBvbmx5IGFzIGEgbm8tb3ApXG5FZGl0b3JTdGF0ZS5hZGRBcHBseUxpc3RlbmVyID0gZnVuY3Rpb24gYWRkQXBwbHlMaXN0ZW5lciAoZikge1xuICBhcHBseUxpc3RlbmVycy5wdXNoKGYpO1xufTtcbkVkaXRvclN0YXRlLnJlbW92ZUFwcGx5TGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVBcHBseUxpc3RlbmVyIChmKSB7XG4gIHZhciBmb3VuZCA9IGFwcGx5TGlzdGVuZXJzLmluZGV4T2YoZik7XG4gIGlmIChmb3VuZCA+IC0xKSB7IGFwcGx5TGlzdGVuZXJzLnNwbGljZShmb3VuZCwgMSk7IH1cbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBFZGl0b3JTdGF0ZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQxICk7XG5cbnZhciBhcHBseUxpc3RlbmVycyA9IFtdO1xuXG4vLyBQbHVnaW5TcGVjOjogaW50ZXJmYWNlXG4vL1xuLy8gVGhpcyBpcyB0aGUgdHlwZSBwYXNzZWQgdG8gdGhlIFtgUGx1Z2luYF0oI3N0YXRlLlBsdWdpbilcbi8vIGNvbnN0cnVjdG9yLiBJdCBwcm92aWRlcyBhIGRlZmluaXRpb24gZm9yIGEgcGx1Z2luLlxuLy9cbi8vICAgcHJvcHM6OiA/RWRpdG9yUHJvcHNcbi8vICAgVGhlIFt2aWV3IHByb3BzXSgjdmlldy5FZGl0b3JQcm9wcykgYWRkZWQgYnkgdGhpcyBwbHVnaW4uIFByb3BzXG4vLyAgIHRoYXQgYXJlIGZ1bmN0aW9ucyB3aWxsIGJlIGJvdW5kIHRvIGhhdmUgdGhlIHBsdWdpbiBpbnN0YW5jZSBhc1xuLy8gICB0aGVpciBgdGhpc2AgYmluZGluZy5cbi8vXG4vLyAgIHN0YXRlOjogP1N0YXRlRmllbGQ8YW55PlxuLy8gICBBbGxvd3MgYSBwbHVnaW4gdG8gZGVmaW5lIGEgW3N0YXRlIGZpZWxkXSgjc3RhdGUuU3RhdGVGaWVsZCksIGFuXG4vLyAgIGV4dHJhIHNsb3QgaW4gdGhlIHN0YXRlIG9iamVjdCBpbiB3aGljaCBpdCBjYW4ga2VlcCBpdHMgb3duIGRhdGEuXG4vL1xuLy8gICBrZXk6OiA/UGx1Z2luS2V5XG4vLyAgIENhbiBiZSB1c2VkIHRvIG1ha2UgdGhpcyBhIGtleWVkIHBsdWdpbi4gWW91IGNhbiBoYXZlIG9ubHkgb25lXG4vLyAgIHBsdWdpbiB3aXRoIGEgZ2l2ZW4ga2V5IGluIGEgZ2l2ZW4gc3RhdGUsIGJ1dCBpdCBpcyBwb3NzaWJsZSB0b1xuLy8gICBhY2Nlc3MgdGhlIHBsdWdpbidzIGNvbmZpZ3VyYXRpb24gYW5kIHN0YXRlIHRocm91Z2ggdGhlIGtleSxcbi8vICAgd2l0aG91dCBoYXZpbmcgYWNjZXNzIHRvIHRoZSBwbHVnaW4gaW5zdGFuY2Ugb2JqZWN0LlxuLy9cbi8vICAgdmlldzo6ID8oRWRpdG9yVmlldykg4oaSIE9iamVjdFxuLy8gICBXaGVuIHRoZSBwbHVnaW4gbmVlZHMgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgZWRpdG9yIHZpZXcsIG9yXG4vLyAgIHNldCBzb21ldGhpbmcgdXAgaW4gdGhlIERPTSwgdXNlIHRoaXMgZmllbGQuIFRoZSBmdW5jdGlvblxuLy8gICB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBwbHVnaW4ncyBzdGF0ZSBpcyBhc3NvY2lhdGVkIHdpdGggYW5cbi8vICAgZWRpdG9yIHZpZXcuXG4vL1xuLy8gICAgIHJldHVybjo6LVxuLy8gICAgIFNob3VsZCByZXR1cm4gYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBvcHRpb25hbFxuLy8gICAgIHByb3BlcnRpZXM6XG4vL1xuLy8gICAgICAgdXBkYXRlOjogPyh2aWV3OiBFZGl0b3JWaWV3LCBwcmV2U3RhdGU6IEVkaXRvclN0YXRlKVxuLy8gICAgICAgQ2FsbGVkIHdoZW5ldmVyIHRoZSB2aWV3J3Mgc3RhdGUgaXMgdXBkYXRlZC5cbi8vXG4vLyAgICAgICBkZXN0cm95OjogPygpXG4vLyAgICAgICBDYWxsZWQgd2hlbiB0aGUgdmlldyBpcyBkZXN0cm95ZWQgb3IgcmVjZWl2ZXMgYSBzdGF0ZVxuLy8gICAgICAgd2l0aCBkaWZmZXJlbnQgcGx1Z2lucy5cbi8vXG4vLyAgIGZpbHRlclRyYW5zYWN0aW9uOjogPyhUcmFuc2FjdGlvbiwgRWRpdG9yU3RhdGUpIOKGkiBib29sXG4vLyAgIFdoZW4gcHJlc2VudCwgdGhpcyB3aWxsIGJlIGNhbGxlZCBiZWZvcmUgYSB0cmFuc2FjdGlvbiBpc1xuLy8gICBhcHBsaWVkIGJ5IHRoZSBzdGF0ZSwgYWxsb3dpbmcgdGhlIHBsdWdpbiB0byBjYW5jZWwgaXQgKGJ5XG4vLyAgIHJldHVybmluZyBmYWxzZSkuXG4vL1xuLy8gICBhcHBlbmRUcmFuc2FjdGlvbjo6ID8odHJhbnNhY3Rpb25zOiBbVHJhbnNhY3Rpb25dLCBvbGRTdGF0ZTogRWRpdG9yU3RhdGUsIG5ld1N0YXRlOiBFZGl0b3JTdGF0ZSkg4oaSID9UcmFuc2FjdGlvblxuLy8gICBBbGxvd3MgdGhlIHBsdWdpbiB0byBhcHBlbmQgYW5vdGhlciB0cmFuc2FjdGlvbiB0byBiZSBhcHBsaWVkXG4vLyAgIGFmdGVyIHRoZSBnaXZlbiBhcnJheSBvZiB0cmFuc2FjdGlvbnMuIFdoZW4gYW5vdGhlciBwbHVnaW5cbi8vICAgYXBwZW5kcyBhIHRyYW5zYWN0aW9uIGFmdGVyIHRoaXMgd2FzIGNhbGxlZCwgaXQgaXMgY2FsbGVkIGFnYWluXG4vLyAgIHdpdGggdGhlIG5ldyBzdGF0ZSBhbmQgbmV3IHRyYW5zYWN0aW9uc+KAlGJ1dCBvbmx5IHRoZSBuZXdcbi8vICAgdHJhbnNhY3Rpb25zLCBpLmUuIGl0IHdvbid0IGJlIHBhc3NlZCB0cmFuc2FjdGlvbnMgdGhhdCBpdFxuLy8gICBhbHJlYWR5IHNhdy5cblxuZnVuY3Rpb24gYmluZFByb3BzKG9iaiwgc2VsZiwgdGFyZ2V0KSB7XG4gIGZvciAodmFyIHByb3AgaW4gb2JqKSB7XG4gICAgdmFyIHZhbCA9IG9ialtwcm9wXTtcbiAgICBpZiAodmFsIGluc3RhbmNlb2YgRnVuY3Rpb24pIHsgdmFsID0gdmFsLmJpbmQoc2VsZik7IH1cbiAgICBlbHNlIGlmIChwcm9wID09IFwiaGFuZGxlRE9NRXZlbnRzXCIpIHsgdmFsID0gYmluZFByb3BzKHZhbCwgc2VsZiwge30pOyB9XG4gICAgdGFyZ2V0W3Byb3BdID0gdmFsO1xuICB9XG4gIHJldHVybiB0YXJnZXRcbn1cblxuLy8gOjotIFBsdWdpbnMgYnVuZGxlIGZ1bmN0aW9uYWxpdHkgdGhhdCBjYW4gYmUgYWRkZWQgdG8gYW4gZWRpdG9yLlxuLy8gVGhleSBhcmUgcGFydCBvZiB0aGUgW2VkaXRvciBzdGF0ZV0oI3N0YXRlLkVkaXRvclN0YXRlKSBhbmRcbi8vIG1heSBpbmZsdWVuY2UgdGhhdCBzdGF0ZSBhbmQgdGhlIHZpZXcgdGhhdCBjb250YWlucyBpdC5cbnZhciBQbHVnaW4gPSBmdW5jdGlvbiBQbHVnaW4oc3BlYykge1xuICAvLyA6OiBFZGl0b3JQcm9wc1xuICAvLyBUaGUgW3Byb3BzXSgjdmlldy5FZGl0b3JQcm9wcykgZXhwb3J0ZWQgYnkgdGhpcyBwbHVnaW4uXG4gIHRoaXMucHJvcHMgPSB7fTtcbiAgaWYgKHNwZWMucHJvcHMpIHsgYmluZFByb3BzKHNwZWMucHJvcHMsIHRoaXMsIHRoaXMucHJvcHMpOyB9XG4gIC8vIDo6IE9iamVjdFxuICAvLyBUaGUgcGx1Z2luJ3MgW3NwZWMgb2JqZWN0XSgjc3RhdGUuUGx1Z2luU3BlYykuXG4gIHRoaXMuc3BlYyA9IHNwZWM7XG4gIHRoaXMua2V5ID0gc3BlYy5rZXkgPyBzcGVjLmtleS5rZXkgOiBjcmVhdGVLZXkoXCJwbHVnaW5cIik7XG59O1xuXG4vLyA6OiAoRWRpdG9yU3RhdGUpIOKGkiBhbnlcbi8vIEV4dHJhY3QgdGhlIHBsdWdpbidzIHN0YXRlIGZpZWxkIGZyb20gYW4gZWRpdG9yIHN0YXRlLlxuUGx1Z2luLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uIGdldFN0YXRlIChzdGF0ZSkgeyByZXR1cm4gc3RhdGVbdGhpcy5rZXldIH07XG5cbi8vIFN0YXRlRmllbGQ6OiBpbnRlcmZhY2U8VD5cbi8vIEEgcGx1Z2luIHNwZWMgbWF5IHByb3ZpZGUgYSBzdGF0ZSBmaWVsZCAodW5kZXIgaXRzXG4vLyBbYHN0YXRlYF0oI3N0YXRlLlBsdWdpblNwZWMuc3RhdGUpIHByb3BlcnR5KSBvZiB0aGlzIHR5cGUsIHdoaWNoXG4vLyBkZXNjcmliZXMgdGhlIHN0YXRlIGl0IHdhbnRzIHRvIGtlZXAuIEZ1bmN0aW9ucyBwcm92aWRlZCBoZXJlIGFyZVxuLy8gYWx3YXlzIGNhbGxlZCB3aXRoIHRoZSBwbHVnaW4gaW5zdGFuY2UgYXMgdGhlaXIgYHRoaXNgIGJpbmRpbmcuXG4vL1xuLy8gICBpbml0OjogKGNvbmZpZzogT2JqZWN0LCBpbnN0YW5jZTogRWRpdG9yU3RhdGUpIOKGkiBUXG4vLyAgIEluaXRpYWxpemUgdGhlIHZhbHVlIG9mIHRoZSBmaWVsZC4gYGNvbmZpZ2Agd2lsbCBiZSB0aGUgb2JqZWN0XG4vLyAgIHBhc3NlZCB0byBbYEVkaXRvclN0YXRlLmNyZWF0ZWBdKCNzdGF0ZS5FZGl0b3JTdGF0ZV5jcmVhdGUpLiBOb3RlXG4vLyAgIHRoYXQgYGluc3RhbmNlYCBpcyBhIGhhbGYtaW5pdGlhbGl6ZWQgc3RhdGUgaW5zdGFuY2UsIGFuZCB3aWxsXG4vLyAgIG5vdCBoYXZlIHZhbHVlcyBmb3IgcGx1Z2luIGZpZWxkcyBpbml0aWFsaXplZCBhZnRlciB0aGlzIG9uZS5cbi8vXG4vLyAgIGFwcGx5OjogKHRyOiBUcmFuc2FjdGlvbiwgdmFsdWU6IFQsIG9sZFN0YXRlOiBFZGl0b3JTdGF0ZSwgbmV3U3RhdGU6IEVkaXRvclN0YXRlKSDihpIgVFxuLy8gICBBcHBseSB0aGUgZ2l2ZW4gdHJhbnNhY3Rpb24gdG8gdGhpcyBzdGF0ZSBmaWVsZCwgcHJvZHVjaW5nIGEgbmV3XG4vLyAgIGZpZWxkIHZhbHVlLiBOb3RlIHRoYXQgdGhlIGBuZXdTdGF0ZWAgYXJndW1lbnQgaXMgYWdhaW4gYSBwYXJ0aWFsbHlcbi8vICAgY29uc3RydWN0ZWQgc3RhdGUgZG9lcyBub3QgeWV0IGNvbnRhaW4gdGhlIHN0YXRlIGZyb20gcGx1Z2luc1xuLy8gICBjb21pbmcgYWZ0ZXIgdGhpcyBvbmUuXG4vL1xuLy8gICB0b0pTT046OiA/KHZhbHVlOiBUKSDihpIgKlxuLy8gICBDb252ZXJ0IHRoaXMgZmllbGQgdG8gSlNPTi4gT3B0aW9uYWwsIGNhbiBiZSBsZWZ0IG9mZiB0byBkaXNhYmxlXG4vLyAgIEpTT04gc2VyaWFsaXphdGlvbiBmb3IgdGhlIGZpZWxkLlxuLy9cbi8vICAgZnJvbUpTT046OiA/KGNvbmZpZzogT2JqZWN0LCB2YWx1ZTogKiwgc3RhdGU6IEVkaXRvclN0YXRlKSDihpIgVFxuLy8gICBEZXNlcmlhbGl6ZSB0aGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGlzIGZpZWxkLiBOb3RlIHRoYXQgdGhlXG4vLyAgIGBzdGF0ZWAgYXJndW1lbnQgaXMgYWdhaW4gYSBoYWxmLWluaXRpYWxpemVkIHN0YXRlLlxuXG52YXIga2V5cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleShuYW1lKSB7XG4gIGlmIChuYW1lIGluIGtleXMpIHsgcmV0dXJuIG5hbWUgKyBcIiRcIiArICsra2V5c1tuYW1lXSB9XG4gIGtleXNbbmFtZV0gPSAwO1xuICByZXR1cm4gbmFtZSArIFwiJFwiXG59XG5cbi8vIDo6LSBBIGtleSBpcyB1c2VkIHRvIFt0YWddKCNzdGF0ZS5QbHVnaW5TcGVjLmtleSlcbi8vIHBsdWdpbnMgaW4gYSB3YXkgdGhhdCBtYWtlcyBpdCBwb3NzaWJsZSB0byBmaW5kIHRoZW0sIGdpdmVuIGFuXG4vLyBlZGl0b3Igc3RhdGUuIEFzc2lnbmluZyBhIGtleSBkb2VzIG1lYW4gb25seSBvbmUgcGx1Z2luIG9mIHRoYXRcbi8vIHR5cGUgY2FuIGJlIGFjdGl2ZSBpbiBhIHN0YXRlLlxudmFyIFBsdWdpbktleSA9IGZ1bmN0aW9uIFBsdWdpbktleShuYW1lKSB7XG5pZiAoIG5hbWUgPT09IHZvaWQgMCApIG5hbWUgPSBcImtleVwiO1xuIHRoaXMua2V5ID0gY3JlYXRlS2V5KG5hbWUpOyB9O1xuXG4vLyA6OiAoRWRpdG9yU3RhdGUpIOKGkiA/UGx1Z2luXG4vLyBHZXQgdGhlIGFjdGl2ZSBwbHVnaW4gd2l0aCB0aGlzIGtleSwgaWYgYW55LCBmcm9tIGFuIGVkaXRvclxuLy8gc3RhdGUuXG5QbHVnaW5LZXkucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoc3RhdGUpIHsgcmV0dXJuIHN0YXRlLmNvbmZpZy5wbHVnaW5zQnlLZXlbdGhpcy5rZXldIH07XG5cbi8vIDo6IChFZGl0b3JTdGF0ZSkg4oaSID9hbnlcbi8vIEdldCB0aGUgcGx1Z2luJ3Mgc3RhdGUgZnJvbSBhbiBlZGl0b3Igc3RhdGUuXG5QbHVnaW5LZXkucHJvdG90eXBlLmdldFN0YXRlID0gZnVuY3Rpb24gZ2V0U3RhdGUgKHN0YXRlKSB7IHJldHVybiBzdGF0ZVt0aGlzLmtleV0gfTtcblxuZXhwb3J0IHsgQWxsU2VsZWN0aW9uLCBFZGl0b3JTdGF0ZSwgTm9kZVNlbGVjdGlvbiwgUGx1Z2luLCBQbHVnaW5LZXksIFNlbGVjdGlvbiwgU2VsZWN0aW9uUmFuZ2UsIFRleHRTZWxlY3Rpb24sIFRyYW5zYWN0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lcy5qcy5tYXBcbiIsImltcG9ydCB7IFJlcGxhY2VFcnJvciwgU2xpY2UsIEZyYWdtZW50LCBNYXJrVHlwZSB9IGZyb20gJ3Byb3NlbWlycm9yLW1vZGVsJztcblxuLy8gTWFwcGFibGU6OiBpbnRlcmZhY2Vcbi8vIFRoZXJlIGFyZSBzZXZlcmFsIHRoaW5ncyB0aGF0IHBvc2l0aW9ucyBjYW4gYmUgbWFwcGVkIHRocm91Z2guXG4vLyBTdWNoIG9iamVjdHMgY29uZm9ybSB0byB0aGlzIGludGVyZmFjZS5cbi8vXG4vLyAgIG1hcDo6IChwb3M6IG51bWJlciwgYXNzb2M6ID9udW1iZXIpIOKGkiBudW1iZXJcbi8vICAgTWFwIGEgcG9zaXRpb24gdGhyb3VnaCB0aGlzIG9iamVjdC4gV2hlbiBnaXZlbiwgYGFzc29jYCAoc2hvdWxkXG4vLyAgIGJlIC0xIG9yIDEsIGRlZmF1bHRzIHRvIDEpIGRldGVybWluZXMgd2l0aCB3aGljaCBzaWRlIHRoZVxuLy8gICBwb3NpdGlvbiBpcyBhc3NvY2lhdGVkLCB3aGljaCBkZXRlcm1pbmVzIGluIHdoaWNoIGRpcmVjdGlvbiB0b1xuLy8gICBtb3ZlIHdoZW4gYSBjaHVuayBvZiBjb250ZW50IGlzIGluc2VydGVkIGF0IHRoZSBtYXBwZWQgcG9zaXRpb24uXG4vL1xuLy8gICBtYXBSZXN1bHQ6OiAocG9zOiBudW1iZXIsIGFzc29jOiA/bnVtYmVyKSDihpIgTWFwUmVzdWx0XG4vLyAgIE1hcCBhIHBvc2l0aW9uLCBhbmQgcmV0dXJuIGFuIG9iamVjdCBjb250YWluaW5nIGFkZGl0aW9uYWxcbi8vICAgaW5mb3JtYXRpb24gYWJvdXQgdGhlIG1hcHBpbmcuIFRoZSByZXN1bHQncyBgZGVsZXRlZGAgZmllbGQgdGVsbHNcbi8vICAgeW91IHdoZXRoZXIgdGhlIHBvc2l0aW9uIHdhcyBkZWxldGVkIChjb21wbGV0ZWx5IGVuY2xvc2VkIGluIGFcbi8vICAgcmVwbGFjZWQgcmFuZ2UpIGR1cmluZyB0aGUgbWFwcGluZy4gV2hlbiBjb250ZW50IG9uIG9ubHkgb25lIHNpZGVcbi8vICAgaXMgZGVsZXRlZCwgdGhlIHBvc2l0aW9uIGl0c2VsZiBpcyBvbmx5IGNvbnNpZGVyZWQgZGVsZXRlZCB3aGVuXG4vLyAgIGBhc3NvY2AgcG9pbnRzIGluIHRoZSBkaXJlY3Rpb24gb2YgdGhlIGRlbGV0ZWQgY29udGVudC5cblxuLy8gUmVjb3ZlcnkgdmFsdWVzIGVuY29kZSBhIHJhbmdlIGluZGV4IGFuZCBhbiBvZmZzZXQuIFRoZXkgYXJlXG4vLyByZXByZXNlbnRlZCBhcyBudW1iZXJzLCBiZWNhdXNlIHRvbnMgb2YgdGhlbSB3aWxsIGJlIGNyZWF0ZWQgd2hlblxuLy8gbWFwcGluZywgZm9yIGV4YW1wbGUsIGEgbGFyZ2UgbnVtYmVyIG9mIGRlY29yYXRpb25zLiBUaGUgbnVtYmVyJ3Ncbi8vIGxvd2VyIDE2IGJpdHMgcHJvdmlkZSB0aGUgaW5kZXgsIHRoZSByZW1haW5pbmcgYml0cyB0aGUgb2Zmc2V0LlxuLy9cbi8vIE5vdGU6IFdlIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGJpdCBzaGlmdCBvcGVyYXRvcnMgdG8gZW4tIGFuZFxuLy8gZGVjb2RlIHRoZXNlLCBzaW5jZSB0aG9zZSBjbGlwIHRvIDMyIGJpdHMsIHdoaWNoIHdlIG1pZ2h0IGluIHJhcmVcbi8vIGNhc2VzIHdhbnQgdG8gb3ZlcmZsb3cuIEEgNjQtYml0IGZsb2F0IGNhbiByZXByZXNlbnQgNDgtYml0XG4vLyBpbnRlZ2VycyBwcmVjaXNlbHkuXG5cbnZhciBsb3dlcjE2ID0gMHhmZmZmO1xudmFyIGZhY3RvcjE2ID0gTWF0aC5wb3coMiwgMTYpO1xuXG5mdW5jdGlvbiBtYWtlUmVjb3ZlcihpbmRleCwgb2Zmc2V0KSB7IHJldHVybiBpbmRleCArIG9mZnNldCAqIGZhY3RvcjE2IH1cbmZ1bmN0aW9uIHJlY292ZXJJbmRleCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgJiBsb3dlcjE2IH1cbmZ1bmN0aW9uIHJlY292ZXJPZmZzZXQodmFsdWUpIHsgcmV0dXJuICh2YWx1ZSAtICh2YWx1ZSAmIGxvd2VyMTYpKSAvIGZhY3RvcjE2IH1cblxuLy8gOjotIEFuIG9iamVjdCByZXByZXNlbnRpbmcgYSBtYXBwZWQgcG9zaXRpb24gd2l0aCBleHRyYVxuLy8gaW5mb3JtYXRpb24uXG52YXIgTWFwUmVzdWx0ID0gZnVuY3Rpb24gTWFwUmVzdWx0KHBvcywgZGVsZXRlZCwgcmVjb3Zlcikge1xuICBpZiAoIGRlbGV0ZWQgPT09IHZvaWQgMCApIGRlbGV0ZWQgPSBmYWxzZTtcbiAgaWYgKCByZWNvdmVyID09PSB2b2lkIDAgKSByZWNvdmVyID0gbnVsbDtcblxuICAvLyA6OiBudW1iZXIgVGhlIG1hcHBlZCB2ZXJzaW9uIG9mIHRoZSBwb3NpdGlvbi5cbiAgdGhpcy5wb3MgPSBwb3M7XG4gIC8vIDo6IGJvb2wgVGVsbHMgeW91IHdoZXRoZXIgdGhlIHBvc2l0aW9uIHdhcyBkZWxldGVkLCB0aGF0IGlzLFxuICAvLyB3aGV0aGVyIHRoZSBzdGVwIHJlbW92ZWQgaXRzIHN1cnJvdW5kaW5ncyBmcm9tIHRoZSBkb2N1bWVudC5cbiAgdGhpcy5kZWxldGVkID0gZGVsZXRlZDtcbiAgdGhpcy5yZWNvdmVyID0gcmVjb3Zlcjtcbn07XG5cbi8vIDo6IGNsYXNzIGV4dGVuZHMgTWFwcGFibGVcbi8vIEEgbWFwIGRlc2NyaWJpbmcgdGhlIGRlbGV0aW9ucyBhbmQgaW5zZXJ0aW9ucyBtYWRlIGJ5IGEgc3RlcCwgd2hpY2hcbi8vIGNhbiBiZSB1c2VkIHRvIGZpbmQgdGhlIGNvcnJlc3BvbmRlbmNlIGJldHdlZW4gcG9zaXRpb25zIGluIHRoZVxuLy8gcHJlLXN0ZXAgdmVyc2lvbiBvZiBhIGRvY3VtZW50IGFuZCB0aGUgc2FtZSBwb3NpdGlvbiBpbiB0aGVcbi8vIHBvc3Qtc3RlcCB2ZXJzaW9uLlxudmFyIFN0ZXBNYXAgPSBmdW5jdGlvbiBTdGVwTWFwKHJhbmdlcywgaW52ZXJ0ZWQpIHtcbiAgaWYgKCBpbnZlcnRlZCA9PT0gdm9pZCAwICkgaW52ZXJ0ZWQgPSBmYWxzZTtcblxuICB0aGlzLnJhbmdlcyA9IHJhbmdlcztcbiAgdGhpcy5pbnZlcnRlZCA9IGludmVydGVkO1xufTtcblxuU3RlcE1hcC5wcm90b3R5cGUucmVjb3ZlciA9IGZ1bmN0aW9uIHJlY292ZXIgKHZhbHVlKSB7XG4gIHZhciBkaWZmID0gMCwgaW5kZXggPSByZWNvdmVySW5kZXgodmFsdWUpO1xuICBpZiAoIXRoaXMuaW52ZXJ0ZWQpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmRleDsgaSsrKVxuICAgIHsgZGlmZiArPSB0aGlzLnJhbmdlc1tpICogMyArIDJdIC0gdGhpcy5yYW5nZXNbaSAqIDMgKyAxXTsgfSB9XG4gIHJldHVybiB0aGlzLnJhbmdlc1tpbmRleCAqIDNdICsgZGlmZiArIHJlY292ZXJPZmZzZXQodmFsdWUpXG59O1xuXG4vLyA6IChudW1iZXIsID9udW1iZXIpIOKGkiBNYXBSZXN1bHRcblN0ZXBNYXAucHJvdG90eXBlLm1hcFJlc3VsdCA9IGZ1bmN0aW9uIG1hcFJlc3VsdCAocG9zLCBhc3NvYykge1xuICBpZiAoIGFzc29jID09PSB2b2lkIDAgKSBhc3NvYyA9IDE7XG4gcmV0dXJuIHRoaXMuX21hcChwb3MsIGFzc29jLCBmYWxzZSkgfTtcblxuLy8gOiAobnVtYmVyLCA/bnVtYmVyKSDihpIgbnVtYmVyXG5TdGVwTWFwLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiBtYXAgKHBvcywgYXNzb2MpIHtcbiAgaWYgKCBhc3NvYyA9PT0gdm9pZCAwICkgYXNzb2MgPSAxO1xuIHJldHVybiB0aGlzLl9tYXAocG9zLCBhc3NvYywgdHJ1ZSkgfTtcblxuU3RlcE1hcC5wcm90b3R5cGUuX21hcCA9IGZ1bmN0aW9uIF9tYXAgKHBvcywgYXNzb2MsIHNpbXBsZSkge1xuICB2YXIgZGlmZiA9IDAsIG9sZEluZGV4ID0gdGhpcy5pbnZlcnRlZCA/IDIgOiAxLCBuZXdJbmRleCA9IHRoaXMuaW52ZXJ0ZWQgPyAxIDogMjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJhbmdlcy5sZW5ndGg7IGkgKz0gMykge1xuICAgIHZhciBzdGFydCA9IHRoaXMucmFuZ2VzW2ldIC0gKHRoaXMuaW52ZXJ0ZWQgPyBkaWZmIDogMCk7XG4gICAgaWYgKHN0YXJ0ID4gcG9zKSB7IGJyZWFrIH1cbiAgICB2YXIgb2xkU2l6ZSA9IHRoaXMucmFuZ2VzW2kgKyBvbGRJbmRleF0sIG5ld1NpemUgPSB0aGlzLnJhbmdlc1tpICsgbmV3SW5kZXhdLCBlbmQgPSBzdGFydCArIG9sZFNpemU7XG4gICAgaWYgKHBvcyA8PSBlbmQpIHtcbiAgICAgIHZhciBzaWRlID0gIW9sZFNpemUgPyBhc3NvYyA6IHBvcyA9PSBzdGFydCA/IC0xIDogcG9zID09IGVuZCA/IDEgOiBhc3NvYztcbiAgICAgIHZhciByZXN1bHQgPSBzdGFydCArIGRpZmYgKyAoc2lkZSA8IDAgPyAwIDogbmV3U2l6ZSk7XG4gICAgICBpZiAoc2ltcGxlKSB7IHJldHVybiByZXN1bHQgfVxuICAgICAgdmFyIHJlY292ZXIgPSBwb3MgPT0gKGFzc29jIDwgMCA/IHN0YXJ0IDogZW5kKSA/IG51bGwgOiBtYWtlUmVjb3ZlcihpIC8gMywgcG9zIC0gc3RhcnQpO1xuICAgICAgcmV0dXJuIG5ldyBNYXBSZXN1bHQocmVzdWx0LCBhc3NvYyA8IDAgPyBwb3MgIT0gc3RhcnQgOiBwb3MgIT0gZW5kLCByZWNvdmVyKVxuICAgIH1cbiAgICBkaWZmICs9IG5ld1NpemUgLSBvbGRTaXplO1xuICB9XG4gIHJldHVybiBzaW1wbGUgPyBwb3MgKyBkaWZmIDogbmV3IE1hcFJlc3VsdChwb3MgKyBkaWZmKVxufTtcblxuU3RlcE1hcC5wcm90b3R5cGUudG91Y2hlcyA9IGZ1bmN0aW9uIHRvdWNoZXMgKHBvcywgcmVjb3Zlcikge1xuICB2YXIgZGlmZiA9IDAsIGluZGV4ID0gcmVjb3ZlckluZGV4KHJlY292ZXIpO1xuICB2YXIgb2xkSW5kZXggPSB0aGlzLmludmVydGVkID8gMiA6IDEsIG5ld0luZGV4ID0gdGhpcy5pbnZlcnRlZCA/IDEgOiAyO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmFuZ2VzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5yYW5nZXNbaV0gLSAodGhpcy5pbnZlcnRlZCA/IGRpZmYgOiAwKTtcbiAgICBpZiAoc3RhcnQgPiBwb3MpIHsgYnJlYWsgfVxuICAgIHZhciBvbGRTaXplID0gdGhpcy5yYW5nZXNbaSArIG9sZEluZGV4XSwgZW5kID0gc3RhcnQgKyBvbGRTaXplO1xuICAgIGlmIChwb3MgPD0gZW5kICYmIGkgPT0gaW5kZXggKiAzKSB7IHJldHVybiB0cnVlIH1cbiAgICBkaWZmICs9IHRoaXMucmFuZ2VzW2kgKyBuZXdJbmRleF0gLSBvbGRTaXplO1xuICB9XG4gIHJldHVybiBmYWxzZVxufTtcblxuLy8gOjogKChvbGRTdGFydDogbnVtYmVyLCBvbGRFbmQ6IG51bWJlciwgbmV3U3RhcnQ6IG51bWJlciwgbmV3RW5kOiBudW1iZXIpKVxuLy8gQ2FsbHMgdGhlIGdpdmVuIGZ1bmN0aW9uIG9uIGVhY2ggb2YgdGhlIGNoYW5nZWQgcmFuZ2VzIGluY2x1ZGVkIGluXG4vLyB0aGlzIG1hcC5cblN0ZXBNYXAucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoIChmKSB7XG4gIHZhciBvbGRJbmRleCA9IHRoaXMuaW52ZXJ0ZWQgPyAyIDogMSwgbmV3SW5kZXggPSB0aGlzLmludmVydGVkID8gMSA6IDI7XG4gIGZvciAodmFyIGkgPSAwLCBkaWZmID0gMDsgaSA8IHRoaXMucmFuZ2VzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5yYW5nZXNbaV0sIG9sZFN0YXJ0ID0gc3RhcnQgLSAodGhpcy5pbnZlcnRlZCA/IGRpZmYgOiAwKSwgbmV3U3RhcnQgPSBzdGFydCArICh0aGlzLmludmVydGVkID8gMCA6IGRpZmYpO1xuICAgIHZhciBvbGRTaXplID0gdGhpcy5yYW5nZXNbaSArIG9sZEluZGV4XSwgbmV3U2l6ZSA9IHRoaXMucmFuZ2VzW2kgKyBuZXdJbmRleF07XG4gICAgZihvbGRTdGFydCwgb2xkU3RhcnQgKyBvbGRTaXplLCBuZXdTdGFydCwgbmV3U3RhcnQgKyBuZXdTaXplKTtcbiAgICBkaWZmICs9IG5ld1NpemUgLSBvbGRTaXplO1xuICB9XG59O1xuXG4vLyA6OiAoKSDihpIgU3RlcE1hcFxuLy8gQ3JlYXRlIGFuIGludmVydGVkIHZlcnNpb24gb2YgdGhpcyBtYXAuIFRoZSByZXN1bHQgY2FuIGJlIHVzZWQgdG9cbi8vIG1hcCBwb3NpdGlvbnMgaW4gdGhlIHBvc3Qtc3RlcCBkb2N1bWVudCB0byB0aGUgcHJlLXN0ZXAgZG9jdW1lbnQuXG5TdGVwTWFwLnByb3RvdHlwZS5pbnZlcnQgPSBmdW5jdGlvbiBpbnZlcnQgKCkge1xuICByZXR1cm4gbmV3IFN0ZXBNYXAodGhpcy5yYW5nZXMsICF0aGlzLmludmVydGVkKVxufTtcblxuU3RlcE1hcC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHJldHVybiAodGhpcy5pbnZlcnRlZCA/IFwiLVwiIDogXCJcIikgKyBKU09OLnN0cmluZ2lmeSh0aGlzLnJhbmdlcylcbn07XG5cbi8vIDo6IChuOiBudW1iZXIpIOKGkiBTdGVwTWFwXG4vLyBDcmVhdGUgYSBtYXAgdGhhdCBtb3ZlcyBhbGwgcG9zaXRpb25zIGJ5IG9mZnNldCBgbmAgKHdoaWNoIG1heSBiZVxuLy8gbmVnYXRpdmUpLiBUaGlzIGNhbiBiZSB1c2VmdWwgd2hlbiBhcHBseWluZyBzdGVwcyBtZWFudCBmb3IgYVxuLy8gc3ViLWRvY3VtZW50IHRvIGEgbGFyZ2VyIGRvY3VtZW50LCBvciB2aWNlLXZlcnNhLlxuU3RlcE1hcC5vZmZzZXQgPSBmdW5jdGlvbiBvZmZzZXQgKG4pIHtcbiAgcmV0dXJuIG4gPT0gMCA/IFN0ZXBNYXAuZW1wdHkgOiBuZXcgU3RlcE1hcChuIDwgMCA/IFswLCAtbiwgMF0gOiBbMCwgMCwgbl0pXG59O1xuXG5TdGVwTWFwLmVtcHR5ID0gbmV3IFN0ZXBNYXAoW10pO1xuXG4vLyA6OiBjbGFzcyBleHRlbmRzIE1hcHBhYmxlXG4vLyBBIG1hcHBpbmcgcmVwcmVzZW50cyBhIHBpcGVsaW5lIG9mIHplcm8gb3IgbW9yZSBbc3RlcFxuLy8gbWFwc10oI3RyYW5zZm9ybS5TdGVwTWFwKS4gSXQgaGFzIHNwZWNpYWwgcHJvdmlzaW9ucyBmb3IgbG9zc2xlc3NseVxuLy8gaGFuZGxpbmcgbWFwcGluZyBwb3NpdGlvbnMgdGhyb3VnaCBhIHNlcmllcyBvZiBzdGVwcyBpbiB3aGljaCBzb21lXG4vLyBzdGVwcyBhcmUgaW52ZXJ0ZWQgdmVyc2lvbnMgb2YgZWFybGllciBzdGVwcy4gKFRoaXMgY29tZXMgdXAgd2hlblxuLy8g4oCYW3JlYmFzaW5nXSgvZG9jcy9ndWlkZS8jdHJhbnNmb3JtLnJlYmFzaW5nKeKAmSBzdGVwcyBmb3Jcbi8vIGNvbGxhYm9yYXRpb24gb3IgaGlzdG9yeSBtYW5hZ2VtZW50LilcbnZhciBNYXBwaW5nID0gZnVuY3Rpb24gTWFwcGluZyhtYXBzLCBtaXJyb3IsIGZyb20sIHRvKSB7XG4gIC8vIDo6IFtTdGVwTWFwXVxuICAvLyBUaGUgc3RlcCBtYXBzIGluIHRoaXMgbWFwcGluZy5cbiAgdGhpcy5tYXBzID0gbWFwcyB8fCBbXTtcbiAgLy8gOjogbnVtYmVyXG4gIC8vIFRoZSBzdGFydGluZyBwb3NpdGlvbiBpbiB0aGUgYG1hcHNgIGFycmF5LCB1c2VkIHdoZW4gYG1hcGAgb3JcbiAgLy8gYG1hcFJlc3VsdGAgaXMgY2FsbGVkLlxuICB0aGlzLmZyb20gPSBmcm9tIHx8IDA7XG4gIC8vIDo6IG51bWJlclxuICAvLyBUaGUgZW5kIHBvc2l0aW9uIGluIHRoZSBgbWFwc2AgYXJyYXkuXG4gIHRoaXMudG8gPSB0byA9PSBudWxsID8gdGhpcy5tYXBzLmxlbmd0aCA6IHRvO1xuICB0aGlzLm1pcnJvciA9IG1pcnJvcjtcbn07XG5cbi8vIDo6ICg/bnVtYmVyLCA/bnVtYmVyKSDihpIgTWFwcGluZ1xuLy8gQ3JlYXRlIGEgbWFwcGluZyB0aGF0IG1hcHMgb25seSB0aHJvdWdoIGEgcGFydCBvZiB0aGlzIG9uZS5cbk1hcHBpbmcucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKGZyb20sIHRvKSB7XG4gICAgaWYgKCBmcm9tID09PSB2b2lkIDAgKSBmcm9tID0gMDtcbiAgICBpZiAoIHRvID09PSB2b2lkIDAgKSB0byA9IHRoaXMubWFwcy5sZW5ndGg7XG5cbiAgcmV0dXJuIG5ldyBNYXBwaW5nKHRoaXMubWFwcywgdGhpcy5taXJyb3IsIGZyb20sIHRvKVxufTtcblxuTWFwcGluZy5wcm90b3R5cGUuY29weSA9IGZ1bmN0aW9uIGNvcHkgKCkge1xuICByZXR1cm4gbmV3IE1hcHBpbmcodGhpcy5tYXBzLnNsaWNlKCksIHRoaXMubWlycm9yICYmIHRoaXMubWlycm9yLnNsaWNlKCksIHRoaXMuZnJvbSwgdGhpcy50bylcbn07XG5cbi8vIDo6IChTdGVwTWFwLCA/bnVtYmVyKVxuLy8gQWRkIGEgc3RlcCBtYXAgdG8gdGhlIGVuZCBvZiB0aGlzIG1hcHBpbmcuIElmIGBtaXJyb3JzYCBpc1xuLy8gZ2l2ZW4sIGl0IHNob3VsZCBiZSB0aGUgaW5kZXggb2YgdGhlIHN0ZXAgbWFwIHRoYXQgaXMgdGhlIG1pcnJvclxuLy8gaW1hZ2Ugb2YgdGhpcyBvbmUuXG5NYXBwaW5nLnByb3RvdHlwZS5hcHBlbmRNYXAgPSBmdW5jdGlvbiBhcHBlbmRNYXAgKG1hcCwgbWlycm9ycykge1xuICB0aGlzLnRvID0gdGhpcy5tYXBzLnB1c2gobWFwKTtcbiAgaWYgKG1pcnJvcnMgIT0gbnVsbCkgeyB0aGlzLnNldE1pcnJvcih0aGlzLm1hcHMubGVuZ3RoIC0gMSwgbWlycm9ycyk7IH1cbn07XG5cbi8vIDo6IChNYXBwaW5nKVxuLy8gQWRkIGFsbCB0aGUgc3RlcCBtYXBzIGluIGEgZ2l2ZW4gbWFwcGluZyB0byB0aGlzIG9uZSAocHJlc2VydmluZ1xuLy8gbWlycm9yaW5nIGluZm9ybWF0aW9uKS5cbk1hcHBpbmcucHJvdG90eXBlLmFwcGVuZE1hcHBpbmcgPSBmdW5jdGlvbiBhcHBlbmRNYXBwaW5nIChtYXBwaW5nKSB7XG4gIGZvciAodmFyIGkgPSAwLCBzdGFydFNpemUgPSB0aGlzLm1hcHMubGVuZ3RoOyBpIDwgbWFwcGluZy5tYXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG1pcnIgPSBtYXBwaW5nLmdldE1pcnJvcihpKTtcbiAgICB0aGlzLmFwcGVuZE1hcChtYXBwaW5nLm1hcHNbaV0sIG1pcnIgIT0gbnVsbCAmJiBtaXJyIDwgaSA/IHN0YXJ0U2l6ZSArIG1pcnIgOiBudWxsKTtcbiAgfVxufTtcblxuLy8gOjogKG51bWJlcikg4oaSID9udW1iZXJcbi8vIEZpbmRzIHRoZSBvZmZzZXQgb2YgdGhlIHN0ZXAgbWFwIHRoYXQgbWlycm9ycyB0aGUgbWFwIGF0IHRoZVxuLy8gZ2l2ZW4gb2Zmc2V0LCBpbiB0aGlzIG1hcHBpbmcgKGFzIHBlciB0aGUgc2Vjb25kIGFyZ3VtZW50IHRvXG4vLyBgYXBwZW5kTWFwYCkuXG5NYXBwaW5nLnByb3RvdHlwZS5nZXRNaXJyb3IgPSBmdW5jdGlvbiBnZXRNaXJyb3IgKG4pIHtcbiAgaWYgKHRoaXMubWlycm9yKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5taXJyb3IubGVuZ3RoOyBpKyspXG4gICAgeyBpZiAodGhpcy5taXJyb3JbaV0gPT0gbikgeyByZXR1cm4gdGhpcy5taXJyb3JbaSArIChpICUgMiA/IC0xIDogMSldIH0gfSB9XG59O1xuXG5NYXBwaW5nLnByb3RvdHlwZS5zZXRNaXJyb3IgPSBmdW5jdGlvbiBzZXRNaXJyb3IgKG4sIG0pIHtcbiAgaWYgKCF0aGlzLm1pcnJvcikgeyB0aGlzLm1pcnJvciA9IFtdOyB9XG4gIHRoaXMubWlycm9yLnB1c2gobiwgbSk7XG59O1xuXG4vLyA6OiAoTWFwcGluZylcbi8vIEFwcGVuZCB0aGUgaW52ZXJzZSBvZiB0aGUgZ2l2ZW4gbWFwcGluZyB0byB0aGlzIG9uZS5cbk1hcHBpbmcucHJvdG90eXBlLmFwcGVuZE1hcHBpbmdJbnZlcnRlZCA9IGZ1bmN0aW9uIGFwcGVuZE1hcHBpbmdJbnZlcnRlZCAobWFwcGluZykge1xuICBmb3IgKHZhciBpID0gbWFwcGluZy5tYXBzLmxlbmd0aCAtIDEsIHRvdGFsU2l6ZSA9IHRoaXMubWFwcy5sZW5ndGggKyBtYXBwaW5nLm1hcHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBtaXJyID0gbWFwcGluZy5nZXRNaXJyb3IoaSk7XG4gICAgdGhpcy5hcHBlbmRNYXAobWFwcGluZy5tYXBzW2ldLmludmVydCgpLCBtaXJyICE9IG51bGwgJiYgbWlyciA+IGkgPyB0b3RhbFNpemUgLSBtaXJyIC0gMSA6IG51bGwpO1xuICB9XG59O1xuXG4vLyA6OiAoKSDihpIgTWFwcGluZ1xuLy8gQ3JlYXRlIGFuIGludmVydGVkIHZlcnNpb24gb2YgdGhpcyBtYXBwaW5nLlxuTWFwcGluZy5wcm90b3R5cGUuaW52ZXJ0ID0gZnVuY3Rpb24gaW52ZXJ0ICgpIHtcbiAgdmFyIGludmVyc2UgPSBuZXcgTWFwcGluZztcbiAgaW52ZXJzZS5hcHBlbmRNYXBwaW5nSW52ZXJ0ZWQodGhpcyk7XG4gIHJldHVybiBpbnZlcnNlXG59O1xuXG4vLyA6IChudW1iZXIsID9udW1iZXIpIOKGkiBudW1iZXJcbi8vIE1hcCBhIHBvc2l0aW9uIHRocm91Z2ggdGhpcyBtYXBwaW5nLlxuTWFwcGluZy5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gbWFwIChwb3MsIGFzc29jKSB7XG4gICAgaWYgKCBhc3NvYyA9PT0gdm9pZCAwICkgYXNzb2MgPSAxO1xuXG4gIGlmICh0aGlzLm1pcnJvcikgeyByZXR1cm4gdGhpcy5fbWFwKHBvcywgYXNzb2MsIHRydWUpIH1cbiAgZm9yICh2YXIgaSA9IHRoaXMuZnJvbTsgaSA8IHRoaXMudG87IGkrKylcbiAgICB7IHBvcyA9IHRoaXMubWFwc1tpXS5tYXAocG9zLCBhc3NvYyk7IH1cbiAgcmV0dXJuIHBvc1xufTtcblxuLy8gOiAobnVtYmVyLCA/bnVtYmVyKSDihpIgTWFwUmVzdWx0XG4vLyBNYXAgYSBwb3NpdGlvbiB0aHJvdWdoIHRoaXMgbWFwcGluZywgcmV0dXJuaW5nIGEgbWFwcGluZ1xuLy8gcmVzdWx0LlxuTWFwcGluZy5wcm90b3R5cGUubWFwUmVzdWx0ID0gZnVuY3Rpb24gbWFwUmVzdWx0IChwb3MsIGFzc29jKSB7XG4gIGlmICggYXNzb2MgPT09IHZvaWQgMCApIGFzc29jID0gMTtcbiByZXR1cm4gdGhpcy5fbWFwKHBvcywgYXNzb2MsIGZhbHNlKSB9O1xuXG5NYXBwaW5nLnByb3RvdHlwZS5fbWFwID0gZnVuY3Rpb24gX21hcCAocG9zLCBhc3NvYywgc2ltcGxlKSB7XG4gIHZhciBkZWxldGVkID0gZmFsc2U7XG5cbiAgZm9yICh2YXIgaSA9IHRoaXMuZnJvbTsgaSA8IHRoaXMudG87IGkrKykge1xuICAgIHZhciBtYXAgPSB0aGlzLm1hcHNbaV0sIHJlc3VsdCA9IG1hcC5tYXBSZXN1bHQocG9zLCBhc3NvYyk7XG4gICAgaWYgKHJlc3VsdC5yZWNvdmVyICE9IG51bGwpIHtcbiAgICAgIHZhciBjb3JyID0gdGhpcy5nZXRNaXJyb3IoaSk7XG4gICAgICBpZiAoY29yciAhPSBudWxsICYmIGNvcnIgPiBpICYmIGNvcnIgPCB0aGlzLnRvKSB7XG4gICAgICAgIGkgPSBjb3JyO1xuICAgICAgICBwb3MgPSB0aGlzLm1hcHNbY29ycl0ucmVjb3ZlcihyZXN1bHQucmVjb3Zlcik7XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdC5kZWxldGVkKSB7IGRlbGV0ZWQgPSB0cnVlOyB9XG4gICAgcG9zID0gcmVzdWx0LnBvcztcbiAgfVxuXG4gIHJldHVybiBzaW1wbGUgPyBwb3MgOiBuZXcgTWFwUmVzdWx0KHBvcywgZGVsZXRlZClcbn07XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybUVycm9yKG1lc3NhZ2UpIHtcbiAgdmFyIGVyciA9IEVycm9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG4gIGVyci5fX3Byb3RvX18gPSBUcmFuc2Zvcm1FcnJvci5wcm90b3R5cGU7XG4gIHJldHVybiBlcnJcbn1cblxuVHJhbnNmb3JtRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuVHJhbnNmb3JtRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHJhbnNmb3JtRXJyb3I7XG5UcmFuc2Zvcm1FcnJvci5wcm90b3R5cGUubmFtZSA9IFwiVHJhbnNmb3JtRXJyb3JcIjtcblxuLy8gOjotIEFic3RyYWN0aW9uIHRvIGJ1aWxkIHVwIGFuZCB0cmFjayBhbiBhcnJheSBvZlxuLy8gW3N0ZXBzXSgjdHJhbnNmb3JtLlN0ZXApIHJlcHJlc2VudGluZyBhIGRvY3VtZW50IHRyYW5zZm9ybWF0aW9uLlxuLy9cbi8vIE1vc3QgdHJhbnNmb3JtaW5nIG1ldGhvZHMgcmV0dXJuIHRoZSBgVHJhbnNmb3JtYCBvYmplY3QgaXRzZWxmLCBzb1xuLy8gdGhhdCB0aGV5IGNhbiBiZSBjaGFpbmVkLlxudmFyIFRyYW5zZm9ybSA9IGZ1bmN0aW9uIFRyYW5zZm9ybShkb2MpIHtcbiAgLy8gOjogTm9kZVxuICAvLyBUaGUgY3VycmVudCBkb2N1bWVudCAodGhlIHJlc3VsdCBvZiBhcHBseWluZyB0aGUgc3RlcHMgaW4gdGhlXG4gIC8vIHRyYW5zZm9ybSkuXG4gIHRoaXMuZG9jID0gZG9jO1xuICAvLyA6OiBbU3RlcF1cbiAgLy8gVGhlIHN0ZXBzIGluIHRoaXMgdHJhbnNmb3JtLlxuICB0aGlzLnN0ZXBzID0gW107XG4gIC8vIDo6IFtOb2RlXVxuICAvLyBUaGUgZG9jdW1lbnRzIGJlZm9yZSBlYWNoIG9mIHRoZSBzdGVwcy5cbiAgdGhpcy5kb2NzID0gW107XG4gIC8vIDo6IE1hcHBpbmdcbiAgLy8gQSBtYXBwaW5nIHdpdGggdGhlIG1hcHMgZm9yIGVhY2ggb2YgdGhlIHN0ZXBzIGluIHRoaXMgdHJhbnNmb3JtLlxuICB0aGlzLm1hcHBpbmcgPSBuZXcgTWFwcGluZztcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGJlZm9yZTogeyBjb25maWd1cmFibGU6IHRydWUgfSxkb2NDaGFuZ2VkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8vIDo6IE5vZGUgVGhlIHN0YXJ0aW5nIGRvY3VtZW50LlxucHJvdG90eXBlQWNjZXNzb3JzLmJlZm9yZS5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmRvY3MubGVuZ3RoID8gdGhpcy5kb2NzWzBdIDogdGhpcy5kb2MgfTtcblxuLy8gOjogKHN0ZXA6IFN0ZXApIOKGkiB0aGlzXG4vLyBBcHBseSBhIG5ldyBzdGVwIGluIHRoaXMgdHJhbnNmb3JtLCBzYXZpbmcgdGhlIHJlc3VsdC4gVGhyb3dzIGFuXG4vLyBlcnJvciB3aGVuIHRoZSBzdGVwIGZhaWxzLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5zdGVwID0gZnVuY3Rpb24gc3RlcCAob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLm1heWJlU3RlcChvYmplY3QpO1xuICBpZiAocmVzdWx0LmZhaWxlZCkgeyB0aHJvdyBuZXcgVHJhbnNmb3JtRXJyb3IocmVzdWx0LmZhaWxlZCkgfVxuICByZXR1cm4gdGhpc1xufTtcblxuLy8gOjogKFN0ZXApIOKGkiBTdGVwUmVzdWx0XG4vLyBUcnkgdG8gYXBwbHkgYSBzdGVwIGluIHRoaXMgdHJhbnNmb3JtYXRpb24sIGlnbm9yaW5nIGl0IGlmIGl0XG4vLyBmYWlscy4gUmV0dXJucyB0aGUgc3RlcCByZXN1bHQuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLm1heWJlU3RlcCA9IGZ1bmN0aW9uIG1heWJlU3RlcCAoc3RlcCkge1xuICB2YXIgcmVzdWx0ID0gc3RlcC5hcHBseSh0aGlzLmRvYyk7XG4gIGlmICghcmVzdWx0LmZhaWxlZCkgeyB0aGlzLmFkZFN0ZXAoc3RlcCwgcmVzdWx0LmRvYyk7IH1cbiAgcmV0dXJuIHJlc3VsdFxufTtcblxuLy8gOjogYm9vbFxuLy8gVHJ1ZSB3aGVuIHRoZSBkb2N1bWVudCBoYXMgYmVlbiBjaGFuZ2VkICh3aGVuIHRoZXJlIGFyZSBhbnlcbi8vIHN0ZXBzKS5cbnByb3RvdHlwZUFjY2Vzc29ycy5kb2NDaGFuZ2VkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuc3RlcHMubGVuZ3RoID4gMFxufTtcblxuVHJhbnNmb3JtLnByb3RvdHlwZS5hZGRTdGVwID0gZnVuY3Rpb24gYWRkU3RlcCAoc3RlcCwgZG9jKSB7XG4gIHRoaXMuZG9jcy5wdXNoKHRoaXMuZG9jKTtcbiAgdGhpcy5zdGVwcy5wdXNoKHN0ZXApO1xuICB0aGlzLm1hcHBpbmcuYXBwZW5kTWFwKHN0ZXAuZ2V0TWFwKCkpO1xuICB0aGlzLmRvYyA9IGRvYztcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBUcmFuc2Zvcm0ucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuZnVuY3Rpb24gbXVzdE92ZXJyaWRlKCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJPdmVycmlkZSBtZVwiKSB9XG5cbnZhciBzdGVwc0J5SUQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4vLyA6Oi0gQSBzdGVwIG9iamVjdCByZXByZXNlbnRzIGFuIGF0b21pYyBjaGFuZ2UuIEl0IGdlbmVyYWxseSBhcHBsaWVzXG4vLyBvbmx5IHRvIHRoZSBkb2N1bWVudCBpdCB3YXMgY3JlYXRlZCBmb3IsIHNpbmNlIHRoZSBwb3NpdGlvbnNcbi8vIHN0b3JlZCBpbiBpdCB3aWxsIG9ubHkgbWFrZSBzZW5zZSBmb3IgdGhhdCBkb2N1bWVudC5cbi8vXG4vLyBOZXcgc3RlcHMgYXJlIGRlZmluZWQgYnkgY3JlYXRpbmcgY2xhc3NlcyB0aGF0IGV4dGVuZCBgU3RlcGAsXG4vLyBvdmVycmlkaW5nIHRoZSBgYXBwbHlgLCBgaW52ZXJ0YCwgYG1hcGAsIGBnZXRNYXBgIGFuZCBgZnJvbUpTT05gXG4vLyBtZXRob2RzLCBhbmQgcmVnaXN0ZXJpbmcgeW91ciBjbGFzcyB3aXRoIGEgdW5pcXVlXG4vLyBKU09OLXNlcmlhbGl6YXRpb24gaWRlbnRpZmllciB1c2luZ1xuLy8gW2BTdGVwLmpzb25JRGBdKCN0cmFuc2Zvcm0uU3RlcF5qc29uSUQpLlxudmFyIFN0ZXAgPSBmdW5jdGlvbiBTdGVwICgpIHt9O1xuXG5TdGVwLnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uIGFwcGx5IChfZG9jKSB7IHJldHVybiBtdXN0T3ZlcnJpZGUoKSB9O1xuXG4vLyA6OiAoKSDihpIgU3RlcE1hcFxuLy8gR2V0IHRoZSBzdGVwIG1hcCB0aGF0IHJlcHJlc2VudHMgdGhlIGNoYW5nZXMgbWFkZSBieSB0aGlzIHN0ZXAsXG4vLyBhbmQgd2hpY2ggY2FuIGJlIHVzZWQgdG8gdHJhbnNmb3JtIGJldHdlZW4gcG9zaXRpb25zIGluIHRoZSBvbGRcbi8vIGFuZCB0aGUgbmV3IGRvY3VtZW50LlxuU3RlcC5wcm90b3R5cGUuZ2V0TWFwID0gZnVuY3Rpb24gZ2V0TWFwICgpIHsgcmV0dXJuIFN0ZXBNYXAuZW1wdHkgfTtcblxuLy8gOjogKGRvYzogTm9kZSkg4oaSIFN0ZXBcbi8vIENyZWF0ZSBhbiBpbnZlcnRlZCB2ZXJzaW9uIG9mIHRoaXMgc3RlcC4gTmVlZHMgdGhlIGRvY3VtZW50IGFzIGl0XG4vLyB3YXMgYmVmb3JlIHRoZSBzdGVwIGFzIGFyZ3VtZW50LlxuU3RlcC5wcm90b3R5cGUuaW52ZXJ0ID0gZnVuY3Rpb24gaW52ZXJ0IChfZG9jKSB7IHJldHVybiBtdXN0T3ZlcnJpZGUoKSB9O1xuXG4vLyA6OiAobWFwcGluZzogTWFwcGFibGUpIOKGkiA/U3RlcFxuLy8gTWFwIHRoaXMgc3RlcCB0aHJvdWdoIGEgbWFwcGFibGUgdGhpbmcsIHJldHVybmluZyBlaXRoZXIgYVxuLy8gdmVyc2lvbiBvZiB0aGF0IHN0ZXAgd2l0aCBpdHMgcG9zaXRpb25zIGFkanVzdGVkLCBvciBgbnVsbGAgaWZcbi8vIHRoZSBzdGVwIHdhcyBlbnRpcmVseSBkZWxldGVkIGJ5IHRoZSBtYXBwaW5nLlxuU3RlcC5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gbWFwIChfbWFwcGluZykgeyByZXR1cm4gbXVzdE92ZXJyaWRlKCkgfTtcblxuLy8gOjogKG90aGVyOiBTdGVwKSDihpIgP1N0ZXBcbi8vIFRyeSB0byBtZXJnZSB0aGlzIHN0ZXAgd2l0aCBhbm90aGVyIG9uZSwgdG8gYmUgYXBwbGllZCBkaXJlY3RseVxuLy8gYWZ0ZXIgaXQuIFJldHVybnMgdGhlIG1lcmdlZCBzdGVwIHdoZW4gcG9zc2libGUsIG51bGwgaWYgdGhlXG4vLyBzdGVwcyBjYW4ndCBiZSBtZXJnZWQuXG5TdGVwLnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uIG1lcmdlIChfb3RoZXIpIHsgcmV0dXJuIG51bGwgfTtcblxuLy8gOjogKCkg4oaSIE9iamVjdFxuLy8gQ3JlYXRlIGEgSlNPTi1zZXJpYWxpemVhYmxlIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgc3RlcC4gV2hlblxuLy8gZGVmaW5pbmcgdGhpcyBmb3IgYSBjdXN0b20gc3ViY2xhc3MsIG1ha2Ugc3VyZSB0aGUgcmVzdWx0IG9iamVjdFxuLy8gaW5jbHVkZXMgdGhlIHN0ZXAgdHlwZSdzIFtKU09OIGlkXSgjdHJhbnNmb3JtLlN0ZXBeanNvbklEKSB1bmRlclxuLy8gdGhlIGBzdGVwVHlwZWAgcHJvcGVydHkuXG5TdGVwLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkgeyByZXR1cm4gbXVzdE92ZXJyaWRlKCkgfTtcblxuLy8gOjogKFNjaGVtYSwgT2JqZWN0KSDihpIgU3RlcFxuLy8gRGVzZXJpYWxpemUgYSBzdGVwIGZyb20gaXRzIEpTT04gcmVwcmVzZW50YXRpb24uIFdpbGwgY2FsbFxuLy8gdGhyb3VnaCB0byB0aGUgc3RlcCBjbGFzcycgb3duIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgbWV0aG9kLlxuU3RlcC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OIChzY2hlbWEsIGpzb24pIHtcbiAgaWYgKCFqc29uIHx8ICFqc29uLnN0ZXBUeXBlKSB7IHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgU3RlcC5mcm9tSlNPTlwiKSB9XG4gIHZhciB0eXBlID0gc3RlcHNCeUlEW2pzb24uc3RlcFR5cGVdO1xuICBpZiAoIXR5cGUpIHsgdGhyb3cgbmV3IFJhbmdlRXJyb3IoKFwiTm8gc3RlcCB0eXBlIFwiICsgKGpzb24uc3RlcFR5cGUpICsgXCIgZGVmaW5lZFwiKSkgfVxuICByZXR1cm4gdHlwZS5mcm9tSlNPTihzY2hlbWEsIGpzb24pXG59O1xuXG4vLyA6OiAoc3RyaW5nLCBjb25zdHJ1Y3RvcjxTdGVwPilcbi8vIFRvIGJlIGFibGUgdG8gc2VyaWFsaXplIHN0ZXBzIHRvIEpTT04sIGVhY2ggc3RlcCBuZWVkcyBhIHN0cmluZ1xuLy8gSUQgdG8gYXR0YWNoIHRvIGl0cyBKU09OIHJlcHJlc2VudGF0aW9uLiBVc2UgdGhpcyBtZXRob2QgdG9cbi8vIHJlZ2lzdGVyIGFuIElEIGZvciB5b3VyIHN0ZXAgY2xhc3Nlcy4gVHJ5IHRvIHBpY2sgc29tZXRoaW5nXG4vLyB0aGF0J3MgdW5saWtlbHkgdG8gY2xhc2ggd2l0aCBzdGVwcyBmcm9tIG90aGVyIG1vZHVsZXMuXG5TdGVwLmpzb25JRCA9IGZ1bmN0aW9uIGpzb25JRCAoaWQsIHN0ZXBDbGFzcykge1xuICBpZiAoaWQgaW4gc3RlcHNCeUlEKSB7IHRocm93IG5ldyBSYW5nZUVycm9yKFwiRHVwbGljYXRlIHVzZSBvZiBzdGVwIEpTT04gSUQgXCIgKyBpZCkgfVxuICBzdGVwc0J5SURbaWRdID0gc3RlcENsYXNzO1xuICBzdGVwQ2xhc3MucHJvdG90eXBlLmpzb25JRCA9IGlkO1xuICByZXR1cm4gc3RlcENsYXNzXG59O1xuXG4vLyA6Oi0gVGhlIHJlc3VsdCBvZiBbYXBwbHlpbmddKCN0cmFuc2Zvcm0uU3RlcC5hcHBseSkgYSBzdGVwLiBDb250YWlucyBlaXRoZXIgYVxuLy8gbmV3IGRvY3VtZW50IG9yIGEgZmFpbHVyZSB2YWx1ZS5cbnZhciBTdGVwUmVzdWx0ID0gZnVuY3Rpb24gU3RlcFJlc3VsdChkb2MsIGZhaWxlZCkge1xuICAvLyA6OiA/Tm9kZSBUaGUgdHJhbnNmb3JtZWQgZG9jdW1lbnQuXG4gIHRoaXMuZG9jID0gZG9jO1xuICAvLyA6OiA/c3RyaW5nIFRleHQgcHJvdmlkaW5nIGluZm9ybWF0aW9uIGFib3V0IGEgZmFpbGVkIHN0ZXAuXG4gIHRoaXMuZmFpbGVkID0gZmFpbGVkO1xufTtcblxuLy8gOjogKE5vZGUpIOKGkiBTdGVwUmVzdWx0XG4vLyBDcmVhdGUgYSBzdWNjZXNzZnVsIHN0ZXAgcmVzdWx0LlxuU3RlcFJlc3VsdC5vayA9IGZ1bmN0aW9uIG9rIChkb2MpIHsgcmV0dXJuIG5ldyBTdGVwUmVzdWx0KGRvYywgbnVsbCkgfTtcblxuLy8gOjogKHN0cmluZykg4oaSIFN0ZXBSZXN1bHRcbi8vIENyZWF0ZSBhIGZhaWxlZCBzdGVwIHJlc3VsdC5cblN0ZXBSZXN1bHQuZmFpbCA9IGZ1bmN0aW9uIGZhaWwgKG1lc3NhZ2UpIHsgcmV0dXJuIG5ldyBTdGVwUmVzdWx0KG51bGwsIG1lc3NhZ2UpIH07XG5cbi8vIDo6IChOb2RlLCBudW1iZXIsIG51bWJlciwgU2xpY2UpIOKGkiBTdGVwUmVzdWx0XG4vLyBDYWxsIFtgTm9kZS5yZXBsYWNlYF0oI21vZGVsLk5vZGUucmVwbGFjZSkgd2l0aCB0aGUgZ2l2ZW5cbi8vIGFyZ3VtZW50cy4gQ3JlYXRlIGEgc3VjY2Vzc2Z1bCByZXN1bHQgaWYgaXQgc3VjY2VlZHMsIGFuZCBhXG4vLyBmYWlsZWQgb25lIGlmIGl0IHRocm93cyBhIGBSZXBsYWNlRXJyb3JgLlxuU3RlcFJlc3VsdC5mcm9tUmVwbGFjZSA9IGZ1bmN0aW9uIGZyb21SZXBsYWNlIChkb2MsIGZyb20sIHRvLCBzbGljZSkge1xuICB0cnkge1xuICAgIHJldHVybiBTdGVwUmVzdWx0Lm9rKGRvYy5yZXBsYWNlKGZyb20sIHRvLCBzbGljZSkpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFJlcGxhY2VFcnJvcikgeyByZXR1cm4gU3RlcFJlc3VsdC5mYWlsKGUubWVzc2FnZSkgfVxuICAgIHRocm93IGVcbiAgfVxufTtcblxuLy8gOjotIFJlcGxhY2UgYSBwYXJ0IG9mIHRoZSBkb2N1bWVudCB3aXRoIGEgc2xpY2Ugb2YgbmV3IGNvbnRlbnQuXG52YXIgUmVwbGFjZVN0ZXAgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChTdGVwKSB7XG4gIGZ1bmN0aW9uIFJlcGxhY2VTdGVwKGZyb20sIHRvLCBzbGljZSwgc3RydWN0dXJlKSB7XG4gICAgU3RlcC5jYWxsKHRoaXMpO1xuICAgIC8vIDo6IG51bWJlclxuICAgIC8vIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVwbGFjZWQgcmFuZ2UuXG4gICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAvLyA6OiBudW1iZXJcbiAgICAvLyBUaGUgZW5kIHBvc2l0aW9uIG9mIHRoZSByZXBsYWNlZCByYW5nZS5cbiAgICB0aGlzLnRvID0gdG87XG4gICAgLy8gOjogU2xpY2VcbiAgICAvLyBUaGUgc2xpY2UgdG8gaW5zZXJ0LlxuICAgIHRoaXMuc2xpY2UgPSBzbGljZTtcbiAgICB0aGlzLnN0cnVjdHVyZSA9ICEhc3RydWN0dXJlO1xuICB9XG5cbiAgaWYgKCBTdGVwICkgUmVwbGFjZVN0ZXAuX19wcm90b19fID0gU3RlcDtcbiAgUmVwbGFjZVN0ZXAucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggU3RlcCAmJiBTdGVwLnByb3RvdHlwZSApO1xuICBSZXBsYWNlU3RlcC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBSZXBsYWNlU3RlcDtcblxuICBSZXBsYWNlU3RlcC5wcm90b3R5cGUuYXBwbHkgPSBmdW5jdGlvbiBhcHBseSAoZG9jKSB7XG4gICAgaWYgKHRoaXMuc3RydWN0dXJlICYmIGNvbnRlbnRCZXR3ZWVuKGRvYywgdGhpcy5mcm9tLCB0aGlzLnRvKSlcbiAgICAgIHsgcmV0dXJuIFN0ZXBSZXN1bHQuZmFpbChcIlN0cnVjdHVyZSByZXBsYWNlIHdvdWxkIG92ZXJ3cml0ZSBjb250ZW50XCIpIH1cbiAgICByZXR1cm4gU3RlcFJlc3VsdC5mcm9tUmVwbGFjZShkb2MsIHRoaXMuZnJvbSwgdGhpcy50bywgdGhpcy5zbGljZSlcbiAgfTtcblxuICBSZXBsYWNlU3RlcC5wcm90b3R5cGUuZ2V0TWFwID0gZnVuY3Rpb24gZ2V0TWFwICgpIHtcbiAgICByZXR1cm4gbmV3IFN0ZXBNYXAoW3RoaXMuZnJvbSwgdGhpcy50byAtIHRoaXMuZnJvbSwgdGhpcy5zbGljZS5zaXplXSlcbiAgfTtcblxuICBSZXBsYWNlU3RlcC5wcm90b3R5cGUuaW52ZXJ0ID0gZnVuY3Rpb24gaW52ZXJ0IChkb2MpIHtcbiAgICByZXR1cm4gbmV3IFJlcGxhY2VTdGVwKHRoaXMuZnJvbSwgdGhpcy5mcm9tICsgdGhpcy5zbGljZS5zaXplLCBkb2Muc2xpY2UodGhpcy5mcm9tLCB0aGlzLnRvKSlcbiAgfTtcblxuICBSZXBsYWNlU3RlcC5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gbWFwIChtYXBwaW5nKSB7XG4gICAgdmFyIGZyb20gPSBtYXBwaW5nLm1hcFJlc3VsdCh0aGlzLmZyb20sIDEpLCB0byA9IG1hcHBpbmcubWFwUmVzdWx0KHRoaXMudG8sIC0xKTtcbiAgICBpZiAoZnJvbS5kZWxldGVkICYmIHRvLmRlbGV0ZWQpIHsgcmV0dXJuIG51bGwgfVxuICAgIHJldHVybiBuZXcgUmVwbGFjZVN0ZXAoZnJvbS5wb3MsIE1hdGgubWF4KGZyb20ucG9zLCB0by5wb3MpLCB0aGlzLnNsaWNlKVxuICB9O1xuXG4gIFJlcGxhY2VTdGVwLnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uIG1lcmdlIChvdGhlcikge1xuICAgIGlmICghKG90aGVyIGluc3RhbmNlb2YgUmVwbGFjZVN0ZXApIHx8IG90aGVyLnN0cnVjdHVyZSB8fCB0aGlzLnN0cnVjdHVyZSkgeyByZXR1cm4gbnVsbCB9XG5cbiAgICBpZiAodGhpcy5mcm9tICsgdGhpcy5zbGljZS5zaXplID09IG90aGVyLmZyb20gJiYgIXRoaXMuc2xpY2Uub3BlbkVuZCAmJiAhb3RoZXIuc2xpY2Uub3BlblN0YXJ0KSB7XG4gICAgICB2YXIgc2xpY2UgPSB0aGlzLnNsaWNlLnNpemUgKyBvdGhlci5zbGljZS5zaXplID09IDAgPyBTbGljZS5lbXB0eVxuICAgICAgICAgIDogbmV3IFNsaWNlKHRoaXMuc2xpY2UuY29udGVudC5hcHBlbmQob3RoZXIuc2xpY2UuY29udGVudCksIHRoaXMuc2xpY2Uub3BlblN0YXJ0LCBvdGhlci5zbGljZS5vcGVuRW5kKTtcbiAgICAgIHJldHVybiBuZXcgUmVwbGFjZVN0ZXAodGhpcy5mcm9tLCB0aGlzLnRvICsgKG90aGVyLnRvIC0gb3RoZXIuZnJvbSksIHNsaWNlLCB0aGlzLnN0cnVjdHVyZSlcbiAgICB9IGVsc2UgaWYgKG90aGVyLnRvID09IHRoaXMuZnJvbSAmJiAhdGhpcy5zbGljZS5vcGVuU3RhcnQgJiYgIW90aGVyLnNsaWNlLm9wZW5FbmQpIHtcbiAgICAgIHZhciBzbGljZSQxID0gdGhpcy5zbGljZS5zaXplICsgb3RoZXIuc2xpY2Uuc2l6ZSA9PSAwID8gU2xpY2UuZW1wdHlcbiAgICAgICAgICA6IG5ldyBTbGljZShvdGhlci5zbGljZS5jb250ZW50LmFwcGVuZCh0aGlzLnNsaWNlLmNvbnRlbnQpLCBvdGhlci5zbGljZS5vcGVuU3RhcnQsIHRoaXMuc2xpY2Uub3BlbkVuZCk7XG4gICAgICByZXR1cm4gbmV3IFJlcGxhY2VTdGVwKG90aGVyLmZyb20sIHRoaXMudG8sIHNsaWNlJDEsIHRoaXMuc3RydWN0dXJlKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfTtcblxuICBSZXBsYWNlU3RlcC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICB2YXIganNvbiA9IHtzdGVwVHlwZTogXCJyZXBsYWNlXCIsIGZyb206IHRoaXMuZnJvbSwgdG86IHRoaXMudG99O1xuICAgIGlmICh0aGlzLnNsaWNlLnNpemUpIHsganNvbi5zbGljZSA9IHRoaXMuc2xpY2UudG9KU09OKCk7IH1cbiAgICBpZiAodGhpcy5zdHJ1Y3R1cmUpIHsganNvbi5zdHJ1Y3R1cmUgPSB0cnVlOyB9XG4gICAgcmV0dXJuIGpzb25cbiAgfTtcblxuICBSZXBsYWNlU3RlcC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OIChzY2hlbWEsIGpzb24pIHtcbiAgICBpZiAodHlwZW9mIGpzb24uZnJvbSAhPSBcIm51bWJlclwiIHx8IHR5cGVvZiBqc29uLnRvICE9IFwibnVtYmVyXCIpXG4gICAgICB7IHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgUmVwbGFjZVN0ZXAuZnJvbUpTT05cIikgfVxuICAgIHJldHVybiBuZXcgUmVwbGFjZVN0ZXAoanNvbi5mcm9tLCBqc29uLnRvLCBTbGljZS5mcm9tSlNPTihzY2hlbWEsIGpzb24uc2xpY2UpLCAhIWpzb24uc3RydWN0dXJlKVxuICB9O1xuXG4gIHJldHVybiBSZXBsYWNlU3RlcDtcbn0oU3RlcCkpO1xuXG5TdGVwLmpzb25JRChcInJlcGxhY2VcIiwgUmVwbGFjZVN0ZXApO1xuXG4vLyA6Oi0gUmVwbGFjZSBhIHBhcnQgb2YgdGhlIGRvY3VtZW50IHdpdGggYSBzbGljZSBvZiBjb250ZW50LCBidXRcbi8vIHByZXNlcnZlIGEgcmFuZ2Ugb2YgdGhlIHJlcGxhY2VkIGNvbnRlbnQgYnkgbW92aW5nIGl0IGludG8gdGhlXG4vLyBzbGljZS5cbnZhciBSZXBsYWNlQXJvdW5kU3RlcCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFN0ZXApIHtcbiAgZnVuY3Rpb24gUmVwbGFjZUFyb3VuZFN0ZXAoZnJvbSwgdG8sIGdhcEZyb20sIGdhcFRvLCBzbGljZSwgaW5zZXJ0LCBzdHJ1Y3R1cmUpIHtcbiAgICBTdGVwLmNhbGwodGhpcyk7XG4gICAgLy8gOjogbnVtYmVyXG4gICAgLy8gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXBsYWNlZCByYW5nZS5cbiAgICB0aGlzLmZyb20gPSBmcm9tO1xuICAgIC8vIDo6IG51bWJlclxuICAgIC8vIFRoZSBlbmQgcG9zaXRpb24gb2YgdGhlIHJlcGxhY2VkIHJhbmdlLlxuICAgIHRoaXMudG8gPSB0bztcbiAgICAvLyA6OiBudW1iZXJcbiAgICAvLyBUaGUgc3RhcnQgb2YgcHJlc2VydmVkIHJhbmdlLlxuICAgIHRoaXMuZ2FwRnJvbSA9IGdhcEZyb207XG4gICAgLy8gOjogbnVtYmVyXG4gICAgLy8gVGhlIGVuZCBvZiBwcmVzZXJ2ZWQgcmFuZ2UuXG4gICAgdGhpcy5nYXBUbyA9IGdhcFRvO1xuICAgIC8vIDo6IFNsaWNlXG4gICAgLy8gVGhlIHNsaWNlIHRvIGluc2VydC5cbiAgICB0aGlzLnNsaWNlID0gc2xpY2U7XG4gICAgLy8gOjogbnVtYmVyXG4gICAgLy8gVGhlIHBvc2l0aW9uIGluIHRoZSBzbGljZSB3aGVyZSB0aGUgcHJlc2VydmVkIHJhbmdlIHNob3VsZCBiZVxuICAgIC8vIGluc2VydGVkLlxuICAgIHRoaXMuaW5zZXJ0ID0gaW5zZXJ0O1xuICAgIHRoaXMuc3RydWN0dXJlID0gISFzdHJ1Y3R1cmU7XG4gIH1cblxuICBpZiAoIFN0ZXAgKSBSZXBsYWNlQXJvdW5kU3RlcC5fX3Byb3RvX18gPSBTdGVwO1xuICBSZXBsYWNlQXJvdW5kU3RlcC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTdGVwICYmIFN0ZXAucHJvdG90eXBlICk7XG4gIFJlcGxhY2VBcm91bmRTdGVwLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlcGxhY2VBcm91bmRTdGVwO1xuXG4gIFJlcGxhY2VBcm91bmRTdGVwLnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uIGFwcGx5IChkb2MpIHtcbiAgICBpZiAodGhpcy5zdHJ1Y3R1cmUgJiYgKGNvbnRlbnRCZXR3ZWVuKGRvYywgdGhpcy5mcm9tLCB0aGlzLmdhcEZyb20pIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50QmV0d2Vlbihkb2MsIHRoaXMuZ2FwVG8sIHRoaXMudG8pKSlcbiAgICAgIHsgcmV0dXJuIFN0ZXBSZXN1bHQuZmFpbChcIlN0cnVjdHVyZSBnYXAtcmVwbGFjZSB3b3VsZCBvdmVyd3JpdGUgY29udGVudFwiKSB9XG5cbiAgICB2YXIgZ2FwID0gZG9jLnNsaWNlKHRoaXMuZ2FwRnJvbSwgdGhpcy5nYXBUbyk7XG4gICAgaWYgKGdhcC5vcGVuU3RhcnQgfHwgZ2FwLm9wZW5FbmQpXG4gICAgICB7IHJldHVybiBTdGVwUmVzdWx0LmZhaWwoXCJHYXAgaXMgbm90IGEgZmxhdCByYW5nZVwiKSB9XG4gICAgdmFyIGluc2VydGVkID0gdGhpcy5zbGljZS5pbnNlcnRBdCh0aGlzLmluc2VydCwgZ2FwLmNvbnRlbnQpO1xuICAgIGlmICghaW5zZXJ0ZWQpIHsgcmV0dXJuIFN0ZXBSZXN1bHQuZmFpbChcIkNvbnRlbnQgZG9lcyBub3QgZml0IGluIGdhcFwiKSB9XG4gICAgcmV0dXJuIFN0ZXBSZXN1bHQuZnJvbVJlcGxhY2UoZG9jLCB0aGlzLmZyb20sIHRoaXMudG8sIGluc2VydGVkKVxuICB9O1xuXG4gIFJlcGxhY2VBcm91bmRTdGVwLnByb3RvdHlwZS5nZXRNYXAgPSBmdW5jdGlvbiBnZXRNYXAgKCkge1xuICAgIHJldHVybiBuZXcgU3RlcE1hcChbdGhpcy5mcm9tLCB0aGlzLmdhcEZyb20gLSB0aGlzLmZyb20sIHRoaXMuaW5zZXJ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYXBUbywgdGhpcy50byAtIHRoaXMuZ2FwVG8sIHRoaXMuc2xpY2Uuc2l6ZSAtIHRoaXMuaW5zZXJ0XSlcbiAgfTtcblxuICBSZXBsYWNlQXJvdW5kU3RlcC5wcm90b3R5cGUuaW52ZXJ0ID0gZnVuY3Rpb24gaW52ZXJ0IChkb2MpIHtcbiAgICB2YXIgZ2FwID0gdGhpcy5nYXBUbyAtIHRoaXMuZ2FwRnJvbTtcbiAgICByZXR1cm4gbmV3IFJlcGxhY2VBcm91bmRTdGVwKHRoaXMuZnJvbSwgdGhpcy5mcm9tICsgdGhpcy5zbGljZS5zaXplICsgZ2FwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mcm9tICsgdGhpcy5pbnNlcnQsIHRoaXMuZnJvbSArIHRoaXMuaW5zZXJ0ICsgZ2FwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jLnNsaWNlKHRoaXMuZnJvbSwgdGhpcy50bykucmVtb3ZlQmV0d2Vlbih0aGlzLmdhcEZyb20gLSB0aGlzLmZyb20sIHRoaXMuZ2FwVG8gLSB0aGlzLmZyb20pLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nYXBGcm9tIC0gdGhpcy5mcm9tLCB0aGlzLnN0cnVjdHVyZSlcbiAgfTtcblxuICBSZXBsYWNlQXJvdW5kU3RlcC5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gbWFwIChtYXBwaW5nKSB7XG4gICAgdmFyIGZyb20gPSBtYXBwaW5nLm1hcFJlc3VsdCh0aGlzLmZyb20sIDEpLCB0byA9IG1hcHBpbmcubWFwUmVzdWx0KHRoaXMudG8sIC0xKTtcbiAgICB2YXIgZ2FwRnJvbSA9IG1hcHBpbmcubWFwKHRoaXMuZ2FwRnJvbSwgLTEpLCBnYXBUbyA9IG1hcHBpbmcubWFwKHRoaXMuZ2FwVG8sIDEpO1xuICAgIGlmICgoZnJvbS5kZWxldGVkICYmIHRvLmRlbGV0ZWQpIHx8IGdhcEZyb20gPCBmcm9tLnBvcyB8fCBnYXBUbyA+IHRvLnBvcykgeyByZXR1cm4gbnVsbCB9XG4gICAgcmV0dXJuIG5ldyBSZXBsYWNlQXJvdW5kU3RlcChmcm9tLnBvcywgdG8ucG9zLCBnYXBGcm9tLCBnYXBUbywgdGhpcy5zbGljZSwgdGhpcy5pbnNlcnQsIHRoaXMuc3RydWN0dXJlKVxuICB9O1xuXG4gIFJlcGxhY2VBcm91bmRTdGVwLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICAgIHZhciBqc29uID0ge3N0ZXBUeXBlOiBcInJlcGxhY2VBcm91bmRcIiwgZnJvbTogdGhpcy5mcm9tLCB0bzogdGhpcy50byxcbiAgICAgICAgICAgICAgICBnYXBGcm9tOiB0aGlzLmdhcEZyb20sIGdhcFRvOiB0aGlzLmdhcFRvLCBpbnNlcnQ6IHRoaXMuaW5zZXJ0fTtcbiAgICBpZiAodGhpcy5zbGljZS5zaXplKSB7IGpzb24uc2xpY2UgPSB0aGlzLnNsaWNlLnRvSlNPTigpOyB9XG4gICAgaWYgKHRoaXMuc3RydWN0dXJlKSB7IGpzb24uc3RydWN0dXJlID0gdHJ1ZTsgfVxuICAgIHJldHVybiBqc29uXG4gIH07XG5cbiAgUmVwbGFjZUFyb3VuZFN0ZXAuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTiAoc2NoZW1hLCBqc29uKSB7XG4gICAgaWYgKHR5cGVvZiBqc29uLmZyb20gIT0gXCJudW1iZXJcIiB8fCB0eXBlb2YganNvbi50byAhPSBcIm51bWJlclwiIHx8XG4gICAgICAgIHR5cGVvZiBqc29uLmdhcEZyb20gIT0gXCJudW1iZXJcIiB8fCB0eXBlb2YganNvbi5nYXBUbyAhPSBcIm51bWJlclwiIHx8IHR5cGVvZiBqc29uLmluc2VydCAhPSBcIm51bWJlclwiKVxuICAgICAgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgaW5wdXQgZm9yIFJlcGxhY2VBcm91bmRTdGVwLmZyb21KU09OXCIpIH1cbiAgICByZXR1cm4gbmV3IFJlcGxhY2VBcm91bmRTdGVwKGpzb24uZnJvbSwganNvbi50bywganNvbi5nYXBGcm9tLCBqc29uLmdhcFRvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2xpY2UuZnJvbUpTT04oc2NoZW1hLCBqc29uLnNsaWNlKSwganNvbi5pbnNlcnQsICEhanNvbi5zdHJ1Y3R1cmUpXG4gIH07XG5cbiAgcmV0dXJuIFJlcGxhY2VBcm91bmRTdGVwO1xufShTdGVwKSk7XG5cblN0ZXAuanNvbklEKFwicmVwbGFjZUFyb3VuZFwiLCBSZXBsYWNlQXJvdW5kU3RlcCk7XG5cbmZ1bmN0aW9uIGNvbnRlbnRCZXR3ZWVuKGRvYywgZnJvbSwgdG8pIHtcbiAgdmFyICRmcm9tID0gZG9jLnJlc29sdmUoZnJvbSksIGRpc3QgPSB0byAtIGZyb20sIGRlcHRoID0gJGZyb20uZGVwdGg7XG4gIHdoaWxlIChkaXN0ID4gMCAmJiBkZXB0aCA+IDAgJiYgJGZyb20uaW5kZXhBZnRlcihkZXB0aCkgPT0gJGZyb20ubm9kZShkZXB0aCkuY2hpbGRDb3VudCkge1xuICAgIGRlcHRoLS07XG4gICAgZGlzdC0tO1xuICB9XG4gIGlmIChkaXN0ID4gMCkge1xuICAgIHZhciBuZXh0ID0gJGZyb20ubm9kZShkZXB0aCkubWF5YmVDaGlsZCgkZnJvbS5pbmRleEFmdGVyKGRlcHRoKSk7XG4gICAgd2hpbGUgKGRpc3QgPiAwKSB7XG4gICAgICBpZiAoIW5leHQgfHwgbmV4dC5pc0xlYWYpIHsgcmV0dXJuIHRydWUgfVxuICAgICAgbmV4dCA9IG5leHQuZmlyc3RDaGlsZDtcbiAgICAgIGRpc3QtLTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGNhbkN1dChub2RlLCBzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoc3RhcnQgPT0gMCB8fCBub2RlLmNhblJlcGxhY2Uoc3RhcnQsIG5vZGUuY2hpbGRDb3VudCkpICYmXG4gICAgKGVuZCA9PSBub2RlLmNoaWxkQ291bnQgfHwgbm9kZS5jYW5SZXBsYWNlKDAsIGVuZCkpXG59XG5cbi8vIDo6IChOb2RlUmFuZ2UpIOKGkiA/bnVtYmVyXG4vLyBUcnkgdG8gZmluZCBhIHRhcmdldCBkZXB0aCB0byB3aGljaCB0aGUgY29udGVudCBpbiB0aGUgZ2l2ZW4gcmFuZ2Vcbi8vIGNhbiBiZSBsaWZ0ZWQuIFdpbGwgbm90IGdvIGFjcm9zc1xuLy8gW2lzb2xhdGluZ10oI21vZGVsLk5vZGVTcGVjLmlzb2xhdGluZykgcGFyZW50IG5vZGVzLlxuZnVuY3Rpb24gbGlmdFRhcmdldChyYW5nZSkge1xuICB2YXIgcGFyZW50ID0gcmFuZ2UucGFyZW50O1xuICB2YXIgY29udGVudCA9IHBhcmVudC5jb250ZW50LmN1dEJ5SW5kZXgocmFuZ2Uuc3RhcnRJbmRleCwgcmFuZ2UuZW5kSW5kZXgpO1xuICBmb3IgKHZhciBkZXB0aCA9IHJhbmdlLmRlcHRoOzsgLS1kZXB0aCkge1xuICAgIHZhciBub2RlID0gcmFuZ2UuJGZyb20ubm9kZShkZXB0aCk7XG4gICAgdmFyIGluZGV4ID0gcmFuZ2UuJGZyb20uaW5kZXgoZGVwdGgpLCBlbmRJbmRleCA9IHJhbmdlLiR0by5pbmRleEFmdGVyKGRlcHRoKTtcbiAgICBpZiAoZGVwdGggPCByYW5nZS5kZXB0aCAmJiBub2RlLmNhblJlcGxhY2UoaW5kZXgsIGVuZEluZGV4LCBjb250ZW50KSlcbiAgICAgIHsgcmV0dXJuIGRlcHRoIH1cbiAgICBpZiAoZGVwdGggPT0gMCB8fCBub2RlLnR5cGUuc3BlYy5pc29sYXRpbmcgfHwgIWNhbkN1dChub2RlLCBpbmRleCwgZW5kSW5kZXgpKSB7IGJyZWFrIH1cbiAgfVxufVxuXG4vLyA6OiAoTm9kZVJhbmdlLCBudW1iZXIpIOKGkiB0aGlzXG4vLyBTcGxpdCB0aGUgY29udGVudCBpbiB0aGUgZ2l2ZW4gcmFuZ2Ugb2ZmIGZyb20gaXRzIHBhcmVudCwgaWYgdGhlcmVcbi8vIGlzIHNpYmxpbmcgY29udGVudCBiZWZvcmUgb3IgYWZ0ZXIgaXQsIGFuZCBtb3ZlIGl0IHVwIHRoZSB0cmVlIHRvXG4vLyB0aGUgZGVwdGggc3BlY2lmaWVkIGJ5IGB0YXJnZXRgLiBZb3UnbGwgcHJvYmFibHkgd2FudCB0byB1c2Vcbi8vIFtgbGlmdFRhcmdldGBdKCN0cmFuc2Zvcm0ubGlmdFRhcmdldCkgdG8gY29tcHV0ZSBgdGFyZ2V0YCwgdG8gbWFrZVxuLy8gc3VyZSB0aGUgbGlmdCBpcyB2YWxpZC5cblRyYW5zZm9ybS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uKHJhbmdlLCB0YXJnZXQpIHtcbiAgdmFyICRmcm9tID0gcmFuZ2UuJGZyb207XG4gIHZhciAkdG8gPSByYW5nZS4kdG87XG4gIHZhciBkZXB0aCA9IHJhbmdlLmRlcHRoO1xuXG4gIHZhciBnYXBTdGFydCA9ICRmcm9tLmJlZm9yZShkZXB0aCArIDEpLCBnYXBFbmQgPSAkdG8uYWZ0ZXIoZGVwdGggKyAxKTtcbiAgdmFyIHN0YXJ0ID0gZ2FwU3RhcnQsIGVuZCA9IGdhcEVuZDtcblxuICB2YXIgYmVmb3JlID0gRnJhZ21lbnQuZW1wdHksIG9wZW5TdGFydCA9IDA7XG4gIGZvciAodmFyIGQgPSBkZXB0aCwgc3BsaXR0aW5nID0gZmFsc2U7IGQgPiB0YXJnZXQ7IGQtLSlcbiAgICB7IGlmIChzcGxpdHRpbmcgfHwgJGZyb20uaW5kZXgoZCkgPiAwKSB7XG4gICAgICBzcGxpdHRpbmcgPSB0cnVlO1xuICAgICAgYmVmb3JlID0gRnJhZ21lbnQuZnJvbSgkZnJvbS5ub2RlKGQpLmNvcHkoYmVmb3JlKSk7XG4gICAgICBvcGVuU3RhcnQrKztcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnQtLTtcbiAgICB9IH1cbiAgdmFyIGFmdGVyID0gRnJhZ21lbnQuZW1wdHksIG9wZW5FbmQgPSAwO1xuICBmb3IgKHZhciBkJDEgPSBkZXB0aCwgc3BsaXR0aW5nJDEgPSBmYWxzZTsgZCQxID4gdGFyZ2V0OyBkJDEtLSlcbiAgICB7IGlmIChzcGxpdHRpbmckMSB8fCAkdG8uYWZ0ZXIoZCQxICsgMSkgPCAkdG8uZW5kKGQkMSkpIHtcbiAgICAgIHNwbGl0dGluZyQxID0gdHJ1ZTtcbiAgICAgIGFmdGVyID0gRnJhZ21lbnQuZnJvbSgkdG8ubm9kZShkJDEpLmNvcHkoYWZ0ZXIpKTtcbiAgICAgIG9wZW5FbmQrKztcbiAgICB9IGVsc2Uge1xuICAgICAgZW5kKys7XG4gICAgfSB9XG5cbiAgcmV0dXJuIHRoaXMuc3RlcChuZXcgUmVwbGFjZUFyb3VuZFN0ZXAoc3RhcnQsIGVuZCwgZ2FwU3RhcnQsIGdhcEVuZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFNsaWNlKGJlZm9yZS5hcHBlbmQoYWZ0ZXIpLCBvcGVuU3RhcnQsIG9wZW5FbmQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWZvcmUuc2l6ZSAtIG9wZW5TdGFydCwgdHJ1ZSkpXG59O1xuXG4vLyA6OiAoTm9kZVJhbmdlLCBOb2RlVHlwZSwgP09iamVjdCwgP05vZGVSYW5nZSkg4oaSID9be3R5cGU6IE5vZGVUeXBlLCBhdHRyczogP09iamVjdH1dXG4vLyBUcnkgdG8gZmluZCBhIHZhbGlkIHdheSB0byB3cmFwIHRoZSBjb250ZW50IGluIHRoZSBnaXZlbiByYW5nZSBpbiBhXG4vLyBub2RlIG9mIHRoZSBnaXZlbiB0eXBlLiBNYXkgaW50cm9kdWNlIGV4dHJhIG5vZGVzIGFyb3VuZCBhbmQgaW5zaWRlXG4vLyB0aGUgd3JhcHBlciBub2RlLCBpZiBuZWNlc3NhcnkuIFJldHVybnMgbnVsbCBpZiBubyB2YWxpZCB3cmFwcGluZ1xuLy8gY291bGQgYmUgZm91bmQuIFdoZW4gYGlubmVyUmFuZ2VgIGlzIGdpdmVuLCB0aGF0IHJhbmdlJ3MgY29udGVudCBpc1xuLy8gdXNlZCBhcyB0aGUgY29udGVudCB0byBmaXQgaW50byB0aGUgd3JhcHBpbmcsIGluc3RlYWQgb2YgdGhlXG4vLyBjb250ZW50IG9mIGByYW5nZWAuXG5mdW5jdGlvbiBmaW5kV3JhcHBpbmcocmFuZ2UsIG5vZGVUeXBlLCBhdHRycywgaW5uZXJSYW5nZSkge1xuICBpZiAoIGlubmVyUmFuZ2UgPT09IHZvaWQgMCApIGlubmVyUmFuZ2UgPSByYW5nZTtcblxuICB2YXIgYXJvdW5kID0gZmluZFdyYXBwaW5nT3V0c2lkZShyYW5nZSwgbm9kZVR5cGUpO1xuICB2YXIgaW5uZXIgPSBhcm91bmQgJiYgZmluZFdyYXBwaW5nSW5zaWRlKGlubmVyUmFuZ2UsIG5vZGVUeXBlKTtcbiAgaWYgKCFpbm5lcikgeyByZXR1cm4gbnVsbCB9XG4gIHJldHVybiBhcm91bmQubWFwKHdpdGhBdHRycykuY29uY2F0KHt0eXBlOiBub2RlVHlwZSwgYXR0cnM6IGF0dHJzfSkuY29uY2F0KGlubmVyLm1hcCh3aXRoQXR0cnMpKVxufVxuXG5mdW5jdGlvbiB3aXRoQXR0cnModHlwZSkgeyByZXR1cm4ge3R5cGU6IHR5cGUsIGF0dHJzOiBudWxsfSB9XG5cbmZ1bmN0aW9uIGZpbmRXcmFwcGluZ091dHNpZGUocmFuZ2UsIHR5cGUpIHtcbiAgdmFyIHBhcmVudCA9IHJhbmdlLnBhcmVudDtcbiAgdmFyIHN0YXJ0SW5kZXggPSByYW5nZS5zdGFydEluZGV4O1xuICB2YXIgZW5kSW5kZXggPSByYW5nZS5lbmRJbmRleDtcbiAgdmFyIGFyb3VuZCA9IHBhcmVudC5jb250ZW50TWF0Y2hBdChzdGFydEluZGV4KS5maW5kV3JhcHBpbmcodHlwZSk7XG4gIGlmICghYXJvdW5kKSB7IHJldHVybiBudWxsIH1cbiAgdmFyIG91dGVyID0gYXJvdW5kLmxlbmd0aCA/IGFyb3VuZFswXSA6IHR5cGU7XG4gIHJldHVybiBwYXJlbnQuY2FuUmVwbGFjZVdpdGgoc3RhcnRJbmRleCwgZW5kSW5kZXgsIG91dGVyKSA/IGFyb3VuZCA6IG51bGxcbn1cblxuZnVuY3Rpb24gZmluZFdyYXBwaW5nSW5zaWRlKHJhbmdlLCB0eXBlKSB7XG4gIHZhciBwYXJlbnQgPSByYW5nZS5wYXJlbnQ7XG4gIHZhciBzdGFydEluZGV4ID0gcmFuZ2Uuc3RhcnRJbmRleDtcbiAgdmFyIGVuZEluZGV4ID0gcmFuZ2UuZW5kSW5kZXg7XG4gIHZhciBpbm5lciA9IHBhcmVudC5jaGlsZChzdGFydEluZGV4KTtcbiAgdmFyIGluc2lkZSA9IHR5cGUuY29udGVudE1hdGNoLmZpbmRXcmFwcGluZyhpbm5lci50eXBlKTtcbiAgaWYgKCFpbnNpZGUpIHsgcmV0dXJuIG51bGwgfVxuICB2YXIgbGFzdFR5cGUgPSBpbnNpZGUubGVuZ3RoID8gaW5zaWRlW2luc2lkZS5sZW5ndGggLSAxXSA6IHR5cGU7XG4gIHZhciBpbm5lck1hdGNoID0gbGFzdFR5cGUuY29udGVudE1hdGNoO1xuICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaW5uZXJNYXRjaCAmJiBpIDwgZW5kSW5kZXg7IGkrKylcbiAgICB7IGlubmVyTWF0Y2ggPSBpbm5lck1hdGNoLm1hdGNoVHlwZShwYXJlbnQuY2hpbGQoaSkudHlwZSk7IH1cbiAgaWYgKCFpbm5lck1hdGNoIHx8ICFpbm5lck1hdGNoLnZhbGlkRW5kKSB7IHJldHVybiBudWxsIH1cbiAgcmV0dXJuIGluc2lkZVxufVxuXG4vLyA6OiAoTm9kZVJhbmdlLCBbe3R5cGU6IE5vZGVUeXBlLCBhdHRyczogP09iamVjdH1dKSDihpIgdGhpc1xuLy8gV3JhcCB0aGUgZ2l2ZW4gW3JhbmdlXSgjbW9kZWwuTm9kZVJhbmdlKSBpbiB0aGUgZ2l2ZW4gc2V0IG9mIHdyYXBwZXJzLlxuLy8gVGhlIHdyYXBwZXJzIGFyZSBhc3N1bWVkIHRvIGJlIHZhbGlkIGluIHRoaXMgcG9zaXRpb24sIGFuZCBzaG91bGRcbi8vIHByb2JhYmx5IGJlIGNvbXB1dGVkIHdpdGggW2BmaW5kV3JhcHBpbmdgXSgjdHJhbnNmb3JtLmZpbmRXcmFwcGluZykuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbihyYW5nZSwgd3JhcHBlcnMpIHtcbiAgdmFyIGNvbnRlbnQgPSBGcmFnbWVudC5lbXB0eTtcbiAgZm9yICh2YXIgaSA9IHdyYXBwZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKVxuICAgIHsgY29udGVudCA9IEZyYWdtZW50LmZyb20od3JhcHBlcnNbaV0udHlwZS5jcmVhdGUod3JhcHBlcnNbaV0uYXR0cnMsIGNvbnRlbnQpKTsgfVxuXG4gIHZhciBzdGFydCA9IHJhbmdlLnN0YXJ0LCBlbmQgPSByYW5nZS5lbmQ7XG4gIHJldHVybiB0aGlzLnN0ZXAobmV3IFJlcGxhY2VBcm91bmRTdGVwKHN0YXJ0LCBlbmQsIHN0YXJ0LCBlbmQsIG5ldyBTbGljZShjb250ZW50LCAwLCAwKSwgd3JhcHBlcnMubGVuZ3RoLCB0cnVlKSlcbn07XG5cbi8vIDo6IChudW1iZXIsID9udW1iZXIsIE5vZGVUeXBlLCA/T2JqZWN0KSDihpIgdGhpc1xuLy8gU2V0IHRoZSB0eXBlIG9mIGFsbCB0ZXh0YmxvY2tzIChwYXJ0bHkpIGJldHdlZW4gYGZyb21gIGFuZCBgdG9gIHRvXG4vLyB0aGUgZ2l2ZW4gbm9kZSB0eXBlIHdpdGggdGhlIGdpdmVuIGF0dHJpYnV0ZXMuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnNldEJsb2NrVHlwZSA9IGZ1bmN0aW9uKGZyb20sIHRvLCB0eXBlLCBhdHRycykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcbiAgaWYgKCB0byA9PT0gdm9pZCAwICkgdG8gPSBmcm9tO1xuXG4gIGlmICghdHlwZS5pc1RleHRibG9jaykgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlR5cGUgZ2l2ZW4gdG8gc2V0QmxvY2tUeXBlIHNob3VsZCBiZSBhIHRleHRibG9ja1wiKSB9XG4gIHZhciBtYXBGcm9tID0gdGhpcy5zdGVwcy5sZW5ndGg7XG4gIHRoaXMuZG9jLm5vZGVzQmV0d2Vlbihmcm9tLCB0bywgZnVuY3Rpb24gKG5vZGUsIHBvcykge1xuICAgIGlmIChub2RlLmlzVGV4dGJsb2NrICYmICFub2RlLmhhc01hcmt1cCh0eXBlLCBhdHRycykgJiYgY2FuQ2hhbmdlVHlwZSh0aGlzJDEuZG9jLCB0aGlzJDEubWFwcGluZy5zbGljZShtYXBGcm9tKS5tYXAocG9zKSwgdHlwZSkpIHtcbiAgICAgIC8vIEVuc3VyZSBhbGwgbWFya3VwIHRoYXQgaXNuJ3QgYWxsb3dlZCBpbiB0aGUgbmV3IG5vZGUgdHlwZSBpcyBjbGVhcmVkXG4gICAgICB0aGlzJDEuY2xlYXJJbmNvbXBhdGlibGUodGhpcyQxLm1hcHBpbmcuc2xpY2UobWFwRnJvbSkubWFwKHBvcywgMSksIHR5cGUpO1xuICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzJDEubWFwcGluZy5zbGljZShtYXBGcm9tKTtcbiAgICAgIHZhciBzdGFydE0gPSBtYXBwaW5nLm1hcChwb3MsIDEpLCBlbmRNID0gbWFwcGluZy5tYXAocG9zICsgbm9kZS5ub2RlU2l6ZSwgMSk7XG4gICAgICB0aGlzJDEuc3RlcChuZXcgUmVwbGFjZUFyb3VuZFN0ZXAoc3RhcnRNLCBlbmRNLCBzdGFydE0gKyAxLCBlbmRNIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFNsaWNlKEZyYWdtZW50LmZyb20odHlwZS5jcmVhdGUoYXR0cnMsIG51bGwsIG5vZGUubWFya3MpKSwgMCwgMCksIDEsIHRydWUpKTtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiB0aGlzXG59O1xuXG5mdW5jdGlvbiBjYW5DaGFuZ2VUeXBlKGRvYywgcG9zLCB0eXBlKSB7XG4gIHZhciAkcG9zID0gZG9jLnJlc29sdmUocG9zKSwgaW5kZXggPSAkcG9zLmluZGV4KCk7XG4gIHJldHVybiAkcG9zLnBhcmVudC5jYW5SZXBsYWNlV2l0aChpbmRleCwgaW5kZXggKyAxLCB0eXBlKVxufVxuXG4vLyA6OiAobnVtYmVyLCA/Tm9kZVR5cGUsID9PYmplY3QsID9bTWFya10pIOKGkiB0aGlzXG4vLyBDaGFuZ2UgdGhlIHR5cGUsIGF0dHJpYnV0ZXMsIGFuZC9vciBtYXJrcyBvZiB0aGUgbm9kZSBhdCBgcG9zYC5cbi8vIFdoZW4gYHR5cGVgIGlzbid0IGdpdmVuLCB0aGUgZXhpc3Rpbmcgbm9kZSB0eXBlIGlzIHByZXNlcnZlZCxcblRyYW5zZm9ybS5wcm90b3R5cGUuc2V0Tm9kZU1hcmt1cCA9IGZ1bmN0aW9uKHBvcywgdHlwZSwgYXR0cnMsIG1hcmtzKSB7XG4gIHZhciBub2RlID0gdGhpcy5kb2Mubm9kZUF0KHBvcyk7XG4gIGlmICghbm9kZSkgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIk5vIG5vZGUgYXQgZ2l2ZW4gcG9zaXRpb25cIikgfVxuICBpZiAoIXR5cGUpIHsgdHlwZSA9IG5vZGUudHlwZTsgfVxuICB2YXIgbmV3Tm9kZSA9IHR5cGUuY3JlYXRlKGF0dHJzLCBudWxsLCBtYXJrcyB8fCBub2RlLm1hcmtzKTtcbiAgaWYgKG5vZGUuaXNMZWFmKVxuICAgIHsgcmV0dXJuIHRoaXMucmVwbGFjZVdpdGgocG9zLCBwb3MgKyBub2RlLm5vZGVTaXplLCBuZXdOb2RlKSB9XG5cbiAgaWYgKCF0eXBlLnZhbGlkQ29udGVudChub2RlLmNvbnRlbnQpKVxuICAgIHsgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJJbnZhbGlkIGNvbnRlbnQgZm9yIG5vZGUgdHlwZSBcIiArIHR5cGUubmFtZSkgfVxuXG4gIHJldHVybiB0aGlzLnN0ZXAobmV3IFJlcGxhY2VBcm91bmRTdGVwKHBvcywgcG9zICsgbm9kZS5ub2RlU2l6ZSwgcG9zICsgMSwgcG9zICsgbm9kZS5ub2RlU2l6ZSAtIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBTbGljZShGcmFnbWVudC5mcm9tKG5ld05vZGUpLCAwLCAwKSwgMSwgdHJ1ZSkpXG59O1xuXG4vLyA6OiAoTm9kZSwgbnVtYmVyLCBudW1iZXIsID9bP3t0eXBlOiBOb2RlVHlwZSwgYXR0cnM6ID9PYmplY3R9XSkg4oaSIGJvb2xcbi8vIENoZWNrIHdoZXRoZXIgc3BsaXR0aW5nIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiBpcyBhbGxvd2VkLlxuZnVuY3Rpb24gY2FuU3BsaXQoZG9jLCBwb3MsIGRlcHRoLCB0eXBlc0FmdGVyKSB7XG4gIGlmICggZGVwdGggPT09IHZvaWQgMCApIGRlcHRoID0gMTtcblxuICB2YXIgJHBvcyA9IGRvYy5yZXNvbHZlKHBvcyksIGJhc2UgPSAkcG9zLmRlcHRoIC0gZGVwdGg7XG4gIHZhciBpbm5lclR5cGUgPSAodHlwZXNBZnRlciAmJiB0eXBlc0FmdGVyW3R5cGVzQWZ0ZXIubGVuZ3RoIC0gMV0pIHx8ICRwb3MucGFyZW50O1xuICBpZiAoYmFzZSA8IDAgfHwgJHBvcy5wYXJlbnQudHlwZS5zcGVjLmlzb2xhdGluZyB8fFxuICAgICAgISRwb3MucGFyZW50LmNhblJlcGxhY2UoJHBvcy5pbmRleCgpLCAkcG9zLnBhcmVudC5jaGlsZENvdW50KSB8fFxuICAgICAgIWlubmVyVHlwZS50eXBlLnZhbGlkQ29udGVudCgkcG9zLnBhcmVudC5jb250ZW50LmN1dEJ5SW5kZXgoJHBvcy5pbmRleCgpLCAkcG9zLnBhcmVudC5jaGlsZENvdW50KSkpXG4gICAgeyByZXR1cm4gZmFsc2UgfVxuICBmb3IgKHZhciBkID0gJHBvcy5kZXB0aCAtIDEsIGkgPSBkZXB0aCAtIDI7IGQgPiBiYXNlOyBkLS0sIGktLSkge1xuICAgIHZhciBub2RlID0gJHBvcy5ub2RlKGQpLCBpbmRleCQxID0gJHBvcy5pbmRleChkKTtcbiAgICBpZiAobm9kZS50eXBlLnNwZWMuaXNvbGF0aW5nKSB7IHJldHVybiBmYWxzZSB9XG4gICAgdmFyIHJlc3QgPSBub2RlLmNvbnRlbnQuY3V0QnlJbmRleChpbmRleCQxLCBub2RlLmNoaWxkQ291bnQpO1xuICAgIHZhciBhZnRlciA9ICh0eXBlc0FmdGVyICYmIHR5cGVzQWZ0ZXJbaV0pIHx8IG5vZGU7XG4gICAgaWYgKGFmdGVyICE9IG5vZGUpIHsgcmVzdCA9IHJlc3QucmVwbGFjZUNoaWxkKDAsIGFmdGVyLnR5cGUuY3JlYXRlKGFmdGVyLmF0dHJzKSk7IH1cbiAgICBpZiAoIW5vZGUuY2FuUmVwbGFjZShpbmRleCQxICsgMSwgbm9kZS5jaGlsZENvdW50KSB8fCAhYWZ0ZXIudHlwZS52YWxpZENvbnRlbnQocmVzdCkpXG4gICAgICB7IHJldHVybiBmYWxzZSB9XG4gIH1cbiAgdmFyIGluZGV4ID0gJHBvcy5pbmRleEFmdGVyKGJhc2UpO1xuICB2YXIgYmFzZVR5cGUgPSB0eXBlc0FmdGVyICYmIHR5cGVzQWZ0ZXJbMF07XG4gIHJldHVybiAkcG9zLm5vZGUoYmFzZSkuY2FuUmVwbGFjZVdpdGgoaW5kZXgsIGluZGV4LCBiYXNlVHlwZSA/IGJhc2VUeXBlLnR5cGUgOiAkcG9zLm5vZGUoYmFzZSArIDEpLnR5cGUpXG59XG5cbi8vIDo6IChudW1iZXIsID9udW1iZXIsID9bP3t0eXBlOiBOb2RlVHlwZSwgYXR0cnM6ID9PYmplY3R9XSkg4oaSIHRoaXNcbi8vIFNwbGl0IHRoZSBub2RlIGF0IHRoZSBnaXZlbiBwb3NpdGlvbiwgYW5kIG9wdGlvbmFsbHksIGlmIGBkZXB0aGAgaXNcbi8vIGdyZWF0ZXIgdGhhbiBvbmUsIGFueSBudW1iZXIgb2Ygbm9kZXMgYWJvdmUgdGhhdC4gQnkgZGVmYXVsdCwgdGhlXG4vLyBwYXJ0cyBzcGxpdCBvZmYgd2lsbCBpbmhlcml0IHRoZSBub2RlIHR5cGUgb2YgdGhlIG9yaWdpbmFsIG5vZGUuXG4vLyBUaGlzIGNhbiBiZSBjaGFuZ2VkIGJ5IHBhc3NpbmcgYW4gYXJyYXkgb2YgdHlwZXMgYW5kIGF0dHJpYnV0ZXMgdG9cbi8vIHVzZSBhZnRlciB0aGUgc3BsaXQuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24ocG9zLCBkZXB0aCwgdHlwZXNBZnRlcikge1xuICBpZiAoIGRlcHRoID09PSB2b2lkIDAgKSBkZXB0aCA9IDE7XG5cbiAgdmFyICRwb3MgPSB0aGlzLmRvYy5yZXNvbHZlKHBvcyksIGJlZm9yZSA9IEZyYWdtZW50LmVtcHR5LCBhZnRlciA9IEZyYWdtZW50LmVtcHR5O1xuICBmb3IgKHZhciBkID0gJHBvcy5kZXB0aCwgZSA9ICRwb3MuZGVwdGggLSBkZXB0aCwgaSA9IGRlcHRoIC0gMTsgZCA+IGU7IGQtLSwgaS0tKSB7XG4gICAgYmVmb3JlID0gRnJhZ21lbnQuZnJvbSgkcG9zLm5vZGUoZCkuY29weShiZWZvcmUpKTtcbiAgICB2YXIgdHlwZUFmdGVyID0gdHlwZXNBZnRlciAmJiB0eXBlc0FmdGVyW2ldO1xuICAgIGFmdGVyID0gRnJhZ21lbnQuZnJvbSh0eXBlQWZ0ZXIgPyB0eXBlQWZ0ZXIudHlwZS5jcmVhdGUodHlwZUFmdGVyLmF0dHJzLCBhZnRlcikgOiAkcG9zLm5vZGUoZCkuY29weShhZnRlcikpO1xuICB9XG4gIHJldHVybiB0aGlzLnN0ZXAobmV3IFJlcGxhY2VTdGVwKHBvcywgcG9zLCBuZXcgU2xpY2UoYmVmb3JlLmFwcGVuZChhZnRlciksIGRlcHRoLCBkZXB0aCksIHRydWUpKVxufTtcblxuLy8gOjogKE5vZGUsIG51bWJlcikg4oaSIGJvb2xcbi8vIFRlc3Qgd2hldGhlciB0aGUgYmxvY2tzIGJlZm9yZSBhbmQgYWZ0ZXIgYSBnaXZlbiBwb3NpdGlvbiBjYW4gYmVcbi8vIGpvaW5lZC5cbmZ1bmN0aW9uIGNhbkpvaW4oZG9jLCBwb3MpIHtcbiAgdmFyICRwb3MgPSBkb2MucmVzb2x2ZShwb3MpLCBpbmRleCA9ICRwb3MuaW5kZXgoKTtcbiAgcmV0dXJuIGpvaW5hYmxlKCRwb3Mubm9kZUJlZm9yZSwgJHBvcy5ub2RlQWZ0ZXIpICYmXG4gICAgJHBvcy5wYXJlbnQuY2FuUmVwbGFjZShpbmRleCwgaW5kZXggKyAxKVxufVxuXG5mdW5jdGlvbiBqb2luYWJsZShhLCBiKSB7XG4gIHJldHVybiBhICYmIGIgJiYgIWEuaXNMZWFmICYmIGEuY2FuQXBwZW5kKGIpXG59XG5cbi8vIDo6IChOb2RlLCBudW1iZXIsID9udW1iZXIpIOKGkiA/bnVtYmVyXG4vLyBGaW5kIGFuIGFuY2VzdG9yIG9mIHRoZSBnaXZlbiBwb3NpdGlvbiB0aGF0IGNhbiBiZSBqb2luZWQgdG8gdGhlXG4vLyBibG9jayBiZWZvcmUgKG9yIGFmdGVyIGlmIGBkaXJgIGlzIHBvc2l0aXZlKS4gUmV0dXJucyB0aGUgam9pbmFibGVcbi8vIHBvaW50LCBpZiBhbnkuXG5mdW5jdGlvbiBqb2luUG9pbnQoZG9jLCBwb3MsIGRpcikge1xuICBpZiAoIGRpciA9PT0gdm9pZCAwICkgZGlyID0gLTE7XG5cbiAgdmFyICRwb3MgPSBkb2MucmVzb2x2ZShwb3MpO1xuICBmb3IgKHZhciBkID0gJHBvcy5kZXB0aDs7IGQtLSkge1xuICAgIHZhciBiZWZvcmUgPSAodm9pZCAwKSwgYWZ0ZXIgPSAodm9pZCAwKSwgaW5kZXggPSAkcG9zLmluZGV4KGQpO1xuICAgIGlmIChkID09ICRwb3MuZGVwdGgpIHtcbiAgICAgIGJlZm9yZSA9ICRwb3Mubm9kZUJlZm9yZTtcbiAgICAgIGFmdGVyID0gJHBvcy5ub2RlQWZ0ZXI7XG4gICAgfSBlbHNlIGlmIChkaXIgPiAwKSB7XG4gICAgICBiZWZvcmUgPSAkcG9zLm5vZGUoZCArIDEpO1xuICAgICAgaW5kZXgrKztcbiAgICAgIGFmdGVyID0gJHBvcy5ub2RlKGQpLm1heWJlQ2hpbGQoaW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBiZWZvcmUgPSAkcG9zLm5vZGUoZCkubWF5YmVDaGlsZChpbmRleCAtIDEpO1xuICAgICAgYWZ0ZXIgPSAkcG9zLm5vZGUoZCArIDEpO1xuICAgIH1cbiAgICBpZiAoYmVmb3JlICYmICFiZWZvcmUuaXNUZXh0YmxvY2sgJiYgam9pbmFibGUoYmVmb3JlLCBhZnRlcikgJiZcbiAgICAgICAgJHBvcy5ub2RlKGQpLmNhblJlcGxhY2UoaW5kZXgsIGluZGV4ICsgMSkpIHsgcmV0dXJuIHBvcyB9XG4gICAgaWYgKGQgPT0gMCkgeyBicmVhayB9XG4gICAgcG9zID0gZGlyIDwgMCA/ICRwb3MuYmVmb3JlKGQpIDogJHBvcy5hZnRlcihkKTtcbiAgfVxufVxuXG4vLyA6OiAobnVtYmVyLCA/bnVtYmVyKSDihpIgdGhpc1xuLy8gSm9pbiB0aGUgYmxvY2tzIGFyb3VuZCB0aGUgZ2l2ZW4gcG9zaXRpb24uIElmIGRlcHRoIGlzIDIsIHRoZWlyXG4vLyBsYXN0IGFuZCBmaXJzdCBzaWJsaW5ncyBhcmUgYWxzbyBqb2luZWQsIGFuZCBzbyBvbi5cblRyYW5zZm9ybS5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uKHBvcywgZGVwdGgpIHtcbiAgaWYgKCBkZXB0aCA9PT0gdm9pZCAwICkgZGVwdGggPSAxO1xuXG4gIHZhciBzdGVwID0gbmV3IFJlcGxhY2VTdGVwKHBvcyAtIGRlcHRoLCBwb3MgKyBkZXB0aCwgU2xpY2UuZW1wdHksIHRydWUpO1xuICByZXR1cm4gdGhpcy5zdGVwKHN0ZXApXG59O1xuXG4vLyA6OiAoTm9kZSwgbnVtYmVyLCBOb2RlVHlwZSkg4oaSID9udW1iZXJcbi8vIFRyeSB0byBmaW5kIGEgcG9pbnQgd2hlcmUgYSBub2RlIG9mIHRoZSBnaXZlbiB0eXBlIGNhbiBiZSBpbnNlcnRlZFxuLy8gbmVhciBgcG9zYCwgYnkgc2VhcmNoaW5nIHVwIHRoZSBub2RlIGhpZXJhcmNoeSB3aGVuIGBwb3NgIGl0c2VsZlxuLy8gaXNuJ3QgYSB2YWxpZCBwbGFjZSBidXQgaXMgYXQgdGhlIHN0YXJ0IG9yIGVuZCBvZiBhIG5vZGUuIFJldHVyblxuLy8gbnVsbCBpZiBubyBwb3NpdGlvbiB3YXMgZm91bmQuXG5mdW5jdGlvbiBpbnNlcnRQb2ludChkb2MsIHBvcywgbm9kZVR5cGUpIHtcbiAgdmFyICRwb3MgPSBkb2MucmVzb2x2ZShwb3MpO1xuICBpZiAoJHBvcy5wYXJlbnQuY2FuUmVwbGFjZVdpdGgoJHBvcy5pbmRleCgpLCAkcG9zLmluZGV4KCksIG5vZGVUeXBlKSkgeyByZXR1cm4gcG9zIH1cblxuICBpZiAoJHBvcy5wYXJlbnRPZmZzZXQgPT0gMClcbiAgICB7IGZvciAodmFyIGQgPSAkcG9zLmRlcHRoIC0gMTsgZCA+PSAwOyBkLS0pIHtcbiAgICAgIHZhciBpbmRleCA9ICRwb3MuaW5kZXgoZCk7XG4gICAgICBpZiAoJHBvcy5ub2RlKGQpLmNhblJlcGxhY2VXaXRoKGluZGV4LCBpbmRleCwgbm9kZVR5cGUpKSB7IHJldHVybiAkcG9zLmJlZm9yZShkICsgMSkgfVxuICAgICAgaWYgKGluZGV4ID4gMCkgeyByZXR1cm4gbnVsbCB9XG4gICAgfSB9XG4gIGlmICgkcG9zLnBhcmVudE9mZnNldCA9PSAkcG9zLnBhcmVudC5jb250ZW50LnNpemUpXG4gICAgeyBmb3IgKHZhciBkJDEgPSAkcG9zLmRlcHRoIC0gMTsgZCQxID49IDA7IGQkMS0tKSB7XG4gICAgICB2YXIgaW5kZXgkMSA9ICRwb3MuaW5kZXhBZnRlcihkJDEpO1xuICAgICAgaWYgKCRwb3Mubm9kZShkJDEpLmNhblJlcGxhY2VXaXRoKGluZGV4JDEsIGluZGV4JDEsIG5vZGVUeXBlKSkgeyByZXR1cm4gJHBvcy5hZnRlcihkJDEgKyAxKSB9XG4gICAgICBpZiAoaW5kZXgkMSA8ICRwb3Mubm9kZShkJDEpLmNoaWxkQ291bnQpIHsgcmV0dXJuIG51bGwgfVxuICAgIH0gfVxufVxuXG4vLyA6OiAoTm9kZSwgbnVtYmVyLCBTbGljZSkg4oaSID9udW1iZXJcbi8vIEZpbmRzIGEgcG9zaXRpb24gYXQgb3IgYXJvdW5kIHRoZSBnaXZlbiBwb3NpdGlvbiB3aGVyZSB0aGUgZ2l2ZW5cbi8vIHNsaWNlIGNhbiBiZSBpbnNlcnRlZC4gV2lsbCBsb29rIGF0IHBhcmVudCBub2RlcycgbmVhcmVzdCBib3VuZGFyeVxuLy8gYW5kIHRyeSB0aGVyZSwgZXZlbiBpZiB0aGUgb3JpZ2luYWwgcG9zaXRpb24gd2Fzbid0IGRpcmVjdGx5IGF0IHRoZVxuLy8gc3RhcnQgb3IgZW5kIG9mIHRoYXQgbm9kZS4gUmV0dXJucyBudWxsIHdoZW4gbm8gcG9zaXRpb24gd2FzIGZvdW5kLlxuZnVuY3Rpb24gZHJvcFBvaW50KGRvYywgcG9zLCBzbGljZSkge1xuICB2YXIgJHBvcyA9IGRvYy5yZXNvbHZlKHBvcyk7XG4gIGlmICghc2xpY2UuY29udGVudC5zaXplKSB7IHJldHVybiBwb3MgfVxuICB2YXIgY29udGVudCA9IHNsaWNlLmNvbnRlbnQ7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2Uub3BlblN0YXJ0OyBpKyspIHsgY29udGVudCA9IGNvbnRlbnQuZmlyc3RDaGlsZC5jb250ZW50OyB9XG4gIGZvciAodmFyIHBhc3MgPSAxOyBwYXNzIDw9IChzbGljZS5vcGVuU3RhcnQgPT0gMCAmJiBzbGljZS5zaXplID8gMiA6IDEpOyBwYXNzKyspIHtcbiAgICBmb3IgKHZhciBkID0gJHBvcy5kZXB0aDsgZCA+PSAwOyBkLS0pIHtcbiAgICAgIHZhciBiaWFzID0gZCA9PSAkcG9zLmRlcHRoID8gMCA6ICRwb3MucG9zIDw9ICgkcG9zLnN0YXJ0KGQgKyAxKSArICRwb3MuZW5kKGQgKyAxKSkgLyAyID8gLTEgOiAxO1xuICAgICAgdmFyIGluc2VydFBvcyA9ICRwb3MuaW5kZXgoZCkgKyAoYmlhcyA+IDAgPyAxIDogMCk7XG4gICAgICB2YXIgcGFyZW50ID0gJHBvcy5ub2RlKGQpLCBmaXRzID0gZmFsc2U7XG4gICAgICBpZiAocGFzcyA9PSAxKSB7XG4gICAgICAgIGZpdHMgPSBwYXJlbnQuY2FuUmVwbGFjZShpbnNlcnRQb3MsIGluc2VydFBvcywgY29udGVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgd3JhcHBpbmcgPSBwYXJlbnQuY29udGVudE1hdGNoQXQoaW5zZXJ0UG9zKS5maW5kV3JhcHBpbmcoY29udGVudC5maXJzdENoaWxkLnR5cGUpO1xuICAgICAgICBmaXRzID0gd3JhcHBpbmcgJiYgcGFyZW50LmNhblJlcGxhY2VXaXRoKGluc2VydFBvcywgaW5zZXJ0UG9zLCB3cmFwcGluZ1swXSk7XG4gICAgICB9XG4gICAgICBpZiAoZml0cylcbiAgICAgICAgeyByZXR1cm4gYmlhcyA9PSAwID8gJHBvcy5wb3MgOiBiaWFzIDwgMCA/ICRwb3MuYmVmb3JlKGQgKyAxKSA6ICRwb3MuYWZ0ZXIoZCArIDEpIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGxcbn1cblxuZnVuY3Rpb24gbWFwRnJhZ21lbnQoZnJhZ21lbnQsIGYsIHBhcmVudCkge1xuICB2YXIgbWFwcGVkID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZnJhZ21lbnQuY2hpbGRDb3VudDsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gZnJhZ21lbnQuY2hpbGQoaSk7XG4gICAgaWYgKGNoaWxkLmNvbnRlbnQuc2l6ZSkgeyBjaGlsZCA9IGNoaWxkLmNvcHkobWFwRnJhZ21lbnQoY2hpbGQuY29udGVudCwgZiwgY2hpbGQpKTsgfVxuICAgIGlmIChjaGlsZC5pc0lubGluZSkgeyBjaGlsZCA9IGYoY2hpbGQsIHBhcmVudCwgaSk7IH1cbiAgICBtYXBwZWQucHVzaChjaGlsZCk7XG4gIH1cbiAgcmV0dXJuIEZyYWdtZW50LmZyb21BcnJheShtYXBwZWQpXG59XG5cbi8vIDo6LSBBZGQgYSBtYXJrIHRvIGFsbCBpbmxpbmUgY29udGVudCBiZXR3ZWVuIHR3byBwb3NpdGlvbnMuXG52YXIgQWRkTWFya1N0ZXAgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChTdGVwKSB7XG4gIGZ1bmN0aW9uIEFkZE1hcmtTdGVwKGZyb20sIHRvLCBtYXJrKSB7XG4gICAgU3RlcC5jYWxsKHRoaXMpO1xuICAgIC8vIDo6IG51bWJlclxuICAgIC8vIFRoZSBzdGFydCBvZiB0aGUgbWFya2VkIHJhbmdlLlxuICAgIHRoaXMuZnJvbSA9IGZyb207XG4gICAgLy8gOjogbnVtYmVyXG4gICAgLy8gVGhlIGVuZCBvZiB0aGUgbWFya2VkIHJhbmdlLlxuICAgIHRoaXMudG8gPSB0bztcbiAgICAvLyA6OiBNYXJrXG4gICAgLy8gVGhlIG1hcmsgdG8gYWRkLlxuICAgIHRoaXMubWFyayA9IG1hcms7XG4gIH1cblxuICBpZiAoIFN0ZXAgKSBBZGRNYXJrU3RlcC5fX3Byb3RvX18gPSBTdGVwO1xuICBBZGRNYXJrU3RlcC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTdGVwICYmIFN0ZXAucHJvdG90eXBlICk7XG4gIEFkZE1hcmtTdGVwLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFkZE1hcmtTdGVwO1xuXG4gIEFkZE1hcmtTdGVwLnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uIGFwcGx5IChkb2MpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBvbGRTbGljZSA9IGRvYy5zbGljZSh0aGlzLmZyb20sIHRoaXMudG8pLCAkZnJvbSA9IGRvYy5yZXNvbHZlKHRoaXMuZnJvbSk7XG4gICAgdmFyIHBhcmVudCA9ICRmcm9tLm5vZGUoJGZyb20uc2hhcmVkRGVwdGgodGhpcy50bykpO1xuICAgIHZhciBzbGljZSA9IG5ldyBTbGljZShtYXBGcmFnbWVudChvbGRTbGljZS5jb250ZW50LCBmdW5jdGlvbiAobm9kZSwgcGFyZW50KSB7XG4gICAgICBpZiAoIW5vZGUuaXNBdG9tIHx8ICFwYXJlbnQudHlwZS5hbGxvd3NNYXJrVHlwZSh0aGlzJDEubWFyay50eXBlKSkgeyByZXR1cm4gbm9kZSB9XG4gICAgICByZXR1cm4gbm9kZS5tYXJrKHRoaXMkMS5tYXJrLmFkZFRvU2V0KG5vZGUubWFya3MpKVxuICAgIH0sIHBhcmVudCksIG9sZFNsaWNlLm9wZW5TdGFydCwgb2xkU2xpY2Uub3BlbkVuZCk7XG4gICAgcmV0dXJuIFN0ZXBSZXN1bHQuZnJvbVJlcGxhY2UoZG9jLCB0aGlzLmZyb20sIHRoaXMudG8sIHNsaWNlKVxuICB9O1xuXG4gIEFkZE1hcmtTdGVwLnByb3RvdHlwZS5pbnZlcnQgPSBmdW5jdGlvbiBpbnZlcnQgKCkge1xuICAgIHJldHVybiBuZXcgUmVtb3ZlTWFya1N0ZXAodGhpcy5mcm9tLCB0aGlzLnRvLCB0aGlzLm1hcmspXG4gIH07XG5cbiAgQWRkTWFya1N0ZXAucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIG1hcCAobWFwcGluZykge1xuICAgIHZhciBmcm9tID0gbWFwcGluZy5tYXBSZXN1bHQodGhpcy5mcm9tLCAxKSwgdG8gPSBtYXBwaW5nLm1hcFJlc3VsdCh0aGlzLnRvLCAtMSk7XG4gICAgaWYgKGZyb20uZGVsZXRlZCAmJiB0by5kZWxldGVkIHx8IGZyb20ucG9zID49IHRvLnBvcykgeyByZXR1cm4gbnVsbCB9XG4gICAgcmV0dXJuIG5ldyBBZGRNYXJrU3RlcChmcm9tLnBvcywgdG8ucG9zLCB0aGlzLm1hcmspXG4gIH07XG5cbiAgQWRkTWFya1N0ZXAucHJvdG90eXBlLm1lcmdlID0gZnVuY3Rpb24gbWVyZ2UgKG90aGVyKSB7XG4gICAgaWYgKG90aGVyIGluc3RhbmNlb2YgQWRkTWFya1N0ZXAgJiZcbiAgICAgICAgb3RoZXIubWFyay5lcSh0aGlzLm1hcmspICYmXG4gICAgICAgIHRoaXMuZnJvbSA8PSBvdGhlci50byAmJiB0aGlzLnRvID49IG90aGVyLmZyb20pXG4gICAgICB7IHJldHVybiBuZXcgQWRkTWFya1N0ZXAoTWF0aC5taW4odGhpcy5mcm9tLCBvdGhlci5mcm9tKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5tYXgodGhpcy50bywgb3RoZXIudG8pLCB0aGlzLm1hcmspIH1cbiAgfTtcblxuICBBZGRNYXJrU3RlcC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgICByZXR1cm4ge3N0ZXBUeXBlOiBcImFkZE1hcmtcIiwgbWFyazogdGhpcy5tYXJrLnRvSlNPTigpLFxuICAgICAgICAgICAgZnJvbTogdGhpcy5mcm9tLCB0bzogdGhpcy50b31cbiAgfTtcblxuICBBZGRNYXJrU3RlcC5mcm9tSlNPTiA9IGZ1bmN0aW9uIGZyb21KU09OIChzY2hlbWEsIGpzb24pIHtcbiAgICBpZiAodHlwZW9mIGpzb24uZnJvbSAhPSBcIm51bWJlclwiIHx8IHR5cGVvZiBqc29uLnRvICE9IFwibnVtYmVyXCIpXG4gICAgICB7IHRocm93IG5ldyBSYW5nZUVycm9yKFwiSW52YWxpZCBpbnB1dCBmb3IgQWRkTWFya1N0ZXAuZnJvbUpTT05cIikgfVxuICAgIHJldHVybiBuZXcgQWRkTWFya1N0ZXAoanNvbi5mcm9tLCBqc29uLnRvLCBzY2hlbWEubWFya0Zyb21KU09OKGpzb24ubWFyaykpXG4gIH07XG5cbiAgcmV0dXJuIEFkZE1hcmtTdGVwO1xufShTdGVwKSk7XG5cblN0ZXAuanNvbklEKFwiYWRkTWFya1wiLCBBZGRNYXJrU3RlcCk7XG5cbi8vIDo6LSBSZW1vdmUgYSBtYXJrIGZyb20gYWxsIGlubGluZSBjb250ZW50IGJldHdlZW4gdHdvIHBvc2l0aW9ucy5cbnZhciBSZW1vdmVNYXJrU3RlcCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFN0ZXApIHtcbiAgZnVuY3Rpb24gUmVtb3ZlTWFya1N0ZXAoZnJvbSwgdG8sIG1hcmspIHtcbiAgICBTdGVwLmNhbGwodGhpcyk7XG4gICAgLy8gOjogbnVtYmVyXG4gICAgLy8gVGhlIHN0YXJ0IG9mIHRoZSB1bm1hcmtlZCByYW5nZS5cbiAgICB0aGlzLmZyb20gPSBmcm9tO1xuICAgIC8vIDo6IG51bWJlclxuICAgIC8vIFRoZSBlbmQgb2YgdGhlIHVubWFya2VkIHJhbmdlLlxuICAgIHRoaXMudG8gPSB0bztcbiAgICAvLyA6OiBNYXJrXG4gICAgLy8gVGhlIG1hcmsgdG8gcmVtb3ZlLlxuICAgIHRoaXMubWFyayA9IG1hcms7XG4gIH1cblxuICBpZiAoIFN0ZXAgKSBSZW1vdmVNYXJrU3RlcC5fX3Byb3RvX18gPSBTdGVwO1xuICBSZW1vdmVNYXJrU3RlcC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTdGVwICYmIFN0ZXAucHJvdG90eXBlICk7XG4gIFJlbW92ZU1hcmtTdGVwLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlbW92ZU1hcmtTdGVwO1xuXG4gIFJlbW92ZU1hcmtTdGVwLnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uIGFwcGx5IChkb2MpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBvbGRTbGljZSA9IGRvYy5zbGljZSh0aGlzLmZyb20sIHRoaXMudG8pO1xuICAgIHZhciBzbGljZSA9IG5ldyBTbGljZShtYXBGcmFnbWVudChvbGRTbGljZS5jb250ZW50LCBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgcmV0dXJuIG5vZGUubWFyayh0aGlzJDEubWFyay5yZW1vdmVGcm9tU2V0KG5vZGUubWFya3MpKVxuICAgIH0pLCBvbGRTbGljZS5vcGVuU3RhcnQsIG9sZFNsaWNlLm9wZW5FbmQpO1xuICAgIHJldHVybiBTdGVwUmVzdWx0LmZyb21SZXBsYWNlKGRvYywgdGhpcy5mcm9tLCB0aGlzLnRvLCBzbGljZSlcbiAgfTtcblxuICBSZW1vdmVNYXJrU3RlcC5wcm90b3R5cGUuaW52ZXJ0ID0gZnVuY3Rpb24gaW52ZXJ0ICgpIHtcbiAgICByZXR1cm4gbmV3IEFkZE1hcmtTdGVwKHRoaXMuZnJvbSwgdGhpcy50bywgdGhpcy5tYXJrKVxuICB9O1xuXG4gIFJlbW92ZU1hcmtTdGVwLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiBtYXAgKG1hcHBpbmcpIHtcbiAgICB2YXIgZnJvbSA9IG1hcHBpbmcubWFwUmVzdWx0KHRoaXMuZnJvbSwgMSksIHRvID0gbWFwcGluZy5tYXBSZXN1bHQodGhpcy50bywgLTEpO1xuICAgIGlmIChmcm9tLmRlbGV0ZWQgJiYgdG8uZGVsZXRlZCB8fCBmcm9tLnBvcyA+PSB0by5wb3MpIHsgcmV0dXJuIG51bGwgfVxuICAgIHJldHVybiBuZXcgUmVtb3ZlTWFya1N0ZXAoZnJvbS5wb3MsIHRvLnBvcywgdGhpcy5tYXJrKVxuICB9O1xuXG4gIFJlbW92ZU1hcmtTdGVwLnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uIG1lcmdlIChvdGhlcikge1xuICAgIGlmIChvdGhlciBpbnN0YW5jZW9mIFJlbW92ZU1hcmtTdGVwICYmXG4gICAgICAgIG90aGVyLm1hcmsuZXEodGhpcy5tYXJrKSAmJlxuICAgICAgICB0aGlzLmZyb20gPD0gb3RoZXIudG8gJiYgdGhpcy50byA+PSBvdGhlci5mcm9tKVxuICAgICAgeyByZXR1cm4gbmV3IFJlbW92ZU1hcmtTdGVwKE1hdGgubWluKHRoaXMuZnJvbSwgb3RoZXIuZnJvbSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWF4KHRoaXMudG8sIG90aGVyLnRvKSwgdGhpcy5tYXJrKSB9XG4gIH07XG5cbiAgUmVtb3ZlTWFya1N0ZXAucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gICAgcmV0dXJuIHtzdGVwVHlwZTogXCJyZW1vdmVNYXJrXCIsIG1hcms6IHRoaXMubWFyay50b0pTT04oKSxcbiAgICAgICAgICAgIGZyb206IHRoaXMuZnJvbSwgdG86IHRoaXMudG99XG4gIH07XG5cbiAgUmVtb3ZlTWFya1N0ZXAuZnJvbUpTT04gPSBmdW5jdGlvbiBmcm9tSlNPTiAoc2NoZW1hLCBqc29uKSB7XG4gICAgaWYgKHR5cGVvZiBqc29uLmZyb20gIT0gXCJudW1iZXJcIiB8fCB0eXBlb2YganNvbi50byAhPSBcIm51bWJlclwiKVxuICAgICAgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkludmFsaWQgaW5wdXQgZm9yIFJlbW92ZU1hcmtTdGVwLmZyb21KU09OXCIpIH1cbiAgICByZXR1cm4gbmV3IFJlbW92ZU1hcmtTdGVwKGpzb24uZnJvbSwganNvbi50bywgc2NoZW1hLm1hcmtGcm9tSlNPTihqc29uLm1hcmspKVxuICB9O1xuXG4gIHJldHVybiBSZW1vdmVNYXJrU3RlcDtcbn0oU3RlcCkpO1xuXG5TdGVwLmpzb25JRChcInJlbW92ZU1hcmtcIiwgUmVtb3ZlTWFya1N0ZXApO1xuXG4vLyA6OiAobnVtYmVyLCBudW1iZXIsIE1hcmspIOKGkiB0aGlzXG4vLyBBZGQgdGhlIGdpdmVuIG1hcmsgdG8gdGhlIGlubGluZSBjb250ZW50IGJldHdlZW4gYGZyb21gIGFuZCBgdG9gLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5hZGRNYXJrID0gZnVuY3Rpb24oZnJvbSwgdG8sIG1hcmspIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHJlbW92ZWQgPSBbXSwgYWRkZWQgPSBbXSwgcmVtb3ZpbmcgPSBudWxsLCBhZGRpbmcgPSBudWxsO1xuICB0aGlzLmRvYy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIGZ1bmN0aW9uIChub2RlLCBwb3MsIHBhcmVudCkge1xuICAgIGlmICghbm9kZS5pc0lubGluZSkgeyByZXR1cm4gfVxuICAgIHZhciBtYXJrcyA9IG5vZGUubWFya3M7XG4gICAgaWYgKCFtYXJrLmlzSW5TZXQobWFya3MpICYmIHBhcmVudC50eXBlLmFsbG93c01hcmtUeXBlKG1hcmsudHlwZSkpIHtcbiAgICAgIHZhciBzdGFydCA9IE1hdGgubWF4KHBvcywgZnJvbSksIGVuZCA9IE1hdGgubWluKHBvcyArIG5vZGUubm9kZVNpemUsIHRvKTtcbiAgICAgIHZhciBuZXdTZXQgPSBtYXJrLmFkZFRvU2V0KG1hcmtzKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXJrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIW1hcmtzW2ldLmlzSW5TZXQobmV3U2V0KSkge1xuICAgICAgICAgIGlmIChyZW1vdmluZyAmJiByZW1vdmluZy50byA9PSBzdGFydCAmJiByZW1vdmluZy5tYXJrLmVxKG1hcmtzW2ldKSlcbiAgICAgICAgICAgIHsgcmVtb3ZpbmcudG8gPSBlbmQ7IH1cbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7IHJlbW92ZWQucHVzaChyZW1vdmluZyA9IG5ldyBSZW1vdmVNYXJrU3RlcChzdGFydCwgZW5kLCBtYXJrc1tpXSkpOyB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFkZGluZyAmJiBhZGRpbmcudG8gPT0gc3RhcnQpXG4gICAgICAgIHsgYWRkaW5nLnRvID0gZW5kOyB9XG4gICAgICBlbHNlXG4gICAgICAgIHsgYWRkZWQucHVzaChhZGRpbmcgPSBuZXcgQWRkTWFya1N0ZXAoc3RhcnQsIGVuZCwgbWFyaykpOyB9XG4gICAgfVxuICB9KTtcblxuICByZW1vdmVkLmZvckVhY2goZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHRoaXMkMS5zdGVwKHMpOyB9KTtcbiAgYWRkZWQuZm9yRWFjaChmdW5jdGlvbiAocykgeyByZXR1cm4gdGhpcyQxLnN0ZXAocyk7IH0pO1xuICByZXR1cm4gdGhpc1xufTtcblxuLy8gOjogKG51bWJlciwgbnVtYmVyLCA/dW5pb248TWFyaywgTWFya1R5cGU+KSDihpIgdGhpc1xuLy8gUmVtb3ZlIG1hcmtzIGZyb20gaW5saW5lIG5vZGVzIGJldHdlZW4gYGZyb21gIGFuZCBgdG9gLiBXaGVuIGBtYXJrYFxuLy8gaXMgYSBzaW5nbGUgbWFyaywgcmVtb3ZlIHByZWNpc2VseSB0aGF0IG1hcmsuIFdoZW4gaXQgaXMgYSBtYXJrIHR5cGUsXG4vLyByZW1vdmUgYWxsIG1hcmtzIG9mIHRoYXQgdHlwZS4gV2hlbiBpdCBpcyBudWxsLCByZW1vdmUgYWxsIG1hcmtzIG9mXG4vLyBhbnkgdHlwZS5cblRyYW5zZm9ybS5wcm90b3R5cGUucmVtb3ZlTWFyayA9IGZ1bmN0aW9uKGZyb20sIHRvLCBtYXJrKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuICBpZiAoIG1hcmsgPT09IHZvaWQgMCApIG1hcmsgPSBudWxsO1xuXG4gIHZhciBtYXRjaGVkID0gW10sIHN0ZXAgPSAwO1xuICB0aGlzLmRvYy5ub2Rlc0JldHdlZW4oZnJvbSwgdG8sIGZ1bmN0aW9uIChub2RlLCBwb3MpIHtcbiAgICBpZiAoIW5vZGUuaXNJbmxpbmUpIHsgcmV0dXJuIH1cbiAgICBzdGVwKys7XG4gICAgdmFyIHRvUmVtb3ZlID0gbnVsbDtcbiAgICBpZiAobWFyayBpbnN0YW5jZW9mIE1hcmtUeXBlKSB7XG4gICAgICB2YXIgc2V0ID0gbm9kZS5tYXJrcywgZm91bmQ7XG4gICAgICB3aGlsZSAoZm91bmQgPSBtYXJrLmlzSW5TZXQoc2V0KSkge1xuKHRvUmVtb3ZlIHx8ICh0b1JlbW92ZSA9IFtdKSkucHVzaChmb3VuZCk7XG4gICAgICAgIHNldCA9IGZvdW5kLnJlbW92ZUZyb21TZXQoc2V0KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG1hcmspIHtcbiAgICAgIGlmIChtYXJrLmlzSW5TZXQobm9kZS5tYXJrcykpIHsgdG9SZW1vdmUgPSBbbWFya107IH1cbiAgICB9IGVsc2Uge1xuICAgICAgdG9SZW1vdmUgPSBub2RlLm1hcmtzO1xuICAgIH1cbiAgICBpZiAodG9SZW1vdmUgJiYgdG9SZW1vdmUubGVuZ3RoKSB7XG4gICAgICB2YXIgZW5kID0gTWF0aC5taW4ocG9zICsgbm9kZS5ub2RlU2l6ZSwgdG8pO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b1JlbW92ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc3R5bGUgPSB0b1JlbW92ZVtpXSwgZm91bmQkMSA9ICh2b2lkIDApO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1hdGNoZWQubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICB2YXIgbSA9IG1hdGNoZWRbal07XG4gICAgICAgICAgaWYgKG0uc3RlcCA9PSBzdGVwIC0gMSAmJiBzdHlsZS5lcShtYXRjaGVkW2pdLnN0eWxlKSkgeyBmb3VuZCQxID0gbTsgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmb3VuZCQxKSB7XG4gICAgICAgICAgZm91bmQkMS50byA9IGVuZDtcbiAgICAgICAgICBmb3VuZCQxLnN0ZXAgPSBzdGVwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hdGNoZWQucHVzaCh7c3R5bGU6IHN0eWxlLCBmcm9tOiBNYXRoLm1heChwb3MsIGZyb20pLCB0bzogZW5kLCBzdGVwOiBzdGVwfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBtYXRjaGVkLmZvckVhY2goZnVuY3Rpb24gKG0pIHsgcmV0dXJuIHRoaXMkMS5zdGVwKG5ldyBSZW1vdmVNYXJrU3RlcChtLmZyb20sIG0udG8sIG0uc3R5bGUpKTsgfSk7XG4gIHJldHVybiB0aGlzXG59O1xuXG4vLyA6OiAobnVtYmVyLCBOb2RlVHlwZSwgP0NvbnRlbnRNYXRjaCkg4oaSIHRoaXNcbi8vIFJlbW92ZXMgYWxsIG1hcmtzIGFuZCBub2RlcyBmcm9tIHRoZSBjb250ZW50IG9mIHRoZSBub2RlIGF0IGBwb3NgXG4vLyB0aGF0IGRvbid0IG1hdGNoIHRoZSBnaXZlbiBuZXcgcGFyZW50IG5vZGUgdHlwZS4gQWNjZXB0cyBhblxuLy8gb3B0aW9uYWwgc3RhcnRpbmcgW2NvbnRlbnQgbWF0Y2hdKCNtb2RlbC5Db250ZW50TWF0Y2gpIGFzIHRoaXJkXG4vLyBhcmd1bWVudC5cblRyYW5zZm9ybS5wcm90b3R5cGUuY2xlYXJJbmNvbXBhdGlibGUgPSBmdW5jdGlvbihwb3MsIHBhcmVudFR5cGUsIG1hdGNoKSB7XG4gIGlmICggbWF0Y2ggPT09IHZvaWQgMCApIG1hdGNoID0gcGFyZW50VHlwZS5jb250ZW50TWF0Y2g7XG5cbiAgdmFyIG5vZGUgPSB0aGlzLmRvYy5ub2RlQXQocG9zKTtcbiAgdmFyIGRlbFN0ZXBzID0gW10sIGN1ciA9IHBvcyArIDE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZENvdW50OyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkKGkpLCBlbmQgPSBjdXIgKyBjaGlsZC5ub2RlU2l6ZTtcbiAgICB2YXIgYWxsb3dlZCA9IG1hdGNoLm1hdGNoVHlwZShjaGlsZC50eXBlLCBjaGlsZC5hdHRycyk7XG4gICAgaWYgKCFhbGxvd2VkKSB7XG4gICAgICBkZWxTdGVwcy5wdXNoKG5ldyBSZXBsYWNlU3RlcChjdXIsIGVuZCwgU2xpY2UuZW1wdHkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWF0Y2ggPSBhbGxvd2VkO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjaGlsZC5tYXJrcy5sZW5ndGg7IGorKykgeyBpZiAoIXBhcmVudFR5cGUuYWxsb3dzTWFya1R5cGUoY2hpbGQubWFya3Nbal0udHlwZSkpXG4gICAgICAgIHsgdGhpcy5zdGVwKG5ldyBSZW1vdmVNYXJrU3RlcChjdXIsIGVuZCwgY2hpbGQubWFya3Nbal0pKTsgfSB9XG4gICAgfVxuICAgIGN1ciA9IGVuZDtcbiAgfVxuICBpZiAoIW1hdGNoLnZhbGlkRW5kKSB7XG4gICAgdmFyIGZpbGwgPSBtYXRjaC5maWxsQmVmb3JlKEZyYWdtZW50LmVtcHR5LCB0cnVlKTtcbiAgICB0aGlzLnJlcGxhY2UoY3VyLCBjdXIsIG5ldyBTbGljZShmaWxsLCAwLCAwKSk7XG4gIH1cbiAgZm9yICh2YXIgaSQxID0gZGVsU3RlcHMubGVuZ3RoIC0gMTsgaSQxID49IDA7IGkkMS0tKSB7IHRoaXMuc3RlcChkZWxTdGVwc1tpJDFdKTsgfVxuICByZXR1cm4gdGhpc1xufTtcblxuLy8gOjogKE5vZGUsIG51bWJlciwgP251bWJlciwgP1NsaWNlKSDihpIgP1N0ZXBcbi8vIOKAmEZpdOKAmSBhIHNsaWNlIGludG8gYSBnaXZlbiBwb3NpdGlvbiBpbiB0aGUgZG9jdW1lbnQsIHByb2R1Y2luZyBhXG4vLyBbc3RlcF0oI3RyYW5zZm9ybS5TdGVwKSB0aGF0IGluc2VydHMgaXQuIFdpbGwgcmV0dXJuIG51bGwgaWZcbi8vIHRoZXJlJ3Mgbm8gbWVhbmluZ2Z1bCB3YXkgdG8gaW5zZXJ0IHRoZSBzbGljZSBoZXJlLCBvciBpbnNlcnRpbmcgaXRcbi8vIHdvdWxkIGJlIGEgbm8tb3AgKGFuIGVtcHR5IHNsaWNlIG92ZXIgYW4gZW1wdHkgcmFuZ2UpLlxuZnVuY3Rpb24gcmVwbGFjZVN0ZXAoZG9jLCBmcm9tLCB0bywgc2xpY2UpIHtcbiAgaWYgKCB0byA9PT0gdm9pZCAwICkgdG8gPSBmcm9tO1xuICBpZiAoIHNsaWNlID09PSB2b2lkIDAgKSBzbGljZSA9IFNsaWNlLmVtcHR5O1xuXG4gIGlmIChmcm9tID09IHRvICYmICFzbGljZS5zaXplKSB7IHJldHVybiBudWxsIH1cblxuICB2YXIgJGZyb20gPSBkb2MucmVzb2x2ZShmcm9tKSwgJHRvID0gZG9jLnJlc29sdmUodG8pO1xuICAvLyBPcHRpbWl6YXRpb24gLS0gYXZvaWQgd29yayBpZiBpdCdzIG9idmlvdXMgdGhhdCBpdCdzIG5vdCBuZWVkZWQuXG4gIGlmIChmaXRzVHJpdmlhbGx5KCRmcm9tLCAkdG8sIHNsaWNlKSkgeyByZXR1cm4gbmV3IFJlcGxhY2VTdGVwKGZyb20sIHRvLCBzbGljZSkgfVxuICByZXR1cm4gbmV3IEZpdHRlcigkZnJvbSwgJHRvLCBzbGljZSkuZml0KClcbn1cblxuLy8gOjogKG51bWJlciwgP251bWJlciwgP1NsaWNlKSDihpIgdGhpc1xuLy8gUmVwbGFjZSB0aGUgcGFydCBvZiB0aGUgZG9jdW1lbnQgYmV0d2VlbiBgZnJvbWAgYW5kIGB0b2Agd2l0aCB0aGVcbi8vIGdpdmVuIGBzbGljZWAuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbihmcm9tLCB0bywgc2xpY2UpIHtcbiAgaWYgKCB0byA9PT0gdm9pZCAwICkgdG8gPSBmcm9tO1xuICBpZiAoIHNsaWNlID09PSB2b2lkIDAgKSBzbGljZSA9IFNsaWNlLmVtcHR5O1xuXG4gIHZhciBzdGVwID0gcmVwbGFjZVN0ZXAodGhpcy5kb2MsIGZyb20sIHRvLCBzbGljZSk7XG4gIGlmIChzdGVwKSB7IHRoaXMuc3RlcChzdGVwKTsgfVxuICByZXR1cm4gdGhpc1xufTtcblxuLy8gOjogKG51bWJlciwgbnVtYmVyLCB1bmlvbjxGcmFnbWVudCwgTm9kZSwgW05vZGVdPikg4oaSIHRoaXNcbi8vIFJlcGxhY2UgdGhlIGdpdmVuIHJhbmdlIHdpdGggdGhlIGdpdmVuIGNvbnRlbnQsIHdoaWNoIG1heSBiZSBhXG4vLyBmcmFnbWVudCwgbm9kZSwgb3IgYXJyYXkgb2Ygbm9kZXMuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnJlcGxhY2VXaXRoID0gZnVuY3Rpb24oZnJvbSwgdG8sIGNvbnRlbnQpIHtcbiAgcmV0dXJuIHRoaXMucmVwbGFjZShmcm9tLCB0bywgbmV3IFNsaWNlKEZyYWdtZW50LmZyb20oY29udGVudCksIDAsIDApKVxufTtcblxuLy8gOjogKG51bWJlciwgbnVtYmVyKSDihpIgdGhpc1xuLy8gRGVsZXRlIHRoZSBjb250ZW50IGJldHdlZW4gdGhlIGdpdmVuIHBvc2l0aW9ucy5cblRyYW5zZm9ybS5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24oZnJvbSwgdG8pIHtcbiAgcmV0dXJuIHRoaXMucmVwbGFjZShmcm9tLCB0bywgU2xpY2UuZW1wdHkpXG59O1xuXG4vLyA6OiAobnVtYmVyLCB1bmlvbjxGcmFnbWVudCwgTm9kZSwgW05vZGVdPikg4oaSIHRoaXNcbi8vIEluc2VydCB0aGUgZ2l2ZW4gY29udGVudCBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24uXG5UcmFuc2Zvcm0ucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uKHBvcywgY29udGVudCkge1xuICByZXR1cm4gdGhpcy5yZXBsYWNlV2l0aChwb3MsIHBvcywgY29udGVudClcbn07XG5cbmZ1bmN0aW9uIGZpdHNUcml2aWFsbHkoJGZyb20sICR0bywgc2xpY2UpIHtcbiAgcmV0dXJuICFzbGljZS5vcGVuU3RhcnQgJiYgIXNsaWNlLm9wZW5FbmQgJiYgJGZyb20uc3RhcnQoKSA9PSAkdG8uc3RhcnQoKSAmJlxuICAgICRmcm9tLnBhcmVudC5jYW5SZXBsYWNlKCRmcm9tLmluZGV4KCksICR0by5pbmRleCgpLCBzbGljZS5jb250ZW50KVxufVxuXG4vLyBBbGdvcml0aG0gZm9yICdwbGFjaW5nJyB0aGUgZWxlbWVudHMgb2YgYSBzbGljZSBpbnRvIGEgZ2FwOlxuLy9cbi8vIFdlIGNvbnNpZGVyIHRoZSBjb250ZW50IG9mIGVhY2ggbm9kZSB0aGF0IGlzIG9wZW4gdG8gdGhlIGxlZnQgdG8gYmVcbi8vIGluZGVwZW5kZW50bHkgcGxhY2VhYmxlLiBJLmUuIGluIDxwKFwiZm9vXCIpLCBwKFwiYmFyXCIpPiwgd2hlbiB0aGVcbi8vIHBhcmFncmFwaCBvbiB0aGUgbGVmdCBpcyBvcGVuLCBcImZvb1wiIGNhbiBiZSBwbGFjZWQgKHNvbWV3aGVyZSBvblxuLy8gdGhlIGxlZnQgc2lkZSBvZiB0aGUgcmVwbGFjZW1lbnQgZ2FwKSBpbmRlcGVuZGVudGx5IGZyb20gcChcImJhclwiKS5cbi8vXG4vLyBUaGlzIGNsYXNzIHRyYWNrcyB0aGUgc3RhdGUgb2YgdGhlIHBsYWNlbWVudCBwcm9ncmVzcyBpbiB0aGVcbi8vIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuLy9cbi8vICAtIGBmcm9udGllcmAgaG9sZHMgYSBzdGFjayBvZiBge3R5cGUsIG1hdGNofWAgb2JqZWN0cyB0aGF0XG4vLyAgICByZXByZXNlbnQgdGhlIG9wZW4gc2lkZSBvZiB0aGUgcmVwbGFjZW1lbnQuIEl0IHN0YXJ0cyBhdFxuLy8gICAgYCRmcm9tYCwgdGhlbiBtb3ZlcyBmb3J3YXJkIGFzIGNvbnRlbnQgaXMgcGxhY2VkLCBhbmQgaXMgZmluYWxseVxuLy8gICAgcmVjb25jaWxlZCB3aXRoIGAkdG9gLlxuLy9cbi8vICAtIGB1bnBsYWNlZGAgaXMgYSBzbGljZSB0aGF0IHJlcHJlc2VudHMgdGhlIGNvbnRlbnQgdGhhdCBoYXNuJ3Rcbi8vICAgIGJlZW4gcGxhY2VkIHlldC5cbi8vXG4vLyAgLSBgcGxhY2VkYCBpcyBhIGZyYWdtZW50IG9mIHBsYWNlZCBjb250ZW50LiBJdHMgb3Blbi1zdGFydCB2YWx1ZVxuLy8gICAgaXMgaW1wbGljaXQgaW4gYCRmcm9tYCwgYW5kIGl0cyBvcGVuLWVuZCB2YWx1ZSBpbiBgZnJvbnRpZXJgLlxudmFyIEZpdHRlciA9IGZ1bmN0aW9uIEZpdHRlcigkZnJvbSwgJHRvLCBzbGljZSkge1xuICB0aGlzLiR0byA9ICR0bztcbiAgdGhpcy4kZnJvbSA9ICRmcm9tO1xuICB0aGlzLnVucGxhY2VkID0gc2xpY2U7XG5cbiAgdGhpcy5mcm9udGllciA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8PSAkZnJvbS5kZXB0aDsgaSsrKSB7XG4gICAgdmFyIG5vZGUgPSAkZnJvbS5ub2RlKGkpO1xuICAgIHRoaXMuZnJvbnRpZXIucHVzaCh7XG4gICAgICB0eXBlOiBub2RlLnR5cGUsXG4gICAgICBtYXRjaDogbm9kZS5jb250ZW50TWF0Y2hBdCgkZnJvbS5pbmRleEFmdGVyKGkpKVxuICAgIH0pO1xuICB9XG5cbiAgdGhpcy5wbGFjZWQgPSBGcmFnbWVudC5lbXB0eTtcbiAgZm9yICh2YXIgaSQxID0gJGZyb20uZGVwdGg7IGkkMSA+IDA7IGkkMS0tKVxuICAgIHsgdGhpcy5wbGFjZWQgPSBGcmFnbWVudC5mcm9tKCRmcm9tLm5vZGUoaSQxKS5jb3B5KHRoaXMucGxhY2VkKSk7IH1cbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMSA9IHsgZGVwdGg6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxucHJvdG90eXBlQWNjZXNzb3JzJDEuZGVwdGguZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5mcm9udGllci5sZW5ndGggLSAxIH07XG5cbkZpdHRlci5wcm90b3R5cGUuZml0ID0gZnVuY3Rpb24gZml0ICgpIHtcbiAgLy8gQXMgbG9uZyBhcyB0aGVyZSdzIHVucGxhY2VkIGNvbnRlbnQsIHRyeSB0byBwbGFjZSBzb21lIG9mIGl0LlxuICAvLyBJZiB0aGF0IGZhaWxzLCBlaXRoZXIgaW5jcmVhc2UgdGhlIG9wZW4gc2NvcmUgb2YgdGhlIHVucGxhY2VkXG4gIC8vIHNsaWNlLCBvciBkcm9wIG5vZGVzIGZyb20gaXQsIGFuZCB0aGVuIHRyeSBhZ2Fpbi5cbiAgd2hpbGUgKHRoaXMudW5wbGFjZWQuc2l6ZSkge1xuICAgIHZhciBmaXQgPSB0aGlzLmZpbmRGaXR0YWJsZSgpO1xuICAgIGlmIChmaXQpIHsgdGhpcy5wbGFjZU5vZGVzKGZpdCk7IH1cbiAgICBlbHNlIHsgdGhpcy5vcGVuTW9yZSgpIHx8IHRoaXMuZHJvcE5vZGUoKTsgfVxuICB9XG4gIC8vIFdoZW4gdGhlcmUncyBpbmxpbmUgY29udGVudCBkaXJlY3RseSBhZnRlciB0aGUgZnJvbnRpZXIgX2FuZF9cbiAgLy8gZGlyZWN0bHkgYWZ0ZXIgYHRoaXMuJHRvYCwgd2UgbXVzdCBnZW5lcmF0ZSBhIGBSZXBsYWNlQXJvdW5kYFxuICAvLyBzdGVwIHRoYXQgcHVsbHMgdGhhdCBjb250ZW50IGludG8gdGhlIG5vZGUgYWZ0ZXIgdGhlIGZyb250aWVyLlxuICAvLyBUaGF0IG1lYW5zIHRoZSBmaXR0aW5nIG11c3QgYmUgZG9uZSB0byB0aGUgZW5kIG9mIHRoZSB0ZXh0YmxvY2tcbiAgLy8gbm9kZSBhZnRlciBgdGhpcy4kdG9gLCBub3QgYHRoaXMuJHRvYCBpdHNlbGYuXG4gIHZhciBtb3ZlSW5saW5lID0gdGhpcy5tdXN0TW92ZUlubGluZSgpLCBwbGFjZWRTaXplID0gdGhpcy5wbGFjZWQuc2l6ZSAtIHRoaXMuZGVwdGggLSB0aGlzLiRmcm9tLmRlcHRoO1xuICB2YXIgJGZyb20gPSB0aGlzLiRmcm9tLCAkdG8gPSB0aGlzLmNsb3NlKG1vdmVJbmxpbmUgPCAwID8gdGhpcy4kdG8gOiAkZnJvbS5kb2MucmVzb2x2ZShtb3ZlSW5saW5lKSk7XG4gIGlmICghJHRvKSB7IHJldHVybiBudWxsIH1cblxuICAvLyBJZiBjbG9zaW5nIHRvIGAkdG9gIHN1Y2NlZWRlZCwgY3JlYXRlIGEgc3RlcFxuICB2YXIgY29udGVudCA9IHRoaXMucGxhY2VkLCBvcGVuU3RhcnQgPSAkZnJvbS5kZXB0aCwgb3BlbkVuZCA9ICR0by5kZXB0aDtcbiAgd2hpbGUgKG9wZW5TdGFydCAmJiBvcGVuRW5kICYmIGNvbnRlbnQuY2hpbGRDb3VudCA9PSAxKSB7IC8vIE5vcm1hbGl6ZSBieSBkcm9wcGluZyBvcGVuIHBhcmVudCBub2Rlc1xuICAgIGNvbnRlbnQgPSBjb250ZW50LmZpcnN0Q2hpbGQuY29udGVudDtcbiAgICBvcGVuU3RhcnQtLTsgb3BlbkVuZC0tO1xuICB9XG4gIHZhciBzbGljZSA9IG5ldyBTbGljZShjb250ZW50LCBvcGVuU3RhcnQsIG9wZW5FbmQpO1xuICBpZiAobW92ZUlubGluZSA+IC0xKVxuICAgIHsgcmV0dXJuIG5ldyBSZXBsYWNlQXJvdW5kU3RlcCgkZnJvbS5wb3MsIG1vdmVJbmxpbmUsIHRoaXMuJHRvLnBvcywgdGhpcy4kdG8uZW5kKCksIHNsaWNlLCBwbGFjZWRTaXplKSB9XG4gIGlmIChzbGljZS5zaXplIHx8ICRmcm9tLnBvcyAhPSB0aGlzLiR0by5wb3MpIC8vIERvbid0IGdlbmVyYXRlIG5vLW9wIHN0ZXBzXG4gICAgeyByZXR1cm4gbmV3IFJlcGxhY2VTdGVwKCRmcm9tLnBvcywgJHRvLnBvcywgc2xpY2UpIH1cbn07XG5cbi8vIEZpbmQgYSBwb3NpdGlvbiBvbiB0aGUgc3RhcnQgc3BpbmUgb2YgYHRoaXMudW5wbGFjZWRgIHRoYXQgaGFzXG4vLyBjb250ZW50IHRoYXQgY2FuIGJlIG1vdmVkIHNvbWV3aGVyZSBvbiB0aGUgZnJvbnRpZXIuIFJldHVybnMgdHdvXG4vLyBkZXB0aHMsIG9uZSBmb3IgdGhlIHNsaWNlIGFuZCBvbmUgZm9yIHRoZSBmcm9udGllci5cbkZpdHRlci5wcm90b3R5cGUuZmluZEZpdHRhYmxlID0gZnVuY3Rpb24gZmluZEZpdHRhYmxlICgpIHtcbiAgLy8gT25seSB0cnkgd3JhcHBpbmcgbm9kZXMgKHBhc3MgMikgYWZ0ZXIgZmluZGluZyBhIHBsYWNlIHdpdGhvdXRcbiAgLy8gd3JhcHBpbmcgZmFpbGVkLlxuICBmb3IgKHZhciBwYXNzID0gMTsgcGFzcyA8PSAyOyBwYXNzKyspIHtcbiAgICBmb3IgKHZhciBzbGljZURlcHRoID0gdGhpcy51bnBsYWNlZC5vcGVuU3RhcnQ7IHNsaWNlRGVwdGggPj0gMDsgc2xpY2VEZXB0aC0tKSB7XG4gICAgICB2YXIgZnJhZ21lbnQgPSAodm9pZCAwKSwgcGFyZW50ID0gKHZvaWQgMCk7XG4gICAgICBpZiAoc2xpY2VEZXB0aCkge1xuICAgICAgICBwYXJlbnQgPSBjb250ZW50QXQodGhpcy51bnBsYWNlZC5jb250ZW50LCBzbGljZURlcHRoIC0gMSkuZmlyc3RDaGlsZDtcbiAgICAgICAgZnJhZ21lbnQgPSBwYXJlbnQuY29udGVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZyYWdtZW50ID0gdGhpcy51bnBsYWNlZC5jb250ZW50O1xuICAgICAgfVxuICAgICAgdmFyIGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcbiAgICAgIGZvciAodmFyIGZyb250aWVyRGVwdGggPSB0aGlzLmRlcHRoOyBmcm9udGllckRlcHRoID49IDA7IGZyb250aWVyRGVwdGgtLSkge1xuICAgICAgICB2YXIgcmVmID0gdGhpcy5mcm9udGllcltmcm9udGllckRlcHRoXTtcbiAgICAgICAgICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICAgICAgICAgIHZhciBtYXRjaCA9IHJlZi5tYXRjaDtcbiAgICAgICAgICB2YXIgd3JhcCA9ICh2b2lkIDApLCBpbmplY3QgPSAodm9pZCAwKTtcbiAgICAgICAgLy8gSW4gcGFzcyAxLCBpZiB0aGUgbmV4dCBub2RlIG1hdGNoZXMsIG9yIHRoZXJlIGlzIG5vIG5leHRcbiAgICAgICAgLy8gbm9kZSBidXQgdGhlIHBhcmVudHMgbG9vayBjb21wYXRpYmxlLCB3ZSd2ZSBmb3VuZCBhXG4gICAgICAgIC8vIHBsYWNlLlxuICAgICAgICBpZiAocGFzcyA9PSAxICYmIChmaXJzdCA/IG1hdGNoLm1hdGNoVHlwZShmaXJzdC50eXBlKSB8fCAoaW5qZWN0ID0gbWF0Y2guZmlsbEJlZm9yZShGcmFnbWVudC5mcm9tKGZpcnN0KSwgZmFsc2UpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICA6IHR5cGUuY29tcGF0aWJsZUNvbnRlbnQocGFyZW50LnR5cGUpKSlcbiAgICAgICAgICB7IHJldHVybiB7c2xpY2VEZXB0aDogc2xpY2VEZXB0aCwgZnJvbnRpZXJEZXB0aDogZnJvbnRpZXJEZXB0aCwgcGFyZW50OiBwYXJlbnQsIGluamVjdDogaW5qZWN0fSB9XG4gICAgICAgIC8vIEluIHBhc3MgMiwgbG9vayBmb3IgYSBzZXQgb2Ygd3JhcHBpbmcgbm9kZXMgdGhhdCBtYWtlXG4gICAgICAgIC8vIGBmaXJzdGAgZml0IGhlcmUuXG4gICAgICAgIGVsc2UgaWYgKHBhc3MgPT0gMiAmJiBmaXJzdCAmJiAod3JhcCA9IG1hdGNoLmZpbmRXcmFwcGluZyhmaXJzdC50eXBlKSkpXG4gICAgICAgICAgeyByZXR1cm4ge3NsaWNlRGVwdGg6IHNsaWNlRGVwdGgsIGZyb250aWVyRGVwdGg6IGZyb250aWVyRGVwdGgsIHBhcmVudDogcGFyZW50LCB3cmFwOiB3cmFwfSB9XG4gICAgICAgIC8vIERvbid0IGNvbnRpbnVlIGxvb2tpbmcgZnVydGhlciB1cCBpZiB0aGUgcGFyZW50IG5vZGVcbiAgICAgICAgLy8gd291bGQgZml0IGhlcmUuXG4gICAgICAgIGlmIChwYXJlbnQgJiYgbWF0Y2gubWF0Y2hUeXBlKHBhcmVudC50eXBlKSkgeyBicmVhayB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5GaXR0ZXIucHJvdG90eXBlLm9wZW5Nb3JlID0gZnVuY3Rpb24gb3Blbk1vcmUgKCkge1xuICB2YXIgcmVmID0gdGhpcy51bnBsYWNlZDtcbiAgICB2YXIgY29udGVudCA9IHJlZi5jb250ZW50O1xuICAgIHZhciBvcGVuU3RhcnQgPSByZWYub3BlblN0YXJ0O1xuICAgIHZhciBvcGVuRW5kID0gcmVmLm9wZW5FbmQ7XG4gIHZhciBpbm5lciA9IGNvbnRlbnRBdChjb250ZW50LCBvcGVuU3RhcnQpO1xuICBpZiAoIWlubmVyLmNoaWxkQ291bnQgfHwgaW5uZXIuZmlyc3RDaGlsZC5pc0xlYWYpIHsgcmV0dXJuIGZhbHNlIH1cbiAgdGhpcy51bnBsYWNlZCA9IG5ldyBTbGljZShjb250ZW50LCBvcGVuU3RhcnQgKyAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWF4KG9wZW5FbmQsIGlubmVyLnNpemUgKyBvcGVuU3RhcnQgPj0gY29udGVudC5zaXplIC0gb3BlbkVuZCA/IG9wZW5TdGFydCArIDEgOiAwKSk7XG4gIHJldHVybiB0cnVlXG59O1xuXG5GaXR0ZXIucHJvdG90eXBlLmRyb3BOb2RlID0gZnVuY3Rpb24gZHJvcE5vZGUgKCkge1xuICB2YXIgcmVmID0gdGhpcy51bnBsYWNlZDtcbiAgICB2YXIgY29udGVudCA9IHJlZi5jb250ZW50O1xuICAgIHZhciBvcGVuU3RhcnQgPSByZWYub3BlblN0YXJ0O1xuICAgIHZhciBvcGVuRW5kID0gcmVmLm9wZW5FbmQ7XG4gIHZhciBpbm5lciA9IGNvbnRlbnRBdChjb250ZW50LCBvcGVuU3RhcnQpO1xuICBpZiAoaW5uZXIuY2hpbGRDb3VudCA8PSAxICYmIG9wZW5TdGFydCA+IDApIHtcbiAgICB2YXIgb3BlbkF0RW5kID0gY29udGVudC5zaXplIC0gb3BlblN0YXJ0IDw9IG9wZW5TdGFydCArIGlubmVyLnNpemU7XG4gICAgdGhpcy51bnBsYWNlZCA9IG5ldyBTbGljZShkcm9wRnJvbUZyYWdtZW50KGNvbnRlbnQsIG9wZW5TdGFydCAtIDEsIDEpLCBvcGVuU3RhcnQgLSAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkF0RW5kID8gb3BlblN0YXJ0IC0gMSA6IG9wZW5FbmQpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMudW5wbGFjZWQgPSBuZXcgU2xpY2UoZHJvcEZyb21GcmFnbWVudChjb250ZW50LCBvcGVuU3RhcnQsIDEpLCBvcGVuU3RhcnQsIG9wZW5FbmQpO1xuICB9XG59O1xuXG4vLyA6ICh7c2xpY2VEZXB0aDogbnVtYmVyLCBmcm9udGllckRlcHRoOiBudW1iZXIsIHBhcmVudDogP05vZGUsIHdyYXA6ID9bTm9kZVR5cGVdLCBpbmplY3Q6ID9GcmFnbWVudH0pXG4vLyBNb3ZlIGNvbnRlbnQgZnJvbSB0aGUgdW5wbGFjZWQgc2xpY2UgYXQgYHNsaWNlRGVwdGhgIHRvIHRoZVxuLy8gZnJvbnRpZXIgbm9kZSBhdCBgZnJvbnRpZXJEZXB0aGAuIENsb3NlIHRoYXQgZnJvbnRpZXIgbm9kZSB3aGVuXG4vLyBhcHBsaWNhYmxlLlxuRml0dGVyLnByb3RvdHlwZS5wbGFjZU5vZGVzID0gZnVuY3Rpb24gcGxhY2VOb2RlcyAocmVmKSB7XG4gICAgdmFyIHNsaWNlRGVwdGggPSByZWYuc2xpY2VEZXB0aDtcbiAgICB2YXIgZnJvbnRpZXJEZXB0aCA9IHJlZi5mcm9udGllckRlcHRoO1xuICAgIHZhciBwYXJlbnQgPSByZWYucGFyZW50O1xuICAgIHZhciBpbmplY3QgPSByZWYuaW5qZWN0O1xuICAgIHZhciB3cmFwID0gcmVmLndyYXA7XG5cbiAgd2hpbGUgKHRoaXMuZGVwdGggPiBmcm9udGllckRlcHRoKSB7IHRoaXMuY2xvc2VGcm9udGllck5vZGUoKTsgfVxuICBpZiAod3JhcCkgeyBmb3IgKHZhciBpID0gMDsgaSA8IHdyYXAubGVuZ3RoOyBpKyspIHsgdGhpcy5vcGVuRnJvbnRpZXJOb2RlKHdyYXBbaV0pOyB9IH1cblxuICB2YXIgc2xpY2UgPSB0aGlzLnVucGxhY2VkLCBmcmFnbWVudCA9IHBhcmVudCA/IHBhcmVudC5jb250ZW50IDogc2xpY2UuY29udGVudDtcbiAgdmFyIG9wZW5TdGFydCA9IHNsaWNlLm9wZW5TdGFydCAtIHNsaWNlRGVwdGg7XG4gIHZhciB0YWtlbiA9IDAsIGFkZCA9IFtdO1xuICB2YXIgcmVmJDEgPSB0aGlzLmZyb250aWVyW2Zyb250aWVyRGVwdGhdO1xuICAgIHZhciBtYXRjaCA9IHJlZiQxLm1hdGNoO1xuICAgIHZhciB0eXBlID0gcmVmJDEudHlwZTtcbiAgaWYgKGluamVjdCkge1xuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGluamVjdC5jaGlsZENvdW50OyBpJDErKykgeyBhZGQucHVzaChpbmplY3QuY2hpbGQoaSQxKSk7IH1cbiAgICBtYXRjaCA9IG1hdGNoLm1hdGNoRnJhZ21lbnQoaW5qZWN0KTtcbiAgfVxuICAvLyBDb21wdXRlcyB0aGUgYW1vdW50IG9mIChlbmQpIG9wZW4gbm9kZXMgYXQgdGhlIGVuZCBvZiB0aGVcbiAgLy8gZnJhZ21lbnQuIFdoZW4gMCwgdGhlIHBhcmVudCBpcyBvcGVuLCBidXQgbm8gbW9yZS4gV2hlblxuICAvLyBuZWdhdGl2ZSwgbm90aGluZyBpcyBvcGVuLlxuICB2YXIgb3BlbkVuZENvdW50ID0gKGZyYWdtZW50LnNpemUgKyBzbGljZURlcHRoKSAtIChzbGljZS5jb250ZW50LnNpemUgLSBzbGljZS5vcGVuRW5kKTtcbiAgLy8gU2NhbiBvdmVyIHRoZSBmcmFnbWVudCwgZml0dGluZyBhcyBtYW55IGNoaWxkIG5vZGVzIGFzXG4gIC8vIHBvc3NpYmxlLlxuICB3aGlsZSAodGFrZW4gPCBmcmFnbWVudC5jaGlsZENvdW50KSB7XG4gICAgdmFyIG5leHQgPSBmcmFnbWVudC5jaGlsZCh0YWtlbiksIG1hdGNoZXMgPSBtYXRjaC5tYXRjaFR5cGUobmV4dC50eXBlKTtcbiAgICBpZiAoIW1hdGNoZXMpIHsgYnJlYWsgfVxuICAgIHRha2VuKys7XG4gICAgaWYgKHRha2VuID4gMSB8fCBvcGVuU3RhcnQgPT0gMCB8fCBuZXh0LmNvbnRlbnQuc2l6ZSkgeyAvLyBEcm9wIGVtcHR5IG9wZW4gbm9kZXNcbiAgICAgIG1hdGNoID0gbWF0Y2hlcztcbiAgICAgIGFkZC5wdXNoKGNsb3NlTm9kZVN0YXJ0KG5leHQubWFyayh0eXBlLmFsbG93ZWRNYXJrcyhuZXh0Lm1hcmtzKSksIHRha2VuID09IDEgPyBvcGVuU3RhcnQgOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFrZW4gPT0gZnJhZ21lbnQuY2hpbGRDb3VudCA/IG9wZW5FbmRDb3VudCA6IC0xKSk7XG4gICAgfVxuICB9XG4gIHZhciB0b0VuZCA9IHRha2VuID09IGZyYWdtZW50LmNoaWxkQ291bnQ7XG4gIGlmICghdG9FbmQpIHsgb3BlbkVuZENvdW50ID0gLTE7IH1cblxuICB0aGlzLnBsYWNlZCA9IGFkZFRvRnJhZ21lbnQodGhpcy5wbGFjZWQsIGZyb250aWVyRGVwdGgsIEZyYWdtZW50LmZyb20oYWRkKSk7XG4gIHRoaXMuZnJvbnRpZXJbZnJvbnRpZXJEZXB0aF0ubWF0Y2ggPSBtYXRjaDtcblxuICAvLyBJZiB0aGUgcGFyZW50IHR5cGVzIG1hdGNoLCBhbmQgdGhlIGVudGlyZSBub2RlIHdhcyBtb3ZlZCwgYW5kXG4gIC8vIGl0J3Mgbm90IG9wZW4sIGNsb3NlIHRoaXMgZnJvbnRpZXIgbm9kZSByaWdodCBhd2F5LlxuICBpZiAodG9FbmQgJiYgb3BlbkVuZENvdW50IDwgMCAmJiBwYXJlbnQgJiYgcGFyZW50LnR5cGUgPT0gdGhpcy5mcm9udGllclt0aGlzLmRlcHRoXS50eXBlICYmIHRoaXMuZnJvbnRpZXIubGVuZ3RoID4gMSlcbiAgICB7IHRoaXMuY2xvc2VGcm9udGllck5vZGUoKTsgfVxuXG4gIC8vIEFkZCBuZXcgZnJvbnRpZXIgbm9kZXMgZm9yIGFueSBvcGVuIG5vZGVzIGF0IHRoZSBlbmQuXG4gIGZvciAodmFyIGkkMiA9IDAsIGN1ciA9IGZyYWdtZW50OyBpJDIgPCBvcGVuRW5kQ291bnQ7IGkkMisrKSB7XG4gICAgdmFyIG5vZGUgPSBjdXIubGFzdENoaWxkO1xuICAgIHRoaXMuZnJvbnRpZXIucHVzaCh7dHlwZTogbm9kZS50eXBlLCBtYXRjaDogbm9kZS5jb250ZW50TWF0Y2hBdChub2RlLmNoaWxkQ291bnQpfSk7XG4gICAgY3VyID0gbm9kZS5jb250ZW50O1xuICB9XG5cbiAgLy8gVXBkYXRlIGB0aGlzLnVucGxhY2VkYC4gRHJvcCB0aGUgZW50aXJlIG5vZGUgZnJvbSB3aGljaCB3ZVxuICAvLyBwbGFjZWQgaXQgd2UgZ290IHRvIGl0cyBlbmQsIG90aGVyd2lzZSBqdXN0IGRyb3AgdGhlIHBsYWNlZFxuICAvLyBub2Rlcy5cbiAgdGhpcy51bnBsYWNlZCA9ICF0b0VuZCA/IG5ldyBTbGljZShkcm9wRnJvbUZyYWdtZW50KHNsaWNlLmNvbnRlbnQsIHNsaWNlRGVwdGgsIHRha2VuKSwgc2xpY2Uub3BlblN0YXJ0LCBzbGljZS5vcGVuRW5kKVxuICAgIDogc2xpY2VEZXB0aCA9PSAwID8gU2xpY2UuZW1wdHlcbiAgICA6IG5ldyBTbGljZShkcm9wRnJvbUZyYWdtZW50KHNsaWNlLmNvbnRlbnQsIHNsaWNlRGVwdGggLSAxLCAxKSxcbiAgICAgICAgICAgICAgICBzbGljZURlcHRoIC0gMSwgb3BlbkVuZENvdW50IDwgMCA/IHNsaWNlLm9wZW5FbmQgOiBzbGljZURlcHRoIC0gMSk7XG59O1xuXG5GaXR0ZXIucHJvdG90eXBlLm11c3RNb3ZlSW5saW5lID0gZnVuY3Rpb24gbXVzdE1vdmVJbmxpbmUgKCkge1xuICBpZiAoIXRoaXMuJHRvLnBhcmVudC5pc1RleHRibG9jayB8fCB0aGlzLiR0by5lbmQoKSA9PSB0aGlzLiR0by5wb3MpIHsgcmV0dXJuIC0xIH1cbiAgdmFyIHRvcCA9IHRoaXMuZnJvbnRpZXJbdGhpcy5kZXB0aF0sIGxldmVsO1xuICBpZiAoIXRvcC50eXBlLmlzVGV4dGJsb2NrIHx8ICFjb250ZW50QWZ0ZXJGaXRzKHRoaXMuJHRvLCB0aGlzLiR0by5kZXB0aCwgdG9wLnR5cGUsIHRvcC5tYXRjaCwgZmFsc2UpIHx8XG4gICAgICAodGhpcy4kdG8uZGVwdGggPT0gdGhpcy5kZXB0aCAmJiAobGV2ZWwgPSB0aGlzLmZpbmRDbG9zZUxldmVsKHRoaXMuJHRvKSkgJiYgbGV2ZWwuZGVwdGggPT0gdGhpcy5kZXB0aCkpIHsgcmV0dXJuIC0xIH1cblxuICB2YXIgcmVmID0gdGhpcy4kdG87XG4gICAgdmFyIGRlcHRoID0gcmVmLmRlcHRoO1xuICAgIHZhciBhZnRlciA9IHRoaXMuJHRvLmFmdGVyKGRlcHRoKTtcbiAgd2hpbGUgKGRlcHRoID4gMSAmJiBhZnRlciA9PSB0aGlzLiR0by5lbmQoLS1kZXB0aCkpIHsgKythZnRlcjsgfVxuICByZXR1cm4gYWZ0ZXJcbn07XG5cbkZpdHRlci5wcm90b3R5cGUuZmluZENsb3NlTGV2ZWwgPSBmdW5jdGlvbiBmaW5kQ2xvc2VMZXZlbCAoJHRvKSB7XG4gIHNjYW46IGZvciAodmFyIGkgPSBNYXRoLm1pbih0aGlzLmRlcHRoLCAkdG8uZGVwdGgpOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZWYgPSB0aGlzLmZyb250aWVyW2ldO1xuICAgICAgdmFyIG1hdGNoID0gcmVmLm1hdGNoO1xuICAgICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgZHJvcElubmVyID0gaSA8ICR0by5kZXB0aCAmJiAkdG8uZW5kKGkgKyAxKSA9PSAkdG8ucG9zICsgKCR0by5kZXB0aCAtIChpICsgMSkpO1xuICAgIHZhciBmaXQgPSBjb250ZW50QWZ0ZXJGaXRzKCR0bywgaSwgdHlwZSwgbWF0Y2gsIGRyb3BJbm5lcik7XG4gICAgaWYgKCFmaXQpIHsgY29udGludWUgfVxuICAgIGZvciAodmFyIGQgPSBpIC0gMTsgZCA+PSAwOyBkLS0pIHtcbiAgICAgIHZhciByZWYkMSA9IHRoaXMuZnJvbnRpZXJbZF07XG4gICAgICAgIHZhciBtYXRjaCQxID0gcmVmJDEubWF0Y2g7XG4gICAgICAgIHZhciB0eXBlJDEgPSByZWYkMS50eXBlO1xuICAgICAgdmFyIG1hdGNoZXMgPSBjb250ZW50QWZ0ZXJGaXRzKCR0bywgZCwgdHlwZSQxLCBtYXRjaCQxLCB0cnVlKTtcbiAgICAgIGlmICghbWF0Y2hlcyB8fCBtYXRjaGVzLmNoaWxkQ291bnQpIHsgY29udGludWUgc2NhbiB9XG4gICAgfVxuICAgIHJldHVybiB7ZGVwdGg6IGksIGZpdDogZml0LCBtb3ZlOiBkcm9wSW5uZXIgPyAkdG8uZG9jLnJlc29sdmUoJHRvLmFmdGVyKGkgKyAxKSkgOiAkdG99XG4gIH1cbn07XG5cbkZpdHRlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiBjbG9zZSAoJHRvKSB7XG4gIHZhciBjbG9zZSA9IHRoaXMuZmluZENsb3NlTGV2ZWwoJHRvKTtcbiAgaWYgKCFjbG9zZSkgeyByZXR1cm4gbnVsbCB9XG5cbiAgd2hpbGUgKHRoaXMuZGVwdGggPiBjbG9zZS5kZXB0aCkgeyB0aGlzLmNsb3NlRnJvbnRpZXJOb2RlKCk7IH1cbiAgaWYgKGNsb3NlLmZpdC5jaGlsZENvdW50KSB7IHRoaXMucGxhY2VkID0gYWRkVG9GcmFnbWVudCh0aGlzLnBsYWNlZCwgY2xvc2UuZGVwdGgsIGNsb3NlLmZpdCk7IH1cbiAgJHRvID0gY2xvc2UubW92ZTtcbiAgZm9yICh2YXIgZCA9IGNsb3NlLmRlcHRoICsgMTsgZCA8PSAkdG8uZGVwdGg7IGQrKykge1xuICAgIHZhciBub2RlID0gJHRvLm5vZGUoZCksIGFkZCA9IG5vZGUudHlwZS5jb250ZW50TWF0Y2guZmlsbEJlZm9yZShub2RlLmNvbnRlbnQsIHRydWUsICR0by5pbmRleChkKSk7XG4gICAgdGhpcy5vcGVuRnJvbnRpZXJOb2RlKG5vZGUudHlwZSwgbm9kZS5hdHRycywgYWRkKTtcbiAgfVxuICByZXR1cm4gJHRvXG59O1xuXG5GaXR0ZXIucHJvdG90eXBlLm9wZW5Gcm9udGllck5vZGUgPSBmdW5jdGlvbiBvcGVuRnJvbnRpZXJOb2RlICh0eXBlLCBhdHRycywgY29udGVudCkge1xuICB2YXIgdG9wID0gdGhpcy5mcm9udGllclt0aGlzLmRlcHRoXTtcbiAgdG9wLm1hdGNoID0gdG9wLm1hdGNoLm1hdGNoVHlwZSh0eXBlKTtcbiAgdGhpcy5wbGFjZWQgPSBhZGRUb0ZyYWdtZW50KHRoaXMucGxhY2VkLCB0aGlzLmRlcHRoLCBGcmFnbWVudC5mcm9tKHR5cGUuY3JlYXRlKGF0dHJzLCBjb250ZW50KSkpO1xuICB0aGlzLmZyb250aWVyLnB1c2goe3R5cGU6IHR5cGUsIG1hdGNoOiB0eXBlLmNvbnRlbnRNYXRjaH0pO1xufTtcblxuRml0dGVyLnByb3RvdHlwZS5jbG9zZUZyb250aWVyTm9kZSA9IGZ1bmN0aW9uIGNsb3NlRnJvbnRpZXJOb2RlICgpIHtcbiAgdmFyIG9wZW4gPSB0aGlzLmZyb250aWVyLnBvcCgpO1xuICB2YXIgYWRkID0gb3Blbi5tYXRjaC5maWxsQmVmb3JlKEZyYWdtZW50LmVtcHR5LCB0cnVlKTtcbiAgaWYgKGFkZC5jaGlsZENvdW50KSB7IHRoaXMucGxhY2VkID0gYWRkVG9GcmFnbWVudCh0aGlzLnBsYWNlZCwgdGhpcy5mcm9udGllci5sZW5ndGgsIGFkZCk7IH1cbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBGaXR0ZXIucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMSApO1xuXG5mdW5jdGlvbiBkcm9wRnJvbUZyYWdtZW50KGZyYWdtZW50LCBkZXB0aCwgY291bnQpIHtcbiAgaWYgKGRlcHRoID09IDApIHsgcmV0dXJuIGZyYWdtZW50LmN1dEJ5SW5kZXgoY291bnQpIH1cbiAgcmV0dXJuIGZyYWdtZW50LnJlcGxhY2VDaGlsZCgwLCBmcmFnbWVudC5maXJzdENoaWxkLmNvcHkoZHJvcEZyb21GcmFnbWVudChmcmFnbWVudC5maXJzdENoaWxkLmNvbnRlbnQsIGRlcHRoIC0gMSwgY291bnQpKSlcbn1cblxuZnVuY3Rpb24gYWRkVG9GcmFnbWVudChmcmFnbWVudCwgZGVwdGgsIGNvbnRlbnQpIHtcbiAgaWYgKGRlcHRoID09IDApIHsgcmV0dXJuIGZyYWdtZW50LmFwcGVuZChjb250ZW50KSB9XG4gIHJldHVybiBmcmFnbWVudC5yZXBsYWNlQ2hpbGQoZnJhZ21lbnQuY2hpbGRDb3VudCAtIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQubGFzdENoaWxkLmNvcHkoYWRkVG9GcmFnbWVudChmcmFnbWVudC5sYXN0Q2hpbGQuY29udGVudCwgZGVwdGggLSAxLCBjb250ZW50KSkpXG59XG5cbmZ1bmN0aW9uIGNvbnRlbnRBdChmcmFnbWVudCwgZGVwdGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZXB0aDsgaSsrKSB7IGZyYWdtZW50ID0gZnJhZ21lbnQuZmlyc3RDaGlsZC5jb250ZW50OyB9XG4gIHJldHVybiBmcmFnbWVudFxufVxuXG5mdW5jdGlvbiBjbG9zZU5vZGVTdGFydChub2RlLCBvcGVuU3RhcnQsIG9wZW5FbmQpIHtcbiAgaWYgKG9wZW5TdGFydCA8PSAwKSB7IHJldHVybiBub2RlIH1cbiAgdmFyIGZyYWcgPSBub2RlLmNvbnRlbnQ7XG4gIGlmIChvcGVuU3RhcnQgPiAxKVxuICAgIHsgZnJhZyA9IGZyYWcucmVwbGFjZUNoaWxkKDAsIGNsb3NlTm9kZVN0YXJ0KGZyYWcuZmlyc3RDaGlsZCwgb3BlblN0YXJ0IC0gMSwgZnJhZy5jaGlsZENvdW50ID09IDEgPyBvcGVuRW5kIC0gMSA6IDApKTsgfVxuICBpZiAob3BlblN0YXJ0ID4gMCkge1xuICAgIGZyYWcgPSBub2RlLnR5cGUuY29udGVudE1hdGNoLmZpbGxCZWZvcmUoZnJhZykuYXBwZW5kKGZyYWcpO1xuICAgIGlmIChvcGVuRW5kIDw9IDApIHsgZnJhZyA9IGZyYWcuYXBwZW5kKG5vZGUudHlwZS5jb250ZW50TWF0Y2gubWF0Y2hGcmFnbWVudChmcmFnKS5maWxsQmVmb3JlKEZyYWdtZW50LmVtcHR5LCB0cnVlKSk7IH1cbiAgfVxuICByZXR1cm4gbm9kZS5jb3B5KGZyYWcpXG59XG5cbmZ1bmN0aW9uIGNvbnRlbnRBZnRlckZpdHMoJHRvLCBkZXB0aCwgdHlwZSwgbWF0Y2gsIG9wZW4pIHtcbiAgdmFyIG5vZGUgPSAkdG8ubm9kZShkZXB0aCksIGluZGV4ID0gb3BlbiA/ICR0by5pbmRleEFmdGVyKGRlcHRoKSA6ICR0by5pbmRleChkZXB0aCk7XG4gIGlmIChpbmRleCA9PSBub2RlLmNoaWxkQ291bnQgJiYgIXR5cGUuY29tcGF0aWJsZUNvbnRlbnQobm9kZS50eXBlKSkgeyByZXR1cm4gbnVsbCB9XG4gIHZhciBmaXQgPSBtYXRjaC5maWxsQmVmb3JlKG5vZGUuY29udGVudCwgdHJ1ZSwgaW5kZXgpO1xuICByZXR1cm4gZml0ICYmICFpbnZhbGlkTWFya3ModHlwZSwgbm9kZS5jb250ZW50LCBpbmRleCkgPyBmaXQgOiBudWxsXG59XG5cbmZ1bmN0aW9uIGludmFsaWRNYXJrcyh0eXBlLCBmcmFnbWVudCwgc3RhcnQpIHtcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZnJhZ21lbnQuY2hpbGRDb3VudDsgaSsrKVxuICAgIHsgaWYgKCF0eXBlLmFsbG93c01hcmtzKGZyYWdtZW50LmNoaWxkKGkpLm1hcmtzKSkgeyByZXR1cm4gdHJ1ZSB9IH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8vIDo6IChudW1iZXIsIG51bWJlciwgU2xpY2UpIOKGkiB0aGlzXG4vLyBSZXBsYWNlIGEgcmFuZ2Ugb2YgdGhlIGRvY3VtZW50IHdpdGggYSBnaXZlbiBzbGljZSwgdXNpbmcgYGZyb21gLFxuLy8gYHRvYCwgYW5kIHRoZSBzbGljZSdzIFtgb3BlblN0YXJ0YF0oI21vZGVsLlNsaWNlLm9wZW5TdGFydCkgcHJvcGVydHlcbi8vIGFzIGhpbnRzLCByYXRoZXIgdGhhbiBmaXhlZCBzdGFydCBhbmQgZW5kIHBvaW50cy4gVGhpcyBtZXRob2QgbWF5XG4vLyBncm93IHRoZSByZXBsYWNlZCBhcmVhIG9yIGNsb3NlIG9wZW4gbm9kZXMgaW4gdGhlIHNsaWNlIGluIG9yZGVyIHRvXG4vLyBnZXQgYSBmaXQgdGhhdCBpcyBtb3JlIGluIGxpbmUgd2l0aCBXWVNJV1lHIGV4cGVjdGF0aW9ucywgYnlcbi8vIGRyb3BwaW5nIGZ1bGx5IGNvdmVyZWQgcGFyZW50IG5vZGVzIG9mIHRoZSByZXBsYWNlZCByZWdpb24gd2hlblxuLy8gdGhleSBhcmUgbWFya2VkIFtub24tZGVmaW5pbmddKCNtb2RlbC5Ob2RlU3BlYy5kZWZpbmluZyksIG9yXG4vLyBpbmNsdWRpbmcgYW4gb3BlbiBwYXJlbnQgbm9kZSBmcm9tIHRoZSBzbGljZSB0aGF0IF9pc18gbWFya2VkIGFzXG4vLyBbZGVmaW5pbmddKCNtb2RlbC5Ob2RlU3BlYy5kZWZpbmluZykuXG4vL1xuLy8gVGhpcyBpcyB0aGUgbWV0aG9kLCBmb3IgZXhhbXBsZSwgdG8gaGFuZGxlIHBhc3RlLiBUaGUgc2ltaWxhclxuLy8gW2ByZXBsYWNlYF0oI3RyYW5zZm9ybS5UcmFuc2Zvcm0ucmVwbGFjZSkgbWV0aG9kIGlzIGEgbW9yZVxuLy8gcHJpbWl0aXZlIHRvb2wgd2hpY2ggd2lsbCBfbm90XyBtb3ZlIHRoZSBzdGFydCBhbmQgZW5kIG9mIGl0cyBnaXZlblxuLy8gcmFuZ2UsIGFuZCBpcyB1c2VmdWwgaW4gc2l0dWF0aW9ucyB3aGVyZSB5b3UgbmVlZCBtb3JlIHByZWNpc2Vcbi8vIGNvbnRyb2wgb3ZlciB3aGF0IGhhcHBlbnMuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnJlcGxhY2VSYW5nZSA9IGZ1bmN0aW9uKGZyb20sIHRvLCBzbGljZSkge1xuICBpZiAoIXNsaWNlLnNpemUpIHsgcmV0dXJuIHRoaXMuZGVsZXRlUmFuZ2UoZnJvbSwgdG8pIH1cblxuICB2YXIgJGZyb20gPSB0aGlzLmRvYy5yZXNvbHZlKGZyb20pLCAkdG8gPSB0aGlzLmRvYy5yZXNvbHZlKHRvKTtcbiAgaWYgKGZpdHNUcml2aWFsbHkoJGZyb20sICR0bywgc2xpY2UpKVxuICAgIHsgcmV0dXJuIHRoaXMuc3RlcChuZXcgUmVwbGFjZVN0ZXAoZnJvbSwgdG8sIHNsaWNlKSkgfVxuXG4gIHZhciB0YXJnZXREZXB0aHMgPSBjb3ZlcmVkRGVwdGhzKCRmcm9tLCB0aGlzLmRvYy5yZXNvbHZlKHRvKSk7XG4gIC8vIENhbid0IHJlcGxhY2UgdGhlIHdob2xlIGRvY3VtZW50LCBzbyByZW1vdmUgMCBpZiBpdCdzIHByZXNlbnRcbiAgaWYgKHRhcmdldERlcHRoc1t0YXJnZXREZXB0aHMubGVuZ3RoIC0gMV0gPT0gMCkgeyB0YXJnZXREZXB0aHMucG9wKCk7IH1cbiAgLy8gTmVnYXRpdmUgbnVtYmVycyByZXByZXNlbnQgbm90IGV4cGFuc2lvbiBvdmVyIHRoZSB3aG9sZSBub2RlIGF0XG4gIC8vIHRoYXQgZGVwdGgsIGJ1dCByZXBsYWNpbmcgZnJvbSAkZnJvbS5iZWZvcmUoLUQpIHRvICR0by5wb3MuXG4gIHZhciBwcmVmZXJyZWRUYXJnZXQgPSAtKCRmcm9tLmRlcHRoICsgMSk7XG4gIHRhcmdldERlcHRocy51bnNoaWZ0KHByZWZlcnJlZFRhcmdldCk7XG4gIC8vIFRoaXMgbG9vcCBwaWNrcyBhIHByZWZlcnJlZCB0YXJnZXQgZGVwdGgsIGlmIG9uZSBvZiB0aGUgY292ZXJpbmdcbiAgLy8gZGVwdGhzIGlzIG5vdCBvdXRzaWRlIG9mIGEgZGVmaW5pbmcgbm9kZSwgYW5kIGFkZHMgbmVnYXRpdmVcbiAgLy8gZGVwdGhzIGZvciBhbnkgZGVwdGggdGhhdCBoYXMgJGZyb20gYXQgaXRzIHN0YXJ0IGFuZCBkb2VzIG5vdFxuICAvLyBjcm9zcyBhIGRlZmluaW5nIG5vZGUuXG4gIGZvciAodmFyIGQgPSAkZnJvbS5kZXB0aCwgcG9zID0gJGZyb20ucG9zIC0gMTsgZCA+IDA7IGQtLSwgcG9zLS0pIHtcbiAgICB2YXIgc3BlYyA9ICRmcm9tLm5vZGUoZCkudHlwZS5zcGVjO1xuICAgIGlmIChzcGVjLmRlZmluaW5nIHx8IHNwZWMuaXNvbGF0aW5nKSB7IGJyZWFrIH1cbiAgICBpZiAodGFyZ2V0RGVwdGhzLmluZGV4T2YoZCkgPiAtMSkgeyBwcmVmZXJyZWRUYXJnZXQgPSBkOyB9XG4gICAgZWxzZSBpZiAoJGZyb20uYmVmb3JlKGQpID09IHBvcykgeyB0YXJnZXREZXB0aHMuc3BsaWNlKDEsIDAsIC1kKTsgfVxuICB9XG4gIC8vIFRyeSB0byBmaXQgZWFjaCBwb3NzaWJsZSBkZXB0aCBvZiB0aGUgc2xpY2UgaW50byBlYWNoIHBvc3NpYmxlXG4gIC8vIHRhcmdldCBkZXB0aCwgc3RhcnRpbmcgd2l0aCB0aGUgcHJlZmVycmVkIGRlcHRocy5cbiAgdmFyIHByZWZlcnJlZFRhcmdldEluZGV4ID0gdGFyZ2V0RGVwdGhzLmluZGV4T2YocHJlZmVycmVkVGFyZ2V0KTtcblxuICB2YXIgbGVmdE5vZGVzID0gW10sIHByZWZlcnJlZERlcHRoID0gc2xpY2Uub3BlblN0YXJ0O1xuICBmb3IgKHZhciBjb250ZW50ID0gc2xpY2UuY29udGVudCwgaSA9IDA7OyBpKyspIHtcbiAgICB2YXIgbm9kZSA9IGNvbnRlbnQuZmlyc3RDaGlsZDtcbiAgICBsZWZ0Tm9kZXMucHVzaChub2RlKTtcbiAgICBpZiAoaSA9PSBzbGljZS5vcGVuU3RhcnQpIHsgYnJlYWsgfVxuICAgIGNvbnRlbnQgPSBub2RlLmNvbnRlbnQ7XG4gIH1cbiAgLy8gQmFjayB1cCBpZiB0aGUgbm9kZSBkaXJlY3RseSBhYm92ZSBvcGVuU3RhcnQsIG9yIHRoZSBub2RlIGFib3ZlXG4gIC8vIHRoYXQgc2VwYXJhdGVkIG9ubHkgYnkgYSBub24tZGVmaW5pbmcgdGV4dGJsb2NrIG5vZGUsIGlzIGRlZmluaW5nLlxuICBpZiAocHJlZmVycmVkRGVwdGggPiAwICYmIGxlZnROb2Rlc1twcmVmZXJyZWREZXB0aCAtIDFdLnR5cGUuc3BlYy5kZWZpbmluZyAmJlxuICAgICAgJGZyb20ubm9kZShwcmVmZXJyZWRUYXJnZXRJbmRleCkudHlwZSAhPSBsZWZ0Tm9kZXNbcHJlZmVycmVkRGVwdGggLSAxXS50eXBlKVxuICAgIHsgcHJlZmVycmVkRGVwdGggLT0gMTsgfVxuICBlbHNlIGlmIChwcmVmZXJyZWREZXB0aCA+PSAyICYmIGxlZnROb2Rlc1twcmVmZXJyZWREZXB0aCAtIDFdLmlzVGV4dGJsb2NrICYmIGxlZnROb2Rlc1twcmVmZXJyZWREZXB0aCAtIDJdLnR5cGUuc3BlYy5kZWZpbmluZyAmJlxuICAgICAgICAgICAkZnJvbS5ub2RlKHByZWZlcnJlZFRhcmdldEluZGV4KS50eXBlICE9IGxlZnROb2Rlc1twcmVmZXJyZWREZXB0aCAtIDJdLnR5cGUpXG4gICAgeyBwcmVmZXJyZWREZXB0aCAtPSAyOyB9XG5cbiAgZm9yICh2YXIgaiA9IHNsaWNlLm9wZW5TdGFydDsgaiA+PSAwOyBqLS0pIHtcbiAgICB2YXIgb3BlbkRlcHRoID0gKGogKyBwcmVmZXJyZWREZXB0aCArIDEpICUgKHNsaWNlLm9wZW5TdGFydCArIDEpO1xuICAgIHZhciBpbnNlcnQgPSBsZWZ0Tm9kZXNbb3BlbkRlcHRoXTtcbiAgICBpZiAoIWluc2VydCkgeyBjb250aW51ZSB9XG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgdGFyZ2V0RGVwdGhzLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgIC8vIExvb3Agb3ZlciBwb3NzaWJsZSBleHBhbnNpb24gbGV2ZWxzLCBzdGFydGluZyB3aXRoIHRoZVxuICAgICAgLy8gcHJlZmVycmVkIG9uZVxuICAgICAgdmFyIHRhcmdldERlcHRoID0gdGFyZ2V0RGVwdGhzWyhpJDEgKyBwcmVmZXJyZWRUYXJnZXRJbmRleCkgJSB0YXJnZXREZXB0aHMubGVuZ3RoXSwgZXhwYW5kID0gdHJ1ZTtcbiAgICAgIGlmICh0YXJnZXREZXB0aCA8IDApIHsgZXhwYW5kID0gZmFsc2U7IHRhcmdldERlcHRoID0gLXRhcmdldERlcHRoOyB9XG4gICAgICB2YXIgcGFyZW50ID0gJGZyb20ubm9kZSh0YXJnZXREZXB0aCAtIDEpLCBpbmRleCA9ICRmcm9tLmluZGV4KHRhcmdldERlcHRoIC0gMSk7XG4gICAgICBpZiAocGFyZW50LmNhblJlcGxhY2VXaXRoKGluZGV4LCBpbmRleCwgaW5zZXJ0LnR5cGUsIGluc2VydC5tYXJrcykpXG4gICAgICAgIHsgcmV0dXJuIHRoaXMucmVwbGFjZSgkZnJvbS5iZWZvcmUodGFyZ2V0RGVwdGgpLCBleHBhbmQgPyAkdG8uYWZ0ZXIodGFyZ2V0RGVwdGgpIDogdG8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFNsaWNlKGNsb3NlRnJhZ21lbnQoc2xpY2UuY29udGVudCwgMCwgc2xpY2Uub3BlblN0YXJ0LCBvcGVuRGVwdGgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuRGVwdGgsIHNsaWNlLm9wZW5FbmQpKSB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHN0YXJ0U3RlcHMgPSB0aGlzLnN0ZXBzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSQyID0gdGFyZ2V0RGVwdGhzLmxlbmd0aCAtIDE7IGkkMiA+PSAwOyBpJDItLSkge1xuICAgIHRoaXMucmVwbGFjZShmcm9tLCB0bywgc2xpY2UpO1xuICAgIGlmICh0aGlzLnN0ZXBzLmxlbmd0aCA+IHN0YXJ0U3RlcHMpIHsgYnJlYWsgfVxuICAgIHZhciBkZXB0aCA9IHRhcmdldERlcHRoc1tpJDJdO1xuICAgIGlmIChkZXB0aCA8IDApIHsgY29udGludWUgfVxuICAgIGZyb20gPSAkZnJvbS5iZWZvcmUoZGVwdGgpOyB0byA9ICR0by5hZnRlcihkZXB0aCk7XG4gIH1cbiAgcmV0dXJuIHRoaXNcbn07XG5cbmZ1bmN0aW9uIGNsb3NlRnJhZ21lbnQoZnJhZ21lbnQsIGRlcHRoLCBvbGRPcGVuLCBuZXdPcGVuLCBwYXJlbnQpIHtcbiAgaWYgKGRlcHRoIDwgb2xkT3Blbikge1xuICAgIHZhciBmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG4gICAgZnJhZ21lbnQgPSBmcmFnbWVudC5yZXBsYWNlQ2hpbGQoMCwgZmlyc3QuY29weShjbG9zZUZyYWdtZW50KGZpcnN0LmNvbnRlbnQsIGRlcHRoICsgMSwgb2xkT3BlbiwgbmV3T3BlbiwgZmlyc3QpKSk7XG4gIH1cbiAgaWYgKGRlcHRoID4gbmV3T3Blbikge1xuICAgIHZhciBtYXRjaCA9IHBhcmVudC5jb250ZW50TWF0Y2hBdCgwKTtcbiAgICB2YXIgc3RhcnQgPSBtYXRjaC5maWxsQmVmb3JlKGZyYWdtZW50KS5hcHBlbmQoZnJhZ21lbnQpO1xuICAgIGZyYWdtZW50ID0gc3RhcnQuYXBwZW5kKG1hdGNoLm1hdGNoRnJhZ21lbnQoc3RhcnQpLmZpbGxCZWZvcmUoRnJhZ21lbnQuZW1wdHksIHRydWUpKTtcbiAgfVxuICByZXR1cm4gZnJhZ21lbnRcbn1cblxuLy8gOjogKG51bWJlciwgbnVtYmVyLCBOb2RlKSDihpIgdGhpc1xuLy8gUmVwbGFjZSB0aGUgZ2l2ZW4gcmFuZ2Ugd2l0aCBhIG5vZGUsIGJ1dCB1c2UgYGZyb21gIGFuZCBgdG9gIGFzXG4vLyBoaW50cywgcmF0aGVyIHRoYW4gcHJlY2lzZSBwb3NpdGlvbnMuIFdoZW4gZnJvbSBhbmQgdG8gYXJlIHRoZSBzYW1lXG4vLyBhbmQgYXJlIGF0IHRoZSBzdGFydCBvciBlbmQgb2YgYSBwYXJlbnQgbm9kZSBpbiB3aGljaCB0aGUgZ2l2ZW5cbi8vIG5vZGUgZG9lc24ndCBmaXQsIHRoaXMgbWV0aG9kIG1heSBfbW92ZV8gdGhlbSBvdXQgdG93YXJkcyBhIHBhcmVudFxuLy8gdGhhdCBkb2VzIGFsbG93IHRoZSBnaXZlbiBub2RlIHRvIGJlIHBsYWNlZC4gV2hlbiB0aGUgZ2l2ZW4gcmFuZ2Vcbi8vIGNvbXBsZXRlbHkgY292ZXJzIGEgcGFyZW50IG5vZGUsIHRoaXMgbWV0aG9kIG1heSBjb21wbGV0ZWx5IHJlcGxhY2Vcbi8vIHRoYXQgcGFyZW50IG5vZGUuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnJlcGxhY2VSYW5nZVdpdGggPSBmdW5jdGlvbihmcm9tLCB0bywgbm9kZSkge1xuICBpZiAoIW5vZGUuaXNJbmxpbmUgJiYgZnJvbSA9PSB0byAmJiB0aGlzLmRvYy5yZXNvbHZlKGZyb20pLnBhcmVudC5jb250ZW50LnNpemUpIHtcbiAgICB2YXIgcG9pbnQgPSBpbnNlcnRQb2ludCh0aGlzLmRvYywgZnJvbSwgbm9kZS50eXBlKTtcbiAgICBpZiAocG9pbnQgIT0gbnVsbCkgeyBmcm9tID0gdG8gPSBwb2ludDsgfVxuICB9XG4gIHJldHVybiB0aGlzLnJlcGxhY2VSYW5nZShmcm9tLCB0bywgbmV3IFNsaWNlKEZyYWdtZW50LmZyb20obm9kZSksIDAsIDApKVxufTtcblxuLy8gOjogKG51bWJlciwgbnVtYmVyKSDihpIgdGhpc1xuLy8gRGVsZXRlIHRoZSBnaXZlbiByYW5nZSwgZXhwYW5kaW5nIGl0IHRvIGNvdmVyIGZ1bGx5IGNvdmVyZWRcbi8vIHBhcmVudCBub2RlcyB1bnRpbCBhIHZhbGlkIHJlcGxhY2UgaXMgZm91bmQuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLmRlbGV0ZVJhbmdlID0gZnVuY3Rpb24oZnJvbSwgdG8pIHtcbiAgdmFyICRmcm9tID0gdGhpcy5kb2MucmVzb2x2ZShmcm9tKSwgJHRvID0gdGhpcy5kb2MucmVzb2x2ZSh0byk7XG4gIHZhciBjb3ZlcmVkID0gY292ZXJlZERlcHRocygkZnJvbSwgJHRvKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3ZlcmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlcHRoID0gY292ZXJlZFtpXSwgbGFzdCA9IGkgPT0gY292ZXJlZC5sZW5ndGggLSAxO1xuICAgIGlmICgobGFzdCAmJiBkZXB0aCA9PSAwKSB8fCAkZnJvbS5ub2RlKGRlcHRoKS50eXBlLmNvbnRlbnRNYXRjaC52YWxpZEVuZClcbiAgICAgIHsgcmV0dXJuIHRoaXMuZGVsZXRlKCRmcm9tLnN0YXJ0KGRlcHRoKSwgJHRvLmVuZChkZXB0aCkpIH1cbiAgICBpZiAoZGVwdGggPiAwICYmIChsYXN0IHx8ICRmcm9tLm5vZGUoZGVwdGggLSAxKS5jYW5SZXBsYWNlKCRmcm9tLmluZGV4KGRlcHRoIC0gMSksICR0by5pbmRleEFmdGVyKGRlcHRoIC0gMSkpKSlcbiAgICAgIHsgcmV0dXJuIHRoaXMuZGVsZXRlKCRmcm9tLmJlZm9yZShkZXB0aCksICR0by5hZnRlcihkZXB0aCkpIH1cbiAgfVxuICBmb3IgKHZhciBkID0gMTsgZCA8PSAkZnJvbS5kZXB0aCAmJiBkIDw9ICR0by5kZXB0aDsgZCsrKSB7XG4gICAgaWYgKGZyb20gLSAkZnJvbS5zdGFydChkKSA9PSAkZnJvbS5kZXB0aCAtIGQgJiYgdG8gPiAkZnJvbS5lbmQoZCkgJiYgJHRvLmVuZChkKSAtIHRvICE9ICR0by5kZXB0aCAtIGQpXG4gICAgICB7IHJldHVybiB0aGlzLmRlbGV0ZSgkZnJvbS5iZWZvcmUoZCksIHRvKSB9XG4gIH1cbiAgcmV0dXJuIHRoaXMuZGVsZXRlKGZyb20sIHRvKVxufTtcblxuLy8gOiAoUmVzb2x2ZWRQb3MsIFJlc29sdmVkUG9zKSDihpIgW251bWJlcl1cbi8vIFJldHVybnMgYW4gYXJyYXkgb2YgYWxsIGRlcHRocyBmb3Igd2hpY2ggJGZyb20gLSAkdG8gc3BhbnMgdGhlXG4vLyB3aG9sZSBjb250ZW50IG9mIHRoZSBub2RlcyBhdCB0aGF0IGRlcHRoLlxuZnVuY3Rpb24gY292ZXJlZERlcHRocygkZnJvbSwgJHRvKSB7XG4gIHZhciByZXN1bHQgPSBbXSwgbWluRGVwdGggPSBNYXRoLm1pbigkZnJvbS5kZXB0aCwgJHRvLmRlcHRoKTtcbiAgZm9yICh2YXIgZCA9IG1pbkRlcHRoOyBkID49IDA7IGQtLSkge1xuICAgIHZhciBzdGFydCA9ICRmcm9tLnN0YXJ0KGQpO1xuICAgIGlmIChzdGFydCA8ICRmcm9tLnBvcyAtICgkZnJvbS5kZXB0aCAtIGQpIHx8XG4gICAgICAgICR0by5lbmQoZCkgPiAkdG8ucG9zICsgKCR0by5kZXB0aCAtIGQpIHx8XG4gICAgICAgICRmcm9tLm5vZGUoZCkudHlwZS5zcGVjLmlzb2xhdGluZyB8fFxuICAgICAgICAkdG8ubm9kZShkKS50eXBlLnNwZWMuaXNvbGF0aW5nKSB7IGJyZWFrIH1cbiAgICBpZiAoc3RhcnQgPT0gJHRvLnN0YXJ0KGQpKSB7IHJlc3VsdC5wdXNoKGQpOyB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5leHBvcnQgeyBBZGRNYXJrU3RlcCwgTWFwUmVzdWx0LCBNYXBwaW5nLCBSZW1vdmVNYXJrU3RlcCwgUmVwbGFjZUFyb3VuZFN0ZXAsIFJlcGxhY2VTdGVwLCBTdGVwLCBTdGVwTWFwLCBTdGVwUmVzdWx0LCBUcmFuc2Zvcm0sIFRyYW5zZm9ybUVycm9yLCBjYW5Kb2luLCBjYW5TcGxpdCwgZHJvcFBvaW50LCBmaW5kV3JhcHBpbmcsIGluc2VydFBvaW50LCBqb2luUG9pbnQsIGxpZnRUYXJnZXQsIHJlcGxhY2VTdGVwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lcy5qcy5tYXBcbiIsImltcG9ydCB7IFRleHRTZWxlY3Rpb24sIE5vZGVTZWxlY3Rpb24sIFNlbGVjdGlvbiwgQWxsU2VsZWN0aW9uIH0gZnJvbSAncHJvc2VtaXJyb3Itc3RhdGUnO1xuaW1wb3J0IHsgRE9NU2VyaWFsaXplciwgRnJhZ21lbnQsIE1hcmssIERPTVBhcnNlciwgU2xpY2UgfSBmcm9tICdwcm9zZW1pcnJvci1tb2RlbCc7XG5pbXBvcnQgeyBkcm9wUG9pbnQgfSBmcm9tICdwcm9zZW1pcnJvci10cmFuc2Zvcm0nO1xuXG52YXIgcmVzdWx0ID0ge307XG5cbmlmICh0eXBlb2YgbmF2aWdhdG9yICE9IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGRvY3VtZW50ICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgdmFyIGllX2VkZ2UgPSAvRWRnZVxcLyhcXGQrKS8uZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgdmFyIGllX3VwdG8xMCA9IC9NU0lFIFxcZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgdmFyIGllXzExdXAgPSAvVHJpZGVudFxcLyg/Ols3LTldfFxcZHsyLH0pXFwuLipydjooXFxkKykvLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbiAgcmVzdWx0Lm1hYyA9IC9NYWMvLnRlc3QobmF2aWdhdG9yLnBsYXRmb3JtKTtcbiAgdmFyIGllID0gcmVzdWx0LmllID0gISEoaWVfdXB0bzEwIHx8IGllXzExdXAgfHwgaWVfZWRnZSk7XG4gIHJlc3VsdC5pZV92ZXJzaW9uID0gaWVfdXB0bzEwID8gZG9jdW1lbnQuZG9jdW1lbnRNb2RlIHx8IDYgOiBpZV8xMXVwID8gK2llXzExdXBbMV0gOiBpZV9lZGdlID8gK2llX2VkZ2VbMV0gOiBudWxsO1xuICByZXN1bHQuZ2Vja28gPSAhaWUgJiYgL2dlY2tvXFwvKFxcZCspL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgcmVzdWx0LmdlY2tvX3ZlcnNpb24gPSByZXN1bHQuZ2Vja28gJiYgKygvRmlyZWZveFxcLyhcXGQrKS8uZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KSB8fCBbMCwgMF0pWzFdO1xuICB2YXIgY2hyb21lID0gIWllICYmIC9DaHJvbWVcXC8oXFxkKykvLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIHJlc3VsdC5jaHJvbWUgPSAhIWNocm9tZTtcbiAgcmVzdWx0LmNocm9tZV92ZXJzaW9uID0gY2hyb21lICYmICtjaHJvbWVbMV07XG4gIC8vIElzIHRydWUgZm9yIGJvdGggaU9TIGFuZCBpUGFkT1MgZm9yIGNvbnZlbmllbmNlXG4gIHJlc3VsdC5zYWZhcmkgPSAhaWUgJiYgL0FwcGxlIENvbXB1dGVyLy50ZXN0KG5hdmlnYXRvci52ZW5kb3IpO1xuICByZXN1bHQuaW9zID0gcmVzdWx0LnNhZmFyaSAmJiAoL01vYmlsZVxcL1xcdysvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMik7XG4gIHJlc3VsdC5hbmRyb2lkID0gL0FuZHJvaWQgXFxkLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICByZXN1bHQud2Via2l0ID0gXCJ3ZWJraXRGb250U21vb3RoaW5nXCIgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlO1xuICByZXN1bHQud2Via2l0X3ZlcnNpb24gPSByZXN1bHQud2Via2l0ICYmICsoL1xcYkFwcGxlV2ViS2l0XFwvKFxcZCspLy5leGVjKG5hdmlnYXRvci51c2VyQWdlbnQpIHx8IFswLCAwXSlbMV07XG59XG5cbnZhciBkb21JbmRleCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgZm9yICh2YXIgaW5kZXggPSAwOzsgaW5kZXgrKykge1xuICAgIG5vZGUgPSBub2RlLnByZXZpb3VzU2libGluZztcbiAgICBpZiAoIW5vZGUpIHsgcmV0dXJuIGluZGV4IH1cbiAgfVxufTtcblxudmFyIHBhcmVudE5vZGUgPSBmdW5jdGlvbihub2RlKSB7XG4gIHZhciBwYXJlbnQgPSBub2RlLmFzc2lnbmVkU2xvdCB8fCBub2RlLnBhcmVudE5vZGU7XG4gIHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlID09IDExID8gcGFyZW50Lmhvc3QgOiBwYXJlbnRcbn07XG5cbnZhciByZXVzZWRSYW5nZSA9IG51bGw7XG5cbi8vIE5vdGUgdGhhdCB0aGlzIHdpbGwgYWx3YXlzIHJldHVybiB0aGUgc2FtZSByYW5nZSwgYmVjYXVzZSBET00gcmFuZ2Vcbi8vIG9iamVjdHMgYXJlIGV2ZXJ5IGV4cGVuc2l2ZSwgYW5kIGtlZXAgc2xvd2luZyBkb3duIHN1YnNlcXVlbnQgRE9NXG4vLyB1cGRhdGVzLCBmb3Igc29tZSByZWFzb24uXG52YXIgdGV4dFJhbmdlID0gZnVuY3Rpb24obm9kZSwgZnJvbSwgdG8pIHtcbiAgdmFyIHJhbmdlID0gcmV1c2VkUmFuZ2UgfHwgKHJldXNlZFJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKSk7XG4gIHJhbmdlLnNldEVuZChub2RlLCB0byA9PSBudWxsID8gbm9kZS5ub2RlVmFsdWUubGVuZ3RoIDogdG8pO1xuICByYW5nZS5zZXRTdGFydChub2RlLCBmcm9tIHx8IDApO1xuICByZXR1cm4gcmFuZ2Vcbn07XG5cbi8vIFNjYW5zIGZvcndhcmQgYW5kIGJhY2t3YXJkIHRocm91Z2ggRE9NIHBvc2l0aW9ucyBlcXVpdmFsZW50IHRvIHRoZVxuLy8gZ2l2ZW4gb25lIHRvIHNlZSBpZiB0aGUgdHdvIGFyZSBpbiB0aGUgc2FtZSBwbGFjZSAoaS5lLiBhZnRlciBhXG4vLyB0ZXh0IG5vZGUgdnMgYXQgdGhlIGVuZCBvZiB0aGF0IHRleHQgbm9kZSlcbnZhciBpc0VxdWl2YWxlbnRQb3NpdGlvbiA9IGZ1bmN0aW9uKG5vZGUsIG9mZiwgdGFyZ2V0Tm9kZSwgdGFyZ2V0T2ZmKSB7XG4gIHJldHVybiB0YXJnZXROb2RlICYmIChzY2FuRm9yKG5vZGUsIG9mZiwgdGFyZ2V0Tm9kZSwgdGFyZ2V0T2ZmLCAtMSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjYW5Gb3Iobm9kZSwgb2ZmLCB0YXJnZXROb2RlLCB0YXJnZXRPZmYsIDEpKVxufTtcblxudmFyIGF0b21FbGVtZW50cyA9IC9eKGltZ3xicnxpbnB1dHx0ZXh0YXJlYXxocikkL2k7XG5cbmZ1bmN0aW9uIHNjYW5Gb3Iobm9kZSwgb2ZmLCB0YXJnZXROb2RlLCB0YXJnZXRPZmYsIGRpcikge1xuICBmb3IgKDs7KSB7XG4gICAgaWYgKG5vZGUgPT0gdGFyZ2V0Tm9kZSAmJiBvZmYgPT0gdGFyZ2V0T2ZmKSB7IHJldHVybiB0cnVlIH1cbiAgICBpZiAob2ZmID09IChkaXIgPCAwID8gMCA6IG5vZGVTaXplKG5vZGUpKSkge1xuICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgIGlmIChwYXJlbnQubm9kZVR5cGUgIT0gMSB8fCBoYXNCbG9ja0Rlc2Mobm9kZSkgfHwgYXRvbUVsZW1lbnRzLnRlc3Qobm9kZS5ub2RlTmFtZSkgfHwgbm9kZS5jb250ZW50RWRpdGFibGUgPT0gXCJmYWxzZVwiKVxuICAgICAgICB7IHJldHVybiBmYWxzZSB9XG4gICAgICBvZmYgPSBkb21JbmRleChub2RlKSArIChkaXIgPCAwID8gMCA6IDEpO1xuICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICB9IGVsc2UgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSkge1xuICAgICAgbm9kZSA9IG5vZGUuY2hpbGROb2Rlc1tvZmYgKyAoZGlyIDwgMCA/IC0xIDogMCldO1xuICAgICAgaWYgKG5vZGUuY29udGVudEVkaXRhYmxlID09IFwiZmFsc2VcIikgeyByZXR1cm4gZmFsc2UgfVxuICAgICAgb2ZmID0gZGlyIDwgMCA/IG5vZGVTaXplKG5vZGUpIDogMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG5vZGVTaXplKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT0gMyA/IG5vZGUubm9kZVZhbHVlLmxlbmd0aCA6IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGhcbn1cblxuZnVuY3Rpb24gaXNPbkVkZ2Uobm9kZSwgb2Zmc2V0LCBwYXJlbnQpIHtcbiAgZm9yICh2YXIgYXRTdGFydCA9IG9mZnNldCA9PSAwLCBhdEVuZCA9IG9mZnNldCA9PSBub2RlU2l6ZShub2RlKTsgYXRTdGFydCB8fCBhdEVuZDspIHtcbiAgICBpZiAobm9kZSA9PSBwYXJlbnQpIHsgcmV0dXJuIHRydWUgfVxuICAgIHZhciBpbmRleCA9IGRvbUluZGV4KG5vZGUpO1xuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgaWYgKCFub2RlKSB7IHJldHVybiBmYWxzZSB9XG4gICAgYXRTdGFydCA9IGF0U3RhcnQgJiYgaW5kZXggPT0gMDtcbiAgICBhdEVuZCA9IGF0RW5kICYmIGluZGV4ID09IG5vZGVTaXplKG5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc0Jsb2NrRGVzYyhkb20pIHtcbiAgdmFyIGRlc2M7XG4gIGZvciAodmFyIGN1ciA9IGRvbTsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSkgeyBpZiAoZGVzYyA9IGN1ci5wbVZpZXdEZXNjKSB7IGJyZWFrIH0gfVxuICByZXR1cm4gZGVzYyAmJiBkZXNjLm5vZGUgJiYgZGVzYy5ub2RlLmlzQmxvY2sgJiYgKGRlc2MuZG9tID09IGRvbSB8fCBkZXNjLmNvbnRlbnRET00gPT0gZG9tKVxufVxuXG4vLyBXb3JrIGFyb3VuZCBDaHJvbWUgaXNzdWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ3NTIzXG4vLyAoaXNDb2xsYXBzZWQgaW5hcHByb3ByaWF0ZWx5IHJldHVybnMgdHJ1ZSBpbiBzaGFkb3cgZG9tKVxudmFyIHNlbGVjdGlvbkNvbGxhcHNlZCA9IGZ1bmN0aW9uKGRvbVNlbCkge1xuICB2YXIgY29sbGFwc2VkID0gZG9tU2VsLmlzQ29sbGFwc2VkO1xuICBpZiAoY29sbGFwc2VkICYmIHJlc3VsdC5jaHJvbWUgJiYgZG9tU2VsLnJhbmdlQ291bnQgJiYgIWRvbVNlbC5nZXRSYW5nZUF0KDApLmNvbGxhcHNlZClcbiAgICB7IGNvbGxhcHNlZCA9IGZhbHNlOyB9XG4gIHJldHVybiBjb2xsYXBzZWRcbn07XG5cbmZ1bmN0aW9uIGtleUV2ZW50KGtleUNvZGUsIGtleSkge1xuICB2YXIgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICBldmVudC5pbml0RXZlbnQoXCJrZXlkb3duXCIsIHRydWUsIHRydWUpO1xuICBldmVudC5rZXlDb2RlID0ga2V5Q29kZTtcbiAgZXZlbnQua2V5ID0gZXZlbnQuY29kZSA9IGtleTtcbiAgcmV0dXJuIGV2ZW50XG59XG5cbmZ1bmN0aW9uIHdpbmRvd1JlY3QoZG9jKSB7XG4gIHJldHVybiB7bGVmdDogMCwgcmlnaHQ6IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsXG4gICAgICAgICAgdG9wOiAwLCBib3R0b206IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0fVxufVxuXG5mdW5jdGlvbiBnZXRTaWRlKHZhbHVlLCBzaWRlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gXCJudW1iZXJcIiA/IHZhbHVlIDogdmFsdWVbc2lkZV1cbn1cblxuZnVuY3Rpb24gY2xpZW50UmVjdChub2RlKSB7XG4gIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgLy8gQWRqdXN0IGZvciBlbGVtZW50cyB3aXRoIHN0eWxlIFwidHJhbnNmb3JtOiBzY2FsZSgpXCJcbiAgdmFyIHNjYWxlWCA9IChyZWN0LndpZHRoIC8gbm9kZS5vZmZzZXRXaWR0aCkgfHwgMTtcbiAgdmFyIHNjYWxlWSA9IChyZWN0LmhlaWdodCAvIG5vZGUub2Zmc2V0SGVpZ2h0KSB8fCAxO1xuICAvLyBNYWtlIHN1cmUgc2Nyb2xsYmFyIHdpZHRoIGlzbid0IGluY2x1ZGVkIGluIHRoZSByZWN0YW5nbGVcbiAgcmV0dXJuIHtsZWZ0OiByZWN0LmxlZnQsIHJpZ2h0OiByZWN0LmxlZnQgKyBub2RlLmNsaWVudFdpZHRoICogc2NhbGVYLFxuICAgICAgICAgIHRvcDogcmVjdC50b3AsIGJvdHRvbTogcmVjdC50b3AgKyBub2RlLmNsaWVudEhlaWdodCAqIHNjYWxlWX1cbn1cblxuZnVuY3Rpb24gc2Nyb2xsUmVjdEludG9WaWV3KHZpZXcsIHJlY3QsIHN0YXJ0RE9NKSB7XG4gIHZhciBzY3JvbGxUaHJlc2hvbGQgPSB2aWV3LnNvbWVQcm9wKFwic2Nyb2xsVGhyZXNob2xkXCIpIHx8IDAsIHNjcm9sbE1hcmdpbiA9IHZpZXcuc29tZVByb3AoXCJzY3JvbGxNYXJnaW5cIikgfHwgNTtcbiAgdmFyIGRvYyA9IHZpZXcuZG9tLm93bmVyRG9jdW1lbnQ7XG4gIGZvciAodmFyIHBhcmVudCA9IHN0YXJ0RE9NIHx8IHZpZXcuZG9tOzsgcGFyZW50ID0gcGFyZW50Tm9kZShwYXJlbnQpKSB7XG4gICAgaWYgKCFwYXJlbnQpIHsgYnJlYWsgfVxuICAgIGlmIChwYXJlbnQubm9kZVR5cGUgIT0gMSkgeyBjb250aW51ZSB9XG4gICAgdmFyIGF0VG9wID0gcGFyZW50ID09IGRvYy5ib2R5IHx8IHBhcmVudC5ub2RlVHlwZSAhPSAxO1xuICAgIHZhciBib3VuZGluZyA9IGF0VG9wID8gd2luZG93UmVjdChkb2MpIDogY2xpZW50UmVjdChwYXJlbnQpO1xuICAgIHZhciBtb3ZlWCA9IDAsIG1vdmVZID0gMDtcbiAgICBpZiAocmVjdC50b3AgPCBib3VuZGluZy50b3AgKyBnZXRTaWRlKHNjcm9sbFRocmVzaG9sZCwgXCJ0b3BcIikpXG4gICAgICB7IG1vdmVZID0gLShib3VuZGluZy50b3AgLSByZWN0LnRvcCArIGdldFNpZGUoc2Nyb2xsTWFyZ2luLCBcInRvcFwiKSk7IH1cbiAgICBlbHNlIGlmIChyZWN0LmJvdHRvbSA+IGJvdW5kaW5nLmJvdHRvbSAtIGdldFNpZGUoc2Nyb2xsVGhyZXNob2xkLCBcImJvdHRvbVwiKSlcbiAgICAgIHsgbW92ZVkgPSByZWN0LmJvdHRvbSAtIGJvdW5kaW5nLmJvdHRvbSArIGdldFNpZGUoc2Nyb2xsTWFyZ2luLCBcImJvdHRvbVwiKTsgfVxuICAgIGlmIChyZWN0LmxlZnQgPCBib3VuZGluZy5sZWZ0ICsgZ2V0U2lkZShzY3JvbGxUaHJlc2hvbGQsIFwibGVmdFwiKSlcbiAgICAgIHsgbW92ZVggPSAtKGJvdW5kaW5nLmxlZnQgLSByZWN0LmxlZnQgKyBnZXRTaWRlKHNjcm9sbE1hcmdpbiwgXCJsZWZ0XCIpKTsgfVxuICAgIGVsc2UgaWYgKHJlY3QucmlnaHQgPiBib3VuZGluZy5yaWdodCAtIGdldFNpZGUoc2Nyb2xsVGhyZXNob2xkLCBcInJpZ2h0XCIpKVxuICAgICAgeyBtb3ZlWCA9IHJlY3QucmlnaHQgLSBib3VuZGluZy5yaWdodCArIGdldFNpZGUoc2Nyb2xsTWFyZ2luLCBcInJpZ2h0XCIpOyB9XG4gICAgaWYgKG1vdmVYIHx8IG1vdmVZKSB7XG4gICAgICBpZiAoYXRUb3ApIHtcbiAgICAgICAgZG9jLmRlZmF1bHRWaWV3LnNjcm9sbEJ5KG1vdmVYLCBtb3ZlWSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc3RhcnRYID0gcGFyZW50LnNjcm9sbExlZnQsIHN0YXJ0WSA9IHBhcmVudC5zY3JvbGxUb3A7XG4gICAgICAgIGlmIChtb3ZlWSkgeyBwYXJlbnQuc2Nyb2xsVG9wICs9IG1vdmVZOyB9XG4gICAgICAgIGlmIChtb3ZlWCkgeyBwYXJlbnQuc2Nyb2xsTGVmdCArPSBtb3ZlWDsgfVxuICAgICAgICB2YXIgZFggPSBwYXJlbnQuc2Nyb2xsTGVmdCAtIHN0YXJ0WCwgZFkgPSBwYXJlbnQuc2Nyb2xsVG9wIC0gc3RhcnRZO1xuICAgICAgICByZWN0ID0ge2xlZnQ6IHJlY3QubGVmdCAtIGRYLCB0b3A6IHJlY3QudG9wIC0gZFksIHJpZ2h0OiByZWN0LnJpZ2h0IC0gZFgsIGJvdHRvbTogcmVjdC5ib3R0b20gLSBkWX07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhdFRvcCkgeyBicmVhayB9XG4gIH1cbn1cblxuLy8gU3RvcmUgdGhlIHNjcm9sbCBwb3NpdGlvbiBvZiB0aGUgZWRpdG9yJ3MgcGFyZW50IG5vZGVzLCBhbG9uZyB3aXRoXG4vLyB0aGUgdG9wIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgbmVhciB0aGUgdG9wIG9mIHRoZSBlZGl0b3IsIHdoaWNoXG4vLyB3aWxsIGJlIHVzZWQgdG8gbWFrZSBzdXJlIHRoZSB2aXNpYmxlIHZpZXdwb3J0IHJlbWFpbnMgc3RhYmxlIGV2ZW5cbi8vIHdoZW4gdGhlIHNpemUgb2YgdGhlIGNvbnRlbnQgYWJvdmUgY2hhbmdlcy5cbmZ1bmN0aW9uIHN0b3JlU2Nyb2xsUG9zKHZpZXcpIHtcbiAgdmFyIHJlY3QgPSB2aWV3LmRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgc3RhcnRZID0gTWF0aC5tYXgoMCwgcmVjdC50b3ApO1xuICB2YXIgcmVmRE9NLCByZWZUb3A7XG4gIGZvciAodmFyIHggPSAocmVjdC5sZWZ0ICsgcmVjdC5yaWdodCkgLyAyLCB5ID0gc3RhcnRZICsgMTtcbiAgICAgICB5IDwgTWF0aC5taW4oaW5uZXJIZWlnaHQsIHJlY3QuYm90dG9tKTsgeSArPSA1KSB7XG4gICAgdmFyIGRvbSA9IHZpZXcucm9vdC5lbGVtZW50RnJvbVBvaW50KHgsIHkpO1xuICAgIGlmIChkb20gPT0gdmlldy5kb20gfHwgIXZpZXcuZG9tLmNvbnRhaW5zKGRvbSkpIHsgY29udGludWUgfVxuICAgIHZhciBsb2NhbFJlY3QgPSBkb20uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKGxvY2FsUmVjdC50b3AgPj0gc3RhcnRZIC0gMjApIHtcbiAgICAgIHJlZkRPTSA9IGRvbTtcbiAgICAgIHJlZlRvcCA9IGxvY2FsUmVjdC50b3A7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuICByZXR1cm4ge3JlZkRPTTogcmVmRE9NLCByZWZUb3A6IHJlZlRvcCwgc3RhY2s6IHNjcm9sbFN0YWNrKHZpZXcuZG9tKX1cbn1cblxuZnVuY3Rpb24gc2Nyb2xsU3RhY2soZG9tKSB7XG4gIHZhciBzdGFjayA9IFtdLCBkb2MgPSBkb20ub3duZXJEb2N1bWVudDtcbiAgZm9yICg7IGRvbTsgZG9tID0gcGFyZW50Tm9kZShkb20pKSB7XG4gICAgc3RhY2sucHVzaCh7ZG9tOiBkb20sIHRvcDogZG9tLnNjcm9sbFRvcCwgbGVmdDogZG9tLnNjcm9sbExlZnR9KTtcbiAgICBpZiAoZG9tID09IGRvYykgeyBicmVhayB9XG4gIH1cbiAgcmV0dXJuIHN0YWNrXG59XG5cbi8vIFJlc2V0IHRoZSBzY3JvbGwgcG9zaXRpb24gb2YgdGhlIGVkaXRvcidzIHBhcmVudCBub2RlcyB0byB0aGF0IHdoYXRcbi8vIGl0IHdhcyBiZWZvcmUsIHdoZW4gc3RvcmVTY3JvbGxQb3Mgd2FzIGNhbGxlZC5cbmZ1bmN0aW9uIHJlc2V0U2Nyb2xsUG9zKHJlZikge1xuICB2YXIgcmVmRE9NID0gcmVmLnJlZkRPTTtcbiAgdmFyIHJlZlRvcCA9IHJlZi5yZWZUb3A7XG4gIHZhciBzdGFjayA9IHJlZi5zdGFjaztcblxuICB2YXIgbmV3UmVmVG9wID0gcmVmRE9NID8gcmVmRE9NLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCA6IDA7XG4gIHJlc3RvcmVTY3JvbGxTdGFjayhzdGFjaywgbmV3UmVmVG9wID09IDAgPyAwIDogbmV3UmVmVG9wIC0gcmVmVG9wKTtcbn1cblxuZnVuY3Rpb24gcmVzdG9yZVNjcm9sbFN0YWNrKHN0YWNrLCBkVG9wKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhY2subGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcmVmID0gc3RhY2tbaV07XG4gICAgdmFyIGRvbSA9IHJlZi5kb207XG4gICAgdmFyIHRvcCA9IHJlZi50b3A7XG4gICAgdmFyIGxlZnQgPSByZWYubGVmdDtcbiAgICBpZiAoZG9tLnNjcm9sbFRvcCAhPSB0b3AgKyBkVG9wKSB7IGRvbS5zY3JvbGxUb3AgPSB0b3AgKyBkVG9wOyB9XG4gICAgaWYgKGRvbS5zY3JvbGxMZWZ0ICE9IGxlZnQpIHsgZG9tLnNjcm9sbExlZnQgPSBsZWZ0OyB9XG4gIH1cbn1cblxudmFyIHByZXZlbnRTY3JvbGxTdXBwb3J0ZWQgPSBudWxsO1xuLy8gRmVhdHVyZS1kZXRlY3RzIHN1cHBvcnQgZm9yIC5mb2N1cyh7cHJldmVudFNjcm9sbDogdHJ1ZX0pLCBhbmQgdXNlc1xuLy8gYSBmYWxsYmFjayBrbHVkZ2Ugd2hlbiBub3Qgc3VwcG9ydGVkLlxuZnVuY3Rpb24gZm9jdXNQcmV2ZW50U2Nyb2xsKGRvbSkge1xuICBpZiAoZG9tLnNldEFjdGl2ZSkgeyByZXR1cm4gZG9tLnNldEFjdGl2ZSgpIH0gLy8gaW4gSUVcbiAgaWYgKHByZXZlbnRTY3JvbGxTdXBwb3J0ZWQpIHsgcmV0dXJuIGRvbS5mb2N1cyhwcmV2ZW50U2Nyb2xsU3VwcG9ydGVkKSB9XG5cbiAgdmFyIHN0b3JlZCA9IHNjcm9sbFN0YWNrKGRvbSk7XG4gIGRvbS5mb2N1cyhwcmV2ZW50U2Nyb2xsU3VwcG9ydGVkID09IG51bGwgPyB7XG4gICAgZ2V0IHByZXZlbnRTY3JvbGwoKSB7XG4gICAgICBwcmV2ZW50U2Nyb2xsU3VwcG9ydGVkID0ge3ByZXZlbnRTY3JvbGw6IHRydWV9O1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH0gOiB1bmRlZmluZWQpO1xuICBpZiAoIXByZXZlbnRTY3JvbGxTdXBwb3J0ZWQpIHtcbiAgICBwcmV2ZW50U2Nyb2xsU3VwcG9ydGVkID0gZmFsc2U7XG4gICAgcmVzdG9yZVNjcm9sbFN0YWNrKHN0b3JlZCwgMCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZE9mZnNldEluTm9kZShub2RlLCBjb29yZHMpIHtcbiAgdmFyIGNsb3Nlc3QsIGR4Q2xvc2VzdCA9IDJlOCwgY29vcmRzQ2xvc2VzdCwgb2Zmc2V0ID0gMDtcbiAgdmFyIHJvd0JvdCA9IGNvb3Jkcy50b3AsIHJvd1RvcCA9IGNvb3Jkcy50b3A7XG4gIGZvciAodmFyIGNoaWxkID0gbm9kZS5maXJzdENoaWxkLCBjaGlsZEluZGV4ID0gMDsgY2hpbGQ7IGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmcsIGNoaWxkSW5kZXgrKykge1xuICAgIHZhciByZWN0cyA9ICh2b2lkIDApO1xuICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PSAxKSB7IHJlY3RzID0gY2hpbGQuZ2V0Q2xpZW50UmVjdHMoKTsgfVxuICAgIGVsc2UgaWYgKGNoaWxkLm5vZGVUeXBlID09IDMpIHsgcmVjdHMgPSB0ZXh0UmFuZ2UoY2hpbGQpLmdldENsaWVudFJlY3RzKCk7IH1cbiAgICBlbHNlIHsgY29udGludWUgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJlY3QgPSByZWN0c1tpXTtcbiAgICAgIGlmIChyZWN0LnRvcCA8PSByb3dCb3QgJiYgcmVjdC5ib3R0b20gPj0gcm93VG9wKSB7XG4gICAgICAgIHJvd0JvdCA9IE1hdGgubWF4KHJlY3QuYm90dG9tLCByb3dCb3QpO1xuICAgICAgICByb3dUb3AgPSBNYXRoLm1pbihyZWN0LnRvcCwgcm93VG9wKTtcbiAgICAgICAgdmFyIGR4ID0gcmVjdC5sZWZ0ID4gY29vcmRzLmxlZnQgPyByZWN0LmxlZnQgLSBjb29yZHMubGVmdFxuICAgICAgICAgICAgOiByZWN0LnJpZ2h0IDwgY29vcmRzLmxlZnQgPyBjb29yZHMubGVmdCAtIHJlY3QucmlnaHQgOiAwO1xuICAgICAgICBpZiAoZHggPCBkeENsb3Nlc3QpIHtcbiAgICAgICAgICBjbG9zZXN0ID0gY2hpbGQ7XG4gICAgICAgICAgZHhDbG9zZXN0ID0gZHg7XG4gICAgICAgICAgY29vcmRzQ2xvc2VzdCA9IGR4ICYmIGNsb3Nlc3Qubm9kZVR5cGUgPT0gMyA/IHtsZWZ0OiByZWN0LnJpZ2h0IDwgY29vcmRzLmxlZnQgPyByZWN0LnJpZ2h0IDogcmVjdC5sZWZ0LCB0b3A6IGNvb3Jkcy50b3B9IDogY29vcmRzO1xuICAgICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PSAxICYmIGR4KVxuICAgICAgICAgICAgeyBvZmZzZXQgPSBjaGlsZEluZGV4ICsgKGNvb3Jkcy5sZWZ0ID49IChyZWN0LmxlZnQgKyByZWN0LnJpZ2h0KSAvIDIgPyAxIDogMCk7IH1cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWNsb3Nlc3QgJiYgKGNvb3Jkcy5sZWZ0ID49IHJlY3QucmlnaHQgJiYgY29vcmRzLnRvcCA+PSByZWN0LnRvcCB8fFxuICAgICAgICAgICAgICAgICAgICAgICBjb29yZHMubGVmdCA+PSByZWN0LmxlZnQgJiYgY29vcmRzLnRvcCA+PSByZWN0LmJvdHRvbSkpXG4gICAgICAgIHsgb2Zmc2V0ID0gY2hpbGRJbmRleCArIDE7IH1cbiAgICB9XG4gIH1cbiAgaWYgKGNsb3Nlc3QgJiYgY2xvc2VzdC5ub2RlVHlwZSA9PSAzKSB7IHJldHVybiBmaW5kT2Zmc2V0SW5UZXh0KGNsb3Nlc3QsIGNvb3Jkc0Nsb3Nlc3QpIH1cbiAgaWYgKCFjbG9zZXN0IHx8IChkeENsb3Nlc3QgJiYgY2xvc2VzdC5ub2RlVHlwZSA9PSAxKSkgeyByZXR1cm4ge25vZGU6IG5vZGUsIG9mZnNldDogb2Zmc2V0fSB9XG4gIHJldHVybiBmaW5kT2Zmc2V0SW5Ob2RlKGNsb3Nlc3QsIGNvb3Jkc0Nsb3Nlc3QpXG59XG5cbmZ1bmN0aW9uIGZpbmRPZmZzZXRJblRleHQobm9kZSwgY29vcmRzKSB7XG4gIHZhciBsZW4gPSBub2RlLm5vZGVWYWx1ZS5sZW5ndGg7XG4gIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICByYW5nZS5zZXRFbmQobm9kZSwgaSArIDEpO1xuICAgIHJhbmdlLnNldFN0YXJ0KG5vZGUsIGkpO1xuICAgIHZhciByZWN0ID0gc2luZ2xlUmVjdChyYW5nZSwgMSk7XG4gICAgaWYgKHJlY3QudG9wID09IHJlY3QuYm90dG9tKSB7IGNvbnRpbnVlIH1cbiAgICBpZiAoaW5SZWN0KGNvb3JkcywgcmVjdCkpXG4gICAgICB7IHJldHVybiB7bm9kZTogbm9kZSwgb2Zmc2V0OiBpICsgKGNvb3Jkcy5sZWZ0ID49IChyZWN0LmxlZnQgKyByZWN0LnJpZ2h0KSAvIDIgPyAxIDogMCl9IH1cbiAgfVxuICByZXR1cm4ge25vZGU6IG5vZGUsIG9mZnNldDogMH1cbn1cblxuZnVuY3Rpb24gaW5SZWN0KGNvb3JkcywgcmVjdCkge1xuICByZXR1cm4gY29vcmRzLmxlZnQgPj0gcmVjdC5sZWZ0IC0gMSAmJiBjb29yZHMubGVmdCA8PSByZWN0LnJpZ2h0ICsgMSYmXG4gICAgY29vcmRzLnRvcCA+PSByZWN0LnRvcCAtIDEgJiYgY29vcmRzLnRvcCA8PSByZWN0LmJvdHRvbSArIDFcbn1cblxuZnVuY3Rpb24gdGFyZ2V0S2x1ZGdlKGRvbSwgY29vcmRzKSB7XG4gIHZhciBwYXJlbnQgPSBkb20ucGFyZW50Tm9kZTtcbiAgaWYgKHBhcmVudCAmJiAvXmxpJC9pLnRlc3QocGFyZW50Lm5vZGVOYW1lKSAmJiBjb29yZHMubGVmdCA8IGRvbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0KVxuICAgIHsgcmV0dXJuIHBhcmVudCB9XG4gIHJldHVybiBkb21cbn1cblxuZnVuY3Rpb24gcG9zRnJvbUVsZW1lbnQodmlldywgZWx0LCBjb29yZHMpIHtcbiAgdmFyIHJlZiA9IGZpbmRPZmZzZXRJbk5vZGUoZWx0LCBjb29yZHMpO1xuICB2YXIgbm9kZSA9IHJlZi5ub2RlO1xuICB2YXIgb2Zmc2V0ID0gcmVmLm9mZnNldDtcbiAgdmFyIGJpYXMgPSAtMTtcbiAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSAmJiAhbm9kZS5maXJzdENoaWxkKSB7XG4gICAgdmFyIHJlY3QgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGJpYXMgPSByZWN0LmxlZnQgIT0gcmVjdC5yaWdodCAmJiBjb29yZHMubGVmdCA+IChyZWN0LmxlZnQgKyByZWN0LnJpZ2h0KSAvIDIgPyAxIDogLTE7XG4gIH1cbiAgcmV0dXJuIHZpZXcuZG9jVmlldy5wb3NGcm9tRE9NKG5vZGUsIG9mZnNldCwgYmlhcylcbn1cblxuZnVuY3Rpb24gcG9zRnJvbUNhcmV0KHZpZXcsIG5vZGUsIG9mZnNldCwgY29vcmRzKSB7XG4gIC8vIEJyb3dzZXIgKGluIGNhcmV0UG9zaXRpb24vUmFuZ2VGcm9tUG9pbnQpIHdpbGwgYWdyZXNzaXZlbHlcbiAgLy8gbm9ybWFsaXplIHRvd2FyZHMgbmVhcmJ5IGlubGluZSBub2Rlcy4gU2luY2Ugd2UgYXJlIGludGVyZXN0ZWQgaW5cbiAgLy8gcG9zaXRpb25zIGJldHdlZW4gYmxvY2sgbm9kZXMgdG9vLCB3ZSBmaXJzdCB3YWxrIHVwIHRoZSBoaWVyYXJjaHlcbiAgLy8gb2Ygbm9kZXMgdG8gc2VlIGlmIHRoZXJlIGFyZSBibG9jayBub2RlcyB0aGF0IHRoZSBjb29yZGluYXRlc1xuICAvLyBmYWxsIG91dHNpZGUgb2YuIElmIHNvLCB3ZSB0YWtlIHRoZSBwb3NpdGlvbiBiZWZvcmUvYWZ0ZXIgdGhhdFxuICAvLyBibG9jay4gSWYgbm90LCB3ZSBjYWxsIGBwb3NGcm9tRE9NYCBvbiB0aGUgcmF3IG5vZGUvb2Zmc2V0LlxuICB2YXIgb3V0c2lkZSA9IC0xO1xuICBmb3IgKHZhciBjdXIgPSBub2RlOzspIHtcbiAgICBpZiAoY3VyID09IHZpZXcuZG9tKSB7IGJyZWFrIH1cbiAgICB2YXIgZGVzYyA9IHZpZXcuZG9jVmlldy5uZWFyZXN0RGVzYyhjdXIsIHRydWUpO1xuICAgIGlmICghZGVzYykgeyByZXR1cm4gbnVsbCB9XG4gICAgaWYgKGRlc2Mubm9kZS5pc0Jsb2NrICYmIGRlc2MucGFyZW50KSB7XG4gICAgICB2YXIgcmVjdCA9IGRlc2MuZG9tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgaWYgKHJlY3QubGVmdCA+IGNvb3Jkcy5sZWZ0IHx8IHJlY3QudG9wID4gY29vcmRzLnRvcCkgeyBvdXRzaWRlID0gZGVzYy5wb3NCZWZvcmU7IH1cbiAgICAgIGVsc2UgaWYgKHJlY3QucmlnaHQgPCBjb29yZHMubGVmdCB8fCByZWN0LmJvdHRvbSA8IGNvb3Jkcy50b3ApIHsgb3V0c2lkZSA9IGRlc2MucG9zQWZ0ZXI7IH1cbiAgICAgIGVsc2UgeyBicmVhayB9XG4gICAgfVxuICAgIGN1ciA9IGRlc2MuZG9tLnBhcmVudE5vZGU7XG4gIH1cbiAgcmV0dXJuIG91dHNpZGUgPiAtMSA/IG91dHNpZGUgOiB2aWV3LmRvY1ZpZXcucG9zRnJvbURPTShub2RlLCBvZmZzZXQpXG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRGcm9tUG9pbnQoZWxlbWVudCwgY29vcmRzLCBib3gpIHtcbiAgdmFyIGxlbiA9IGVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGg7XG4gIGlmIChsZW4gJiYgYm94LnRvcCA8IGJveC5ib3R0b20pIHtcbiAgICBmb3IgKHZhciBzdGFydEkgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihsZW4gLSAxLCBNYXRoLmZsb29yKGxlbiAqIChjb29yZHMudG9wIC0gYm94LnRvcCkgLyAoYm94LmJvdHRvbSAtIGJveC50b3ApKSAtIDIpKSwgaSA9IHN0YXJ0STs7KSB7XG4gICAgICB2YXIgY2hpbGQgPSBlbGVtZW50LmNoaWxkTm9kZXNbaV07XG4gICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT0gMSkge1xuICAgICAgICB2YXIgcmVjdHMgPSBjaGlsZC5nZXRDbGllbnRSZWN0cygpO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJlY3RzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgdmFyIHJlY3QgPSByZWN0c1tqXTtcbiAgICAgICAgICBpZiAoaW5SZWN0KGNvb3JkcywgcmVjdCkpIHsgcmV0dXJuIGVsZW1lbnRGcm9tUG9pbnQoY2hpbGQsIGNvb3JkcywgcmVjdCkgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoKGkgPSAoaSArIDEpICUgbGVuKSA9PSBzdGFydEkpIHsgYnJlYWsgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZWxlbWVudFxufVxuXG4vLyBHaXZlbiBhbiB4LHkgcG9zaXRpb24gb24gdGhlIGVkaXRvciwgZ2V0IHRoZSBwb3NpdGlvbiBpbiB0aGUgZG9jdW1lbnQuXG5mdW5jdGlvbiBwb3NBdENvb3Jkcyh2aWV3LCBjb29yZHMpIHtcbiAgdmFyIGFzc2lnbiwgYXNzaWduJDE7XG5cbiAgdmFyIHJvb3QgPSB2aWV3LnJvb3QsIG5vZGUsIG9mZnNldDtcbiAgaWYgKHJvb3QuY2FyZXRQb3NpdGlvbkZyb21Qb2ludCkge1xuICAgIHRyeSB7IC8vIEZpcmVmb3ggdGhyb3dzIGZvciB0aGlzIGNhbGwgaW4gaGFyZC10by1wcmVkaWN0IGNpcmN1bXN0YW5jZXMgKCM5OTQpXG4gICAgICB2YXIgcG9zJDEgPSByb290LmNhcmV0UG9zaXRpb25Gcm9tUG9pbnQoY29vcmRzLmxlZnQsIGNvb3Jkcy50b3ApO1xuICAgICAgaWYgKHBvcyQxKSB7ICgoYXNzaWduID0gcG9zJDEsIG5vZGUgPSBhc3NpZ24ub2Zmc2V0Tm9kZSwgb2Zmc2V0ID0gYXNzaWduLm9mZnNldCkpOyB9XG4gICAgfSBjYXRjaCAoXykge31cbiAgfVxuICBpZiAoIW5vZGUgJiYgcm9vdC5jYXJldFJhbmdlRnJvbVBvaW50KSB7XG4gICAgdmFyIHJhbmdlID0gcm9vdC5jYXJldFJhbmdlRnJvbVBvaW50KGNvb3Jkcy5sZWZ0LCBjb29yZHMudG9wKTtcbiAgICBpZiAocmFuZ2UpIHsgKChhc3NpZ24kMSA9IHJhbmdlLCBub2RlID0gYXNzaWduJDEuc3RhcnRDb250YWluZXIsIG9mZnNldCA9IGFzc2lnbiQxLnN0YXJ0T2Zmc2V0KSk7IH1cbiAgfVxuXG4gIHZhciBlbHQgPSByb290LmVsZW1lbnRGcm9tUG9pbnQoY29vcmRzLmxlZnQsIGNvb3Jkcy50b3AgKyAxKSwgcG9zO1xuICBpZiAoIWVsdCB8fCAhdmlldy5kb20uY29udGFpbnMoZWx0Lm5vZGVUeXBlICE9IDEgPyBlbHQucGFyZW50Tm9kZSA6IGVsdCkpIHtcbiAgICB2YXIgYm94ID0gdmlldy5kb20uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKCFpblJlY3QoY29vcmRzLCBib3gpKSB7IHJldHVybiBudWxsIH1cbiAgICBlbHQgPSBlbGVtZW50RnJvbVBvaW50KHZpZXcuZG9tLCBjb29yZHMsIGJveCk7XG4gICAgaWYgKCFlbHQpIHsgcmV0dXJuIG51bGwgfVxuICB9XG4gIC8vIFNhZmFyaSdzIGNhcmV0UmFuZ2VGcm9tUG9pbnQgcmV0dXJucyBub25zZW5zZSB3aGVuIG9uIGEgZHJhZ2dhYmxlIGVsZW1lbnRcbiAgaWYgKHJlc3VsdC5zYWZhcmkpIHtcbiAgICBmb3IgKHZhciBwID0gZWx0OyBub2RlICYmIHA7IHAgPSBwYXJlbnROb2RlKHApKVxuICAgICAgeyBpZiAocC5kcmFnZ2FibGUpIHsgbm9kZSA9IG9mZnNldCA9IG51bGw7IH0gfVxuICB9XG4gIGVsdCA9IHRhcmdldEtsdWRnZShlbHQsIGNvb3Jkcyk7XG4gIGlmIChub2RlKSB7XG4gICAgaWYgKHJlc3VsdC5nZWNrbyAmJiBub2RlLm5vZGVUeXBlID09IDEpIHtcbiAgICAgIC8vIEZpcmVmb3ggd2lsbCBzb21ldGltZXMgcmV0dXJuIG9mZnNldHMgaW50byA8aW5wdXQ+IG5vZGVzLCB3aGljaFxuICAgICAgLy8gaGF2ZSBubyBhY3R1YWwgY2hpbGRyZW4sIGZyb20gY2FyZXRQb3NpdGlvbkZyb21Qb2ludCAoIzk1MylcbiAgICAgIG9mZnNldCA9IE1hdGgubWluKG9mZnNldCwgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICAvLyBJdCdsbCBhbHNvIG1vdmUgdGhlIHJldHVybmVkIHBvc2l0aW9uIGJlZm9yZSBpbWFnZSBub2RlcyxcbiAgICAgIC8vIGV2ZW4gaWYgdGhvc2UgYXJlIGJlaGluZCBpdC5cbiAgICAgIGlmIChvZmZzZXQgPCBub2RlLmNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBuZXh0ID0gbm9kZS5jaGlsZE5vZGVzW29mZnNldF0sIGJveCQxO1xuICAgICAgICBpZiAobmV4dC5ub2RlTmFtZSA9PSBcIklNR1wiICYmIChib3gkMSA9IG5leHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpLnJpZ2h0IDw9IGNvb3Jkcy5sZWZ0ICYmXG4gICAgICAgICAgICBib3gkMS5ib3R0b20gPiBjb29yZHMudG9wKVxuICAgICAgICAgIHsgb2Zmc2V0Kys7IH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gU3VzcGljaW91c2x5IHNwZWNpZmljIGtsdWRnZSB0byB3b3JrIGFyb3VuZCBjYXJldCpGcm9tUG9pbnRcbiAgICAvLyBuZXZlciByZXR1cm5pbmcgYSBwb3NpdGlvbiBhdCB0aGUgZW5kIG9mIHRoZSBkb2N1bWVudFxuICAgIGlmIChub2RlID09IHZpZXcuZG9tICYmIG9mZnNldCA9PSBub2RlLmNoaWxkTm9kZXMubGVuZ3RoIC0gMSAmJiBub2RlLmxhc3RDaGlsZC5ub2RlVHlwZSA9PSAxICYmXG4gICAgICAgIGNvb3Jkcy50b3AgPiBub2RlLmxhc3RDaGlsZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20pXG4gICAgICB7IHBvcyA9IHZpZXcuc3RhdGUuZG9jLmNvbnRlbnQuc2l6ZTsgfVxuICAgIC8vIElnbm9yZSBwb3NpdGlvbnMgZGlyZWN0bHkgYWZ0ZXIgYSBCUiwgc2luY2UgY2FyZXQqRnJvbVBvaW50XG4gICAgLy8gJ3JvdW5kIHVwJyBwb3NpdGlvbnMgdGhhdCB3b3VsZCBiZSBtb3JlIGFjY3VyYXRlbHkgcGxhY2VkXG4gICAgLy8gYmVmb3JlIHRoZSBCUiBub2RlLlxuICAgIGVsc2UgaWYgKG9mZnNldCA9PSAwIHx8IG5vZGUubm9kZVR5cGUgIT0gMSB8fCBub2RlLmNoaWxkTm9kZXNbb2Zmc2V0IC0gMV0ubm9kZU5hbWUgIT0gXCJCUlwiKVxuICAgICAgeyBwb3MgPSBwb3NGcm9tQ2FyZXQodmlldywgbm9kZSwgb2Zmc2V0LCBjb29yZHMpOyB9XG4gIH1cbiAgaWYgKHBvcyA9PSBudWxsKSB7IHBvcyA9IHBvc0Zyb21FbGVtZW50KHZpZXcsIGVsdCwgY29vcmRzKTsgfVxuXG4gIHZhciBkZXNjID0gdmlldy5kb2NWaWV3Lm5lYXJlc3REZXNjKGVsdCwgdHJ1ZSk7XG4gIHJldHVybiB7cG9zOiBwb3MsIGluc2lkZTogZGVzYyA/IGRlc2MucG9zQXRTdGFydCAtIGRlc2MuYm9yZGVyIDogLTF9XG59XG5cbmZ1bmN0aW9uIHNpbmdsZVJlY3Qob2JqZWN0LCBiaWFzKSB7XG4gIHZhciByZWN0cyA9IG9iamVjdC5nZXRDbGllbnRSZWN0cygpO1xuICByZXR1cm4gIXJlY3RzLmxlbmd0aCA/IG9iamVjdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IHJlY3RzW2JpYXMgPCAwID8gMCA6IHJlY3RzLmxlbmd0aCAtIDFdXG59XG5cbnZhciBCSURJID0gL1tcXHUwNTkwLVxcdTA1ZjRcXHUwNjAwLVxcdTA2ZmZcXHUwNzAwLVxcdTA4YWNdLztcblxuLy8gOiAoRWRpdG9yVmlldywgbnVtYmVyLCBudW1iZXIpIOKGkiB7bGVmdDogbnVtYmVyLCB0b3A6IG51bWJlciwgcmlnaHQ6IG51bWJlciwgYm90dG9tOiBudW1iZXJ9XG4vLyBHaXZlbiBhIHBvc2l0aW9uIGluIHRoZSBkb2N1bWVudCBtb2RlbCwgZ2V0IGEgYm91bmRpbmcgYm94IG9mIHRoZVxuLy8gY2hhcmFjdGVyIGF0IHRoYXQgcG9zaXRpb24sIHJlbGF0aXZlIHRvIHRoZSB3aW5kb3cuXG5mdW5jdGlvbiBjb29yZHNBdFBvcyh2aWV3LCBwb3MsIHNpZGUpIHtcbiAgdmFyIHJlZiA9IHZpZXcuZG9jVmlldy5kb21Gcm9tUG9zKHBvcywgc2lkZSA8IDAgPyAtMSA6IDEpO1xuICB2YXIgbm9kZSA9IHJlZi5ub2RlO1xuICB2YXIgb2Zmc2V0ID0gcmVmLm9mZnNldDtcblxuICB2YXIgc3VwcG9ydEVtcHR5UmFuZ2UgPSByZXN1bHQud2Via2l0IHx8IHJlc3VsdC5nZWNrbztcbiAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMykge1xuICAgIC8vIFRoZXNlIGJyb3dzZXJzIHN1cHBvcnQgcXVlcnlpbmcgZW1wdHkgdGV4dCByYW5nZXMuIFByZWZlciB0aGF0IGluXG4gICAgLy8gYmlkaSBjb250ZXh0IG9yIHdoZW4gYXQgdGhlIGVuZCBvZiBhIG5vZGUuXG4gICAgaWYgKHN1cHBvcnRFbXB0eVJhbmdlICYmIChCSURJLnRlc3Qobm9kZS5ub2RlVmFsdWUpIHx8IChzaWRlIDwgMCA/ICFvZmZzZXQgOiBvZmZzZXQgPT0gbm9kZS5ub2RlVmFsdWUubGVuZ3RoKSkpIHtcbiAgICAgIHZhciByZWN0ID0gc2luZ2xlUmVjdCh0ZXh0UmFuZ2Uobm9kZSwgb2Zmc2V0LCBvZmZzZXQpLCBzaWRlKTtcbiAgICAgIC8vIEZpcmVmb3ggcmV0dXJucyBiYWQgcmVzdWx0cyAodGhlIHBvc2l0aW9uIGJlZm9yZSB0aGUgc3BhY2UpXG4gICAgICAvLyB3aGVuIHF1ZXJ5aW5nIGEgcG9zaXRpb24gZGlyZWN0bHkgYWZ0ZXIgbGluZS1icm9rZW5cbiAgICAgIC8vIHdoaXRlc3BhY2UuIERldGVjdCB0aGlzIHNpdHVhdGlvbiBhbmQgYW5kIGtsdWRnZSBhcm91bmQgaXRcbiAgICAgIGlmIChyZXN1bHQuZ2Vja28gJiYgb2Zmc2V0ICYmIC9cXHMvLnRlc3Qobm9kZS5ub2RlVmFsdWVbb2Zmc2V0IC0gMV0pICYmIG9mZnNldCA8IG5vZGUubm9kZVZhbHVlLmxlbmd0aCkge1xuICAgICAgICB2YXIgcmVjdEJlZm9yZSA9IHNpbmdsZVJlY3QodGV4dFJhbmdlKG5vZGUsIG9mZnNldCAtIDEsIG9mZnNldCAtIDEpLCAtMSk7XG4gICAgICAgIGlmIChyZWN0QmVmb3JlLnRvcCA9PSByZWN0LnRvcCkge1xuICAgICAgICAgIHZhciByZWN0QWZ0ZXIgPSBzaW5nbGVSZWN0KHRleHRSYW5nZShub2RlLCBvZmZzZXQsIG9mZnNldCArIDEpLCAtMSk7XG4gICAgICAgICAgaWYgKHJlY3RBZnRlci50b3AgIT0gcmVjdC50b3ApXG4gICAgICAgICAgICB7IHJldHVybiBmbGF0dGVuVihyZWN0QWZ0ZXIsIHJlY3RBZnRlci5sZWZ0IDwgcmVjdEJlZm9yZS5sZWZ0KSB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZWN0XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBmcm9tID0gb2Zmc2V0LCB0byA9IG9mZnNldCwgdGFrZVNpZGUgPSBzaWRlIDwgMCA/IDEgOiAtMTtcbiAgICAgIGlmIChzaWRlIDwgMCAmJiAhb2Zmc2V0KSB7IHRvKys7IHRha2VTaWRlID0gLTE7IH1cbiAgICAgIGVsc2UgaWYgKHNpZGUgPj0gMCAmJiBvZmZzZXQgPT0gbm9kZS5ub2RlVmFsdWUubGVuZ3RoKSB7IGZyb20tLTsgdGFrZVNpZGUgPSAxOyB9XG4gICAgICBlbHNlIGlmIChzaWRlIDwgMCkgeyBmcm9tLS07IH1cbiAgICAgIGVsc2UgeyB0byArKzsgfVxuICAgICAgcmV0dXJuIGZsYXR0ZW5WKHNpbmdsZVJlY3QodGV4dFJhbmdlKG5vZGUsIGZyb20sIHRvKSwgdGFrZVNpZGUpLCB0YWtlU2lkZSA8IDApXG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJuIGEgaG9yaXpvbnRhbCBsaW5lIGluIGJsb2NrIGNvbnRleHRcbiAgaWYgKCF2aWV3LnN0YXRlLmRvYy5yZXNvbHZlKHBvcykucGFyZW50LmlubGluZUNvbnRlbnQpIHtcbiAgICBpZiAob2Zmc2V0ICYmIChzaWRlIDwgMCB8fCBvZmZzZXQgPT0gbm9kZVNpemUobm9kZSkpKSB7XG4gICAgICB2YXIgYmVmb3JlID0gbm9kZS5jaGlsZE5vZGVzW29mZnNldCAtIDFdO1xuICAgICAgaWYgKGJlZm9yZS5ub2RlVHlwZSA9PSAxKSB7IHJldHVybiBmbGF0dGVuSChiZWZvcmUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIGZhbHNlKSB9XG4gICAgfVxuICAgIGlmIChvZmZzZXQgPCBub2RlU2l6ZShub2RlKSkge1xuICAgICAgdmFyIGFmdGVyID0gbm9kZS5jaGlsZE5vZGVzW29mZnNldF07XG4gICAgICBpZiAoYWZ0ZXIubm9kZVR5cGUgPT0gMSkgeyByZXR1cm4gZmxhdHRlbkgoYWZ0ZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHRydWUpIH1cbiAgICB9XG4gICAgcmV0dXJuIGZsYXR0ZW5IKG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHNpZGUgPj0gMClcbiAgfVxuXG4gIC8vIElubGluZSwgbm90IGluIHRleHQgbm9kZSAodGhpcyBpcyBub3QgQmlkaS1zYWZlKVxuICBpZiAob2Zmc2V0ICYmIChzaWRlIDwgMCB8fCBvZmZzZXQgPT0gbm9kZVNpemUobm9kZSkpKSB7XG4gICAgdmFyIGJlZm9yZSQxID0gbm9kZS5jaGlsZE5vZGVzW29mZnNldCAtIDFdO1xuICAgIHZhciB0YXJnZXQgPSBiZWZvcmUkMS5ub2RlVHlwZSA9PSAzID8gdGV4dFJhbmdlKGJlZm9yZSQxLCBub2RlU2l6ZShiZWZvcmUkMSkgLSAoc3VwcG9ydEVtcHR5UmFuZ2UgPyAwIDogMSkpXG4gICAgICAgIC8vIEJSIG5vZGVzIHRlbmQgdG8gb25seSByZXR1cm4gdGhlIHJlY3RhbmdsZSBiZWZvcmUgdGhlbS5cbiAgICAgICAgLy8gT25seSB1c2UgdGhlbSBpZiB0aGV5IGFyZSB0aGUgbGFzdCBlbGVtZW50IGluIHRoZWlyIHBhcmVudFxuICAgICAgICA6IGJlZm9yZSQxLm5vZGVUeXBlID09IDEgJiYgKGJlZm9yZSQxLm5vZGVOYW1lICE9IFwiQlJcIiB8fCAhYmVmb3JlJDEubmV4dFNpYmxpbmcpID8gYmVmb3JlJDEgOiBudWxsO1xuICAgIGlmICh0YXJnZXQpIHsgcmV0dXJuIGZsYXR0ZW5WKHNpbmdsZVJlY3QodGFyZ2V0LCAxKSwgZmFsc2UpIH1cbiAgfVxuICBpZiAob2Zmc2V0IDwgbm9kZVNpemUobm9kZSkpIHtcbiAgICB2YXIgYWZ0ZXIkMSA9IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXRdO1xuICAgIHdoaWxlIChhZnRlciQxLnBtVmlld0Rlc2MgJiYgYWZ0ZXIkMS5wbVZpZXdEZXNjLmlnbm9yZUZvckNvb3JkcykgeyBhZnRlciQxID0gYWZ0ZXIkMS5uZXh0U2libGluZzsgfVxuICAgIHZhciB0YXJnZXQkMSA9ICFhZnRlciQxID8gbnVsbCA6IGFmdGVyJDEubm9kZVR5cGUgPT0gMyA/IHRleHRSYW5nZShhZnRlciQxLCAwLCAoc3VwcG9ydEVtcHR5UmFuZ2UgPyAwIDogMSkpXG4gICAgICAgIDogYWZ0ZXIkMS5ub2RlVHlwZSA9PSAxID8gYWZ0ZXIkMSA6IG51bGw7XG4gICAgaWYgKHRhcmdldCQxKSB7IHJldHVybiBmbGF0dGVuVihzaW5nbGVSZWN0KHRhcmdldCQxLCAtMSksIHRydWUpIH1cbiAgfVxuICAvLyBBbGwgZWxzZSBmYWlsZWQsIGp1c3QgdHJ5IHRvIGdldCBhIHJlY3RhbmdsZSBmb3IgdGhlIHRhcmdldCBub2RlXG4gIHJldHVybiBmbGF0dGVuVihzaW5nbGVSZWN0KG5vZGUubm9kZVR5cGUgPT0gMyA/IHRleHRSYW5nZShub2RlKSA6IG5vZGUsIC1zaWRlKSwgc2lkZSA+PSAwKVxufVxuXG5mdW5jdGlvbiBmbGF0dGVuVihyZWN0LCBsZWZ0KSB7XG4gIGlmIChyZWN0LndpZHRoID09IDApIHsgcmV0dXJuIHJlY3QgfVxuICB2YXIgeCA9IGxlZnQgPyByZWN0LmxlZnQgOiByZWN0LnJpZ2h0O1xuICByZXR1cm4ge3RvcDogcmVjdC50b3AsIGJvdHRvbTogcmVjdC5ib3R0b20sIGxlZnQ6IHgsIHJpZ2h0OiB4fVxufVxuXG5mdW5jdGlvbiBmbGF0dGVuSChyZWN0LCB0b3ApIHtcbiAgaWYgKHJlY3QuaGVpZ2h0ID09IDApIHsgcmV0dXJuIHJlY3QgfVxuICB2YXIgeSA9IHRvcCA/IHJlY3QudG9wIDogcmVjdC5ib3R0b207XG4gIHJldHVybiB7dG9wOiB5LCBib3R0b206IHksIGxlZnQ6IHJlY3QubGVmdCwgcmlnaHQ6IHJlY3QucmlnaHR9XG59XG5cbmZ1bmN0aW9uIHdpdGhGbHVzaGVkU3RhdGUodmlldywgc3RhdGUsIGYpIHtcbiAgdmFyIHZpZXdTdGF0ZSA9IHZpZXcuc3RhdGUsIGFjdGl2ZSA9IHZpZXcucm9vdC5hY3RpdmVFbGVtZW50O1xuICBpZiAodmlld1N0YXRlICE9IHN0YXRlKSB7IHZpZXcudXBkYXRlU3RhdGUoc3RhdGUpOyB9XG4gIGlmIChhY3RpdmUgIT0gdmlldy5kb20pIHsgdmlldy5mb2N1cygpOyB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGYoKVxuICB9IGZpbmFsbHkge1xuICAgIGlmICh2aWV3U3RhdGUgIT0gc3RhdGUpIHsgdmlldy51cGRhdGVTdGF0ZSh2aWV3U3RhdGUpOyB9XG4gICAgaWYgKGFjdGl2ZSAhPSB2aWV3LmRvbSAmJiBhY3RpdmUpIHsgYWN0aXZlLmZvY3VzKCk7IH1cbiAgfVxufVxuXG4vLyA6IChFZGl0b3JWaWV3LCBudW1iZXIsIG51bWJlcilcbi8vIFdoZXRoZXIgdmVydGljYWwgcG9zaXRpb24gbW90aW9uIGluIGEgZ2l2ZW4gZGlyZWN0aW9uXG4vLyBmcm9tIGEgcG9zaXRpb24gd291bGQgbGVhdmUgYSB0ZXh0IGJsb2NrLlxuZnVuY3Rpb24gZW5kT2ZUZXh0YmxvY2tWZXJ0aWNhbCh2aWV3LCBzdGF0ZSwgZGlyKSB7XG4gIHZhciBzZWwgPSBzdGF0ZS5zZWxlY3Rpb247XG4gIHZhciAkcG9zID0gZGlyID09IFwidXBcIiA/IHNlbC4kZnJvbSA6IHNlbC4kdG87XG4gIHJldHVybiB3aXRoRmx1c2hlZFN0YXRlKHZpZXcsIHN0YXRlLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlZiA9IHZpZXcuZG9jVmlldy5kb21Gcm9tUG9zKCRwb3MucG9zLCBkaXIgPT0gXCJ1cFwiID8gLTEgOiAxKTtcbiAgICB2YXIgZG9tID0gcmVmLm5vZGU7XG4gICAgZm9yICg7Oykge1xuICAgICAgdmFyIG5lYXJlc3QgPSB2aWV3LmRvY1ZpZXcubmVhcmVzdERlc2MoZG9tLCB0cnVlKTtcbiAgICAgIGlmICghbmVhcmVzdCkgeyBicmVhayB9XG4gICAgICBpZiAobmVhcmVzdC5ub2RlLmlzQmxvY2spIHsgZG9tID0gbmVhcmVzdC5kb207IGJyZWFrIH1cbiAgICAgIGRvbSA9IG5lYXJlc3QuZG9tLnBhcmVudE5vZGU7XG4gICAgfVxuICAgIHZhciBjb29yZHMgPSBjb29yZHNBdFBvcyh2aWV3LCAkcG9zLnBvcywgMSk7XG4gICAgZm9yICh2YXIgY2hpbGQgPSBkb20uZmlyc3RDaGlsZDsgY2hpbGQ7IGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmcpIHtcbiAgICAgIHZhciBib3hlcyA9ICh2b2lkIDApO1xuICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09IDEpIHsgYm94ZXMgPSBjaGlsZC5nZXRDbGllbnRSZWN0cygpOyB9XG4gICAgICBlbHNlIGlmIChjaGlsZC5ub2RlVHlwZSA9PSAzKSB7IGJveGVzID0gdGV4dFJhbmdlKGNoaWxkLCAwLCBjaGlsZC5ub2RlVmFsdWUubGVuZ3RoKS5nZXRDbGllbnRSZWN0cygpOyB9XG4gICAgICBlbHNlIHsgY29udGludWUgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYm94ID0gYm94ZXNbaV07XG4gICAgICAgIGlmIChib3guYm90dG9tID4gYm94LnRvcCArIDEgJiZcbiAgICAgICAgICAgIChkaXIgPT0gXCJ1cFwiID8gY29vcmRzLnRvcCAtIGJveC50b3AgPiAoYm94LmJvdHRvbSAtIGNvb3Jkcy50b3ApICogMlxuICAgICAgICAgICAgIDogYm94LmJvdHRvbSAtIGNvb3Jkcy5ib3R0b20gPiAoY29vcmRzLmJvdHRvbSAtIGJveC50b3ApICogMikpXG4gICAgICAgICAgeyByZXR1cm4gZmFsc2UgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9KVxufVxuXG52YXIgbWF5YmVSVEwgPSAvW1xcdTA1OTAtXFx1MDhhY10vO1xuXG5mdW5jdGlvbiBlbmRPZlRleHRibG9ja0hvcml6b250YWwodmlldywgc3RhdGUsIGRpcikge1xuICB2YXIgcmVmID0gc3RhdGUuc2VsZWN0aW9uO1xuICB2YXIgJGhlYWQgPSByZWYuJGhlYWQ7XG4gIGlmICghJGhlYWQucGFyZW50LmlzVGV4dGJsb2NrKSB7IHJldHVybiBmYWxzZSB9XG4gIHZhciBvZmZzZXQgPSAkaGVhZC5wYXJlbnRPZmZzZXQsIGF0U3RhcnQgPSAhb2Zmc2V0LCBhdEVuZCA9IG9mZnNldCA9PSAkaGVhZC5wYXJlbnQuY29udGVudC5zaXplO1xuICB2YXIgc2VsID0gdmlldy5yb290LmdldFNlbGVjdGlvbigpO1xuICAvLyBJZiB0aGUgdGV4dGJsb2NrIGlzIGFsbCBMVFIsIG9yIHRoZSBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydFxuICAvLyBTZWxlY3Rpb24ubW9kaWZ5IChFZGdlKSwgZmFsbCBiYWNrIHRvIGEgcHJpbWl0aXZlIGFwcHJvYWNoXG4gIGlmICghbWF5YmVSVEwudGVzdCgkaGVhZC5wYXJlbnQudGV4dENvbnRlbnQpIHx8ICFzZWwubW9kaWZ5KVxuICAgIHsgcmV0dXJuIGRpciA9PSBcImxlZnRcIiB8fCBkaXIgPT0gXCJiYWNrd2FyZFwiID8gYXRTdGFydCA6IGF0RW5kIH1cblxuICByZXR1cm4gd2l0aEZsdXNoZWRTdGF0ZSh2aWV3LCBzdGF0ZSwgZnVuY3Rpb24gKCkge1xuICAgIC8vIFRoaXMgaXMgYSBodWdlIGhhY2ssIGJ1dCBhcHBlYXJzIHRvIGJlIHRoZSBiZXN0IHdlIGNhblxuICAgIC8vIGN1cnJlbnRseSBkbzogdXNlIGBTZWxlY3Rpb24ubW9kaWZ5YCB0byBtb3ZlIHRoZSBzZWxlY3Rpb24gYnlcbiAgICAvLyBvbmUgY2hhcmFjdGVyLCBhbmQgc2VlIGlmIHRoYXQgbW92ZXMgdGhlIGN1cnNvciBvdXQgb2YgdGhlXG4gICAgLy8gdGV4dGJsb2NrIChvciBkb2Vzbid0IG1vdmUgaXQgYXQgYWxsLCB3aGVuIGF0IHRoZSBzdGFydC9lbmQgb2ZcbiAgICAvLyB0aGUgZG9jdW1lbnQpLlxuICAgIHZhciBvbGRSYW5nZSA9IHNlbC5nZXRSYW5nZUF0KDApLCBvbGROb2RlID0gc2VsLmZvY3VzTm9kZSwgb2xkT2ZmID0gc2VsLmZvY3VzT2Zmc2V0O1xuICAgIHZhciBvbGRCaWRpTGV2ZWwgPSBzZWwuY2FyZXRCaWRpTGV2ZWw7IC8vIE9ubHkgZm9yIEZpcmVmb3hcbiAgICBzZWwubW9kaWZ5KFwibW92ZVwiLCBkaXIsIFwiY2hhcmFjdGVyXCIpO1xuICAgIHZhciBwYXJlbnRET00gPSAkaGVhZC5kZXB0aCA/IHZpZXcuZG9jVmlldy5kb21BZnRlclBvcygkaGVhZC5iZWZvcmUoKSkgOiB2aWV3LmRvbTtcbiAgICB2YXIgcmVzdWx0ID0gIXBhcmVudERPTS5jb250YWlucyhzZWwuZm9jdXNOb2RlLm5vZGVUeXBlID09IDEgPyBzZWwuZm9jdXNOb2RlIDogc2VsLmZvY3VzTm9kZS5wYXJlbnROb2RlKSB8fFxuICAgICAgICAob2xkTm9kZSA9PSBzZWwuZm9jdXNOb2RlICYmIG9sZE9mZiA9PSBzZWwuZm9jdXNPZmZzZXQpO1xuICAgIC8vIFJlc3RvcmUgdGhlIHByZXZpb3VzIHNlbGVjdGlvblxuICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICBzZWwuYWRkUmFuZ2Uob2xkUmFuZ2UpO1xuICAgIGlmIChvbGRCaWRpTGV2ZWwgIT0gbnVsbCkgeyBzZWwuY2FyZXRCaWRpTGV2ZWwgPSBvbGRCaWRpTGV2ZWw7IH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH0pXG59XG5cbnZhciBjYWNoZWRTdGF0ZSA9IG51bGwsIGNhY2hlZERpciA9IG51bGwsIGNhY2hlZFJlc3VsdCA9IGZhbHNlO1xuZnVuY3Rpb24gZW5kT2ZUZXh0YmxvY2sodmlldywgc3RhdGUsIGRpcikge1xuICBpZiAoY2FjaGVkU3RhdGUgPT0gc3RhdGUgJiYgY2FjaGVkRGlyID09IGRpcikgeyByZXR1cm4gY2FjaGVkUmVzdWx0IH1cbiAgY2FjaGVkU3RhdGUgPSBzdGF0ZTsgY2FjaGVkRGlyID0gZGlyO1xuICByZXR1cm4gY2FjaGVkUmVzdWx0ID0gZGlyID09IFwidXBcIiB8fCBkaXIgPT0gXCJkb3duXCJcbiAgICA/IGVuZE9mVGV4dGJsb2NrVmVydGljYWwodmlldywgc3RhdGUsIGRpcilcbiAgICA6IGVuZE9mVGV4dGJsb2NrSG9yaXpvbnRhbCh2aWV3LCBzdGF0ZSwgZGlyKVxufVxuXG4vLyBOb2RlVmlldzo6IGludGVyZmFjZVxuLy9cbi8vIEJ5IGRlZmF1bHQsIGRvY3VtZW50IG5vZGVzIGFyZSByZW5kZXJlZCB1c2luZyB0aGUgcmVzdWx0IG9mIHRoZVxuLy8gW2B0b0RPTWBdKCNtb2RlbC5Ob2RlU3BlYy50b0RPTSkgbWV0aG9kIG9mIHRoZWlyIHNwZWMsIGFuZCBtYW5hZ2VkXG4vLyBlbnRpcmVseSBieSB0aGUgZWRpdG9yLiBGb3Igc29tZSB1c2UgY2FzZXMsIHN1Y2ggYXMgZW1iZWRkZWRcbi8vIG5vZGUtc3BlY2lmaWMgZWRpdGluZyBpbnRlcmZhY2VzLCB5b3Ugd2FudCBtb3JlIGNvbnRyb2wgb3ZlclxuLy8gdGhlIGJlaGF2aW9yIG9mIGEgbm9kZSdzIGluLWVkaXRvciByZXByZXNlbnRhdGlvbiwgYW5kIG5lZWQgdG9cbi8vIFtkZWZpbmVdKCN2aWV3LkVkaXRvclByb3BzLm5vZGVWaWV3cykgYSBjdXN0b20gbm9kZSB2aWV3LlxuLy9cbi8vIE1hcmsgdmlld3Mgb25seSBzdXBwb3J0IGBkb21gIGFuZCBgY29udGVudERPTWAsIGFuZCBkb24ndCBzdXBwb3J0XG4vLyBhbnkgb2YgdGhlIG5vZGUgdmlldyBtZXRob2RzLlxuLy9cbi8vIE9iamVjdHMgcmV0dXJuZWQgYXMgbm9kZSB2aWV3cyBtdXN0IGNvbmZvcm0gdG8gdGhpcyBpbnRlcmZhY2UuXG4vL1xuLy8gICBkb206OiA/ZG9tLk5vZGVcbi8vICAgVGhlIG91dGVyIERPTSBub2RlIHRoYXQgcmVwcmVzZW50cyB0aGUgZG9jdW1lbnQgbm9kZS4gV2hlbiBub3Rcbi8vICAgZ2l2ZW4sIHRoZSBkZWZhdWx0IHN0cmF0ZWd5IGlzIHVzZWQgdG8gY3JlYXRlIGEgRE9NIG5vZGUuXG4vL1xuLy8gICBjb250ZW50RE9NOjogP2RvbS5Ob2RlXG4vLyAgIFRoZSBET00gbm9kZSB0aGF0IHNob3VsZCBob2xkIHRoZSBub2RlJ3MgY29udGVudC4gT25seSBtZWFuaW5nZnVsXG4vLyAgIGlmIHRoZSBub2RlIHZpZXcgYWxzbyBkZWZpbmVzIGEgYGRvbWAgcHJvcGVydHkgYW5kIGlmIGl0cyBub2RlXG4vLyAgIHR5cGUgaXMgbm90IGEgbGVhZiBub2RlIHR5cGUuIFdoZW4gdGhpcyBpcyBwcmVzZW50LCBQcm9zZU1pcnJvclxuLy8gICB3aWxsIHRha2UgY2FyZSBvZiByZW5kZXJpbmcgdGhlIG5vZGUncyBjaGlsZHJlbiBpbnRvIGl0LiBXaGVuIGl0XG4vLyAgIGlzIG5vdCBwcmVzZW50LCB0aGUgbm9kZSB2aWV3IGl0c2VsZiBpcyByZXNwb25zaWJsZSBmb3IgcmVuZGVyaW5nXG4vLyAgIChvciBkZWNpZGluZyBub3QgdG8gcmVuZGVyKSBpdHMgY2hpbGQgbm9kZXMuXG4vL1xuLy8gICB1cGRhdGU6OiA/KG5vZGU6IE5vZGUsIGRlY29yYXRpb25zOiBbRGVjb3JhdGlvbl0sIGlubmVyRGVjb3JhdGlvbnM6IERlY29yYXRpb25Tb3VyY2UpIOKGkiBib29sXG4vLyAgIFdoZW4gZ2l2ZW4sIHRoaXMgd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgdmlldyBpcyB1cGRhdGluZyBpdHNlbGYuXG4vLyAgIEl0IHdpbGwgYmUgZ2l2ZW4gYSBub2RlIChwb3NzaWJseSBvZiBhIGRpZmZlcmVudCB0eXBlKSwgYW4gYXJyYXlcbi8vICAgb2YgYWN0aXZlIGRlY29yYXRpb25zIGFyb3VuZCB0aGUgbm9kZSAod2hpY2ggYXJlIGF1dG9tYXRpY2FsbHlcbi8vICAgZHJhd24sIGFuZCB0aGUgbm9kZSB2aWV3IG1heSBpZ25vcmUgaWYgaXQgaXNuJ3QgaW50ZXJlc3RlZCBpblxuLy8gICB0aGVtKSwgYW5kIGEgW2RlY29yYXRpb24gc291cmNlXSgjdmlldy5EZWNvcmF0aW9uU291cmNlKSB0aGF0XG4vLyAgIHJlcHJlc2VudHMgYW55IGRlY29yYXRpb25zIHRoYXQgYXBwbHkgdG8gdGhlIGNvbnRlbnQgb2YgdGhlIG5vZGVcbi8vICAgKHdoaWNoIGFnYWluIG1heSBiZSBpZ25vcmVkKS4gSXQgc2hvdWxkIHJldHVybiB0cnVlIGlmIGl0IHdhc1xuLy8gICBhYmxlIHRvIHVwZGF0ZSB0byB0aGF0IG5vZGUsIGFuZCBmYWxzZSBvdGhlcndpc2UuIElmIHRoZSBub2RlXG4vLyAgIHZpZXcgaGFzIGEgYGNvbnRlbnRET01gIHByb3BlcnR5IChvciBubyBgZG9tYCBwcm9wZXJ0eSksIHVwZGF0aW5nXG4vLyAgIGl0cyBjaGlsZCBub2RlcyB3aWxsIGJlIGhhbmRsZWQgYnkgUHJvc2VNaXJyb3IuXG4vL1xuLy8gICBzZWxlY3ROb2RlOjogPygpXG4vLyAgIENhbiBiZSB1c2VkIHRvIG92ZXJyaWRlIHRoZSB3YXkgdGhlIG5vZGUncyBzZWxlY3RlZCBzdGF0dXMgKGFzIGFcbi8vICAgbm9kZSBzZWxlY3Rpb24pIGlzIGRpc3BsYXllZC5cbi8vXG4vLyAgIGRlc2VsZWN0Tm9kZTo6ID8oKVxuLy8gICBXaGVuIGRlZmluaW5nIGEgYHNlbGVjdE5vZGVgIG1ldGhvZCwgeW91IHNob3VsZCBhbHNvIHByb3ZpZGUgYVxuLy8gICBgZGVzZWxlY3ROb2RlYCBtZXRob2QgdG8gcmVtb3ZlIHRoZSBlZmZlY3QgYWdhaW4uXG4vL1xuLy8gICBzZXRTZWxlY3Rpb246OiA/KGFuY2hvcjogbnVtYmVyLCBoZWFkOiBudW1iZXIsIHJvb3Q6IGRvbS5Eb2N1bWVudClcbi8vICAgVGhpcyB3aWxsIGJlIGNhbGxlZCB0byBoYW5kbGUgc2V0dGluZyB0aGUgc2VsZWN0aW9uIGluc2lkZSB0aGVcbi8vICAgbm9kZS4gVGhlIGBhbmNob3JgIGFuZCBgaGVhZGAgcG9zaXRpb25zIGFyZSByZWxhdGl2ZSB0byB0aGUgc3RhcnRcbi8vICAgb2YgdGhlIG5vZGUuIEJ5IGRlZmF1bHQsIGEgRE9NIHNlbGVjdGlvbiB3aWxsIGJlIGNyZWF0ZWQgYmV0d2VlblxuLy8gICB0aGUgRE9NIHBvc2l0aW9ucyBjb3JyZXNwb25kaW5nIHRvIHRob3NlIHBvc2l0aW9ucywgYnV0IGlmIHlvdVxuLy8gICBvdmVycmlkZSBpdCB5b3UgY2FuIGRvIHNvbWV0aGluZyBlbHNlLlxuLy9cbi8vICAgc3RvcEV2ZW50OjogPyhldmVudDogZG9tLkV2ZW50KSDihpIgYm9vbFxuLy8gICBDYW4gYmUgdXNlZCB0byBwcmV2ZW50IHRoZSBlZGl0b3IgdmlldyBmcm9tIHRyeWluZyB0byBoYW5kbGUgc29tZVxuLy8gICBvciBhbGwgRE9NIGV2ZW50cyB0aGF0IGJ1YmJsZSB1cCBmcm9tIHRoZSBub2RlIHZpZXcuIEV2ZW50cyBmb3Jcbi8vICAgd2hpY2ggdGhpcyByZXR1cm5zIHRydWUgYXJlIG5vdCBoYW5kbGVkIGJ5IHRoZSBlZGl0b3IuXG4vL1xuLy8gICBpZ25vcmVNdXRhdGlvbjo6ID8oZG9tLk11dGF0aW9uUmVjb3JkKSDihpIgYm9vbFxuLy8gICBDYWxsZWQgd2hlbiBhIERPTVxuLy8gICBbbXV0YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9NdXRhdGlvbk9ic2VydmVyKVxuLy8gICBvciBhIHNlbGVjdGlvbiBjaGFuZ2UgaGFwcGVucyB3aXRoaW4gdGhlIHZpZXcuIFdoZW4gdGhlIGNoYW5nZSBpc1xuLy8gICBhIHNlbGVjdGlvbiBjaGFuZ2UsIHRoZSByZWNvcmQgd2lsbCBoYXZlIGEgYHR5cGVgIHByb3BlcnR5IG9mXG4vLyAgIGBcInNlbGVjdGlvblwiYCAod2hpY2ggZG9lc24ndCBvY2N1ciBmb3IgbmF0aXZlIG11dGF0aW9uIHJlY29yZHMpLlxuLy8gICBSZXR1cm4gZmFsc2UgaWYgdGhlIGVkaXRvciBzaG91bGQgcmUtcmVhZCB0aGUgc2VsZWN0aW9uIG9yXG4vLyAgIHJlLXBhcnNlIHRoZSByYW5nZSBhcm91bmQgdGhlIG11dGF0aW9uLCB0cnVlIGlmIGl0IGNhbiBzYWZlbHkgYmVcbi8vICAgaWdub3JlZC5cbi8vXG4vLyAgIGRlc3Ryb3k6OiA/KClcbi8vICAgQ2FsbGVkIHdoZW4gdGhlIG5vZGUgdmlldyBpcyByZW1vdmVkIGZyb20gdGhlIGVkaXRvciBvciB0aGUgd2hvbGVcbi8vICAgZWRpdG9yIGlzIGRlc3Ryb3llZC4gKE5vdCBhdmFpbGFibGUgZm9yIG1hcmtzLilcblxuLy8gVmlldyBkZXNjcmlwdGlvbnMgYXJlIGRhdGEgc3RydWN0dXJlcyB0aGF0IGRlc2NyaWJlIHRoZSBET00gdGhhdCBpc1xuLy8gdXNlZCB0byByZXByZXNlbnQgdGhlIGVkaXRvcidzIGNvbnRlbnQuIFRoZXkgYXJlIHVzZWQgZm9yOlxuLy9cbi8vIC0gSW5jcmVtZW50YWwgcmVkcmF3aW5nIHdoZW4gdGhlIGRvY3VtZW50IGNoYW5nZXNcbi8vXG4vLyAtIEZpZ3VyaW5nIG91dCB3aGF0IHBhcnQgb2YgdGhlIGRvY3VtZW50IGEgZ2l2ZW4gRE9NIHBvc2l0aW9uXG4vLyAgIGNvcnJlc3BvbmRzIHRvXG4vL1xuLy8gLSBXaXJpbmcgaW4gY3VzdG9tIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgZWRpdGluZyBpbnRlcmZhY2UgZm9yIGFcbi8vICAgZ2l2ZW4gbm9kZVxuLy9cbi8vIFRoZXkgZm9ybSBhIGRvdWJseS1saW5rZWQgbXV0YWJsZSB0cmVlLCBzdGFydGluZyBhdCBgdmlldy5kb2NWaWV3YC5cblxudmFyIE5PVF9ESVJUWSA9IDAsIENISUxEX0RJUlRZID0gMSwgQ09OVEVOVF9ESVJUWSA9IDIsIE5PREVfRElSVFkgPSAzO1xuXG4vLyBTdXBlcmNsYXNzIGZvciB0aGUgdmFyaW91cyBraW5kcyBvZiBkZXNjcmlwdGlvbnMuIERlZmluZXMgdGhlaXJcbi8vIGJhc2ljIHN0cnVjdHVyZSBhbmQgc2hhcmVkIG1ldGhvZHMuXG52YXIgVmlld0Rlc2MgPSBmdW5jdGlvbiBWaWV3RGVzYyhwYXJlbnQsIGNoaWxkcmVuLCBkb20sIGNvbnRlbnRET00pIHtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy5kb20gPSBkb207XG4gIC8vIEFuIGV4cGFuZG8gcHJvcGVydHkgb24gdGhlIERPTSBub2RlIHByb3ZpZGVzIGEgbGluayBiYWNrIHRvIGl0c1xuICAvLyBkZXNjcmlwdGlvbi5cbiAgZG9tLnBtVmlld0Rlc2MgPSB0aGlzO1xuICAvLyBUaGlzIGlzIHRoZSBub2RlIHRoYXQgaG9sZHMgdGhlIGNoaWxkIHZpZXdzLiBJdCBtYXkgYmUgbnVsbCBmb3JcbiAgLy8gZGVzY3MgdGhhdCBkb24ndCBoYXZlIGNoaWxkcmVuLlxuICB0aGlzLmNvbnRlbnRET00gPSBjb250ZW50RE9NO1xuICB0aGlzLmRpcnR5ID0gTk9UX0RJUlRZO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgc2l6ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSxib3JkZXI6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0scG9zQmVmb3JlOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LHBvc0F0U3RhcnQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0scG9zQWZ0ZXI6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0scG9zQXRFbmQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sY29udGVudExvc3Q6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sZG9tQXRvbTogeyBjb25maWd1cmFibGU6IHRydWUgfSxpZ25vcmVGb3JDb29yZHM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuLy8gVXNlZCB0byBjaGVjayB3aGV0aGVyIGEgZ2l2ZW4gZGVzY3JpcHRpb24gY29ycmVzcG9uZHMgdG8gYVxuLy8gd2lkZ2V0L21hcmsvbm9kZS5cblZpZXdEZXNjLnByb3RvdHlwZS5tYXRjaGVzV2lkZ2V0ID0gZnVuY3Rpb24gbWF0Y2hlc1dpZGdldCAoKSB7IHJldHVybiBmYWxzZSB9O1xuVmlld0Rlc2MucHJvdG90eXBlLm1hdGNoZXNNYXJrID0gZnVuY3Rpb24gbWF0Y2hlc01hcmsgKCkgeyByZXR1cm4gZmFsc2UgfTtcblZpZXdEZXNjLnByb3RvdHlwZS5tYXRjaGVzTm9kZSA9IGZ1bmN0aW9uIG1hdGNoZXNOb2RlICgpIHsgcmV0dXJuIGZhbHNlIH07XG5WaWV3RGVzYy5wcm90b3R5cGUubWF0Y2hlc0hhY2sgPSBmdW5jdGlvbiBtYXRjaGVzSGFjayAoX25vZGVOYW1lKSB7IHJldHVybiBmYWxzZSB9O1xuXG4vLyA6ICgpIOKGkiA/UGFyc2VSdWxlXG4vLyBXaGVuIHBhcnNpbmcgaW4tZWRpdG9yIGNvbnRlbnQgKGluIGRvbWNoYW5nZS5qcyksIHdlIGFsbG93XG4vLyBkZXNjcmlwdGlvbnMgdG8gZGV0ZXJtaW5lIHRoZSBwYXJzZSBydWxlcyB0aGF0IHNob3VsZCBiZSB1c2VkIHRvXG4vLyBwYXJzZSB0aGVtLlxuVmlld0Rlc2MucHJvdG90eXBlLnBhcnNlUnVsZSA9IGZ1bmN0aW9uIHBhcnNlUnVsZSAoKSB7IHJldHVybiBudWxsIH07XG5cbi8vIDogKGRvbS5FdmVudCkg4oaSIGJvb2xcbi8vIFVzZWQgYnkgdGhlIGVkaXRvcidzIGV2ZW50IGhhbmRsZXIgdG8gaWdub3JlIGV2ZW50cyB0aGF0IGNvbWVcbi8vIGZyb20gY2VydGFpbiBkZXNjcy5cblZpZXdEZXNjLnByb3RvdHlwZS5zdG9wRXZlbnQgPSBmdW5jdGlvbiBzdG9wRXZlbnQgKCkgeyByZXR1cm4gZmFsc2UgfTtcblxuLy8gVGhlIHNpemUgb2YgdGhlIGNvbnRlbnQgcmVwcmVzZW50ZWQgYnkgdGhpcyBkZXNjLlxucHJvdG90eXBlQWNjZXNzb3JzLnNpemUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc2l6ZSA9IDA7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykgeyBzaXplICs9IHRoaXMuY2hpbGRyZW5baV0uc2l6ZTsgfVxuICByZXR1cm4gc2l6ZVxufTtcblxuLy8gRm9yIGJsb2NrIG5vZGVzLCB0aGlzIHJlcHJlc2VudHMgdGhlIHNwYWNlIHRha2VuIHVwIGJ5IHRoZWlyXG4vLyBzdGFydC9lbmQgdG9rZW5zLlxucHJvdG90eXBlQWNjZXNzb3JzLmJvcmRlci5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAwIH07XG5cblZpZXdEZXNjLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gIHRoaXMucGFyZW50ID0gbnVsbDtcbiAgaWYgKHRoaXMuZG9tLnBtVmlld0Rlc2MgPT0gdGhpcykgeyB0aGlzLmRvbS5wbVZpZXdEZXNjID0gbnVsbDsgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspXG4gICAgeyB0aGlzLmNoaWxkcmVuW2ldLmRlc3Ryb3koKTsgfVxufTtcblxuVmlld0Rlc2MucHJvdG90eXBlLnBvc0JlZm9yZUNoaWxkID0gZnVuY3Rpb24gcG9zQmVmb3JlQ2hpbGQgKGNoaWxkKSB7XG4gIGZvciAodmFyIGkgPSAwLCBwb3MgPSB0aGlzLnBvc0F0U3RhcnQ7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGN1ciA9IHRoaXMuY2hpbGRyZW5baV07XG4gICAgaWYgKGN1ciA9PSBjaGlsZCkgeyByZXR1cm4gcG9zIH1cbiAgICBwb3MgKz0gY3VyLnNpemU7XG4gIH1cbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5wb3NCZWZvcmUuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnQucG9zQmVmb3JlQ2hpbGQodGhpcylcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5wb3NBdFN0YXJ0LmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQucG9zQmVmb3JlQ2hpbGQodGhpcykgKyB0aGlzLmJvcmRlciA6IDBcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5wb3NBZnRlci5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLnBvc0JlZm9yZSArIHRoaXMuc2l6ZVxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLnBvc0F0RW5kLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMucG9zQXRTdGFydCArIHRoaXMuc2l6ZSAtIDIgKiB0aGlzLmJvcmRlclxufTtcblxuLy8gOiAoZG9tLk5vZGUsIG51bWJlciwgP251bWJlcikg4oaSIG51bWJlclxuVmlld0Rlc2MucHJvdG90eXBlLmxvY2FsUG9zRnJvbURPTSA9IGZ1bmN0aW9uIGxvY2FsUG9zRnJvbURPTSAoZG9tLCBvZmZzZXQsIGJpYXMpIHtcbiAgLy8gSWYgdGhlIERPTSBwb3NpdGlvbiBpcyBpbiB0aGUgY29udGVudCwgdXNlIHRoZSBjaGlsZCBkZXNjIGFmdGVyXG4gIC8vIGl0IHRvIGZpZ3VyZSBvdXQgYSBwb3NpdGlvbi5cbiAgaWYgKHRoaXMuY29udGVudERPTSAmJiB0aGlzLmNvbnRlbnRET00uY29udGFpbnMoZG9tLm5vZGVUeXBlID09IDEgPyBkb20gOiBkb20ucGFyZW50Tm9kZSkpIHtcbiAgICBpZiAoYmlhcyA8IDApIHtcbiAgICAgIHZhciBkb21CZWZvcmUsIGRlc2M7XG4gICAgICBpZiAoZG9tID09IHRoaXMuY29udGVudERPTSkge1xuICAgICAgICBkb21CZWZvcmUgPSBkb20uY2hpbGROb2Rlc1tvZmZzZXQgLSAxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdoaWxlIChkb20ucGFyZW50Tm9kZSAhPSB0aGlzLmNvbnRlbnRET00pIHsgZG9tID0gZG9tLnBhcmVudE5vZGU7IH1cbiAgICAgICAgZG9tQmVmb3JlID0gZG9tLnByZXZpb3VzU2libGluZztcbiAgICAgIH1cbiAgICAgIHdoaWxlIChkb21CZWZvcmUgJiYgISgoZGVzYyA9IGRvbUJlZm9yZS5wbVZpZXdEZXNjKSAmJiBkZXNjLnBhcmVudCA9PSB0aGlzKSkgeyBkb21CZWZvcmUgPSBkb21CZWZvcmUucHJldmlvdXNTaWJsaW5nOyB9XG4gICAgICByZXR1cm4gZG9tQmVmb3JlID8gdGhpcy5wb3NCZWZvcmVDaGlsZChkZXNjKSArIGRlc2Muc2l6ZSA6IHRoaXMucG9zQXRTdGFydFxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZG9tQWZ0ZXIsIGRlc2MkMTtcbiAgICAgIGlmIChkb20gPT0gdGhpcy5jb250ZW50RE9NKSB7XG4gICAgICAgIGRvbUFmdGVyID0gZG9tLmNoaWxkTm9kZXNbb2Zmc2V0XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdoaWxlIChkb20ucGFyZW50Tm9kZSAhPSB0aGlzLmNvbnRlbnRET00pIHsgZG9tID0gZG9tLnBhcmVudE5vZGU7IH1cbiAgICAgICAgZG9tQWZ0ZXIgPSBkb20ubmV4dFNpYmxpbmc7XG4gICAgICB9XG4gICAgICB3aGlsZSAoZG9tQWZ0ZXIgJiYgISgoZGVzYyQxID0gZG9tQWZ0ZXIucG1WaWV3RGVzYykgJiYgZGVzYyQxLnBhcmVudCA9PSB0aGlzKSkgeyBkb21BZnRlciA9IGRvbUFmdGVyLm5leHRTaWJsaW5nOyB9XG4gICAgICByZXR1cm4gZG9tQWZ0ZXIgPyB0aGlzLnBvc0JlZm9yZUNoaWxkKGRlc2MkMSkgOiB0aGlzLnBvc0F0RW5kXG4gICAgfVxuICB9XG4gIC8vIE90aGVyd2lzZSwgdXNlIHZhcmlvdXMgaGV1cmlzdGljcywgZmFsbGluZyBiYWNrIG9uIHRoZSBiaWFzXG4gIC8vIHBhcmFtZXRlciwgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcmV0dXJuIHRoZSBwb3NpdGlvbiBhdCB0aGVcbiAgLy8gc3RhcnQgb3IgYXQgdGhlIGVuZCBvZiB0aGlzIHZpZXcgZGVzYy5cbiAgdmFyIGF0RW5kO1xuICBpZiAoZG9tID09IHRoaXMuZG9tICYmIHRoaXMuY29udGVudERPTSkge1xuICAgIGF0RW5kID0gb2Zmc2V0ID4gZG9tSW5kZXgodGhpcy5jb250ZW50RE9NKTtcbiAgfSBlbHNlIGlmICh0aGlzLmNvbnRlbnRET00gJiYgdGhpcy5jb250ZW50RE9NICE9IHRoaXMuZG9tICYmIHRoaXMuZG9tLmNvbnRhaW5zKHRoaXMuY29udGVudERPTSkpIHtcbiAgICBhdEVuZCA9IGRvbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0aGlzLmNvbnRlbnRET00pICYgMjtcbiAgfSBlbHNlIGlmICh0aGlzLmRvbS5maXJzdENoaWxkKSB7XG4gICAgaWYgKG9mZnNldCA9PSAwKSB7IGZvciAodmFyIHNlYXJjaCA9IGRvbTs7IHNlYXJjaCA9IHNlYXJjaC5wYXJlbnROb2RlKSB7XG4gICAgICBpZiAoc2VhcmNoID09IHRoaXMuZG9tKSB7IGF0RW5kID0gZmFsc2U7IGJyZWFrIH1cbiAgICAgIGlmIChzZWFyY2gucGFyZW50Tm9kZS5maXJzdENoaWxkICE9IHNlYXJjaCkgeyBicmVhayB9XG4gICAgfSB9XG4gICAgaWYgKGF0RW5kID09IG51bGwgJiYgb2Zmc2V0ID09IGRvbS5jaGlsZE5vZGVzLmxlbmd0aCkgeyBmb3IgKHZhciBzZWFyY2gkMSA9IGRvbTs7IHNlYXJjaCQxID0gc2VhcmNoJDEucGFyZW50Tm9kZSkge1xuICAgICAgaWYgKHNlYXJjaCQxID09IHRoaXMuZG9tKSB7IGF0RW5kID0gdHJ1ZTsgYnJlYWsgfVxuICAgICAgaWYgKHNlYXJjaCQxLnBhcmVudE5vZGUubGFzdENoaWxkICE9IHNlYXJjaCQxKSB7IGJyZWFrIH1cbiAgICB9IH1cbiAgfVxuICByZXR1cm4gKGF0RW5kID09IG51bGwgPyBiaWFzID4gMCA6IGF0RW5kKSA/IHRoaXMucG9zQXRFbmQgOiB0aGlzLnBvc0F0U3RhcnRcbn07XG5cbi8vIFNjYW4gdXAgdGhlIGRvbSBmaW5kaW5nIHRoZSBmaXJzdCBkZXNjIHRoYXQgaXMgYSBkZXNjZW5kYW50IG9mXG4vLyB0aGlzIG9uZS5cblZpZXdEZXNjLnByb3RvdHlwZS5uZWFyZXN0RGVzYyA9IGZ1bmN0aW9uIG5lYXJlc3REZXNjIChkb20sIG9ubHlOb2Rlcykge1xuICBmb3IgKHZhciBmaXJzdCA9IHRydWUsIGN1ciA9IGRvbTsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSkge1xuICAgIHZhciBkZXNjID0gdGhpcy5nZXREZXNjKGN1cik7XG4gICAgaWYgKGRlc2MgJiYgKCFvbmx5Tm9kZXMgfHwgZGVzYy5ub2RlKSkge1xuICAgICAgLy8gSWYgZG9tIGlzIG91dHNpZGUgb2YgdGhpcyBkZXNjJ3Mgbm9kZURPTSwgZG9uJ3QgY291bnQgaXQuXG4gICAgICBpZiAoZmlyc3QgJiYgZGVzYy5ub2RlRE9NICYmXG4gICAgICAgICAgIShkZXNjLm5vZGVET00ubm9kZVR5cGUgPT0gMSA/IGRlc2Mubm9kZURPTS5jb250YWlucyhkb20ubm9kZVR5cGUgPT0gMSA/IGRvbSA6IGRvbS5wYXJlbnROb2RlKSA6IGRlc2Mubm9kZURPTSA9PSBkb20pKVxuICAgICAgICB7IGZpcnN0ID0gZmFsc2U7IH1cbiAgICAgIGVsc2VcbiAgICAgICAgeyByZXR1cm4gZGVzYyB9XG4gICAgfVxuICB9XG59O1xuXG5WaWV3RGVzYy5wcm90b3R5cGUuZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldERlc2MgKGRvbSkge1xuICB2YXIgZGVzYyA9IGRvbS5wbVZpZXdEZXNjO1xuICBmb3IgKHZhciBjdXIgPSBkZXNjOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnQpIHsgaWYgKGN1ciA9PSB0aGlzKSB7IHJldHVybiBkZXNjIH0gfVxufTtcblxuVmlld0Rlc2MucHJvdG90eXBlLnBvc0Zyb21ET00gPSBmdW5jdGlvbiBwb3NGcm9tRE9NIChkb20sIG9mZnNldCwgYmlhcykge1xuICBmb3IgKHZhciBzY2FuID0gZG9tOyBzY2FuOyBzY2FuID0gc2Nhbi5wYXJlbnROb2RlKSB7XG4gICAgdmFyIGRlc2MgPSB0aGlzLmdldERlc2Moc2Nhbik7XG4gICAgaWYgKGRlc2MpIHsgcmV0dXJuIGRlc2MubG9jYWxQb3NGcm9tRE9NKGRvbSwgb2Zmc2V0LCBiaWFzKSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59O1xuXG4vLyA6IChudW1iZXIpIOKGkiA/Tm9kZVZpZXdEZXNjXG4vLyBGaW5kIHRoZSBkZXNjIGZvciB0aGUgbm9kZSBhZnRlciB0aGUgZ2l2ZW4gcG9zLCBpZiBhbnkuIChXaGVuIGFcbi8vIHBhcmVudCBub2RlIG92ZXJyb2RlIHJlbmRlcmluZywgdGhlcmUgbWlnaHQgbm90IGJlIG9uZS4pXG5WaWV3RGVzYy5wcm90b3R5cGUuZGVzY0F0ID0gZnVuY3Rpb24gZGVzY0F0IChwb3MpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG9mZnNldCA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXSwgZW5kID0gb2Zmc2V0ICsgY2hpbGQuc2l6ZTtcbiAgICBpZiAob2Zmc2V0ID09IHBvcyAmJiBlbmQgIT0gb2Zmc2V0KSB7XG4gICAgICB3aGlsZSAoIWNoaWxkLmJvcmRlciAmJiBjaGlsZC5jaGlsZHJlbi5sZW5ndGgpIHsgY2hpbGQgPSBjaGlsZC5jaGlsZHJlblswXTsgfVxuICAgICAgcmV0dXJuIGNoaWxkXG4gICAgfVxuICAgIGlmIChwb3MgPCBlbmQpIHsgcmV0dXJuIGNoaWxkLmRlc2NBdChwb3MgLSBvZmZzZXQgLSBjaGlsZC5ib3JkZXIpIH1cbiAgICBvZmZzZXQgPSBlbmQ7XG4gIH1cbn07XG5cbi8vIDogKG51bWJlciwgbnVtYmVyKSDihpIge25vZGU6IGRvbS5Ob2RlLCBvZmZzZXQ6IG51bWJlcn1cblZpZXdEZXNjLnByb3RvdHlwZS5kb21Gcm9tUG9zID0gZnVuY3Rpb24gZG9tRnJvbVBvcyAocG9zLCBzaWRlKSB7XG4gIGlmICghdGhpcy5jb250ZW50RE9NKSB7IHJldHVybiB7bm9kZTogdGhpcy5kb20sIG9mZnNldDogMH0gfVxuICAvLyBGaXJzdCBmaW5kIHRoZSBwb3NpdGlvbiBpbiB0aGUgY2hpbGQgYXJyYXlcbiAgdmFyIGkgPSAwLCBvZmZzZXQgPSAwO1xuICBmb3IgKHZhciBjdXJQb3MgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV0sIGVuZCA9IGN1clBvcyArIGNoaWxkLnNpemU7XG4gICAgaWYgKGVuZCA+IHBvcyB8fCBjaGlsZCBpbnN0YW5jZW9mIFRyYWlsaW5nSGFja1ZpZXdEZXNjKSB7IG9mZnNldCA9IHBvcyAtIGN1clBvczsgYnJlYWsgfVxuICAgIGN1clBvcyA9IGVuZDtcbiAgfVxuICAvLyBJZiB0aGlzIHBvaW50cyBpbnRvIHRoZSBtaWRkbGUgb2YgYSBjaGlsZCwgY2FsbCB0aHJvdWdoXG4gIGlmIChvZmZzZXQpIHsgcmV0dXJuIHRoaXMuY2hpbGRyZW5baV0uZG9tRnJvbVBvcyhvZmZzZXQgLSB0aGlzLmNoaWxkcmVuW2ldLmJvcmRlciwgc2lkZSkgfVxuICAvLyBHbyBiYWNrIGlmIHRoZXJlIHdlcmUgYW55IHplcm8tbGVuZ3RoIHdpZGdldHMgd2l0aCBzaWRlID49IDAgYmVmb3JlIHRoaXMgcG9pbnRcbiAgZm9yICh2YXIgcHJldiA9ICh2b2lkIDApOyBpICYmICEocHJldiA9IHRoaXMuY2hpbGRyZW5baSAtIDFdKS5zaXplICYmIHByZXYgaW5zdGFuY2VvZiBXaWRnZXRWaWV3RGVzYyAmJiBwcmV2LndpZGdldC50eXBlLnNpZGUgPj0gMDsgaS0tKSB7fVxuICAvLyBTY2FuIHRvd2FyZHMgdGhlIGZpcnN0IHVzZWFibGUgbm9kZVxuICBpZiAoc2lkZSA8PSAwKSB7XG4gICAgdmFyIHByZXYkMSwgZW50ZXIgPSB0cnVlO1xuICAgIGZvciAoOzsgaS0tLCBlbnRlciA9IGZhbHNlKSB7XG4gICAgICBwcmV2JDEgPSBpID8gdGhpcy5jaGlsZHJlbltpIC0gMV0gOiBudWxsO1xuICAgICAgaWYgKCFwcmV2JDEgfHwgcHJldiQxLmRvbS5wYXJlbnROb2RlID09IHRoaXMuY29udGVudERPTSkgeyBicmVhayB9XG4gICAgfVxuICAgIGlmIChwcmV2JDEgJiYgc2lkZSAmJiBlbnRlciAmJiAhcHJldiQxLmJvcmRlciAmJiAhcHJldiQxLmRvbUF0b20pIHsgcmV0dXJuIHByZXYkMS5kb21Gcm9tUG9zKHByZXYkMS5zaXplLCBzaWRlKSB9XG4gICAgcmV0dXJuIHtub2RlOiB0aGlzLmNvbnRlbnRET00sIG9mZnNldDogcHJldiQxID8gZG9tSW5kZXgocHJldiQxLmRvbSkgKyAxIDogMH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgbmV4dCwgZW50ZXIkMSA9IHRydWU7XG4gICAgZm9yICg7OyBpKyssIGVudGVyJDEgPSBmYWxzZSkge1xuICAgICAgbmV4dCA9IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aCA/IHRoaXMuY2hpbGRyZW5baV0gOiBudWxsO1xuICAgICAgaWYgKCFuZXh0IHx8IG5leHQuZG9tLnBhcmVudE5vZGUgPT0gdGhpcy5jb250ZW50RE9NKSB7IGJyZWFrIH1cbiAgICB9XG4gICAgaWYgKG5leHQgJiYgZW50ZXIkMSAmJiAhbmV4dC5ib3JkZXIgJiYgIW5leHQuZG9tQXRvbSkgeyByZXR1cm4gbmV4dC5kb21Gcm9tUG9zKDAsIHNpZGUpIH1cbiAgICByZXR1cm4ge25vZGU6IHRoaXMuY29udGVudERPTSwgb2Zmc2V0OiBuZXh0ID8gZG9tSW5kZXgobmV4dC5kb20pIDogdGhpcy5jb250ZW50RE9NLmNoaWxkTm9kZXMubGVuZ3RofVxuICB9XG59O1xuXG4vLyBVc2VkIHRvIGZpbmQgYSBET00gcmFuZ2UgaW4gYSBzaW5nbGUgcGFyZW50IGZvciBhIGdpdmVuIGNoYW5nZWRcbi8vIHJhbmdlLlxuVmlld0Rlc2MucHJvdG90eXBlLnBhcnNlUmFuZ2UgPSBmdW5jdGlvbiBwYXJzZVJhbmdlIChmcm9tLCB0bywgYmFzZSkge1xuICAgIGlmICggYmFzZSA9PT0gdm9pZCAwICkgYmFzZSA9IDA7XG5cbiAgaWYgKHRoaXMuY2hpbGRyZW4ubGVuZ3RoID09IDApXG4gICAgeyByZXR1cm4ge25vZGU6IHRoaXMuY29udGVudERPTSwgZnJvbTogZnJvbSwgdG86IHRvLCBmcm9tT2Zmc2V0OiAwLCB0b09mZnNldDogdGhpcy5jb250ZW50RE9NLmNoaWxkTm9kZXMubGVuZ3RofSB9XG5cbiAgdmFyIGZyb21PZmZzZXQgPSAtMSwgdG9PZmZzZXQgPSAtMTtcbiAgZm9yICh2YXIgb2Zmc2V0ID0gYmFzZSwgaSA9IDA7OyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLmNoaWxkcmVuW2ldLCBlbmQgPSBvZmZzZXQgKyBjaGlsZC5zaXplO1xuICAgIGlmIChmcm9tT2Zmc2V0ID09IC0xICYmIGZyb20gPD0gZW5kKSB7XG4gICAgICB2YXIgY2hpbGRCYXNlID0gb2Zmc2V0ICsgY2hpbGQuYm9yZGVyO1xuICAgICAgLy8gRklYTUUgbWF5YmUgZGVzY2VuZCBtYXJrIHZpZXdzIHRvIHBhcnNlIGEgbmFycm93ZXIgcmFuZ2U/XG4gICAgICBpZiAoZnJvbSA+PSBjaGlsZEJhc2UgJiYgdG8gPD0gZW5kIC0gY2hpbGQuYm9yZGVyICYmIGNoaWxkLm5vZGUgJiZcbiAgICAgICAgICBjaGlsZC5jb250ZW50RE9NICYmIHRoaXMuY29udGVudERPTS5jb250YWlucyhjaGlsZC5jb250ZW50RE9NKSlcbiAgICAgICAgeyByZXR1cm4gY2hpbGQucGFyc2VSYW5nZShmcm9tLCB0bywgY2hpbGRCYXNlKSB9XG5cbiAgICAgIGZyb20gPSBvZmZzZXQ7XG4gICAgICBmb3IgKHZhciBqID0gaTsgaiA+IDA7IGotLSkge1xuICAgICAgICB2YXIgcHJldiA9IHRoaXMuY2hpbGRyZW5baiAtIDFdO1xuICAgICAgICBpZiAocHJldi5zaXplICYmIHByZXYuZG9tLnBhcmVudE5vZGUgPT0gdGhpcy5jb250ZW50RE9NICYmICFwcmV2LmVtcHR5Q2hpbGRBdCgxKSkge1xuICAgICAgICAgIGZyb21PZmZzZXQgPSBkb21JbmRleChwcmV2LmRvbSkgKyAxO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgZnJvbSAtPSBwcmV2LnNpemU7XG4gICAgICB9XG4gICAgICBpZiAoZnJvbU9mZnNldCA9PSAtMSkgeyBmcm9tT2Zmc2V0ID0gMDsgfVxuICAgIH1cbiAgICBpZiAoZnJvbU9mZnNldCA+IC0xICYmIChlbmQgPiB0byB8fCBpID09IHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMSkpIHtcbiAgICAgIHRvID0gZW5kO1xuICAgICAgZm9yICh2YXIgaiQxID0gaSArIDE7IGokMSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBqJDErKykge1xuICAgICAgICB2YXIgbmV4dCA9IHRoaXMuY2hpbGRyZW5baiQxXTtcbiAgICAgICAgaWYgKG5leHQuc2l6ZSAmJiBuZXh0LmRvbS5wYXJlbnROb2RlID09IHRoaXMuY29udGVudERPTSAmJiAhbmV4dC5lbXB0eUNoaWxkQXQoLTEpKSB7XG4gICAgICAgICAgdG9PZmZzZXQgPSBkb21JbmRleChuZXh0LmRvbSk7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICB0byArPSBuZXh0LnNpemU7XG4gICAgICB9XG4gICAgICBpZiAodG9PZmZzZXQgPT0gLTEpIHsgdG9PZmZzZXQgPSB0aGlzLmNvbnRlbnRET00uY2hpbGROb2Rlcy5sZW5ndGg7IH1cbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIG9mZnNldCA9IGVuZDtcbiAgfVxuICByZXR1cm4ge25vZGU6IHRoaXMuY29udGVudERPTSwgZnJvbTogZnJvbSwgdG86IHRvLCBmcm9tT2Zmc2V0OiBmcm9tT2Zmc2V0LCB0b09mZnNldDogdG9PZmZzZXR9XG59O1xuXG5WaWV3RGVzYy5wcm90b3R5cGUuZW1wdHlDaGlsZEF0ID0gZnVuY3Rpb24gZW1wdHlDaGlsZEF0IChzaWRlKSB7XG4gIGlmICh0aGlzLmJvcmRlciB8fCAhdGhpcy5jb250ZW50RE9NIHx8ICF0aGlzLmNoaWxkcmVuLmxlbmd0aCkgeyByZXR1cm4gZmFsc2UgfVxuICB2YXIgY2hpbGQgPSB0aGlzLmNoaWxkcmVuW3NpZGUgPCAwID8gMCA6IHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMV07XG4gIHJldHVybiBjaGlsZC5zaXplID09IDAgfHwgY2hpbGQuZW1wdHlDaGlsZEF0KHNpZGUpXG59O1xuXG4vLyA6IChudW1iZXIpIOKGkiBkb20uTm9kZVxuVmlld0Rlc2MucHJvdG90eXBlLmRvbUFmdGVyUG9zID0gZnVuY3Rpb24gZG9tQWZ0ZXJQb3MgKHBvcykge1xuICB2YXIgcmVmID0gdGhpcy5kb21Gcm9tUG9zKHBvcywgMCk7XG4gICAgdmFyIG5vZGUgPSByZWYubm9kZTtcbiAgICB2YXIgb2Zmc2V0ID0gcmVmLm9mZnNldDtcbiAgaWYgKG5vZGUubm9kZVR5cGUgIT0gMSB8fCBvZmZzZXQgPT0gbm9kZS5jaGlsZE5vZGVzLmxlbmd0aClcbiAgICB7IHRocm93IG5ldyBSYW5nZUVycm9yKFwiTm8gbm9kZSBhZnRlciBwb3MgXCIgKyBwb3MpIH1cbiAgcmV0dXJuIG5vZGUuY2hpbGROb2Rlc1tvZmZzZXRdXG59O1xuXG4vLyA6IChudW1iZXIsIG51bWJlciwgZG9tLkRvY3VtZW50KVxuLy8gVmlldyBkZXNjcyBhcmUgcmVzcG9uc2libGUgZm9yIHNldHRpbmcgYW55IHNlbGVjdGlvbiB0aGF0IGZhbGxzXG4vLyBlbnRpcmVseSBpbnNpZGUgb2YgdGhlbSwgc28gdGhhdCBjdXN0b20gaW1wbGVtZW50YXRpb25zIGNhbiBkb1xuLy8gY3VzdG9tIHRoaW5ncyB3aXRoIHRoZSBzZWxlY3Rpb24uIE5vdGUgdGhhdCB0aGlzIGZhbGxzIGFwYXJ0IHdoZW5cbi8vIGEgc2VsZWN0aW9uIHN0YXJ0cyBpbiBzdWNoIGEgbm9kZSBhbmQgZW5kcyBpbiBhbm90aGVyLCBpbiB3aGljaFxuLy8gY2FzZSB3ZSBqdXN0IHVzZSB3aGF0ZXZlciBkb21Gcm9tUG9zIHByb2R1Y2VzIGFzIGEgYmVzdCBlZmZvcnQuXG5WaWV3RGVzYy5wcm90b3R5cGUuc2V0U2VsZWN0aW9uID0gZnVuY3Rpb24gc2V0U2VsZWN0aW9uIChhbmNob3IsIGhlYWQsIHJvb3QsIGZvcmNlKSB7XG4gIC8vIElmIHRoZSBzZWxlY3Rpb24gZmFsbHMgZW50aXJlbHkgaW4gYSBjaGlsZCwgZ2l2ZSBpdCB0byB0aGF0IGNoaWxkXG4gIHZhciBmcm9tID0gTWF0aC5taW4oYW5jaG9yLCBoZWFkKSwgdG8gPSBNYXRoLm1heChhbmNob3IsIGhlYWQpO1xuICBmb3IgKHZhciBpID0gMCwgb2Zmc2V0ID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSB0aGlzLmNoaWxkcmVuW2ldLCBlbmQgPSBvZmZzZXQgKyBjaGlsZC5zaXplO1xuICAgIGlmIChmcm9tID4gb2Zmc2V0ICYmIHRvIDwgZW5kKVxuICAgICAgeyByZXR1cm4gY2hpbGQuc2V0U2VsZWN0aW9uKGFuY2hvciAtIG9mZnNldCAtIGNoaWxkLmJvcmRlciwgaGVhZCAtIG9mZnNldCAtIGNoaWxkLmJvcmRlciwgcm9vdCwgZm9yY2UpIH1cbiAgICBvZmZzZXQgPSBlbmQ7XG4gIH1cblxuICB2YXIgYW5jaG9yRE9NID0gdGhpcy5kb21Gcm9tUG9zKGFuY2hvciwgYW5jaG9yID8gLTEgOiAxKTtcbiAgdmFyIGhlYWRET00gPSBoZWFkID09IGFuY2hvciA/IGFuY2hvckRPTSA6IHRoaXMuZG9tRnJvbVBvcyhoZWFkLCBoZWFkID8gLTEgOiAxKTtcbiAgdmFyIGRvbVNlbCA9IHJvb3QuZ2V0U2VsZWN0aW9uKCk7XG5cbiAgdmFyIGJyS2x1ZGdlID0gZmFsc2U7XG4gIC8vIE9uIEZpcmVmb3gsIHVzaW5nIFNlbGVjdGlvbi5jb2xsYXBzZSB0byBwdXQgdGhlIGN1cnNvciBhZnRlciBhXG4gIC8vIEJSIG5vZGUgZm9yIHNvbWUgcmVhc29uIGRvZXNuJ3QgYWx3YXlzIHdvcmsgKCMxMDczKS4gT24gU2FmYXJpLFxuICAvLyB0aGUgY3Vyc29yIHNvbWV0aW1lcyBpbmV4cGxpY2FibGUgdmlzdWFsbHkgbGFncyBiZWhpbmQgaXRzXG4gIC8vIHJlcG9ydGVkIHBvc2l0aW9uIGluIHN1Y2ggc2l0dWF0aW9ucyAoIzEwOTIpLlxuICBpZiAoKHJlc3VsdC5nZWNrbyB8fCByZXN1bHQuc2FmYXJpKSAmJiBhbmNob3IgPT0gaGVhZCkge1xuICAgIHZhciBub2RlID0gYW5jaG9yRE9NLm5vZGU7XG4gICAgICB2YXIgb2Zmc2V0JDEgPSBhbmNob3JET00ub2Zmc2V0O1xuICAgIGlmIChub2RlLm5vZGVUeXBlID09IDMpIHtcbiAgICAgIGJyS2x1ZGdlID0gb2Zmc2V0JDEgJiYgbm9kZS5ub2RlVmFsdWVbb2Zmc2V0JDEgLSAxXSA9PSBcIlxcblwiO1xuICAgICAgLy8gSXNzdWUgIzExMjhcbiAgICAgIGlmIChicktsdWRnZSAmJiBvZmZzZXQkMSA9PSBub2RlLm5vZGVWYWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgZm9yICh2YXIgc2NhbiA9IG5vZGUsIGFmdGVyID0gKHZvaWQgMCk7IHNjYW47IHNjYW4gPSBzY2FuLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBpZiAoYWZ0ZXIgPSBzY2FuLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICBpZiAoYWZ0ZXIubm9kZU5hbWUgPT0gXCJCUlwiKVxuICAgICAgICAgICAgICB7IGFuY2hvckRPTSA9IGhlYWRET00gPSB7bm9kZTogYWZ0ZXIucGFyZW50Tm9kZSwgb2Zmc2V0OiBkb21JbmRleChhZnRlcikgKyAxfTsgfVxuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGRlc2MgPSBzY2FuLnBtVmlld0Rlc2M7XG4gICAgICAgICAgaWYgKGRlc2MgJiYgZGVzYy5ub2RlICYmIGRlc2Mubm9kZS5pc0Jsb2NrKSB7IGJyZWFrIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJldiA9IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXQkMSAtIDFdO1xuICAgICAgYnJLbHVkZ2UgPSBwcmV2ICYmIChwcmV2Lm5vZGVOYW1lID09IFwiQlJcIiB8fCBwcmV2LmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpO1xuICAgIH1cbiAgfVxuICAvLyBGaXJlZm94IGNhbiBhY3Qgc3RyYW5nZWx5IHdoZW4gdGhlIHNlbGVjdGlvbiBpcyBpbiBmcm9udCBvZiBhblxuICAvLyB1bmVkaXRhYmxlIG5vZGUuIFNlZSAjMTE2MyBhbmQgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTcwOTUzNlxuICBpZiAocmVzdWx0LmdlY2tvICYmIGRvbVNlbC5mb2N1c05vZGUgJiYgZG9tU2VsLmZvY3VzTm9kZSAhPSBoZWFkRE9NLm5vZGUgJiYgZG9tU2VsLmZvY3VzTm9kZS5ub2RlVHlwZSA9PSAxKSB7XG4gICAgdmFyIGFmdGVyJDEgPSBkb21TZWwuZm9jdXNOb2RlLmNoaWxkTm9kZXNbZG9tU2VsLmZvY3VzT2Zmc2V0XTtcbiAgICBpZiAoYWZ0ZXIkMSAmJiBhZnRlciQxLmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpIHsgZm9yY2UgPSB0cnVlOyB9XG4gIH1cblxuICBpZiAoIShmb3JjZSB8fCBicktsdWRnZSAmJiByZXN1bHQuc2FmYXJpKSAmJlxuICAgICAgaXNFcXVpdmFsZW50UG9zaXRpb24oYW5jaG9yRE9NLm5vZGUsIGFuY2hvckRPTS5vZmZzZXQsIGRvbVNlbC5hbmNob3JOb2RlLCBkb21TZWwuYW5jaG9yT2Zmc2V0KSAmJlxuICAgICAgaXNFcXVpdmFsZW50UG9zaXRpb24oaGVhZERPTS5ub2RlLCBoZWFkRE9NLm9mZnNldCwgZG9tU2VsLmZvY3VzTm9kZSwgZG9tU2VsLmZvY3VzT2Zmc2V0KSlcbiAgICB7IHJldHVybiB9XG5cbiAgLy8gU2VsZWN0aW9uLmV4dGVuZCBjYW4gYmUgdXNlZCB0byBjcmVhdGUgYW4gJ2ludmVydGVkJyBzZWxlY3Rpb25cbiAgLy8gKG9uZSB3aGVyZSB0aGUgZm9jdXMgaXMgYmVmb3JlIHRoZSBhbmNob3IpLCBidXQgbm90IGFsbFxuICAvLyBicm93c2VycyBzdXBwb3J0IGl0IHlldC5cbiAgdmFyIGRvbVNlbEV4dGVuZGVkID0gZmFsc2U7XG4gIGlmICgoZG9tU2VsLmV4dGVuZCB8fCBhbmNob3IgPT0gaGVhZCkgJiYgIWJyS2x1ZGdlKSB7XG4gICAgZG9tU2VsLmNvbGxhcHNlKGFuY2hvckRPTS5ub2RlLCBhbmNob3JET00ub2Zmc2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYgKGFuY2hvciAhPSBoZWFkKSB7IGRvbVNlbC5leHRlbmQoaGVhZERPTS5ub2RlLCBoZWFkRE9NLm9mZnNldCk7IH1cbiAgICAgIGRvbVNlbEV4dGVuZGVkID0gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIC8vIEluIHNvbWUgY2FzZXMgd2l0aCBDaHJvbWUgdGhlIHNlbGVjdGlvbiBpcyBlbXB0eSBhZnRlciBjYWxsaW5nXG4gICAgICAvLyBjb2xsYXBzZSwgZXZlbiB3aGVuIGl0IHNob3VsZCBiZSB2YWxpZC4gVGhpcyBhcHBlYXJzIHRvIGJlIGEgYnVnLCBidXRcbiAgICAgIC8vIGl0IGlzIGRpZmZpY3VsdCB0byBpc29sYXRlLiBJZiB0aGlzIGhhcHBlbnMgZmFsbGJhY2sgdG8gdGhlIG9sZCBwYXRoXG4gICAgICAvLyB3aXRob3V0IHVzaW5nIGV4dGVuZC5cbiAgICAgIGlmICghKGVyciBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbikpIHsgdGhyb3cgZXJyIH1cbiAgICAgIC8vIGRlY2xhcmUgZ2xvYmFsOiBET01FeGNlcHRpb25cbiAgICB9XG4gIH1cbiAgaWYgKCFkb21TZWxFeHRlbmRlZCkge1xuICAgIGlmIChhbmNob3IgPiBoZWFkKSB7IHZhciB0bXAgPSBhbmNob3JET007IGFuY2hvckRPTSA9IGhlYWRET007IGhlYWRET00gPSB0bXA7IH1cbiAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIHJhbmdlLnNldEVuZChoZWFkRE9NLm5vZGUsIGhlYWRET00ub2Zmc2V0KTtcbiAgICByYW5nZS5zZXRTdGFydChhbmNob3JET00ubm9kZSwgYW5jaG9yRE9NLm9mZnNldCk7XG4gICAgZG9tU2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgIGRvbVNlbC5hZGRSYW5nZShyYW5nZSk7XG4gIH1cbn07XG5cbi8vIDogKGRvbS5NdXRhdGlvblJlY29yZCkg4oaSIGJvb2xcblZpZXdEZXNjLnByb3RvdHlwZS5pZ25vcmVNdXRhdGlvbiA9IGZ1bmN0aW9uIGlnbm9yZU11dGF0aW9uIChtdXRhdGlvbikge1xuICByZXR1cm4gIXRoaXMuY29udGVudERPTSAmJiBtdXRhdGlvbi50eXBlICE9IFwic2VsZWN0aW9uXCJcbn07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5jb250ZW50TG9zdC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmNvbnRlbnRET00gJiYgdGhpcy5jb250ZW50RE9NICE9IHRoaXMuZG9tICYmICF0aGlzLmRvbS5jb250YWlucyh0aGlzLmNvbnRlbnRET00pXG59O1xuXG4vLyBSZW1vdmUgYSBzdWJ0cmVlIG9mIHRoZSBlbGVtZW50IHRyZWUgdGhhdCBoYXMgYmVlbiB0b3VjaGVkXG4vLyBieSBhIERPTSBjaGFuZ2UsIHNvIHRoYXQgdGhlIG5leHQgdXBkYXRlIHdpbGwgcmVkcmF3IGl0LlxuVmlld0Rlc2MucHJvdG90eXBlLm1hcmtEaXJ0eSA9IGZ1bmN0aW9uIG1hcmtEaXJ0eSAoZnJvbSwgdG8pIHtcbiAgZm9yICh2YXIgb2Zmc2V0ID0gMCwgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXSwgZW5kID0gb2Zmc2V0ICsgY2hpbGQuc2l6ZTtcbiAgICBpZiAob2Zmc2V0ID09IGVuZCA/IGZyb20gPD0gZW5kICYmIHRvID49IG9mZnNldCA6IGZyb20gPCBlbmQgJiYgdG8gPiBvZmZzZXQpIHtcbiAgICAgIHZhciBzdGFydEluc2lkZSA9IG9mZnNldCArIGNoaWxkLmJvcmRlciwgZW5kSW5zaWRlID0gZW5kIC0gY2hpbGQuYm9yZGVyO1xuICAgICAgaWYgKGZyb20gPj0gc3RhcnRJbnNpZGUgJiYgdG8gPD0gZW5kSW5zaWRlKSB7XG4gICAgICAgIHRoaXMuZGlydHkgPSBmcm9tID09IG9mZnNldCB8fCB0byA9PSBlbmQgPyBDT05URU5UX0RJUlRZIDogQ0hJTERfRElSVFk7XG4gICAgICAgIGlmIChmcm9tID09IHN0YXJ0SW5zaWRlICYmIHRvID09IGVuZEluc2lkZSAmJlxuICAgICAgICAgICAgKGNoaWxkLmNvbnRlbnRMb3N0IHx8IGNoaWxkLmRvbS5wYXJlbnROb2RlICE9IHRoaXMuY29udGVudERPTSkpIHsgY2hpbGQuZGlydHkgPSBOT0RFX0RJUlRZOyB9XG4gICAgICAgIGVsc2UgeyBjaGlsZC5tYXJrRGlydHkoZnJvbSAtIHN0YXJ0SW5zaWRlLCB0byAtIHN0YXJ0SW5zaWRlKTsgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoaWxkLmRpcnR5ID0gY2hpbGQuZG9tID09IGNoaWxkLmNvbnRlbnRET00gJiYgY2hpbGQuZG9tLnBhcmVudE5vZGUgPT0gdGhpcy5jb250ZW50RE9NID8gQ09OVEVOVF9ESVJUWSA6IE5PREVfRElSVFk7XG4gICAgICB9XG4gICAgfVxuICAgIG9mZnNldCA9IGVuZDtcbiAgfVxuICB0aGlzLmRpcnR5ID0gQ09OVEVOVF9ESVJUWTtcbn07XG5cblZpZXdEZXNjLnByb3RvdHlwZS5tYXJrUGFyZW50c0RpcnR5ID0gZnVuY3Rpb24gbWFya1BhcmVudHNEaXJ0eSAoKSB7XG4gIHZhciBsZXZlbCA9IDE7XG4gIGZvciAodmFyIG5vZGUgPSB0aGlzLnBhcmVudDsgbm9kZTsgbm9kZSA9IG5vZGUucGFyZW50LCBsZXZlbCsrKSB7XG4gICAgdmFyIGRpcnR5ID0gbGV2ZWwgPT0gMSA/IENPTlRFTlRfRElSVFkgOiBDSElMRF9ESVJUWTtcbiAgICBpZiAobm9kZS5kaXJ0eSA8IGRpcnR5KSB7IG5vZGUuZGlydHkgPSBkaXJ0eTsgfVxuICB9XG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMuZG9tQXRvbS5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZSB9O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMuaWdub3JlRm9yQ29vcmRzLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlIH07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWaWV3RGVzYy5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG4vLyBSZXVzZWQgYXJyYXkgdG8gYXZvaWQgYWxsb2NhdGluZyBmcmVzaCBhcnJheXMgZm9yIHRoaW5ncyB0aGF0IHdpbGxcbi8vIHN0YXkgZW1wdHkgYW55d2F5LlxudmFyIG5vdGhpbmcgPSBbXTtcblxuLy8gQSB3aWRnZXQgZGVzYyByZXByZXNlbnRzIGEgd2lkZ2V0IGRlY29yYXRpb24sIHdoaWNoIGlzIGEgRE9NIG5vZGVcbi8vIGRyYXduIGJldHdlZW4gdGhlIGRvY3VtZW50IG5vZGVzLlxudmFyIFdpZGdldFZpZXdEZXNjID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoVmlld0Rlc2MpIHtcbiAgZnVuY3Rpb24gV2lkZ2V0Vmlld0Rlc2MocGFyZW50LCB3aWRnZXQsIHZpZXcsIHBvcykge1xuICAgIHZhciBzZWxmLCBkb20gPSB3aWRnZXQudHlwZS50b0RPTTtcbiAgICBpZiAodHlwZW9mIGRvbSA9PSBcImZ1bmN0aW9uXCIpIHsgZG9tID0gZG9tKHZpZXcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghc2VsZikgeyByZXR1cm4gcG9zIH1cbiAgICAgIGlmIChzZWxmLnBhcmVudCkgeyByZXR1cm4gc2VsZi5wYXJlbnQucG9zQmVmb3JlQ2hpbGQoc2VsZikgfVxuICAgIH0pOyB9XG4gICAgaWYgKCF3aWRnZXQudHlwZS5zcGVjLnJhdykge1xuICAgICAgaWYgKGRvbS5ub2RlVHlwZSAhPSAxKSB7XG4gICAgICAgIHZhciB3cmFwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIHdyYXAuYXBwZW5kQ2hpbGQoZG9tKTtcbiAgICAgICAgZG9tID0gd3JhcDtcbiAgICAgIH1cbiAgICAgIGRvbS5jb250ZW50RWRpdGFibGUgPSBmYWxzZTtcbiAgICAgIGRvbS5jbGFzc0xpc3QuYWRkKFwiUHJvc2VNaXJyb3Itd2lkZ2V0XCIpO1xuICAgIH1cbiAgICBWaWV3RGVzYy5jYWxsKHRoaXMsIHBhcmVudCwgbm90aGluZywgZG9tLCBudWxsKTtcbiAgICB0aGlzLndpZGdldCA9IHdpZGdldDtcbiAgICBzZWxmID0gdGhpcztcbiAgfVxuXG4gIGlmICggVmlld0Rlc2MgKSBXaWRnZXRWaWV3RGVzYy5fX3Byb3RvX18gPSBWaWV3RGVzYztcbiAgV2lkZ2V0Vmlld0Rlc2MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVmlld0Rlc2MgJiYgVmlld0Rlc2MucHJvdG90eXBlICk7XG4gIFdpZGdldFZpZXdEZXNjLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFdpZGdldFZpZXdEZXNjO1xuXG4gIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMSA9IHsgZG9tQXRvbTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4gIFdpZGdldFZpZXdEZXNjLnByb3RvdHlwZS5tYXRjaGVzV2lkZ2V0ID0gZnVuY3Rpb24gbWF0Y2hlc1dpZGdldCAod2lkZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuZGlydHkgPT0gTk9UX0RJUlRZICYmIHdpZGdldC50eXBlLmVxKHRoaXMud2lkZ2V0LnR5cGUpXG4gIH07XG5cbiAgV2lkZ2V0Vmlld0Rlc2MucHJvdG90eXBlLnBhcnNlUnVsZSA9IGZ1bmN0aW9uIHBhcnNlUnVsZSAoKSB7IHJldHVybiB7aWdub3JlOiB0cnVlfSB9O1xuXG4gIFdpZGdldFZpZXdEZXNjLnByb3RvdHlwZS5zdG9wRXZlbnQgPSBmdW5jdGlvbiBzdG9wRXZlbnQgKGV2ZW50KSB7XG4gICAgdmFyIHN0b3AgPSB0aGlzLndpZGdldC5zcGVjLnN0b3BFdmVudDtcbiAgICByZXR1cm4gc3RvcCA/IHN0b3AoZXZlbnQpIDogZmFsc2VcbiAgfTtcblxuICBXaWRnZXRWaWV3RGVzYy5wcm90b3R5cGUuaWdub3JlTXV0YXRpb24gPSBmdW5jdGlvbiBpZ25vcmVNdXRhdGlvbiAobXV0YXRpb24pIHtcbiAgICByZXR1cm4gbXV0YXRpb24udHlwZSAhPSBcInNlbGVjdGlvblwiIHx8IHRoaXMud2lkZ2V0LnNwZWMuaWdub3JlU2VsZWN0aW9uXG4gIH07XG5cbiAgcHJvdG90eXBlQWNjZXNzb3JzJDEuZG9tQXRvbS5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFdpZGdldFZpZXdEZXNjLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDEgKTtcblxuICByZXR1cm4gV2lkZ2V0Vmlld0Rlc2M7XG59KFZpZXdEZXNjKSk7XG5cbnZhciBDb21wb3NpdGlvblZpZXdEZXNjID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoVmlld0Rlc2MpIHtcbiAgZnVuY3Rpb24gQ29tcG9zaXRpb25WaWV3RGVzYyhwYXJlbnQsIGRvbSwgdGV4dERPTSwgdGV4dCkge1xuICAgIFZpZXdEZXNjLmNhbGwodGhpcywgcGFyZW50LCBub3RoaW5nLCBkb20sIG51bGwpO1xuICAgIHRoaXMudGV4dERPTSA9IHRleHRET007XG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgfVxuXG4gIGlmICggVmlld0Rlc2MgKSBDb21wb3NpdGlvblZpZXdEZXNjLl9fcHJvdG9fXyA9IFZpZXdEZXNjO1xuICBDb21wb3NpdGlvblZpZXdEZXNjLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFZpZXdEZXNjICYmIFZpZXdEZXNjLnByb3RvdHlwZSApO1xuICBDb21wb3NpdGlvblZpZXdEZXNjLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbXBvc2l0aW9uVmlld0Rlc2M7XG5cbiAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyQyID0geyBzaXplOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbiAgcHJvdG90eXBlQWNjZXNzb3JzJDIuc2l6ZS5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnRleHQubGVuZ3RoIH07XG5cbiAgQ29tcG9zaXRpb25WaWV3RGVzYy5wcm90b3R5cGUubG9jYWxQb3NGcm9tRE9NID0gZnVuY3Rpb24gbG9jYWxQb3NGcm9tRE9NIChkb20sIG9mZnNldCkge1xuICAgIGlmIChkb20gIT0gdGhpcy50ZXh0RE9NKSB7IHJldHVybiB0aGlzLnBvc0F0U3RhcnQgKyAob2Zmc2V0ID8gdGhpcy5zaXplIDogMCkgfVxuICAgIHJldHVybiB0aGlzLnBvc0F0U3RhcnQgKyBvZmZzZXRcbiAgfTtcblxuICBDb21wb3NpdGlvblZpZXdEZXNjLnByb3RvdHlwZS5kb21Gcm9tUG9zID0gZnVuY3Rpb24gZG9tRnJvbVBvcyAocG9zKSB7XG4gICAgcmV0dXJuIHtub2RlOiB0aGlzLnRleHRET00sIG9mZnNldDogcG9zfVxuICB9O1xuXG4gIENvbXBvc2l0aW9uVmlld0Rlc2MucHJvdG90eXBlLmlnbm9yZU11dGF0aW9uID0gZnVuY3Rpb24gaWdub3JlTXV0YXRpb24gKG11dCkge1xuICAgIHJldHVybiBtdXQudHlwZSA9PT0gJ2NoYXJhY3RlckRhdGEnICYmIG11dC50YXJnZXQubm9kZVZhbHVlID09IG11dC5vbGRWYWx1ZVxuICAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggQ29tcG9zaXRpb25WaWV3RGVzYy5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQyICk7XG5cbiAgcmV0dXJuIENvbXBvc2l0aW9uVmlld0Rlc2M7XG59KFZpZXdEZXNjKSk7XG5cbi8vIEEgbWFyayBkZXNjIHJlcHJlc2VudHMgYSBtYXJrLiBNYXkgaGF2ZSBtdWx0aXBsZSBjaGlsZHJlbixcbi8vIGRlcGVuZGluZyBvbiBob3cgdGhlIG1hcmsgaXMgc3BsaXQuIE5vdGUgdGhhdCBtYXJrcyBhcmUgZHJhd24gdXNpbmdcbi8vIGEgZml4ZWQgbmVzdGluZyBvcmRlciwgZm9yIHNpbXBsaWNpdHkgYW5kIHByZWRpY3RhYmlsaXR5LCBzbyBpblxuLy8gc29tZSBjYXNlcyB0aGV5IHdpbGwgYmUgc3BsaXQgbW9yZSBvZnRlbiB0aGFuIHdvdWxkIGFwcGVhclxuLy8gbmVjZXNzYXJ5LlxudmFyIE1hcmtWaWV3RGVzYyA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFZpZXdEZXNjKSB7XG4gIGZ1bmN0aW9uIE1hcmtWaWV3RGVzYyhwYXJlbnQsIG1hcmssIGRvbSwgY29udGVudERPTSkge1xuICAgIFZpZXdEZXNjLmNhbGwodGhpcywgcGFyZW50LCBbXSwgZG9tLCBjb250ZW50RE9NKTtcbiAgICB0aGlzLm1hcmsgPSBtYXJrO1xuICB9XG5cbiAgaWYgKCBWaWV3RGVzYyApIE1hcmtWaWV3RGVzYy5fX3Byb3RvX18gPSBWaWV3RGVzYztcbiAgTWFya1ZpZXdEZXNjLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFZpZXdEZXNjICYmIFZpZXdEZXNjLnByb3RvdHlwZSApO1xuICBNYXJrVmlld0Rlc2MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTWFya1ZpZXdEZXNjO1xuXG4gIE1hcmtWaWV3RGVzYy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUgKHBhcmVudCwgbWFyaywgaW5saW5lLCB2aWV3KSB7XG4gICAgdmFyIGN1c3RvbSA9IHZpZXcubm9kZVZpZXdzW21hcmsudHlwZS5uYW1lXTtcbiAgICB2YXIgc3BlYyA9IGN1c3RvbSAmJiBjdXN0b20obWFyaywgdmlldywgaW5saW5lKTtcbiAgICBpZiAoIXNwZWMgfHwgIXNwZWMuZG9tKVxuICAgICAgeyBzcGVjID0gRE9NU2VyaWFsaXplci5yZW5kZXJTcGVjKGRvY3VtZW50LCBtYXJrLnR5cGUuc3BlYy50b0RPTShtYXJrLCBpbmxpbmUpKTsgfVxuICAgIHJldHVybiBuZXcgTWFya1ZpZXdEZXNjKHBhcmVudCwgbWFyaywgc3BlYy5kb20sIHNwZWMuY29udGVudERPTSB8fCBzcGVjLmRvbSlcbiAgfTtcblxuICBNYXJrVmlld0Rlc2MucHJvdG90eXBlLnBhcnNlUnVsZSA9IGZ1bmN0aW9uIHBhcnNlUnVsZSAoKSB7IHJldHVybiB7bWFyazogdGhpcy5tYXJrLnR5cGUubmFtZSwgYXR0cnM6IHRoaXMubWFyay5hdHRycywgY29udGVudEVsZW1lbnQ6IHRoaXMuY29udGVudERPTX0gfTtcblxuICBNYXJrVmlld0Rlc2MucHJvdG90eXBlLm1hdGNoZXNNYXJrID0gZnVuY3Rpb24gbWF0Y2hlc01hcmsgKG1hcmspIHsgcmV0dXJuIHRoaXMuZGlydHkgIT0gTk9ERV9ESVJUWSAmJiB0aGlzLm1hcmsuZXEobWFyaykgfTtcblxuICBNYXJrVmlld0Rlc2MucHJvdG90eXBlLm1hcmtEaXJ0eSA9IGZ1bmN0aW9uIG1hcmtEaXJ0eSAoZnJvbSwgdG8pIHtcbiAgICBWaWV3RGVzYy5wcm90b3R5cGUubWFya0RpcnR5LmNhbGwodGhpcywgZnJvbSwgdG8pO1xuICAgIC8vIE1vdmUgZGlydHkgaW5mbyB0byBuZWFyZXN0IG5vZGUgdmlld1xuICAgIGlmICh0aGlzLmRpcnR5ICE9IE5PVF9ESVJUWSkge1xuICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50O1xuICAgICAgd2hpbGUgKCFwYXJlbnQubm9kZSkgeyBwYXJlbnQgPSBwYXJlbnQucGFyZW50OyB9XG4gICAgICBpZiAocGFyZW50LmRpcnR5IDwgdGhpcy5kaXJ0eSkgeyBwYXJlbnQuZGlydHkgPSB0aGlzLmRpcnR5OyB9XG4gICAgICB0aGlzLmRpcnR5ID0gTk9UX0RJUlRZO1xuICAgIH1cbiAgfTtcblxuICBNYXJrVmlld0Rlc2MucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKGZyb20sIHRvLCB2aWV3KSB7XG4gICAgdmFyIGNvcHkgPSBNYXJrVmlld0Rlc2MuY3JlYXRlKHRoaXMucGFyZW50LCB0aGlzLm1hcmssIHRydWUsIHZpZXcpO1xuICAgIHZhciBub2RlcyA9IHRoaXMuY2hpbGRyZW4sIHNpemUgPSB0aGlzLnNpemU7XG4gICAgaWYgKHRvIDwgc2l6ZSkgeyBub2RlcyA9IHJlcGxhY2VOb2Rlcyhub2RlcywgdG8sIHNpemUsIHZpZXcpOyB9XG4gICAgaWYgKGZyb20gPiAwKSB7IG5vZGVzID0gcmVwbGFjZU5vZGVzKG5vZGVzLCAwLCBmcm9tLCB2aWV3KTsgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHsgbm9kZXNbaV0ucGFyZW50ID0gY29weTsgfVxuICAgIGNvcHkuY2hpbGRyZW4gPSBub2RlcztcbiAgICByZXR1cm4gY29weVxuICB9O1xuXG4gIHJldHVybiBNYXJrVmlld0Rlc2M7XG59KFZpZXdEZXNjKSk7XG5cbi8vIE5vZGUgdmlldyBkZXNjcyBhcmUgdGhlIG1haW4sIG1vc3QgY29tbW9uIHR5cGUgb2YgdmlldyBkZXNjLCBhbmRcbi8vIGNvcnJlc3BvbmQgdG8gYW4gYWN0dWFsIG5vZGUgaW4gdGhlIGRvY3VtZW50LiBVbmxpa2UgbWFyayBkZXNjcyxcbi8vIHRoZXkgcG9wdWxhdGUgdGhlaXIgY2hpbGQgYXJyYXkgdGhlbXNlbHZlcy5cbnZhciBOb2RlVmlld0Rlc2MgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChWaWV3RGVzYykge1xuICBmdW5jdGlvbiBOb2RlVmlld0Rlc2MocGFyZW50LCBub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgZG9tLCBjb250ZW50RE9NLCBub2RlRE9NLCB2aWV3LCBwb3MpIHtcbiAgICBWaWV3RGVzYy5jYWxsKHRoaXMsIHBhcmVudCwgbm9kZS5pc0xlYWYgPyBub3RoaW5nIDogW10sIGRvbSwgY29udGVudERPTSk7XG4gICAgdGhpcy5ub2RlRE9NID0gbm9kZURPTTtcbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgIHRoaXMub3V0ZXJEZWNvID0gb3V0ZXJEZWNvO1xuICAgIHRoaXMuaW5uZXJEZWNvID0gaW5uZXJEZWNvO1xuICAgIGlmIChjb250ZW50RE9NKSB7IHRoaXMudXBkYXRlQ2hpbGRyZW4odmlldywgcG9zKTsgfVxuICB9XG5cbiAgaWYgKCBWaWV3RGVzYyApIE5vZGVWaWV3RGVzYy5fX3Byb3RvX18gPSBWaWV3RGVzYztcbiAgTm9kZVZpZXdEZXNjLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFZpZXdEZXNjICYmIFZpZXdEZXNjLnByb3RvdHlwZSApO1xuICBOb2RlVmlld0Rlc2MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTm9kZVZpZXdEZXNjO1xuXG4gIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMyA9IHsgc2l6ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSxib3JkZXI6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0sZG9tQXRvbTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4gIC8vIEJ5IGRlZmF1bHQsIGEgbm9kZSBpcyByZW5kZXJlZCB1c2luZyB0aGUgYHRvRE9NYCBtZXRob2QgZnJvbSB0aGVcbiAgLy8gbm9kZSB0eXBlIHNwZWMuIEJ1dCBjbGllbnQgY29kZSBjYW4gdXNlIHRoZSBgbm9kZVZpZXdzYCBzcGVjIHRvXG4gIC8vIHN1cHBseSBhIGN1c3RvbSBub2RlIHZpZXcsIHdoaWNoIGNhbiBpbmZsdWVuY2UgdmFyaW91cyBhc3BlY3RzIG9mXG4gIC8vIHRoZSB3YXkgdGhlIG5vZGUgd29ya3MuXG4gIC8vXG4gIC8vIChVc2luZyBzdWJjbGFzc2luZyBmb3IgdGhpcyB3YXMgaW50ZW50aW9uYWxseSBkZWNpZGVkIGFnYWluc3QsXG4gIC8vIHNpbmNlIGl0J2QgcmVxdWlyZSBleHBvc2luZyBhIHdob2xlIHNsZXcgb2YgZmluaWNreVxuICAvLyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIHRvIHRoZSB1c2VyIGNvZGUgdGhhdCB0aGV5IHByb2JhYmx5IHdpbGxcbiAgLy8gbmV2ZXIgbmVlZC4pXG4gIE5vZGVWaWV3RGVzYy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUgKHBhcmVudCwgbm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIHZpZXcsIHBvcykge1xuICAgIHZhciBhc3NpZ247XG5cbiAgICB2YXIgY3VzdG9tID0gdmlldy5ub2RlVmlld3Nbbm9kZS50eXBlLm5hbWVdLCBkZXNjT2JqO1xuICAgIHZhciBzcGVjID0gY3VzdG9tICYmIGN1c3RvbShub2RlLCB2aWV3LCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyAoVGhpcyBpcyBhIGZ1bmN0aW9uIHRoYXQgYWxsb3dzIHRoZSBjdXN0b20gdmlldyB0byBmaW5kIGl0c1xuICAgICAgLy8gb3duIHBvc2l0aW9uKVxuICAgICAgaWYgKCFkZXNjT2JqKSB7IHJldHVybiBwb3MgfVxuICAgICAgaWYgKGRlc2NPYmoucGFyZW50KSB7IHJldHVybiBkZXNjT2JqLnBhcmVudC5wb3NCZWZvcmVDaGlsZChkZXNjT2JqKSB9XG4gICAgfSwgb3V0ZXJEZWNvLCBpbm5lckRlY28pO1xuXG4gICAgdmFyIGRvbSA9IHNwZWMgJiYgc3BlYy5kb20sIGNvbnRlbnRET00gPSBzcGVjICYmIHNwZWMuY29udGVudERPTTtcbiAgICBpZiAobm9kZS5pc1RleHQpIHtcbiAgICAgIGlmICghZG9tKSB7IGRvbSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG5vZGUudGV4dCk7IH1cbiAgICAgIGVsc2UgaWYgKGRvbS5ub2RlVHlwZSAhPSAzKSB7IHRocm93IG5ldyBSYW5nZUVycm9yKFwiVGV4dCBtdXN0IGJlIHJlbmRlcmVkIGFzIGEgRE9NIHRleHQgbm9kZVwiKSB9XG4gICAgfSBlbHNlIGlmICghZG9tKSB7XG4oKGFzc2lnbiA9IERPTVNlcmlhbGl6ZXIucmVuZGVyU3BlYyhkb2N1bWVudCwgbm9kZS50eXBlLnNwZWMudG9ET00obm9kZSkpLCBkb20gPSBhc3NpZ24uZG9tLCBjb250ZW50RE9NID0gYXNzaWduLmNvbnRlbnRET00pKTtcbiAgICB9XG4gICAgaWYgKCFjb250ZW50RE9NICYmICFub2RlLmlzVGV4dCAmJiBkb20ubm9kZU5hbWUgIT0gXCJCUlwiKSB7IC8vIENocm9tZSBnZXRzIGNvbmZ1c2VkIGJ5IDxiciBjb250ZW50ZWRpdGFibGU9ZmFsc2U+XG4gICAgICBpZiAoIWRvbS5oYXNBdHRyaWJ1dGUoXCJjb250ZW50ZWRpdGFibGVcIikpIHsgZG9tLmNvbnRlbnRFZGl0YWJsZSA9IGZhbHNlOyB9XG4gICAgICBpZiAobm9kZS50eXBlLnNwZWMuZHJhZ2dhYmxlKSB7IGRvbS5kcmFnZ2FibGUgPSB0cnVlOyB9XG4gICAgfVxuXG4gICAgdmFyIG5vZGVET00gPSBkb207XG4gICAgZG9tID0gYXBwbHlPdXRlckRlY28oZG9tLCBvdXRlckRlY28sIG5vZGUpO1xuXG4gICAgaWYgKHNwZWMpXG4gICAgICB7IHJldHVybiBkZXNjT2JqID0gbmV3IEN1c3RvbU5vZGVWaWV3RGVzYyhwYXJlbnQsIG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBkb20sIGNvbnRlbnRET00sIG5vZGVET00sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BlYywgdmlldywgcG9zICsgMSkgfVxuICAgIGVsc2UgaWYgKG5vZGUuaXNUZXh0KVxuICAgICAgeyByZXR1cm4gbmV3IFRleHRWaWV3RGVzYyhwYXJlbnQsIG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBkb20sIG5vZGVET00sIHZpZXcpIH1cbiAgICBlbHNlXG4gICAgICB7IHJldHVybiBuZXcgTm9kZVZpZXdEZXNjKHBhcmVudCwgbm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIGRvbSwgY29udGVudERPTSwgbm9kZURPTSwgdmlldywgcG9zICsgMSkgfVxuICB9O1xuXG4gIE5vZGVWaWV3RGVzYy5wcm90b3R5cGUucGFyc2VSdWxlID0gZnVuY3Rpb24gcGFyc2VSdWxlICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIC8vIEV4cGVyaW1lbnRhbCBrbHVkZ2UgdG8gYWxsb3cgb3B0LWluIHJlLXBhcnNpbmcgb2Ygbm9kZXNcbiAgICBpZiAodGhpcy5ub2RlLnR5cGUuc3BlYy5yZXBhcnNlSW5WaWV3KSB7IHJldHVybiBudWxsIH1cbiAgICAvLyBGSVhNRSB0aGUgYXNzdW1wdGlvbiB0aGF0IHRoaXMgY2FuIGFsd2F5cyByZXR1cm4gdGhlIGN1cnJlbnRcbiAgICAvLyBhdHRycyBtZWFucyB0aGF0IGlmIHRoZSB1c2VyIHNvbWVob3cgbWFuYWdlcyB0byBjaGFuZ2UgdGhlXG4gICAgLy8gYXR0cnMgaW4gdGhlIGRvbSwgdGhhdCB3b24ndCBiZSBwaWNrZWQgdXAuIE5vdCBlbnRpcmVseSBzdXJlXG4gICAgLy8gd2hldGhlciB0aGlzIGlzIGEgcHJvYmxlbVxuICAgIHZhciBydWxlID0ge25vZGU6IHRoaXMubm9kZS50eXBlLm5hbWUsIGF0dHJzOiB0aGlzLm5vZGUuYXR0cnN9O1xuICAgIGlmICh0aGlzLm5vZGUudHlwZS5zcGVjLmNvZGUpIHsgcnVsZS5wcmVzZXJ2ZVdoaXRlc3BhY2UgPSBcImZ1bGxcIjsgfVxuICAgIGlmICh0aGlzLmNvbnRlbnRET00gJiYgIXRoaXMuY29udGVudExvc3QpIHsgcnVsZS5jb250ZW50RWxlbWVudCA9IHRoaXMuY29udGVudERPTTsgfVxuICAgIGVsc2UgeyBydWxlLmdldENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEuY29udGVudERPTSA/IEZyYWdtZW50LmVtcHR5IDogdGhpcyQxLm5vZGUuY29udGVudDsgfTsgfVxuICAgIHJldHVybiBydWxlXG4gIH07XG5cbiAgTm9kZVZpZXdEZXNjLnByb3RvdHlwZS5tYXRjaGVzTm9kZSA9IGZ1bmN0aW9uIG1hdGNoZXNOb2RlIChub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbykge1xuICAgIHJldHVybiB0aGlzLmRpcnR5ID09IE5PVF9ESVJUWSAmJiBub2RlLmVxKHRoaXMubm9kZSkgJiZcbiAgICAgIHNhbWVPdXRlckRlY28ob3V0ZXJEZWNvLCB0aGlzLm91dGVyRGVjbykgJiYgaW5uZXJEZWNvLmVxKHRoaXMuaW5uZXJEZWNvKVxuICB9O1xuXG4gIHByb3RvdHlwZUFjY2Vzc29ycyQzLnNpemUuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5ub2RlLm5vZGVTaXplIH07XG5cbiAgcHJvdG90eXBlQWNjZXNzb3JzJDMuYm9yZGVyLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMubm9kZS5pc0xlYWYgPyAwIDogMSB9O1xuXG4gIC8vIFN5bmNzIGB0aGlzLmNoaWxkcmVuYCB0byBtYXRjaCBgdGhpcy5ub2RlLmNvbnRlbnRgIGFuZCB0aGUgbG9jYWxcbiAgLy8gZGVjb3JhdGlvbnMsIHBvc3NpYmx5IGludHJvZHVjaW5nIG5lc3RpbmcgZm9yIG1hcmtzLiBUaGVuLCBpbiBhXG4gIC8vIHNlcGFyYXRlIHN0ZXAsIHN5bmNzIHRoZSBET00gaW5zaWRlIGB0aGlzLmNvbnRlbnRET01gIHRvXG4gIC8vIGB0aGlzLmNoaWxkcmVuYC5cbiAgTm9kZVZpZXdEZXNjLnByb3RvdHlwZS51cGRhdGVDaGlsZHJlbiA9IGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuICh2aWV3LCBwb3MpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBpbmxpbmUgPSB0aGlzLm5vZGUuaW5saW5lQ29udGVudCwgb2ZmID0gcG9zO1xuICAgIHZhciBjb21wb3NpdGlvbiA9IHZpZXcuY29tcG9zaW5nICYmIHRoaXMubG9jYWxDb21wb3NpdGlvbkluZm8odmlldywgcG9zKTtcbiAgICB2YXIgbG9jYWxDb21wb3NpdGlvbiA9IGNvbXBvc2l0aW9uICYmIGNvbXBvc2l0aW9uLnBvcyA+IC0xID8gY29tcG9zaXRpb24gOiBudWxsO1xuICAgIHZhciBjb21wb3NpdGlvbkluQ2hpbGQgPSBjb21wb3NpdGlvbiAmJiBjb21wb3NpdGlvbi5wb3MgPCAwO1xuICAgIHZhciB1cGRhdGVyID0gbmV3IFZpZXdUcmVlVXBkYXRlcih0aGlzLCBsb2NhbENvbXBvc2l0aW9uICYmIGxvY2FsQ29tcG9zaXRpb24ubm9kZSk7XG4gICAgaXRlckRlY28odGhpcy5ub2RlLCB0aGlzLmlubmVyRGVjbywgZnVuY3Rpb24gKHdpZGdldCwgaSwgaW5zaWRlTm9kZSkge1xuICAgICAgaWYgKHdpZGdldC5zcGVjLm1hcmtzKVxuICAgICAgICB7IHVwZGF0ZXIuc3luY1RvTWFya3Mod2lkZ2V0LnNwZWMubWFya3MsIGlubGluZSwgdmlldyk7IH1cbiAgICAgIGVsc2UgaWYgKHdpZGdldC50eXBlLnNpZGUgPj0gMCAmJiAhaW5zaWRlTm9kZSlcbiAgICAgICAgeyB1cGRhdGVyLnN5bmNUb01hcmtzKGkgPT0gdGhpcyQxLm5vZGUuY2hpbGRDb3VudCA/IE1hcmsubm9uZSA6IHRoaXMkMS5ub2RlLmNoaWxkKGkpLm1hcmtzLCBpbmxpbmUsIHZpZXcpOyB9XG4gICAgICAvLyBJZiB0aGUgbmV4dCBub2RlIGlzIGEgZGVzYyBtYXRjaGluZyB0aGlzIHdpZGdldCwgcmV1c2UgaXQsXG4gICAgICAvLyBvdGhlcndpc2UgaW5zZXJ0IHRoZSB3aWRnZXQgYXMgYSBuZXcgdmlldyBkZXNjLlxuICAgICAgdXBkYXRlci5wbGFjZVdpZGdldCh3aWRnZXQsIHZpZXcsIG9mZik7XG4gICAgfSwgZnVuY3Rpb24gKGNoaWxkLCBvdXRlckRlY28sIGlubmVyRGVjbywgaSkge1xuICAgICAgLy8gTWFrZSBzdXJlIHRoZSB3cmFwcGluZyBtYXJrIGRlc2NzIG1hdGNoIHRoZSBub2RlJ3MgbWFya3MuXG4gICAgICB1cGRhdGVyLnN5bmNUb01hcmtzKGNoaWxkLm1hcmtzLCBpbmxpbmUsIHZpZXcpO1xuICAgICAgLy8gVHJ5IHNldmVyYWwgc3RyYXRlZ2llcyBmb3IgZHJhd2luZyB0aGlzIG5vZGVcbiAgICAgIHZhciBjb21wSW5kZXg7XG4gICAgICBpZiAodXBkYXRlci5maW5kTm9kZU1hdGNoKGNoaWxkLCBvdXRlckRlY28sIGlubmVyRGVjbywgaSkpIDsgZWxzZSBpZiAoY29tcG9zaXRpb25JbkNoaWxkICYmIHZpZXcuc3RhdGUuc2VsZWN0aW9uLmZyb20gPiBvZmYgJiZcbiAgICAgICAgICAgICAgICAgdmlldy5zdGF0ZS5zZWxlY3Rpb24udG8gPCBvZmYgKyBjaGlsZC5ub2RlU2l6ZSAmJlxuICAgICAgICAgICAgICAgICAoY29tcEluZGV4ID0gdXBkYXRlci5maW5kSW5kZXhXaXRoQ2hpbGQoY29tcG9zaXRpb24ubm9kZSkpID4gLTEgJiZcbiAgICAgICAgICAgICAgICAgdXBkYXRlci51cGRhdGVOb2RlQXQoY2hpbGQsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBjb21wSW5kZXgsIHZpZXcpKSA7IGVsc2UgaWYgKHVwZGF0ZXIudXBkYXRlTmV4dE5vZGUoY2hpbGQsIG91dGVyRGVjbywgaW5uZXJEZWNvLCB2aWV3LCBpKSkgOyBlbHNlIHtcbiAgICAgICAgLy8gQWRkIGl0IGFzIGEgbmV3IHZpZXdcbiAgICAgICAgdXBkYXRlci5hZGROb2RlKGNoaWxkLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldywgb2ZmKTtcbiAgICAgIH1cbiAgICAgIG9mZiArPSBjaGlsZC5ub2RlU2l6ZTtcbiAgICB9KTtcbiAgICAvLyBEcm9wIGFsbCByZW1haW5pbmcgZGVzY3MgYWZ0ZXIgdGhlIGN1cnJlbnQgcG9zaXRpb24uXG4gICAgdXBkYXRlci5zeW5jVG9NYXJrcyhub3RoaW5nLCBpbmxpbmUsIHZpZXcpO1xuICAgIGlmICh0aGlzLm5vZGUuaXNUZXh0YmxvY2spIHsgdXBkYXRlci5hZGRUZXh0YmxvY2tIYWNrcygpOyB9XG4gICAgdXBkYXRlci5kZXN0cm95UmVzdCgpO1xuXG4gICAgLy8gU3luYyB0aGUgRE9NIGlmIGFueXRoaW5nIGNoYW5nZWRcbiAgICBpZiAodXBkYXRlci5jaGFuZ2VkIHx8IHRoaXMuZGlydHkgPT0gQ09OVEVOVF9ESVJUWSkge1xuICAgICAgLy8gTWF5IGhhdmUgdG8gcHJvdGVjdCBmb2N1c2VkIERPTSBmcm9tIGJlaW5nIGNoYW5nZWQgaWYgYSBjb21wb3NpdGlvbiBpcyBhY3RpdmVcbiAgICAgIGlmIChsb2NhbENvbXBvc2l0aW9uKSB7IHRoaXMucHJvdGVjdExvY2FsQ29tcG9zaXRpb24odmlldywgbG9jYWxDb21wb3NpdGlvbik7IH1cbiAgICAgIHJlbmRlckRlc2NzKHRoaXMuY29udGVudERPTSwgdGhpcy5jaGlsZHJlbiwgdmlldyk7XG4gICAgICBpZiAocmVzdWx0LmlvcykgeyBpb3NIYWNrcyh0aGlzLmRvbSk7IH1cbiAgICB9XG4gIH07XG5cbiAgTm9kZVZpZXdEZXNjLnByb3RvdHlwZS5sb2NhbENvbXBvc2l0aW9uSW5mbyA9IGZ1bmN0aW9uIGxvY2FsQ29tcG9zaXRpb25JbmZvICh2aWV3LCBwb3MpIHtcbiAgICAvLyBPbmx5IGRvIHNvbWV0aGluZyBpZiBib3RoIHRoZSBzZWxlY3Rpb24gYW5kIGEgZm9jdXNlZCB0ZXh0IG5vZGVcbiAgICAvLyBhcmUgaW5zaWRlIG9mIHRoaXMgbm9kZVxuICAgIHZhciByZWYgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbjtcbiAgICB2YXIgZnJvbSA9IHJlZi5mcm9tO1xuICAgIHZhciB0byA9IHJlZi50bztcbiAgICBpZiAoISh2aWV3LnN0YXRlLnNlbGVjdGlvbiBpbnN0YW5jZW9mIFRleHRTZWxlY3Rpb24pIHx8IGZyb20gPCBwb3MgfHwgdG8gPiBwb3MgKyB0aGlzLm5vZGUuY29udGVudC5zaXplKSB7IHJldHVybiB9XG4gICAgdmFyIHNlbCA9IHZpZXcucm9vdC5nZXRTZWxlY3Rpb24oKTtcbiAgICB2YXIgdGV4dE5vZGUgPSBuZWFyYnlUZXh0Tm9kZShzZWwuZm9jdXNOb2RlLCBzZWwuZm9jdXNPZmZzZXQpO1xuICAgIGlmICghdGV4dE5vZGUgfHwgIXRoaXMuZG9tLmNvbnRhaW5zKHRleHROb2RlLnBhcmVudE5vZGUpKSB7IHJldHVybiB9XG5cbiAgICBpZiAodGhpcy5ub2RlLmlubGluZUNvbnRlbnQpIHtcbiAgICAgIC8vIEZpbmQgdGhlIHRleHQgaW4gdGhlIGZvY3VzZWQgbm9kZSBpbiB0aGUgbm9kZSwgc3RvcCBpZiBpdCdzIG5vdFxuICAgICAgLy8gdGhlcmUgKG1heSBoYXZlIGJlZW4gbW9kaWZpZWQgdGhyb3VnaCBvdGhlciBtZWFucywgaW4gd2hpY2hcbiAgICAgIC8vIGNhc2UgaXQgc2hvdWxkIG92ZXJ3cml0dGVuKVxuICAgICAgdmFyIHRleHQgPSB0ZXh0Tm9kZS5ub2RlVmFsdWU7XG4gICAgICB2YXIgdGV4dFBvcyA9IGZpbmRUZXh0SW5GcmFnbWVudCh0aGlzLm5vZGUuY29udGVudCwgdGV4dCwgZnJvbSAtIHBvcywgdG8gLSBwb3MpO1xuICAgICAgcmV0dXJuIHRleHRQb3MgPCAwID8gbnVsbCA6IHtub2RlOiB0ZXh0Tm9kZSwgcG9zOiB0ZXh0UG9zLCB0ZXh0OiB0ZXh0fVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge25vZGU6IHRleHROb2RlLCBwb3M6IC0xfVxuICAgIH1cbiAgfTtcblxuICBOb2RlVmlld0Rlc2MucHJvdG90eXBlLnByb3RlY3RMb2NhbENvbXBvc2l0aW9uID0gZnVuY3Rpb24gcHJvdGVjdExvY2FsQ29tcG9zaXRpb24gKHZpZXcsIHJlZikge1xuICAgIHZhciBub2RlID0gcmVmLm5vZGU7XG4gICAgdmFyIHBvcyA9IHJlZi5wb3M7XG4gICAgdmFyIHRleHQgPSByZWYudGV4dDtcblxuICAgIC8vIFRoZSBub2RlIGlzIGFscmVhZHkgcGFydCBvZiBhIGxvY2FsIHZpZXcgZGVzYywgbGVhdmUgaXQgdGhlcmVcbiAgICBpZiAodGhpcy5nZXREZXNjKG5vZGUpKSB7IHJldHVybiB9XG5cbiAgICAvLyBDcmVhdGUgYSBjb21wb3NpdGlvbiB2aWV3IGZvciB0aGUgb3JwaGFuZWQgbm9kZXNcbiAgICB2YXIgdG9wTm9kZSA9IG5vZGU7XG4gICAgZm9yICg7OyB0b3BOb2RlID0gdG9wTm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICBpZiAodG9wTm9kZS5wYXJlbnROb2RlID09IHRoaXMuY29udGVudERPTSkgeyBicmVhayB9XG4gICAgICB3aGlsZSAodG9wTm9kZS5wcmV2aW91c1NpYmxpbmcpIHsgdG9wTm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRvcE5vZGUucHJldmlvdXNTaWJsaW5nKTsgfVxuICAgICAgd2hpbGUgKHRvcE5vZGUubmV4dFNpYmxpbmcpIHsgdG9wTm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRvcE5vZGUubmV4dFNpYmxpbmcpOyB9XG4gICAgICBpZiAodG9wTm9kZS5wbVZpZXdEZXNjKSB7IHRvcE5vZGUucG1WaWV3RGVzYyA9IG51bGw7IH1cbiAgICB9XG4gICAgdmFyIGRlc2MgPSBuZXcgQ29tcG9zaXRpb25WaWV3RGVzYyh0aGlzLCB0b3BOb2RlLCBub2RlLCB0ZXh0KTtcbiAgICB2aWV3LmNvbXBvc2l0aW9uTm9kZXMucHVzaChkZXNjKTtcblxuICAgIC8vIFBhdGNoIHVwIHRoaXMuY2hpbGRyZW4gdG8gY29udGFpbiB0aGUgY29tcG9zaXRpb24gdmlld1xuICAgIHRoaXMuY2hpbGRyZW4gPSByZXBsYWNlTm9kZXModGhpcy5jaGlsZHJlbiwgcG9zLCBwb3MgKyB0ZXh0Lmxlbmd0aCwgdmlldywgZGVzYyk7XG4gIH07XG5cbiAgLy8gOiAoTm9kZSwgW0RlY29yYXRpb25dLCBEZWNvcmF0aW9uU291cmNlLCBFZGl0b3JWaWV3KSDihpIgYm9vbFxuICAvLyBJZiB0aGlzIGRlc2MgYmUgdXBkYXRlZCB0byBtYXRjaCB0aGUgZ2l2ZW4gbm9kZSBkZWNvcmF0aW9uLFxuICAvLyBkbyBzbyBhbmQgcmV0dXJuIHRydWUuXG4gIE5vZGVWaWV3RGVzYy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldykge1xuICAgIGlmICh0aGlzLmRpcnR5ID09IE5PREVfRElSVFkgfHxcbiAgICAgICAgIW5vZGUuc2FtZU1hcmt1cCh0aGlzLm5vZGUpKSB7IHJldHVybiBmYWxzZSB9XG4gICAgdGhpcy51cGRhdGVJbm5lcihub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldyk7XG4gICAgcmV0dXJuIHRydWVcbiAgfTtcblxuICBOb2RlVmlld0Rlc2MucHJvdG90eXBlLnVwZGF0ZUlubmVyID0gZnVuY3Rpb24gdXBkYXRlSW5uZXIgKG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCB2aWV3KSB7XG4gICAgdGhpcy51cGRhdGVPdXRlckRlY28ob3V0ZXJEZWNvKTtcbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuICAgIHRoaXMuaW5uZXJEZWNvID0gaW5uZXJEZWNvO1xuICAgIGlmICh0aGlzLmNvbnRlbnRET00pIHsgdGhpcy51cGRhdGVDaGlsZHJlbih2aWV3LCB0aGlzLnBvc0F0U3RhcnQpOyB9XG4gICAgdGhpcy5kaXJ0eSA9IE5PVF9ESVJUWTtcbiAgfTtcblxuICBOb2RlVmlld0Rlc2MucHJvdG90eXBlLnVwZGF0ZU91dGVyRGVjbyA9IGZ1bmN0aW9uIHVwZGF0ZU91dGVyRGVjbyAob3V0ZXJEZWNvKSB7XG4gICAgaWYgKHNhbWVPdXRlckRlY28ob3V0ZXJEZWNvLCB0aGlzLm91dGVyRGVjbykpIHsgcmV0dXJuIH1cbiAgICB2YXIgbmVlZHNXcmFwID0gdGhpcy5ub2RlRE9NLm5vZGVUeXBlICE9IDE7XG4gICAgdmFyIG9sZERPTSA9IHRoaXMuZG9tO1xuICAgIHRoaXMuZG9tID0gcGF0Y2hPdXRlckRlY28odGhpcy5kb20sIHRoaXMubm9kZURPTSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXB1dGVPdXRlckRlY28odGhpcy5vdXRlckRlY28sIHRoaXMubm9kZSwgbmVlZHNXcmFwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXB1dGVPdXRlckRlY28ob3V0ZXJEZWNvLCB0aGlzLm5vZGUsIG5lZWRzV3JhcCkpO1xuICAgIGlmICh0aGlzLmRvbSAhPSBvbGRET00pIHtcbiAgICAgIG9sZERPTS5wbVZpZXdEZXNjID0gbnVsbDtcbiAgICAgIHRoaXMuZG9tLnBtVmlld0Rlc2MgPSB0aGlzO1xuICAgIH1cbiAgICB0aGlzLm91dGVyRGVjbyA9IG91dGVyRGVjbztcbiAgfTtcblxuICAvLyBNYXJrIHRoaXMgbm9kZSBhcyBiZWluZyB0aGUgc2VsZWN0ZWQgbm9kZS5cbiAgTm9kZVZpZXdEZXNjLnByb3RvdHlwZS5zZWxlY3ROb2RlID0gZnVuY3Rpb24gc2VsZWN0Tm9kZSAoKSB7XG4gICAgdGhpcy5ub2RlRE9NLmNsYXNzTGlzdC5hZGQoXCJQcm9zZU1pcnJvci1zZWxlY3RlZG5vZGVcIik7XG4gICAgaWYgKHRoaXMuY29udGVudERPTSB8fCAhdGhpcy5ub2RlLnR5cGUuc3BlYy5kcmFnZ2FibGUpIHsgdGhpcy5kb20uZHJhZ2dhYmxlID0gdHJ1ZTsgfVxuICB9O1xuXG4gIC8vIFJlbW92ZSBzZWxlY3RlZCBub2RlIG1hcmtpbmcgZnJvbSB0aGlzIG5vZGUuXG4gIE5vZGVWaWV3RGVzYy5wcm90b3R5cGUuZGVzZWxlY3ROb2RlID0gZnVuY3Rpb24gZGVzZWxlY3ROb2RlICgpIHtcbiAgICB0aGlzLm5vZGVET00uY2xhc3NMaXN0LnJlbW92ZShcIlByb3NlTWlycm9yLXNlbGVjdGVkbm9kZVwiKTtcbiAgICBpZiAodGhpcy5jb250ZW50RE9NIHx8ICF0aGlzLm5vZGUudHlwZS5zcGVjLmRyYWdnYWJsZSkgeyB0aGlzLmRvbS5yZW1vdmVBdHRyaWJ1dGUoXCJkcmFnZ2FibGVcIik7IH1cbiAgfTtcblxuICBwcm90b3R5cGVBY2Nlc3NvcnMkMy5kb21BdG9tLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMubm9kZS5pc0F0b20gfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggTm9kZVZpZXdEZXNjLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDMgKTtcblxuICByZXR1cm4gTm9kZVZpZXdEZXNjO1xufShWaWV3RGVzYykpO1xuXG4vLyBDcmVhdGUgYSB2aWV3IGRlc2MgZm9yIHRoZSB0b3AtbGV2ZWwgZG9jdW1lbnQgbm9kZSwgdG8gYmUgZXhwb3J0ZWRcbi8vIGFuZCB1c2VkIGJ5IHRoZSB2aWV3IGNsYXNzLlxuZnVuY3Rpb24gZG9jVmlld0Rlc2MoZG9jLCBvdXRlckRlY28sIGlubmVyRGVjbywgZG9tLCB2aWV3KSB7XG4gIGFwcGx5T3V0ZXJEZWNvKGRvbSwgb3V0ZXJEZWNvLCBkb2MpO1xuICByZXR1cm4gbmV3IE5vZGVWaWV3RGVzYyhudWxsLCBkb2MsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBkb20sIGRvbSwgZG9tLCB2aWV3LCAwKVxufVxuXG52YXIgVGV4dFZpZXdEZXNjID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoTm9kZVZpZXdEZXNjKSB7XG4gIGZ1bmN0aW9uIFRleHRWaWV3RGVzYyhwYXJlbnQsIG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBkb20sIG5vZGVET00sIHZpZXcpIHtcbiAgICBOb2RlVmlld0Rlc2MuY2FsbCh0aGlzLCBwYXJlbnQsIG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCBkb20sIG51bGwsIG5vZGVET00sIHZpZXcpO1xuICB9XG5cbiAgaWYgKCBOb2RlVmlld0Rlc2MgKSBUZXh0Vmlld0Rlc2MuX19wcm90b19fID0gTm9kZVZpZXdEZXNjO1xuICBUZXh0Vmlld0Rlc2MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTm9kZVZpZXdEZXNjICYmIE5vZGVWaWV3RGVzYy5wcm90b3R5cGUgKTtcbiAgVGV4dFZpZXdEZXNjLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRleHRWaWV3RGVzYztcblxuICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzJDQgPSB7IGRvbUF0b206IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuICBUZXh0Vmlld0Rlc2MucHJvdG90eXBlLnBhcnNlUnVsZSA9IGZ1bmN0aW9uIHBhcnNlUnVsZSAoKSB7XG4gICAgdmFyIHNraXAgPSB0aGlzLm5vZGVET00ucGFyZW50Tm9kZTtcbiAgICB3aGlsZSAoc2tpcCAmJiBza2lwICE9IHRoaXMuZG9tICYmICFza2lwLnBtSXNEZWNvKSB7IHNraXAgPSBza2lwLnBhcmVudE5vZGU7IH1cbiAgICByZXR1cm4ge3NraXA6IHNraXAgfHwgdHJ1ZX1cbiAgfTtcblxuICBUZXh0Vmlld0Rlc2MucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSAobm9kZSwgb3V0ZXJEZWNvLCBfLCB2aWV3KSB7XG4gICAgaWYgKHRoaXMuZGlydHkgPT0gTk9ERV9ESVJUWSB8fCAodGhpcy5kaXJ0eSAhPSBOT1RfRElSVFkgJiYgIXRoaXMuaW5QYXJlbnQoKSkgfHxcbiAgICAgICAgIW5vZGUuc2FtZU1hcmt1cCh0aGlzLm5vZGUpKSB7IHJldHVybiBmYWxzZSB9XG4gICAgdGhpcy51cGRhdGVPdXRlckRlY28ob3V0ZXJEZWNvKTtcbiAgICBpZiAoKHRoaXMuZGlydHkgIT0gTk9UX0RJUlRZIHx8IG5vZGUudGV4dCAhPSB0aGlzLm5vZGUudGV4dCkgJiYgbm9kZS50ZXh0ICE9IHRoaXMubm9kZURPTS5ub2RlVmFsdWUpIHtcbiAgICAgIHRoaXMubm9kZURPTS5ub2RlVmFsdWUgPSBub2RlLnRleHQ7XG4gICAgICBpZiAodmlldy50cmFja1dyaXRlcyA9PSB0aGlzLm5vZGVET00pIHsgdmlldy50cmFja1dyaXRlcyA9IG51bGw7IH1cbiAgICB9XG4gICAgdGhpcy5ub2RlID0gbm9kZTtcbiAgICB0aGlzLmRpcnR5ID0gTk9UX0RJUlRZO1xuICAgIHJldHVybiB0cnVlXG4gIH07XG5cbiAgVGV4dFZpZXdEZXNjLnByb3RvdHlwZS5pblBhcmVudCA9IGZ1bmN0aW9uIGluUGFyZW50ICgpIHtcbiAgICB2YXIgcGFyZW50RE9NID0gdGhpcy5wYXJlbnQuY29udGVudERPTTtcbiAgICBmb3IgKHZhciBuID0gdGhpcy5ub2RlRE9NOyBuOyBuID0gbi5wYXJlbnROb2RlKSB7IGlmIChuID09IHBhcmVudERPTSkgeyByZXR1cm4gdHJ1ZSB9IH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfTtcblxuICBUZXh0Vmlld0Rlc2MucHJvdG90eXBlLmRvbUZyb21Qb3MgPSBmdW5jdGlvbiBkb21Gcm9tUG9zIChwb3MpIHtcbiAgICByZXR1cm4ge25vZGU6IHRoaXMubm9kZURPTSwgb2Zmc2V0OiBwb3N9XG4gIH07XG5cbiAgVGV4dFZpZXdEZXNjLnByb3RvdHlwZS5sb2NhbFBvc0Zyb21ET00gPSBmdW5jdGlvbiBsb2NhbFBvc0Zyb21ET00gKGRvbSwgb2Zmc2V0LCBiaWFzKSB7XG4gICAgaWYgKGRvbSA9PSB0aGlzLm5vZGVET00pIHsgcmV0dXJuIHRoaXMucG9zQXRTdGFydCArIE1hdGgubWluKG9mZnNldCwgdGhpcy5ub2RlLnRleHQubGVuZ3RoKSB9XG4gICAgcmV0dXJuIE5vZGVWaWV3RGVzYy5wcm90b3R5cGUubG9jYWxQb3NGcm9tRE9NLmNhbGwodGhpcywgZG9tLCBvZmZzZXQsIGJpYXMpXG4gIH07XG5cbiAgVGV4dFZpZXdEZXNjLnByb3RvdHlwZS5pZ25vcmVNdXRhdGlvbiA9IGZ1bmN0aW9uIGlnbm9yZU11dGF0aW9uIChtdXRhdGlvbikge1xuICAgIHJldHVybiBtdXRhdGlvbi50eXBlICE9IFwiY2hhcmFjdGVyRGF0YVwiICYmIG11dGF0aW9uLnR5cGUgIT0gXCJzZWxlY3Rpb25cIlxuICB9O1xuXG4gIFRleHRWaWV3RGVzYy5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoZnJvbSwgdG8sIHZpZXcpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMubm9kZS5jdXQoZnJvbSwgdG8pLCBkb20gPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShub2RlLnRleHQpO1xuICAgIHJldHVybiBuZXcgVGV4dFZpZXdEZXNjKHRoaXMucGFyZW50LCBub2RlLCB0aGlzLm91dGVyRGVjbywgdGhpcy5pbm5lckRlY28sIGRvbSwgZG9tLCB2aWV3KVxuICB9O1xuXG4gIFRleHRWaWV3RGVzYy5wcm90b3R5cGUubWFya0RpcnR5ID0gZnVuY3Rpb24gbWFya0RpcnR5IChmcm9tLCB0bykge1xuICAgIE5vZGVWaWV3RGVzYy5wcm90b3R5cGUubWFya0RpcnR5LmNhbGwodGhpcywgZnJvbSwgdG8pO1xuICAgIGlmICh0aGlzLmRvbSAhPSB0aGlzLm5vZGVET00gJiYgKGZyb20gPT0gMCB8fCB0byA9PSB0aGlzLm5vZGVET00ubm9kZVZhbHVlLmxlbmd0aCkpXG4gICAgICB7IHRoaXMuZGlydHkgPSBOT0RFX0RJUlRZOyB9XG4gIH07XG5cbiAgcHJvdG90eXBlQWNjZXNzb3JzJDQuZG9tQXRvbS5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZSB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBUZXh0Vmlld0Rlc2MucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkNCApO1xuXG4gIHJldHVybiBUZXh0Vmlld0Rlc2M7XG59KE5vZGVWaWV3RGVzYykpO1xuXG4vLyBBIGR1bW15IGRlc2MgdXNlZCB0byB0YWcgdHJhaWxpbmcgQlIgb3IgSU1HIG5vZGVzIGNyZWF0ZWQgdG8gd29ya1xuLy8gYXJvdW5kIGNvbnRlbnRFZGl0YWJsZSB0ZXJyaWJsZW5lc3MuXG52YXIgVHJhaWxpbmdIYWNrVmlld0Rlc2MgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChWaWV3RGVzYykge1xuICBmdW5jdGlvbiBUcmFpbGluZ0hhY2tWaWV3RGVzYyAoKSB7XG4gICAgVmlld0Rlc2MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGlmICggVmlld0Rlc2MgKSBUcmFpbGluZ0hhY2tWaWV3RGVzYy5fX3Byb3RvX18gPSBWaWV3RGVzYztcbiAgVHJhaWxpbmdIYWNrVmlld0Rlc2MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggVmlld0Rlc2MgJiYgVmlld0Rlc2MucHJvdG90eXBlICk7XG4gIFRyYWlsaW5nSGFja1ZpZXdEZXNjLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRyYWlsaW5nSGFja1ZpZXdEZXNjO1xuXG4gIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMkNSA9IHsgZG9tQXRvbTogeyBjb25maWd1cmFibGU6IHRydWUgfSxpZ25vcmVGb3JDb29yZHM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuICBUcmFpbGluZ0hhY2tWaWV3RGVzYy5wcm90b3R5cGUucGFyc2VSdWxlID0gZnVuY3Rpb24gcGFyc2VSdWxlICgpIHsgcmV0dXJuIHtpZ25vcmU6IHRydWV9IH07XG4gIFRyYWlsaW5nSGFja1ZpZXdEZXNjLnByb3RvdHlwZS5tYXRjaGVzSGFjayA9IGZ1bmN0aW9uIG1hdGNoZXNIYWNrIChub2RlTmFtZSkgeyByZXR1cm4gdGhpcy5kaXJ0eSA9PSBOT1RfRElSVFkgJiYgdGhpcy5kb20ubm9kZU5hbWUgPT0gbm9kZU5hbWUgfTtcbiAgcHJvdG90eXBlQWNjZXNzb3JzJDUuZG9tQXRvbS5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlIH07XG4gIHByb3RvdHlwZUFjY2Vzc29ycyQ1Lmlnbm9yZUZvckNvb3Jkcy5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmRvbS5ub2RlTmFtZSA9PSBcIklNR1wiIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFRyYWlsaW5nSGFja1ZpZXdEZXNjLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDUgKTtcblxuICByZXR1cm4gVHJhaWxpbmdIYWNrVmlld0Rlc2M7XG59KFZpZXdEZXNjKSk7XG5cbi8vIEEgc2VwYXJhdGUgc3ViY2xhc3MgaXMgdXNlZCBmb3IgY3VzdG9taXplZCBub2RlIHZpZXdzLCBzbyB0aGF0IHRoZVxuLy8gZXh0cmEgY2hlY2tzIG9ubHkgaGF2ZSB0byBiZSBtYWRlIGZvciBub2RlcyB0aGF0IGFyZSBhY3R1YWxseVxuLy8gY3VzdG9taXplZC5cbnZhciBDdXN0b21Ob2RlVmlld0Rlc2MgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChOb2RlVmlld0Rlc2MpIHtcbiAgZnVuY3Rpb24gQ3VzdG9tTm9kZVZpZXdEZXNjKHBhcmVudCwgbm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIGRvbSwgY29udGVudERPTSwgbm9kZURPTSwgc3BlYywgdmlldywgcG9zKSB7XG4gICAgTm9kZVZpZXdEZXNjLmNhbGwodGhpcywgcGFyZW50LCBub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgZG9tLCBjb250ZW50RE9NLCBub2RlRE9NLCB2aWV3LCBwb3MpO1xuICAgIHRoaXMuc3BlYyA9IHNwZWM7XG4gIH1cblxuICBpZiAoIE5vZGVWaWV3RGVzYyApIEN1c3RvbU5vZGVWaWV3RGVzYy5fX3Byb3RvX18gPSBOb2RlVmlld0Rlc2M7XG4gIEN1c3RvbU5vZGVWaWV3RGVzYy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBOb2RlVmlld0Rlc2MgJiYgTm9kZVZpZXdEZXNjLnByb3RvdHlwZSApO1xuICBDdXN0b21Ob2RlVmlld0Rlc2MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ3VzdG9tTm9kZVZpZXdEZXNjO1xuXG4gIC8vIEEgY3VzdG9tIGB1cGRhdGVgIG1ldGhvZCBnZXRzIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSB1cGRhdGUgZ29lc1xuICAvLyB0aHJvdWdoLiBJZiBpdCBkb2VzLCBhbmQgdGhlcmUncyBhIGBjb250ZW50RE9NYCBub2RlLCBvdXIgbG9naWNcbiAgLy8gdXBkYXRlcyB0aGUgY2hpbGRyZW4uXG4gIEN1c3RvbU5vZGVWaWV3RGVzYy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldykge1xuICAgIGlmICh0aGlzLmRpcnR5ID09IE5PREVfRElSVFkpIHsgcmV0dXJuIGZhbHNlIH1cbiAgICBpZiAodGhpcy5zcGVjLnVwZGF0ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuc3BlYy51cGRhdGUobm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28pO1xuICAgICAgaWYgKHJlc3VsdCkgeyB0aGlzLnVwZGF0ZUlubmVyKG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCB2aWV3KTsgfVxuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH0gZWxzZSBpZiAoIXRoaXMuY29udGVudERPTSAmJiAhbm9kZS5pc0xlYWYpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gTm9kZVZpZXdEZXNjLnByb3RvdHlwZS51cGRhdGUuY2FsbCh0aGlzLCBub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldylcbiAgICB9XG4gIH07XG5cbiAgQ3VzdG9tTm9kZVZpZXdEZXNjLnByb3RvdHlwZS5zZWxlY3ROb2RlID0gZnVuY3Rpb24gc2VsZWN0Tm9kZSAoKSB7XG4gICAgdGhpcy5zcGVjLnNlbGVjdE5vZGUgPyB0aGlzLnNwZWMuc2VsZWN0Tm9kZSgpIDogTm9kZVZpZXdEZXNjLnByb3RvdHlwZS5zZWxlY3ROb2RlLmNhbGwodGhpcyk7XG4gIH07XG5cbiAgQ3VzdG9tTm9kZVZpZXdEZXNjLnByb3RvdHlwZS5kZXNlbGVjdE5vZGUgPSBmdW5jdGlvbiBkZXNlbGVjdE5vZGUgKCkge1xuICAgIHRoaXMuc3BlYy5kZXNlbGVjdE5vZGUgPyB0aGlzLnNwZWMuZGVzZWxlY3ROb2RlKCkgOiBOb2RlVmlld0Rlc2MucHJvdG90eXBlLmRlc2VsZWN0Tm9kZS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIEN1c3RvbU5vZGVWaWV3RGVzYy5wcm90b3R5cGUuc2V0U2VsZWN0aW9uID0gZnVuY3Rpb24gc2V0U2VsZWN0aW9uIChhbmNob3IsIGhlYWQsIHJvb3QsIGZvcmNlKSB7XG4gICAgdGhpcy5zcGVjLnNldFNlbGVjdGlvbiA/IHRoaXMuc3BlYy5zZXRTZWxlY3Rpb24oYW5jaG9yLCBoZWFkLCByb290KVxuICAgICAgOiBOb2RlVmlld0Rlc2MucHJvdG90eXBlLnNldFNlbGVjdGlvbi5jYWxsKHRoaXMsIGFuY2hvciwgaGVhZCwgcm9vdCwgZm9yY2UpO1xuICB9O1xuXG4gIEN1c3RvbU5vZGVWaWV3RGVzYy5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICAgIGlmICh0aGlzLnNwZWMuZGVzdHJveSkgeyB0aGlzLnNwZWMuZGVzdHJveSgpOyB9XG4gICAgTm9kZVZpZXdEZXNjLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gIH07XG5cbiAgQ3VzdG9tTm9kZVZpZXdEZXNjLnByb3RvdHlwZS5zdG9wRXZlbnQgPSBmdW5jdGlvbiBzdG9wRXZlbnQgKGV2ZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuc3BlYy5zdG9wRXZlbnQgPyB0aGlzLnNwZWMuc3RvcEV2ZW50KGV2ZW50KSA6IGZhbHNlXG4gIH07XG5cbiAgQ3VzdG9tTm9kZVZpZXdEZXNjLnByb3RvdHlwZS5pZ25vcmVNdXRhdGlvbiA9IGZ1bmN0aW9uIGlnbm9yZU11dGF0aW9uIChtdXRhdGlvbikge1xuICAgIHJldHVybiB0aGlzLnNwZWMuaWdub3JlTXV0YXRpb24gPyB0aGlzLnNwZWMuaWdub3JlTXV0YXRpb24obXV0YXRpb24pIDogTm9kZVZpZXdEZXNjLnByb3RvdHlwZS5pZ25vcmVNdXRhdGlvbi5jYWxsKHRoaXMsIG11dGF0aW9uKVxuICB9O1xuXG4gIHJldHVybiBDdXN0b21Ob2RlVmlld0Rlc2M7XG59KE5vZGVWaWV3RGVzYykpO1xuXG4vLyA6IChkb20uTm9kZSwgW1ZpZXdEZXNjXSlcbi8vIFN5bmMgdGhlIGNvbnRlbnQgb2YgdGhlIGdpdmVuIERPTSBub2RlIHdpdGggdGhlIG5vZGVzIGFzc29jaWF0ZWRcbi8vIHdpdGggdGhlIGdpdmVuIGFycmF5IG9mIHZpZXcgZGVzY3MsIHJlY3Vyc2luZyBpbnRvIG1hcmsgZGVzY3Ncbi8vIGJlY2F1c2UgdGhpcyBzaG91bGQgc3luYyB0aGUgc3VidHJlZSBmb3IgYSB3aG9sZSBub2RlIGF0IGEgdGltZS5cbmZ1bmN0aW9uIHJlbmRlckRlc2NzKHBhcmVudERPTSwgZGVzY3MsIHZpZXcpIHtcbiAgdmFyIGRvbSA9IHBhcmVudERPTS5maXJzdENoaWxkLCB3cml0dGVuID0gZmFsc2U7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGVzY3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzYyA9IGRlc2NzW2ldLCBjaGlsZERPTSA9IGRlc2MuZG9tO1xuICAgIGlmIChjaGlsZERPTS5wYXJlbnROb2RlID09IHBhcmVudERPTSkge1xuICAgICAgd2hpbGUgKGNoaWxkRE9NICE9IGRvbSkgeyBkb20gPSBybShkb20pOyB3cml0dGVuID0gdHJ1ZTsgfVxuICAgICAgZG9tID0gZG9tLm5leHRTaWJsaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICB3cml0dGVuID0gdHJ1ZTtcbiAgICAgIHBhcmVudERPTS5pbnNlcnRCZWZvcmUoY2hpbGRET00sIGRvbSk7XG4gICAgfVxuICAgIGlmIChkZXNjIGluc3RhbmNlb2YgTWFya1ZpZXdEZXNjKSB7XG4gICAgICB2YXIgcG9zID0gZG9tID8gZG9tLnByZXZpb3VzU2libGluZyA6IHBhcmVudERPTS5sYXN0Q2hpbGQ7XG4gICAgICByZW5kZXJEZXNjcyhkZXNjLmNvbnRlbnRET00sIGRlc2MuY2hpbGRyZW4sIHZpZXcpO1xuICAgICAgZG9tID0gcG9zID8gcG9zLm5leHRTaWJsaW5nIDogcGFyZW50RE9NLmZpcnN0Q2hpbGQ7XG4gICAgfVxuICB9XG4gIHdoaWxlIChkb20pIHsgZG9tID0gcm0oZG9tKTsgd3JpdHRlbiA9IHRydWU7IH1cbiAgaWYgKHdyaXR0ZW4gJiYgdmlldy50cmFja1dyaXRlcyA9PSBwYXJlbnRET00pIHsgdmlldy50cmFja1dyaXRlcyA9IG51bGw7IH1cbn1cblxuZnVuY3Rpb24gT3V0ZXJEZWNvTGV2ZWwobm9kZU5hbWUpIHtcbiAgaWYgKG5vZGVOYW1lKSB7IHRoaXMubm9kZU5hbWUgPSBub2RlTmFtZTsgfVxufVxuT3V0ZXJEZWNvTGV2ZWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxudmFyIG5vRGVjbyA9IFtuZXcgT3V0ZXJEZWNvTGV2ZWxdO1xuXG5mdW5jdGlvbiBjb21wdXRlT3V0ZXJEZWNvKG91dGVyRGVjbywgbm9kZSwgbmVlZHNXcmFwKSB7XG4gIGlmIChvdXRlckRlY28ubGVuZ3RoID09IDApIHsgcmV0dXJuIG5vRGVjbyB9XG5cbiAgdmFyIHRvcCA9IG5lZWRzV3JhcCA/IG5vRGVjb1swXSA6IG5ldyBPdXRlckRlY29MZXZlbCwgcmVzdWx0ID0gW3RvcF07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdXRlckRlY28ubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgYXR0cnMgPSBvdXRlckRlY29baV0udHlwZS5hdHRycztcbiAgICBpZiAoIWF0dHJzKSB7IGNvbnRpbnVlIH1cbiAgICBpZiAoYXR0cnMubm9kZU5hbWUpXG4gICAgICB7IHJlc3VsdC5wdXNoKHRvcCA9IG5ldyBPdXRlckRlY29MZXZlbChhdHRycy5ub2RlTmFtZSkpOyB9XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIGF0dHJzKSB7XG4gICAgICB2YXIgdmFsID0gYXR0cnNbbmFtZV07XG4gICAgICBpZiAodmFsID09IG51bGwpIHsgY29udGludWUgfVxuICAgICAgaWYgKG5lZWRzV3JhcCAmJiByZXN1bHQubGVuZ3RoID09IDEpXG4gICAgICAgIHsgcmVzdWx0LnB1c2godG9wID0gbmV3IE91dGVyRGVjb0xldmVsKG5vZGUuaXNJbmxpbmUgPyBcInNwYW5cIiA6IFwiZGl2XCIpKTsgfVxuICAgICAgaWYgKG5hbWUgPT0gXCJjbGFzc1wiKSB7IHRvcC5jbGFzcyA9ICh0b3AuY2xhc3MgPyB0b3AuY2xhc3MgKyBcIiBcIiA6IFwiXCIpICsgdmFsOyB9XG4gICAgICBlbHNlIGlmIChuYW1lID09IFwic3R5bGVcIikgeyB0b3Auc3R5bGUgPSAodG9wLnN0eWxlID8gdG9wLnN0eWxlICsgXCI7XCIgOiBcIlwiKSArIHZhbDsgfVxuICAgICAgZWxzZSBpZiAobmFtZSAhPSBcIm5vZGVOYW1lXCIpIHsgdG9wW25hbWVdID0gdmFsOyB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBwYXRjaE91dGVyRGVjbyhvdXRlckRPTSwgbm9kZURPTSwgcHJldkNvbXB1dGVkLCBjdXJDb21wdXRlZCkge1xuICAvLyBTaG9ydGN1dCBmb3IgdHJpdmlhbCBjYXNlXG4gIGlmIChwcmV2Q29tcHV0ZWQgPT0gbm9EZWNvICYmIGN1ckNvbXB1dGVkID09IG5vRGVjbykgeyByZXR1cm4gbm9kZURPTSB9XG5cbiAgdmFyIGN1ckRPTSA9IG5vZGVET007XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY3VyQ29tcHV0ZWQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVjbyA9IGN1ckNvbXB1dGVkW2ldLCBwcmV2ID0gcHJldkNvbXB1dGVkW2ldO1xuICAgIGlmIChpKSB7XG4gICAgICB2YXIgcGFyZW50ID0gKHZvaWQgMCk7XG4gICAgICBpZiAocHJldiAmJiBwcmV2Lm5vZGVOYW1lID09IGRlY28ubm9kZU5hbWUgJiYgY3VyRE9NICE9IG91dGVyRE9NICYmXG4gICAgICAgICAgKHBhcmVudCA9IGN1ckRPTS5wYXJlbnROb2RlKSAmJiBwYXJlbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09IGRlY28ubm9kZU5hbWUpIHtcbiAgICAgICAgY3VyRE9NID0gcGFyZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChkZWNvLm5vZGVOYW1lKTtcbiAgICAgICAgcGFyZW50LnBtSXNEZWNvID0gdHJ1ZTtcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGN1ckRPTSk7XG4gICAgICAgIHByZXYgPSBub0RlY29bMF07XG4gICAgICAgIGN1ckRPTSA9IHBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgcGF0Y2hBdHRyaWJ1dGVzKGN1ckRPTSwgcHJldiB8fCBub0RlY29bMF0sIGRlY28pO1xuICB9XG4gIHJldHVybiBjdXJET01cbn1cblxuZnVuY3Rpb24gcGF0Y2hBdHRyaWJ1dGVzKGRvbSwgcHJldiwgY3VyKSB7XG4gIGZvciAodmFyIG5hbWUgaW4gcHJldilcbiAgICB7IGlmIChuYW1lICE9IFwiY2xhc3NcIiAmJiBuYW1lICE9IFwic3R5bGVcIiAmJiBuYW1lICE9IFwibm9kZU5hbWVcIiAmJiAhKG5hbWUgaW4gY3VyKSlcbiAgICAgIHsgZG9tLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTsgfSB9XG4gIGZvciAodmFyIG5hbWUkMSBpbiBjdXIpXG4gICAgeyBpZiAobmFtZSQxICE9IFwiY2xhc3NcIiAmJiBuYW1lJDEgIT0gXCJzdHlsZVwiICYmIG5hbWUkMSAhPSBcIm5vZGVOYW1lXCIgJiYgY3VyW25hbWUkMV0gIT0gcHJldltuYW1lJDFdKVxuICAgICAgeyBkb20uc2V0QXR0cmlidXRlKG5hbWUkMSwgY3VyW25hbWUkMV0pOyB9IH1cbiAgaWYgKHByZXYuY2xhc3MgIT0gY3VyLmNsYXNzKSB7XG4gICAgdmFyIHByZXZMaXN0ID0gcHJldi5jbGFzcyA/IHByZXYuY2xhc3Muc3BsaXQoXCIgXCIpLmZpbHRlcihCb29sZWFuKSA6IG5vdGhpbmc7XG4gICAgdmFyIGN1ckxpc3QgPSBjdXIuY2xhc3MgPyBjdXIuY2xhc3Muc3BsaXQoXCIgXCIpLmZpbHRlcihCb29sZWFuKSA6IG5vdGhpbmc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmV2TGlzdC5sZW5ndGg7IGkrKykgeyBpZiAoY3VyTGlzdC5pbmRleE9mKHByZXZMaXN0W2ldKSA9PSAtMSlcbiAgICAgIHsgZG9tLmNsYXNzTGlzdC5yZW1vdmUocHJldkxpc3RbaV0pOyB9IH1cbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjdXJMaXN0Lmxlbmd0aDsgaSQxKyspIHsgaWYgKHByZXZMaXN0LmluZGV4T2YoY3VyTGlzdFtpJDFdKSA9PSAtMSlcbiAgICAgIHsgZG9tLmNsYXNzTGlzdC5hZGQoY3VyTGlzdFtpJDFdKTsgfSB9XG4gIH1cbiAgaWYgKHByZXYuc3R5bGUgIT0gY3VyLnN0eWxlKSB7XG4gICAgaWYgKHByZXYuc3R5bGUpIHtcbiAgICAgIHZhciBwcm9wID0gL1xccyooW1xcd1xcLVxceGExLVxcdWZmZmZdKylcXHMqOig/OlwiKD86XFxcXC58W15cIl0pKlwifCcoPzpcXFxcLnxbXiddKSonfFxcKC4qP1xcKXxbXjtdKSovZywgbTtcbiAgICAgIHdoaWxlIChtID0gcHJvcC5leGVjKHByZXYuc3R5bGUpKVxuICAgICAgICB7IGRvbS5zdHlsZS5yZW1vdmVQcm9wZXJ0eShtWzFdKTsgfVxuICAgIH1cbiAgICBpZiAoY3VyLnN0eWxlKVxuICAgICAgeyBkb20uc3R5bGUuY3NzVGV4dCArPSBjdXIuc3R5bGU7IH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU91dGVyRGVjbyhkb20sIGRlY28sIG5vZGUpIHtcbiAgcmV0dXJuIHBhdGNoT3V0ZXJEZWNvKGRvbSwgZG9tLCBub0RlY28sIGNvbXB1dGVPdXRlckRlY28oZGVjbywgbm9kZSwgZG9tLm5vZGVUeXBlICE9IDEpKVxufVxuXG4vLyA6IChbRGVjb3JhdGlvbl0sIFtEZWNvcmF0aW9uXSkg4oaSIGJvb2xcbmZ1bmN0aW9uIHNhbWVPdXRlckRlY28oYSwgYikge1xuICBpZiAoYS5sZW5ndGggIT0gYi5sZW5ndGgpIHsgcmV0dXJuIGZhbHNlIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7IGlmICghYVtpXS50eXBlLmVxKGJbaV0udHlwZSkpIHsgcmV0dXJuIGZhbHNlIH0gfVxuICByZXR1cm4gdHJ1ZVxufVxuXG4vLyBSZW1vdmUgYSBET00gbm9kZSBhbmQgcmV0dXJuIGl0cyBuZXh0IHNpYmxpbmcuXG5mdW5jdGlvbiBybShkb20pIHtcbiAgdmFyIG5leHQgPSBkb20ubmV4dFNpYmxpbmc7XG4gIGRvbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRvbSk7XG4gIHJldHVybiBuZXh0XG59XG5cbi8vIEhlbHBlciBjbGFzcyBmb3IgaW5jcmVtZW50YWxseSB1cGRhdGluZyBhIHRyZWUgb2YgbWFyayBkZXNjcyBhbmRcbi8vIHRoZSB3aWRnZXQgYW5kIG5vZGUgZGVzY3MgaW5zaWRlIG9mIHRoZW0uXG52YXIgVmlld1RyZWVVcGRhdGVyID0gZnVuY3Rpb24gVmlld1RyZWVVcGRhdGVyKHRvcCwgbG9ja2VkTm9kZSkge1xuICB0aGlzLnRvcCA9IHRvcDtcbiAgdGhpcy5sb2NrID0gbG9ja2VkTm9kZTtcbiAgLy8gSW5kZXggaW50byBgdGhpcy50b3BgJ3MgY2hpbGQgYXJyYXksIHJlcHJlc2VudHMgdGhlIGN1cnJlbnRcbiAgLy8gdXBkYXRlIHBvc2l0aW9uLlxuICB0aGlzLmluZGV4ID0gMDtcbiAgLy8gV2hlbiBlbnRlcmluZyBhIG1hcmssIHRoZSBjdXJyZW50IHRvcCBhbmQgaW5kZXggYXJlIHB1c2hlZFxuICAvLyBvbnRvIHRoaXMuXG4gIHRoaXMuc3RhY2sgPSBbXTtcbiAgLy8gVHJhY2tzIHdoZXRoZXIgYW55dGhpbmcgd2FzIGNoYW5nZWRcbiAgdGhpcy5jaGFuZ2VkID0gZmFsc2U7XG5cbiAgdGhpcy5wcmVNYXRjaCA9IHByZU1hdGNoKHRvcC5ub2RlLmNvbnRlbnQsIHRvcC5jaGlsZHJlbik7XG59O1xuXG4vLyBEZXN0cm95IGFuZCByZW1vdmUgdGhlIGNoaWxkcmVuIGJldHdlZW4gdGhlIGdpdmVuIGluZGljZXMgaW5cbi8vIGB0aGlzLnRvcGAuXG5WaWV3VHJlZVVwZGF0ZXIucHJvdG90eXBlLmRlc3Ryb3lCZXR3ZWVuID0gZnVuY3Rpb24gZGVzdHJveUJldHdlZW4gKHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09IGVuZCkgeyByZXR1cm4gfVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykgeyB0aGlzLnRvcC5jaGlsZHJlbltpXS5kZXN0cm95KCk7IH1cbiAgdGhpcy50b3AuY2hpbGRyZW4uc3BsaWNlKHN0YXJ0LCBlbmQgLSBzdGFydCk7XG4gIHRoaXMuY2hhbmdlZCA9IHRydWU7XG59O1xuXG4vLyBEZXN0cm95IGFsbCByZW1haW5pbmcgY2hpbGRyZW4gaW4gYHRoaXMudG9wYC5cblZpZXdUcmVlVXBkYXRlci5wcm90b3R5cGUuZGVzdHJveVJlc3QgPSBmdW5jdGlvbiBkZXN0cm95UmVzdCAoKSB7XG4gIHRoaXMuZGVzdHJveUJldHdlZW4odGhpcy5pbmRleCwgdGhpcy50b3AuY2hpbGRyZW4ubGVuZ3RoKTtcbn07XG5cbi8vIDogKFtNYXJrXSwgRWRpdG9yVmlldylcbi8vIFN5bmMgdGhlIGN1cnJlbnQgc3RhY2sgb2YgbWFyayBkZXNjcyB3aXRoIHRoZSBnaXZlbiBhcnJheSBvZlxuLy8gbWFya3MsIHJldXNpbmcgZXhpc3RpbmcgbWFyayBkZXNjcyB3aGVuIHBvc3NpYmxlLlxuVmlld1RyZWVVcGRhdGVyLnByb3RvdHlwZS5zeW5jVG9NYXJrcyA9IGZ1bmN0aW9uIHN5bmNUb01hcmtzIChtYXJrcywgaW5saW5lLCB2aWV3KSB7XG4gIHZhciBrZWVwID0gMCwgZGVwdGggPSB0aGlzLnN0YWNrLmxlbmd0aCA+PiAxO1xuICB2YXIgbWF4S2VlcCA9IE1hdGgubWluKGRlcHRoLCBtYXJrcy5sZW5ndGgpO1xuICB3aGlsZSAoa2VlcCA8IG1heEtlZXAgJiZcbiAgICAgICAgIChrZWVwID09IGRlcHRoIC0gMSA/IHRoaXMudG9wIDogdGhpcy5zdGFja1soa2VlcCArIDEpIDw8IDFdKS5tYXRjaGVzTWFyayhtYXJrc1trZWVwXSkgJiYgbWFya3Nba2VlcF0udHlwZS5zcGVjLnNwYW5uaW5nICE9PSBmYWxzZSlcbiAgICB7IGtlZXArKzsgfVxuXG4gIHdoaWxlIChrZWVwIDwgZGVwdGgpIHtcbiAgICB0aGlzLmRlc3Ryb3lSZXN0KCk7XG4gICAgdGhpcy50b3AuZGlydHkgPSBOT1RfRElSVFk7XG4gICAgdGhpcy5pbmRleCA9IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgdGhpcy50b3AgPSB0aGlzLnN0YWNrLnBvcCgpO1xuICAgIGRlcHRoLS07XG4gIH1cbiAgd2hpbGUgKGRlcHRoIDwgbWFya3MubGVuZ3RoKSB7XG4gICAgdGhpcy5zdGFjay5wdXNoKHRoaXMudG9wLCB0aGlzLmluZGV4ICsgMSk7XG4gICAgdmFyIGZvdW5kID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMuaW5kZXg7IGkgPCBNYXRoLm1pbih0aGlzLmluZGV4ICsgMywgdGhpcy50b3AuY2hpbGRyZW4ubGVuZ3RoKTsgaSsrKSB7XG4gICAgICBpZiAodGhpcy50b3AuY2hpbGRyZW5baV0ubWF0Y2hlc01hcmsobWFya3NbZGVwdGhdKSkgeyBmb3VuZCA9IGk7IGJyZWFrIH1cbiAgICB9XG4gICAgaWYgKGZvdW5kID4gLTEpIHtcbiAgICAgIGlmIChmb3VuZCA+IHRoaXMuaW5kZXgpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kZXN0cm95QmV0d2Vlbih0aGlzLmluZGV4LCBmb3VuZCk7XG4gICAgICB9XG4gICAgICB0aGlzLnRvcCA9IHRoaXMudG9wLmNoaWxkcmVuW3RoaXMuaW5kZXhdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbWFya0Rlc2MgPSBNYXJrVmlld0Rlc2MuY3JlYXRlKHRoaXMudG9wLCBtYXJrc1tkZXB0aF0sIGlubGluZSwgdmlldyk7XG4gICAgICB0aGlzLnRvcC5jaGlsZHJlbi5zcGxpY2UodGhpcy5pbmRleCwgMCwgbWFya0Rlc2MpO1xuICAgICAgdGhpcy50b3AgPSBtYXJrRGVzYztcbiAgICAgIHRoaXMuY2hhbmdlZCA9IHRydWU7XG4gICAgfVxuICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIGRlcHRoKys7XG4gIH1cbn07XG5cbi8vIDogKE5vZGUsIFtEZWNvcmF0aW9uXSwgRGVjb3JhdGlvblNvdXJjZSkg4oaSIGJvb2xcbi8vIFRyeSB0byBmaW5kIGEgbm9kZSBkZXNjIG1hdGNoaW5nIHRoZSBnaXZlbiBkYXRhLiBTa2lwIG92ZXIgaXQgYW5kXG4vLyByZXR1cm4gdHJ1ZSB3aGVuIHN1Y2Nlc3NmdWwuXG5WaWV3VHJlZVVwZGF0ZXIucHJvdG90eXBlLmZpbmROb2RlTWF0Y2ggPSBmdW5jdGlvbiBmaW5kTm9kZU1hdGNoIChub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgaW5kZXgpIHtcbiAgdmFyIGNoaWxkcmVuID0gdGhpcy50b3AuY2hpbGRyZW4sIGZvdW5kID0gLTE7XG4gIGlmIChpbmRleCA+PSB0aGlzLnByZU1hdGNoLmluZGV4KSB7XG4gICAgZm9yICh2YXIgaSA9IHRoaXMuaW5kZXg7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykgeyBpZiAoY2hpbGRyZW5baV0ubWF0Y2hlc05vZGUobm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28pKSB7XG4gICAgICBmb3VuZCA9IGk7XG4gICAgICBicmVha1xuICAgIH0gfVxuICB9IGVsc2Uge1xuICAgIGZvciAodmFyIGkkMSA9IHRoaXMuaW5kZXgsIGUgPSBNYXRoLm1pbihjaGlsZHJlbi5sZW5ndGgsIGkkMSArIDEpOyBpJDEgPCBlOyBpJDErKykge1xuICAgICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baSQxXTtcbiAgICAgIGlmIChjaGlsZC5tYXRjaGVzTm9kZShub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbykgJiYgIXRoaXMucHJlTWF0Y2gubWF0Y2hlZC5oYXMoY2hpbGQpKSB7XG4gICAgICAgIGZvdW5kID0gaSQxO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoZm91bmQgPCAwKSB7IHJldHVybiBmYWxzZSB9XG4gIHRoaXMuZGVzdHJveUJldHdlZW4odGhpcy5pbmRleCwgZm91bmQpO1xuICB0aGlzLmluZGV4Kys7XG4gIHJldHVybiB0cnVlXG59O1xuXG5WaWV3VHJlZVVwZGF0ZXIucHJvdG90eXBlLnVwZGF0ZU5vZGVBdCA9IGZ1bmN0aW9uIHVwZGF0ZU5vZGVBdCAobm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIGluZGV4LCB2aWV3KSB7XG4gIHZhciBjaGlsZCA9IHRoaXMudG9wLmNoaWxkcmVuW2luZGV4XTtcbiAgaWYgKCFjaGlsZC51cGRhdGUobm9kZSwgb3V0ZXJEZWNvLCBpbm5lckRlY28sIHZpZXcpKSB7IHJldHVybiBmYWxzZSB9XG4gIHRoaXMuZGVzdHJveUJldHdlZW4odGhpcy5pbmRleCwgaW5kZXgpO1xuICB0aGlzLmluZGV4ID0gaW5kZXggKyAxO1xuICByZXR1cm4gdHJ1ZVxufTtcblxuVmlld1RyZWVVcGRhdGVyLnByb3RvdHlwZS5maW5kSW5kZXhXaXRoQ2hpbGQgPSBmdW5jdGlvbiBmaW5kSW5kZXhXaXRoQ2hpbGQgKGRvbU5vZGUpIHtcbiAgZm9yICg7Oykge1xuICAgIHZhciBwYXJlbnQgPSBkb21Ob2RlLnBhcmVudE5vZGU7XG4gICAgaWYgKCFwYXJlbnQpIHsgcmV0dXJuIC0xIH1cbiAgICBpZiAocGFyZW50ID09IHRoaXMudG9wLmNvbnRlbnRET00pIHtcbiAgICAgIHZhciBkZXNjID0gZG9tTm9kZS5wbVZpZXdEZXNjO1xuICAgICAgaWYgKGRlc2MpIHsgZm9yICh2YXIgaSA9IHRoaXMuaW5kZXg7IGkgPCB0aGlzLnRvcC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpcy50b3AuY2hpbGRyZW5baV0gPT0gZGVzYykgeyByZXR1cm4gaSB9XG4gICAgICB9IH1cbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICBkb21Ob2RlID0gcGFyZW50O1xuICB9XG59O1xuXG4vLyA6IChOb2RlLCBbRGVjb3JhdGlvbl0sIERlY29yYXRpb25Tb3VyY2UsIEVkaXRvclZpZXcsIEZyYWdtZW50LCBudW1iZXIpIOKGkiBib29sXG4vLyBUcnkgdG8gdXBkYXRlIHRoZSBuZXh0IG5vZGUsIGlmIGFueSwgdG8gdGhlIGdpdmVuIGRhdGEuIENoZWNrc1xuLy8gcHJlLW1hdGNoZXMgdG8gYXZvaWQgb3ZlcndyaXRpbmcgbm9kZXMgdGhhdCBjb3VsZCBzdGlsbCBiZSB1c2VkLlxuVmlld1RyZWVVcGRhdGVyLnByb3RvdHlwZS51cGRhdGVOZXh0Tm9kZSA9IGZ1bmN0aW9uIHVwZGF0ZU5leHROb2RlIChub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldywgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IHRoaXMuaW5kZXg7IGkgPCB0aGlzLnRvcC5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuZXh0ID0gdGhpcy50b3AuY2hpbGRyZW5baV07XG4gICAgaWYgKG5leHQgaW5zdGFuY2VvZiBOb2RlVmlld0Rlc2MpIHtcbiAgICAgIHZhciBwcmVNYXRjaCA9IHRoaXMucHJlTWF0Y2gubWF0Y2hlZC5nZXQobmV4dCk7XG4gICAgICBpZiAocHJlTWF0Y2ggIT0gbnVsbCAmJiBwcmVNYXRjaCAhPSBpbmRleCkgeyByZXR1cm4gZmFsc2UgfVxuICAgICAgdmFyIG5leHRET00gPSBuZXh0LmRvbTtcblxuICAgICAgLy8gQ2FuJ3QgdXBkYXRlIGlmIG5leHRET00gaXMgb3IgY29udGFpbnMgdGhpcy5sb2NrLCBleGNlcHQgaWZcbiAgICAgIC8vIGl0J3MgYSB0ZXh0IG5vZGUgd2hvc2UgY29udGVudCBhbHJlYWR5IG1hdGNoZXMgdGhlIG5ldyB0ZXh0XG4gICAgICAvLyBhbmQgd2hvc2UgZGVjb3JhdGlvbnMgbWF0Y2ggdGhlIG5ldyBvbmVzLlxuICAgICAgdmFyIGxvY2tlZCA9IHRoaXMubG9jayAmJiAobmV4dERPTSA9PSB0aGlzLmxvY2sgfHwgbmV4dERPTS5ub2RlVHlwZSA9PSAxICYmIG5leHRET00uY29udGFpbnModGhpcy5sb2NrLnBhcmVudE5vZGUpKSAmJlxuICAgICAgICAgICEobm9kZS5pc1RleHQgJiYgbmV4dC5ub2RlICYmIG5leHQubm9kZS5pc1RleHQgJiYgbmV4dC5ub2RlRE9NLm5vZGVWYWx1ZSA9PSBub2RlLnRleHQgJiZcbiAgICAgICAgICAgIG5leHQuZGlydHkgIT0gTk9ERV9ESVJUWSAmJiBzYW1lT3V0ZXJEZWNvKG91dGVyRGVjbywgbmV4dC5vdXRlckRlY28pKTtcbiAgICAgIGlmICghbG9ja2VkICYmIG5leHQudXBkYXRlKG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCB2aWV3KSkge1xuICAgICAgICB0aGlzLmRlc3Ryb3lCZXR3ZWVuKHRoaXMuaW5kZXgsIGkpO1xuICAgICAgICBpZiAobmV4dC5kb20gIT0gbmV4dERPTSkgeyB0aGlzLmNoYW5nZWQgPSB0cnVlOyB9XG4gICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufTtcblxuLy8gOiAoTm9kZSwgW0RlY29yYXRpb25dLCBEZWNvcmF0aW9uU291cmNlLCBFZGl0b3JWaWV3KVxuLy8gSW5zZXJ0IHRoZSBub2RlIGFzIGEgbmV3bHkgY3JlYXRlZCBub2RlIGRlc2MuXG5WaWV3VHJlZVVwZGF0ZXIucHJvdG90eXBlLmFkZE5vZGUgPSBmdW5jdGlvbiBhZGROb2RlIChub2RlLCBvdXRlckRlY28sIGlubmVyRGVjbywgdmlldywgcG9zKSB7XG4gIHRoaXMudG9wLmNoaWxkcmVuLnNwbGljZSh0aGlzLmluZGV4KyssIDAsIE5vZGVWaWV3RGVzYy5jcmVhdGUodGhpcy50b3AsIG5vZGUsIG91dGVyRGVjbywgaW5uZXJEZWNvLCB2aWV3LCBwb3MpKTtcbiAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbn07XG5cblZpZXdUcmVlVXBkYXRlci5wcm90b3R5cGUucGxhY2VXaWRnZXQgPSBmdW5jdGlvbiBwbGFjZVdpZGdldCAod2lkZ2V0LCB2aWV3LCBwb3MpIHtcbiAgdmFyIG5leHQgPSB0aGlzLmluZGV4IDwgdGhpcy50b3AuY2hpbGRyZW4ubGVuZ3RoID8gdGhpcy50b3AuY2hpbGRyZW5bdGhpcy5pbmRleF0gOiBudWxsO1xuICBpZiAobmV4dCAmJiBuZXh0Lm1hdGNoZXNXaWRnZXQod2lkZ2V0KSAmJiAod2lkZ2V0ID09IG5leHQud2lkZ2V0IHx8ICFuZXh0LndpZGdldC50eXBlLnRvRE9NLnBhcmVudE5vZGUpKSB7XG4gICAgdGhpcy5pbmRleCsrO1xuICB9IGVsc2Uge1xuICAgIHZhciBkZXNjID0gbmV3IFdpZGdldFZpZXdEZXNjKHRoaXMudG9wLCB3aWRnZXQsIHZpZXcsIHBvcyk7XG4gICAgdGhpcy50b3AuY2hpbGRyZW4uc3BsaWNlKHRoaXMuaW5kZXgrKywgMCwgZGVzYyk7XG4gICAgdGhpcy5jaGFuZ2VkID0gdHJ1ZTtcbiAgfVxufTtcblxuLy8gTWFrZSBzdXJlIGEgdGV4dGJsb2NrIGxvb2tzIGFuZCBiZWhhdmVzIGNvcnJlY3RseSBpblxuLy8gY29udGVudEVkaXRhYmxlLlxuVmlld1RyZWVVcGRhdGVyLnByb3RvdHlwZS5hZGRUZXh0YmxvY2tIYWNrcyA9IGZ1bmN0aW9uIGFkZFRleHRibG9ja0hhY2tzICgpIHtcbiAgdmFyIGxhc3RDaGlsZCA9IHRoaXMudG9wLmNoaWxkcmVuW3RoaXMuaW5kZXggLSAxXTtcbiAgd2hpbGUgKGxhc3RDaGlsZCBpbnN0YW5jZW9mIE1hcmtWaWV3RGVzYykgeyBsYXN0Q2hpbGQgPSBsYXN0Q2hpbGQuY2hpbGRyZW5bbGFzdENoaWxkLmNoaWxkcmVuLmxlbmd0aCAtIDFdOyB9XG5cbiAgaWYgKCFsYXN0Q2hpbGQgfHwgLy8gRW1wdHkgdGV4dGJsb2NrXG4gICAgICAhKGxhc3RDaGlsZCBpbnN0YW5jZW9mIFRleHRWaWV3RGVzYykgfHxcbiAgICAgIC9cXG4kLy50ZXN0KGxhc3RDaGlsZC5ub2RlLnRleHQpKSB7XG4gICAgLy8gQXZvaWQgYnVncyBpbiBTYWZhcmkncyBjdXJzb3IgZHJhd2luZyAoIzExNjUpIGFuZCBDaHJvbWUncyBtb3VzZSBzZWxlY3Rpb24gKCMxMTUyKVxuICAgIGlmICgocmVzdWx0LnNhZmFyaSB8fCByZXN1bHQuY2hyb21lKSAmJiBsYXN0Q2hpbGQgJiYgbGFzdENoaWxkLmRvbS5jb250ZW50RWRpdGFibGUgPT0gXCJmYWxzZVwiKVxuICAgICAgeyB0aGlzLmFkZEhhY2tOb2RlKFwiSU1HXCIpOyB9XG4gICAgdGhpcy5hZGRIYWNrTm9kZShcIkJSXCIpO1xuICB9XG59O1xuXG5WaWV3VHJlZVVwZGF0ZXIucHJvdG90eXBlLmFkZEhhY2tOb2RlID0gZnVuY3Rpb24gYWRkSGFja05vZGUgKG5vZGVOYW1lKSB7XG4gIGlmICh0aGlzLmluZGV4IDwgdGhpcy50b3AuY2hpbGRyZW4ubGVuZ3RoICYmIHRoaXMudG9wLmNoaWxkcmVuW3RoaXMuaW5kZXhdLm1hdGNoZXNIYWNrKG5vZGVOYW1lKSkge1xuICAgIHRoaXMuaW5kZXgrKztcbiAgfSBlbHNlIHtcbiAgICB2YXIgZG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChub2RlTmFtZSk7XG4gICAgaWYgKG5vZGVOYW1lID09IFwiSU1HXCIpIHsgZG9tLmNsYXNzTmFtZSA9IFwiUHJvc2VNaXJyb3Itc2VwYXJhdG9yXCI7IH1cbiAgICB0aGlzLnRvcC5jaGlsZHJlbi5zcGxpY2UodGhpcy5pbmRleCsrLCAwLCBuZXcgVHJhaWxpbmdIYWNrVmlld0Rlc2ModGhpcy50b3AsIG5vdGhpbmcsIGRvbSwgbnVsbCkpO1xuICAgIHRoaXMuY2hhbmdlZCA9IHRydWU7XG4gIH1cbn07XG5cbi8vIDogKEZyYWdtZW50LCBbVmlld0Rlc2NdKSDihpIge2luZGV4OiBudW1iZXIsIG1hdGNoZWQ6IE1hcDxWaWV3RGVzYywgbnVtYmVyPn1cbi8vIEl0ZXJhdGUgZnJvbSB0aGUgZW5kIG9mIHRoZSBmcmFnbWVudCBhbmQgYXJyYXkgb2YgZGVzY3MgdG8gZmluZFxuLy8gZGlyZWN0bHkgbWF0Y2hpbmcgb25lcywgaW4gb3JkZXIgdG8gYXZvaWQgb3ZlcmVhZ2VybHkgcmV1c2luZyB0aG9zZVxuLy8gZm9yIG90aGVyIG5vZGVzLiBSZXR1cm5zIHRoZSBmcmFnbWVudCBpbmRleCBvZiB0aGUgZmlyc3Qgbm9kZSB0aGF0XG4vLyBpcyBwYXJ0IG9mIHRoZSBzZXF1ZW5jZSBvZiBtYXRjaGVkIG5vZGVzIGF0IHRoZSBlbmQgb2YgdGhlXG4vLyBmcmFnbWVudC5cbmZ1bmN0aW9uIHByZU1hdGNoKGZyYWcsIGRlc2NzKSB7XG4gIHZhciBmSSA9IGZyYWcuY2hpbGRDb3VudCwgZEkgPSBkZXNjcy5sZW5ndGgsIG1hdGNoZWQgPSBuZXcgTWFwO1xuICBmb3IgKDsgZkkgPiAwICYmIGRJID4gMDsgZEktLSkge1xuICAgIHZhciBkZXNjID0gZGVzY3NbZEkgLSAxXSwgbm9kZSA9IGRlc2Mubm9kZTtcbiAgICBpZiAoIW5vZGUpIHsgY29udGludWUgfVxuICAgIGlmIChub2RlICE9IGZyYWcuY2hpbGQoZkkgLSAxKSkgeyBicmVhayB9XG4gICAgLS1mSTtcbiAgICBtYXRjaGVkLnNldChkZXNjLCBmSSk7XG4gIH1cbiAgcmV0dXJuIHtpbmRleDogZkksIG1hdGNoZWQ6IG1hdGNoZWR9XG59XG5cbmZ1bmN0aW9uIGNvbXBhcmVTaWRlKGEsIGIpIHsgcmV0dXJuIGEudHlwZS5zaWRlIC0gYi50eXBlLnNpZGUgfVxuXG4vLyA6IChWaWV3RGVzYywgRGVjb3JhdGlvblNvdXJjZSwgKERlY29yYXRpb24sIG51bWJlciksIChOb2RlLCBbRGVjb3JhdGlvbl0sIERlY29yYXRpb25Tb3VyY2UsIG51bWJlcikpXG4vLyBUaGlzIGZ1bmN0aW9uIGFic3RyYWN0cyBpdGVyYXRpbmcgb3ZlciB0aGUgbm9kZXMgYW5kIGRlY29yYXRpb25zIGluXG4vLyBhIGZyYWdtZW50LiBDYWxscyBgb25Ob2RlYCBmb3IgZWFjaCBub2RlLCB3aXRoIGl0cyBsb2NhbCBhbmQgY2hpbGRcbi8vIGRlY29yYXRpb25zLiBTcGxpdHMgdGV4dCBub2RlcyB3aGVuIHRoZXJlIGlzIGEgZGVjb3JhdGlvbiBzdGFydGluZ1xuLy8gb3IgZW5kaW5nIGluc2lkZSBvZiB0aGVtLiBDYWxscyBgb25XaWRnZXRgIGZvciBlYWNoIHdpZGdldC5cbmZ1bmN0aW9uIGl0ZXJEZWNvKHBhcmVudCwgZGVjbywgb25XaWRnZXQsIG9uTm9kZSkge1xuICB2YXIgbG9jYWxzID0gZGVjby5sb2NhbHMocGFyZW50KSwgb2Zmc2V0ID0gMDtcbiAgLy8gU2ltcGxlLCBjaGVhcCB2YXJpYW50IGZvciB3aGVuIHRoZXJlIGFyZSBubyBsb2NhbCBkZWNvcmF0aW9uc1xuICBpZiAobG9jYWxzLmxlbmd0aCA9PSAwKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJlbnQuY2hpbGRDb3VudDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBwYXJlbnQuY2hpbGQoaSk7XG4gICAgICBvbk5vZGUoY2hpbGQsIGxvY2FscywgZGVjby5mb3JDaGlsZChvZmZzZXQsIGNoaWxkKSwgaSk7XG4gICAgICBvZmZzZXQgKz0gY2hpbGQubm9kZVNpemU7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGRlY29JbmRleCA9IDAsIGFjdGl2ZSA9IFtdLCByZXN0Tm9kZSA9IG51bGw7XG4gIGZvciAodmFyIHBhcmVudEluZGV4ID0gMDs7KSB7XG4gICAgaWYgKGRlY29JbmRleCA8IGxvY2Fscy5sZW5ndGggJiYgbG9jYWxzW2RlY29JbmRleF0udG8gPT0gb2Zmc2V0KSB7XG4gICAgICB2YXIgd2lkZ2V0ID0gbG9jYWxzW2RlY29JbmRleCsrXSwgd2lkZ2V0cyA9ICh2b2lkIDApO1xuICAgICAgd2hpbGUgKGRlY29JbmRleCA8IGxvY2Fscy5sZW5ndGggJiYgbG9jYWxzW2RlY29JbmRleF0udG8gPT0gb2Zmc2V0KVxuICAgICAgICB7ICh3aWRnZXRzIHx8ICh3aWRnZXRzID0gW3dpZGdldF0pKS5wdXNoKGxvY2Fsc1tkZWNvSW5kZXgrK10pOyB9XG4gICAgICBpZiAod2lkZ2V0cykge1xuICAgICAgICB3aWRnZXRzLnNvcnQoY29tcGFyZVNpZGUpO1xuICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCB3aWRnZXRzLmxlbmd0aDsgaSQxKyspIHsgb25XaWRnZXQod2lkZ2V0c1tpJDFdLCBwYXJlbnRJbmRleCwgISFyZXN0Tm9kZSk7IH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uV2lkZ2V0KHdpZGdldCwgcGFyZW50SW5kZXgsICEhcmVzdE5vZGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjaGlsZCQxID0gKHZvaWQgMCksIGluZGV4ID0gKHZvaWQgMCk7XG4gICAgaWYgKHJlc3ROb2RlKSB7XG4gICAgICBpbmRleCA9IC0xO1xuICAgICAgY2hpbGQkMSA9IHJlc3ROb2RlO1xuICAgICAgcmVzdE5vZGUgPSBudWxsO1xuICAgIH0gZWxzZSBpZiAocGFyZW50SW5kZXggPCBwYXJlbnQuY2hpbGRDb3VudCkge1xuICAgICAgaW5kZXggPSBwYXJlbnRJbmRleDtcbiAgICAgIGNoaWxkJDEgPSBwYXJlbnQuY2hpbGQocGFyZW50SW5kZXgrKyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSQyID0gMDsgaSQyIDwgYWN0aXZlLmxlbmd0aDsgaSQyKyspIHsgaWYgKGFjdGl2ZVtpJDJdLnRvIDw9IG9mZnNldCkgeyBhY3RpdmUuc3BsaWNlKGkkMi0tLCAxKTsgfSB9XG4gICAgd2hpbGUgKGRlY29JbmRleCA8IGxvY2Fscy5sZW5ndGggJiYgbG9jYWxzW2RlY29JbmRleF0uZnJvbSA8PSBvZmZzZXQgJiYgbG9jYWxzW2RlY29JbmRleF0udG8gPiBvZmZzZXQpXG4gICAgICB7IGFjdGl2ZS5wdXNoKGxvY2Fsc1tkZWNvSW5kZXgrK10pOyB9XG5cbiAgICB2YXIgZW5kID0gb2Zmc2V0ICsgY2hpbGQkMS5ub2RlU2l6ZTtcbiAgICBpZiAoY2hpbGQkMS5pc1RleHQpIHtcbiAgICAgIHZhciBjdXRBdCA9IGVuZDtcbiAgICAgIGlmIChkZWNvSW5kZXggPCBsb2NhbHMubGVuZ3RoICYmIGxvY2Fsc1tkZWNvSW5kZXhdLmZyb20gPCBjdXRBdCkgeyBjdXRBdCA9IGxvY2Fsc1tkZWNvSW5kZXhdLmZyb207IH1cbiAgICAgIGZvciAodmFyIGkkMyA9IDA7IGkkMyA8IGFjdGl2ZS5sZW5ndGg7IGkkMysrKSB7IGlmIChhY3RpdmVbaSQzXS50byA8IGN1dEF0KSB7IGN1dEF0ID0gYWN0aXZlW2kkM10udG87IH0gfVxuICAgICAgaWYgKGN1dEF0IDwgZW5kKSB7XG4gICAgICAgIHJlc3ROb2RlID0gY2hpbGQkMS5jdXQoY3V0QXQgLSBvZmZzZXQpO1xuICAgICAgICBjaGlsZCQxID0gY2hpbGQkMS5jdXQoMCwgY3V0QXQgLSBvZmZzZXQpO1xuICAgICAgICBlbmQgPSBjdXRBdDtcbiAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgb3V0ZXJEZWNvID0gIWFjdGl2ZS5sZW5ndGggPyBub3RoaW5nXG4gICAgICAgIDogY2hpbGQkMS5pc0lubGluZSAmJiAhY2hpbGQkMS5pc0xlYWYgPyBhY3RpdmUuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiAhZC5pbmxpbmU7IH0pXG4gICAgICAgIDogYWN0aXZlLnNsaWNlKCk7XG4gICAgb25Ob2RlKGNoaWxkJDEsIG91dGVyRGVjbywgZGVjby5mb3JDaGlsZChvZmZzZXQsIGNoaWxkJDEpLCBpbmRleCk7XG4gICAgb2Zmc2V0ID0gZW5kO1xuICB9XG59XG5cbi8vIExpc3QgbWFya2VycyBpbiBNb2JpbGUgU2FmYXJpIHdpbGwgbXlzdGVyaW91c2x5IGRpc2FwcGVhclxuLy8gc29tZXRpbWVzLiBUaGlzIHdvcmtzIGFyb3VuZCB0aGF0LlxuZnVuY3Rpb24gaW9zSGFja3MoZG9tKSB7XG4gIGlmIChkb20ubm9kZU5hbWUgPT0gXCJVTFwiIHx8IGRvbS5ub2RlTmFtZSA9PSBcIk9MXCIpIHtcbiAgICB2YXIgb2xkQ1NTID0gZG9tLnN0eWxlLmNzc1RleHQ7XG4gICAgZG9tLnN0eWxlLmNzc1RleHQgPSBvbGRDU1MgKyBcIjsgbGlzdC1zdHlsZTogc3F1YXJlICFpbXBvcnRhbnRcIjtcbiAgICB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb20pLmxpc3RTdHlsZTtcbiAgICBkb20uc3R5bGUuY3NzVGV4dCA9IG9sZENTUztcbiAgfVxufVxuXG5mdW5jdGlvbiBuZWFyYnlUZXh0Tm9kZShub2RlLCBvZmZzZXQpIHtcbiAgZm9yICg7Oykge1xuICAgIGlmIChub2RlLm5vZGVUeXBlID09IDMpIHsgcmV0dXJuIG5vZGUgfVxuICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEgJiYgb2Zmc2V0ID4gMCkge1xuICAgICAgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPiBvZmZzZXQgJiYgbm9kZS5jaGlsZE5vZGVzW29mZnNldF0ubm9kZVR5cGUgPT0gMylcbiAgICAgICAgeyByZXR1cm4gbm9kZS5jaGlsZE5vZGVzW29mZnNldF0gfVxuICAgICAgbm9kZSA9IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXQgLSAxXTtcbiAgICAgIG9mZnNldCA9IG5vZGVTaXplKG5vZGUpO1xuICAgIH0gZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PSAxICYmIG9mZnNldCA8IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgIG5vZGUgPSBub2RlLmNoaWxkTm9kZXNbb2Zmc2V0XTtcbiAgICAgIG9mZnNldCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG59XG5cbi8vIEZpbmQgYSBwaWVjZSBvZiB0ZXh0IGluIGFuIGlubGluZSBmcmFnbWVudCwgb3ZlcmxhcHBpbmcgZnJvbS10b1xuZnVuY3Rpb24gZmluZFRleHRJbkZyYWdtZW50KGZyYWcsIHRleHQsIGZyb20sIHRvKSB7XG4gIGZvciAodmFyIGkgPSAwLCBwb3MgPSAwOyBpIDwgZnJhZy5jaGlsZENvdW50ICYmIHBvcyA8PSB0bzspIHtcbiAgICB2YXIgY2hpbGQgPSBmcmFnLmNoaWxkKGkrKyksIGNoaWxkU3RhcnQgPSBwb3M7XG4gICAgcG9zICs9IGNoaWxkLm5vZGVTaXplO1xuICAgIGlmICghY2hpbGQuaXNUZXh0KSB7IGNvbnRpbnVlIH1cbiAgICB2YXIgc3RyID0gY2hpbGQudGV4dDtcbiAgICB3aGlsZSAoaSA8IGZyYWcuY2hpbGRDb3VudCkge1xuICAgICAgdmFyIG5leHQgPSBmcmFnLmNoaWxkKGkrKyk7XG4gICAgICBwb3MgKz0gbmV4dC5ub2RlU2l6ZTtcbiAgICAgIGlmICghbmV4dC5pc1RleHQpIHsgYnJlYWsgfVxuICAgICAgc3RyICs9IG5leHQudGV4dDtcbiAgICB9XG4gICAgaWYgKHBvcyA+PSBmcm9tKSB7XG4gICAgICB2YXIgZm91bmQgPSBzdHIubGFzdEluZGV4T2YodGV4dCwgdG8gLSBjaGlsZFN0YXJ0KTtcbiAgICAgIGlmIChmb3VuZCA+PSAwICYmIGZvdW5kICsgdGV4dC5sZW5ndGggKyBjaGlsZFN0YXJ0ID49IGZyb20pXG4gICAgICAgIHsgcmV0dXJuIGNoaWxkU3RhcnQgKyBmb3VuZCB9XG4gICAgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG4vLyBSZXBsYWNlIHJhbmdlIGZyb20tdG8gaW4gYW4gYXJyYXkgb2YgdmlldyBkZXNjcyB3aXRoIHJlcGxhY2VtZW50XG4vLyAobWF5IGJlIG51bGwgdG8ganVzdCBkZWxldGUpLiBUaGlzIGdvZXMgdmVyeSBtdWNoIGFnYWluc3QgdGhlIGdyYWluXG4vLyBvZiB0aGUgcmVzdCBvZiB0aGlzIGNvZGUsIHdoaWNoIHRlbmRzIHRvIGNyZWF0ZSBub2RlcyB3aXRoIHRoZVxuLy8gcmlnaHQgc2hhcGUgaW4gb25lIGdvLCByYXRoZXIgdGhhbiBtZXNzaW5nIHdpdGggdGhlbSBhZnRlclxuLy8gY3JlYXRpb24sIGJ1dCBpcyBuZWNlc3NhcnkgaW4gdGhlIGNvbXBvc2l0aW9uIGhhY2suXG5mdW5jdGlvbiByZXBsYWNlTm9kZXMobm9kZXMsIGZyb20sIHRvLCB2aWV3LCByZXBsYWNlbWVudCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGkgPSAwLCBvZmYgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY2hpbGQgPSBub2Rlc1tpXSwgc3RhcnQgPSBvZmYsIGVuZCA9IG9mZiArPSBjaGlsZC5zaXplO1xuICAgIGlmIChzdGFydCA+PSB0byB8fCBlbmQgPD0gZnJvbSkge1xuICAgICAgcmVzdWx0LnB1c2goY2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhcnQgPCBmcm9tKSB7IHJlc3VsdC5wdXNoKGNoaWxkLnNsaWNlKDAsIGZyb20gLSBzdGFydCwgdmlldykpOyB9XG4gICAgICBpZiAocmVwbGFjZW1lbnQpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocmVwbGFjZW1lbnQpO1xuICAgICAgICByZXBsYWNlbWVudCA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoZW5kID4gdG8pIHsgcmVzdWx0LnB1c2goY2hpbGQuc2xpY2UodG8gLSBzdGFydCwgY2hpbGQuc2l6ZSwgdmlldykpOyB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uRnJvbURPTSh2aWV3LCBvcmlnaW4pIHtcbiAgdmFyIGRvbVNlbCA9IHZpZXcucm9vdC5nZXRTZWxlY3Rpb24oKSwgZG9jID0gdmlldy5zdGF0ZS5kb2M7XG4gIGlmICghZG9tU2VsLmZvY3VzTm9kZSkgeyByZXR1cm4gbnVsbCB9XG4gIHZhciBuZWFyZXN0RGVzYyA9IHZpZXcuZG9jVmlldy5uZWFyZXN0RGVzYyhkb21TZWwuZm9jdXNOb2RlKSwgaW5XaWRnZXQgPSBuZWFyZXN0RGVzYyAmJiBuZWFyZXN0RGVzYy5zaXplID09IDA7XG4gIHZhciBoZWFkID0gdmlldy5kb2NWaWV3LnBvc0Zyb21ET00oZG9tU2VsLmZvY3VzTm9kZSwgZG9tU2VsLmZvY3VzT2Zmc2V0KTtcbiAgaWYgKGhlYWQgPCAwKSB7IHJldHVybiBudWxsIH1cbiAgdmFyICRoZWFkID0gZG9jLnJlc29sdmUoaGVhZCksICRhbmNob3IsIHNlbGVjdGlvbjtcbiAgaWYgKHNlbGVjdGlvbkNvbGxhcHNlZChkb21TZWwpKSB7XG4gICAgJGFuY2hvciA9ICRoZWFkO1xuICAgIHdoaWxlIChuZWFyZXN0RGVzYyAmJiAhbmVhcmVzdERlc2Mubm9kZSkgeyBuZWFyZXN0RGVzYyA9IG5lYXJlc3REZXNjLnBhcmVudDsgfVxuICAgIGlmIChuZWFyZXN0RGVzYyAmJiBuZWFyZXN0RGVzYy5ub2RlLmlzQXRvbSAmJiBOb2RlU2VsZWN0aW9uLmlzU2VsZWN0YWJsZShuZWFyZXN0RGVzYy5ub2RlKSAmJiBuZWFyZXN0RGVzYy5wYXJlbnRcbiAgICAgICAgJiYgIShuZWFyZXN0RGVzYy5ub2RlLmlzSW5saW5lICYmIGlzT25FZGdlKGRvbVNlbC5mb2N1c05vZGUsIGRvbVNlbC5mb2N1c09mZnNldCwgbmVhcmVzdERlc2MuZG9tKSkpIHtcbiAgICAgIHZhciBwb3MgPSBuZWFyZXN0RGVzYy5wb3NCZWZvcmU7XG4gICAgICBzZWxlY3Rpb24gPSBuZXcgTm9kZVNlbGVjdGlvbihoZWFkID09IHBvcyA/ICRoZWFkIDogZG9jLnJlc29sdmUocG9zKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBhbmNob3IgPSB2aWV3LmRvY1ZpZXcucG9zRnJvbURPTShkb21TZWwuYW5jaG9yTm9kZSwgZG9tU2VsLmFuY2hvck9mZnNldCk7XG4gICAgaWYgKGFuY2hvciA8IDApIHsgcmV0dXJuIG51bGwgfVxuICAgICRhbmNob3IgPSBkb2MucmVzb2x2ZShhbmNob3IpO1xuICB9XG5cbiAgaWYgKCFzZWxlY3Rpb24pIHtcbiAgICB2YXIgYmlhcyA9IG9yaWdpbiA9PSBcInBvaW50ZXJcIiB8fCAodmlldy5zdGF0ZS5zZWxlY3Rpb24uaGVhZCA8ICRoZWFkLnBvcyAmJiAhaW5XaWRnZXQpID8gMSA6IC0xO1xuICAgIHNlbGVjdGlvbiA9IHNlbGVjdGlvbkJldHdlZW4odmlldywgJGFuY2hvciwgJGhlYWQsIGJpYXMpO1xuICB9XG4gIHJldHVybiBzZWxlY3Rpb25cbn1cblxuZnVuY3Rpb24gZWRpdG9yT3duc1NlbGVjdGlvbih2aWV3KSB7XG4gIHJldHVybiB2aWV3LmVkaXRhYmxlID8gdmlldy5oYXNGb2N1cygpIDpcbiAgICBoYXNTZWxlY3Rpb24odmlldykgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmNvbnRhaW5zKHZpZXcuZG9tKVxufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25Ub0RPTSh2aWV3LCBmb3JjZSkge1xuICB2YXIgc2VsID0gdmlldy5zdGF0ZS5zZWxlY3Rpb247XG4gIHN5bmNOb2RlU2VsZWN0aW9uKHZpZXcsIHNlbCk7XG5cbiAgaWYgKCFlZGl0b3JPd25zU2VsZWN0aW9uKHZpZXcpKSB7IHJldHVybiB9XG5cbiAgaWYgKCFmb3JjZSAmJiB2aWV3Lm1vdXNlRG93biAmJiB2aWV3Lm1vdXNlRG93bi5hbGxvd0RlZmF1bHQpIHtcbiAgICB2aWV3Lm1vdXNlRG93bi5kZWxheWVkU2VsZWN0aW9uU3luYyA9IHRydWU7XG4gICAgdmlldy5kb21PYnNlcnZlci5zZXRDdXJTZWxlY3Rpb24oKTtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZpZXcuZG9tT2JzZXJ2ZXIuZGlzY29ubmVjdFNlbGVjdGlvbigpO1xuXG4gIGlmICh2aWV3LmN1cnNvcldyYXBwZXIpIHtcbiAgICBzZWxlY3RDdXJzb3JXcmFwcGVyKHZpZXcpO1xuICB9IGVsc2Uge1xuICAgIHZhciBhbmNob3IgPSBzZWwuYW5jaG9yO1xuICAgIHZhciBoZWFkID0gc2VsLmhlYWQ7XG4gICAgdmFyIHJlc2V0RWRpdGFibGVGcm9tLCByZXNldEVkaXRhYmxlVG87XG4gICAgaWYgKGJyb2tlblNlbGVjdEJldHdlZW5VbmVkaXRhYmxlICYmICEoc2VsIGluc3RhbmNlb2YgVGV4dFNlbGVjdGlvbikpIHtcbiAgICAgIGlmICghc2VsLiRmcm9tLnBhcmVudC5pbmxpbmVDb250ZW50KVxuICAgICAgICB7IHJlc2V0RWRpdGFibGVGcm9tID0gdGVtcG9yYXJpbHlFZGl0YWJsZU5lYXIodmlldywgc2VsLmZyb20pOyB9XG4gICAgICBpZiAoIXNlbC5lbXB0eSAmJiAhc2VsLiRmcm9tLnBhcmVudC5pbmxpbmVDb250ZW50KVxuICAgICAgICB7IHJlc2V0RWRpdGFibGVUbyA9IHRlbXBvcmFyaWx5RWRpdGFibGVOZWFyKHZpZXcsIHNlbC50byk7IH1cbiAgICB9XG4gICAgdmlldy5kb2NWaWV3LnNldFNlbGVjdGlvbihhbmNob3IsIGhlYWQsIHZpZXcucm9vdCwgZm9yY2UpO1xuICAgIGlmIChicm9rZW5TZWxlY3RCZXR3ZWVuVW5lZGl0YWJsZSkge1xuICAgICAgaWYgKHJlc2V0RWRpdGFibGVGcm9tKSB7IHJlc2V0RWRpdGFibGUocmVzZXRFZGl0YWJsZUZyb20pOyB9XG4gICAgICBpZiAocmVzZXRFZGl0YWJsZVRvKSB7IHJlc2V0RWRpdGFibGUocmVzZXRFZGl0YWJsZVRvKTsgfVxuICAgIH1cbiAgICBpZiAoc2VsLnZpc2libGUpIHtcbiAgICAgIHZpZXcuZG9tLmNsYXNzTGlzdC5yZW1vdmUoXCJQcm9zZU1pcnJvci1oaWRlc2VsZWN0aW9uXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2aWV3LmRvbS5jbGFzc0xpc3QuYWRkKFwiUHJvc2VNaXJyb3ItaGlkZXNlbGVjdGlvblwiKTtcbiAgICAgIGlmIChcIm9uc2VsZWN0aW9uY2hhbmdlXCIgaW4gZG9jdW1lbnQpIHsgcmVtb3ZlQ2xhc3NPblNlbGVjdGlvbkNoYW5nZSh2aWV3KTsgfVxuICAgIH1cbiAgfVxuXG4gIHZpZXcuZG9tT2JzZXJ2ZXIuc2V0Q3VyU2VsZWN0aW9uKCk7XG4gIHZpZXcuZG9tT2JzZXJ2ZXIuY29ubmVjdFNlbGVjdGlvbigpO1xufVxuXG4vLyBLbHVkZ2UgdG8gd29yayBhcm91bmQgV2Via2l0IG5vdCBhbGxvd2luZyBhIHNlbGVjdGlvbiB0byBzdGFydC9lbmRcbi8vIGJldHdlZW4gbm9uLWVkaXRhYmxlIGJsb2NrIG5vZGVzLiBXZSBicmllZmx5IG1ha2Ugc29tZXRoaW5nXG4vLyBlZGl0YWJsZSwgc2V0IHRoZSBzZWxlY3Rpb24sIHRoZW4gc2V0IGl0IHVuZWRpdGFibGUgYWdhaW4uXG5cbnZhciBicm9rZW5TZWxlY3RCZXR3ZWVuVW5lZGl0YWJsZSA9IHJlc3VsdC5zYWZhcmkgfHwgcmVzdWx0LmNocm9tZSAmJiByZXN1bHQuY2hyb21lX3ZlcnNpb24gPCA2MztcblxuZnVuY3Rpb24gdGVtcG9yYXJpbHlFZGl0YWJsZU5lYXIodmlldywgcG9zKSB7XG4gIHZhciByZWYgPSB2aWV3LmRvY1ZpZXcuZG9tRnJvbVBvcyhwb3MsIDApO1xuICB2YXIgbm9kZSA9IHJlZi5ub2RlO1xuICB2YXIgb2Zmc2V0ID0gcmVmLm9mZnNldDtcbiAgdmFyIGFmdGVyID0gb2Zmc2V0IDwgbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA/IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXRdIDogbnVsbDtcbiAgdmFyIGJlZm9yZSA9IG9mZnNldCA/IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXQgLSAxXSA6IG51bGw7XG4gIGlmIChyZXN1bHQuc2FmYXJpICYmIGFmdGVyICYmIGFmdGVyLmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpIHsgcmV0dXJuIHNldEVkaXRhYmxlKGFmdGVyKSB9XG4gIGlmICgoIWFmdGVyIHx8IGFmdGVyLmNvbnRlbnRFZGl0YWJsZSA9PSBcImZhbHNlXCIpICYmICghYmVmb3JlIHx8IGJlZm9yZS5jb250ZW50RWRpdGFibGUgPT0gXCJmYWxzZVwiKSkge1xuICAgIGlmIChhZnRlcikgeyByZXR1cm4gc2V0RWRpdGFibGUoYWZ0ZXIpIH1cbiAgICBlbHNlIGlmIChiZWZvcmUpIHsgcmV0dXJuIHNldEVkaXRhYmxlKGJlZm9yZSkgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldEVkaXRhYmxlKGVsZW1lbnQpIHtcbiAgZWxlbWVudC5jb250ZW50RWRpdGFibGUgPSBcInRydWVcIjtcbiAgaWYgKHJlc3VsdC5zYWZhcmkgJiYgZWxlbWVudC5kcmFnZ2FibGUpIHsgZWxlbWVudC5kcmFnZ2FibGUgPSBmYWxzZTsgZWxlbWVudC53YXNEcmFnZ2FibGUgPSB0cnVlOyB9XG4gIHJldHVybiBlbGVtZW50XG59XG5cbmZ1bmN0aW9uIHJlc2V0RWRpdGFibGUoZWxlbWVudCkge1xuICBlbGVtZW50LmNvbnRlbnRFZGl0YWJsZSA9IFwiZmFsc2VcIjtcbiAgaWYgKGVsZW1lbnQud2FzRHJhZ2dhYmxlKSB7IGVsZW1lbnQuZHJhZ2dhYmxlID0gdHJ1ZTsgZWxlbWVudC53YXNEcmFnZ2FibGUgPSBudWxsOyB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzT25TZWxlY3Rpb25DaGFuZ2Uodmlldykge1xuICB2YXIgZG9jID0gdmlldy5kb20ub3duZXJEb2N1bWVudDtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzZWxlY3Rpb25jaGFuZ2VcIiwgdmlldy5oaWRlU2VsZWN0aW9uR3VhcmQpO1xuICB2YXIgZG9tU2VsID0gdmlldy5yb290LmdldFNlbGVjdGlvbigpO1xuICB2YXIgbm9kZSA9IGRvbVNlbC5hbmNob3JOb2RlLCBvZmZzZXQgPSBkb21TZWwuYW5jaG9yT2Zmc2V0O1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcihcInNlbGVjdGlvbmNoYW5nZVwiLCB2aWV3LmhpZGVTZWxlY3Rpb25HdWFyZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZG9tU2VsLmFuY2hvck5vZGUgIT0gbm9kZSB8fCBkb21TZWwuYW5jaG9yT2Zmc2V0ICE9IG9mZnNldCkge1xuICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzZWxlY3Rpb25jaGFuZ2VcIiwgdmlldy5oaWRlU2VsZWN0aW9uR3VhcmQpO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghZWRpdG9yT3duc1NlbGVjdGlvbih2aWV3KSB8fCB2aWV3LnN0YXRlLnNlbGVjdGlvbi52aXNpYmxlKVxuICAgICAgICAgIHsgdmlldy5kb20uY2xhc3NMaXN0LnJlbW92ZShcIlByb3NlTWlycm9yLWhpZGVzZWxlY3Rpb25cIik7IH1cbiAgICAgIH0sIDIwKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzZWxlY3RDdXJzb3JXcmFwcGVyKHZpZXcpIHtcbiAgdmFyIGRvbVNlbCA9IHZpZXcucm9vdC5nZXRTZWxlY3Rpb24oKSwgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICB2YXIgbm9kZSA9IHZpZXcuY3Vyc29yV3JhcHBlci5kb20sIGltZyA9IG5vZGUubm9kZU5hbWUgPT0gXCJJTUdcIjtcbiAgaWYgKGltZykgeyByYW5nZS5zZXRFbmQobm9kZS5wYXJlbnROb2RlLCBkb21JbmRleChub2RlKSArIDEpOyB9XG4gIGVsc2UgeyByYW5nZS5zZXRFbmQobm9kZSwgMCk7IH1cbiAgcmFuZ2UuY29sbGFwc2UoZmFsc2UpO1xuICBkb21TZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XG4gIGRvbVNlbC5hZGRSYW5nZShyYW5nZSk7XG4gIC8vIEtsdWRnZSB0byBraWxsICdjb250cm9sIHNlbGVjdGlvbicgaW4gSUUxMSB3aGVuIHNlbGVjdGluZyBhblxuICAvLyBpbnZpc2libGUgY3Vyc29yIHdyYXBwZXIsIHNpbmNlIHRoYXQgd291bGQgcmVzdWx0IGluIHRob3NlIHdlaXJkXG4gIC8vIHJlc2l6ZSBoYW5kbGVzIGFuZCBhIHNlbGVjdGlvbiB0aGF0IGNvbnNpZGVycyB0aGUgYWJzb2x1dGVseVxuICAvLyBwb3NpdGlvbmVkIHdyYXBwZXIsIHJhdGhlciB0aGFuIHRoZSByb290IGVkaXRhYmxlIG5vZGUsIHRoZVxuICAvLyBmb2N1c2VkIGVsZW1lbnQuXG4gIGlmICghaW1nICYmICF2aWV3LnN0YXRlLnNlbGVjdGlvbi52aXNpYmxlICYmIHJlc3VsdC5pZSAmJiByZXN1bHQuaWVfdmVyc2lvbiA8PSAxMSkge1xuICAgIG5vZGUuZGlzYWJsZWQgPSB0cnVlO1xuICAgIG5vZGUuZGlzYWJsZWQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzeW5jTm9kZVNlbGVjdGlvbih2aWV3LCBzZWwpIHtcbiAgaWYgKHNlbCBpbnN0YW5jZW9mIE5vZGVTZWxlY3Rpb24pIHtcbiAgICB2YXIgZGVzYyA9IHZpZXcuZG9jVmlldy5kZXNjQXQoc2VsLmZyb20pO1xuICAgIGlmIChkZXNjICE9IHZpZXcubGFzdFNlbGVjdGVkVmlld0Rlc2MpIHtcbiAgICAgIGNsZWFyTm9kZVNlbGVjdGlvbih2aWV3KTtcbiAgICAgIGlmIChkZXNjKSB7IGRlc2Muc2VsZWN0Tm9kZSgpOyB9XG4gICAgICB2aWV3Lmxhc3RTZWxlY3RlZFZpZXdEZXNjID0gZGVzYztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY2xlYXJOb2RlU2VsZWN0aW9uKHZpZXcpO1xuICB9XG59XG5cbi8vIENsZWFyIGFsbCBET00gc3RhdGVmdWxuZXNzIG9mIHRoZSBsYXN0IG5vZGUgc2VsZWN0aW9uLlxuZnVuY3Rpb24gY2xlYXJOb2RlU2VsZWN0aW9uKHZpZXcpIHtcbiAgaWYgKHZpZXcubGFzdFNlbGVjdGVkVmlld0Rlc2MpIHtcbiAgICBpZiAodmlldy5sYXN0U2VsZWN0ZWRWaWV3RGVzYy5wYXJlbnQpXG4gICAgICB7IHZpZXcubGFzdFNlbGVjdGVkVmlld0Rlc2MuZGVzZWxlY3ROb2RlKCk7IH1cbiAgICB2aWV3Lmxhc3RTZWxlY3RlZFZpZXdEZXNjID0gbnVsbDtcbiAgfVxufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25CZXR3ZWVuKHZpZXcsICRhbmNob3IsICRoZWFkLCBiaWFzKSB7XG4gIHJldHVybiB2aWV3LnNvbWVQcm9wKFwiY3JlYXRlU2VsZWN0aW9uQmV0d2VlblwiLCBmdW5jdGlvbiAoZikgeyByZXR1cm4gZih2aWV3LCAkYW5jaG9yLCAkaGVhZCk7IH0pXG4gICAgfHwgVGV4dFNlbGVjdGlvbi5iZXR3ZWVuKCRhbmNob3IsICRoZWFkLCBiaWFzKVxufVxuXG5mdW5jdGlvbiBoYXNGb2N1c0FuZFNlbGVjdGlvbih2aWV3KSB7XG4gIGlmICh2aWV3LmVkaXRhYmxlICYmIHZpZXcucm9vdC5hY3RpdmVFbGVtZW50ICE9IHZpZXcuZG9tKSB7IHJldHVybiBmYWxzZSB9XG4gIHJldHVybiBoYXNTZWxlY3Rpb24odmlldylcbn1cblxuZnVuY3Rpb24gaGFzU2VsZWN0aW9uKHZpZXcpIHtcbiAgdmFyIHNlbCA9IHZpZXcucm9vdC5nZXRTZWxlY3Rpb24oKTtcbiAgaWYgKCFzZWwuYW5jaG9yTm9kZSkgeyByZXR1cm4gZmFsc2UgfVxuICB0cnkge1xuICAgIC8vIEZpcmVmb3ggd2lsbCByYWlzZSAncGVybWlzc2lvbiBkZW5pZWQnIGVycm9ycyB3aGVuIGFjY2Vzc2luZ1xuICAgIC8vIHByb3BlcnRpZXMgb2YgYHNlbC5hbmNob3JOb2RlYCB3aGVuIGl0J3MgaW4gYSBnZW5lcmF0ZWQgQ1NTXG4gICAgLy8gZWxlbWVudC5cbiAgICByZXR1cm4gdmlldy5kb20uY29udGFpbnMoc2VsLmFuY2hvck5vZGUubm9kZVR5cGUgPT0gMyA/IHNlbC5hbmNob3JOb2RlLnBhcmVudE5vZGUgOiBzZWwuYW5jaG9yTm9kZSkgJiZcbiAgICAgICh2aWV3LmVkaXRhYmxlIHx8IHZpZXcuZG9tLmNvbnRhaW5zKHNlbC5mb2N1c05vZGUubm9kZVR5cGUgPT0gMyA/IHNlbC5mb2N1c05vZGUucGFyZW50Tm9kZSA6IHNlbC5mb2N1c05vZGUpKVxuICB9IGNhdGNoKF8pIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBhbmNob3JJblJpZ2h0UGxhY2Uodmlldykge1xuICB2YXIgYW5jaG9yRE9NID0gdmlldy5kb2NWaWV3LmRvbUZyb21Qb3Modmlldy5zdGF0ZS5zZWxlY3Rpb24uYW5jaG9yLCAwKTtcbiAgdmFyIGRvbVNlbCA9IHZpZXcucm9vdC5nZXRTZWxlY3Rpb24oKTtcbiAgcmV0dXJuIGlzRXF1aXZhbGVudFBvc2l0aW9uKGFuY2hvckRPTS5ub2RlLCBhbmNob3JET00ub2Zmc2V0LCBkb21TZWwuYW5jaG9yTm9kZSwgZG9tU2VsLmFuY2hvck9mZnNldClcbn1cblxuZnVuY3Rpb24gbW92ZVNlbGVjdGlvbkJsb2NrKHN0YXRlLCBkaXIpIHtcbiAgdmFyIHJlZiA9IHN0YXRlLnNlbGVjdGlvbjtcbiAgdmFyICRhbmNob3IgPSByZWYuJGFuY2hvcjtcbiAgdmFyICRoZWFkID0gcmVmLiRoZWFkO1xuICB2YXIgJHNpZGUgPSBkaXIgPiAwID8gJGFuY2hvci5tYXgoJGhlYWQpIDogJGFuY2hvci5taW4oJGhlYWQpO1xuICB2YXIgJHN0YXJ0ID0gISRzaWRlLnBhcmVudC5pbmxpbmVDb250ZW50ID8gJHNpZGUgOiAkc2lkZS5kZXB0aCA/IHN0YXRlLmRvYy5yZXNvbHZlKGRpciA+IDAgPyAkc2lkZS5hZnRlcigpIDogJHNpZGUuYmVmb3JlKCkpIDogbnVsbDtcbiAgcmV0dXJuICRzdGFydCAmJiBTZWxlY3Rpb24uZmluZEZyb20oJHN0YXJ0LCBkaXIpXG59XG5cbmZ1bmN0aW9uIGFwcGx5KHZpZXcsIHNlbCkge1xuICB2aWV3LmRpc3BhdGNoKHZpZXcuc3RhdGUudHIuc2V0U2VsZWN0aW9uKHNlbCkuc2Nyb2xsSW50b1ZpZXcoKSk7XG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIHNlbGVjdEhvcml6b250YWxseSh2aWV3LCBkaXIsIG1vZHMpIHtcbiAgdmFyIHNlbCA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uO1xuICBpZiAoc2VsIGluc3RhbmNlb2YgVGV4dFNlbGVjdGlvbikge1xuICAgIGlmICghc2VsLmVtcHR5IHx8IG1vZHMuaW5kZXhPZihcInNcIikgPiAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIGlmICh2aWV3LmVuZE9mVGV4dGJsb2NrKGRpciA+IDAgPyBcInJpZ2h0XCIgOiBcImxlZnRcIikpIHtcbiAgICAgIHZhciBuZXh0ID0gbW92ZVNlbGVjdGlvbkJsb2NrKHZpZXcuc3RhdGUsIGRpcik7XG4gICAgICBpZiAobmV4dCAmJiAobmV4dCBpbnN0YW5jZW9mIE5vZGVTZWxlY3Rpb24pKSB7IHJldHVybiBhcHBseSh2aWV3LCBuZXh0KSB9XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2UgaWYgKCEocmVzdWx0Lm1hYyAmJiBtb2RzLmluZGV4T2YoXCJtXCIpID4gLTEpKSB7XG4gICAgICB2YXIgJGhlYWQgPSBzZWwuJGhlYWQsIG5vZGUgPSAkaGVhZC50ZXh0T2Zmc2V0ID8gbnVsbCA6IGRpciA8IDAgPyAkaGVhZC5ub2RlQmVmb3JlIDogJGhlYWQubm9kZUFmdGVyLCBkZXNjO1xuICAgICAgaWYgKCFub2RlIHx8IG5vZGUuaXNUZXh0KSB7IHJldHVybiBmYWxzZSB9XG4gICAgICB2YXIgbm9kZVBvcyA9IGRpciA8IDAgPyAkaGVhZC5wb3MgLSBub2RlLm5vZGVTaXplIDogJGhlYWQucG9zO1xuICAgICAgaWYgKCEobm9kZS5pc0F0b20gfHwgKGRlc2MgPSB2aWV3LmRvY1ZpZXcuZGVzY0F0KG5vZGVQb3MpKSAmJiAhZGVzYy5jb250ZW50RE9NKSkgeyByZXR1cm4gZmFsc2UgfVxuICAgICAgaWYgKE5vZGVTZWxlY3Rpb24uaXNTZWxlY3RhYmxlKG5vZGUpKSB7XG4gICAgICAgIHJldHVybiBhcHBseSh2aWV3LCBuZXcgTm9kZVNlbGVjdGlvbihkaXIgPCAwID8gdmlldy5zdGF0ZS5kb2MucmVzb2x2ZSgkaGVhZC5wb3MgLSBub2RlLm5vZGVTaXplKSA6ICRoZWFkKSlcbiAgICAgIH0gZWxzZSBpZiAocmVzdWx0LndlYmtpdCkge1xuICAgICAgICAvLyBDaHJvbWUgYW5kIFNhZmFyaSB3aWxsIGludHJvZHVjZSBleHRyYSBwb2ludGxlc3MgY3Vyc29yXG4gICAgICAgIC8vIHBvc2l0aW9ucyBhcm91bmQgaW5saW5lIHVuZWRpdGFibGUgbm9kZXMsIHNvIHdlIGhhdmUgdG9cbiAgICAgICAgLy8gdGFrZSBvdmVyIGFuZCBtb3ZlIHRoZSBjdXJzb3IgcGFzdCB0aGVtICgjOTM3KVxuICAgICAgICByZXR1cm4gYXBwbHkodmlldywgbmV3IFRleHRTZWxlY3Rpb24odmlldy5zdGF0ZS5kb2MucmVzb2x2ZShkaXIgPCAwID8gbm9kZVBvcyA6IG5vZGVQb3MgKyBub2RlLm5vZGVTaXplKSkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoc2VsIGluc3RhbmNlb2YgTm9kZVNlbGVjdGlvbiAmJiBzZWwubm9kZS5pc0lubGluZSkge1xuICAgIHJldHVybiBhcHBseSh2aWV3LCBuZXcgVGV4dFNlbGVjdGlvbihkaXIgPiAwID8gc2VsLiR0byA6IHNlbC4kZnJvbSkpXG4gIH0gZWxzZSB7XG4gICAgdmFyIG5leHQkMSA9IG1vdmVTZWxlY3Rpb25CbG9jayh2aWV3LnN0YXRlLCBkaXIpO1xuICAgIGlmIChuZXh0JDEpIHsgcmV0dXJuIGFwcGx5KHZpZXcsIG5leHQkMSkgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIG5vZGVMZW4obm9kZSkge1xuICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PSAzID8gbm9kZS5ub2RlVmFsdWUubGVuZ3RoIDogbm9kZS5jaGlsZE5vZGVzLmxlbmd0aFxufVxuXG5mdW5jdGlvbiBpc0lnbm9yYWJsZShkb20pIHtcbiAgdmFyIGRlc2MgPSBkb20ucG1WaWV3RGVzYztcbiAgcmV0dXJuIGRlc2MgJiYgZGVzYy5zaXplID09IDAgJiYgKGRvbS5uZXh0U2libGluZyB8fCBkb20ubm9kZU5hbWUgIT0gXCJCUlwiKVxufVxuXG4vLyBNYWtlIHN1cmUgdGhlIGN1cnNvciBpc24ndCBkaXJlY3RseSBhZnRlciBvbmUgb3IgbW9yZSBpZ25vcmVkXG4vLyBub2Rlcywgd2hpY2ggd2lsbCBjb25mdXNlIHRoZSBicm93c2VyJ3MgY3Vyc29yIG1vdGlvbiBsb2dpYy5cbmZ1bmN0aW9uIHNraXBJZ25vcmVkTm9kZXNMZWZ0KHZpZXcpIHtcbiAgdmFyIHNlbCA9IHZpZXcucm9vdC5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIG5vZGUgPSBzZWwuZm9jdXNOb2RlLCBvZmZzZXQgPSBzZWwuZm9jdXNPZmZzZXQ7XG4gIGlmICghbm9kZSkgeyByZXR1cm4gfVxuICB2YXIgbW92ZU5vZGUsIG1vdmVPZmZzZXQsIGZvcmNlID0gZmFsc2U7XG4gIC8vIEdlY2tvIHdpbGwgZG8gb2RkIHRoaW5ncyB3aGVuIHRoZSBzZWxlY3Rpb24gaXMgZGlyZWN0bHkgaW4gZnJvbnRcbiAgLy8gb2YgYSBub24tZWRpdGFibGUgbm9kZSwgc28gaW4gdGhhdCBjYXNlLCBtb3ZlIGl0IGludG8gdGhlIG5leHRcbiAgLy8gbm9kZSBpZiBwb3NzaWJsZS4gSXNzdWUgcHJvc2VtaXJyb3IvcHJvc2VtaXJyb3IjODMyLlxuICBpZiAocmVzdWx0LmdlY2tvICYmIG5vZGUubm9kZVR5cGUgPT0gMSAmJiBvZmZzZXQgPCBub2RlTGVuKG5vZGUpICYmIGlzSWdub3JhYmxlKG5vZGUuY2hpbGROb2Rlc1tvZmZzZXRdKSkgeyBmb3JjZSA9IHRydWU7IH1cbiAgZm9yICg7Oykge1xuICAgIGlmIChvZmZzZXQgPiAwKSB7XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSAhPSAxKSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYmVmb3JlID0gbm9kZS5jaGlsZE5vZGVzW29mZnNldCAtIDFdO1xuICAgICAgICBpZiAoaXNJZ25vcmFibGUoYmVmb3JlKSkge1xuICAgICAgICAgIG1vdmVOb2RlID0gbm9kZTtcbiAgICAgICAgICBtb3ZlT2Zmc2V0ID0gLS1vZmZzZXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoYmVmb3JlLm5vZGVUeXBlID09IDMpIHtcbiAgICAgICAgICBub2RlID0gYmVmb3JlO1xuICAgICAgICAgIG9mZnNldCA9IG5vZGUubm9kZVZhbHVlLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHsgYnJlYWsgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNCbG9ja05vZGUobm9kZSkpIHtcbiAgICAgIGJyZWFrXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmV2ID0gbm9kZS5wcmV2aW91c1NpYmxpbmc7XG4gICAgICB3aGlsZSAocHJldiAmJiBpc0lnbm9yYWJsZShwcmV2KSkge1xuICAgICAgICBtb3ZlTm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgbW92ZU9mZnNldCA9IGRvbUluZGV4KHByZXYpO1xuICAgICAgICBwcmV2ID0gcHJldi5wcmV2aW91c1NpYmxpbmc7XG4gICAgICB9XG4gICAgICBpZiAoIXByZXYpIHtcbiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgaWYgKG5vZGUgPT0gdmlldy5kb20pIHsgYnJlYWsgfVxuICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZSA9IHByZXY7XG4gICAgICAgIG9mZnNldCA9IG5vZGVMZW4obm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChmb3JjZSkgeyBzZXRTZWxGb2N1cyh2aWV3LCBzZWwsIG5vZGUsIG9mZnNldCk7IH1cbiAgZWxzZSBpZiAobW92ZU5vZGUpIHsgc2V0U2VsRm9jdXModmlldywgc2VsLCBtb3ZlTm9kZSwgbW92ZU9mZnNldCk7IH1cbn1cblxuLy8gTWFrZSBzdXJlIHRoZSBjdXJzb3IgaXNuJ3QgZGlyZWN0bHkgYmVmb3JlIG9uZSBvciBtb3JlIGlnbm9yZWRcbi8vIG5vZGVzLlxuZnVuY3Rpb24gc2tpcElnbm9yZWROb2Rlc1JpZ2h0KHZpZXcpIHtcbiAgdmFyIHNlbCA9IHZpZXcucm9vdC5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIG5vZGUgPSBzZWwuZm9jdXNOb2RlLCBvZmZzZXQgPSBzZWwuZm9jdXNPZmZzZXQ7XG4gIGlmICghbm9kZSkgeyByZXR1cm4gfVxuICB2YXIgbGVuID0gbm9kZUxlbihub2RlKTtcbiAgdmFyIG1vdmVOb2RlLCBtb3ZlT2Zmc2V0O1xuICBmb3IgKDs7KSB7XG4gICAgaWYgKG9mZnNldCA8IGxlbikge1xuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgIT0gMSkgeyBicmVhayB9XG4gICAgICB2YXIgYWZ0ZXIgPSBub2RlLmNoaWxkTm9kZXNbb2Zmc2V0XTtcbiAgICAgIGlmIChpc0lnbm9yYWJsZShhZnRlcikpIHtcbiAgICAgICAgbW92ZU5vZGUgPSBub2RlO1xuICAgICAgICBtb3ZlT2Zmc2V0ID0gKytvZmZzZXQ7XG4gICAgICB9XG4gICAgICBlbHNlIHsgYnJlYWsgfVxuICAgIH0gZWxzZSBpZiAoaXNCbG9ja05vZGUobm9kZSkpIHtcbiAgICAgIGJyZWFrXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBuZXh0ID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgIHdoaWxlIChuZXh0ICYmIGlzSWdub3JhYmxlKG5leHQpKSB7XG4gICAgICAgIG1vdmVOb2RlID0gbmV4dC5wYXJlbnROb2RlO1xuICAgICAgICBtb3ZlT2Zmc2V0ID0gZG9tSW5kZXgobmV4dCkgKyAxO1xuICAgICAgICBuZXh0ID0gbmV4dC5uZXh0U2libGluZztcbiAgICAgIH1cbiAgICAgIGlmICghbmV4dCkge1xuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICBpZiAobm9kZSA9PSB2aWV3LmRvbSkgeyBicmVhayB9XG4gICAgICAgIG9mZnNldCA9IGxlbiA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlID0gbmV4dDtcbiAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgICAgbGVuID0gbm9kZUxlbihub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKG1vdmVOb2RlKSB7IHNldFNlbEZvY3VzKHZpZXcsIHNlbCwgbW92ZU5vZGUsIG1vdmVPZmZzZXQpOyB9XG59XG5cbmZ1bmN0aW9uIGlzQmxvY2tOb2RlKGRvbSkge1xuICB2YXIgZGVzYyA9IGRvbS5wbVZpZXdEZXNjO1xuICByZXR1cm4gZGVzYyAmJiBkZXNjLm5vZGUgJiYgZGVzYy5ub2RlLmlzQmxvY2tcbn1cblxuZnVuY3Rpb24gc2V0U2VsRm9jdXModmlldywgc2VsLCBub2RlLCBvZmZzZXQpIHtcbiAgaWYgKHNlbGVjdGlvbkNvbGxhcHNlZChzZWwpKSB7XG4gICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICByYW5nZS5zZXRFbmQobm9kZSwgb2Zmc2V0KTtcbiAgICByYW5nZS5zZXRTdGFydChub2RlLCBvZmZzZXQpO1xuICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICBzZWwuYWRkUmFuZ2UocmFuZ2UpO1xuICB9IGVsc2UgaWYgKHNlbC5leHRlbmQpIHtcbiAgICBzZWwuZXh0ZW5kKG5vZGUsIG9mZnNldCk7XG4gIH1cbiAgdmlldy5kb21PYnNlcnZlci5zZXRDdXJTZWxlY3Rpb24oKTtcbiAgdmFyIHN0YXRlID0gdmlldy5zdGF0ZTtcbiAgLy8gSWYgbm8gc3RhdGUgdXBkYXRlIGVuZHMgdXAgaGFwcGVuaW5nLCByZXNldCB0aGUgc2VsZWN0aW9uLlxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodmlldy5zdGF0ZSA9PSBzdGF0ZSkgeyBzZWxlY3Rpb25Ub0RPTSh2aWV3KTsgfVxuICB9LCA1MCk7XG59XG5cbi8vIDogKEVkaXRvclN0YXRlLCBudW1iZXIpXG4vLyBDaGVjayB3aGV0aGVyIHZlcnRpY2FsIHNlbGVjdGlvbiBtb3Rpb24gd291bGQgaW52b2x2ZSBub2RlXG4vLyBzZWxlY3Rpb25zLiBJZiBzbywgYXBwbHkgaXQgKGlmIG5vdCwgdGhlIHJlc3VsdCBpcyBsZWZ0IHRvIHRoZVxuLy8gYnJvd3NlcilcbmZ1bmN0aW9uIHNlbGVjdFZlcnRpY2FsbHkodmlldywgZGlyLCBtb2RzKSB7XG4gIHZhciBzZWwgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbjtcbiAgaWYgKHNlbCBpbnN0YW5jZW9mIFRleHRTZWxlY3Rpb24gJiYgIXNlbC5lbXB0eSB8fCBtb2RzLmluZGV4T2YoXCJzXCIpID4gLTEpIHsgcmV0dXJuIGZhbHNlIH1cbiAgaWYgKHJlc3VsdC5tYWMgJiYgbW9kcy5pbmRleE9mKFwibVwiKSA+IC0xKSB7IHJldHVybiBmYWxzZSB9XG4gIHZhciAkZnJvbSA9IHNlbC4kZnJvbTtcbiAgdmFyICR0byA9IHNlbC4kdG87XG5cbiAgaWYgKCEkZnJvbS5wYXJlbnQuaW5saW5lQ29udGVudCB8fCB2aWV3LmVuZE9mVGV4dGJsb2NrKGRpciA8IDAgPyBcInVwXCIgOiBcImRvd25cIikpIHtcbiAgICB2YXIgbmV4dCA9IG1vdmVTZWxlY3Rpb25CbG9jayh2aWV3LnN0YXRlLCBkaXIpO1xuICAgIGlmIChuZXh0ICYmIChuZXh0IGluc3RhbmNlb2YgTm9kZVNlbGVjdGlvbikpXG4gICAgICB7IHJldHVybiBhcHBseSh2aWV3LCBuZXh0KSB9XG4gIH1cbiAgaWYgKCEkZnJvbS5wYXJlbnQuaW5saW5lQ29udGVudCkge1xuICAgIHZhciBzaWRlID0gZGlyIDwgMCA/ICRmcm9tIDogJHRvO1xuICAgIHZhciBiZXlvbmQgPSBzZWwgaW5zdGFuY2VvZiBBbGxTZWxlY3Rpb24gPyBTZWxlY3Rpb24ubmVhcihzaWRlLCBkaXIpIDogU2VsZWN0aW9uLmZpbmRGcm9tKHNpZGUsIGRpcik7XG4gICAgcmV0dXJuIGJleW9uZCA/IGFwcGx5KHZpZXcsIGJleW9uZCkgOiBmYWxzZVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBzdG9wTmF0aXZlSG9yaXpvbnRhbERlbGV0ZSh2aWV3LCBkaXIpIHtcbiAgaWYgKCEodmlldy5zdGF0ZS5zZWxlY3Rpb24gaW5zdGFuY2VvZiBUZXh0U2VsZWN0aW9uKSkgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciByZWYgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbjtcbiAgdmFyICRoZWFkID0gcmVmLiRoZWFkO1xuICB2YXIgJGFuY2hvciA9IHJlZi4kYW5jaG9yO1xuICB2YXIgZW1wdHkgPSByZWYuZW1wdHk7XG4gIGlmICghJGhlYWQuc2FtZVBhcmVudCgkYW5jaG9yKSkgeyByZXR1cm4gdHJ1ZSB9XG4gIGlmICghZW1wdHkpIHsgcmV0dXJuIGZhbHNlIH1cbiAgaWYgKHZpZXcuZW5kT2ZUZXh0YmxvY2soZGlyID4gMCA/IFwiZm9yd2FyZFwiIDogXCJiYWNrd2FyZFwiKSkgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBuZXh0Tm9kZSA9ICEkaGVhZC50ZXh0T2Zmc2V0ICYmIChkaXIgPCAwID8gJGhlYWQubm9kZUJlZm9yZSA6ICRoZWFkLm5vZGVBZnRlcik7XG4gIGlmIChuZXh0Tm9kZSAmJiAhbmV4dE5vZGUuaXNUZXh0KSB7XG4gICAgdmFyIHRyID0gdmlldy5zdGF0ZS50cjtcbiAgICBpZiAoZGlyIDwgMCkgeyB0ci5kZWxldGUoJGhlYWQucG9zIC0gbmV4dE5vZGUubm9kZVNpemUsICRoZWFkLnBvcyk7IH1cbiAgICBlbHNlIHsgdHIuZGVsZXRlKCRoZWFkLnBvcywgJGhlYWQucG9zICsgbmV4dE5vZGUubm9kZVNpemUpOyB9XG4gICAgdmlldy5kaXNwYXRjaCh0cik7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gc3dpdGNoRWRpdGFibGUodmlldywgbm9kZSwgc3RhdGUpIHtcbiAgdmlldy5kb21PYnNlcnZlci5zdG9wKCk7XG4gIG5vZGUuY29udGVudEVkaXRhYmxlID0gc3RhdGU7XG4gIHZpZXcuZG9tT2JzZXJ2ZXIuc3RhcnQoKTtcbn1cblxuLy8gSXNzdWUgIzg2NyAvICMxMDkwIC8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9OTAzODIxXG4vLyBJbiB3aGljaCBTYWZhcmkgKGFuZCBhdCBzb21lIHBvaW50IGluIHRoZSBwYXN0LCBDaHJvbWUpIGRvZXMgcmVhbGx5XG4vLyB3cm9uZyB0aGluZ3Mgd2hlbiB0aGUgZG93biBhcnJvdyBpcyBwcmVzc2VkIHdoZW4gdGhlIGN1cnNvciBpc1xuLy8gZGlyZWN0bHkgYXQgdGhlIHN0YXJ0IG9mIGEgdGV4dGJsb2NrIGFuZCBoYXMgYW4gdW5lZGl0YWJsZSBub2RlXG4vLyBhZnRlciBpdFxuZnVuY3Rpb24gc2FmYXJpRG93bkFycm93QnVnKHZpZXcpIHtcbiAgaWYgKCFyZXN1bHQuc2FmYXJpIHx8IHZpZXcuc3RhdGUuc2VsZWN0aW9uLiRoZWFkLnBhcmVudE9mZnNldCA+IDApIHsgcmV0dXJuIH1cbiAgdmFyIHJlZiA9IHZpZXcucm9vdC5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIGZvY3VzTm9kZSA9IHJlZi5mb2N1c05vZGU7XG4gIHZhciBmb2N1c09mZnNldCA9IHJlZi5mb2N1c09mZnNldDtcbiAgaWYgKGZvY3VzTm9kZSAmJiBmb2N1c05vZGUubm9kZVR5cGUgPT0gMSAmJiBmb2N1c09mZnNldCA9PSAwICYmXG4gICAgICBmb2N1c05vZGUuZmlyc3RDaGlsZCAmJiBmb2N1c05vZGUuZmlyc3RDaGlsZC5jb250ZW50RWRpdGFibGUgPT0gXCJmYWxzZVwiKSB7XG4gICAgdmFyIGNoaWxkID0gZm9jdXNOb2RlLmZpcnN0Q2hpbGQ7XG4gICAgc3dpdGNoRWRpdGFibGUodmlldywgY2hpbGQsIHRydWUpO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gc3dpdGNoRWRpdGFibGUodmlldywgY2hpbGQsIGZhbHNlKTsgfSwgMjApO1xuICB9XG59XG5cbi8vIEEgYmFja2Ryb3Aga2V5IG1hcHBpbmcgdXNlZCB0byBtYWtlIHN1cmUgd2UgYWx3YXlzIHN1cHByZXNzIGtleXNcbi8vIHRoYXQgaGF2ZSBhIGRhbmdlcm91cyBkZWZhdWx0IGVmZmVjdCwgZXZlbiBpZiB0aGUgY29tbWFuZHMgdGhleSBhcmVcbi8vIGJvdW5kIHRvIHJldHVybiBmYWxzZSwgYW5kIHRvIG1ha2Ugc3VyZSB0aGF0IGN1cnNvci1tb3Rpb24ga2V5c1xuLy8gZmluZCBhIGN1cnNvciAoYXMgb3Bwb3NlZCB0byBhIG5vZGUgc2VsZWN0aW9uKSB3aGVuIHByZXNzZWQuIEZvclxuLy8gY3Vyc29yLW1vdGlvbiBrZXlzLCB0aGUgY29kZSBpbiB0aGUgaGFuZGxlcnMgYWxzbyB0YWtlcyBjYXJlIG9mXG4vLyBibG9jayBzZWxlY3Rpb25zLlxuXG5mdW5jdGlvbiBnZXRNb2RzKGV2ZW50KSB7XG4gIHZhciByZXN1bHQgPSBcIlwiO1xuICBpZiAoZXZlbnQuY3RybEtleSkgeyByZXN1bHQgKz0gXCJjXCI7IH1cbiAgaWYgKGV2ZW50Lm1ldGFLZXkpIHsgcmVzdWx0ICs9IFwibVwiOyB9XG4gIGlmIChldmVudC5hbHRLZXkpIHsgcmVzdWx0ICs9IFwiYVwiOyB9XG4gIGlmIChldmVudC5zaGlmdEtleSkgeyByZXN1bHQgKz0gXCJzXCI7IH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBjYXB0dXJlS2V5RG93bih2aWV3LCBldmVudCkge1xuICB2YXIgY29kZSA9IGV2ZW50LmtleUNvZGUsIG1vZHMgPSBnZXRNb2RzKGV2ZW50KTtcbiAgaWYgKGNvZGUgPT0gOCB8fCAocmVzdWx0Lm1hYyAmJiBjb2RlID09IDcyICYmIG1vZHMgPT0gXCJjXCIpKSB7IC8vIEJhY2tzcGFjZSwgQ3RybC1oIG9uIE1hY1xuICAgIHJldHVybiBzdG9wTmF0aXZlSG9yaXpvbnRhbERlbGV0ZSh2aWV3LCAtMSkgfHwgc2tpcElnbm9yZWROb2Rlc0xlZnQodmlldylcbiAgfSBlbHNlIGlmIChjb2RlID09IDQ2IHx8IChyZXN1bHQubWFjICYmIGNvZGUgPT0gNjggJiYgbW9kcyA9PSBcImNcIikpIHsgLy8gRGVsZXRlLCBDdHJsLWQgb24gTWFjXG4gICAgcmV0dXJuIHN0b3BOYXRpdmVIb3Jpem9udGFsRGVsZXRlKHZpZXcsIDEpIHx8IHNraXBJZ25vcmVkTm9kZXNSaWdodCh2aWV3KVxuICB9IGVsc2UgaWYgKGNvZGUgPT0gMTMgfHwgY29kZSA9PSAyNykgeyAvLyBFbnRlciwgRXNjXG4gICAgcmV0dXJuIHRydWVcbiAgfSBlbHNlIGlmIChjb2RlID09IDM3KSB7IC8vIExlZnQgYXJyb3dcbiAgICByZXR1cm4gc2VsZWN0SG9yaXpvbnRhbGx5KHZpZXcsIC0xLCBtb2RzKSB8fCBza2lwSWdub3JlZE5vZGVzTGVmdCh2aWV3KVxuICB9IGVsc2UgaWYgKGNvZGUgPT0gMzkpIHsgLy8gUmlnaHQgYXJyb3dcbiAgICByZXR1cm4gc2VsZWN0SG9yaXpvbnRhbGx5KHZpZXcsIDEsIG1vZHMpIHx8IHNraXBJZ25vcmVkTm9kZXNSaWdodCh2aWV3KVxuICB9IGVsc2UgaWYgKGNvZGUgPT0gMzgpIHsgLy8gVXAgYXJyb3dcbiAgICByZXR1cm4gc2VsZWN0VmVydGljYWxseSh2aWV3LCAtMSwgbW9kcykgfHwgc2tpcElnbm9yZWROb2Rlc0xlZnQodmlldylcbiAgfSBlbHNlIGlmIChjb2RlID09IDQwKSB7IC8vIERvd24gYXJyb3dcbiAgICByZXR1cm4gc2FmYXJpRG93bkFycm93QnVnKHZpZXcpIHx8IHNlbGVjdFZlcnRpY2FsbHkodmlldywgMSwgbW9kcykgfHwgc2tpcElnbm9yZWROb2Rlc1JpZ2h0KHZpZXcpXG4gIH0gZWxzZSBpZiAobW9kcyA9PSAocmVzdWx0Lm1hYyA/IFwibVwiIDogXCJjXCIpICYmXG4gICAgICAgICAgICAgKGNvZGUgPT0gNjYgfHwgY29kZSA9PSA3MyB8fCBjb2RlID09IDg5IHx8IGNvZGUgPT0gOTApKSB7IC8vIE1vZC1bYml5el1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vLyBOb3RlIHRoYXQgYWxsIHJlZmVyZW5jaW5nIGFuZCBwYXJzaW5nIGlzIGRvbmUgd2l0aCB0aGVcbi8vIHN0YXJ0LW9mLW9wZXJhdGlvbiBzZWxlY3Rpb24gYW5kIGRvY3VtZW50LCBzaW5jZSB0aGF0J3MgdGhlIG9uZVxuLy8gdGhhdCB0aGUgRE9NIHJlcHJlc2VudHMuIElmIGFueSBjaGFuZ2VzIGNhbWUgaW4gaW4gdGhlIG1lYW50aW1lLFxuLy8gdGhlIG1vZGlmaWNhdGlvbiBpcyBtYXBwZWQgb3ZlciB0aG9zZSBiZWZvcmUgaXQgaXMgYXBwbGllZCwgaW5cbi8vIHJlYWRET01DaGFuZ2UuXG5cbmZ1bmN0aW9uIHBhcnNlQmV0d2Vlbih2aWV3LCBmcm9tXywgdG9fKSB7XG4gIHZhciByZWYgPSB2aWV3LmRvY1ZpZXcucGFyc2VSYW5nZShmcm9tXywgdG9fKTtcbiAgdmFyIHBhcmVudCA9IHJlZi5ub2RlO1xuICB2YXIgZnJvbU9mZnNldCA9IHJlZi5mcm9tT2Zmc2V0O1xuICB2YXIgdG9PZmZzZXQgPSByZWYudG9PZmZzZXQ7XG4gIHZhciBmcm9tID0gcmVmLmZyb207XG4gIHZhciB0byA9IHJlZi50bztcblxuICB2YXIgZG9tU2VsID0gdmlldy5yb290LmdldFNlbGVjdGlvbigpLCBmaW5kID0gbnVsbCwgYW5jaG9yID0gZG9tU2VsLmFuY2hvck5vZGU7XG4gIGlmIChhbmNob3IgJiYgdmlldy5kb20uY29udGFpbnMoYW5jaG9yLm5vZGVUeXBlID09IDEgPyBhbmNob3IgOiBhbmNob3IucGFyZW50Tm9kZSkpIHtcbiAgICBmaW5kID0gW3tub2RlOiBhbmNob3IsIG9mZnNldDogZG9tU2VsLmFuY2hvck9mZnNldH1dO1xuICAgIGlmICghc2VsZWN0aW9uQ29sbGFwc2VkKGRvbVNlbCkpXG4gICAgICB7IGZpbmQucHVzaCh7bm9kZTogZG9tU2VsLmZvY3VzTm9kZSwgb2Zmc2V0OiBkb21TZWwuZm9jdXNPZmZzZXR9KTsgfVxuICB9XG4gIC8vIFdvcmsgYXJvdW5kIGlzc3VlIGluIENocm9tZSB3aGVyZSBiYWNrc3BhY2luZyBzb21ldGltZXMgcmVwbGFjZXNcbiAgLy8gdGhlIGRlbGV0ZWQgY29udGVudCB3aXRoIGEgcmFuZG9tIEJSIG5vZGUgKGlzc3VlcyAjNzk5LCAjODMxKVxuICBpZiAocmVzdWx0LmNocm9tZSAmJiB2aWV3Lmxhc3RLZXlDb2RlID09PSA4KSB7XG4gICAgZm9yICh2YXIgb2ZmID0gdG9PZmZzZXQ7IG9mZiA+IGZyb21PZmZzZXQ7IG9mZi0tKSB7XG4gICAgICB2YXIgbm9kZSA9IHBhcmVudC5jaGlsZE5vZGVzW29mZiAtIDFdLCBkZXNjID0gbm9kZS5wbVZpZXdEZXNjO1xuICAgICAgaWYgKG5vZGUubm9kZU5hbWUgPT0gXCJCUlwiICYmICFkZXNjKSB7IHRvT2Zmc2V0ID0gb2ZmOyBicmVhayB9XG4gICAgICBpZiAoIWRlc2MgfHwgZGVzYy5zaXplKSB7IGJyZWFrIH1cbiAgICB9XG4gIH1cbiAgdmFyIHN0YXJ0RG9jID0gdmlldy5zdGF0ZS5kb2M7XG4gIHZhciBwYXJzZXIgPSB2aWV3LnNvbWVQcm9wKFwiZG9tUGFyc2VyXCIpIHx8IERPTVBhcnNlci5mcm9tU2NoZW1hKHZpZXcuc3RhdGUuc2NoZW1hKTtcbiAgdmFyICRmcm9tID0gc3RhcnREb2MucmVzb2x2ZShmcm9tKTtcblxuICB2YXIgc2VsID0gbnVsbCwgZG9jID0gcGFyc2VyLnBhcnNlKHBhcmVudCwge1xuICAgIHRvcE5vZGU6ICRmcm9tLnBhcmVudCxcbiAgICB0b3BNYXRjaDogJGZyb20ucGFyZW50LmNvbnRlbnRNYXRjaEF0KCRmcm9tLmluZGV4KCkpLFxuICAgIHRvcE9wZW46IHRydWUsXG4gICAgZnJvbTogZnJvbU9mZnNldCxcbiAgICB0bzogdG9PZmZzZXQsXG4gICAgcHJlc2VydmVXaGl0ZXNwYWNlOiAkZnJvbS5wYXJlbnQudHlwZS5zcGVjLmNvZGUgPyBcImZ1bGxcIiA6IHRydWUsXG4gICAgZWRpdGFibGVDb250ZW50OiB0cnVlLFxuICAgIGZpbmRQb3NpdGlvbnM6IGZpbmQsXG4gICAgcnVsZUZyb21Ob2RlOiBydWxlRnJvbU5vZGUsXG4gICAgY29udGV4dDogJGZyb21cbiAgfSk7XG4gIGlmIChmaW5kICYmIGZpbmRbMF0ucG9zICE9IG51bGwpIHtcbiAgICB2YXIgYW5jaG9yJDEgPSBmaW5kWzBdLnBvcywgaGVhZCA9IGZpbmRbMV0gJiYgZmluZFsxXS5wb3M7XG4gICAgaWYgKGhlYWQgPT0gbnVsbCkgeyBoZWFkID0gYW5jaG9yJDE7IH1cbiAgICBzZWwgPSB7YW5jaG9yOiBhbmNob3IkMSArIGZyb20sIGhlYWQ6IGhlYWQgKyBmcm9tfTtcbiAgfVxuICByZXR1cm4ge2RvYzogZG9jLCBzZWw6IHNlbCwgZnJvbTogZnJvbSwgdG86IHRvfVxufVxuXG5mdW5jdGlvbiBydWxlRnJvbU5vZGUoZG9tKSB7XG4gIHZhciBkZXNjID0gZG9tLnBtVmlld0Rlc2M7XG4gIGlmIChkZXNjKSB7XG4gICAgcmV0dXJuIGRlc2MucGFyc2VSdWxlKClcbiAgfSBlbHNlIGlmIChkb20ubm9kZU5hbWUgPT0gXCJCUlwiICYmIGRvbS5wYXJlbnROb2RlKSB7XG4gICAgLy8gU2FmYXJpIHJlcGxhY2VzIHRoZSBsaXN0IGl0ZW0gb3IgdGFibGUgY2VsbCB3aXRoIGEgQlJcbiAgICAvLyBkaXJlY3RseSBpbiB0aGUgbGlzdCBub2RlICg/ISkgaWYgeW91IGRlbGV0ZSB0aGUgbGFzdFxuICAgIC8vIGNoYXJhY3RlciBpbiBhIGxpc3QgaXRlbSBvciB0YWJsZSBjZWxsICgjNzA4LCAjODYyKVxuICAgIGlmIChyZXN1bHQuc2FmYXJpICYmIC9eKHVsfG9sKSQvaS50ZXN0KGRvbS5wYXJlbnROb2RlLm5vZGVOYW1lKSkge1xuICAgICAgdmFyIHNraXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgc2tpcC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIikpO1xuICAgICAgcmV0dXJuIHtza2lwOiBza2lwfVxuICAgIH0gZWxzZSBpZiAoZG9tLnBhcmVudE5vZGUubGFzdENoaWxkID09IGRvbSB8fCByZXN1bHQuc2FmYXJpICYmIC9eKHRyfHRhYmxlKSQvaS50ZXN0KGRvbS5wYXJlbnROb2RlLm5vZGVOYW1lKSkge1xuICAgICAgcmV0dXJuIHtpZ25vcmU6IHRydWV9XG4gICAgfVxuICB9IGVsc2UgaWYgKGRvbS5ub2RlTmFtZSA9PSBcIklNR1wiICYmIGRvbS5nZXRBdHRyaWJ1dGUoXCJtYXJrLXBsYWNlaG9sZGVyXCIpKSB7XG4gICAgcmV0dXJuIHtpZ25vcmU6IHRydWV9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVhZERPTUNoYW5nZSh2aWV3LCBmcm9tLCB0bywgdHlwZU92ZXIsIGFkZGVkTm9kZXMpIHtcbiAgaWYgKGZyb20gPCAwKSB7XG4gICAgdmFyIG9yaWdpbiA9IHZpZXcubGFzdFNlbGVjdGlvblRpbWUgPiBEYXRlLm5vdygpIC0gNTAgPyB2aWV3Lmxhc3RTZWxlY3Rpb25PcmlnaW4gOiBudWxsO1xuICAgIHZhciBuZXdTZWwgPSBzZWxlY3Rpb25Gcm9tRE9NKHZpZXcsIG9yaWdpbik7XG4gICAgaWYgKG5ld1NlbCAmJiAhdmlldy5zdGF0ZS5zZWxlY3Rpb24uZXEobmV3U2VsKSkge1xuICAgICAgdmFyIHRyJDEgPSB2aWV3LnN0YXRlLnRyLnNldFNlbGVjdGlvbihuZXdTZWwpO1xuICAgICAgaWYgKG9yaWdpbiA9PSBcInBvaW50ZXJcIikgeyB0ciQxLnNldE1ldGEoXCJwb2ludGVyXCIsIHRydWUpOyB9XG4gICAgICBlbHNlIGlmIChvcmlnaW4gPT0gXCJrZXlcIikgeyB0ciQxLnNjcm9sbEludG9WaWV3KCk7IH1cbiAgICAgIHZpZXcuZGlzcGF0Y2godHIkMSk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG5cbiAgdmFyICRiZWZvcmUgPSB2aWV3LnN0YXRlLmRvYy5yZXNvbHZlKGZyb20pO1xuICB2YXIgc2hhcmVkID0gJGJlZm9yZS5zaGFyZWREZXB0aCh0byk7XG4gIGZyb20gPSAkYmVmb3JlLmJlZm9yZShzaGFyZWQgKyAxKTtcbiAgdG8gPSB2aWV3LnN0YXRlLmRvYy5yZXNvbHZlKHRvKS5hZnRlcihzaGFyZWQgKyAxKTtcblxuICB2YXIgc2VsID0gdmlldy5zdGF0ZS5zZWxlY3Rpb247XG4gIHZhciBwYXJzZSA9IHBhcnNlQmV0d2Vlbih2aWV3LCBmcm9tLCB0byk7XG4gIC8vIENocm9tZSBzb21ldGltZXMgbGVhdmVzIHRoZSBjdXJzb3IgYmVmb3JlIHRoZSBpbnNlcnRlZCB0ZXh0IHdoZW5cbiAgLy8gY29tcG9zaW5nIGFmdGVyIGEgY3Vyc29yIHdyYXBwZXIuIFRoaXMgbW92ZXMgaXQgZm9yd2FyZC5cbiAgaWYgKHJlc3VsdC5jaHJvbWUgJiYgdmlldy5jdXJzb3JXcmFwcGVyICYmIHBhcnNlLnNlbCAmJiBwYXJzZS5zZWwuYW5jaG9yID09IHZpZXcuY3Vyc29yV3JhcHBlci5kZWNvLmZyb20pIHtcbiAgICB2YXIgdGV4dCA9IHZpZXcuY3Vyc29yV3JhcHBlci5kZWNvLnR5cGUudG9ET00ubmV4dFNpYmxpbmc7XG4gICAgdmFyIHNpemUgPSB0ZXh0ICYmIHRleHQubm9kZVZhbHVlID8gdGV4dC5ub2RlVmFsdWUubGVuZ3RoIDogMTtcbiAgICBwYXJzZS5zZWwgPSB7YW5jaG9yOiBwYXJzZS5zZWwuYW5jaG9yICsgc2l6ZSwgaGVhZDogcGFyc2Uuc2VsLmFuY2hvciArIHNpemV9O1xuICB9XG5cbiAgdmFyIGRvYyA9IHZpZXcuc3RhdGUuZG9jLCBjb21wYXJlID0gZG9jLnNsaWNlKHBhcnNlLmZyb20sIHBhcnNlLnRvKTtcbiAgdmFyIHByZWZlcnJlZFBvcywgcHJlZmVycmVkU2lkZTtcbiAgLy8gUHJlZmVyIGFuY2hvcmluZyB0byBlbmQgd2hlbiBCYWNrc3BhY2UgaXMgcHJlc3NlZFxuICBpZiAodmlldy5sYXN0S2V5Q29kZSA9PT0gOCAmJiBEYXRlLm5vdygpIC0gMTAwIDwgdmlldy5sYXN0S2V5Q29kZVRpbWUpIHtcbiAgICBwcmVmZXJyZWRQb3MgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbi50bztcbiAgICBwcmVmZXJyZWRTaWRlID0gXCJlbmRcIjtcbiAgfSBlbHNlIHtcbiAgICBwcmVmZXJyZWRQb3MgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbi5mcm9tO1xuICAgIHByZWZlcnJlZFNpZGUgPSBcInN0YXJ0XCI7XG4gIH1cbiAgdmlldy5sYXN0S2V5Q29kZSA9IG51bGw7XG5cbiAgdmFyIGNoYW5nZSA9IGZpbmREaWZmKGNvbXBhcmUuY29udGVudCwgcGFyc2UuZG9jLmNvbnRlbnQsIHBhcnNlLmZyb20sIHByZWZlcnJlZFBvcywgcHJlZmVycmVkU2lkZSk7XG4gIGlmICghY2hhbmdlKSB7XG4gICAgaWYgKHR5cGVPdmVyICYmIHNlbCBpbnN0YW5jZW9mIFRleHRTZWxlY3Rpb24gJiYgIXNlbC5lbXB0eSAmJiBzZWwuJGhlYWQuc2FtZVBhcmVudChzZWwuJGFuY2hvcikgJiZcbiAgICAgICAgIXZpZXcuY29tcG9zaW5nICYmICEocGFyc2Uuc2VsICYmIHBhcnNlLnNlbC5hbmNob3IgIT0gcGFyc2Uuc2VsLmhlYWQpKSB7XG4gICAgICBjaGFuZ2UgPSB7c3RhcnQ6IHNlbC5mcm9tLCBlbmRBOiBzZWwudG8sIGVuZEI6IHNlbC50b307XG4gICAgfSBlbHNlIGlmICgocmVzdWx0LmlvcyAmJiB2aWV3Lmxhc3RJT1NFbnRlciA+IERhdGUubm93KCkgLSAyMjUgfHwgcmVzdWx0LmFuZHJvaWQpICYmXG4gICAgICAgICAgICAgICBhZGRlZE5vZGVzLnNvbWUoZnVuY3Rpb24gKG4pIHsgcmV0dXJuIG4ubm9kZU5hbWUgPT0gXCJESVZcIiB8fCBuLm5vZGVOYW1lID09IFwiUFwiOyB9KSAmJlxuICAgICAgICAgICAgICAgdmlldy5zb21lUHJvcChcImhhbmRsZUtleURvd25cIiwgZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYodmlldywga2V5RXZlbnQoMTMsIFwiRW50ZXJcIikpOyB9KSkge1xuICAgICAgdmlldy5sYXN0SU9TRW50ZXIgPSAwO1xuICAgICAgcmV0dXJuXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwYXJzZS5zZWwpIHtcbiAgICAgICAgdmFyIHNlbCQxID0gcmVzb2x2ZVNlbGVjdGlvbih2aWV3LCB2aWV3LnN0YXRlLmRvYywgcGFyc2Uuc2VsKTtcbiAgICAgICAgaWYgKHNlbCQxICYmICFzZWwkMS5lcSh2aWV3LnN0YXRlLnNlbGVjdGlvbikpIHsgdmlldy5kaXNwYXRjaCh2aWV3LnN0YXRlLnRyLnNldFNlbGVjdGlvbihzZWwkMSkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cbiAgdmlldy5kb21DaGFuZ2VDb3VudCsrO1xuICAvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgb3ZlcndyaXRpbmcgYSBzZWxlY3Rpb24gYnkgdHlwaW5nIG1hdGNoZXNcbiAgLy8gdGhlIHN0YXJ0IG9yIGVuZCBvZiB0aGUgc2VsZWN0ZWQgY29udGVudCwgY3JlYXRpbmcgYSBjaGFuZ2VcbiAgLy8gdGhhdCdzIHNtYWxsZXIgdGhhbiB3aGF0IHdhcyBhY3R1YWxseSBvdmVyd3JpdHRlbi5cbiAgaWYgKHZpZXcuc3RhdGUuc2VsZWN0aW9uLmZyb20gPCB2aWV3LnN0YXRlLnNlbGVjdGlvbi50byAmJlxuICAgICAgY2hhbmdlLnN0YXJ0ID09IGNoYW5nZS5lbmRCICYmXG4gICAgICB2aWV3LnN0YXRlLnNlbGVjdGlvbiBpbnN0YW5jZW9mIFRleHRTZWxlY3Rpb24pIHtcbiAgICBpZiAoY2hhbmdlLnN0YXJ0ID4gdmlldy5zdGF0ZS5zZWxlY3Rpb24uZnJvbSAmJiBjaGFuZ2Uuc3RhcnQgPD0gdmlldy5zdGF0ZS5zZWxlY3Rpb24uZnJvbSArIDIpIHtcbiAgICAgIGNoYW5nZS5zdGFydCA9IHZpZXcuc3RhdGUuc2VsZWN0aW9uLmZyb207XG4gICAgfSBlbHNlIGlmIChjaGFuZ2UuZW5kQSA8IHZpZXcuc3RhdGUuc2VsZWN0aW9uLnRvICYmIGNoYW5nZS5lbmRBID49IHZpZXcuc3RhdGUuc2VsZWN0aW9uLnRvIC0gMikge1xuICAgICAgY2hhbmdlLmVuZEIgKz0gKHZpZXcuc3RhdGUuc2VsZWN0aW9uLnRvIC0gY2hhbmdlLmVuZEEpO1xuICAgICAgY2hhbmdlLmVuZEEgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbi50bztcbiAgICB9XG4gIH1cblxuICAvLyBJRTExIHdpbGwgaW5zZXJ0IGEgbm9uLWJyZWFraW5nIHNwYWNlIF9haGVhZF8gb2YgdGhlIHNwYWNlIGFmdGVyXG4gIC8vIHRoZSBjdXJzb3Igc3BhY2Ugd2hlbiBhZGRpbmcgYSBzcGFjZSBiZWZvcmUgYW5vdGhlciBzcGFjZS4gV2hlblxuICAvLyB0aGF0IGhhcHBlbmVkLCBhZGp1c3QgdGhlIGNoYW5nZSB0byBjb3ZlciB0aGUgc3BhY2UgaW5zdGVhZC5cbiAgaWYgKHJlc3VsdC5pZSAmJiByZXN1bHQuaWVfdmVyc2lvbiA8PSAxMSAmJiBjaGFuZ2UuZW5kQiA9PSBjaGFuZ2Uuc3RhcnQgKyAxICYmXG4gICAgICBjaGFuZ2UuZW5kQSA9PSBjaGFuZ2Uuc3RhcnQgJiYgY2hhbmdlLnN0YXJ0ID4gcGFyc2UuZnJvbSAmJlxuICAgICAgcGFyc2UuZG9jLnRleHRCZXR3ZWVuKGNoYW5nZS5zdGFydCAtIHBhcnNlLmZyb20gLSAxLCBjaGFuZ2Uuc3RhcnQgLSBwYXJzZS5mcm9tICsgMSkgPT0gXCIgXFx1MDBhMFwiKSB7XG4gICAgY2hhbmdlLnN0YXJ0LS07XG4gICAgY2hhbmdlLmVuZEEtLTtcbiAgICBjaGFuZ2UuZW5kQi0tO1xuICB9XG5cbiAgdmFyICRmcm9tID0gcGFyc2UuZG9jLnJlc29sdmVOb0NhY2hlKGNoYW5nZS5zdGFydCAtIHBhcnNlLmZyb20pO1xuICB2YXIgJHRvID0gcGFyc2UuZG9jLnJlc29sdmVOb0NhY2hlKGNoYW5nZS5lbmRCIC0gcGFyc2UuZnJvbSk7XG4gIHZhciBpbmxpbmVDaGFuZ2UgPSAkZnJvbS5zYW1lUGFyZW50KCR0bykgJiYgJGZyb20ucGFyZW50LmlubGluZUNvbnRlbnQ7XG4gIHZhciBuZXh0U2VsO1xuICAvLyBJZiB0aGlzIGxvb2tzIGxpa2UgdGhlIGVmZmVjdCBvZiBwcmVzc2luZyBFbnRlciAob3Igd2FzIHJlY29yZGVkXG4gIC8vIGFzIGJlaW5nIGFuIGlPUyBlbnRlciBwcmVzcyksIGp1c3QgZGlzcGF0Y2ggYW4gRW50ZXIga2V5IGluc3RlYWQuXG4gIGlmICgoKHJlc3VsdC5pb3MgJiYgdmlldy5sYXN0SU9TRW50ZXIgPiBEYXRlLm5vdygpIC0gMjI1ICYmXG4gICAgICAgICghaW5saW5lQ2hhbmdlIHx8IGFkZGVkTm9kZXMuc29tZShmdW5jdGlvbiAobikgeyByZXR1cm4gbi5ub2RlTmFtZSA9PSBcIkRJVlwiIHx8IG4ubm9kZU5hbWUgPT0gXCJQXCI7IH0pKSkgfHxcbiAgICAgICAoIWlubGluZUNoYW5nZSAmJiAkZnJvbS5wb3MgPCBwYXJzZS5kb2MuY29udGVudC5zaXplICYmXG4gICAgICAgIChuZXh0U2VsID0gU2VsZWN0aW9uLmZpbmRGcm9tKHBhcnNlLmRvYy5yZXNvbHZlKCRmcm9tLnBvcyArIDEpLCAxLCB0cnVlKSkgJiZcbiAgICAgICAgbmV4dFNlbC5oZWFkID09ICR0by5wb3MpKSAmJlxuICAgICAgdmlldy5zb21lUHJvcChcImhhbmRsZUtleURvd25cIiwgZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYodmlldywga2V5RXZlbnQoMTMsIFwiRW50ZXJcIikpOyB9KSkge1xuICAgIHZpZXcubGFzdElPU0VudGVyID0gMDtcbiAgICByZXR1cm5cbiAgfVxuICAvLyBTYW1lIGZvciBiYWNrc3BhY2VcbiAgaWYgKHZpZXcuc3RhdGUuc2VsZWN0aW9uLmFuY2hvciA+IGNoYW5nZS5zdGFydCAmJlxuICAgICAgbG9va3NMaWtlSm9pbihkb2MsIGNoYW5nZS5zdGFydCwgY2hhbmdlLmVuZEEsICRmcm9tLCAkdG8pICYmXG4gICAgICB2aWV3LnNvbWVQcm9wKFwiaGFuZGxlS2V5RG93blwiLCBmdW5jdGlvbiAoZikgeyByZXR1cm4gZih2aWV3LCBrZXlFdmVudCg4LCBcIkJhY2tzcGFjZVwiKSk7IH0pKSB7XG4gICAgaWYgKHJlc3VsdC5hbmRyb2lkICYmIHJlc3VsdC5jaHJvbWUpIHsgdmlldy5kb21PYnNlcnZlci5zdXBwcmVzc1NlbGVjdGlvblVwZGF0ZXMoKTsgfSAvLyAjODIwXG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBDaHJvbWUgQW5kcm9pZCB3aWxsIG9jY2FzaW9uYWxseSwgZHVyaW5nIGNvbXBvc2l0aW9uLCBkZWxldGUgdGhlXG4gIC8vIGVudGlyZSBjb21wb3NpdGlvbiBhbmQgdGhlbiBpbW1lZGlhdGVseSBpbnNlcnQgaXQgYWdhaW4uIFRoaXMgaXNcbiAgLy8gdXNlZCB0byBkZXRlY3QgdGhhdCBzaXR1YXRpb24uXG4gIGlmIChyZXN1bHQuY2hyb21lICYmIHJlc3VsdC5hbmRyb2lkICYmIGNoYW5nZS50b0IgPT0gY2hhbmdlLmZyb20pXG4gICAgeyB2aWV3Lmxhc3RBbmRyb2lkRGVsZXRlID0gRGF0ZS5ub3coKTsgfVxuXG4gIC8vIFRoaXMgdHJpZXMgdG8gZGV0ZWN0IEFuZHJvaWQgdmlydHVhbCBrZXlib2FyZFxuICAvLyBlbnRlci1hbmQtcGljay1zdWdnZXN0aW9uIGFjdGlvbi4gVGhhdCBzb21ldGltZXMgKHNlZSBpc3N1ZVxuICAvLyAjMTA1OSkgZmlyc3QgZmlyZXMgYSBET00gbXV0YXRpb24sIGJlZm9yZSBtb3ZpbmcgdGhlIHNlbGVjdGlvbiB0b1xuICAvLyB0aGUgbmV3bHkgY3JlYXRlZCBibG9jay4gQW5kIHRoZW4sIGJlY2F1c2UgUHJvc2VNaXJyb3IgY2xlYW5zIHVwXG4gIC8vIHRoZSBET00gc2VsZWN0aW9uLCBpdCBnaXZlcyB1cCBtb3ZpbmcgdGhlIHNlbGVjdGlvbiBlbnRpcmVseSxcbiAgLy8gbGVhdmluZyB0aGUgY3Vyc29yIGluIHRoZSB3cm9uZyBwbGFjZS4gV2hlbiB0aGF0IGhhcHBlbnMsIHdlIGRyb3BcbiAgLy8gdGhlIG5ldyBwYXJhZ3JhcGggZnJvbSB0aGUgaW5pdGlhbCBjaGFuZ2UsIGFuZCBmaXJlIGEgc2ltdWxhdGVkXG4gIC8vIGVudGVyIGtleSBhZnRlcndhcmRzLlxuICBpZiAocmVzdWx0LmFuZHJvaWQgJiYgIWlubGluZUNoYW5nZSAmJiAkZnJvbS5zdGFydCgpICE9ICR0by5zdGFydCgpICYmICR0by5wYXJlbnRPZmZzZXQgPT0gMCAmJiAkZnJvbS5kZXB0aCA9PSAkdG8uZGVwdGggJiZcbiAgICAgIHBhcnNlLnNlbCAmJiBwYXJzZS5zZWwuYW5jaG9yID09IHBhcnNlLnNlbC5oZWFkICYmIHBhcnNlLnNlbC5oZWFkID09IGNoYW5nZS5lbmRBKSB7XG4gICAgY2hhbmdlLmVuZEIgLT0gMjtcbiAgICAkdG8gPSBwYXJzZS5kb2MucmVzb2x2ZU5vQ2FjaGUoY2hhbmdlLmVuZEIgLSBwYXJzZS5mcm9tKTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZpZXcuc29tZVByb3AoXCJoYW5kbGVLZXlEb3duXCIsIGZ1bmN0aW9uIChmKSB7IHJldHVybiBmKHZpZXcsIGtleUV2ZW50KDEzLCBcIkVudGVyXCIpKTsgfSk7XG4gICAgfSwgMjApO1xuICB9XG5cbiAgdmFyIGNoRnJvbSA9IGNoYW5nZS5zdGFydCwgY2hUbyA9IGNoYW5nZS5lbmRBO1xuXG4gIHZhciB0ciwgc3RvcmVkTWFya3MsIG1hcmtDaGFuZ2UsICRmcm9tMTtcbiAgaWYgKGlubGluZUNoYW5nZSkge1xuICAgIGlmICgkZnJvbS5wb3MgPT0gJHRvLnBvcykgeyAvLyBEZWxldGlvblxuICAgICAgLy8gSUUxMSBzb21ldGltZXMgd2VpcmRseSBtb3ZlcyB0aGUgRE9NIHNlbGVjdGlvbiBhcm91bmQgYWZ0ZXJcbiAgICAgIC8vIGJhY2tzcGFjaW5nIG91dCB0aGUgZmlyc3QgZWxlbWVudCBpbiBhIHRleHRibG9ja1xuICAgICAgaWYgKHJlc3VsdC5pZSAmJiByZXN1bHQuaWVfdmVyc2lvbiA8PSAxMSAmJiAkZnJvbS5wYXJlbnRPZmZzZXQgPT0gMCkge1xuICAgICAgICB2aWV3LmRvbU9ic2VydmVyLnN1cHByZXNzU2VsZWN0aW9uVXBkYXRlcygpO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNlbGVjdGlvblRvRE9NKHZpZXcpOyB9LCAyMCk7XG4gICAgICB9XG4gICAgICB0ciA9IHZpZXcuc3RhdGUudHIuZGVsZXRlKGNoRnJvbSwgY2hUbyk7XG4gICAgICBzdG9yZWRNYXJrcyA9IGRvYy5yZXNvbHZlKGNoYW5nZS5zdGFydCkubWFya3NBY3Jvc3MoZG9jLnJlc29sdmUoY2hhbmdlLmVuZEEpKTtcbiAgICB9IGVsc2UgaWYgKCAvLyBBZGRpbmcgb3IgcmVtb3ZpbmcgYSBtYXJrXG4gICAgICBjaGFuZ2UuZW5kQSA9PSBjaGFuZ2UuZW5kQiAmJiAoJGZyb20xID0gZG9jLnJlc29sdmUoY2hhbmdlLnN0YXJ0KSkgJiZcbiAgICAgIChtYXJrQ2hhbmdlID0gaXNNYXJrQ2hhbmdlKCRmcm9tLnBhcmVudC5jb250ZW50LmN1dCgkZnJvbS5wYXJlbnRPZmZzZXQsICR0by5wYXJlbnRPZmZzZXQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGZyb20xLnBhcmVudC5jb250ZW50LmN1dCgkZnJvbTEucGFyZW50T2Zmc2V0LCBjaGFuZ2UuZW5kQSAtICRmcm9tMS5zdGFydCgpKSkpXG4gICAgKSB7XG4gICAgICB0ciA9IHZpZXcuc3RhdGUudHI7XG4gICAgICBpZiAobWFya0NoYW5nZS50eXBlID09IFwiYWRkXCIpIHsgdHIuYWRkTWFyayhjaEZyb20sIGNoVG8sIG1hcmtDaGFuZ2UubWFyayk7IH1cbiAgICAgIGVsc2UgeyB0ci5yZW1vdmVNYXJrKGNoRnJvbSwgY2hUbywgbWFya0NoYW5nZS5tYXJrKTsgfVxuICAgIH0gZWxzZSBpZiAoJGZyb20ucGFyZW50LmNoaWxkKCRmcm9tLmluZGV4KCkpLmlzVGV4dCAmJiAkZnJvbS5pbmRleCgpID09ICR0by5pbmRleCgpIC0gKCR0by50ZXh0T2Zmc2V0ID8gMCA6IDEpKSB7XG4gICAgICAvLyBCb3RoIHBvc2l0aW9ucyBpbiB0aGUgc2FtZSB0ZXh0IG5vZGUgLS0gc2ltcGx5IGluc2VydCB0ZXh0XG4gICAgICB2YXIgdGV4dCQxID0gJGZyb20ucGFyZW50LnRleHRCZXR3ZWVuKCRmcm9tLnBhcmVudE9mZnNldCwgJHRvLnBhcmVudE9mZnNldCk7XG4gICAgICBpZiAodmlldy5zb21lUHJvcChcImhhbmRsZVRleHRJbnB1dFwiLCBmdW5jdGlvbiAoZikgeyByZXR1cm4gZih2aWV3LCBjaEZyb20sIGNoVG8sIHRleHQkMSk7IH0pKSB7IHJldHVybiB9XG4gICAgICB0ciA9IHZpZXcuc3RhdGUudHIuaW5zZXJ0VGV4dCh0ZXh0JDEsIGNoRnJvbSwgY2hUbyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF0cilcbiAgICB7IHRyID0gdmlldy5zdGF0ZS50ci5yZXBsYWNlKGNoRnJvbSwgY2hUbywgcGFyc2UuZG9jLnNsaWNlKGNoYW5nZS5zdGFydCAtIHBhcnNlLmZyb20sIGNoYW5nZS5lbmRCIC0gcGFyc2UuZnJvbSkpOyB9XG4gIGlmIChwYXJzZS5zZWwpIHtcbiAgICB2YXIgc2VsJDIgPSByZXNvbHZlU2VsZWN0aW9uKHZpZXcsIHRyLmRvYywgcGFyc2Uuc2VsKTtcbiAgICAvLyBDaHJvbWUgQW5kcm9pZCB3aWxsIHNvbWV0aW1lcywgZHVyaW5nIGNvbXBvc2l0aW9uLCByZXBvcnQgdGhlXG4gICAgLy8gc2VsZWN0aW9uIGluIHRoZSB3cm9uZyBwbGFjZS4gSWYgaXQgbG9va3MgbGlrZSB0aGF0IGlzXG4gICAgLy8gaGFwcGVuaW5nLCBkb24ndCB1cGRhdGUgdGhlIHNlbGVjdGlvbi5cbiAgICAvLyBFZGdlIGp1c3QgZG9lc24ndCBtb3ZlIHRoZSBjdXJzb3IgZm9yd2FyZCB3aGVuIHlvdSBzdGFydCB0eXBpbmdcbiAgICAvLyBpbiBhbiBlbXB0eSBibG9jayBvciBiZXR3ZWVuIGJyIG5vZGVzLlxuICAgIGlmIChzZWwkMiAmJiAhKHJlc3VsdC5jaHJvbWUgJiYgcmVzdWx0LmFuZHJvaWQgJiYgdmlldy5jb21wb3NpbmcgJiYgc2VsJDIuZW1wdHkgJiZcbiAgICAgICAgICAgICAgICAgKGNoYW5nZS5zdGFydCAhPSBjaGFuZ2UuZW5kQiB8fCB2aWV3Lmxhc3RBbmRyb2lkRGVsZXRlIDwgRGF0ZS5ub3coKSAtIDEwMCkgJiZcbiAgICAgICAgICAgICAgICAgKHNlbCQyLmhlYWQgPT0gY2hGcm9tIHx8IHNlbCQyLmhlYWQgPT0gdHIubWFwcGluZy5tYXAoY2hUbykgLSAxKSB8fFxuICAgICAgICAgICAgICAgICByZXN1bHQuaWUgJiYgc2VsJDIuZW1wdHkgJiYgc2VsJDIuaGVhZCA9PSBjaEZyb20pKVxuICAgICAgeyB0ci5zZXRTZWxlY3Rpb24oc2VsJDIpOyB9XG4gIH1cbiAgaWYgKHN0b3JlZE1hcmtzKSB7IHRyLmVuc3VyZU1hcmtzKHN0b3JlZE1hcmtzKTsgfVxuICB2aWV3LmRpc3BhdGNoKHRyLnNjcm9sbEludG9WaWV3KCkpO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlU2VsZWN0aW9uKHZpZXcsIGRvYywgcGFyc2VkU2VsKSB7XG4gIGlmIChNYXRoLm1heChwYXJzZWRTZWwuYW5jaG9yLCBwYXJzZWRTZWwuaGVhZCkgPiBkb2MuY29udGVudC5zaXplKSB7IHJldHVybiBudWxsIH1cbiAgcmV0dXJuIHNlbGVjdGlvbkJldHdlZW4odmlldywgZG9jLnJlc29sdmUocGFyc2VkU2VsLmFuY2hvciksIGRvYy5yZXNvbHZlKHBhcnNlZFNlbC5oZWFkKSlcbn1cblxuLy8gOiAoRnJhZ21lbnQsIEZyYWdtZW50KSDihpIgP3ttYXJrOiBNYXJrLCB0eXBlOiBzdHJpbmd9XG4vLyBHaXZlbiB0d28gc2FtZS1sZW5ndGgsIG5vbi1lbXB0eSBmcmFnbWVudHMgb2YgaW5saW5lIGNvbnRlbnQsXG4vLyBkZXRlcm1pbmUgd2hldGhlciB0aGUgZmlyc3QgY291bGQgYmUgY3JlYXRlZCBmcm9tIHRoZSBzZWNvbmQgYnlcbi8vIHJlbW92aW5nIG9yIGFkZGluZyBhIHNpbmdsZSBtYXJrIHR5cGUuXG5mdW5jdGlvbiBpc01hcmtDaGFuZ2UoY3VyLCBwcmV2KSB7XG4gIHZhciBjdXJNYXJrcyA9IGN1ci5maXJzdENoaWxkLm1hcmtzLCBwcmV2TWFya3MgPSBwcmV2LmZpcnN0Q2hpbGQubWFya3M7XG4gIHZhciBhZGRlZCA9IGN1ck1hcmtzLCByZW1vdmVkID0gcHJldk1hcmtzLCB0eXBlLCBtYXJrLCB1cGRhdGU7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJldk1hcmtzLmxlbmd0aDsgaSsrKSB7IGFkZGVkID0gcHJldk1hcmtzW2ldLnJlbW92ZUZyb21TZXQoYWRkZWQpOyB9XG4gIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGN1ck1hcmtzLmxlbmd0aDsgaSQxKyspIHsgcmVtb3ZlZCA9IGN1ck1hcmtzW2kkMV0ucmVtb3ZlRnJvbVNldChyZW1vdmVkKTsgfVxuICBpZiAoYWRkZWQubGVuZ3RoID09IDEgJiYgcmVtb3ZlZC5sZW5ndGggPT0gMCkge1xuICAgIG1hcmsgPSBhZGRlZFswXTtcbiAgICB0eXBlID0gXCJhZGRcIjtcbiAgICB1cGRhdGUgPSBmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gbm9kZS5tYXJrKG1hcmsuYWRkVG9TZXQobm9kZS5tYXJrcykpOyB9O1xuICB9IGVsc2UgaWYgKGFkZGVkLmxlbmd0aCA9PSAwICYmIHJlbW92ZWQubGVuZ3RoID09IDEpIHtcbiAgICBtYXJrID0gcmVtb3ZlZFswXTtcbiAgICB0eXBlID0gXCJyZW1vdmVcIjtcbiAgICB1cGRhdGUgPSBmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gbm9kZS5tYXJrKG1hcmsucmVtb3ZlRnJvbVNldChub2RlLm1hcmtzKSk7IH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICB2YXIgdXBkYXRlZCA9IFtdO1xuICBmb3IgKHZhciBpJDIgPSAwOyBpJDIgPCBwcmV2LmNoaWxkQ291bnQ7IGkkMisrKSB7IHVwZGF0ZWQucHVzaCh1cGRhdGUocHJldi5jaGlsZChpJDIpKSk7IH1cbiAgaWYgKEZyYWdtZW50LmZyb20odXBkYXRlZCkuZXEoY3VyKSkgeyByZXR1cm4ge21hcms6IG1hcmssIHR5cGU6IHR5cGV9IH1cbn1cblxuZnVuY3Rpb24gbG9va3NMaWtlSm9pbihvbGQsIHN0YXJ0LCBlbmQsICRuZXdTdGFydCwgJG5ld0VuZCkge1xuICBpZiAoISRuZXdTdGFydC5wYXJlbnQuaXNUZXh0YmxvY2sgfHxcbiAgICAgIC8vIFRoZSBjb250ZW50IG11c3QgaGF2ZSBzaHJ1bmtcbiAgICAgIGVuZCAtIHN0YXJ0IDw9ICRuZXdFbmQucG9zIC0gJG5ld1N0YXJ0LnBvcyB8fFxuICAgICAgLy8gbmV3RW5kIG11c3QgcG9pbnQgZGlyZWN0bHkgYXQgb3IgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgYmxvY2sgdGhhdCBuZXdTdGFydCBwb2ludHMgaW50b1xuICAgICAgc2tpcENsb3NpbmdBbmRPcGVuaW5nKCRuZXdTdGFydCwgdHJ1ZSwgZmFsc2UpIDwgJG5ld0VuZC5wb3MpXG4gICAgeyByZXR1cm4gZmFsc2UgfVxuXG4gIHZhciAkc3RhcnQgPSBvbGQucmVzb2x2ZShzdGFydCk7XG4gIC8vIFN0YXJ0IG11c3QgYmUgYXQgdGhlIGVuZCBvZiBhIGJsb2NrXG4gIGlmICgkc3RhcnQucGFyZW50T2Zmc2V0IDwgJHN0YXJ0LnBhcmVudC5jb250ZW50LnNpemUgfHwgISRzdGFydC5wYXJlbnQuaXNUZXh0YmxvY2spXG4gICAgeyByZXR1cm4gZmFsc2UgfVxuICB2YXIgJG5leHQgPSBvbGQucmVzb2x2ZShza2lwQ2xvc2luZ0FuZE9wZW5pbmcoJHN0YXJ0LCB0cnVlLCB0cnVlKSk7XG4gIC8vIFRoZSBuZXh0IHRleHRibG9jayBtdXN0IHN0YXJ0IGJlZm9yZSBlbmQgYW5kIGVuZCBuZWFyIGl0XG4gIGlmICghJG5leHQucGFyZW50LmlzVGV4dGJsb2NrIHx8ICRuZXh0LnBvcyA+IGVuZCB8fFxuICAgICAgc2tpcENsb3NpbmdBbmRPcGVuaW5nKCRuZXh0LCB0cnVlLCBmYWxzZSkgPCBlbmQpXG4gICAgeyByZXR1cm4gZmFsc2UgfVxuXG4gIC8vIFRoZSBmcmFnbWVudHMgYWZ0ZXIgdGhlIGpvaW4gcG9pbnQgbXVzdCBtYXRjaFxuICByZXR1cm4gJG5ld1N0YXJ0LnBhcmVudC5jb250ZW50LmN1dCgkbmV3U3RhcnQucGFyZW50T2Zmc2V0KS5lcSgkbmV4dC5wYXJlbnQuY29udGVudClcbn1cblxuZnVuY3Rpb24gc2tpcENsb3NpbmdBbmRPcGVuaW5nKCRwb3MsIGZyb21FbmQsIG1heU9wZW4pIHtcbiAgdmFyIGRlcHRoID0gJHBvcy5kZXB0aCwgZW5kID0gZnJvbUVuZCA/ICRwb3MuZW5kKCkgOiAkcG9zLnBvcztcbiAgd2hpbGUgKGRlcHRoID4gMCAmJiAoZnJvbUVuZCB8fCAkcG9zLmluZGV4QWZ0ZXIoZGVwdGgpID09ICRwb3Mubm9kZShkZXB0aCkuY2hpbGRDb3VudCkpIHtcbiAgICBkZXB0aC0tO1xuICAgIGVuZCsrO1xuICAgIGZyb21FbmQgPSBmYWxzZTtcbiAgfVxuICBpZiAobWF5T3Blbikge1xuICAgIHZhciBuZXh0ID0gJHBvcy5ub2RlKGRlcHRoKS5tYXliZUNoaWxkKCRwb3MuaW5kZXhBZnRlcihkZXB0aCkpO1xuICAgIHdoaWxlIChuZXh0ICYmICFuZXh0LmlzTGVhZikge1xuICAgICAgbmV4dCA9IG5leHQuZmlyc3RDaGlsZDtcbiAgICAgIGVuZCsrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZW5kXG59XG5cbmZ1bmN0aW9uIGZpbmREaWZmKGEsIGIsIHBvcywgcHJlZmVycmVkUG9zLCBwcmVmZXJyZWRTaWRlKSB7XG4gIHZhciBzdGFydCA9IGEuZmluZERpZmZTdGFydChiLCBwb3MpO1xuICBpZiAoc3RhcnQgPT0gbnVsbCkgeyByZXR1cm4gbnVsbCB9XG4gIHZhciByZWYgPSBhLmZpbmREaWZmRW5kKGIsIHBvcyArIGEuc2l6ZSwgcG9zICsgYi5zaXplKTtcbiAgdmFyIGVuZEEgPSByZWYuYTtcbiAgdmFyIGVuZEIgPSByZWYuYjtcbiAgaWYgKHByZWZlcnJlZFNpZGUgPT0gXCJlbmRcIikge1xuICAgIHZhciBhZGp1c3QgPSBNYXRoLm1heCgwLCBzdGFydCAtIE1hdGgubWluKGVuZEEsIGVuZEIpKTtcbiAgICBwcmVmZXJyZWRQb3MgLT0gZW5kQSArIGFkanVzdCAtIHN0YXJ0O1xuICB9XG4gIGlmIChlbmRBIDwgc3RhcnQgJiYgYS5zaXplIDwgYi5zaXplKSB7XG4gICAgdmFyIG1vdmUgPSBwcmVmZXJyZWRQb3MgPD0gc3RhcnQgJiYgcHJlZmVycmVkUG9zID49IGVuZEEgPyBzdGFydCAtIHByZWZlcnJlZFBvcyA6IDA7XG4gICAgc3RhcnQgLT0gbW92ZTtcbiAgICBlbmRCID0gc3RhcnQgKyAoZW5kQiAtIGVuZEEpO1xuICAgIGVuZEEgPSBzdGFydDtcbiAgfSBlbHNlIGlmIChlbmRCIDwgc3RhcnQpIHtcbiAgICB2YXIgbW92ZSQxID0gcHJlZmVycmVkUG9zIDw9IHN0YXJ0ICYmIHByZWZlcnJlZFBvcyA+PSBlbmRCID8gc3RhcnQgLSBwcmVmZXJyZWRQb3MgOiAwO1xuICAgIHN0YXJ0IC09IG1vdmUkMTtcbiAgICBlbmRBID0gc3RhcnQgKyAoZW5kQSAtIGVuZEIpO1xuICAgIGVuZEIgPSBzdGFydDtcbiAgfVxuICByZXR1cm4ge3N0YXJ0OiBzdGFydCwgZW5kQTogZW5kQSwgZW5kQjogZW5kQn1cbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplRm9yQ2xpcGJvYXJkKHZpZXcsIHNsaWNlKSB7XG4gIHZhciBjb250ZXh0ID0gW107XG4gIHZhciBjb250ZW50ID0gc2xpY2UuY29udGVudDtcbiAgdmFyIG9wZW5TdGFydCA9IHNsaWNlLm9wZW5TdGFydDtcbiAgdmFyIG9wZW5FbmQgPSBzbGljZS5vcGVuRW5kO1xuICB3aGlsZSAob3BlblN0YXJ0ID4gMSAmJiBvcGVuRW5kID4gMSAmJiBjb250ZW50LmNoaWxkQ291bnQgPT0gMSAmJiBjb250ZW50LmZpcnN0Q2hpbGQuY2hpbGRDb3VudCA9PSAxKSB7XG4gICAgb3BlblN0YXJ0LS07XG4gICAgb3BlbkVuZC0tO1xuICAgIHZhciBub2RlID0gY29udGVudC5maXJzdENoaWxkO1xuICAgIGNvbnRleHQucHVzaChub2RlLnR5cGUubmFtZSwgbm9kZS5hdHRycyAhPSBub2RlLnR5cGUuZGVmYXVsdEF0dHJzID8gbm9kZS5hdHRycyA6IG51bGwpO1xuICAgIGNvbnRlbnQgPSBub2RlLmNvbnRlbnQ7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplciA9IHZpZXcuc29tZVByb3AoXCJjbGlwYm9hcmRTZXJpYWxpemVyXCIpIHx8IERPTVNlcmlhbGl6ZXIuZnJvbVNjaGVtYSh2aWV3LnN0YXRlLnNjaGVtYSk7XG4gIHZhciBkb2MgPSBkZXRhY2hlZERvYygpLCB3cmFwID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIHdyYXAuYXBwZW5kQ2hpbGQoc2VyaWFsaXplci5zZXJpYWxpemVGcmFnbWVudChjb250ZW50LCB7ZG9jdW1lbnQ6IGRvY30pKTtcblxuICB2YXIgZmlyc3RDaGlsZCA9IHdyYXAuZmlyc3RDaGlsZCwgbmVlZHNXcmFwO1xuICB3aGlsZSAoZmlyc3RDaGlsZCAmJiBmaXJzdENoaWxkLm5vZGVUeXBlID09IDEgJiYgKG5lZWRzV3JhcCA9IHdyYXBNYXBbZmlyc3RDaGlsZC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkpIHtcbiAgICBmb3IgKHZhciBpID0gbmVlZHNXcmFwLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgd3JhcHBlciA9IGRvYy5jcmVhdGVFbGVtZW50KG5lZWRzV3JhcFtpXSk7XG4gICAgICB3aGlsZSAod3JhcC5maXJzdENoaWxkKSB7IHdyYXBwZXIuYXBwZW5kQ2hpbGQod3JhcC5maXJzdENoaWxkKTsgfVxuICAgICAgd3JhcC5hcHBlbmRDaGlsZCh3cmFwcGVyKTtcbiAgICAgIGlmIChuZWVkc1dyYXBbaV0gIT0gXCJ0Ym9keVwiKSB7XG4gICAgICAgIG9wZW5TdGFydCsrO1xuICAgICAgICBvcGVuRW5kKys7XG4gICAgICB9XG4gICAgfVxuICAgIGZpcnN0Q2hpbGQgPSB3cmFwLmZpcnN0Q2hpbGQ7XG4gIH1cblxuICBpZiAoZmlyc3RDaGlsZCAmJiBmaXJzdENoaWxkLm5vZGVUeXBlID09IDEpXG4gICAgeyBmaXJzdENoaWxkLnNldEF0dHJpYnV0ZShcImRhdGEtcG0tc2xpY2VcIiwgKG9wZW5TdGFydCArIFwiIFwiICsgb3BlbkVuZCArIFwiIFwiICsgKEpTT04uc3RyaW5naWZ5KGNvbnRleHQpKSkpOyB9XG5cbiAgdmFyIHRleHQgPSB2aWV3LnNvbWVQcm9wKFwiY2xpcGJvYXJkVGV4dFNlcmlhbGl6ZXJcIiwgZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYoc2xpY2UpOyB9KSB8fFxuICAgICAgc2xpY2UuY29udGVudC50ZXh0QmV0d2VlbigwLCBzbGljZS5jb250ZW50LnNpemUsIFwiXFxuXFxuXCIpO1xuXG4gIHJldHVybiB7ZG9tOiB3cmFwLCB0ZXh0OiB0ZXh0fVxufVxuXG4vLyA6IChFZGl0b3JWaWV3LCBzdHJpbmcsIHN0cmluZywgP2Jvb2wsIFJlc29sdmVkUG9zKSDihpIgP1NsaWNlXG4vLyBSZWFkIGEgc2xpY2Ugb2YgY29udGVudCBmcm9tIHRoZSBjbGlwYm9hcmQgKG9yIGRyb3AgZGF0YSkuXG5mdW5jdGlvbiBwYXJzZUZyb21DbGlwYm9hcmQodmlldywgdGV4dCwgaHRtbCwgcGxhaW5UZXh0LCAkY29udGV4dCkge1xuICB2YXIgZG9tLCBpbkNvZGUgPSAkY29udGV4dC5wYXJlbnQudHlwZS5zcGVjLmNvZGUsIHNsaWNlO1xuICBpZiAoIWh0bWwgJiYgIXRleHQpIHsgcmV0dXJuIG51bGwgfVxuICB2YXIgYXNUZXh0ID0gdGV4dCAmJiAocGxhaW5UZXh0IHx8IGluQ29kZSB8fCAhaHRtbCk7XG4gIGlmIChhc1RleHQpIHtcbiAgICB2aWV3LnNvbWVQcm9wKFwidHJhbnNmb3JtUGFzdGVkVGV4dFwiLCBmdW5jdGlvbiAoZikgeyB0ZXh0ID0gZih0ZXh0LCBpbkNvZGUgfHwgcGxhaW5UZXh0KTsgfSk7XG4gICAgaWYgKGluQ29kZSkgeyByZXR1cm4gbmV3IFNsaWNlKEZyYWdtZW50LmZyb20odmlldy5zdGF0ZS5zY2hlbWEudGV4dCh0ZXh0LnJlcGxhY2UoL1xcclxcbj8vZywgXCJcXG5cIikpKSwgMCwgMCkgfVxuICAgIHZhciBwYXJzZWQgPSB2aWV3LnNvbWVQcm9wKFwiY2xpcGJvYXJkVGV4dFBhcnNlclwiLCBmdW5jdGlvbiAoZikgeyByZXR1cm4gZih0ZXh0LCAkY29udGV4dCwgcGxhaW5UZXh0KTsgfSk7XG4gICAgaWYgKHBhcnNlZCkge1xuICAgICAgc2xpY2UgPSBwYXJzZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBtYXJrcyA9ICRjb250ZXh0Lm1hcmtzKCk7XG4gICAgICB2YXIgcmVmID0gdmlldy5zdGF0ZTtcbiAgICAgIHZhciBzY2hlbWEgPSByZWYuc2NoZW1hO1xuICAgICAgdmFyIHNlcmlhbGl6ZXIgPSBET01TZXJpYWxpemVyLmZyb21TY2hlbWEoc2NoZW1hKTtcbiAgICAgIGRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICB0ZXh0LnRyaW0oKS5zcGxpdCgvKD86XFxyXFxuP3xcXG4pKy8pLmZvckVhY2goZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICAgIGRvbS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKSkuYXBwZW5kQ2hpbGQoc2VyaWFsaXplci5zZXJpYWxpemVOb2RlKHNjaGVtYS50ZXh0KGJsb2NrLCBtYXJrcykpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2aWV3LnNvbWVQcm9wKFwidHJhbnNmb3JtUGFzdGVkSFRNTFwiLCBmdW5jdGlvbiAoZikgeyBodG1sID0gZihodG1sKTsgfSk7XG4gICAgZG9tID0gcmVhZEhUTUwoaHRtbCk7XG4gICAgaWYgKHJlc3VsdC53ZWJraXQpIHsgcmVzdG9yZVJlcGxhY2VkU3BhY2VzKGRvbSk7IH1cbiAgfVxuXG4gIHZhciBjb250ZXh0Tm9kZSA9IGRvbSAmJiBkb20ucXVlcnlTZWxlY3RvcihcIltkYXRhLXBtLXNsaWNlXVwiKTtcbiAgdmFyIHNsaWNlRGF0YSA9IGNvbnRleHROb2RlICYmIC9eKFxcZCspIChcXGQrKSAoLiopLy5leGVjKGNvbnRleHROb2RlLmdldEF0dHJpYnV0ZShcImRhdGEtcG0tc2xpY2VcIikpO1xuICBpZiAoIXNsaWNlKSB7XG4gICAgdmFyIHBhcnNlciA9IHZpZXcuc29tZVByb3AoXCJjbGlwYm9hcmRQYXJzZXJcIikgfHwgdmlldy5zb21lUHJvcChcImRvbVBhcnNlclwiKSB8fCBET01QYXJzZXIuZnJvbVNjaGVtYSh2aWV3LnN0YXRlLnNjaGVtYSk7XG4gICAgc2xpY2UgPSBwYXJzZXIucGFyc2VTbGljZShkb20sIHtwcmVzZXJ2ZVdoaXRlc3BhY2U6ICEhKGFzVGV4dCB8fCBzbGljZURhdGEpLCBjb250ZXh0OiAkY29udGV4dH0pO1xuICB9XG4gIGlmIChzbGljZURhdGEpXG4gICAgeyBzbGljZSA9IGFkZENvbnRleHQoY2xvc2VTbGljZShzbGljZSwgK3NsaWNlRGF0YVsxXSwgK3NsaWNlRGF0YVsyXSksIHNsaWNlRGF0YVszXSk7IH1cbiAgZWxzZSAvLyBIVE1MIHdhc24ndCBjcmVhdGVkIGJ5IFByb3NlTWlycm9yLiBNYWtlIHN1cmUgdG9wLWxldmVsIHNpYmxpbmdzIGFyZSBjb2hlcmVudFxuICAgIHsgc2xpY2UgPSBTbGljZS5tYXhPcGVuKG5vcm1hbGl6ZVNpYmxpbmdzKHNsaWNlLmNvbnRlbnQsICRjb250ZXh0KSwgZmFsc2UpOyB9XG5cbiAgdmlldy5zb21lUHJvcChcInRyYW5zZm9ybVBhc3RlZFwiLCBmdW5jdGlvbiAoZikgeyBzbGljZSA9IGYoc2xpY2UpOyB9KTtcbiAgcmV0dXJuIHNsaWNlXG59XG5cbi8vIFRha2VzIGEgc2xpY2UgcGFyc2VkIHdpdGggcGFyc2VTbGljZSwgd2hpY2ggbWVhbnMgdGhlcmUgaGFzbid0IGJlZW5cbi8vIGFueSBjb250ZW50LWV4cHJlc3Npb24gY2hlY2tpbmcgZG9uZSBvbiB0aGUgdG9wIG5vZGVzLCB0cmllcyB0b1xuLy8gZmluZCBhIHBhcmVudCBub2RlIGluIHRoZSBjdXJyZW50IGNvbnRleHQgdGhhdCBtaWdodCBmaXQgdGhlIG5vZGVzLFxuLy8gYW5kIGlmIHN1Y2Nlc3NmdWwsIHJlYnVpbGRzIHRoZSBzbGljZSBzbyB0aGF0IGl0IGZpdHMgaW50byB0aGF0IHBhcmVudC5cbi8vXG4vLyBUaGlzIGFkZHJlc3NlcyB0aGUgcHJvYmxlbSB0aGF0IFRyYW5zZm9ybS5yZXBsYWNlIGV4cGVjdHMgYVxuLy8gY29oZXJlbnQgc2xpY2UsIGFuZCB3aWxsIGZhaWwgdG8gcGxhY2UgYSBzZXQgb2Ygc2libGluZ3MgdGhhdCBkb24ndFxuLy8gZml0IGFueXdoZXJlIGluIHRoZSBzY2hlbWEuXG5mdW5jdGlvbiBub3JtYWxpemVTaWJsaW5ncyhmcmFnbWVudCwgJGNvbnRleHQpIHtcbiAgaWYgKGZyYWdtZW50LmNoaWxkQ291bnQgPCAyKSB7IHJldHVybiBmcmFnbWVudCB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBkICkge1xuICAgIHZhciBwYXJlbnQgPSAkY29udGV4dC5ub2RlKGQpO1xuICAgIHZhciBtYXRjaCA9IHBhcmVudC5jb250ZW50TWF0Y2hBdCgkY29udGV4dC5pbmRleChkKSk7XG4gICAgdmFyIGxhc3RXcmFwID0gKHZvaWQgMCksIHJlc3VsdCA9IFtdO1xuICAgIGZyYWdtZW50LmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIGlmICghcmVzdWx0KSB7IHJldHVybiB9XG4gICAgICB2YXIgd3JhcCA9IG1hdGNoLmZpbmRXcmFwcGluZyhub2RlLnR5cGUpLCBpbkxhc3Q7XG4gICAgICBpZiAoIXdyYXApIHsgcmV0dXJuIHJlc3VsdCA9IG51bGwgfVxuICAgICAgaWYgKGluTGFzdCA9IHJlc3VsdC5sZW5ndGggJiYgbGFzdFdyYXAubGVuZ3RoICYmIGFkZFRvU2libGluZyh3cmFwLCBsYXN0V3JhcCwgbm9kZSwgcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSwgMCkpIHtcbiAgICAgICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSA9IGluTGFzdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChyZXN1bHQubGVuZ3RoKSB7IHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV0gPSBjbG9zZVJpZ2h0KHJlc3VsdFtyZXN1bHQubGVuZ3RoIC0gMV0sIGxhc3RXcmFwLmxlbmd0aCk7IH1cbiAgICAgICAgdmFyIHdyYXBwZWQgPSB3aXRoV3JhcHBlcnMobm9kZSwgd3JhcCk7XG4gICAgICAgIHJlc3VsdC5wdXNoKHdyYXBwZWQpO1xuICAgICAgICBtYXRjaCA9IG1hdGNoLm1hdGNoVHlwZSh3cmFwcGVkLnR5cGUsIHdyYXBwZWQuYXR0cnMpO1xuICAgICAgICBsYXN0V3JhcCA9IHdyYXA7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdCkgeyByZXR1cm4geyB2OiBGcmFnbWVudC5mcm9tKHJlc3VsdCkgfSB9XG4gIH07XG5cbiAgZm9yICh2YXIgZCA9ICRjb250ZXh0LmRlcHRoOyBkID49IDA7IGQtLSkge1xuICAgIHZhciByZXR1cm5lZCA9IGxvb3AoIGQgKTtcblxuICAgIGlmICggcmV0dXJuZWQgKSByZXR1cm4gcmV0dXJuZWQudjtcbiAgfVxuICByZXR1cm4gZnJhZ21lbnRcbn1cblxuZnVuY3Rpb24gd2l0aFdyYXBwZXJzKG5vZGUsIHdyYXAsIGZyb20pIHtcbiAgaWYgKCBmcm9tID09PSB2b2lkIDAgKSBmcm9tID0gMDtcblxuICBmb3IgKHZhciBpID0gd3JhcC5sZW5ndGggLSAxOyBpID49IGZyb207IGktLSlcbiAgICB7IG5vZGUgPSB3cmFwW2ldLmNyZWF0ZShudWxsLCBGcmFnbWVudC5mcm9tKG5vZGUpKTsgfVxuICByZXR1cm4gbm9kZVxufVxuXG4vLyBVc2VkIHRvIGdyb3VwIGFkamFjZW50IG5vZGVzIHdyYXBwZWQgaW4gc2ltaWxhciBwYXJlbnRzIGJ5XG4vLyBub3JtYWxpemVTaWJsaW5ncyBpbnRvIHRoZSBzYW1lIHBhcmVudCBub2RlXG5mdW5jdGlvbiBhZGRUb1NpYmxpbmcod3JhcCwgbGFzdFdyYXAsIG5vZGUsIHNpYmxpbmcsIGRlcHRoKSB7XG4gIGlmIChkZXB0aCA8IHdyYXAubGVuZ3RoICYmIGRlcHRoIDwgbGFzdFdyYXAubGVuZ3RoICYmIHdyYXBbZGVwdGhdID09IGxhc3RXcmFwW2RlcHRoXSkge1xuICAgIHZhciBpbm5lciA9IGFkZFRvU2libGluZyh3cmFwLCBsYXN0V3JhcCwgbm9kZSwgc2libGluZy5sYXN0Q2hpbGQsIGRlcHRoICsgMSk7XG4gICAgaWYgKGlubmVyKSB7IHJldHVybiBzaWJsaW5nLmNvcHkoc2libGluZy5jb250ZW50LnJlcGxhY2VDaGlsZChzaWJsaW5nLmNoaWxkQ291bnQgLSAxLCBpbm5lcikpIH1cbiAgICB2YXIgbWF0Y2ggPSBzaWJsaW5nLmNvbnRlbnRNYXRjaEF0KHNpYmxpbmcuY2hpbGRDb3VudCk7XG4gICAgaWYgKG1hdGNoLm1hdGNoVHlwZShkZXB0aCA9PSB3cmFwLmxlbmd0aCAtIDEgPyBub2RlLnR5cGUgOiB3cmFwW2RlcHRoICsgMV0pKVxuICAgICAgeyByZXR1cm4gc2libGluZy5jb3B5KHNpYmxpbmcuY29udGVudC5hcHBlbmQoRnJhZ21lbnQuZnJvbSh3aXRoV3JhcHBlcnMobm9kZSwgd3JhcCwgZGVwdGggKyAxKSkpKSB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvc2VSaWdodChub2RlLCBkZXB0aCkge1xuICBpZiAoZGVwdGggPT0gMCkgeyByZXR1cm4gbm9kZSB9XG4gIHZhciBmcmFnbWVudCA9IG5vZGUuY29udGVudC5yZXBsYWNlQ2hpbGQobm9kZS5jaGlsZENvdW50IC0gMSwgY2xvc2VSaWdodChub2RlLmxhc3RDaGlsZCwgZGVwdGggLSAxKSk7XG4gIHZhciBmaWxsID0gbm9kZS5jb250ZW50TWF0Y2hBdChub2RlLmNoaWxkQ291bnQpLmZpbGxCZWZvcmUoRnJhZ21lbnQuZW1wdHksIHRydWUpO1xuICByZXR1cm4gbm9kZS5jb3B5KGZyYWdtZW50LmFwcGVuZChmaWxsKSlcbn1cblxuZnVuY3Rpb24gY2xvc2VSYW5nZShmcmFnbWVudCwgc2lkZSwgZnJvbSwgdG8sIGRlcHRoLCBvcGVuRW5kKSB7XG4gIHZhciBub2RlID0gc2lkZSA8IDAgPyBmcmFnbWVudC5maXJzdENoaWxkIDogZnJhZ21lbnQubGFzdENoaWxkLCBpbm5lciA9IG5vZGUuY29udGVudDtcbiAgaWYgKGRlcHRoIDwgdG8gLSAxKSB7IGlubmVyID0gY2xvc2VSYW5nZShpbm5lciwgc2lkZSwgZnJvbSwgdG8sIGRlcHRoICsgMSwgb3BlbkVuZCk7IH1cbiAgaWYgKGRlcHRoID49IGZyb20pXG4gICAgeyBpbm5lciA9IHNpZGUgPCAwID8gbm9kZS5jb250ZW50TWF0Y2hBdCgwKS5maWxsQmVmb3JlKGlubmVyLCBmcmFnbWVudC5jaGlsZENvdW50ID4gMSB8fCBvcGVuRW5kIDw9IGRlcHRoKS5hcHBlbmQoaW5uZXIpXG4gICAgICA6IGlubmVyLmFwcGVuZChub2RlLmNvbnRlbnRNYXRjaEF0KG5vZGUuY2hpbGRDb3VudCkuZmlsbEJlZm9yZShGcmFnbWVudC5lbXB0eSwgdHJ1ZSkpOyB9XG4gIHJldHVybiBmcmFnbWVudC5yZXBsYWNlQ2hpbGQoc2lkZSA8IDAgPyAwIDogZnJhZ21lbnQuY2hpbGRDb3VudCAtIDEsIG5vZGUuY29weShpbm5lcikpXG59XG5cbmZ1bmN0aW9uIGNsb3NlU2xpY2Uoc2xpY2UsIG9wZW5TdGFydCwgb3BlbkVuZCkge1xuICBpZiAob3BlblN0YXJ0IDwgc2xpY2Uub3BlblN0YXJ0KVxuICAgIHsgc2xpY2UgPSBuZXcgU2xpY2UoY2xvc2VSYW5nZShzbGljZS5jb250ZW50LCAtMSwgb3BlblN0YXJ0LCBzbGljZS5vcGVuU3RhcnQsIDAsIHNsaWNlLm9wZW5FbmQpLCBvcGVuU3RhcnQsIHNsaWNlLm9wZW5FbmQpOyB9XG4gIGlmIChvcGVuRW5kIDwgc2xpY2Uub3BlbkVuZClcbiAgICB7IHNsaWNlID0gbmV3IFNsaWNlKGNsb3NlUmFuZ2Uoc2xpY2UuY29udGVudCwgMSwgb3BlbkVuZCwgc2xpY2Uub3BlbkVuZCwgMCwgMCksIHNsaWNlLm9wZW5TdGFydCwgb3BlbkVuZCk7IH1cbiAgcmV0dXJuIHNsaWNlXG59XG5cbi8vIFRyaWNrIGZyb20galF1ZXJ5IC0tIHNvbWUgZWxlbWVudHMgbXVzdCBiZSB3cmFwcGVkIGluIG90aGVyXG4vLyBlbGVtZW50cyBmb3IgaW5uZXJIVE1MIHRvIHdvcmsuIEkuZS4gaWYgeW91IGRvIGBkaXYuaW5uZXJIVE1MID1cbi8vIFwiPHRkPi4uPC90ZD5cImAgdGhlIHRhYmxlIGNlbGxzIGFyZSBpZ25vcmVkLlxudmFyIHdyYXBNYXAgPSB7XG4gIHRoZWFkOiBbXCJ0YWJsZVwiXSxcbiAgdGJvZHk6IFtcInRhYmxlXCJdLFxuICB0Zm9vdDogW1widGFibGVcIl0sXG4gIGNhcHRpb246IFtcInRhYmxlXCJdLFxuICBjb2xncm91cDogW1widGFibGVcIl0sXG4gIGNvbDogW1widGFibGVcIiwgXCJjb2xncm91cFwiXSxcbiAgdHI6IFtcInRhYmxlXCIsIFwidGJvZHlcIl0sXG4gIHRkOiBbXCJ0YWJsZVwiLCBcInRib2R5XCIsIFwidHJcIl0sXG4gIHRoOiBbXCJ0YWJsZVwiLCBcInRib2R5XCIsIFwidHJcIl1cbn07XG5cbnZhciBfZGV0YWNoZWREb2MgPSBudWxsO1xuZnVuY3Rpb24gZGV0YWNoZWREb2MoKSB7XG4gIHJldHVybiBfZGV0YWNoZWREb2MgfHwgKF9kZXRhY2hlZERvYyA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcInRpdGxlXCIpKVxufVxuXG5mdW5jdGlvbiByZWFkSFRNTChodG1sKSB7XG4gIHZhciBtZXRhcyA9IC9eKFxccyo8bWV0YSBbXj5dKj4pKi8uZXhlYyhodG1sKTtcbiAgaWYgKG1ldGFzKSB7IGh0bWwgPSBodG1sLnNsaWNlKG1ldGFzWzBdLmxlbmd0aCk7IH1cbiAgdmFyIGVsdCA9IGRldGFjaGVkRG9jKCkuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgdmFyIGZpcnN0VGFnID0gLzwoW2Etel1bXj5cXHNdKykvaS5leGVjKGh0bWwpLCB3cmFwO1xuICBpZiAod3JhcCA9IGZpcnN0VGFnICYmIHdyYXBNYXBbZmlyc3RUYWdbMV0udG9Mb3dlckNhc2UoKV0pXG4gICAgeyBodG1sID0gd3JhcC5tYXAoZnVuY3Rpb24gKG4pIHsgcmV0dXJuIFwiPFwiICsgbiArIFwiPlwiOyB9KS5qb2luKFwiXCIpICsgaHRtbCArIHdyYXAubWFwKGZ1bmN0aW9uIChuKSB7IHJldHVybiBcIjwvXCIgKyBuICsgXCI+XCI7IH0pLnJldmVyc2UoKS5qb2luKFwiXCIpOyB9XG4gIGVsdC5pbm5lckhUTUwgPSBodG1sO1xuICBpZiAod3JhcCkgeyBmb3IgKHZhciBpID0gMDsgaSA8IHdyYXAubGVuZ3RoOyBpKyspIHsgZWx0ID0gZWx0LnF1ZXJ5U2VsZWN0b3Iod3JhcFtpXSkgfHwgZWx0OyB9IH1cbiAgcmV0dXJuIGVsdFxufVxuXG4vLyBXZWJraXQgYnJvd3NlcnMgZG8gc29tZSBoYXJkLXRvLXByZWRpY3QgcmVwbGFjZW1lbnQgb2YgcmVndWxhclxuLy8gc3BhY2VzIHdpdGggbm9uLWJyZWFraW5nIHNwYWNlcyB3aGVuIHB1dHRpbmcgY29udGVudCBvbiB0aGVcbi8vIGNsaXBib2FyZC4gVGhpcyB0cmllcyB0byBjb252ZXJ0IHN1Y2ggbm9uLWJyZWFraW5nIHNwYWNlcyAod2hpY2hcbi8vIHdpbGwgYmUgd3JhcHBlZCBpbiBhIHBsYWluIHNwYW4gb24gQ2hyb21lLCBhIHNwYW4gd2l0aCBjbGFzc1xuLy8gQXBwbGUtY29udmVydGVkLXNwYWNlIG9uIFNhZmFyaSkgYmFjayB0byByZWd1bGFyIHNwYWNlcy5cbmZ1bmN0aW9uIHJlc3RvcmVSZXBsYWNlZFNwYWNlcyhkb20pIHtcbiAgdmFyIG5vZGVzID0gZG9tLnF1ZXJ5U2VsZWN0b3JBbGwocmVzdWx0LmNocm9tZSA/IFwic3Bhbjpub3QoW2NsYXNzXSk6bm90KFtzdHlsZV0pXCIgOiBcInNwYW4uQXBwbGUtY29udmVydGVkLXNwYWNlXCIpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICBpZiAobm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA9PSAxICYmIG5vZGUudGV4dENvbnRlbnQgPT0gXCJcXHUwMGEwXCIgJiYgbm9kZS5wYXJlbnROb2RlKVxuICAgICAgeyBub2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGRvbS5vd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiIFwiKSwgbm9kZSk7IH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRDb250ZXh0KHNsaWNlLCBjb250ZXh0KSB7XG4gIGlmICghc2xpY2Uuc2l6ZSkgeyByZXR1cm4gc2xpY2UgfVxuICB2YXIgc2NoZW1hID0gc2xpY2UuY29udGVudC5maXJzdENoaWxkLnR5cGUuc2NoZW1hLCBhcnJheTtcbiAgdHJ5IHsgYXJyYXkgPSBKU09OLnBhcnNlKGNvbnRleHQpOyB9XG4gIGNhdGNoKGUpIHsgcmV0dXJuIHNsaWNlIH1cbiAgdmFyIGNvbnRlbnQgPSBzbGljZS5jb250ZW50O1xuICB2YXIgb3BlblN0YXJ0ID0gc2xpY2Uub3BlblN0YXJ0O1xuICB2YXIgb3BlbkVuZCA9IHNsaWNlLm9wZW5FbmQ7XG4gIGZvciAodmFyIGkgPSBhcnJheS5sZW5ndGggLSAyOyBpID49IDA7IGkgLT0gMikge1xuICAgIHZhciB0eXBlID0gc2NoZW1hLm5vZGVzW2FycmF5W2ldXTtcbiAgICBpZiAoIXR5cGUgfHwgdHlwZS5oYXNSZXF1aXJlZEF0dHJzKCkpIHsgYnJlYWsgfVxuICAgIGNvbnRlbnQgPSBGcmFnbWVudC5mcm9tKHR5cGUuY3JlYXRlKGFycmF5W2kgKyAxXSwgY29udGVudCkpO1xuICAgIG9wZW5TdGFydCsrOyBvcGVuRW5kKys7XG4gIH1cbiAgcmV0dXJuIG5ldyBTbGljZShjb250ZW50LCBvcGVuU3RhcnQsIG9wZW5FbmQpXG59XG5cbnZhciBvYnNlcnZlT3B0aW9ucyA9IHtcbiAgY2hpbGRMaXN0OiB0cnVlLFxuICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICBjaGFyYWN0ZXJEYXRhT2xkVmFsdWU6IHRydWUsXG4gIGF0dHJpYnV0ZXM6IHRydWUsXG4gIGF0dHJpYnV0ZU9sZFZhbHVlOiB0cnVlLFxuICBzdWJ0cmVlOiB0cnVlXG59O1xuLy8gSUUxMSBoYXMgdmVyeSBicm9rZW4gbXV0YXRpb24gb2JzZXJ2ZXJzLCBzbyB3ZSBhbHNvIGxpc3RlbiB0byBET01DaGFyYWN0ZXJEYXRhTW9kaWZpZWRcbnZhciB1c2VDaGFyRGF0YSA9IHJlc3VsdC5pZSAmJiByZXN1bHQuaWVfdmVyc2lvbiA8PSAxMTtcblxudmFyIFNlbGVjdGlvblN0YXRlID0gZnVuY3Rpb24gU2VsZWN0aW9uU3RhdGUoKSB7XG4gIHRoaXMuYW5jaG9yTm9kZSA9IHRoaXMuYW5jaG9yT2Zmc2V0ID0gdGhpcy5mb2N1c05vZGUgPSB0aGlzLmZvY3VzT2Zmc2V0ID0gbnVsbDtcbn07XG5cblNlbGVjdGlvblN0YXRlLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiBzZXQgKHNlbCkge1xuICB0aGlzLmFuY2hvck5vZGUgPSBzZWwuYW5jaG9yTm9kZTsgdGhpcy5hbmNob3JPZmZzZXQgPSBzZWwuYW5jaG9yT2Zmc2V0O1xuICB0aGlzLmZvY3VzTm9kZSA9IHNlbC5mb2N1c05vZGU7IHRoaXMuZm9jdXNPZmZzZXQgPSBzZWwuZm9jdXNPZmZzZXQ7XG59O1xuXG5TZWxlY3Rpb25TdGF0ZS5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSAoc2VsKSB7XG4gIHJldHVybiBzZWwuYW5jaG9yTm9kZSA9PSB0aGlzLmFuY2hvck5vZGUgJiYgc2VsLmFuY2hvck9mZnNldCA9PSB0aGlzLmFuY2hvck9mZnNldCAmJlxuICAgIHNlbC5mb2N1c05vZGUgPT0gdGhpcy5mb2N1c05vZGUgJiYgc2VsLmZvY3VzT2Zmc2V0ID09IHRoaXMuZm9jdXNPZmZzZXRcbn07XG5cbnZhciBET01PYnNlcnZlciA9IGZ1bmN0aW9uIERPTU9ic2VydmVyKHZpZXcsIGhhbmRsZURPTUNoYW5nZSkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB0aGlzLnZpZXcgPSB2aWV3O1xuICB0aGlzLmhhbmRsZURPTUNoYW5nZSA9IGhhbmRsZURPTUNoYW5nZTtcbiAgdGhpcy5xdWV1ZSA9IFtdO1xuICB0aGlzLmZsdXNoaW5nU29vbiA9IC0xO1xuICB0aGlzLm9ic2VydmVyID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgJiZcbiAgICBuZXcgd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKG11dGF0aW9ucykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtdXRhdGlvbnMubGVuZ3RoOyBpKyspIHsgdGhpcyQxLnF1ZXVlLnB1c2gobXV0YXRpb25zW2ldKTsgfVxuICAgICAgLy8gSUUxMSB3aWxsIHNvbWV0aW1lcyAob24gYmFja3NwYWNpbmcgb3V0IGEgc2luZ2xlIGNoYXJhY3RlclxuICAgICAgLy8gdGV4dCBub2RlIGFmdGVyIGEgQlIgbm9kZSkgY2FsbCB0aGUgb2JzZXJ2ZXIgY2FsbGJhY2tcbiAgICAgIC8vIGJlZm9yZSBhY3R1YWxseSB1cGRhdGluZyB0aGUgRE9NLCB3aGljaCB3aWxsIGNhdXNlXG4gICAgICAvLyBQcm9zZU1pcnJvciB0byBtaXNzIHRoZSBjaGFuZ2UgKHNlZSAjOTMwKVxuICAgICAgaWYgKHJlc3VsdC5pZSAmJiByZXN1bHQuaWVfdmVyc2lvbiA8PSAxMSAmJiBtdXRhdGlvbnMuc29tZShcbiAgICAgICAgZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0udHlwZSA9PSBcImNoaWxkTGlzdFwiICYmIG0ucmVtb3ZlZE5vZGVzLmxlbmd0aCB8fFxuICAgICAgICAgICAgIG0udHlwZSA9PSBcImNoYXJhY3RlckRhdGFcIiAmJiBtLm9sZFZhbHVlLmxlbmd0aCA+IG0udGFyZ2V0Lm5vZGVWYWx1ZS5sZW5ndGg7IH0pKVxuICAgICAgICB7IHRoaXMkMS5mbHVzaFNvb24oKTsgfVxuICAgICAgZWxzZVxuICAgICAgICB7IHRoaXMkMS5mbHVzaCgpOyB9XG4gICAgfSk7XG4gIHRoaXMuY3VycmVudFNlbGVjdGlvbiA9IG5ldyBTZWxlY3Rpb25TdGF0ZTtcbiAgaWYgKHVzZUNoYXJEYXRhKSB7XG4gICAgdGhpcy5vbkNoYXJEYXRhID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIHRoaXMkMS5xdWV1ZS5wdXNoKHt0YXJnZXQ6IGUudGFyZ2V0LCB0eXBlOiBcImNoYXJhY3RlckRhdGFcIiwgb2xkVmFsdWU6IGUucHJldlZhbHVlfSk7XG4gICAgICB0aGlzJDEuZmx1c2hTb29uKCk7XG4gICAgfTtcbiAgfVxuICB0aGlzLm9uU2VsZWN0aW9uQ2hhbmdlID0gdGhpcy5vblNlbGVjdGlvbkNoYW5nZS5iaW5kKHRoaXMpO1xuICB0aGlzLnN1cHByZXNzaW5nU2VsZWN0aW9uVXBkYXRlcyA9IGZhbHNlO1xufTtcblxuRE9NT2JzZXJ2ZXIucHJvdG90eXBlLmZsdXNoU29vbiA9IGZ1bmN0aW9uIGZsdXNoU29vbiAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKHRoaXMuZmx1c2hpbmdTb29uIDwgMClcbiAgICB7IHRoaXMuZmx1c2hpbmdTb29uID0gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyB0aGlzJDEuZmx1c2hpbmdTb29uID0gLTE7IHRoaXMkMS5mbHVzaCgpOyB9LCAyMCk7IH1cbn07XG5cbkRPTU9ic2VydmVyLnByb3RvdHlwZS5mb3JjZUZsdXNoID0gZnVuY3Rpb24gZm9yY2VGbHVzaCAoKSB7XG4gIGlmICh0aGlzLmZsdXNoaW5nU29vbiA+IC0xKSB7XG4gICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLmZsdXNoaW5nU29vbik7XG4gICAgdGhpcy5mbHVzaGluZ1Nvb24gPSAtMTtcbiAgICB0aGlzLmZsdXNoKCk7XG4gIH1cbn07XG5cbkRPTU9ic2VydmVyLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uIHN0YXJ0ICgpIHtcbiAgaWYgKHRoaXMub2JzZXJ2ZXIpXG4gICAgeyB0aGlzLm9ic2VydmVyLm9ic2VydmUodGhpcy52aWV3LmRvbSwgb2JzZXJ2ZU9wdGlvbnMpOyB9XG4gIGlmICh1c2VDaGFyRGF0YSlcbiAgICB7IHRoaXMudmlldy5kb20uYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNoYXJhY3RlckRhdGFNb2RpZmllZFwiLCB0aGlzLm9uQ2hhckRhdGEpOyB9XG4gIHRoaXMuY29ubmVjdFNlbGVjdGlvbigpO1xufTtcblxuRE9NT2JzZXJ2ZXIucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiBzdG9wICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBpZiAodGhpcy5vYnNlcnZlcikge1xuICAgIHZhciB0YWtlID0gdGhpcy5vYnNlcnZlci50YWtlUmVjb3JkcygpO1xuICAgIGlmICh0YWtlLmxlbmd0aCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWtlLmxlbmd0aDsgaSsrKSB7IHRoaXMucXVldWUucHVzaCh0YWtlW2ldKTsgfVxuICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyQxLmZsdXNoKCk7IH0sIDIwKTtcbiAgICB9XG4gICAgdGhpcy5vYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gIH1cbiAgaWYgKHVzZUNoYXJEYXRhKSB7IHRoaXMudmlldy5kb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNoYXJhY3RlckRhdGFNb2RpZmllZFwiLCB0aGlzLm9uQ2hhckRhdGEpOyB9XG4gIHRoaXMuZGlzY29ubmVjdFNlbGVjdGlvbigpO1xufTtcblxuRE9NT2JzZXJ2ZXIucHJvdG90eXBlLmNvbm5lY3RTZWxlY3Rpb24gPSBmdW5jdGlvbiBjb25uZWN0U2VsZWN0aW9uICgpIHtcbiAgdGhpcy52aWV3LmRvbS5vd25lckRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzZWxlY3Rpb25jaGFuZ2VcIiwgdGhpcy5vblNlbGVjdGlvbkNoYW5nZSk7XG59O1xuXG5ET01PYnNlcnZlci5wcm90b3R5cGUuZGlzY29ubmVjdFNlbGVjdGlvbiA9IGZ1bmN0aW9uIGRpc2Nvbm5lY3RTZWxlY3Rpb24gKCkge1xuICB0aGlzLnZpZXcuZG9tLm93bmVyRG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNlbGVjdGlvbmNoYW5nZVwiLCB0aGlzLm9uU2VsZWN0aW9uQ2hhbmdlKTtcbn07XG5cbkRPTU9ic2VydmVyLnByb3RvdHlwZS5zdXBwcmVzc1NlbGVjdGlvblVwZGF0ZXMgPSBmdW5jdGlvbiBzdXBwcmVzc1NlbGVjdGlvblVwZGF0ZXMgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHRoaXMuc3VwcHJlc3NpbmdTZWxlY3Rpb25VcGRhdGVzID0gdHJ1ZTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEuc3VwcHJlc3NpbmdTZWxlY3Rpb25VcGRhdGVzID0gZmFsc2U7IH0sIDUwKTtcbn07XG5cbkRPTU9ic2VydmVyLnByb3RvdHlwZS5vblNlbGVjdGlvbkNoYW5nZSA9IGZ1bmN0aW9uIG9uU2VsZWN0aW9uQ2hhbmdlICgpIHtcbiAgaWYgKCFoYXNGb2N1c0FuZFNlbGVjdGlvbih0aGlzLnZpZXcpKSB7IHJldHVybiB9XG4gIGlmICh0aGlzLnN1cHByZXNzaW5nU2VsZWN0aW9uVXBkYXRlcykgeyByZXR1cm4gc2VsZWN0aW9uVG9ET00odGhpcy52aWV3KSB9XG4gIC8vIERlbGV0aW9ucyBvbiBJRTExIGZpcmUgdGhlaXIgZXZlbnRzIGluIHRoZSB3cm9uZyBvcmRlciwgZ2l2aW5nXG4gIC8vIHVzIGEgc2VsZWN0aW9uIGNoYW5nZSBldmVudCBiZWZvcmUgdGhlIERPTSBjaGFuZ2VzIGFyZVxuICAvLyByZXBvcnRlZC5cbiAgaWYgKHJlc3VsdC5pZSAmJiByZXN1bHQuaWVfdmVyc2lvbiA8PSAxMSAmJiAhdGhpcy52aWV3LnN0YXRlLnNlbGVjdGlvbi5lbXB0eSkge1xuICAgIHZhciBzZWwgPSB0aGlzLnZpZXcucm9vdC5nZXRTZWxlY3Rpb24oKTtcbiAgICAvLyBTZWxlY3Rpb24uaXNDb2xsYXBzZWQgaXNuJ3QgcmVsaWFibGUgb24gSUVcbiAgICBpZiAoc2VsLmZvY3VzTm9kZSAmJiBpc0VxdWl2YWxlbnRQb3NpdGlvbihzZWwuZm9jdXNOb2RlLCBzZWwuZm9jdXNPZmZzZXQsIHNlbC5hbmNob3JOb2RlLCBzZWwuYW5jaG9yT2Zmc2V0KSlcbiAgICAgIHsgcmV0dXJuIHRoaXMuZmx1c2hTb29uKCkgfVxuICB9XG4gIHRoaXMuZmx1c2goKTtcbn07XG5cbkRPTU9ic2VydmVyLnByb3RvdHlwZS5zZXRDdXJTZWxlY3Rpb24gPSBmdW5jdGlvbiBzZXRDdXJTZWxlY3Rpb24gKCkge1xuICB0aGlzLmN1cnJlbnRTZWxlY3Rpb24uc2V0KHRoaXMudmlldy5yb290LmdldFNlbGVjdGlvbigpKTtcbn07XG5cbkRPTU9ic2VydmVyLnByb3RvdHlwZS5pZ25vcmVTZWxlY3Rpb25DaGFuZ2UgPSBmdW5jdGlvbiBpZ25vcmVTZWxlY3Rpb25DaGFuZ2UgKHNlbCkge1xuICBpZiAoc2VsLnJhbmdlQ291bnQgPT0gMCkgeyByZXR1cm4gdHJ1ZSB9XG4gIHZhciBjb250YWluZXIgPSBzZWwuZ2V0UmFuZ2VBdCgwKS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcbiAgdmFyIGRlc2MgPSB0aGlzLnZpZXcuZG9jVmlldy5uZWFyZXN0RGVzYyhjb250YWluZXIpO1xuICBpZiAoZGVzYyAmJiBkZXNjLmlnbm9yZU11dGF0aW9uKHt0eXBlOiBcInNlbGVjdGlvblwiLCB0YXJnZXQ6IGNvbnRhaW5lci5ub2RlVHlwZSA9PSAzID8gY29udGFpbmVyLnBhcmVudE5vZGUgOiBjb250YWluZXJ9KSkge1xuICAgIHRoaXMuc2V0Q3VyU2VsZWN0aW9uKCk7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxufTtcblxuRE9NT2JzZXJ2ZXIucHJvdG90eXBlLmZsdXNoID0gZnVuY3Rpb24gZmx1c2ggKCkge1xuICBpZiAoIXRoaXMudmlldy5kb2NWaWV3IHx8IHRoaXMuZmx1c2hpbmdTb29uID4gLTEpIHsgcmV0dXJuIH1cbiAgdmFyIG11dGF0aW9ucyA9IHRoaXMub2JzZXJ2ZXIgPyB0aGlzLm9ic2VydmVyLnRha2VSZWNvcmRzKCkgOiBbXTtcbiAgaWYgKHRoaXMucXVldWUubGVuZ3RoKSB7XG4gICAgbXV0YXRpb25zID0gdGhpcy5xdWV1ZS5jb25jYXQobXV0YXRpb25zKTtcbiAgICB0aGlzLnF1ZXVlLmxlbmd0aCA9IDA7XG4gIH1cblxuICB2YXIgc2VsID0gdGhpcy52aWV3LnJvb3QuZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBuZXdTZWwgPSAhdGhpcy5zdXBwcmVzc2luZ1NlbGVjdGlvblVwZGF0ZXMgJiYgIXRoaXMuY3VycmVudFNlbGVjdGlvbi5lcShzZWwpICYmIGhhc1NlbGVjdGlvbih0aGlzLnZpZXcpICYmICF0aGlzLmlnbm9yZVNlbGVjdGlvbkNoYW5nZShzZWwpO1xuXG4gIHZhciBmcm9tID0gLTEsIHRvID0gLTEsIHR5cGVPdmVyID0gZmFsc2UsIGFkZGVkID0gW107XG4gIGlmICh0aGlzLnZpZXcuZWRpdGFibGUpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG11dGF0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJlc3VsdCQxID0gdGhpcy5yZWdpc3Rlck11dGF0aW9uKG11dGF0aW9uc1tpXSwgYWRkZWQpO1xuICAgICAgaWYgKHJlc3VsdCQxKSB7XG4gICAgICAgIGZyb20gPSBmcm9tIDwgMCA/IHJlc3VsdCQxLmZyb20gOiBNYXRoLm1pbihyZXN1bHQkMS5mcm9tLCBmcm9tKTtcbiAgICAgICAgdG8gPSB0byA8IDAgPyByZXN1bHQkMS50byA6IE1hdGgubWF4KHJlc3VsdCQxLnRvLCB0byk7XG4gICAgICAgIGlmIChyZXN1bHQkMS50eXBlT3ZlcikgeyB0eXBlT3ZlciA9IHRydWU7IH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAocmVzdWx0LmdlY2tvICYmIGFkZGVkLmxlbmd0aCA+IDEpIHtcbiAgICB2YXIgYnJzID0gYWRkZWQuZmlsdGVyKGZ1bmN0aW9uIChuKSB7IHJldHVybiBuLm5vZGVOYW1lID09IFwiQlJcIjsgfSk7XG4gICAgaWYgKGJycy5sZW5ndGggPT0gMikge1xuICAgICAgdmFyIGEgPSBicnNbMF07XG4gICAgICAgIHZhciBiID0gYnJzWzFdO1xuICAgICAgaWYgKGEucGFyZW50Tm9kZSAmJiBhLnBhcmVudE5vZGUucGFyZW50Tm9kZSA9PSBiLnBhcmVudE5vZGUpIHsgYi5yZW1vdmUoKTsgfVxuICAgICAgZWxzZSB7IGEucmVtb3ZlKCk7IH1cbiAgICB9XG4gIH1cblxuICBpZiAoZnJvbSA+IC0xIHx8IG5ld1NlbCkge1xuICAgIGlmIChmcm9tID4gLTEpIHtcbiAgICAgIHRoaXMudmlldy5kb2NWaWV3Lm1hcmtEaXJ0eShmcm9tLCB0byk7XG4gICAgICBjaGVja0NTUyh0aGlzLnZpZXcpO1xuICAgIH1cbiAgICB0aGlzLmhhbmRsZURPTUNoYW5nZShmcm9tLCB0bywgdHlwZU92ZXIsIGFkZGVkKTtcbiAgICBpZiAodGhpcy52aWV3LmRvY1ZpZXcuZGlydHkpIHsgdGhpcy52aWV3LnVwZGF0ZVN0YXRlKHRoaXMudmlldy5zdGF0ZSk7IH1cbiAgICBlbHNlIGlmICghdGhpcy5jdXJyZW50U2VsZWN0aW9uLmVxKHNlbCkpIHsgc2VsZWN0aW9uVG9ET00odGhpcy52aWV3KTsgfVxuICAgIHRoaXMuY3VycmVudFNlbGVjdGlvbi5zZXQoc2VsKTtcbiAgfVxufTtcblxuRE9NT2JzZXJ2ZXIucHJvdG90eXBlLnJlZ2lzdGVyTXV0YXRpb24gPSBmdW5jdGlvbiByZWdpc3Rlck11dGF0aW9uIChtdXQsIGFkZGVkKSB7XG4gIC8vIElnbm9yZSBtdXRhdGlvbnMgaW5zaWRlIG5vZGVzIHRoYXQgd2VyZSBhbHJlYWR5IG5vdGVkIGFzIGluc2VydGVkXG4gIGlmIChhZGRlZC5pbmRleE9mKG11dC50YXJnZXQpID4gLTEpIHsgcmV0dXJuIG51bGwgfVxuICB2YXIgZGVzYyA9IHRoaXMudmlldy5kb2NWaWV3Lm5lYXJlc3REZXNjKG11dC50YXJnZXQpO1xuICBpZiAobXV0LnR5cGUgPT0gXCJhdHRyaWJ1dGVzXCIgJiZcbiAgICAgIChkZXNjID09IHRoaXMudmlldy5kb2NWaWV3IHx8IG11dC5hdHRyaWJ1dGVOYW1lID09IFwiY29udGVudGVkaXRhYmxlXCIgfHxcbiAgICAgICAvLyBGaXJlZm94IHNvbWV0aW1lcyBmaXJlcyBzcHVyaW91cyBldmVudHMgZm9yIG51bGwvZW1wdHkgc3R5bGVzXG4gICAgICAgKG11dC5hdHRyaWJ1dGVOYW1lID09IFwic3R5bGVcIiAmJiAhbXV0Lm9sZFZhbHVlICYmICFtdXQudGFyZ2V0LmdldEF0dHJpYnV0ZShcInN0eWxlXCIpKSkpXG4gICAgeyByZXR1cm4gbnVsbCB9XG4gIGlmICghZGVzYyB8fCBkZXNjLmlnbm9yZU11dGF0aW9uKG11dCkpIHsgcmV0dXJuIG51bGwgfVxuXG4gIGlmIChtdXQudHlwZSA9PSBcImNoaWxkTGlzdFwiKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtdXQuYWRkZWROb2Rlcy5sZW5ndGg7IGkrKykgeyBhZGRlZC5wdXNoKG11dC5hZGRlZE5vZGVzW2ldKTsgfVxuICAgIGlmIChkZXNjLmNvbnRlbnRET00gJiYgZGVzYy5jb250ZW50RE9NICE9IGRlc2MuZG9tICYmICFkZXNjLmNvbnRlbnRET00uY29udGFpbnMobXV0LnRhcmdldCkpXG4gICAgICB7IHJldHVybiB7ZnJvbTogZGVzYy5wb3NCZWZvcmUsIHRvOiBkZXNjLnBvc0FmdGVyfSB9XG4gICAgdmFyIHByZXYgPSBtdXQucHJldmlvdXNTaWJsaW5nLCBuZXh0ID0gbXV0Lm5leHRTaWJsaW5nO1xuICAgIGlmIChyZXN1bHQuaWUgJiYgcmVzdWx0LmllX3ZlcnNpb24gPD0gMTEgJiYgbXV0LmFkZGVkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAvLyBJRTExIGdpdmVzIHVzIGluY29ycmVjdCBuZXh0L3ByZXYgc2libGluZ3MgZm9yIHNvbWVcbiAgICAgIC8vIGluc2VydGlvbnMsIHNvIGlmIHRoZXJlIGFyZSBhZGRlZCBub2RlcywgcmVjb21wdXRlIHRob3NlXG4gICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBtdXQuYWRkZWROb2Rlcy5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciByZWYgPSBtdXQuYWRkZWROb2Rlc1tpJDFdO1xuICAgICAgICAgIHZhciBwcmV2aW91c1NpYmxpbmcgPSByZWYucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICAgIHZhciBuZXh0U2libGluZyA9IHJlZi5uZXh0U2libGluZztcbiAgICAgICAgaWYgKCFwcmV2aW91c1NpYmxpbmcgfHwgQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChtdXQuYWRkZWROb2RlcywgcHJldmlvdXNTaWJsaW5nKSA8IDApIHsgcHJldiA9IHByZXZpb3VzU2libGluZzsgfVxuICAgICAgICBpZiAoIW5leHRTaWJsaW5nIHx8IEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwobXV0LmFkZGVkTm9kZXMsIG5leHRTaWJsaW5nKSA8IDApIHsgbmV4dCA9IG5leHRTaWJsaW5nOyB9XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBmcm9tT2Zmc2V0ID0gcHJldiAmJiBwcmV2LnBhcmVudE5vZGUgPT0gbXV0LnRhcmdldFxuICAgICAgICA/IGRvbUluZGV4KHByZXYpICsgMSA6IDA7XG4gICAgdmFyIGZyb20gPSBkZXNjLmxvY2FsUG9zRnJvbURPTShtdXQudGFyZ2V0LCBmcm9tT2Zmc2V0LCAtMSk7XG4gICAgdmFyIHRvT2Zmc2V0ID0gbmV4dCAmJiBuZXh0LnBhcmVudE5vZGUgPT0gbXV0LnRhcmdldFxuICAgICAgICA/IGRvbUluZGV4KG5leHQpIDogbXV0LnRhcmdldC5jaGlsZE5vZGVzLmxlbmd0aDtcbiAgICB2YXIgdG8gPSBkZXNjLmxvY2FsUG9zRnJvbURPTShtdXQudGFyZ2V0LCB0b09mZnNldCwgMSk7XG4gICAgcmV0dXJuIHtmcm9tOiBmcm9tLCB0bzogdG99XG4gIH0gZWxzZSBpZiAobXV0LnR5cGUgPT0gXCJhdHRyaWJ1dGVzXCIpIHtcbiAgICByZXR1cm4ge2Zyb206IGRlc2MucG9zQXRTdGFydCAtIGRlc2MuYm9yZGVyLCB0bzogZGVzYy5wb3NBdEVuZCArIGRlc2MuYm9yZGVyfVxuICB9IGVsc2UgeyAvLyBcImNoYXJhY3RlckRhdGFcIlxuICAgIHJldHVybiB7XG4gICAgICBmcm9tOiBkZXNjLnBvc0F0U3RhcnQsXG4gICAgICB0bzogZGVzYy5wb3NBdEVuZCxcbiAgICAgIC8vIEFuIGV2ZW50IHdhcyBnZW5lcmF0ZWQgZm9yIGEgdGV4dCBjaGFuZ2UgdGhhdCBkaWRuJ3QgY2hhbmdlXG4gICAgICAvLyBhbnkgdGV4dC4gTWFyayB0aGUgZG9tIGNoYW5nZSB0byBmYWxsIGJhY2sgdG8gYXNzdW1pbmcgdGhlXG4gICAgICAvLyBzZWxlY3Rpb24gd2FzIHR5cGVkIG92ZXIgd2l0aCBhbiBpZGVudGljYWwgdmFsdWUgaWYgaXQgY2FuJ3RcbiAgICAgIC8vIGZpbmQgYW5vdGhlciBjaGFuZ2UuXG4gICAgICB0eXBlT3ZlcjogbXV0LnRhcmdldC5ub2RlVmFsdWUgPT0gbXV0Lm9sZFZhbHVlXG4gICAgfVxuICB9XG59O1xuXG52YXIgY3NzQ2hlY2tlZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBjaGVja0NTUyh2aWV3KSB7XG4gIGlmIChjc3NDaGVja2VkKSB7IHJldHVybiB9XG4gIGNzc0NoZWNrZWQgPSB0cnVlO1xuICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZSh2aWV3LmRvbSkud2hpdGVTcGFjZSA9PSBcIm5vcm1hbFwiKVxuICAgIHsgY29uc29sZVtcIndhcm5cIl0oXCJQcm9zZU1pcnJvciBleHBlY3RzIHRoZSBDU1Mgd2hpdGUtc3BhY2UgcHJvcGVydHkgdG8gYmUgc2V0LCBwcmVmZXJhYmx5IHRvICdwcmUtd3JhcCcuIEl0IGlzIHJlY29tbWVuZGVkIHRvIGxvYWQgc3R5bGUvcHJvc2VtaXJyb3IuY3NzIGZyb20gdGhlIHByb3NlbWlycm9yLXZpZXcgcGFja2FnZS5cIik7IH1cbn1cblxuLy8gQSBjb2xsZWN0aW9uIG9mIERPTSBldmVudHMgdGhhdCBvY2N1ciB3aXRoaW4gdGhlIGVkaXRvciwgYW5kIGNhbGxiYWNrIGZ1bmN0aW9uc1xuLy8gdG8gaW52b2tlIHdoZW4gdGhlIGV2ZW50IGZpcmVzLlxudmFyIGhhbmRsZXJzID0ge30sIGVkaXRIYW5kbGVycyA9IHt9O1xuXG5mdW5jdGlvbiBpbml0SW5wdXQodmlldykge1xuICB2aWV3LnNoaWZ0S2V5ID0gZmFsc2U7XG4gIHZpZXcubW91c2VEb3duID0gbnVsbDtcbiAgdmlldy5sYXN0S2V5Q29kZSA9IG51bGw7XG4gIHZpZXcubGFzdEtleUNvZGVUaW1lID0gMDtcbiAgdmlldy5sYXN0Q2xpY2sgPSB7dGltZTogMCwgeDogMCwgeTogMCwgdHlwZTogXCJcIn07XG4gIHZpZXcubGFzdFNlbGVjdGlvbk9yaWdpbiA9IG51bGw7XG4gIHZpZXcubGFzdFNlbGVjdGlvblRpbWUgPSAwO1xuXG4gIHZpZXcubGFzdElPU0VudGVyID0gMDtcbiAgdmlldy5sYXN0SU9TRW50ZXJGYWxsYmFja1RpbWVvdXQgPSBudWxsO1xuICB2aWV3Lmxhc3RBbmRyb2lkRGVsZXRlID0gMDtcblxuICB2aWV3LmNvbXBvc2luZyA9IGZhbHNlO1xuICB2aWV3LmNvbXBvc2luZ1RpbWVvdXQgPSBudWxsO1xuICB2aWV3LmNvbXBvc2l0aW9uTm9kZXMgPSBbXTtcbiAgdmlldy5jb21wb3NpdGlvbkVuZGVkQXQgPSAtMmU4O1xuXG4gIHZpZXcuZG9tT2JzZXJ2ZXIgPSBuZXcgRE9NT2JzZXJ2ZXIodmlldywgZnVuY3Rpb24gKGZyb20sIHRvLCB0eXBlT3ZlciwgYWRkZWQpIHsgcmV0dXJuIHJlYWRET01DaGFuZ2UodmlldywgZnJvbSwgdG8sIHR5cGVPdmVyLCBhZGRlZCk7IH0pO1xuICB2aWV3LmRvbU9ic2VydmVyLnN0YXJ0KCk7XG4gIC8vIFVzZWQgYnkgaGFja3MgbGlrZSB0aGUgYmVmb3JlaW5wdXQgaGFuZGxlciB0byBjaGVjayB3aGV0aGVyIGFueXRoaW5nIGhhcHBlbmVkIGluIHRoZSBET01cbiAgdmlldy5kb21DaGFuZ2VDb3VudCA9IDA7XG5cbiAgdmlldy5ldmVudEhhbmRsZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGV2ZW50ICkge1xuICAgIHZhciBoYW5kbGVyID0gaGFuZGxlcnNbZXZlbnRdO1xuICAgIHZpZXcuZG9tLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIHZpZXcuZXZlbnRIYW5kbGVyc1tldmVudF0gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudEJlbG9uZ3NUb1ZpZXcodmlldywgZXZlbnQpICYmICFydW5DdXN0b21IYW5kbGVyKHZpZXcsIGV2ZW50KSAmJlxuICAgICAgICAgICh2aWV3LmVkaXRhYmxlIHx8ICEoZXZlbnQudHlwZSBpbiBlZGl0SGFuZGxlcnMpKSlcbiAgICAgICAgeyBoYW5kbGVyKHZpZXcsIGV2ZW50KTsgfVxuICAgIH0pO1xuICB9O1xuXG4gIGZvciAodmFyIGV2ZW50IGluIGhhbmRsZXJzKSBsb29wKCBldmVudCApO1xuICAvLyBPbiBTYWZhcmksIGZvciByZWFzb25zIGJleW9uZCBteSB1bmRlcnN0YW5kaW5nLCBhZGRpbmcgYW4gaW5wdXRcbiAgLy8gZXZlbnQgaGFuZGxlciBtYWtlcyBhbiBpc3N1ZSB3aGVyZSB0aGUgY29tcG9zaXRpb24gdmFuaXNoZXMgd2hlblxuICAvLyB5b3UgcHJlc3MgZW50ZXIgZ28gYXdheS5cbiAgaWYgKHJlc3VsdC5zYWZhcmkpIHsgdmlldy5kb20uYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bGw7IH0pOyB9XG5cbiAgZW5zdXJlTGlzdGVuZXJzKHZpZXcpO1xufVxuXG5mdW5jdGlvbiBzZXRTZWxlY3Rpb25PcmlnaW4odmlldywgb3JpZ2luKSB7XG4gIHZpZXcubGFzdFNlbGVjdGlvbk9yaWdpbiA9IG9yaWdpbjtcbiAgdmlldy5sYXN0U2VsZWN0aW9uVGltZSA9IERhdGUubm93KCk7XG59XG5cbmZ1bmN0aW9uIGRlc3Ryb3lJbnB1dCh2aWV3KSB7XG4gIHZpZXcuZG9tT2JzZXJ2ZXIuc3RvcCgpO1xuICBmb3IgKHZhciB0eXBlIGluIHZpZXcuZXZlbnRIYW5kbGVycylcbiAgICB7IHZpZXcuZG9tLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgdmlldy5ldmVudEhhbmRsZXJzW3R5cGVdKTsgfVxuICBjbGVhclRpbWVvdXQodmlldy5jb21wb3NpbmdUaW1lb3V0KTtcbiAgY2xlYXJUaW1lb3V0KHZpZXcubGFzdElPU0VudGVyRmFsbGJhY2tUaW1lb3V0KTtcbn1cblxuZnVuY3Rpb24gZW5zdXJlTGlzdGVuZXJzKHZpZXcpIHtcbiAgdmlldy5zb21lUHJvcChcImhhbmRsZURPTUV2ZW50c1wiLCBmdW5jdGlvbiAoY3VycmVudEhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgdHlwZSBpbiBjdXJyZW50SGFuZGxlcnMpIHsgaWYgKCF2aWV3LmV2ZW50SGFuZGxlcnNbdHlwZV0pXG4gICAgICB7IHZpZXcuZG9tLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgdmlldy5ldmVudEhhbmRsZXJzW3R5cGVdID0gZnVuY3Rpb24gKGV2ZW50KSB7IHJldHVybiBydW5DdXN0b21IYW5kbGVyKHZpZXcsIGV2ZW50KTsgfSk7IH0gfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcnVuQ3VzdG9tSGFuZGxlcih2aWV3LCBldmVudCkge1xuICByZXR1cm4gdmlldy5zb21lUHJvcChcImhhbmRsZURPTUV2ZW50c1wiLCBmdW5jdGlvbiAoaGFuZGxlcnMpIHtcbiAgICB2YXIgaGFuZGxlciA9IGhhbmRsZXJzW2V2ZW50LnR5cGVdO1xuICAgIHJldHVybiBoYW5kbGVyID8gaGFuZGxlcih2aWV3LCBldmVudCkgfHwgZXZlbnQuZGVmYXVsdFByZXZlbnRlZCA6IGZhbHNlXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGV2ZW50QmVsb25nc1RvVmlldyh2aWV3LCBldmVudCkge1xuICBpZiAoIWV2ZW50LmJ1YmJsZXMpIHsgcmV0dXJuIHRydWUgfVxuICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkgeyByZXR1cm4gZmFsc2UgfVxuICBmb3IgKHZhciBub2RlID0gZXZlbnQudGFyZ2V0OyBub2RlICE9IHZpZXcuZG9tOyBub2RlID0gbm9kZS5wYXJlbnROb2RlKVxuICAgIHsgaWYgKCFub2RlIHx8IG5vZGUubm9kZVR5cGUgPT0gMTEgfHxcbiAgICAgICAgKG5vZGUucG1WaWV3RGVzYyAmJiBub2RlLnBtVmlld0Rlc2Muc3RvcEV2ZW50KGV2ZW50KSkpXG4gICAgICB7IHJldHVybiBmYWxzZSB9IH1cbiAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudCh2aWV3LCBldmVudCkge1xuICBpZiAoIXJ1bkN1c3RvbUhhbmRsZXIodmlldywgZXZlbnQpICYmIGhhbmRsZXJzW2V2ZW50LnR5cGVdICYmXG4gICAgICAodmlldy5lZGl0YWJsZSB8fCAhKGV2ZW50LnR5cGUgaW4gZWRpdEhhbmRsZXJzKSkpXG4gICAgeyBoYW5kbGVyc1tldmVudC50eXBlXSh2aWV3LCBldmVudCk7IH1cbn1cblxuZWRpdEhhbmRsZXJzLmtleWRvd24gPSBmdW5jdGlvbiAodmlldywgZXZlbnQpIHtcbiAgdmlldy5zaGlmdEtleSA9IGV2ZW50LmtleUNvZGUgPT0gMTYgfHwgZXZlbnQuc2hpZnRLZXk7XG4gIGlmIChpbk9yTmVhckNvbXBvc2l0aW9uKHZpZXcsIGV2ZW50KSkgeyByZXR1cm4gfVxuICBpZiAoZXZlbnQua2V5Q29kZSAhPSAyMjkpIHsgdmlldy5kb21PYnNlcnZlci5mb3JjZUZsdXNoKCk7IH1cbiAgdmlldy5sYXN0S2V5Q29kZSA9IGV2ZW50LmtleUNvZGU7XG4gIHZpZXcubGFzdEtleUNvZGVUaW1lID0gRGF0ZS5ub3coKTtcbiAgLy8gT24gaU9TLCBpZiB3ZSBwcmV2ZW50RGVmYXVsdCBlbnRlciBrZXkgcHJlc3NlcywgdGhlIHZpcnR1YWxcbiAgLy8ga2V5Ym9hcmQgZ2V0cyBjb25mdXNlZC4gU28gdGhlIGhhY2sgaGVyZSBpcyB0byBzZXQgYSBmbGFnIHRoYXRcbiAgLy8gbWFrZXMgdGhlIERPTSBjaGFuZ2UgY29kZSByZWNvZ25pemUgdGhhdCB3aGF0IGp1c3QgaGFwcGVucyBzaG91bGRcbiAgLy8gYmUgcmVwbGFjZWQgYnkgd2hhdGV2ZXIgdGhlIEVudGVyIGtleSBoYW5kbGVycyBkby5cbiAgaWYgKHJlc3VsdC5pb3MgJiYgZXZlbnQua2V5Q29kZSA9PSAxMyAmJiAhZXZlbnQuY3RybEtleSAmJiAhZXZlbnQuYWx0S2V5ICYmICFldmVudC5tZXRhS2V5KSB7XG4gICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgdmlldy5sYXN0SU9TRW50ZXIgPSBub3c7XG4gICAgdmlldy5sYXN0SU9TRW50ZXJGYWxsYmFja1RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh2aWV3Lmxhc3RJT1NFbnRlciA9PSBub3cpIHtcbiAgICAgICAgdmlldy5zb21lUHJvcChcImhhbmRsZUtleURvd25cIiwgZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYodmlldywga2V5RXZlbnQoMTMsIFwiRW50ZXJcIikpOyB9KTtcbiAgICAgICAgdmlldy5sYXN0SU9TRW50ZXIgPSAwO1xuICAgICAgfVxuICAgIH0sIDIwMCk7XG4gIH0gZWxzZSBpZiAodmlldy5zb21lUHJvcChcImhhbmRsZUtleURvd25cIiwgZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYodmlldywgZXZlbnQpOyB9KSB8fCBjYXB0dXJlS2V5RG93bih2aWV3LCBldmVudCkpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9IGVsc2Uge1xuICAgIHNldFNlbGVjdGlvbk9yaWdpbih2aWV3LCBcImtleVwiKTtcbiAgfVxufTtcblxuZWRpdEhhbmRsZXJzLmtleXVwID0gZnVuY3Rpb24gKHZpZXcsIGUpIHtcbiAgaWYgKGUua2V5Q29kZSA9PSAxNikgeyB2aWV3LnNoaWZ0S2V5ID0gZmFsc2U7IH1cbn07XG5cbmVkaXRIYW5kbGVycy5rZXlwcmVzcyA9IGZ1bmN0aW9uICh2aWV3LCBldmVudCkge1xuICBpZiAoaW5Pck5lYXJDb21wb3NpdGlvbih2aWV3LCBldmVudCkgfHwgIWV2ZW50LmNoYXJDb2RlIHx8XG4gICAgICBldmVudC5jdHJsS2V5ICYmICFldmVudC5hbHRLZXkgfHwgcmVzdWx0Lm1hYyAmJiBldmVudC5tZXRhS2V5KSB7IHJldHVybiB9XG5cbiAgaWYgKHZpZXcuc29tZVByb3AoXCJoYW5kbGVLZXlQcmVzc1wiLCBmdW5jdGlvbiAoZikgeyByZXR1cm4gZih2aWV3LCBldmVudCk7IH0pKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzZWwgPSB2aWV3LnN0YXRlLnNlbGVjdGlvbjtcbiAgaWYgKCEoc2VsIGluc3RhbmNlb2YgVGV4dFNlbGVjdGlvbikgfHwgIXNlbC4kZnJvbS5zYW1lUGFyZW50KHNlbC4kdG8pKSB7XG4gICAgdmFyIHRleHQgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGV2ZW50LmNoYXJDb2RlKTtcbiAgICBpZiAoIXZpZXcuc29tZVByb3AoXCJoYW5kbGVUZXh0SW5wdXRcIiwgZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYodmlldywgc2VsLiRmcm9tLnBvcywgc2VsLiR0by5wb3MsIHRleHQpOyB9KSlcbiAgICAgIHsgdmlldy5kaXNwYXRjaCh2aWV3LnN0YXRlLnRyLmluc2VydFRleHQodGV4dCkuc2Nyb2xsSW50b1ZpZXcoKSk7IH1cbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBldmVudENvb3JkcyhldmVudCkgeyByZXR1cm4ge2xlZnQ6IGV2ZW50LmNsaWVudFgsIHRvcDogZXZlbnQuY2xpZW50WX0gfVxuXG5mdW5jdGlvbiBpc05lYXIoZXZlbnQsIGNsaWNrKSB7XG4gIHZhciBkeCA9IGNsaWNrLnggLSBldmVudC5jbGllbnRYLCBkeSA9IGNsaWNrLnkgLSBldmVudC5jbGllbnRZO1xuICByZXR1cm4gZHggKiBkeCArIGR5ICogZHkgPCAxMDBcbn1cblxuZnVuY3Rpb24gcnVuSGFuZGxlck9uQ29udGV4dCh2aWV3LCBwcm9wTmFtZSwgcG9zLCBpbnNpZGUsIGV2ZW50KSB7XG4gIGlmIChpbnNpZGUgPT0gLTEpIHsgcmV0dXJuIGZhbHNlIH1cbiAgdmFyICRwb3MgPSB2aWV3LnN0YXRlLmRvYy5yZXNvbHZlKGluc2lkZSk7XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBpICkge1xuICAgIGlmICh2aWV3LnNvbWVQcm9wKHByb3BOYW1lLCBmdW5jdGlvbiAoZikgeyByZXR1cm4gaSA+ICRwb3MuZGVwdGggPyBmKHZpZXcsIHBvcywgJHBvcy5ub2RlQWZ0ZXIsICRwb3MuYmVmb3JlKGkpLCBldmVudCwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGYodmlldywgcG9zLCAkcG9zLm5vZGUoaSksICRwb3MuYmVmb3JlKGkpLCBldmVudCwgZmFsc2UpOyB9KSlcbiAgICAgIHsgcmV0dXJuIHsgdjogdHJ1ZSB9IH1cbiAgfTtcblxuICBmb3IgKHZhciBpID0gJHBvcy5kZXB0aCArIDE7IGkgPiAwOyBpLS0pIHtcbiAgICB2YXIgcmV0dXJuZWQgPSBsb29wKCBpICk7XG5cbiAgICBpZiAoIHJldHVybmVkICkgcmV0dXJuIHJldHVybmVkLnY7XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNlbGVjdGlvbih2aWV3LCBzZWxlY3Rpb24sIG9yaWdpbikge1xuICBpZiAoIXZpZXcuZm9jdXNlZCkgeyB2aWV3LmZvY3VzKCk7IH1cbiAgdmFyIHRyID0gdmlldy5zdGF0ZS50ci5zZXRTZWxlY3Rpb24oc2VsZWN0aW9uKTtcbiAgaWYgKG9yaWdpbiA9PSBcInBvaW50ZXJcIikgeyB0ci5zZXRNZXRhKFwicG9pbnRlclwiLCB0cnVlKTsgfVxuICB2aWV3LmRpc3BhdGNoKHRyKTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0Q2xpY2tlZExlYWYodmlldywgaW5zaWRlKSB7XG4gIGlmIChpbnNpZGUgPT0gLTEpIHsgcmV0dXJuIGZhbHNlIH1cbiAgdmFyICRwb3MgPSB2aWV3LnN0YXRlLmRvYy5yZXNvbHZlKGluc2lkZSksIG5vZGUgPSAkcG9zLm5vZGVBZnRlcjtcbiAgaWYgKG5vZGUgJiYgbm9kZS5pc0F0b20gJiYgTm9kZVNlbGVjdGlvbi5pc1NlbGVjdGFibGUobm9kZSkpIHtcbiAgICB1cGRhdGVTZWxlY3Rpb24odmlldywgbmV3IE5vZGVTZWxlY3Rpb24oJHBvcyksIFwicG9pbnRlclwiKTtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBzZWxlY3RDbGlja2VkTm9kZSh2aWV3LCBpbnNpZGUpIHtcbiAgaWYgKGluc2lkZSA9PSAtMSkgeyByZXR1cm4gZmFsc2UgfVxuICB2YXIgc2VsID0gdmlldy5zdGF0ZS5zZWxlY3Rpb24sIHNlbGVjdGVkTm9kZSwgc2VsZWN0QXQ7XG4gIGlmIChzZWwgaW5zdGFuY2VvZiBOb2RlU2VsZWN0aW9uKSB7IHNlbGVjdGVkTm9kZSA9IHNlbC5ub2RlOyB9XG5cbiAgdmFyICRwb3MgPSB2aWV3LnN0YXRlLmRvYy5yZXNvbHZlKGluc2lkZSk7XG4gIGZvciAodmFyIGkgPSAkcG9zLmRlcHRoICsgMTsgaSA+IDA7IGktLSkge1xuICAgIHZhciBub2RlID0gaSA+ICRwb3MuZGVwdGggPyAkcG9zLm5vZGVBZnRlciA6ICRwb3Mubm9kZShpKTtcbiAgICBpZiAoTm9kZVNlbGVjdGlvbi5pc1NlbGVjdGFibGUobm9kZSkpIHtcbiAgICAgIGlmIChzZWxlY3RlZE5vZGUgJiYgc2VsLiRmcm9tLmRlcHRoID4gMCAmJlxuICAgICAgICAgIGkgPj0gc2VsLiRmcm9tLmRlcHRoICYmICRwb3MuYmVmb3JlKHNlbC4kZnJvbS5kZXB0aCArIDEpID09IHNlbC4kZnJvbS5wb3MpXG4gICAgICAgIHsgc2VsZWN0QXQgPSAkcG9zLmJlZm9yZShzZWwuJGZyb20uZGVwdGgpOyB9XG4gICAgICBlbHNlXG4gICAgICAgIHsgc2VsZWN0QXQgPSAkcG9zLmJlZm9yZShpKTsgfVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoc2VsZWN0QXQgIT0gbnVsbCkge1xuICAgIHVwZGF0ZVNlbGVjdGlvbih2aWV3LCBOb2RlU2VsZWN0aW9uLmNyZWF0ZSh2aWV3LnN0YXRlLmRvYywgc2VsZWN0QXQpLCBcInBvaW50ZXJcIik7XG4gICAgcmV0dXJuIHRydWVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVTaW5nbGVDbGljayh2aWV3LCBwb3MsIGluc2lkZSwgZXZlbnQsIHNlbGVjdE5vZGUpIHtcbiAgcmV0dXJuIHJ1bkhhbmRsZXJPbkNvbnRleHQodmlldywgXCJoYW5kbGVDbGlja09uXCIsIHBvcywgaW5zaWRlLCBldmVudCkgfHxcbiAgICB2aWV3LnNvbWVQcm9wKFwiaGFuZGxlQ2xpY2tcIiwgZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYodmlldywgcG9zLCBldmVudCk7IH0pIHx8XG4gICAgKHNlbGVjdE5vZGUgPyBzZWxlY3RDbGlja2VkTm9kZSh2aWV3LCBpbnNpZGUpIDogc2VsZWN0Q2xpY2tlZExlYWYodmlldywgaW5zaWRlKSlcbn1cblxuZnVuY3Rpb24gaGFuZGxlRG91YmxlQ2xpY2sodmlldywgcG9zLCBpbnNpZGUsIGV2ZW50KSB7XG4gIHJldHVybiBydW5IYW5kbGVyT25Db250ZXh0KHZpZXcsIFwiaGFuZGxlRG91YmxlQ2xpY2tPblwiLCBwb3MsIGluc2lkZSwgZXZlbnQpIHx8XG4gICAgdmlldy5zb21lUHJvcChcImhhbmRsZURvdWJsZUNsaWNrXCIsIGZ1bmN0aW9uIChmKSB7IHJldHVybiBmKHZpZXcsIHBvcywgZXZlbnQpOyB9KVxufVxuXG5mdW5jdGlvbiBoYW5kbGVUcmlwbGVDbGljayh2aWV3LCBwb3MsIGluc2lkZSwgZXZlbnQpIHtcbiAgcmV0dXJuIHJ1bkhhbmRsZXJPbkNvbnRleHQodmlldywgXCJoYW5kbGVUcmlwbGVDbGlja09uXCIsIHBvcywgaW5zaWRlLCBldmVudCkgfHxcbiAgICB2aWV3LnNvbWVQcm9wKFwiaGFuZGxlVHJpcGxlQ2xpY2tcIiwgZnVuY3Rpb24gKGYpIHsgcmV0dXJuIGYodmlldywgcG9zLCBldmVudCk7IH0pIHx8XG4gICAgZGVmYXVsdFRyaXBsZUNsaWNrKHZpZXcsIGluc2lkZSwgZXZlbnQpXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRUcmlwbGVDbGljayh2aWV3LCBpbnNpZGUsIGV2ZW50KSB7XG4gIGlmIChldmVudC5idXR0b24gIT0gMCkgeyByZXR1cm4gZmFsc2UgfVxuICB2YXIgZG9jID0gdmlldy5zdGF0ZS5kb2M7XG4gIGlmIChpbnNpZGUgPT0gLTEpIHtcbiAgICBpZiAoZG9jLmlubGluZUNvbnRlbnQpIHtcbiAgICAgIHVwZGF0ZVNlbGVjdGlvbih2aWV3LCBUZXh0U2VsZWN0aW9uLmNyZWF0ZShkb2MsIDAsIGRvYy5jb250ZW50LnNpemUpLCBcInBvaW50ZXJcIik7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHZhciAkcG9zID0gZG9jLnJlc29sdmUoaW5zaWRlKTtcbiAgZm9yICh2YXIgaSA9ICRwb3MuZGVwdGggKyAxOyBpID4gMDsgaS0tKSB7XG4gICAgdmFyIG5vZGUgPSBpID4gJHBvcy5kZXB0aCA/ICRwb3Mubm9kZUFmdGVyIDogJHBvcy5ub2RlKGkpO1xuICAgIHZhciBub2RlUG9zID0gJHBvcy5iZWZvcmUoaSk7XG4gICAgaWYgKG5vZGUuaW5saW5lQ29udGVudClcbiAgICAgIHsgdXBkYXRlU2VsZWN0aW9uKHZpZXcsIFRleHRTZWxlY3Rpb24uY3JlYXRlKGRvYywgbm9kZVBvcyArIDEsIG5vZGVQb3MgKyAxICsgbm9kZS5jb250ZW50LnNpemUpLCBcInBvaW50ZXJcIik7IH1cbiAgICBlbHNlIGlmIChOb2RlU2VsZWN0aW9uLmlzU2VsZWN0YWJsZShub2RlKSlcbiAgICAgIHsgdXBkYXRlU2VsZWN0aW9uKHZpZXcsIE5vZGVTZWxlY3Rpb24uY3JlYXRlKGRvYywgbm9kZVBvcyksIFwicG9pbnRlclwiKTsgfVxuICAgIGVsc2VcbiAgICAgIHsgY29udGludWUgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cbn1cblxuZnVuY3Rpb24gZm9yY2VET01GbHVzaCh2aWV3KSB7XG4gIHJldHVybiBlbmRDb21wb3NpdGlvbih2aWV3KVxufVxuXG52YXIgc2VsZWN0Tm9kZU1vZGlmaWVyID0gcmVzdWx0Lm1hYyA/IFwibWV0YUtleVwiIDogXCJjdHJsS2V5XCI7XG5cbmhhbmRsZXJzLm1vdXNlZG93biA9IGZ1bmN0aW9uICh2aWV3LCBldmVudCkge1xuICB2aWV3LnNoaWZ0S2V5ID0gZXZlbnQuc2hpZnRLZXk7XG4gIHZhciBmbHVzaGVkID0gZm9yY2VET01GbHVzaCh2aWV3KTtcbiAgdmFyIG5vdyA9IERhdGUubm93KCksIHR5cGUgPSBcInNpbmdsZUNsaWNrXCI7XG4gIGlmIChub3cgLSB2aWV3Lmxhc3RDbGljay50aW1lIDwgNTAwICYmIGlzTmVhcihldmVudCwgdmlldy5sYXN0Q2xpY2spICYmICFldmVudFtzZWxlY3ROb2RlTW9kaWZpZXJdKSB7XG4gICAgaWYgKHZpZXcubGFzdENsaWNrLnR5cGUgPT0gXCJzaW5nbGVDbGlja1wiKSB7IHR5cGUgPSBcImRvdWJsZUNsaWNrXCI7IH1cbiAgICBlbHNlIGlmICh2aWV3Lmxhc3RDbGljay50eXBlID09IFwiZG91YmxlQ2xpY2tcIikgeyB0eXBlID0gXCJ0cmlwbGVDbGlja1wiOyB9XG4gIH1cbiAgdmlldy5sYXN0Q2xpY2sgPSB7dGltZTogbm93LCB4OiBldmVudC5jbGllbnRYLCB5OiBldmVudC5jbGllbnRZLCB0eXBlOiB0eXBlfTtcblxuICB2YXIgcG9zID0gdmlldy5wb3NBdENvb3JkcyhldmVudENvb3JkcyhldmVudCkpO1xuICBpZiAoIXBvcykgeyByZXR1cm4gfVxuXG4gIGlmICh0eXBlID09IFwic2luZ2xlQ2xpY2tcIikge1xuICAgIGlmICh2aWV3Lm1vdXNlRG93bikgeyB2aWV3Lm1vdXNlRG93bi5kb25lKCk7IH1cbiAgICB2aWV3Lm1vdXNlRG93biA9IG5ldyBNb3VzZURvd24odmlldywgcG9zLCBldmVudCwgZmx1c2hlZCk7XG4gIH0gZWxzZSBpZiAoKHR5cGUgPT0gXCJkb3VibGVDbGlja1wiID8gaGFuZGxlRG91YmxlQ2xpY2sgOiBoYW5kbGVUcmlwbGVDbGljaykodmlldywgcG9zLnBvcywgcG9zLmluc2lkZSwgZXZlbnQpKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfSBlbHNlIHtcbiAgICBzZXRTZWxlY3Rpb25PcmlnaW4odmlldywgXCJwb2ludGVyXCIpO1xuICB9XG59O1xuXG52YXIgTW91c2VEb3duID0gZnVuY3Rpb24gTW91c2VEb3duKHZpZXcsIHBvcywgZXZlbnQsIGZsdXNoZWQpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdGhpcy52aWV3ID0gdmlldztcbiAgdGhpcy5zdGFydERvYyA9IHZpZXcuc3RhdGUuZG9jO1xuICB0aGlzLnBvcyA9IHBvcztcbiAgdGhpcy5ldmVudCA9IGV2ZW50O1xuICB0aGlzLmZsdXNoZWQgPSBmbHVzaGVkO1xuICB0aGlzLnNlbGVjdE5vZGUgPSBldmVudFtzZWxlY3ROb2RlTW9kaWZpZXJdO1xuICB0aGlzLmFsbG93RGVmYXVsdCA9IGV2ZW50LnNoaWZ0S2V5O1xuICB0aGlzLmRlbGF5ZWRTZWxlY3Rpb25TeW5jID0gZmFsc2U7XG5cbiAgdmFyIHRhcmdldE5vZGUsIHRhcmdldFBvcztcbiAgaWYgKHBvcy5pbnNpZGUgPiAtMSkge1xuICAgIHRhcmdldE5vZGUgPSB2aWV3LnN0YXRlLmRvYy5ub2RlQXQocG9zLmluc2lkZSk7XG4gICAgdGFyZ2V0UG9zID0gcG9zLmluc2lkZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgJHBvcyA9IHZpZXcuc3RhdGUuZG9jLnJlc29sdmUocG9zLnBvcyk7XG4gICAgdGFyZ2V0Tm9kZSA9ICRwb3MucGFyZW50O1xuICAgIHRhcmdldFBvcyA9ICRwb3MuZGVwdGggPyAkcG9zLmJlZm9yZSgpIDogMDtcbiAgfVxuXG4gIHRoaXMubWlnaHREcmFnID0gbnVsbDtcblxuICB2YXIgdGFyZ2V0ID0gZmx1c2hlZCA/IG51bGwgOiBldmVudC50YXJnZXQ7XG4gIHZhciB0YXJnZXREZXNjID0gdGFyZ2V0ID8gdmlldy5kb2NWaWV3Lm5lYXJlc3REZXNjKHRhcmdldCwgdHJ1ZSkgOiBudWxsO1xuICB0aGlzLnRhcmdldCA9IHRhcmdldERlc2MgPyB0YXJnZXREZXNjLmRvbSA6IG51bGw7XG5cbiAgdmFyIHJlZiA9IHZpZXcuc3RhdGU7XG4gIHZhciBzZWxlY3Rpb24gPSByZWYuc2VsZWN0aW9uO1xuICBpZiAoZXZlbnQuYnV0dG9uID09IDAgJiZcbiAgICAgIHRhcmdldE5vZGUudHlwZS5zcGVjLmRyYWdnYWJsZSAmJiB0YXJnZXROb2RlLnR5cGUuc3BlYy5zZWxlY3RhYmxlICE9PSBmYWxzZSB8fFxuICAgICAgc2VsZWN0aW9uIGluc3RhbmNlb2YgTm9kZVNlbGVjdGlvbiAmJiBzZWxlY3Rpb24uZnJvbSA8PSB0YXJnZXRQb3MgJiYgc2VsZWN0aW9uLnRvID4gdGFyZ2V0UG9zKVxuICAgIHsgdGhpcy5taWdodERyYWcgPSB7bm9kZTogdGFyZ2V0Tm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICBwb3M6IHRhcmdldFBvcyxcbiAgICAgICAgICAgICAgICAgICAgICBhZGRBdHRyOiB0aGlzLnRhcmdldCAmJiAhdGhpcy50YXJnZXQuZHJhZ2dhYmxlLFxuICAgICAgICAgICAgICAgICAgICAgIHNldFVuZWRpdGFibGU6IHRoaXMudGFyZ2V0ICYmIHJlc3VsdC5nZWNrbyAmJiAhdGhpcy50YXJnZXQuaGFzQXR0cmlidXRlKFwiY29udGVudEVkaXRhYmxlXCIpfTsgfVxuXG4gIGlmICh0aGlzLnRhcmdldCAmJiB0aGlzLm1pZ2h0RHJhZyAmJiAodGhpcy5taWdodERyYWcuYWRkQXR0ciB8fCB0aGlzLm1pZ2h0RHJhZy5zZXRVbmVkaXRhYmxlKSkge1xuICAgIHRoaXMudmlldy5kb21PYnNlcnZlci5zdG9wKCk7XG4gICAgaWYgKHRoaXMubWlnaHREcmFnLmFkZEF0dHIpIHsgdGhpcy50YXJnZXQuZHJhZ2dhYmxlID0gdHJ1ZTsgfVxuICAgIGlmICh0aGlzLm1pZ2h0RHJhZy5zZXRVbmVkaXRhYmxlKVxuICAgICAgeyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMkMS52aWV3Lm1vdXNlRG93biA9PSB0aGlzJDEpIHsgdGhpcyQxLnRhcmdldC5zZXRBdHRyaWJ1dGUoXCJjb250ZW50RWRpdGFibGVcIiwgXCJmYWxzZVwiKTsgfVxuICAgICAgfSwgMjApOyB9XG4gICAgdGhpcy52aWV3LmRvbU9ic2VydmVyLnN0YXJ0KCk7XG4gIH1cblxuICB2aWV3LnJvb3QuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy51cCA9IHRoaXMudXAuYmluZCh0aGlzKSk7XG4gIHZpZXcucm9vdC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMubW92ZSA9IHRoaXMubW92ZS5iaW5kKHRoaXMpKTtcbiAgc2V0U2VsZWN0aW9uT3JpZ2luKHZpZXcsIFwicG9pbnRlclwiKTtcbn07XG5cbk1vdXNlRG93bi5wcm90b3R5cGUuZG9uZSA9IGZ1bmN0aW9uIGRvbmUgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHRoaXMudmlldy5yb290LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMudXApO1xuICB0aGlzLnZpZXcucm9vdC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMubW92ZSk7XG4gIGlmICh0aGlzLm1pZ2h0RHJhZyAmJiB0aGlzLnRhcmdldCkge1xuICAgIHRoaXMudmlldy5kb21PYnNlcnZlci5zdG9wKCk7XG4gICAgaWYgKHRoaXMubWlnaHREcmFnLmFkZEF0dHIpIHsgdGhpcy50YXJnZXQucmVtb3ZlQXR0cmlidXRlKFwiZHJhZ2dhYmxlXCIpOyB9XG4gICAgaWYgKHRoaXMubWlnaHREcmFnLnNldFVuZWRpdGFibGUpIHsgdGhpcy50YXJnZXQucmVtb3ZlQXR0cmlidXRlKFwiY29udGVudEVkaXRhYmxlXCIpOyB9XG4gICAgdGhpcy52aWV3LmRvbU9ic2VydmVyLnN0YXJ0KCk7XG4gIH1cbiAgaWYgKHRoaXMuZGVsYXllZFNlbGVjdGlvblN5bmMpIHsgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBzZWxlY3Rpb25Ub0RPTSh0aGlzJDEudmlldyk7IH0pOyB9XG4gIHRoaXMudmlldy5tb3VzZURvd24gPSBudWxsO1xufTtcblxuTW91c2VEb3duLnByb3RvdHlwZS51cCA9IGZ1bmN0aW9uIHVwIChldmVudCkge1xuICB0aGlzLmRvbmUoKTtcblxuICBpZiAoIXRoaXMudmlldy5kb20uY29udGFpbnMoZXZlbnQudGFyZ2V0Lm5vZGVUeXBlID09IDMgPyBldmVudC50YXJnZXQucGFyZW50Tm9kZSA6IGV2ZW50LnRhcmdldCkpXG4gICAgeyByZXR1cm4gfVxuXG4gIHZhciBwb3MgPSB0aGlzLnBvcztcbiAgaWYgKHRoaXMudmlldy5zdGF0ZS5kb2MgIT0gdGhpcy5zdGFydERvYykgeyBwb3MgPSB0aGlzLnZpZXcucG9zQXRDb29yZHMoZXZlbnRDb29yZHMoZXZlbnQpKTsgfVxuXG4gIGlmICh0aGlzLmFsbG93RGVmYXVsdCB8fCAhcG9zKSB7XG4gICAgc2V0U2VsZWN0aW9uT3JpZ2luKHRoaXMudmlldywgXCJwb2ludGVyXCIpO1xuICB9IGVsc2UgaWYgKGhhbmRsZVNpbmdsZUNsaWNrKHRoaXMudmlldywgcG9zLnBvcywgcG9zLmluc2lkZSwgZXZlbnQsIHRoaXMuc2VsZWN0Tm9kZSkpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICB9IGVsc2UgaWYgKGV2ZW50LmJ1dHRvbiA9PSAwICYmXG4gICAgICAgICAgICAgKHRoaXMuZmx1c2hlZCB8fFxuICAgICAgICAgICAgICAvLyBTYWZhcmkgaWdub3JlcyBjbGlja3Mgb24gZHJhZ2dhYmxlIGVsZW1lbnRzXG4gICAgICAgICAgICAgIChyZXN1bHQuc2FmYXJpICYmIHRoaXMubWlnaHREcmFnICYmICF0aGlzLm1pZ2h0RHJhZy5ub2RlLmlzQXRvbSkgfHxcbiAgICAgICAgICAgICAgLy8gQ2hyb21lIHdpbGwgc29tZXRpbWVzIHRyZWF0IGEgbm9kZSBzZWxlY3Rpb24gYXMgYVxuICAgICAgICAgICAgICAvLyBjdXJzb3IsIGJ1dCBzdGlsbCByZXBvcnQgdGhhdCB0aGUgbm9kZSBpcyBzZWxlY3RlZFxuICAgICAgICAgICAgICAvLyB3aGVuIGFza2VkIHRocm91Z2ggZ2V0U2VsZWN0aW9uLiBZb3UnbGwgdGhlbiBnZXQgYVxuICAgICAgICAgICAgICAvLyBzaXR1YXRpb24gd2hlcmUgY2xpY2tpbmcgYXQgdGhlIHBvaW50IHdoZXJlIHRoYXRcbiAgICAgICAgICAgICAgLy8gKGhpZGRlbikgY3Vyc29yIGlzIGRvZXNuJ3QgY2hhbmdlIHRoZSBzZWxlY3Rpb24sIGFuZFxuICAgICAgICAgICAgICAvLyB0aHVzIGRvZXNuJ3QgZ2V0IGEgcmVhY3Rpb24gZnJvbSBQcm9zZU1pcnJvci4gVGhpc1xuICAgICAgICAgICAgICAvLyB3b3JrcyBhcm91bmQgdGhhdC5cbiAgICAgICAgICAgICAgKHJlc3VsdC5jaHJvbWUgJiYgISh0aGlzLnZpZXcuc3RhdGUuc2VsZWN0aW9uIGluc3RhbmNlb2YgVGV4dFNlbGVjdGlvbikgJiZcbiAgICAgICAgICAgICAgIE1hdGgubWluKE1hdGguYWJzKHBvcy5wb3MgLSB0aGlzLnZpZXcuc3RhdGUuc2VsZWN0aW9uLmZyb20pLFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5hYnMocG9zLnBvcyAtIHRoaXMudmlldy5zdGF0ZS5zZWxlY3Rpb24udG8pKSA8PSAyKSkpIHtcbiAgICB1cGRhdGVTZWxlY3Rpb24odGhpcy52aWV3LCBTZWxlY3Rpb24ubmVhcih0aGlzLnZpZXcuc3RhdGUuZG9jLnJlc29sdmUocG9zLnBvcykpLCBcInBvaW50ZXJcIik7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfSBlbHNlIHtcbiAgICBzZXRTZWxlY3Rpb25PcmlnaW4odGhpcy52aWV3LCBcInBvaW50ZXJcIik7XG4gIH1cbn07XG5cbk1vdXNlRG93bi5wcm90b3R5cGUubW92ZSA9IGZ1bmN0aW9uIG1vdmUgKGV2ZW50KSB7XG4gIGlmICghdGhpcy5hbGxvd0RlZmF1bHQgJiYgKE1hdGguYWJzKHRoaXMuZXZlbnQueCAtIGV2ZW50LmNsaWVudFgpID4gNCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmFicyh0aGlzLmV2ZW50LnkgLSBldmVudC5jbGllbnRZKSA+IDQpKVxuICAgIHsgdGhpcy5hbGxvd0RlZmF1bHQgPSB0cnVlOyB9XG4gIHNldFNlbGVjdGlvbk9yaWdpbih0aGlzLnZpZXcsIFwicG9pbnRlclwiKTtcbiAgaWYgKGV2ZW50LmJ1dHRvbnMgPT0gMCkgeyB0aGlzLmRvbmUoKTsgfVxufTtcblxuaGFuZGxlcnMudG91Y2hkb3duID0gZnVuY3Rpb24gKHZpZXcpIHtcbiAgZm9yY2VET01GbHVzaCh2aWV3KTtcbiAgc2V0U2VsZWN0aW9uT3JpZ2luKHZpZXcsIFwicG9pbnRlclwiKTtcbn07XG5cbmhhbmRsZXJzLmNvbnRleHRtZW51ID0gZnVuY3Rpb24gKHZpZXcpIHsgcmV0dXJuIGZvcmNlRE9NRmx1c2godmlldyk7IH07XG5cbmZ1bmN0aW9uIGluT3JOZWFyQ29tcG9zaXRpb24odmlldywgZXZlbnQpIHtcbiAgaWYgKHZpZXcuY29tcG9zaW5nKSB7IHJldHVybiB0cnVlIH1cbiAgLy8gU2VlIGh0dHBzOi8vd3d3LnN0dW0uZGUvMjAxNi8wNi8yNC9oYW5kbGluZy1pbWUtZXZlbnRzLWluLWphdmFzY3JpcHQvLlxuICAvLyBPbiBKYXBhbmVzZSBpbnB1dCBtZXRob2QgZWRpdG9ycyAoSU1FcyksIHRoZSBFbnRlciBrZXkgaXMgdXNlZCB0byBjb25maXJtIGNoYXJhY3RlclxuICAvLyBzZWxlY3Rpb24uIE9uIFNhZmFyaSwgd2hlbiBFbnRlciBpcyBwcmVzc2VkLCBjb21wb3NpdGlvbmVuZCBhbmQga2V5ZG93biBldmVudHMgYXJlXG4gIC8vIGVtaXR0ZWQuIFRoZSBrZXlkb3duIGV2ZW50IHRyaWdnZXJzIG5ld2xpbmUgaW5zZXJ0aW9uLCB3aGljaCB3ZSBkb24ndCB3YW50LlxuICAvLyBUaGlzIG1ldGhvZCByZXR1cm5zIHRydWUgaWYgdGhlIGtleWRvd24gZXZlbnQgc2hvdWxkIGJlIGlnbm9yZWQuXG4gIC8vIFdlIG9ubHkgaWdub3JlIGl0IG9uY2UsIGFzIHByZXNzaW5nIEVudGVyIGEgc2Vjb25kIHRpbWUgKnNob3VsZCogaW5zZXJ0IGEgbmV3bGluZS5cbiAgLy8gRnVydGhlcm1vcmUsIHRoZSBrZXlkb3duIGV2ZW50IHRpbWVzdGFtcCBtdXN0IGJlIGNsb3NlIHRvIHRoZSBjb21wb3NpdGlvbkVuZGVkQXQgdGltZXN0YW1wLlxuICAvLyBUaGlzIGd1YXJkcyBhZ2FpbnN0IHRoZSBjYXNlIHdoZXJlIGNvbXBvc2l0aW9uZW5kIGlzIHRyaWdnZXJlZCB3aXRob3V0IHRoZSBrZXlib2FyZFxuICAvLyAoZS5nLiBjaGFyYWN0ZXIgY29uZmlybWF0aW9uIG1heSBiZSBkb25lIHdpdGggdGhlIG1vdXNlKSwgYW5kIGtleWRvd24gaXMgdHJpZ2dlcmVkXG4gIC8vIGFmdGVyd2FyZHMtIHdlIHdvdWxkbid0IHdhbnQgdG8gaWdub3JlIHRoZSBrZXlkb3duIGV2ZW50IGluIHRoaXMgY2FzZS5cbiAgaWYgKHJlc3VsdC5zYWZhcmkgJiYgTWF0aC5hYnMoZXZlbnQudGltZVN0YW1wIC0gdmlldy5jb21wb3NpdGlvbkVuZGVkQXQpIDwgNTAwKSB7XG4gICAgdmlldy5jb21wb3NpdGlvbkVuZGVkQXQgPSAtMmU4O1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8vIERyb3AgYWN0aXZlIGNvbXBvc2l0aW9uIGFmdGVyIDUgc2Vjb25kcyBvZiBpbmFjdGl2aXR5IG9uIEFuZHJvaWRcbnZhciB0aW1lb3V0Q29tcG9zaXRpb24gPSByZXN1bHQuYW5kcm9pZCA/IDUwMDAgOiAtMTtcblxuZWRpdEhhbmRsZXJzLmNvbXBvc2l0aW9uc3RhcnQgPSBlZGl0SGFuZGxlcnMuY29tcG9zaXRpb251cGRhdGUgPSBmdW5jdGlvbiAodmlldykge1xuICBpZiAoIXZpZXcuY29tcG9zaW5nKSB7XG4gICAgdmlldy5kb21PYnNlcnZlci5mbHVzaCgpO1xuICAgIHZhciBzdGF0ZSA9IHZpZXcuc3RhdGU7XG4gICAgdmFyICRwb3MgPSBzdGF0ZS5zZWxlY3Rpb24uJGZyb207XG4gICAgaWYgKHN0YXRlLnNlbGVjdGlvbi5lbXB0eSAmJlxuICAgICAgICAoc3RhdGUuc3RvcmVkTWFya3MgfHxcbiAgICAgICAgICghJHBvcy50ZXh0T2Zmc2V0ICYmICRwb3MucGFyZW50T2Zmc2V0ICYmICRwb3Mubm9kZUJlZm9yZS5tYXJrcy5zb21lKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLnR5cGUuc3BlYy5pbmNsdXNpdmUgPT09IGZhbHNlOyB9KSkpKSB7XG4gICAgICAvLyBOZWVkIHRvIHdyYXAgdGhlIGN1cnNvciBpbiBtYXJrIG5vZGVzIGRpZmZlcmVudCBmcm9tIHRoZSBvbmVzIGluIHRoZSBET00gY29udGV4dFxuICAgICAgdmlldy5tYXJrQ3Vyc29yID0gdmlldy5zdGF0ZS5zdG9yZWRNYXJrcyB8fCAkcG9zLm1hcmtzKCk7XG4gICAgICBlbmRDb21wb3NpdGlvbih2aWV3LCB0cnVlKTtcbiAgICAgIHZpZXcubWFya0N1cnNvciA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVuZENvbXBvc2l0aW9uKHZpZXcpO1xuICAgICAgLy8gSW4gZmlyZWZveCwgaWYgdGhlIGN1cnNvciBpcyBhZnRlciBidXQgb3V0c2lkZSBhIG1hcmtlZCBub2RlLFxuICAgICAgLy8gdGhlIGluc2VydGVkIHRleHQgd29uJ3QgaW5oZXJpdCB0aGUgbWFya3MuIFNvIHRoaXMgbW92ZXMgaXRcbiAgICAgIC8vIGluc2lkZSBpZiBuZWNlc3NhcnkuXG4gICAgICBpZiAocmVzdWx0LmdlY2tvICYmIHN0YXRlLnNlbGVjdGlvbi5lbXB0eSAmJiAkcG9zLnBhcmVudE9mZnNldCAmJiAhJHBvcy50ZXh0T2Zmc2V0ICYmICRwb3Mubm9kZUJlZm9yZS5tYXJrcy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHNlbCA9IHZpZXcucm9vdC5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgZm9yICh2YXIgbm9kZSA9IHNlbC5mb2N1c05vZGUsIG9mZnNldCA9IHNlbC5mb2N1c09mZnNldDsgbm9kZSAmJiBub2RlLm5vZGVUeXBlID09IDEgJiYgb2Zmc2V0ICE9IDA7KSB7XG4gICAgICAgICAgdmFyIGJlZm9yZSA9IG9mZnNldCA8IDAgPyBub2RlLmxhc3RDaGlsZCA6IG5vZGUuY2hpbGROb2Rlc1tvZmZzZXQgLSAxXTtcbiAgICAgICAgICBpZiAoIWJlZm9yZSkgeyBicmVhayB9XG4gICAgICAgICAgaWYgKGJlZm9yZS5ub2RlVHlwZSA9PSAzKSB7XG4gICAgICAgICAgICBzZWwuY29sbGFwc2UoYmVmb3JlLCBiZWZvcmUubm9kZVZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlID0gYmVmb3JlO1xuICAgICAgICAgICAgb2Zmc2V0ID0gLTE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHZpZXcuY29tcG9zaW5nID0gdHJ1ZTtcbiAgfVxuICBzY2hlZHVsZUNvbXBvc2VFbmQodmlldywgdGltZW91dENvbXBvc2l0aW9uKTtcbn07XG5cbmVkaXRIYW5kbGVycy5jb21wb3NpdGlvbmVuZCA9IGZ1bmN0aW9uICh2aWV3LCBldmVudCkge1xuICBpZiAodmlldy5jb21wb3NpbmcpIHtcbiAgICB2aWV3LmNvbXBvc2luZyA9IGZhbHNlO1xuICAgIHZpZXcuY29tcG9zaXRpb25FbmRlZEF0ID0gZXZlbnQudGltZVN0YW1wO1xuICAgIHNjaGVkdWxlQ29tcG9zZUVuZCh2aWV3LCAyMCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHNjaGVkdWxlQ29tcG9zZUVuZCh2aWV3LCBkZWxheSkge1xuICBjbGVhclRpbWVvdXQodmlldy5jb21wb3NpbmdUaW1lb3V0KTtcbiAgaWYgKGRlbGF5ID4gLTEpIHsgdmlldy5jb21wb3NpbmdUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBlbmRDb21wb3NpdGlvbih2aWV3KTsgfSwgZGVsYXkpOyB9XG59XG5cbmZ1bmN0aW9uIGNsZWFyQ29tcG9zaXRpb24odmlldykge1xuICBpZiAodmlldy5jb21wb3NpbmcpIHtcbiAgICB2aWV3LmNvbXBvc2luZyA9IGZhbHNlO1xuICAgIHZpZXcuY29tcG9zaXRpb25FbmRlZEF0ID0gdGltZXN0YW1wRnJvbUN1c3RvbUV2ZW50KCk7XG4gIH1cbiAgd2hpbGUgKHZpZXcuY29tcG9zaXRpb25Ob2Rlcy5sZW5ndGggPiAwKSB7IHZpZXcuY29tcG9zaXRpb25Ob2Rlcy5wb3AoKS5tYXJrUGFyZW50c0RpcnR5KCk7IH1cbn1cblxuZnVuY3Rpb24gdGltZXN0YW1wRnJvbUN1c3RvbUV2ZW50KCkge1xuICB2YXIgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICBldmVudC5pbml0RXZlbnQoXCJldmVudFwiLCB0cnVlLCB0cnVlKTtcbiAgcmV0dXJuIGV2ZW50LnRpbWVTdGFtcFxufVxuXG5mdW5jdGlvbiBlbmRDb21wb3NpdGlvbih2aWV3LCBmb3JjZVVwZGF0ZSkge1xuICB2aWV3LmRvbU9ic2VydmVyLmZvcmNlRmx1c2goKTtcbiAgY2xlYXJDb21wb3NpdGlvbih2aWV3KTtcbiAgaWYgKGZvcmNlVXBkYXRlIHx8IHZpZXcuZG9jVmlldy5kaXJ0eSkge1xuICAgIHZhciBzZWwgPSBzZWxlY3Rpb25Gcm9tRE9NKHZpZXcpO1xuICAgIGlmIChzZWwgJiYgIXNlbC5lcSh2aWV3LnN0YXRlLnNlbGVjdGlvbikpIHsgdmlldy5kaXNwYXRjaCh2aWV3LnN0YXRlLnRyLnNldFNlbGVjdGlvbihzZWwpKTsgfVxuICAgIGVsc2UgeyB2aWV3LnVwZGF0ZVN0YXRlKHZpZXcuc3RhdGUpOyB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gY2FwdHVyZUNvcHkodmlldywgZG9tKSB7XG4gIC8vIFRoZSBleHRyYSB3cmFwcGVyIGlzIHNvbWVob3cgbmVjZXNzYXJ5IG9uIElFL0VkZ2UgdG8gcHJldmVudCB0aGVcbiAgLy8gY29udGVudCBmcm9tIGJlaW5nIG1hbmdsZWQgd2hlbiBpdCBpcyBwdXQgb250byB0aGUgY2xpcGJvYXJkXG4gIGlmICghdmlldy5kb20ucGFyZW50Tm9kZSkgeyByZXR1cm4gfVxuICB2YXIgd3JhcCA9IHZpZXcuZG9tLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSk7XG4gIHdyYXAuYXBwZW5kQ2hpbGQoZG9tKTtcbiAgd3JhcC5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjogZml4ZWQ7IGxlZnQ6IC0xMDAwMHB4OyB0b3A6IDEwcHhcIjtcbiAgdmFyIHNlbCA9IGdldFNlbGVjdGlvbigpLCByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhkb20pO1xuICAvLyBEb25lIGJlY2F1c2UgSUUgd2lsbCBmaXJlIGEgc2VsZWN0aW9uY2hhbmdlIG1vdmluZyB0aGUgc2VsZWN0aW9uXG4gIC8vIHRvIGl0cyBzdGFydCB3aGVuIHJlbW92ZUFsbFJhbmdlcyBpcyBjYWxsZWQgYW5kIHRoZSBlZGl0b3Igc3RpbGxcbiAgLy8gaGFzIGZvY3VzICh3aGljaCB3aWxsIG1lc3MgdXAgdGhlIGVkaXRvcidzIHNlbGVjdGlvbiBzdGF0ZSkuXG4gIHZpZXcuZG9tLmJsdXIoKTtcbiAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xuICBzZWwuYWRkUmFuZ2UocmFuZ2UpO1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAod3JhcC5wYXJlbnROb2RlKSB7IHdyYXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh3cmFwKTsgfVxuICAgIHZpZXcuZm9jdXMoKTtcbiAgfSwgNTApO1xufVxuXG4vLyBUaGlzIGlzIHZlcnkgY3J1ZGUsIGJ1dCB1bmZvcnR1bmF0ZWx5IGJvdGggdGhlc2UgYnJvd3NlcnMgX3ByZXRlbmRfXG4vLyB0aGF0IHRoZXkgaGF2ZSBhIGNsaXBib2FyZCBBUEnigJRhbGwgdGhlIG9iamVjdHMgYW5kIG1ldGhvZHMgYXJlXG4vLyB0aGVyZSwgdGhleSBqdXN0IGRvbid0IHdvcmssIGFuZCB0aGV5IGFyZSBoYXJkIHRvIHRlc3QuXG52YXIgYnJva2VuQ2xpcGJvYXJkQVBJID0gKHJlc3VsdC5pZSAmJiByZXN1bHQuaWVfdmVyc2lvbiA8IDE1KSB8fFxuICAgICAgKHJlc3VsdC5pb3MgJiYgcmVzdWx0LndlYmtpdF92ZXJzaW9uIDwgNjA0KTtcblxuaGFuZGxlcnMuY29weSA9IGVkaXRIYW5kbGVycy5jdXQgPSBmdW5jdGlvbiAodmlldywgZSkge1xuICB2YXIgc2VsID0gdmlldy5zdGF0ZS5zZWxlY3Rpb24sIGN1dCA9IGUudHlwZSA9PSBcImN1dFwiO1xuICBpZiAoc2VsLmVtcHR5KSB7IHJldHVybiB9XG5cbiAgLy8gSUUgYW5kIEVkZ2UncyBjbGlwYm9hcmQgaW50ZXJmYWNlIGlzIGNvbXBsZXRlbHkgYnJva2VuXG4gIHZhciBkYXRhID0gYnJva2VuQ2xpcGJvYXJkQVBJID8gbnVsbCA6IGUuY2xpcGJvYXJkRGF0YTtcbiAgdmFyIHNsaWNlID0gc2VsLmNvbnRlbnQoKTtcbiAgdmFyIHJlZiA9IHNlcmlhbGl6ZUZvckNsaXBib2FyZCh2aWV3LCBzbGljZSk7XG4gIHZhciBkb20gPSByZWYuZG9tO1xuICB2YXIgdGV4dCA9IHJlZi50ZXh0O1xuICBpZiAoZGF0YSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBkYXRhLmNsZWFyRGF0YSgpO1xuICAgIGRhdGEuc2V0RGF0YShcInRleHQvaHRtbFwiLCBkb20uaW5uZXJIVE1MKTtcbiAgICBkYXRhLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsIHRleHQpO1xuICB9IGVsc2Uge1xuICAgIGNhcHR1cmVDb3B5KHZpZXcsIGRvbSk7XG4gIH1cbiAgaWYgKGN1dCkgeyB2aWV3LmRpc3BhdGNoKHZpZXcuc3RhdGUudHIuZGVsZXRlU2VsZWN0aW9uKCkuc2Nyb2xsSW50b1ZpZXcoKS5zZXRNZXRhKFwidWlFdmVudFwiLCBcImN1dFwiKSk7IH1cbn07XG5cbmZ1bmN0aW9uIHNsaWNlU2luZ2xlTm9kZShzbGljZSkge1xuICByZXR1cm4gc2xpY2Uub3BlblN0YXJ0ID09IDAgJiYgc2xpY2Uub3BlbkVuZCA9PSAwICYmIHNsaWNlLmNvbnRlbnQuY2hpbGRDb3VudCA9PSAxID8gc2xpY2UuY29udGVudC5maXJzdENoaWxkIDogbnVsbFxufVxuXG5mdW5jdGlvbiBjYXB0dXJlUGFzdGUodmlldywgZSkge1xuICBpZiAoIXZpZXcuZG9tLnBhcmVudE5vZGUpIHsgcmV0dXJuIH1cbiAgdmFyIHBsYWluVGV4dCA9IHZpZXcuc2hpZnRLZXkgfHwgdmlldy5zdGF0ZS5zZWxlY3Rpb24uJGZyb20ucGFyZW50LnR5cGUuc3BlYy5jb2RlO1xuICB2YXIgdGFyZ2V0ID0gdmlldy5kb20ucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KHBsYWluVGV4dCA/IFwidGV4dGFyZWFcIiA6IFwiZGl2XCIpKTtcbiAgaWYgKCFwbGFpblRleHQpIHsgdGFyZ2V0LmNvbnRlbnRFZGl0YWJsZSA9IFwidHJ1ZVwiOyB9XG4gIHRhcmdldC5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjogZml4ZWQ7IGxlZnQ6IC0xMDAwMHB4OyB0b3A6IDEwcHhcIjtcbiAgdGFyZ2V0LmZvY3VzKCk7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHZpZXcuZm9jdXMoKTtcbiAgICBpZiAodGFyZ2V0LnBhcmVudE5vZGUpIHsgdGFyZ2V0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFyZ2V0KTsgfVxuICAgIGlmIChwbGFpblRleHQpIHsgZG9QYXN0ZSh2aWV3LCB0YXJnZXQudmFsdWUsIG51bGwsIGUpOyB9XG4gICAgZWxzZSB7IGRvUGFzdGUodmlldywgdGFyZ2V0LnRleHRDb250ZW50LCB0YXJnZXQuaW5uZXJIVE1MLCBlKTsgfVxuICB9LCA1MCk7XG59XG5cbmZ1bmN0aW9uIGRvUGFzdGUodmlldywgdGV4dCwgaHRtbCwgZSkge1xuICB2YXIgc2xpY2UgPSBwYXJzZUZyb21DbGlwYm9hcmQodmlldywgdGV4dCwgaHRtbCwgdmlldy5zaGlmdEtleSwgdmlldy5zdGF0ZS5zZWxlY3Rpb24uJGZyb20pO1xuICBpZiAodmlldy5zb21lUHJvcChcImhhbmRsZVBhc3RlXCIsIGZ1bmN0aW9uIChmKSB7IHJldHVybiBmKHZpZXcsIGUsIHNsaWNlIHx8IFNsaWNlLmVtcHR5KTsgfSkpIHsgcmV0dXJuIHRydWUgfVxuICBpZiAoIXNsaWNlKSB7IHJldHVybiBmYWxzZSB9XG5cbiAgdmFyIHNpbmdsZU5vZGUgPSBzbGljZVNpbmdsZU5vZGUoc2xpY2UpO1xuICB2YXIgdHIgPSBzaW5nbGVOb2RlID8gdmlldy5zdGF0ZS50ci5yZXBsYWNlU2VsZWN0aW9uV2l0aChzaW5nbGVOb2RlLCB2aWV3LnNoaWZ0S2V5KSA6IHZpZXcuc3RhdGUudHIucmVwbGFjZVNlbGVjdGlvbihzbGljZSk7XG4gIHZpZXcuZGlzcGF0Y2godHIuc2Nyb2xsSW50b1ZpZXcoKS5zZXRNZXRhKFwicGFzdGVcIiwgdHJ1ZSkuc2V0TWV0YShcInVpRXZlbnRcIiwgXCJwYXN0ZVwiKSk7XG4gIHJldHVybiB0cnVlXG59XG5cbmVkaXRIYW5kbGVycy5wYXN0ZSA9IGZ1bmN0aW9uICh2aWV3LCBlKSB7XG4gIHZhciBkYXRhID0gYnJva2VuQ2xpcGJvYXJkQVBJID8gbnVsbCA6IGUuY2xpcGJvYXJkRGF0YTtcbiAgaWYgKGRhdGEgJiYgZG9QYXN0ZSh2aWV3LCBkYXRhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpLCBkYXRhLmdldERhdGEoXCJ0ZXh0L2h0bWxcIiksIGUpKSB7IGUucHJldmVudERlZmF1bHQoKTsgfVxuICBlbHNlIHsgY2FwdHVyZVBhc3RlKHZpZXcsIGUpOyB9XG59O1xuXG52YXIgRHJhZ2dpbmcgPSBmdW5jdGlvbiBEcmFnZ2luZyhzbGljZSwgbW92ZSkge1xuICB0aGlzLnNsaWNlID0gc2xpY2U7XG4gIHRoaXMubW92ZSA9IG1vdmU7XG59O1xuXG52YXIgZHJhZ0NvcHlNb2RpZmllciA9IHJlc3VsdC5tYWMgPyBcImFsdEtleVwiIDogXCJjdHJsS2V5XCI7XG5cbmhhbmRsZXJzLmRyYWdzdGFydCA9IGZ1bmN0aW9uICh2aWV3LCBlKSB7XG4gIHZhciBtb3VzZURvd24gPSB2aWV3Lm1vdXNlRG93bjtcbiAgaWYgKG1vdXNlRG93bikgeyBtb3VzZURvd24uZG9uZSgpOyB9XG4gIGlmICghZS5kYXRhVHJhbnNmZXIpIHsgcmV0dXJuIH1cblxuICB2YXIgc2VsID0gdmlldy5zdGF0ZS5zZWxlY3Rpb247XG4gIHZhciBwb3MgPSBzZWwuZW1wdHkgPyBudWxsIDogdmlldy5wb3NBdENvb3JkcyhldmVudENvb3JkcyhlKSk7XG4gIGlmIChwb3MgJiYgcG9zLnBvcyA+PSBzZWwuZnJvbSAmJiBwb3MucG9zIDw9IChzZWwgaW5zdGFuY2VvZiBOb2RlU2VsZWN0aW9uID8gc2VsLnRvIC0gMTogc2VsLnRvKSkgOyBlbHNlIGlmIChtb3VzZURvd24gJiYgbW91c2VEb3duLm1pZ2h0RHJhZykge1xuICAgIHZpZXcuZGlzcGF0Y2godmlldy5zdGF0ZS50ci5zZXRTZWxlY3Rpb24oTm9kZVNlbGVjdGlvbi5jcmVhdGUodmlldy5zdGF0ZS5kb2MsIG1vdXNlRG93bi5taWdodERyYWcucG9zKSkpO1xuICB9IGVsc2UgaWYgKGUudGFyZ2V0ICYmIGUudGFyZ2V0Lm5vZGVUeXBlID09IDEpIHtcbiAgICB2YXIgZGVzYyA9IHZpZXcuZG9jVmlldy5uZWFyZXN0RGVzYyhlLnRhcmdldCwgdHJ1ZSk7XG4gICAgaWYgKGRlc2MgJiYgZGVzYy5ub2RlLnR5cGUuc3BlYy5kcmFnZ2FibGUgJiYgZGVzYyAhPSB2aWV3LmRvY1ZpZXcpXG4gICAgICB7IHZpZXcuZGlzcGF0Y2godmlldy5zdGF0ZS50ci5zZXRTZWxlY3Rpb24oTm9kZVNlbGVjdGlvbi5jcmVhdGUodmlldy5zdGF0ZS5kb2MsIGRlc2MucG9zQmVmb3JlKSkpOyB9XG4gIH1cbiAgdmFyIHNsaWNlID0gdmlldy5zdGF0ZS5zZWxlY3Rpb24uY29udGVudCgpO1xuICB2YXIgcmVmID0gc2VyaWFsaXplRm9yQ2xpcGJvYXJkKHZpZXcsIHNsaWNlKTtcbiAgdmFyIGRvbSA9IHJlZi5kb207XG4gIHZhciB0ZXh0ID0gcmVmLnRleHQ7XG4gIGUuZGF0YVRyYW5zZmVyLmNsZWFyRGF0YSgpO1xuICBlLmRhdGFUcmFuc2Zlci5zZXREYXRhKGJyb2tlbkNsaXBib2FyZEFQSSA/IFwiVGV4dFwiIDogXCJ0ZXh0L2h0bWxcIiwgZG9tLmlubmVySFRNTCk7XG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUHJvc2VNaXJyb3IvcHJvc2VtaXJyb3IvaXNzdWVzLzExNTZcbiAgZS5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9IFwiY29weU1vdmVcIjtcbiAgaWYgKCFicm9rZW5DbGlwYm9hcmRBUEkpIHsgZS5kYXRhVHJhbnNmZXIuc2V0RGF0YShcInRleHQvcGxhaW5cIiwgdGV4dCk7IH1cbiAgdmlldy5kcmFnZ2luZyA9IG5ldyBEcmFnZ2luZyhzbGljZSwgIWVbZHJhZ0NvcHlNb2RpZmllcl0pO1xufTtcblxuaGFuZGxlcnMuZHJhZ2VuZCA9IGZ1bmN0aW9uICh2aWV3KSB7XG4gIHZhciBkcmFnZ2luZyA9IHZpZXcuZHJhZ2dpbmc7XG4gIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodmlldy5kcmFnZ2luZyA9PSBkcmFnZ2luZykgIHsgdmlldy5kcmFnZ2luZyA9IG51bGw7IH1cbiAgfSwgNTApO1xufTtcblxuZWRpdEhhbmRsZXJzLmRyYWdvdmVyID0gZWRpdEhhbmRsZXJzLmRyYWdlbnRlciA9IGZ1bmN0aW9uIChfLCBlKSB7IHJldHVybiBlLnByZXZlbnREZWZhdWx0KCk7IH07XG5cbmVkaXRIYW5kbGVycy5kcm9wID0gZnVuY3Rpb24gKHZpZXcsIGUpIHtcbiAgdmFyIGRyYWdnaW5nID0gdmlldy5kcmFnZ2luZztcbiAgdmlldy5kcmFnZ2luZyA9IG51bGw7XG5cbiAgaWYgKCFlLmRhdGFUcmFuc2ZlcikgeyByZXR1cm4gfVxuXG4gIHZhciBldmVudFBvcyA9IHZpZXcucG9zQXRDb29yZHMoZXZlbnRDb29yZHMoZSkpO1xuICBpZiAoIWV2ZW50UG9zKSB7IHJldHVybiB9XG4gIHZhciAkbW91c2UgPSB2aWV3LnN0YXRlLmRvYy5yZXNvbHZlKGV2ZW50UG9zLnBvcyk7XG4gIGlmICghJG1vdXNlKSB7IHJldHVybiB9XG4gIHZhciBzbGljZSA9IGRyYWdnaW5nICYmIGRyYWdnaW5nLnNsaWNlO1xuICBpZiAoc2xpY2UpIHtcbiAgICB2aWV3LnNvbWVQcm9wKFwidHJhbnNmb3JtUGFzdGVkXCIsIGZ1bmN0aW9uIChmKSB7IHNsaWNlID0gZihzbGljZSk7IH0pO1xuICB9IGVsc2Uge1xuICAgIHNsaWNlID0gcGFyc2VGcm9tQ2xpcGJvYXJkKHZpZXcsIGUuZGF0YVRyYW5zZmVyLmdldERhdGEoYnJva2VuQ2xpcGJvYXJkQVBJID8gXCJUZXh0XCIgOiBcInRleHQvcGxhaW5cIiksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJva2VuQ2xpcGJvYXJkQVBJID8gbnVsbCA6IGUuZGF0YVRyYW5zZmVyLmdldERhdGEoXCJ0ZXh0L2h0bWxcIiksIGZhbHNlLCAkbW91c2UpO1xuICB9XG4gIHZhciBtb3ZlID0gZHJhZ2dpbmcgJiYgIWVbZHJhZ0NvcHlNb2RpZmllcl07XG4gIGlmICh2aWV3LnNvbWVQcm9wKFwiaGFuZGxlRHJvcFwiLCBmdW5jdGlvbiAoZikgeyByZXR1cm4gZih2aWV3LCBlLCBzbGljZSB8fCBTbGljZS5lbXB0eSwgbW92ZSk7IH0pKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHJldHVyblxuICB9XG4gIGlmICghc2xpY2UpIHsgcmV0dXJuIH1cblxuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIHZhciBpbnNlcnRQb3MgPSBzbGljZSA/IGRyb3BQb2ludCh2aWV3LnN0YXRlLmRvYywgJG1vdXNlLnBvcywgc2xpY2UpIDogJG1vdXNlLnBvcztcbiAgaWYgKGluc2VydFBvcyA9PSBudWxsKSB7IGluc2VydFBvcyA9ICRtb3VzZS5wb3M7IH1cblxuICB2YXIgdHIgPSB2aWV3LnN0YXRlLnRyO1xuICBpZiAobW92ZSkgeyB0ci5kZWxldGVTZWxlY3Rpb24oKTsgfVxuXG4gIHZhciBwb3MgPSB0ci5tYXBwaW5nLm1hcChpbnNlcnRQb3MpO1xuICB2YXIgaXNOb2RlID0gc2xpY2Uub3BlblN0YXJ0ID09IDAgJiYgc2xpY2Uub3BlbkVuZCA9PSAwICYmIHNsaWNlLmNvbnRlbnQuY2hpbGRDb3VudCA9PSAxO1xuICB2YXIgYmVmb3JlSW5zZXJ0ID0gdHIuZG9jO1xuICBpZiAoaXNOb2RlKVxuICAgIHsgdHIucmVwbGFjZVJhbmdlV2l0aChwb3MsIHBvcywgc2xpY2UuY29udGVudC5maXJzdENoaWxkKTsgfVxuICBlbHNlXG4gICAgeyB0ci5yZXBsYWNlUmFuZ2UocG9zLCBwb3MsIHNsaWNlKTsgfVxuICBpZiAodHIuZG9jLmVxKGJlZm9yZUluc2VydCkpIHsgcmV0dXJuIH1cblxuICB2YXIgJHBvcyA9IHRyLmRvYy5yZXNvbHZlKHBvcyk7XG4gIGlmIChpc05vZGUgJiYgTm9kZVNlbGVjdGlvbi5pc1NlbGVjdGFibGUoc2xpY2UuY29udGVudC5maXJzdENoaWxkKSAmJlxuICAgICAgJHBvcy5ub2RlQWZ0ZXIgJiYgJHBvcy5ub2RlQWZ0ZXIuc2FtZU1hcmt1cChzbGljZS5jb250ZW50LmZpcnN0Q2hpbGQpKSB7XG4gICAgdHIuc2V0U2VsZWN0aW9uKG5ldyBOb2RlU2VsZWN0aW9uKCRwb3MpKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZW5kID0gdHIubWFwcGluZy5tYXAoaW5zZXJ0UG9zKTtcbiAgICB0ci5tYXBwaW5nLm1hcHNbdHIubWFwcGluZy5tYXBzLmxlbmd0aCAtIDFdLmZvckVhY2goZnVuY3Rpb24gKF9mcm9tLCBfdG8sIF9uZXdGcm9tLCBuZXdUbykgeyByZXR1cm4gZW5kID0gbmV3VG87IH0pO1xuICAgIHRyLnNldFNlbGVjdGlvbihzZWxlY3Rpb25CZXR3ZWVuKHZpZXcsICRwb3MsIHRyLmRvYy5yZXNvbHZlKGVuZCkpKTtcbiAgfVxuICB2aWV3LmZvY3VzKCk7XG4gIHZpZXcuZGlzcGF0Y2godHIuc2V0TWV0YShcInVpRXZlbnRcIiwgXCJkcm9wXCIpKTtcbn07XG5cbmhhbmRsZXJzLmZvY3VzID0gZnVuY3Rpb24gKHZpZXcpIHtcbiAgaWYgKCF2aWV3LmZvY3VzZWQpIHtcbiAgICB2aWV3LmRvbU9ic2VydmVyLnN0b3AoKTtcbiAgICB2aWV3LmRvbS5jbGFzc0xpc3QuYWRkKFwiUHJvc2VNaXJyb3ItZm9jdXNlZFwiKTtcbiAgICB2aWV3LmRvbU9ic2VydmVyLnN0YXJ0KCk7XG4gICAgdmlldy5mb2N1c2VkID0gdHJ1ZTtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh2aWV3LmRvY1ZpZXcgJiYgdmlldy5oYXNGb2N1cygpICYmICF2aWV3LmRvbU9ic2VydmVyLmN1cnJlbnRTZWxlY3Rpb24uZXEodmlldy5yb290LmdldFNlbGVjdGlvbigpKSlcbiAgICAgICAgeyBzZWxlY3Rpb25Ub0RPTSh2aWV3KTsgfVxuICAgIH0sIDIwKTtcbiAgfVxufTtcblxuaGFuZGxlcnMuYmx1ciA9IGZ1bmN0aW9uICh2aWV3LCBlKSB7XG4gIGlmICh2aWV3LmZvY3VzZWQpIHtcbiAgICB2aWV3LmRvbU9ic2VydmVyLnN0b3AoKTtcbiAgICB2aWV3LmRvbS5jbGFzc0xpc3QucmVtb3ZlKFwiUHJvc2VNaXJyb3ItZm9jdXNlZFwiKTtcbiAgICB2aWV3LmRvbU9ic2VydmVyLnN0YXJ0KCk7XG4gICAgaWYgKGUucmVsYXRlZFRhcmdldCAmJiB2aWV3LmRvbS5jb250YWlucyhlLnJlbGF0ZWRUYXJnZXQpKVxuICAgICAgeyB2aWV3LmRvbU9ic2VydmVyLmN1cnJlbnRTZWxlY3Rpb24uc2V0KHt9KTsgfVxuICAgIHZpZXcuZm9jdXNlZCA9IGZhbHNlO1xuICB9XG59O1xuXG5oYW5kbGVycy5iZWZvcmVpbnB1dCA9IGZ1bmN0aW9uICh2aWV3LCBldmVudCkge1xuICAvLyBXZSBzaG91bGQgcHJvYmFibHkgZG8gbW9yZSB3aXRoIGJlZm9yZWlucHV0IGV2ZW50cywgYnV0IHN1cHBvcnRcbiAgLy8gaXMgc28gc3BvdHR5IHRoYXQgSSdtIHN0aWxsIHdhaXRpbmcgdG8gc2VlIHdoZXJlIHRoZXkgYXJlIGdvaW5nLlxuXG4gIC8vIFZlcnkgc3BlY2lmaWMgaGFjayB0byBkZWFsIHdpdGggYmFja3NwYWNlIHNvbWV0aW1lcyBmYWlsaW5nIG9uXG4gIC8vIENocm9tZSBBbmRyb2lkIHdoZW4gYWZ0ZXIgYW4gdW5lZGl0YWJsZSBub2RlLlxuICBpZiAocmVzdWx0LmNocm9tZSAmJiByZXN1bHQuYW5kcm9pZCAmJiBldmVudC5pbnB1dFR5cGUgPT0gXCJkZWxldGVDb250ZW50QmFja3dhcmRcIikge1xuICAgIHZhciBkb21DaGFuZ2VDb3VudCA9IHZpZXcuZG9tQ2hhbmdlQ291bnQ7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodmlldy5kb21DaGFuZ2VDb3VudCAhPSBkb21DaGFuZ2VDb3VudCkgeyByZXR1cm4gfSAvLyBFdmVudCBhbHJlYWR5IGhhZCBzb21lIGVmZmVjdFxuICAgICAgLy8gVGhpcyBidWcgdGVuZHMgdG8gY2xvc2UgdGhlIHZpcnR1YWwga2V5Ym9hcmQsIHNvIHdlIHJlZm9jdXNcbiAgICAgIHZpZXcuZG9tLmJsdXIoKTtcbiAgICAgIHZpZXcuZm9jdXMoKTtcbiAgICAgIGlmICh2aWV3LnNvbWVQcm9wKFwiaGFuZGxlS2V5RG93blwiLCBmdW5jdGlvbiAoZikgeyByZXR1cm4gZih2aWV3LCBrZXlFdmVudCg4LCBcIkJhY2tzcGFjZVwiKSk7IH0pKSB7IHJldHVybiB9XG4gICAgICB2YXIgcmVmID0gdmlldy5zdGF0ZS5zZWxlY3Rpb247XG4gICAgICB2YXIgJGN1cnNvciA9IHJlZi4kY3Vyc29yO1xuICAgICAgLy8gQ3J1ZGUgYXBwcm94aW1hdGlvbiBvZiBiYWNrc3BhY2UgYmVoYXZpb3Igd2hlbiBubyBjb21tYW5kIGhhbmRsZWQgaXRcbiAgICAgIGlmICgkY3Vyc29yICYmICRjdXJzb3IucG9zID4gMCkgeyB2aWV3LmRpc3BhdGNoKHZpZXcuc3RhdGUudHIuZGVsZXRlKCRjdXJzb3IucG9zIC0gMSwgJGN1cnNvci5wb3MpLnNjcm9sbEludG9WaWV3KCkpOyB9XG4gICAgfSwgNTApO1xuICB9XG59O1xuXG4vLyBNYWtlIHN1cmUgYWxsIGhhbmRsZXJzIGdldCByZWdpc3RlcmVkXG5mb3IgKHZhciBwcm9wIGluIGVkaXRIYW5kbGVycykgeyBoYW5kbGVyc1twcm9wXSA9IGVkaXRIYW5kbGVyc1twcm9wXTsgfVxuXG5mdW5jdGlvbiBjb21wYXJlT2JqcyhhLCBiKSB7XG4gIGlmIChhID09IGIpIHsgcmV0dXJuIHRydWUgfVxuICBmb3IgKHZhciBwIGluIGEpIHsgaWYgKGFbcF0gIT09IGJbcF0pIHsgcmV0dXJuIGZhbHNlIH0gfVxuICBmb3IgKHZhciBwJDEgaW4gYikgeyBpZiAoIShwJDEgaW4gYSkpIHsgcmV0dXJuIGZhbHNlIH0gfVxuICByZXR1cm4gdHJ1ZVxufVxuXG52YXIgV2lkZ2V0VHlwZSA9IGZ1bmN0aW9uIFdpZGdldFR5cGUodG9ET00sIHNwZWMpIHtcbiAgdGhpcy5zcGVjID0gc3BlYyB8fCBub1NwZWM7XG4gIHRoaXMuc2lkZSA9IHRoaXMuc3BlYy5zaWRlIHx8IDA7XG4gIHRoaXMudG9ET00gPSB0b0RPTTtcbn07XG5cbldpZGdldFR5cGUucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIG1hcCAobWFwcGluZywgc3Bhbiwgb2Zmc2V0LCBvbGRPZmZzZXQpIHtcbiAgdmFyIHJlZiA9IG1hcHBpbmcubWFwUmVzdWx0KHNwYW4uZnJvbSArIG9sZE9mZnNldCwgdGhpcy5zaWRlIDwgMCA/IC0xIDogMSk7XG4gICAgdmFyIHBvcyA9IHJlZi5wb3M7XG4gICAgdmFyIGRlbGV0ZWQgPSByZWYuZGVsZXRlZDtcbiAgcmV0dXJuIGRlbGV0ZWQgPyBudWxsIDogbmV3IERlY29yYXRpb24ocG9zIC0gb2Zmc2V0LCBwb3MgLSBvZmZzZXQsIHRoaXMpXG59O1xuXG5XaWRnZXRUeXBlLnByb3RvdHlwZS52YWxpZCA9IGZ1bmN0aW9uIHZhbGlkICgpIHsgcmV0dXJuIHRydWUgfTtcblxuV2lkZ2V0VHlwZS5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSAob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMgPT0gb3RoZXIgfHxcbiAgICAob3RoZXIgaW5zdGFuY2VvZiBXaWRnZXRUeXBlICYmXG4gICAgICh0aGlzLnNwZWMua2V5ICYmIHRoaXMuc3BlYy5rZXkgPT0gb3RoZXIuc3BlYy5rZXkgfHxcbiAgICAgIHRoaXMudG9ET00gPT0gb3RoZXIudG9ET00gJiYgY29tcGFyZU9ianModGhpcy5zcGVjLCBvdGhlci5zcGVjKSkpXG59O1xuXG52YXIgSW5saW5lVHlwZSA9IGZ1bmN0aW9uIElubGluZVR5cGUoYXR0cnMsIHNwZWMpIHtcbiAgdGhpcy5zcGVjID0gc3BlYyB8fCBub1NwZWM7XG4gIHRoaXMuYXR0cnMgPSBhdHRycztcbn07XG5cbklubGluZVR5cGUucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIG1hcCAobWFwcGluZywgc3Bhbiwgb2Zmc2V0LCBvbGRPZmZzZXQpIHtcbiAgdmFyIGZyb20gPSBtYXBwaW5nLm1hcChzcGFuLmZyb20gKyBvbGRPZmZzZXQsIHRoaXMuc3BlYy5pbmNsdXNpdmVTdGFydCA/IC0xIDogMSkgLSBvZmZzZXQ7XG4gIHZhciB0byA9IG1hcHBpbmcubWFwKHNwYW4udG8gKyBvbGRPZmZzZXQsIHRoaXMuc3BlYy5pbmNsdXNpdmVFbmQgPyAxIDogLTEpIC0gb2Zmc2V0O1xuICByZXR1cm4gZnJvbSA+PSB0byA/IG51bGwgOiBuZXcgRGVjb3JhdGlvbihmcm9tLCB0bywgdGhpcylcbn07XG5cbklubGluZVR5cGUucHJvdG90eXBlLnZhbGlkID0gZnVuY3Rpb24gdmFsaWQgKF8sIHNwYW4pIHsgcmV0dXJuIHNwYW4uZnJvbSA8IHNwYW4udG8gfTtcblxuSW5saW5lVHlwZS5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSAob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMgPT0gb3RoZXIgfHxcbiAgICAob3RoZXIgaW5zdGFuY2VvZiBJbmxpbmVUeXBlICYmIGNvbXBhcmVPYmpzKHRoaXMuYXR0cnMsIG90aGVyLmF0dHJzKSAmJlxuICAgICBjb21wYXJlT2Jqcyh0aGlzLnNwZWMsIG90aGVyLnNwZWMpKVxufTtcblxuSW5saW5lVHlwZS5pcyA9IGZ1bmN0aW9uIGlzIChzcGFuKSB7IHJldHVybiBzcGFuLnR5cGUgaW5zdGFuY2VvZiBJbmxpbmVUeXBlIH07XG5cbnZhciBOb2RlVHlwZSA9IGZ1bmN0aW9uIE5vZGVUeXBlKGF0dHJzLCBzcGVjKSB7XG4gIHRoaXMuc3BlYyA9IHNwZWMgfHwgbm9TcGVjO1xuICB0aGlzLmF0dHJzID0gYXR0cnM7XG59O1xuXG5Ob2RlVHlwZS5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gbWFwIChtYXBwaW5nLCBzcGFuLCBvZmZzZXQsIG9sZE9mZnNldCkge1xuICB2YXIgZnJvbSA9IG1hcHBpbmcubWFwUmVzdWx0KHNwYW4uZnJvbSArIG9sZE9mZnNldCwgMSk7XG4gIGlmIChmcm9tLmRlbGV0ZWQpIHsgcmV0dXJuIG51bGwgfVxuICB2YXIgdG8gPSBtYXBwaW5nLm1hcFJlc3VsdChzcGFuLnRvICsgb2xkT2Zmc2V0LCAtMSk7XG4gIGlmICh0by5kZWxldGVkIHx8IHRvLnBvcyA8PSBmcm9tLnBvcykgeyByZXR1cm4gbnVsbCB9XG4gIHJldHVybiBuZXcgRGVjb3JhdGlvbihmcm9tLnBvcyAtIG9mZnNldCwgdG8ucG9zIC0gb2Zmc2V0LCB0aGlzKVxufTtcblxuTm9kZVR5cGUucHJvdG90eXBlLnZhbGlkID0gZnVuY3Rpb24gdmFsaWQgKG5vZGUsIHNwYW4pIHtcbiAgdmFyIHJlZiA9IG5vZGUuY29udGVudC5maW5kSW5kZXgoc3Bhbi5mcm9tKTtcbiAgICB2YXIgaW5kZXggPSByZWYuaW5kZXg7XG4gICAgdmFyIG9mZnNldCA9IHJlZi5vZmZzZXQ7XG4gICAgdmFyIGNoaWxkO1xuICByZXR1cm4gb2Zmc2V0ID09IHNwYW4uZnJvbSAmJiAhKGNoaWxkID0gbm9kZS5jaGlsZChpbmRleCkpLmlzVGV4dCAmJiBvZmZzZXQgKyBjaGlsZC5ub2RlU2l6ZSA9PSBzcGFuLnRvXG59O1xuXG5Ob2RlVHlwZS5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSAob3RoZXIpIHtcbiAgcmV0dXJuIHRoaXMgPT0gb3RoZXIgfHxcbiAgICAob3RoZXIgaW5zdGFuY2VvZiBOb2RlVHlwZSAmJiBjb21wYXJlT2Jqcyh0aGlzLmF0dHJzLCBvdGhlci5hdHRycykgJiZcbiAgICAgY29tcGFyZU9ianModGhpcy5zcGVjLCBvdGhlci5zcGVjKSlcbn07XG5cbi8vIDo6LSBEZWNvcmF0aW9uIG9iamVjdHMgY2FuIGJlIHByb3ZpZGVkIHRvIHRoZSB2aWV3IHRocm91Z2ggdGhlXG4vLyBbYGRlY29yYXRpb25zYCBwcm9wXSgjdmlldy5FZGl0b3JQcm9wcy5kZWNvcmF0aW9ucykuIFRoZXkgY29tZSBpblxuLy8gc2V2ZXJhbCB2YXJpYW50c+KAlHNlZSB0aGUgc3RhdGljIG1lbWJlcnMgb2YgdGhpcyBjbGFzcyBmb3IgZGV0YWlscy5cbnZhciBEZWNvcmF0aW9uID0gZnVuY3Rpb24gRGVjb3JhdGlvbihmcm9tLCB0bywgdHlwZSkge1xuICAvLyA6OiBudW1iZXJcbiAgLy8gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSBkZWNvcmF0aW9uLlxuICB0aGlzLmZyb20gPSBmcm9tO1xuICAvLyA6OiBudW1iZXJcbiAgLy8gVGhlIGVuZCBwb3NpdGlvbi4gV2lsbCBiZSB0aGUgc2FtZSBhcyBgZnJvbWAgZm9yIFt3aWRnZXRcbiAgLy8gZGVjb3JhdGlvbnNdKCN2aWV3LkRlY29yYXRpb25ed2lkZ2V0KS5cbiAgdGhpcy50byA9IHRvO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQxID0geyBzcGVjOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LGlubGluZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5EZWNvcmF0aW9uLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAoZnJvbSwgdG8pIHtcbiAgcmV0dXJuIG5ldyBEZWNvcmF0aW9uKGZyb20sIHRvLCB0aGlzLnR5cGUpXG59O1xuXG5EZWNvcmF0aW9uLnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChvdGhlciwgb2Zmc2V0KSB7XG4gICAgaWYgKCBvZmZzZXQgPT09IHZvaWQgMCApIG9mZnNldCA9IDA7XG5cbiAgcmV0dXJuIHRoaXMudHlwZS5lcShvdGhlci50eXBlKSAmJiB0aGlzLmZyb20gKyBvZmZzZXQgPT0gb3RoZXIuZnJvbSAmJiB0aGlzLnRvICsgb2Zmc2V0ID09IG90aGVyLnRvXG59O1xuXG5EZWNvcmF0aW9uLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiBtYXAgKG1hcHBpbmcsIG9mZnNldCwgb2xkT2Zmc2V0KSB7XG4gIHJldHVybiB0aGlzLnR5cGUubWFwKG1hcHBpbmcsIHRoaXMsIG9mZnNldCwgb2xkT2Zmc2V0KVxufTtcblxuLy8gOjogKG51bWJlciwgdW5pb248KHZpZXc6IEVkaXRvclZpZXcsIGdldFBvczogKCkg4oaSIG51bWJlcikg4oaSIGRvbS5Ob2RlLCBkb20uTm9kZT4sID9PYmplY3QpIOKGkiBEZWNvcmF0aW9uXG4vLyBDcmVhdGVzIGEgd2lkZ2V0IGRlY29yYXRpb24sIHdoaWNoIGlzIGEgRE9NIG5vZGUgdGhhdCdzIHNob3duIGluXG4vLyB0aGUgZG9jdW1lbnQgYXQgdGhlIGdpdmVuIHBvc2l0aW9uLiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IHlvdVxuLy8gZGVsYXkgcmVuZGVyaW5nIHRoZSB3aWRnZXQgYnkgcGFzc2luZyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZVxuLy8gY2FsbGVkIHdoZW4gdGhlIHdpZGdldCBpcyBhY3R1YWxseSBkcmF3biBpbiBhIHZpZXcsIGJ1dCB5b3UgY2FuXG4vLyBhbHNvIGRpcmVjdGx5IHBhc3MgYSBET00gbm9kZS4gYGdldFBvc2AgY2FuIGJlIHVzZWQgdG8gZmluZCB0aGVcbi8vIHdpZGdldCdzIGN1cnJlbnQgZG9jdW1lbnQgcG9zaXRpb24uXG4vL1xuLy8gc3BlYzo6LSBUaGVzZSBvcHRpb25zIGFyZSBzdXBwb3J0ZWQ6XG4vL1xuLy8gICBzaWRlOjogP251bWJlclxuLy8gICBDb250cm9scyB3aGljaCBzaWRlIG9mIHRoZSBkb2N1bWVudCBwb3NpdGlvbiB0aGlzIHdpZGdldCBpc1xuLy8gICBhc3NvY2lhdGVkIHdpdGguIFdoZW4gbmVnYXRpdmUsIGl0IGlzIGRyYXduIGJlZm9yZSBhIGN1cnNvclxuLy8gICBhdCBpdHMgcG9zaXRpb24sIGFuZCBjb250ZW50IGluc2VydGVkIGF0IHRoYXQgcG9zaXRpb24gZW5kc1xuLy8gICB1cCBhZnRlciB0aGUgd2lkZ2V0LiBXaGVuIHplcm8gKHRoZSBkZWZhdWx0KSBvciBwb3NpdGl2ZSwgdGhlXG4vLyAgIHdpZGdldCBpcyBkcmF3biBhZnRlciB0aGUgY3Vyc29yIGFuZCBjb250ZW50IGluc2VydGVkIHRoZXJlXG4vLyAgIGVuZHMgdXAgYmVmb3JlIHRoZSB3aWRnZXQuXG4vL1xuLy8gICBXaGVuIHRoZXJlIGFyZSBtdWx0aXBsZSB3aWRnZXRzIGF0IGEgZ2l2ZW4gcG9zaXRpb24sIHRoZWlyXG4vLyAgIGBzaWRlYCB2YWx1ZXMgZGV0ZXJtaW5lIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IGFwcGVhci4gVGhvc2Vcbi8vICAgd2l0aCBsb3dlciB2YWx1ZXMgYXBwZWFyIGZpcnN0LiBUaGUgb3JkZXJpbmcgb2Ygd2lkZ2V0cyB3aXRoXG4vLyAgIHRoZSBzYW1lIGBzaWRlYCB2YWx1ZSBpcyB1bnNwZWNpZmllZC5cbi8vXG4vLyAgIFdoZW4gYG1hcmtzYCBpcyBudWxsLCBgc2lkZWAgYWxzbyBkZXRlcm1pbmVzIHRoZSBtYXJrcyB0aGF0XG4vLyAgIHRoZSB3aWRnZXQgaXMgd3JhcHBlZCBpbuKAlHRob3NlIG9mIHRoZSBub2RlIGJlZm9yZSB3aGVuXG4vLyAgIG5lZ2F0aXZlLCB0aG9zZSBvZiB0aGUgbm9kZSBhZnRlciB3aGVuIHBvc2l0aXZlLlxuLy9cbi8vICAgbWFya3M6OiA/W01hcmtdXG4vLyAgIFRoZSBwcmVjaXNlIHNldCBvZiBtYXJrcyB0byBkcmF3IGFyb3VuZCB0aGUgd2lkZ2V0LlxuLy9cbi8vICAgc3RvcEV2ZW50OjogPyhldmVudDogZG9tLkV2ZW50KSDihpIgYm9vbFxuLy8gICBDYW4gYmUgdXNlZCB0byBjb250cm9sIHdoaWNoIERPTSBldmVudHMsIHdoZW4gdGhleSBidWJibGUgb3V0XG4vLyAgIG9mIHRoaXMgd2lkZ2V0LCB0aGUgZWRpdG9yIHZpZXcgc2hvdWxkIGlnbm9yZS5cbi8vXG4vLyAgIGlnbm9yZVNlbGVjdGlvbjo6ID9ib29sXG4vLyAgIFdoZW4gc2V0IChkZWZhdWx0cyB0byBmYWxzZSksIHNlbGVjdGlvbiBjaGFuZ2VzIGluc2lkZSB0aGVcbi8vICAgd2lkZ2V0IGFyZSBpZ25vcmVkLCBhbmQgZG9uJ3QgY2F1c2UgUHJvc2VNaXJyb3IgdG8gdHJ5IGFuZFxuLy8gICByZS1zeW5jIHRoZSBzZWxlY3Rpb24gd2l0aCBpdHMgc2VsZWN0aW9uIHN0YXRlLlxuLy9cbi8vICAga2V5OjogP3N0cmluZ1xuLy8gICBXaGVuIGNvbXBhcmluZyBkZWNvcmF0aW9ucyBvZiB0aGlzIHR5cGUgKGluIG9yZGVyIHRvIGRlY2lkZVxuLy8gICB3aGV0aGVyIGl0IG5lZWRzIHRvIGJlIHJlZHJhd24pLCBQcm9zZU1pcnJvciB3aWxsIGJ5IGRlZmF1bHRcbi8vICAgY29tcGFyZSB0aGUgd2lkZ2V0IERPTSBub2RlIGJ5IGlkZW50aXR5LiBJZiB5b3UgcGFzcyBhIGtleSxcbi8vICAgdGhhdCBrZXkgd2lsbCBiZSBjb21wYXJlZCBpbnN0ZWFkLCB3aGljaCBjYW4gYmUgdXNlZnVsIHdoZW5cbi8vICAgeW91IGdlbmVyYXRlIGRlY29yYXRpb25zIG9uIHRoZSBmbHkgYW5kIGRvbid0IHdhbnQgdG8gc3RvcmVcbi8vICAgYW5kIHJldXNlIERPTSBub2Rlcy4gTWFrZSBzdXJlIHRoYXQgYW55IHdpZGdldHMgd2l0aCB0aGUgc2FtZVxuLy8gICBrZXkgYXJlIGludGVyY2hhbmdlYWJsZeKAlGlmIHdpZGdldHMgZGlmZmVyIGluLCBmb3IgZXhhbXBsZSxcbi8vICAgdGhlIGJlaGF2aW9yIG9mIHNvbWUgZXZlbnQgaGFuZGxlciwgdGhleSBzaG91bGQgZ2V0XG4vLyAgIGRpZmZlcmVudCBrZXlzLlxuRGVjb3JhdGlvbi53aWRnZXQgPSBmdW5jdGlvbiB3aWRnZXQgKHBvcywgdG9ET00sIHNwZWMpIHtcbiAgcmV0dXJuIG5ldyBEZWNvcmF0aW9uKHBvcywgcG9zLCBuZXcgV2lkZ2V0VHlwZSh0b0RPTSwgc3BlYykpXG59O1xuXG4vLyA6OiAobnVtYmVyLCBudW1iZXIsIERlY29yYXRpb25BdHRycywgP09iamVjdCkg4oaSIERlY29yYXRpb25cbi8vIENyZWF0ZXMgYW4gaW5saW5lIGRlY29yYXRpb24sIHdoaWNoIGFkZHMgdGhlIGdpdmVuIGF0dHJpYnV0ZXMgdG9cbi8vIGVhY2ggaW5saW5lIG5vZGUgYmV0d2VlbiBgZnJvbWAgYW5kIGB0b2AuXG4vL1xuLy8gc3BlYzo6LSBUaGVzZSBvcHRpb25zIGFyZSByZWNvZ25pemVkOlxuLy9cbi8vICAgaW5jbHVzaXZlU3RhcnQ6OiA/Ym9vbFxuLy8gICBEZXRlcm1pbmVzIGhvdyB0aGUgbGVmdCBzaWRlIG9mIHRoZSBkZWNvcmF0aW9uIGlzXG4vLyAgIFttYXBwZWRdKCN0cmFuc2Zvcm0uUG9zaXRpb25fTWFwcGluZykgd2hlbiBjb250ZW50IGlzXG4vLyAgIGluc2VydGVkIGRpcmVjdGx5IGF0IHRoYXQgcG9zaXRpb24uIEJ5IGRlZmF1bHQsIHRoZSBkZWNvcmF0aW9uXG4vLyAgIHdvbid0IGluY2x1ZGUgdGhlIG5ldyBjb250ZW50LCBidXQgeW91IGNhbiBzZXQgdGhpcyB0byBgdHJ1ZWBcbi8vICAgdG8gbWFrZSBpdCBpbmNsdXNpdmUuXG4vL1xuLy8gICBpbmNsdXNpdmVFbmQ6OiA/Ym9vbFxuLy8gICBEZXRlcm1pbmVzIGhvdyB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgZGVjb3JhdGlvbiBpcyBtYXBwZWQuXG4vLyAgIFNlZVxuLy8gICBbYGluY2x1c2l2ZVN0YXJ0YF0oI3ZpZXcuRGVjb3JhdGlvbl5pbmxpbmVec3BlYy5pbmNsdXNpdmVTdGFydCkuXG5EZWNvcmF0aW9uLmlubGluZSA9IGZ1bmN0aW9uIGlubGluZSAoZnJvbSwgdG8sIGF0dHJzLCBzcGVjKSB7XG4gIHJldHVybiBuZXcgRGVjb3JhdGlvbihmcm9tLCB0bywgbmV3IElubGluZVR5cGUoYXR0cnMsIHNwZWMpKVxufTtcblxuLy8gOjogKG51bWJlciwgbnVtYmVyLCBEZWNvcmF0aW9uQXR0cnMsID9PYmplY3QpIOKGkiBEZWNvcmF0aW9uXG4vLyBDcmVhdGVzIGEgbm9kZSBkZWNvcmF0aW9uLiBgZnJvbWAgYW5kIGB0b2Agc2hvdWxkIHBvaW50IHByZWNpc2VseVxuLy8gYmVmb3JlIGFuZCBhZnRlciBhIG5vZGUgaW4gdGhlIGRvY3VtZW50LiBUaGF0IG5vZGUsIGFuZCBvbmx5IHRoYXRcbi8vIG5vZGUsIHdpbGwgcmVjZWl2ZSB0aGUgZ2l2ZW4gYXR0cmlidXRlcy5cbi8vXG4vLyBzcGVjOjotXG4vL1xuLy8gT3B0aW9uYWwgaW5mb3JtYXRpb24gdG8gc3RvcmUgd2l0aCB0aGUgZGVjb3JhdGlvbi4gSXRcbi8vIGlzIGFsc28gdXNlZCB3aGVuIGNvbXBhcmluZyBkZWNvcmF0b3JzIGZvciBlcXVhbGl0eS5cbkRlY29yYXRpb24ubm9kZSA9IGZ1bmN0aW9uIG5vZGUgKGZyb20sIHRvLCBhdHRycywgc3BlYykge1xuICByZXR1cm4gbmV3IERlY29yYXRpb24oZnJvbSwgdG8sIG5ldyBOb2RlVHlwZShhdHRycywgc3BlYykpXG59O1xuXG4vLyA6OiBPYmplY3Rcbi8vIFRoZSBzcGVjIHByb3ZpZGVkIHdoZW4gY3JlYXRpbmcgdGhpcyBkZWNvcmF0aW9uLiBDYW4gYmUgdXNlZnVsXG4vLyBpZiB5b3UndmUgc3RvcmVkIGV4dHJhIGluZm9ybWF0aW9uIGluIHRoYXQgb2JqZWN0LlxucHJvdG90eXBlQWNjZXNzb3JzJDEuc3BlYy5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnR5cGUuc3BlYyB9O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5pbmxpbmUuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy50eXBlIGluc3RhbmNlb2YgSW5saW5lVHlwZSB9O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggRGVjb3JhdGlvbi5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyQxICk7XG5cbi8vIERlY29yYXRpb25BdHRyczo6IGludGVyZmFjZVxuLy8gQSBzZXQgb2YgYXR0cmlidXRlcyB0byBhZGQgdG8gYSBkZWNvcmF0ZWQgbm9kZS4gTW9zdCBwcm9wZXJ0aWVzXG4vLyBzaW1wbHkgZGlyZWN0bHkgY29ycmVzcG9uZCB0byBET00gYXR0cmlidXRlcyBvZiB0aGUgc2FtZSBuYW1lLFxuLy8gd2hpY2ggd2lsbCBiZSBzZXQgdG8gdGhlIHByb3BlcnR5J3MgdmFsdWUuIFRoZXNlIGFyZSBleGNlcHRpb25zOlxuLy9cbi8vICAgY2xhc3M6OiA/c3RyaW5nXG4vLyAgIEEgQ1NTIGNsYXNzIG5hbWUgb3IgYSBzcGFjZS1zZXBhcmF0ZWQgc2V0IG9mIGNsYXNzIG5hbWVzIHRvIGJlXG4vLyAgIF9hZGRlZF8gdG8gdGhlIGNsYXNzZXMgdGhhdCB0aGUgbm9kZSBhbHJlYWR5IGhhZC5cbi8vXG4vLyAgIHN0eWxlOjogP3N0cmluZ1xuLy8gICBBIHN0cmluZyBvZiBDU1MgdG8gYmUgX2FkZGVkXyB0byB0aGUgbm9kZSdzIGV4aXN0aW5nIGBzdHlsZWAgcHJvcGVydHkuXG4vL1xuLy8gICBub2RlTmFtZTo6ID9zdHJpbmdcbi8vICAgV2hlbiBub24tbnVsbCwgdGhlIHRhcmdldCBub2RlIGlzIHdyYXBwZWQgaW4gYSBET00gZWxlbWVudCBvZlxuLy8gICB0aGlzIHR5cGUgKGFuZCB0aGUgb3RoZXIgYXR0cmlidXRlcyBhcmUgYXBwbGllZCB0byB0aGlzIGVsZW1lbnQpLlxuXG52YXIgbm9uZSA9IFtdLCBub1NwZWMgPSB7fTtcblxuLy8gOjogY2xhc3MgZXh0ZW5kcyBEZWNvcmF0aW9uU291cmNlXG4vLyBBIGNvbGxlY3Rpb24gb2YgW2RlY29yYXRpb25zXSgjdmlldy5EZWNvcmF0aW9uKSwgb3JnYW5pemVkIGluXG4vLyBzdWNoIGEgd2F5IHRoYXQgdGhlIGRyYXdpbmcgYWxnb3JpdGhtIGNhbiBlZmZpY2llbnRseSB1c2UgYW5kXG4vLyBjb21wYXJlIHRoZW0uIFRoaXMgaXMgYSBwZXJzaXN0ZW50IGRhdGEgc3RydWN0dXJl4oCUaXQgaXMgbm90XG4vLyBtb2RpZmllZCwgdXBkYXRlcyBjcmVhdGUgYSBuZXcgdmFsdWUuXG52YXIgRGVjb3JhdGlvblNldCA9IGZ1bmN0aW9uIERlY29yYXRpb25TZXQobG9jYWwsIGNoaWxkcmVuKSB7XG4gIHRoaXMubG9jYWwgPSBsb2NhbCAmJiBsb2NhbC5sZW5ndGggPyBsb2NhbCA6IG5vbmU7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGggPyBjaGlsZHJlbiA6IG5vbmU7XG59O1xuXG4vLyA6OiAoTm9kZSwgW0RlY29yYXRpb25dKSDihpIgRGVjb3JhdGlvblNldFxuLy8gQ3JlYXRlIGEgc2V0IG9mIGRlY29yYXRpb25zLCB1c2luZyB0aGUgc3RydWN0dXJlIG9mIHRoZSBnaXZlblxuLy8gZG9jdW1lbnQuXG5EZWNvcmF0aW9uU2V0LmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZSAoZG9jLCBkZWNvcmF0aW9ucykge1xuICByZXR1cm4gZGVjb3JhdGlvbnMubGVuZ3RoID8gYnVpbGRUcmVlKGRlY29yYXRpb25zLCBkb2MsIDAsIG5vU3BlYykgOiBlbXB0eVxufTtcblxuLy8gOjogKD9udW1iZXIsID9udW1iZXIsID8oc3BlYzogT2JqZWN0KSDihpIgYm9vbCkg4oaSIFtEZWNvcmF0aW9uXVxuLy8gRmluZCBhbGwgZGVjb3JhdGlvbnMgaW4gdGhpcyBzZXQgd2hpY2ggdG91Y2ggdGhlIGdpdmVuIHJhbmdlXG4vLyAoaW5jbHVkaW5nIGRlY29yYXRpb25zIHRoYXQgc3RhcnQgb3IgZW5kIGRpcmVjdGx5IGF0IHRoZVxuLy8gYm91bmRhcmllcykgYW5kIG1hdGNoIHRoZSBnaXZlbiBwcmVkaWNhdGUgb24gdGhlaXIgc3BlYy4gV2hlblxuLy8gYHN0YXJ0YCBhbmQgYGVuZGAgYXJlIG9taXR0ZWQsIGFsbCBkZWNvcmF0aW9ucyBpbiB0aGUgc2V0IGFyZVxuLy8gY29uc2lkZXJlZC4gV2hlbiBgcHJlZGljYXRlYCBpc24ndCBnaXZlbiwgYWxsIGRlY29yYXRpb25zIGFyZVxuLy8gYXNzdW1lZCB0byBtYXRjaC5cbkRlY29yYXRpb25TZXQucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbiBmaW5kIChzdGFydCwgZW5kLCBwcmVkaWNhdGUpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB0aGlzLmZpbmRJbm5lcihzdGFydCA9PSBudWxsID8gMCA6IHN0YXJ0LCBlbmQgPT0gbnVsbCA/IDFlOSA6IGVuZCwgcmVzdWx0LCAwLCBwcmVkaWNhdGUpO1xuICByZXR1cm4gcmVzdWx0XG59O1xuXG5EZWNvcmF0aW9uU2V0LnByb3RvdHlwZS5maW5kSW5uZXIgPSBmdW5jdGlvbiBmaW5kSW5uZXIgKHN0YXJ0LCBlbmQsIHJlc3VsdCwgb2Zmc2V0LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxvY2FsLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNwYW4gPSB0aGlzLmxvY2FsW2ldO1xuICAgIGlmIChzcGFuLmZyb20gPD0gZW5kICYmIHNwYW4udG8gPj0gc3RhcnQgJiYgKCFwcmVkaWNhdGUgfHwgcHJlZGljYXRlKHNwYW4uc3BlYykpKVxuICAgICAgeyByZXN1bHQucHVzaChzcGFuLmNvcHkoc3Bhbi5mcm9tICsgb2Zmc2V0LCBzcGFuLnRvICsgb2Zmc2V0KSk7IH1cbiAgfVxuICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSQxICs9IDMpIHtcbiAgICBpZiAodGhpcy5jaGlsZHJlbltpJDFdIDwgZW5kICYmIHRoaXMuY2hpbGRyZW5baSQxICsgMV0gPiBzdGFydCkge1xuICAgICAgdmFyIGNoaWxkT2ZmID0gdGhpcy5jaGlsZHJlbltpJDFdICsgMTtcbiAgICAgIHRoaXMuY2hpbGRyZW5baSQxICsgMl0uZmluZElubmVyKHN0YXJ0IC0gY2hpbGRPZmYsIGVuZCAtIGNoaWxkT2ZmLCByZXN1bHQsIG9mZnNldCArIGNoaWxkT2ZmLCBwcmVkaWNhdGUpO1xuICAgIH1cbiAgfVxufTtcblxuLy8gOjogKE1hcHBpbmcsIE5vZGUsID9PYmplY3QpIOKGkiBEZWNvcmF0aW9uU2V0XG4vLyBNYXAgdGhlIHNldCBvZiBkZWNvcmF0aW9ucyBpbiByZXNwb25zZSB0byBhIGNoYW5nZSBpbiB0aGVcbi8vIGRvY3VtZW50LlxuLy9cbi8vIG9wdGlvbnM6Oi0gQW4gb3B0aW9uYWwgc2V0IG9mIG9wdGlvbnMuXG4vL1xuLy8gICBvblJlbW92ZTo6ID8oZGVjb3JhdGlvblNwZWM6IE9iamVjdClcbi8vICAgV2hlbiBnaXZlbiwgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaCBkZWNvcmF0aW9uXG4vLyAgIHRoYXQgZ2V0cyBkcm9wcGVkIGFzIGEgcmVzdWx0IG9mIHRoZSBtYXBwaW5nLCBwYXNzaW5nIHRoZVxuLy8gICBzcGVjIG9mIHRoYXQgZGVjb3JhdGlvbi5cbkRlY29yYXRpb25TZXQucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIG1hcCAobWFwcGluZywgZG9jLCBvcHRpb25zKSB7XG4gIGlmICh0aGlzID09IGVtcHR5IHx8IG1hcHBpbmcubWFwcy5sZW5ndGggPT0gMCkgeyByZXR1cm4gdGhpcyB9XG4gIHJldHVybiB0aGlzLm1hcElubmVyKG1hcHBpbmcsIGRvYywgMCwgMCwgb3B0aW9ucyB8fCBub1NwZWMpXG59O1xuXG5EZWNvcmF0aW9uU2V0LnByb3RvdHlwZS5tYXBJbm5lciA9IGZ1bmN0aW9uIG1hcElubmVyIChtYXBwaW5nLCBub2RlLCBvZmZzZXQsIG9sZE9mZnNldCwgb3B0aW9ucykge1xuICB2YXIgbmV3TG9jYWw7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sb2NhbC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBtYXBwZWQgPSB0aGlzLmxvY2FsW2ldLm1hcChtYXBwaW5nLCBvZmZzZXQsIG9sZE9mZnNldCk7XG4gICAgaWYgKG1hcHBlZCAmJiBtYXBwZWQudHlwZS52YWxpZChub2RlLCBtYXBwZWQpKSB7IChuZXdMb2NhbCB8fCAobmV3TG9jYWwgPSBbXSkpLnB1c2gobWFwcGVkKTsgfVxuICAgIGVsc2UgaWYgKG9wdGlvbnMub25SZW1vdmUpIHsgb3B0aW9ucy5vblJlbW92ZSh0aGlzLmxvY2FsW2ldLnNwZWMpOyB9XG4gIH1cblxuICBpZiAodGhpcy5jaGlsZHJlbi5sZW5ndGgpXG4gICAgeyByZXR1cm4gbWFwQ2hpbGRyZW4odGhpcy5jaGlsZHJlbiwgbmV3TG9jYWwsIG1hcHBpbmcsIG5vZGUsIG9mZnNldCwgb2xkT2Zmc2V0LCBvcHRpb25zKSB9XG4gIGVsc2VcbiAgICB7IHJldHVybiBuZXdMb2NhbCA/IG5ldyBEZWNvcmF0aW9uU2V0KG5ld0xvY2FsLnNvcnQoYnlQb3MpKSA6IGVtcHR5IH1cbn07XG5cbi8vIDo6IChOb2RlLCBbRGVjb3JhdGlvbl0pIOKGkiBEZWNvcmF0aW9uU2V0XG4vLyBBZGQgdGhlIGdpdmVuIGFycmF5IG9mIGRlY29yYXRpb25zIHRvIHRoZSBvbmVzIGluIHRoZSBzZXQsXG4vLyBwcm9kdWNpbmcgYSBuZXcgc2V0LiBOZWVkcyBhY2Nlc3MgdG8gdGhlIGN1cnJlbnQgZG9jdW1lbnQgdG9cbi8vIGNyZWF0ZSB0aGUgYXBwcm9wcmlhdGUgdHJlZSBzdHJ1Y3R1cmUuXG5EZWNvcmF0aW9uU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGRvYywgZGVjb3JhdGlvbnMpIHtcbiAgaWYgKCFkZWNvcmF0aW9ucy5sZW5ndGgpIHsgcmV0dXJuIHRoaXMgfVxuICBpZiAodGhpcyA9PSBlbXB0eSkgeyByZXR1cm4gRGVjb3JhdGlvblNldC5jcmVhdGUoZG9jLCBkZWNvcmF0aW9ucykgfVxuICByZXR1cm4gdGhpcy5hZGRJbm5lcihkb2MsIGRlY29yYXRpb25zLCAwKVxufTtcblxuRGVjb3JhdGlvblNldC5wcm90b3R5cGUuYWRkSW5uZXIgPSBmdW5jdGlvbiBhZGRJbm5lciAoZG9jLCBkZWNvcmF0aW9ucywgb2Zmc2V0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGNoaWxkcmVuLCBjaGlsZEluZGV4ID0gMDtcbiAgZG9jLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkTm9kZSwgY2hpbGRPZmZzZXQpIHtcbiAgICB2YXIgYmFzZU9mZnNldCA9IGNoaWxkT2Zmc2V0ICsgb2Zmc2V0LCBmb3VuZDtcbiAgICBpZiAoIShmb3VuZCA9IHRha2VTcGFuc0Zvck5vZGUoZGVjb3JhdGlvbnMsIGNoaWxkTm9kZSwgYmFzZU9mZnNldCkpKSB7IHJldHVybiB9XG5cbiAgICBpZiAoIWNoaWxkcmVuKSB7IGNoaWxkcmVuID0gdGhpcyQxLmNoaWxkcmVuLnNsaWNlKCk7IH1cbiAgICB3aGlsZSAoY2hpbGRJbmRleCA8IGNoaWxkcmVuLmxlbmd0aCAmJiBjaGlsZHJlbltjaGlsZEluZGV4XSA8IGNoaWxkT2Zmc2V0KSB7IGNoaWxkSW5kZXggKz0gMzsgfVxuICAgIGlmIChjaGlsZHJlbltjaGlsZEluZGV4XSA9PSBjaGlsZE9mZnNldClcbiAgICAgIHsgY2hpbGRyZW5bY2hpbGRJbmRleCArIDJdID0gY2hpbGRyZW5bY2hpbGRJbmRleCArIDJdLmFkZElubmVyKGNoaWxkTm9kZSwgZm91bmQsIGJhc2VPZmZzZXQgKyAxKTsgfVxuICAgIGVsc2VcbiAgICAgIHsgY2hpbGRyZW4uc3BsaWNlKGNoaWxkSW5kZXgsIDAsIGNoaWxkT2Zmc2V0LCBjaGlsZE9mZnNldCArIGNoaWxkTm9kZS5ub2RlU2l6ZSwgYnVpbGRUcmVlKGZvdW5kLCBjaGlsZE5vZGUsIGJhc2VPZmZzZXQgKyAxLCBub1NwZWMpKTsgfVxuICAgIGNoaWxkSW5kZXggKz0gMztcbiAgfSk7XG5cbiAgdmFyIGxvY2FsID0gbW92ZVNwYW5zKGNoaWxkSW5kZXggPyB3aXRob3V0TnVsbHMoZGVjb3JhdGlvbnMpIDogZGVjb3JhdGlvbnMsIC1vZmZzZXQpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxvY2FsLmxlbmd0aDsgaSsrKSB7IGlmICghbG9jYWxbaV0udHlwZS52YWxpZChkb2MsIGxvY2FsW2ldKSkgeyBsb2NhbC5zcGxpY2UoaS0tLCAxKTsgfSB9XG5cbiAgcmV0dXJuIG5ldyBEZWNvcmF0aW9uU2V0KGxvY2FsLmxlbmd0aCA/IHRoaXMubG9jYWwuY29uY2F0KGxvY2FsKS5zb3J0KGJ5UG9zKSA6IHRoaXMubG9jYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiB8fCB0aGlzLmNoaWxkcmVuKVxufTtcblxuLy8gOjogKFtEZWNvcmF0aW9uXSkg4oaSIERlY29yYXRpb25TZXRcbi8vIENyZWF0ZSBhIG5ldyBzZXQgdGhhdCBjb250YWlucyB0aGUgZGVjb3JhdGlvbnMgaW4gdGhpcyBzZXQsIG1pbnVzXG4vLyB0aGUgb25lcyBpbiB0aGUgZ2l2ZW4gYXJyYXkuXG5EZWNvcmF0aW9uU2V0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUgKGRlY29yYXRpb25zKSB7XG4gIGlmIChkZWNvcmF0aW9ucy5sZW5ndGggPT0gMCB8fCB0aGlzID09IGVtcHR5KSB7IHJldHVybiB0aGlzIH1cbiAgcmV0dXJuIHRoaXMucmVtb3ZlSW5uZXIoZGVjb3JhdGlvbnMsIDApXG59O1xuXG5EZWNvcmF0aW9uU2V0LnByb3RvdHlwZS5yZW1vdmVJbm5lciA9IGZ1bmN0aW9uIHJlbW92ZUlubmVyIChkZWNvcmF0aW9ucywgb2Zmc2V0KSB7XG4gIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4sIGxvY2FsID0gdGhpcy5sb2NhbDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkgKz0gMykge1xuICAgIHZhciBmb3VuZCA9ICh2b2lkIDApLCBmcm9tID0gY2hpbGRyZW5baV0gKyBvZmZzZXQsIHRvID0gY2hpbGRyZW5baSArIDFdICsgb2Zmc2V0O1xuICAgIGZvciAodmFyIGogPSAwLCBzcGFuID0gKHZvaWQgMCk7IGogPCBkZWNvcmF0aW9ucy5sZW5ndGg7IGorKykgeyBpZiAoc3BhbiA9IGRlY29yYXRpb25zW2pdKSB7XG4gICAgICBpZiAoc3Bhbi5mcm9tID4gZnJvbSAmJiBzcGFuLnRvIDwgdG8pIHtcbiAgICAgICAgZGVjb3JhdGlvbnNbal0gPSBudWxsXG4gICAgICAgIDsoZm91bmQgfHwgKGZvdW5kID0gW10pKS5wdXNoKHNwYW4pO1xuICAgICAgfVxuICAgIH0gfVxuICAgIGlmICghZm91bmQpIHsgY29udGludWUgfVxuICAgIGlmIChjaGlsZHJlbiA9PSB0aGlzLmNoaWxkcmVuKSB7IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbi5zbGljZSgpOyB9XG4gICAgdmFyIHJlbW92ZWQgPSBjaGlsZHJlbltpICsgMl0ucmVtb3ZlSW5uZXIoZm91bmQsIGZyb20gKyAxKTtcbiAgICBpZiAocmVtb3ZlZCAhPSBlbXB0eSkge1xuICAgICAgY2hpbGRyZW5baSArIDJdID0gcmVtb3ZlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hpbGRyZW4uc3BsaWNlKGksIDMpO1xuICAgICAgaSAtPSAzO1xuICAgIH1cbiAgfVxuICBpZiAobG9jYWwubGVuZ3RoKSB7IGZvciAodmFyIGkkMSA9IDAsIHNwYW4kMSA9ICh2b2lkIDApOyBpJDEgPCBkZWNvcmF0aW9ucy5sZW5ndGg7IGkkMSsrKSB7IGlmIChzcGFuJDEgPSBkZWNvcmF0aW9uc1tpJDFdKSB7XG4gICAgZm9yICh2YXIgaiQxID0gMDsgaiQxIDwgbG9jYWwubGVuZ3RoOyBqJDErKykgeyBpZiAobG9jYWxbaiQxXS5lcShzcGFuJDEsIG9mZnNldCkpIHtcbiAgICAgIGlmIChsb2NhbCA9PSB0aGlzLmxvY2FsKSB7IGxvY2FsID0gdGhpcy5sb2NhbC5zbGljZSgpOyB9XG4gICAgICBsb2NhbC5zcGxpY2UoaiQxLS0sIDEpO1xuICAgIH0gfVxuICB9IH0gfVxuICBpZiAoY2hpbGRyZW4gPT0gdGhpcy5jaGlsZHJlbiAmJiBsb2NhbCA9PSB0aGlzLmxvY2FsKSB7IHJldHVybiB0aGlzIH1cbiAgcmV0dXJuIGxvY2FsLmxlbmd0aCB8fCBjaGlsZHJlbi5sZW5ndGggPyBuZXcgRGVjb3JhdGlvblNldChsb2NhbCwgY2hpbGRyZW4pIDogZW1wdHlcbn07XG5cbkRlY29yYXRpb25TZXQucHJvdG90eXBlLmZvckNoaWxkID0gZnVuY3Rpb24gZm9yQ2hpbGQgKG9mZnNldCwgbm9kZSkge1xuICBpZiAodGhpcyA9PSBlbXB0eSkgeyByZXR1cm4gdGhpcyB9XG4gIGlmIChub2RlLmlzTGVhZikgeyByZXR1cm4gRGVjb3JhdGlvblNldC5lbXB0eSB9XG5cbiAgdmFyIGNoaWxkLCBsb2NhbDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSArPSAzKSB7IGlmICh0aGlzLmNoaWxkcmVuW2ldID49IG9mZnNldCkge1xuICAgIGlmICh0aGlzLmNoaWxkcmVuW2ldID09IG9mZnNldCkgeyBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baSArIDJdOyB9XG4gICAgYnJlYWtcbiAgfSB9XG4gIHZhciBzdGFydCA9IG9mZnNldCArIDEsIGVuZCA9IHN0YXJ0ICsgbm9kZS5jb250ZW50LnNpemU7XG4gIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHRoaXMubG9jYWwubGVuZ3RoOyBpJDErKykge1xuICAgIHZhciBkZWMgPSB0aGlzLmxvY2FsW2kkMV07XG4gICAgaWYgKGRlYy5mcm9tIDwgZW5kICYmIGRlYy50byA+IHN0YXJ0ICYmIChkZWMudHlwZSBpbnN0YW5jZW9mIElubGluZVR5cGUpKSB7XG4gICAgICB2YXIgZnJvbSA9IE1hdGgubWF4KHN0YXJ0LCBkZWMuZnJvbSkgLSBzdGFydCwgdG8gPSBNYXRoLm1pbihlbmQsIGRlYy50bykgLSBzdGFydDtcbiAgICAgIGlmIChmcm9tIDwgdG8pIHsgKGxvY2FsIHx8IChsb2NhbCA9IFtdKSkucHVzaChkZWMuY29weShmcm9tLCB0bykpOyB9XG4gICAgfVxuICB9XG4gIGlmIChsb2NhbCkge1xuICAgIHZhciBsb2NhbFNldCA9IG5ldyBEZWNvcmF0aW9uU2V0KGxvY2FsLnNvcnQoYnlQb3MpKTtcbiAgICByZXR1cm4gY2hpbGQgPyBuZXcgRGVjb3JhdGlvbkdyb3VwKFtsb2NhbFNldCwgY2hpbGRdKSA6IGxvY2FsU2V0XG4gIH1cbiAgcmV0dXJuIGNoaWxkIHx8IGVtcHR5XG59O1xuXG5EZWNvcmF0aW9uU2V0LnByb3RvdHlwZS5lcSA9IGZ1bmN0aW9uIGVxIChvdGhlcikge1xuICBpZiAodGhpcyA9PSBvdGhlcikgeyByZXR1cm4gdHJ1ZSB9XG4gIGlmICghKG90aGVyIGluc3RhbmNlb2YgRGVjb3JhdGlvblNldCkgfHxcbiAgICAgIHRoaXMubG9jYWwubGVuZ3RoICE9IG90aGVyLmxvY2FsLmxlbmd0aCB8fFxuICAgICAgdGhpcy5jaGlsZHJlbi5sZW5ndGggIT0gb3RoZXIuY2hpbGRyZW4ubGVuZ3RoKSB7IHJldHVybiBmYWxzZSB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sb2NhbC5sZW5ndGg7IGkrKylcbiAgICB7IGlmICghdGhpcy5sb2NhbFtpXS5lcShvdGhlci5sb2NhbFtpXSkpIHsgcmV0dXJuIGZhbHNlIH0gfVxuICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSQxICs9IDMpXG4gICAgeyBpZiAodGhpcy5jaGlsZHJlbltpJDFdICE9IG90aGVyLmNoaWxkcmVuW2kkMV0gfHxcbiAgICAgICAgdGhpcy5jaGlsZHJlbltpJDEgKyAxXSAhPSBvdGhlci5jaGlsZHJlbltpJDEgKyAxXSB8fFxuICAgICAgICAhdGhpcy5jaGlsZHJlbltpJDEgKyAyXS5lcShvdGhlci5jaGlsZHJlbltpJDEgKyAyXSkpIHsgcmV0dXJuIGZhbHNlIH0gfVxuICByZXR1cm4gdHJ1ZVxufTtcblxuRGVjb3JhdGlvblNldC5wcm90b3R5cGUubG9jYWxzID0gZnVuY3Rpb24gbG9jYWxzIChub2RlKSB7XG4gIHJldHVybiByZW1vdmVPdmVybGFwKHRoaXMubG9jYWxzSW5uZXIobm9kZSkpXG59O1xuXG5EZWNvcmF0aW9uU2V0LnByb3RvdHlwZS5sb2NhbHNJbm5lciA9IGZ1bmN0aW9uIGxvY2Fsc0lubmVyIChub2RlKSB7XG4gIGlmICh0aGlzID09IGVtcHR5KSB7IHJldHVybiBub25lIH1cbiAgaWYgKG5vZGUuaW5saW5lQ29udGVudCB8fCAhdGhpcy5sb2NhbC5zb21lKElubGluZVR5cGUuaXMpKSB7IHJldHVybiB0aGlzLmxvY2FsIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubG9jYWwubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoISh0aGlzLmxvY2FsW2ldLnR5cGUgaW5zdGFuY2VvZiBJbmxpbmVUeXBlKSlcbiAgICAgIHsgcmVzdWx0LnB1c2godGhpcy5sb2NhbFtpXSk7IH1cbiAgfVxuICByZXR1cm4gcmVzdWx0XG59O1xuXG4vLyBEZWNvcmF0aW9uU291cmNlOjogaW50ZXJmYWNlXG4vLyBBbiBvYmplY3QgdGhhdCBjYW4gW3Byb3ZpZGVdKCN2aWV3LkVkaXRvclByb3BzLmRlY29yYXRpb25zKVxuLy8gZGVjb3JhdGlvbnMuIEltcGxlbWVudGVkIGJ5IFtgRGVjb3JhdGlvblNldGBdKCN2aWV3LkRlY29yYXRpb25TZXQpLFxuLy8gYW5kIHBhc3NlZCB0byBbbm9kZSB2aWV3c10oI3ZpZXcuRWRpdG9yUHJvcHMubm9kZVZpZXdzKS5cbi8vXG4vLyAgIG1hcDo6IChNYXBwaW5nLCBOb2RlKSDihpIgRGVjb3JhdGlvblNvdXJjZVxuLy8gICBNYXAgdGhlIHNldCBvZiBkZWNvcmF0aW9ucyBpbiByZXNwb25zZSB0byBhIGNoYW5nZSBpbiB0aGVcbi8vICAgZG9jdW1lbnQuXG5cbnZhciBlbXB0eSA9IG5ldyBEZWNvcmF0aW9uU2V0KCk7XG5cbi8vIDo6IERlY29yYXRpb25TZXRcbi8vIFRoZSBlbXB0eSBzZXQgb2YgZGVjb3JhdGlvbnMuXG5EZWNvcmF0aW9uU2V0LmVtcHR5ID0gZW1wdHk7XG5cbkRlY29yYXRpb25TZXQucmVtb3ZlT3ZlcmxhcCA9IHJlbW92ZU92ZXJsYXA7XG5cbi8vIDotIEFuIGFic3RyYWN0aW9uIHRoYXQgYWxsb3dzIHRoZSBjb2RlIGRlYWxpbmcgd2l0aCBkZWNvcmF0aW9ucyB0b1xuLy8gdHJlYXQgbXVsdGlwbGUgRGVjb3JhdGlvblNldCBvYmplY3RzIGFzIGlmIGl0IHdlcmUgYSBzaW5nbGUgb2JqZWN0XG4vLyB3aXRoIChhIHN1YnNldCBvZikgdGhlIHNhbWUgaW50ZXJmYWNlLlxudmFyIERlY29yYXRpb25Hcm91cCA9IGZ1bmN0aW9uIERlY29yYXRpb25Hcm91cChtZW1iZXJzKSB7XG4gIHRoaXMubWVtYmVycyA9IG1lbWJlcnM7XG59O1xuXG5EZWNvcmF0aW9uR3JvdXAucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIG1hcCAobWFwcGluZywgZG9jKSB7XG4gIHZhciBtYXBwZWREZWNvcyA9IHRoaXMubWVtYmVycy5tYXAoXG4gICAgZnVuY3Rpb24gKG1lbWJlcikgeyByZXR1cm4gbWVtYmVyLm1hcChtYXBwaW5nLCBkb2MsIG5vU3BlYyk7IH1cbiAgKTtcbiAgcmV0dXJuIERlY29yYXRpb25Hcm91cC5mcm9tKG1hcHBlZERlY29zKVxufTtcblxuRGVjb3JhdGlvbkdyb3VwLnByb3RvdHlwZS5mb3JDaGlsZCA9IGZ1bmN0aW9uIGZvckNoaWxkIChvZmZzZXQsIGNoaWxkKSB7XG4gIGlmIChjaGlsZC5pc0xlYWYpIHsgcmV0dXJuIERlY29yYXRpb25TZXQuZW1wdHkgfVxuICB2YXIgZm91bmQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1lbWJlcnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcy5tZW1iZXJzW2ldLmZvckNoaWxkKG9mZnNldCwgY2hpbGQpO1xuICAgIGlmIChyZXN1bHQgPT0gZW1wdHkpIHsgY29udGludWUgfVxuICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBEZWNvcmF0aW9uR3JvdXApIHsgZm91bmQgPSBmb3VuZC5jb25jYXQocmVzdWx0Lm1lbWJlcnMpOyB9XG4gICAgZWxzZSB7IGZvdW5kLnB1c2gocmVzdWx0KTsgfVxuICB9XG4gIHJldHVybiBEZWNvcmF0aW9uR3JvdXAuZnJvbShmb3VuZClcbn07XG5cbkRlY29yYXRpb25Hcm91cC5wcm90b3R5cGUuZXEgPSBmdW5jdGlvbiBlcSAob3RoZXIpIHtcbiAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBEZWNvcmF0aW9uR3JvdXApIHx8XG4gICAgICBvdGhlci5tZW1iZXJzLmxlbmd0aCAhPSB0aGlzLm1lbWJlcnMubGVuZ3RoKSB7IHJldHVybiBmYWxzZSB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tZW1iZXJzLmxlbmd0aDsgaSsrKVxuICAgIHsgaWYgKCF0aGlzLm1lbWJlcnNbaV0uZXEob3RoZXIubWVtYmVyc1tpXSkpIHsgcmV0dXJuIGZhbHNlIH0gfVxuICByZXR1cm4gdHJ1ZVxufTtcblxuRGVjb3JhdGlvbkdyb3VwLnByb3RvdHlwZS5sb2NhbHMgPSBmdW5jdGlvbiBsb2NhbHMgKG5vZGUpIHtcbiAgdmFyIHJlc3VsdCwgc29ydGVkID0gdHJ1ZTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1lbWJlcnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbG9jYWxzID0gdGhpcy5tZW1iZXJzW2ldLmxvY2Fsc0lubmVyKG5vZGUpO1xuICAgIGlmICghbG9jYWxzLmxlbmd0aCkgeyBjb250aW51ZSB9XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgIHJlc3VsdCA9IGxvY2FscztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHNvcnRlZCkge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuc2xpY2UoKTtcbiAgICAgICAgc29ydGVkID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxvY2Fscy5sZW5ndGg7IGorKykgeyByZXN1bHQucHVzaChsb2NhbHNbal0pOyB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQgPyByZW1vdmVPdmVybGFwKHNvcnRlZCA/IHJlc3VsdCA6IHJlc3VsdC5zb3J0KGJ5UG9zKSkgOiBub25lXG59O1xuXG4vLyA6IChbRGVjb3JhdGlvblNldF0pIOKGkiB1bmlvbjxEZWNvcmF0aW9uU2V0LCBEZWNvcmF0aW9uR3JvdXA+XG4vLyBDcmVhdGUgYSBncm91cCBmb3IgdGhlIGdpdmVuIGFycmF5IG9mIGRlY29yYXRpb24gc2V0cywgb3IgcmV0dXJuXG4vLyBhIHNpbmdsZSBzZXQgd2hlbiBwb3NzaWJsZS5cbkRlY29yYXRpb25Hcm91cC5mcm9tID0gZnVuY3Rpb24gZnJvbSAobWVtYmVycykge1xuICBzd2l0Y2ggKG1lbWJlcnMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZW1wdHlcbiAgICBjYXNlIDE6IHJldHVybiBtZW1iZXJzWzBdXG4gICAgZGVmYXVsdDogcmV0dXJuIG5ldyBEZWNvcmF0aW9uR3JvdXAobWVtYmVycylcbiAgfVxufTtcblxuZnVuY3Rpb24gbWFwQ2hpbGRyZW4ob2xkQ2hpbGRyZW4sIG5ld0xvY2FsLCBtYXBwaW5nLCBub2RlLCBvZmZzZXQsIG9sZE9mZnNldCwgb3B0aW9ucykge1xuICB2YXIgY2hpbGRyZW4gPSBvbGRDaGlsZHJlbi5zbGljZSgpO1xuXG4gIC8vIE1hcmsgdGhlIGNoaWxkcmVuIHRoYXQgYXJlIGRpcmVjdGx5IHRvdWNoZWQgYnkgY2hhbmdlcywgYW5kXG4gIC8vIG1vdmUgdGhvc2UgdGhhdCBhcmUgYWZ0ZXIgdGhlIGNoYW5nZXMuXG4gIHZhciBzaGlmdCA9IGZ1bmN0aW9uIChvbGRTdGFydCwgb2xkRW5kLCBuZXdTdGFydCwgbmV3RW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgdmFyIGVuZCA9IGNoaWxkcmVuW2kgKyAxXSwgZFNpemUgPSAodm9pZCAwKTtcbiAgICAgIGlmIChlbmQgPT0gLTEgfHwgb2xkU3RhcnQgPiBlbmQgKyBvbGRPZmZzZXQpIHsgY29udGludWUgfVxuICAgICAgaWYgKG9sZEVuZCA+PSBjaGlsZHJlbltpXSArIG9sZE9mZnNldCkge1xuICAgICAgICBjaGlsZHJlbltpICsgMV0gPSAtMTtcbiAgICAgIH0gZWxzZSBpZiAobmV3U3RhcnQgPj0gb2Zmc2V0ICYmIChkU2l6ZSA9IChuZXdFbmQgLSBuZXdTdGFydCkgLSAob2xkRW5kIC0gb2xkU3RhcnQpKSkge1xuICAgICAgICBjaGlsZHJlbltpXSArPSBkU2l6ZTtcbiAgICAgICAgY2hpbGRyZW5baSArIDFdICs9IGRTaXplO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXBwaW5nLm1hcHMubGVuZ3RoOyBpKyspIHsgbWFwcGluZy5tYXBzW2ldLmZvckVhY2goc2hpZnQpOyB9XG5cbiAgLy8gRmluZCB0aGUgY2hpbGQgbm9kZXMgdGhhdCBzdGlsbCBjb3JyZXNwb25kIHRvIGEgc2luZ2xlIG5vZGUsXG4gIC8vIHJlY3Vyc2l2ZWx5IGNhbGwgbWFwSW5uZXIgb24gdGhlbSBhbmQgdXBkYXRlIHRoZWlyIHBvc2l0aW9ucy5cbiAgdmFyIG11c3RSZWJ1aWxkID0gZmFsc2U7XG4gIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNoaWxkcmVuLmxlbmd0aDsgaSQxICs9IDMpIHsgaWYgKGNoaWxkcmVuW2kkMSArIDFdID09IC0xKSB7IC8vIFRvdWNoZWQgbm9kZXNcbiAgICB2YXIgZnJvbSA9IG1hcHBpbmcubWFwKG9sZENoaWxkcmVuW2kkMV0gKyBvbGRPZmZzZXQpLCBmcm9tTG9jYWwgPSBmcm9tIC0gb2Zmc2V0O1xuICAgIGlmIChmcm9tTG9jYWwgPCAwIHx8IGZyb21Mb2NhbCA+PSBub2RlLmNvbnRlbnQuc2l6ZSkge1xuICAgICAgbXVzdFJlYnVpbGQgPSB0cnVlO1xuICAgICAgY29udGludWVcbiAgICB9XG4gICAgLy8gTXVzdCByZWFkIG9sZENoaWxkcmVuIGJlY2F1c2UgY2hpbGRyZW4gd2FzIHRhZ2dlZCB3aXRoIC0xXG4gICAgdmFyIHRvID0gbWFwcGluZy5tYXAob2xkQ2hpbGRyZW5baSQxICsgMV0gKyBvbGRPZmZzZXQsIC0xKSwgdG9Mb2NhbCA9IHRvIC0gb2Zmc2V0O1xuICAgIHZhciByZWYgPSBub2RlLmNvbnRlbnQuZmluZEluZGV4KGZyb21Mb2NhbCk7XG4gICAgdmFyIGluZGV4ID0gcmVmLmluZGV4O1xuICAgIHZhciBjaGlsZE9mZnNldCA9IHJlZi5vZmZzZXQ7XG4gICAgdmFyIGNoaWxkTm9kZSA9IG5vZGUubWF5YmVDaGlsZChpbmRleCk7XG4gICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE9mZnNldCA9PSBmcm9tTG9jYWwgJiYgY2hpbGRPZmZzZXQgKyBjaGlsZE5vZGUubm9kZVNpemUgPT0gdG9Mb2NhbCkge1xuICAgICAgdmFyIG1hcHBlZCA9IGNoaWxkcmVuW2kkMSArIDJdLm1hcElubmVyKG1hcHBpbmcsIGNoaWxkTm9kZSwgZnJvbSArIDEsIG9sZENoaWxkcmVuW2kkMV0gKyBvbGRPZmZzZXQgKyAxLCBvcHRpb25zKTtcbiAgICAgIGlmIChtYXBwZWQgIT0gZW1wdHkpIHtcbiAgICAgICAgY2hpbGRyZW5baSQxXSA9IGZyb21Mb2NhbDtcbiAgICAgICAgY2hpbGRyZW5baSQxICsgMV0gPSB0b0xvY2FsO1xuICAgICAgICBjaGlsZHJlbltpJDEgKyAyXSA9IG1hcHBlZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoaWxkcmVuW2kkMSArIDFdID0gLTI7XG4gICAgICAgIG11c3RSZWJ1aWxkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbXVzdFJlYnVpbGQgPSB0cnVlO1xuICAgIH1cbiAgfSB9XG5cbiAgLy8gUmVtYWluaW5nIGNoaWxkcmVuIG11c3QgYmUgY29sbGVjdGVkIGFuZCByZWJ1aWx0IGludG8gdGhlIGFwcHJvcHJpYXRlIHN0cnVjdHVyZVxuICBpZiAobXVzdFJlYnVpbGQpIHtcbiAgICB2YXIgZGVjb3JhdGlvbnMgPSBtYXBBbmRHYXRoZXJSZW1haW5pbmdEZWNvcmF0aW9ucyhjaGlsZHJlbiwgb2xkQ2hpbGRyZW4sIG5ld0xvY2FsIHx8IFtdLCBtYXBwaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCwgb2xkT2Zmc2V0LCBvcHRpb25zKTtcbiAgICB2YXIgYnVpbHQgPSBidWlsZFRyZWUoZGVjb3JhdGlvbnMsIG5vZGUsIDAsIG9wdGlvbnMpO1xuICAgIG5ld0xvY2FsID0gYnVpbHQubG9jYWw7XG4gICAgZm9yICh2YXIgaSQyID0gMDsgaSQyIDwgY2hpbGRyZW4ubGVuZ3RoOyBpJDIgKz0gMykgeyBpZiAoY2hpbGRyZW5baSQyICsgMV0gPCAwKSB7XG4gICAgICBjaGlsZHJlbi5zcGxpY2UoaSQyLCAzKTtcbiAgICAgIGkkMiAtPSAzO1xuICAgIH0gfVxuICAgIGZvciAodmFyIGkkMyA9IDAsIGogPSAwOyBpJDMgPCBidWlsdC5jaGlsZHJlbi5sZW5ndGg7IGkkMyArPSAzKSB7XG4gICAgICB2YXIgZnJvbSQxID0gYnVpbHQuY2hpbGRyZW5baSQzXTtcbiAgICAgIHdoaWxlIChqIDwgY2hpbGRyZW4ubGVuZ3RoICYmIGNoaWxkcmVuW2pdIDwgZnJvbSQxKSB7IGogKz0gMzsgfVxuICAgICAgY2hpbGRyZW4uc3BsaWNlKGosIDAsIGJ1aWx0LmNoaWxkcmVuW2kkM10sIGJ1aWx0LmNoaWxkcmVuW2kkMyArIDFdLCBidWlsdC5jaGlsZHJlbltpJDMgKyAyXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBEZWNvcmF0aW9uU2V0KG5ld0xvY2FsICYmIG5ld0xvY2FsLnNvcnQoYnlQb3MpLCBjaGlsZHJlbilcbn1cblxuZnVuY3Rpb24gbW92ZVNwYW5zKHNwYW5zLCBvZmZzZXQpIHtcbiAgaWYgKCFvZmZzZXQgfHwgIXNwYW5zLmxlbmd0aCkgeyByZXR1cm4gc3BhbnMgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3BhbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc3BhbiA9IHNwYW5zW2ldO1xuICAgIHJlc3VsdC5wdXNoKG5ldyBEZWNvcmF0aW9uKHNwYW4uZnJvbSArIG9mZnNldCwgc3Bhbi50byArIG9mZnNldCwgc3Bhbi50eXBlKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBtYXBBbmRHYXRoZXJSZW1haW5pbmdEZWNvcmF0aW9ucyhjaGlsZHJlbiwgb2xkQ2hpbGRyZW4sIGRlY29yYXRpb25zLCBtYXBwaW5nLCBvZmZzZXQsIG9sZE9mZnNldCwgb3B0aW9ucykge1xuICAvLyBHYXRoZXIgYWxsIGRlY29yYXRpb25zIGZyb20gdGhlIHJlbWFpbmluZyBtYXJrZWQgY2hpbGRyZW5cbiAgZnVuY3Rpb24gZ2F0aGVyKHNldCwgb2xkT2Zmc2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXQubG9jYWwubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBtYXBwZWQgPSBzZXQubG9jYWxbaV0ubWFwKG1hcHBpbmcsIG9mZnNldCwgb2xkT2Zmc2V0KTtcbiAgICAgIGlmIChtYXBwZWQpIHsgZGVjb3JhdGlvbnMucHVzaChtYXBwZWQpOyB9XG4gICAgICBlbHNlIGlmIChvcHRpb25zLm9uUmVtb3ZlKSB7IG9wdGlvbnMub25SZW1vdmUoc2V0LmxvY2FsW2ldLnNwZWMpOyB9XG4gICAgfVxuICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHNldC5jaGlsZHJlbi5sZW5ndGg7IGkkMSArPSAzKVxuICAgICAgeyBnYXRoZXIoc2V0LmNoaWxkcmVuW2kkMSArIDJdLCBzZXQuY2hpbGRyZW5baSQxXSArIG9sZE9mZnNldCArIDEpOyB9XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkgKz0gMykgeyBpZiAoY2hpbGRyZW5baSArIDFdID09IC0xKVxuICAgIHsgZ2F0aGVyKGNoaWxkcmVuW2kgKyAyXSwgb2xkQ2hpbGRyZW5baV0gKyBvbGRPZmZzZXQgKyAxKTsgfSB9XG5cbiAgcmV0dXJuIGRlY29yYXRpb25zXG59XG5cbmZ1bmN0aW9uIHRha2VTcGFuc0Zvck5vZGUoc3BhbnMsIG5vZGUsIG9mZnNldCkge1xuICBpZiAobm9kZS5pc0xlYWYpIHsgcmV0dXJuIG51bGwgfVxuICB2YXIgZW5kID0gb2Zmc2V0ICsgbm9kZS5ub2RlU2l6ZSwgZm91bmQgPSBudWxsO1xuICBmb3IgKHZhciBpID0gMCwgc3BhbiA9ICh2b2lkIDApOyBpIDwgc3BhbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoKHNwYW4gPSBzcGFuc1tpXSkgJiYgc3Bhbi5mcm9tID4gb2Zmc2V0ICYmIHNwYW4udG8gPCBlbmQpIHtcbihmb3VuZCB8fCAoZm91bmQgPSBbXSkpLnB1c2goc3Bhbik7XG4gICAgICBzcGFuc1tpXSA9IG51bGw7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3VuZFxufVxuXG5mdW5jdGlvbiB3aXRob3V0TnVsbHMoYXJyYXkpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKVxuICAgIHsgaWYgKGFycmF5W2ldICE9IG51bGwpIHsgcmVzdWx0LnB1c2goYXJyYXlbaV0pOyB9IH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG4vLyA6IChbRGVjb3JhdGlvbl0sIE5vZGUsIG51bWJlcikg4oaSIERlY29yYXRpb25TZXRcbi8vIEJ1aWxkIHVwIGEgdHJlZSB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgc2V0IG9mIGRlY29yYXRpb25zLiBgb2Zmc2V0YFxuLy8gaXMgYSBiYXNlIG9mZnNldCB0aGF0IHNob3VsZCBiZSBzdWJ0cmFjdGVkIGZyb20gdGhlIGBmcm9tYCBhbmQgYHRvYFxuLy8gcG9zaXRpb25zIGluIHRoZSBzcGFucyAoc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIGFsbG9jYXRlIG5ldyBzcGFuc1xuLy8gZm9yIHJlY3Vyc2l2ZSBjYWxscykuXG5mdW5jdGlvbiBidWlsZFRyZWUoc3BhbnMsIG5vZGUsIG9mZnNldCwgb3B0aW9ucykge1xuICB2YXIgY2hpbGRyZW4gPSBbXSwgaGFzTnVsbHMgPSBmYWxzZTtcbiAgbm9kZS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZE5vZGUsIGxvY2FsU3RhcnQpIHtcbiAgICB2YXIgZm91bmQgPSB0YWtlU3BhbnNGb3JOb2RlKHNwYW5zLCBjaGlsZE5vZGUsIGxvY2FsU3RhcnQgKyBvZmZzZXQpO1xuICAgIGlmIChmb3VuZCkge1xuICAgICAgaGFzTnVsbHMgPSB0cnVlO1xuICAgICAgdmFyIHN1YnRyZWUgPSBidWlsZFRyZWUoZm91bmQsIGNoaWxkTm9kZSwgb2Zmc2V0ICsgbG9jYWxTdGFydCArIDEsIG9wdGlvbnMpO1xuICAgICAgaWYgKHN1YnRyZWUgIT0gZW1wdHkpXG4gICAgICAgIHsgY2hpbGRyZW4ucHVzaChsb2NhbFN0YXJ0LCBsb2NhbFN0YXJ0ICsgY2hpbGROb2RlLm5vZGVTaXplLCBzdWJ0cmVlKTsgfVxuICAgIH1cbiAgfSk7XG4gIHZhciBsb2NhbHMgPSBtb3ZlU3BhbnMoaGFzTnVsbHMgPyB3aXRob3V0TnVsbHMoc3BhbnMpIDogc3BhbnMsIC1vZmZzZXQpLnNvcnQoYnlQb3MpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxvY2Fscy5sZW5ndGg7IGkrKykgeyBpZiAoIWxvY2Fsc1tpXS50eXBlLnZhbGlkKG5vZGUsIGxvY2Fsc1tpXSkpIHtcbiAgICBpZiAob3B0aW9ucy5vblJlbW92ZSkgeyBvcHRpb25zLm9uUmVtb3ZlKGxvY2Fsc1tpXS5zcGVjKTsgfVxuICAgIGxvY2Fscy5zcGxpY2UoaS0tLCAxKTtcbiAgfSB9XG4gIHJldHVybiBsb2NhbHMubGVuZ3RoIHx8IGNoaWxkcmVuLmxlbmd0aCA/IG5ldyBEZWNvcmF0aW9uU2V0KGxvY2FscywgY2hpbGRyZW4pIDogZW1wdHlcbn1cblxuLy8gOiAoRGVjb3JhdGlvbiwgRGVjb3JhdGlvbikg4oaSIG51bWJlclxuLy8gVXNlZCB0byBzb3J0IGRlY29yYXRpb25zIHNvIHRoYXQgb25lcyB3aXRoIGEgbG93IHN0YXJ0IHBvc2l0aW9uXG4vLyBjb21lIGZpcnN0LCBhbmQgd2l0aGluIGEgc2V0IHdpdGggdGhlIHNhbWUgc3RhcnQgcG9zaXRpb24sIHRob3NlXG4vLyB3aXRoIGFuIHNtYWxsZXIgZW5kIHBvc2l0aW9uIGNvbWUgZmlyc3QuXG5mdW5jdGlvbiBieVBvcyhhLCBiKSB7XG4gIHJldHVybiBhLmZyb20gLSBiLmZyb20gfHwgYS50byAtIGIudG9cbn1cblxuLy8gOiAoW0RlY29yYXRpb25dKSDihpIgW0RlY29yYXRpb25dXG4vLyBTY2FuIGEgc29ydGVkIGFycmF5IG9mIGRlY29yYXRpb25zIGZvciBwYXJ0aWFsbHkgb3ZlcmxhcHBpbmcgc3BhbnMsXG4vLyBhbmQgc3BsaXQgdGhvc2Ugc28gdGhhdCBvbmx5IGZ1bGx5IG92ZXJsYXBwaW5nIHNwYW5zIGFyZSBsZWZ0ICh0b1xuLy8gbWFrZSBzdWJzZXF1ZW50IHJlbmRlcmluZyBlYXNpZXIpLiBXaWxsIHJldHVybiB0aGUgaW5wdXQgYXJyYXkgaWZcbi8vIG5vIHBhcnRpYWxseSBvdmVybGFwcGluZyBzcGFucyBhcmUgZm91bmQgKHRoZSBjb21tb24gY2FzZSkuXG5mdW5jdGlvbiByZW1vdmVPdmVybGFwKHNwYW5zKSB7XG4gIHZhciB3b3JraW5nID0gc3BhbnM7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgd29ya2luZy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICB2YXIgc3BhbiA9IHdvcmtpbmdbaV07XG4gICAgaWYgKHNwYW4uZnJvbSAhPSBzcGFuLnRvKSB7IGZvciAodmFyIGogPSBpICsgMTsgaiA8IHdvcmtpbmcubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBuZXh0ID0gd29ya2luZ1tqXTtcbiAgICAgIGlmIChuZXh0LmZyb20gPT0gc3Bhbi5mcm9tKSB7XG4gICAgICAgIGlmIChuZXh0LnRvICE9IHNwYW4udG8pIHtcbiAgICAgICAgICBpZiAod29ya2luZyA9PSBzcGFucykgeyB3b3JraW5nID0gc3BhbnMuc2xpY2UoKTsgfVxuICAgICAgICAgIC8vIEZvbGxvd2VkIGJ5IGEgcGFydGlhbGx5IG92ZXJsYXBwaW5nIGxhcmdlciBzcGFuLiBTcGxpdCB0aGF0XG4gICAgICAgICAgLy8gc3Bhbi5cbiAgICAgICAgICB3b3JraW5nW2pdID0gbmV4dC5jb3B5KG5leHQuZnJvbSwgc3Bhbi50byk7XG4gICAgICAgICAgaW5zZXJ0QWhlYWQod29ya2luZywgaiArIDEsIG5leHQuY29weShzcGFuLnRvLCBuZXh0LnRvKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29udGludWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChuZXh0LmZyb20gPCBzcGFuLnRvKSB7XG4gICAgICAgICAgaWYgKHdvcmtpbmcgPT0gc3BhbnMpIHsgd29ya2luZyA9IHNwYW5zLnNsaWNlKCk7IH1cbiAgICAgICAgICAvLyBUaGUgZW5kIG9mIHRoaXMgb25lIG92ZXJsYXBzIHdpdGggYSBzdWJzZXF1ZW50IHNwYW4uIFNwbGl0XG4gICAgICAgICAgLy8gdGhpcyBvbmUuXG4gICAgICAgICAgd29ya2luZ1tpXSA9IHNwYW4uY29weShzcGFuLmZyb20sIG5leHQuZnJvbSk7XG4gICAgICAgICAgaW5zZXJ0QWhlYWQod29ya2luZywgaiwgc3Bhbi5jb3B5KG5leHQuZnJvbSwgc3Bhbi50bykpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfSB9XG4gIH1cbiAgcmV0dXJuIHdvcmtpbmdcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QWhlYWQoYXJyYXksIGksIGRlY28pIHtcbiAgd2hpbGUgKGkgPCBhcnJheS5sZW5ndGggJiYgYnlQb3MoZGVjbywgYXJyYXlbaV0pID4gMCkgeyBpKys7IH1cbiAgYXJyYXkuc3BsaWNlKGksIDAsIGRlY28pO1xufVxuXG4vLyA6IChFZGl0b3JWaWV3KSDihpIgdW5pb248RGVjb3JhdGlvblNldCwgRGVjb3JhdGlvbkdyb3VwPlxuLy8gR2V0IHRoZSBkZWNvcmF0aW9ucyBhc3NvY2lhdGVkIHdpdGggdGhlIGN1cnJlbnQgcHJvcHMgb2YgYSB2aWV3LlxuZnVuY3Rpb24gdmlld0RlY29yYXRpb25zKHZpZXcpIHtcbiAgdmFyIGZvdW5kID0gW107XG4gIHZpZXcuc29tZVByb3AoXCJkZWNvcmF0aW9uc1wiLCBmdW5jdGlvbiAoZikge1xuICAgIHZhciByZXN1bHQgPSBmKHZpZXcuc3RhdGUpO1xuICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0ICE9IGVtcHR5KSB7IGZvdW5kLnB1c2gocmVzdWx0KTsgfVxuICB9KTtcbiAgaWYgKHZpZXcuY3Vyc29yV3JhcHBlcilcbiAgICB7IGZvdW5kLnB1c2goRGVjb3JhdGlvblNldC5jcmVhdGUodmlldy5zdGF0ZS5kb2MsIFt2aWV3LmN1cnNvcldyYXBwZXIuZGVjb10pKTsgfVxuICByZXR1cm4gRGVjb3JhdGlvbkdyb3VwLmZyb20oZm91bmQpXG59XG5cbi8vIDo6LSBBbiBlZGl0b3IgdmlldyBtYW5hZ2VzIHRoZSBET00gc3RydWN0dXJlIHRoYXQgcmVwcmVzZW50cyBhblxuLy8gZWRpdGFibGUgZG9jdW1lbnQuIEl0cyBzdGF0ZSBhbmQgYmVoYXZpb3IgYXJlIGRldGVybWluZWQgYnkgaXRzXG4vLyBbcHJvcHNdKCN2aWV3LkRpcmVjdEVkaXRvclByb3BzKS5cbnZhciBFZGl0b3JWaWV3ID0gZnVuY3Rpb24gRWRpdG9yVmlldyhwbGFjZSwgcHJvcHMpIHtcbiAgdGhpcy5fcHJvcHMgPSBwcm9wcztcbiAgLy8gOjogRWRpdG9yU3RhdGVcbiAgLy8gVGhlIHZpZXcncyBjdXJyZW50IFtzdGF0ZV0oI3N0YXRlLkVkaXRvclN0YXRlKS5cbiAgdGhpcy5zdGF0ZSA9IHByb3BzLnN0YXRlO1xuXG4gIHRoaXMuZGlyZWN0UGx1Z2lucyA9IHByb3BzLnBsdWdpbnMgfHwgW107XG4gIHRoaXMuZGlyZWN0UGx1Z2lucy5mb3JFYWNoKGNoZWNrU3RhdGVDb21wb25lbnQpO1xuXG4gIHRoaXMuZGlzcGF0Y2ggPSB0aGlzLmRpc3BhdGNoLmJpbmQodGhpcyk7XG5cbiAgdGhpcy5fcm9vdCA9IG51bGw7XG4gIHRoaXMuZm9jdXNlZCA9IGZhbHNlO1xuICAvLyBLbHVkZ2UgdXNlZCB0byB3b3JrIGFyb3VuZCBhIENocm9tZSBidWdcbiAgdGhpcy50cmFja1dyaXRlcyA9IG51bGw7XG5cbiAgLy8gOjogZG9tLkVsZW1lbnRcbiAgLy8gQW4gZWRpdGFibGUgRE9NIG5vZGUgY29udGFpbmluZyB0aGUgZG9jdW1lbnQuIChZb3UgcHJvYmFibHlcbiAgLy8gc2hvdWxkIG5vdCBkaXJlY3RseSBpbnRlcmZlcmUgd2l0aCBpdHMgY29udGVudC4pXG4gIHRoaXMuZG9tID0gKHBsYWNlICYmIHBsYWNlLm1vdW50KSB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBpZiAocGxhY2UpIHtcbiAgICBpZiAocGxhY2UuYXBwZW5kQ2hpbGQpIHsgcGxhY2UuYXBwZW5kQ2hpbGQodGhpcy5kb20pOyB9XG4gICAgZWxzZSBpZiAocGxhY2UuYXBwbHkpIHsgcGxhY2UodGhpcy5kb20pOyB9XG4gICAgZWxzZSBpZiAocGxhY2UubW91bnQpIHsgdGhpcy5tb3VudGVkID0gdHJ1ZTsgfVxuICB9XG5cbiAgLy8gOjogYm9vbFxuICAvLyBJbmRpY2F0ZXMgd2hldGhlciB0aGUgZWRpdG9yIGlzIGN1cnJlbnRseSBbZWRpdGFibGVdKCN2aWV3LkVkaXRvclByb3BzLmVkaXRhYmxlKS5cbiAgdGhpcy5lZGl0YWJsZSA9IGdldEVkaXRhYmxlKHRoaXMpO1xuICB0aGlzLm1hcmtDdXJzb3IgPSBudWxsO1xuICB0aGlzLmN1cnNvcldyYXBwZXIgPSBudWxsO1xuICB1cGRhdGVDdXJzb3JXcmFwcGVyKHRoaXMpO1xuICB0aGlzLm5vZGVWaWV3cyA9IGJ1aWxkTm9kZVZpZXdzKHRoaXMpO1xuICB0aGlzLmRvY1ZpZXcgPSBkb2NWaWV3RGVzYyh0aGlzLnN0YXRlLmRvYywgY29tcHV0ZURvY0RlY28odGhpcyksIHZpZXdEZWNvcmF0aW9ucyh0aGlzKSwgdGhpcy5kb20sIHRoaXMpO1xuXG4gIHRoaXMubGFzdFNlbGVjdGVkVmlld0Rlc2MgPSBudWxsO1xuICAvLyA6OiA/e3NsaWNlOiBTbGljZSwgbW92ZTogYm9vbH1cbiAgLy8gV2hlbiBlZGl0b3IgY29udGVudCBpcyBiZWluZyBkcmFnZ2VkLCB0aGlzIG9iamVjdCBjb250YWluc1xuICAvLyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgZHJhZ2dlZCBzbGljZSBhbmQgd2hldGhlciBpdCBpcyBiZWluZ1xuICAvLyBjb3BpZWQgb3IgbW92ZWQuIEF0IGFueSBvdGhlciB0aW1lLCBpdCBpcyBudWxsLlxuICB0aGlzLmRyYWdnaW5nID0gbnVsbDtcblxuICBpbml0SW5wdXQodGhpcyk7XG5cbiAgdGhpcy5wcmV2RGlyZWN0UGx1Z2lucyA9IFtdO1xuICB0aGlzLnBsdWdpblZpZXdzID0gW107XG4gIHRoaXMudXBkYXRlUGx1Z2luVmlld3MoKTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMkMiA9IHsgcHJvcHM6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0scm9vdDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyBjb21wb3Npbmc6OiBib29sZWFuXG4vLyBIb2xkcyBgdHJ1ZWAgd2hlbiBhXG4vLyBbY29tcG9zaXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvTW96aWxsYS9JTUVfaGFuZGxpbmdfZ3VpZGUpXG4vLyBpcyBhY3RpdmUuXG5cbi8vIDo6IERpcmVjdEVkaXRvclByb3BzXG4vLyBUaGUgdmlldydzIGN1cnJlbnQgW3Byb3BzXSgjdmlldy5FZGl0b3JQcm9wcykuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMi5wcm9wcy5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0aGlzLl9wcm9wcy5zdGF0ZSAhPSB0aGlzLnN0YXRlKSB7XG4gICAgdmFyIHByZXYgPSB0aGlzLl9wcm9wcztcbiAgICB0aGlzLl9wcm9wcyA9IHt9O1xuICAgIGZvciAodmFyIG5hbWUgaW4gcHJldikgeyB0aGlzLl9wcm9wc1tuYW1lXSA9IHByZXZbbmFtZV07IH1cbiAgICB0aGlzLl9wcm9wcy5zdGF0ZSA9IHRoaXMuc3RhdGU7XG4gIH1cbiAgcmV0dXJuIHRoaXMuX3Byb3BzXG59O1xuXG4vLyA6OiAoRGlyZWN0RWRpdG9yUHJvcHMpXG4vLyBVcGRhdGUgdGhlIHZpZXcncyBwcm9wcy4gV2lsbCBpbW1lZGlhdGVseSBjYXVzZSBhbiB1cGRhdGUgdG9cbi8vIHRoZSBET00uXG5FZGl0b3JWaWV3LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKHByb3BzKSB7XG4gIGlmIChwcm9wcy5oYW5kbGVET01FdmVudHMgIT0gdGhpcy5fcHJvcHMuaGFuZGxlRE9NRXZlbnRzKSB7IGVuc3VyZUxpc3RlbmVycyh0aGlzKTsgfVxuICB0aGlzLl9wcm9wcyA9IHByb3BzO1xuICBpZiAocHJvcHMucGx1Z2lucykge1xuICAgIHByb3BzLnBsdWdpbnMuZm9yRWFjaChjaGVja1N0YXRlQ29tcG9uZW50KTtcbiAgICB0aGlzLmRpcmVjdFBsdWdpbnMgPSBwcm9wcy5wbHVnaW5zO1xuICB9XG4gIHRoaXMudXBkYXRlU3RhdGVJbm5lcihwcm9wcy5zdGF0ZSwgdHJ1ZSk7XG59O1xuXG4vLyA6OiAoRGlyZWN0RWRpdG9yUHJvcHMpXG4vLyBVcGRhdGUgdGhlIHZpZXcgYnkgdXBkYXRpbmcgZXhpc3RpbmcgcHJvcHMgb2JqZWN0IHdpdGggdGhlIG9iamVjdFxuLy8gZ2l2ZW4gYXMgYXJndW1lbnQuIEVxdWl2YWxlbnQgdG8gYHZpZXcudXBkYXRlKE9iamVjdC5hc3NpZ24oe30sXG4vLyB2aWV3LnByb3BzLCBwcm9wcykpYC5cbkVkaXRvclZpZXcucHJvdG90eXBlLnNldFByb3BzID0gZnVuY3Rpb24gc2V0UHJvcHMgKHByb3BzKSB7XG4gIHZhciB1cGRhdGVkID0ge307XG4gIGZvciAodmFyIG5hbWUgaW4gdGhpcy5fcHJvcHMpIHsgdXBkYXRlZFtuYW1lXSA9IHRoaXMuX3Byb3BzW25hbWVdOyB9XG4gIHVwZGF0ZWQuc3RhdGUgPSB0aGlzLnN0YXRlO1xuICBmb3IgKHZhciBuYW1lJDEgaW4gcHJvcHMpIHsgdXBkYXRlZFtuYW1lJDFdID0gcHJvcHNbbmFtZSQxXTsgfVxuICB0aGlzLnVwZGF0ZSh1cGRhdGVkKTtcbn07XG5cbi8vIDo6IChFZGl0b3JTdGF0ZSlcbi8vIFVwZGF0ZSB0aGUgZWRpdG9yJ3MgYHN0YXRlYCBwcm9wLCB3aXRob3V0IHRvdWNoaW5nIGFueSBvZiB0aGVcbi8vIG90aGVyIHByb3BzLlxuRWRpdG9yVmlldy5wcm90b3R5cGUudXBkYXRlU3RhdGUgPSBmdW5jdGlvbiB1cGRhdGVTdGF0ZSAoc3RhdGUpIHtcbiAgdGhpcy51cGRhdGVTdGF0ZUlubmVyKHN0YXRlLCB0aGlzLnN0YXRlLnBsdWdpbnMgIT0gc3RhdGUucGx1Z2lucyk7XG59O1xuXG5FZGl0b3JWaWV3LnByb3RvdHlwZS51cGRhdGVTdGF0ZUlubmVyID0gZnVuY3Rpb24gdXBkYXRlU3RhdGVJbm5lciAoc3RhdGUsIHJlY29uZmlndXJlZCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBwcmV2ID0gdGhpcy5zdGF0ZSwgcmVkcmF3ID0gZmFsc2UsIHVwZGF0ZVNlbCA9IGZhbHNlO1xuICAvLyBXaGVuIHN0b3JlZCBtYXJrcyBhcmUgYWRkZWQsIHN0b3AgY29tcG9zaXRpb24sIHNvIHRoYXQgdGhleSBjYW5cbiAgLy8gYmUgZGlzcGxheWVkLlxuICBpZiAoc3RhdGUuc3RvcmVkTWFya3MgJiYgdGhpcy5jb21wb3NpbmcpIHtcbiAgICBjbGVhckNvbXBvc2l0aW9uKHRoaXMpO1xuICAgIHVwZGF0ZVNlbCA9IHRydWU7XG4gIH1cbiAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICBpZiAocmVjb25maWd1cmVkKSB7XG4gICAgdmFyIG5vZGVWaWV3cyA9IGJ1aWxkTm9kZVZpZXdzKHRoaXMpO1xuICAgIGlmIChjaGFuZ2VkTm9kZVZpZXdzKG5vZGVWaWV3cywgdGhpcy5ub2RlVmlld3MpKSB7XG4gICAgICB0aGlzLm5vZGVWaWV3cyA9IG5vZGVWaWV3cztcbiAgICAgIHJlZHJhdyA9IHRydWU7XG4gICAgfVxuICAgIGVuc3VyZUxpc3RlbmVycyh0aGlzKTtcbiAgfVxuXG4gIHRoaXMuZWRpdGFibGUgPSBnZXRFZGl0YWJsZSh0aGlzKTtcbiAgdXBkYXRlQ3Vyc29yV3JhcHBlcih0aGlzKTtcbiAgdmFyIGlubmVyRGVjbyA9IHZpZXdEZWNvcmF0aW9ucyh0aGlzKSwgb3V0ZXJEZWNvID0gY29tcHV0ZURvY0RlY28odGhpcyk7XG5cbiAgdmFyIHNjcm9sbCA9IHJlY29uZmlndXJlZCA/IFwicmVzZXRcIlxuICAgICAgOiBzdGF0ZS5zY3JvbGxUb1NlbGVjdGlvbiA+IHByZXYuc2Nyb2xsVG9TZWxlY3Rpb24gPyBcInRvIHNlbGVjdGlvblwiIDogXCJwcmVzZXJ2ZVwiO1xuICB2YXIgdXBkYXRlRG9jID0gcmVkcmF3IHx8ICF0aGlzLmRvY1ZpZXcubWF0Y2hlc05vZGUoc3RhdGUuZG9jLCBvdXRlckRlY28sIGlubmVyRGVjbyk7XG4gIGlmICh1cGRhdGVEb2MgfHwgIXN0YXRlLnNlbGVjdGlvbi5lcShwcmV2LnNlbGVjdGlvbikpIHsgdXBkYXRlU2VsID0gdHJ1ZTsgfVxuICB2YXIgb2xkU2Nyb2xsUG9zID0gc2Nyb2xsID09IFwicHJlc2VydmVcIiAmJiB1cGRhdGVTZWwgJiYgdGhpcy5kb20uc3R5bGUub3ZlcmZsb3dBbmNob3IgPT0gbnVsbCAmJiBzdG9yZVNjcm9sbFBvcyh0aGlzKTtcblxuICBpZiAodXBkYXRlU2VsKSB7XG4gICAgdGhpcy5kb21PYnNlcnZlci5zdG9wKCk7XG4gICAgLy8gV29yayBhcm91bmQgYW4gaXNzdWUgaW4gQ2hyb21lLCBJRSwgYW5kIEVkZ2Ugd2hlcmUgY2hhbmdpbmdcbiAgICAvLyB0aGUgRE9NIGFyb3VuZCBhbiBhY3RpdmUgc2VsZWN0aW9uIHB1dHMgaXQgaW50byBhIGJyb2tlblxuICAgIC8vIHN0YXRlIHdoZXJlIHRoZSB0aGluZyB0aGUgdXNlciBzZWVzIGRpZmZlcnMgZnJvbSB0aGVcbiAgICAvLyBzZWxlY3Rpb24gcmVwb3J0ZWQgYnkgdGhlIFNlbGVjdGlvbiBvYmplY3QgKCM3MTAsICM5NzMsXG4gICAgLy8gIzEwMTEsICMxMDEzLCAjMTAzNSkuXG4gICAgdmFyIGZvcmNlU2VsVXBkYXRlID0gdXBkYXRlRG9jICYmIChyZXN1bHQuaWUgfHwgcmVzdWx0LmNocm9tZSkgJiYgIXRoaXMuY29tcG9zaW5nICYmXG4gICAgICAgICFwcmV2LnNlbGVjdGlvbi5lbXB0eSAmJiAhc3RhdGUuc2VsZWN0aW9uLmVtcHR5ICYmIHNlbGVjdGlvbkNvbnRleHRDaGFuZ2VkKHByZXYuc2VsZWN0aW9uLCBzdGF0ZS5zZWxlY3Rpb24pO1xuICAgIGlmICh1cGRhdGVEb2MpIHtcbiAgICAgIC8vIElmIHRoZSBub2RlIHRoYXQgdGhlIHNlbGVjdGlvbiBwb2ludHMgaW50byBpcyB3cml0dGVuIHRvLFxuICAgICAgLy8gQ2hyb21lIHNvbWV0aW1lcyBzdGFydHMgbWlzcmVwb3J0aW5nIHRoZSBzZWxlY3Rpb24sIHNvIHRoaXNcbiAgICAgIC8vIHRyYWNrcyB0aGF0IGFuZCBmb3JjZXMgYSBzZWxlY3Rpb24gcmVzZXQgd2hlbiBvdXIgdXBkYXRlXG4gICAgICAvLyBkaWQgd3JpdGUgdG8gdGhlIG5vZGUuXG4gICAgICB2YXIgY2hyb21lS2x1ZGdlID0gcmVzdWx0LmNocm9tZSA/ICh0aGlzLnRyYWNrV3JpdGVzID0gdGhpcy5yb290LmdldFNlbGVjdGlvbigpLmZvY3VzTm9kZSkgOiBudWxsO1xuICAgICAgaWYgKHJlZHJhdyB8fCAhdGhpcy5kb2NWaWV3LnVwZGF0ZShzdGF0ZS5kb2MsIG91dGVyRGVjbywgaW5uZXJEZWNvLCB0aGlzKSkge1xuICAgICAgICB0aGlzLmRvY1ZpZXcudXBkYXRlT3V0ZXJEZWNvKFtdKTtcbiAgICAgICAgdGhpcy5kb2NWaWV3LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5kb2NWaWV3ID0gZG9jVmlld0Rlc2Moc3RhdGUuZG9jLCBvdXRlckRlY28sIGlubmVyRGVjbywgdGhpcy5kb20sIHRoaXMpO1xuICAgICAgfVxuICAgICAgaWYgKGNocm9tZUtsdWRnZSAmJiAhdGhpcy50cmFja1dyaXRlcykgeyBmb3JjZVNlbFVwZGF0ZSA9IHRydWU7IH1cbiAgICB9XG4gICAgLy8gV29yayBhcm91bmQgZm9yIGFuIGlzc3VlIHdoZXJlIGFuIHVwZGF0ZSBhcnJpdmluZyByaWdodCBiZXR3ZWVuXG4gICAgLy8gYSBET00gc2VsZWN0aW9uIGNoYW5nZSBhbmQgdGhlIFwic2VsZWN0aW9uY2hhbmdlXCIgZXZlbnQgZm9yIGl0XG4gICAgLy8gY2FuIGNhdXNlIGEgc3B1cmlvdXMgRE9NIHNlbGVjdGlvbiB1cGRhdGUsIGRpc3J1cHRpbmcgbW91c2VcbiAgICAvLyBkcmFnIHNlbGVjdGlvbi5cbiAgICBpZiAoZm9yY2VTZWxVcGRhdGUgfHxcbiAgICAgICAgISh0aGlzLm1vdXNlRG93biAmJiB0aGlzLmRvbU9ic2VydmVyLmN1cnJlbnRTZWxlY3Rpb24uZXEodGhpcy5yb290LmdldFNlbGVjdGlvbigpKSAmJiBhbmNob3JJblJpZ2h0UGxhY2UodGhpcykpKSB7XG4gICAgICBzZWxlY3Rpb25Ub0RPTSh0aGlzLCBmb3JjZVNlbFVwZGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN5bmNOb2RlU2VsZWN0aW9uKHRoaXMsIHN0YXRlLnNlbGVjdGlvbik7XG4gICAgICB0aGlzLmRvbU9ic2VydmVyLnNldEN1clNlbGVjdGlvbigpO1xuICAgIH1cbiAgICB0aGlzLmRvbU9ic2VydmVyLnN0YXJ0KCk7XG4gIH1cblxuICB0aGlzLnVwZGF0ZVBsdWdpblZpZXdzKHByZXYpO1xuXG4gIGlmIChzY3JvbGwgPT0gXCJyZXNldFwiKSB7XG4gICAgdGhpcy5kb20uc2Nyb2xsVG9wID0gMDtcbiAgfSBlbHNlIGlmIChzY3JvbGwgPT0gXCJ0byBzZWxlY3Rpb25cIikge1xuICAgIHZhciBzdGFydERPTSA9IHRoaXMucm9vdC5nZXRTZWxlY3Rpb24oKS5mb2N1c05vZGU7XG4gICAgaWYgKHRoaXMuc29tZVByb3AoXCJoYW5kbGVTY3JvbGxUb1NlbGVjdGlvblwiLCBmdW5jdGlvbiAoZikgeyByZXR1cm4gZih0aGlzJDEpOyB9KSlcbiAgICAgIDsgLy8gSGFuZGxlZFxuICAgIGVsc2UgaWYgKHN0YXRlLnNlbGVjdGlvbiBpbnN0YW5jZW9mIE5vZGVTZWxlY3Rpb24pXG4gICAgICB7IHNjcm9sbFJlY3RJbnRvVmlldyh0aGlzLCB0aGlzLmRvY1ZpZXcuZG9tQWZ0ZXJQb3Moc3RhdGUuc2VsZWN0aW9uLmZyb20pLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBzdGFydERPTSk7IH1cbiAgICBlbHNlXG4gICAgICB7IHNjcm9sbFJlY3RJbnRvVmlldyh0aGlzLCB0aGlzLmNvb3Jkc0F0UG9zKHN0YXRlLnNlbGVjdGlvbi5oZWFkLCAxKSwgc3RhcnRET00pOyB9XG4gIH0gZWxzZSBpZiAob2xkU2Nyb2xsUG9zKSB7XG4gICAgcmVzZXRTY3JvbGxQb3Mob2xkU2Nyb2xsUG9zKTtcbiAgfVxufTtcblxuRWRpdG9yVmlldy5wcm90b3R5cGUuZGVzdHJveVBsdWdpblZpZXdzID0gZnVuY3Rpb24gZGVzdHJveVBsdWdpblZpZXdzICgpIHtcbiAgdmFyIHZpZXc7XG4gIHdoaWxlICh2aWV3ID0gdGhpcy5wbHVnaW5WaWV3cy5wb3AoKSkgeyBpZiAodmlldy5kZXN0cm95KSB7IHZpZXcuZGVzdHJveSgpOyB9IH1cbn07XG5cbkVkaXRvclZpZXcucHJvdG90eXBlLnVwZGF0ZVBsdWdpblZpZXdzID0gZnVuY3Rpb24gdXBkYXRlUGx1Z2luVmlld3MgKHByZXZTdGF0ZSkge1xuICBpZiAoIXByZXZTdGF0ZSB8fCBwcmV2U3RhdGUucGx1Z2lucyAhPSB0aGlzLnN0YXRlLnBsdWdpbnMgfHwgdGhpcy5kaXJlY3RQbHVnaW5zICE9IHRoaXMucHJldkRpcmVjdFBsdWdpbnMpIHtcbiAgICB0aGlzLnByZXZEaXJlY3RQbHVnaW5zID0gdGhpcy5kaXJlY3RQbHVnaW5zO1xuICAgIHRoaXMuZGVzdHJveVBsdWdpblZpZXdzKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmRpcmVjdFBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBwbHVnaW4gPSB0aGlzLmRpcmVjdFBsdWdpbnNbaV07XG4gICAgICBpZiAocGx1Z2luLnNwZWMudmlldykgeyB0aGlzLnBsdWdpblZpZXdzLnB1c2gocGx1Z2luLnNwZWMudmlldyh0aGlzKSk7IH1cbiAgICB9XG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgdGhpcy5zdGF0ZS5wbHVnaW5zLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgIHZhciBwbHVnaW4kMSA9IHRoaXMuc3RhdGUucGx1Z2luc1tpJDFdO1xuICAgICAgaWYgKHBsdWdpbiQxLnNwZWMudmlldykgeyB0aGlzLnBsdWdpblZpZXdzLnB1c2gocGx1Z2luJDEuc3BlYy52aWV3KHRoaXMpKTsgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKHZhciBpJDIgPSAwOyBpJDIgPCB0aGlzLnBsdWdpblZpZXdzLmxlbmd0aDsgaSQyKyspIHtcbiAgICAgIHZhciBwbHVnaW5WaWV3ID0gdGhpcy5wbHVnaW5WaWV3c1tpJDJdO1xuICAgICAgaWYgKHBsdWdpblZpZXcudXBkYXRlKSB7IHBsdWdpblZpZXcudXBkYXRlKHRoaXMsIHByZXZTdGF0ZSk7IH1cbiAgICB9XG4gIH1cbn07XG5cbi8vIDo6IChzdHJpbmcsID8ocHJvcDogKikg4oaSICopIOKGkiAqXG4vLyBHb2VzIG92ZXIgdGhlIHZhbHVlcyBvZiBhIHByb3AsIGZpcnN0IHRob3NlIHByb3ZpZGVkIGRpcmVjdGx5LFxuLy8gdGhlbiB0aG9zZSBmcm9tIHBsdWdpbnMgZ2l2ZW4gdG8gdGhlIHZpZXcsIHRoZW4gZnJvbSBwbHVnaW5zIGluXG4vLyB0aGUgc3RhdGUgKGluIG9yZGVyKSwgYW5kIGNhbGxzIGBmYCBldmVyeSB0aW1lIGEgbm9uLXVuZGVmaW5lZFxuLy8gdmFsdWUgaXMgZm91bmQuIFdoZW4gYGZgIHJldHVybnMgYSB0cnV0aHkgdmFsdWUsIHRoYXQgaXNcbi8vIGltbWVkaWF0ZWx5IHJldHVybmVkLiBXaGVuIGBmYCBpc24ndCBwcm92aWRlZCwgaXQgaXMgdHJlYXRlZCBhc1xuLy8gdGhlIGlkZW50aXR5IGZ1bmN0aW9uICh0aGUgcHJvcCB2YWx1ZSBpcyByZXR1cm5lZCBkaXJlY3RseSkuXG5FZGl0b3JWaWV3LnByb3RvdHlwZS5zb21lUHJvcCA9IGZ1bmN0aW9uIHNvbWVQcm9wIChwcm9wTmFtZSwgZikge1xuICB2YXIgcHJvcCA9IHRoaXMuX3Byb3BzICYmIHRoaXMuX3Byb3BzW3Byb3BOYW1lXSwgdmFsdWU7XG4gIGlmIChwcm9wICE9IG51bGwgJiYgKHZhbHVlID0gZiA/IGYocHJvcCkgOiBwcm9wKSkgeyByZXR1cm4gdmFsdWUgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZGlyZWN0UGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwcm9wJDEgPSB0aGlzLmRpcmVjdFBsdWdpbnNbaV0ucHJvcHNbcHJvcE5hbWVdO1xuICAgIGlmIChwcm9wJDEgIT0gbnVsbCAmJiAodmFsdWUgPSBmID8gZihwcm9wJDEpIDogcHJvcCQxKSkgeyByZXR1cm4gdmFsdWUgfVxuICB9XG4gIHZhciBwbHVnaW5zID0gdGhpcy5zdGF0ZS5wbHVnaW5zO1xuICBpZiAocGx1Z2lucykgeyBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBwbHVnaW5zLmxlbmd0aDsgaSQxKyspIHtcbiAgICB2YXIgcHJvcCQyID0gcGx1Z2luc1tpJDFdLnByb3BzW3Byb3BOYW1lXTtcbiAgICBpZiAocHJvcCQyICE9IG51bGwgJiYgKHZhbHVlID0gZiA/IGYocHJvcCQyKSA6IHByb3AkMikpIHsgcmV0dXJuIHZhbHVlIH1cbiAgfSB9XG59O1xuXG4vLyA6OiAoKSDihpIgYm9vbFxuLy8gUXVlcnkgd2hldGhlciB0aGUgdmlldyBoYXMgZm9jdXMuXG5FZGl0b3JWaWV3LnByb3RvdHlwZS5oYXNGb2N1cyA9IGZ1bmN0aW9uIGhhc0ZvY3VzICgpIHtcbiAgcmV0dXJuIHRoaXMucm9vdC5hY3RpdmVFbGVtZW50ID09IHRoaXMuZG9tXG59O1xuXG4vLyA6OiAoKVxuLy8gRm9jdXMgdGhlIGVkaXRvci5cbkVkaXRvclZpZXcucHJvdG90eXBlLmZvY3VzID0gZnVuY3Rpb24gZm9jdXMgKCkge1xuICB0aGlzLmRvbU9ic2VydmVyLnN0b3AoKTtcbiAgaWYgKHRoaXMuZWRpdGFibGUpIHsgZm9jdXNQcmV2ZW50U2Nyb2xsKHRoaXMuZG9tKTsgfVxuICBzZWxlY3Rpb25Ub0RPTSh0aGlzKTtcbiAgdGhpcy5kb21PYnNlcnZlci5zdGFydCgpO1xufTtcblxuLy8gOjogdW5pb248ZG9tLkRvY3VtZW50LCBkb20uRG9jdW1lbnRGcmFnbWVudD5cbi8vIEdldCB0aGUgZG9jdW1lbnQgcm9vdCBpbiB3aGljaCB0aGUgZWRpdG9yIGV4aXN0cy4gVGhpcyB3aWxsXG4vLyB1c3VhbGx5IGJlIHRoZSB0b3AtbGV2ZWwgYGRvY3VtZW50YCwgYnV0IG1pZ2h0IGJlIGEgW3NoYWRvd1xuLy8gRE9NXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9XZWJfQ29tcG9uZW50cy9TaGFkb3dfRE9NKVxuLy8gcm9vdCBpZiB0aGUgZWRpdG9yIGlzIGluc2lkZSBvbmUuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMi5yb290LmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNhY2hlZCA9IHRoaXMuX3Jvb3Q7XG4gIGlmIChjYWNoZWQgPT0gbnVsbCkgeyBmb3IgKHZhciBzZWFyY2ggPSB0aGlzLmRvbS5wYXJlbnROb2RlOyBzZWFyY2g7IHNlYXJjaCA9IHNlYXJjaC5wYXJlbnROb2RlKSB7XG4gICAgaWYgKHNlYXJjaC5ub2RlVHlwZSA9PSA5IHx8IChzZWFyY2gubm9kZVR5cGUgPT0gMTEgJiYgc2VhcmNoLmhvc3QpKSB7XG4gICAgICBpZiAoIXNlYXJjaC5nZXRTZWxlY3Rpb24pIHsgT2JqZWN0LmdldFByb3RvdHlwZU9mKHNlYXJjaCkuZ2V0U2VsZWN0aW9uID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7IH07IH1cbiAgICAgIHJldHVybiB0aGlzLl9yb290ID0gc2VhcmNoXG4gICAgfVxuICB9IH1cbiAgcmV0dXJuIGNhY2hlZCB8fCBkb2N1bWVudFxufTtcblxuLy8gOjogKHtsZWZ0OiBudW1iZXIsIHRvcDogbnVtYmVyfSkg4oaSID97cG9zOiBudW1iZXIsIGluc2lkZTogbnVtYmVyfVxuLy8gR2l2ZW4gYSBwYWlyIG9mIHZpZXdwb3J0IGNvb3JkaW5hdGVzLCByZXR1cm4gdGhlIGRvY3VtZW50XG4vLyBwb3NpdGlvbiB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZW0uIE1heSByZXR1cm4gbnVsbCBpZiB0aGUgZ2l2ZW5cbi8vIGNvb3JkaW5hdGVzIGFyZW4ndCBpbnNpZGUgb2YgdGhlIGVkaXRvci4gV2hlbiBhbiBvYmplY3QgaXNcbi8vIHJldHVybmVkLCBpdHMgYHBvc2AgcHJvcGVydHkgaXMgdGhlIHBvc2l0aW9uIG5lYXJlc3QgdG8gdGhlXG4vLyBjb29yZGluYXRlcywgYW5kIGl0cyBgaW5zaWRlYCBwcm9wZXJ0eSBob2xkcyB0aGUgcG9zaXRpb24gb2YgdGhlXG4vLyBpbm5lciBub2RlIHRoYXQgdGhlIHBvc2l0aW9uIGZhbGxzIGluc2lkZSBvZiwgb3IgLTEgaWYgaXQgaXMgYXRcbi8vIHRoZSB0b3AgbGV2ZWwsIG5vdCBpbiBhbnkgbm9kZS5cbkVkaXRvclZpZXcucHJvdG90eXBlLnBvc0F0Q29vcmRzID0gZnVuY3Rpb24gcG9zQXRDb29yZHMkMSAoY29vcmRzKSB7XG4gIHJldHVybiBwb3NBdENvb3Jkcyh0aGlzLCBjb29yZHMpXG59O1xuXG4vLyA6OiAobnVtYmVyLCBudW1iZXIpIOKGkiB7bGVmdDogbnVtYmVyLCByaWdodDogbnVtYmVyLCB0b3A6IG51bWJlciwgYm90dG9tOiBudW1iZXJ9XG4vLyBSZXR1cm5zIHRoZSB2aWV3cG9ydCByZWN0YW5nbGUgYXQgYSBnaXZlbiBkb2N1bWVudCBwb3NpdGlvbi5cbi8vIGBsZWZ0YCBhbmQgYHJpZ2h0YCB3aWxsIGJlIHRoZSBzYW1lIG51bWJlciwgYXMgdGhpcyByZXR1cm5zIGFcbi8vIGZsYXQgY3Vyc29yLWlzaCByZWN0YW5nbGUuIElmIHRoZSBwb3NpdGlvbiBpcyBiZXR3ZWVuIHR3byB0aGluZ3Ncbi8vIHRoYXQgYXJlbid0IGRpcmVjdGx5IGFkamFjZW50LCBgc2lkZWAgZGV0ZXJtaW5lcyB3aGljaCBlbGVtZW50IGlzXG4vLyB1c2VkLiBXaGVuIDwgMCwgdGhlIGVsZW1lbnQgYmVmb3JlIHRoZSBwb3NpdGlvbiBpcyB1c2VkLFxuLy8gb3RoZXJ3aXNlIHRoZSBlbGVtZW50IGFmdGVyLlxuRWRpdG9yVmlldy5wcm90b3R5cGUuY29vcmRzQXRQb3MgPSBmdW5jdGlvbiBjb29yZHNBdFBvcyQxIChwb3MsIHNpZGUpIHtcbiAgICBpZiAoIHNpZGUgPT09IHZvaWQgMCApIHNpZGUgPSAxO1xuXG4gIHJldHVybiBjb29yZHNBdFBvcyh0aGlzLCBwb3MsIHNpZGUpXG59O1xuXG4vLyA6OiAobnVtYmVyLCBudW1iZXIpIOKGkiB7bm9kZTogZG9tLk5vZGUsIG9mZnNldDogbnVtYmVyfVxuLy8gRmluZCB0aGUgRE9NIHBvc2l0aW9uIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIGdpdmVuIGRvY3VtZW50XG4vLyBwb3NpdGlvbi4gV2hlbiBgc2lkZWAgaXMgbmVnYXRpdmUsIGZpbmQgdGhlIHBvc2l0aW9uIGFzIGNsb3NlIGFzXG4vLyBwb3NzaWJsZSB0byB0aGUgY29udGVudCBiZWZvcmUgdGhlIHBvc2l0aW9uLiBXaGVuIHBvc2l0aXZlLFxuLy8gcHJlZmVyIHBvc2l0aW9ucyBjbG9zZSB0byB0aGUgY29udGVudCBhZnRlciB0aGUgcG9zaXRpb24uIFdoZW5cbi8vIHplcm8sIHByZWZlciBhcyBzaGFsbG93IGEgcG9zaXRpb24gYXMgcG9zc2libGUuXG4vL1xuLy8gTm90ZSB0aGF0IHlvdSBzaG91bGQgKipub3QqKiBtdXRhdGUgdGhlIGVkaXRvcidzIGludGVybmFsIERPTSxcbi8vIG9ubHkgaW5zcGVjdCBpdCAoYW5kIGV2ZW4gdGhhdCBpcyB1c3VhbGx5IG5vdCBuZWNlc3NhcnkpLlxuRWRpdG9yVmlldy5wcm90b3R5cGUuZG9tQXRQb3MgPSBmdW5jdGlvbiBkb21BdFBvcyAocG9zLCBzaWRlKSB7XG4gICAgaWYgKCBzaWRlID09PSB2b2lkIDAgKSBzaWRlID0gMDtcblxuICByZXR1cm4gdGhpcy5kb2NWaWV3LmRvbUZyb21Qb3MocG9zLCBzaWRlKVxufTtcblxuLy8gOjogKG51bWJlcikg4oaSID9kb20uTm9kZVxuLy8gRmluZCB0aGUgRE9NIG5vZGUgdGhhdCByZXByZXNlbnRzIHRoZSBkb2N1bWVudCBub2RlIGFmdGVyIHRoZVxuLy8gZ2l2ZW4gcG9zaXRpb24uIE1heSByZXR1cm4gYG51bGxgIHdoZW4gdGhlIHBvc2l0aW9uIGRvZXNuJ3QgcG9pbnRcbi8vIGluIGZyb250IG9mIGEgbm9kZSBvciBpZiB0aGUgbm9kZSBpcyBpbnNpZGUgYW4gb3BhcXVlIG5vZGUgdmlldy5cbi8vXG4vLyBUaGlzIGlzIGludGVuZGVkIHRvIGJlIGFibGUgdG8gY2FsbCB0aGluZ3MgbGlrZVxuLy8gYGdldEJvdW5kaW5nQ2xpZW50UmVjdGAgb24gdGhhdCBET00gbm9kZS4gRG8gKipub3QqKiBtdXRhdGUgdGhlXG4vLyBlZGl0b3IgRE9NIGRpcmVjdGx5LCBvciBhZGQgc3R5bGluZyB0aGlzIHdheSwgc2luY2UgdGhhdCB3aWxsIGJlXG4vLyBpbW1lZGlhdGVseSBvdmVycmlkZW4gYnkgdGhlIGVkaXRvciBhcyBpdCByZWRyYXdzIHRoZSBub2RlLlxuRWRpdG9yVmlldy5wcm90b3R5cGUubm9kZURPTSA9IGZ1bmN0aW9uIG5vZGVET00gKHBvcykge1xuICB2YXIgZGVzYyA9IHRoaXMuZG9jVmlldy5kZXNjQXQocG9zKTtcbiAgcmV0dXJuIGRlc2MgPyBkZXNjLm5vZGVET00gOiBudWxsXG59O1xuXG4vLyA6OiAoZG9tLk5vZGUsIG51bWJlciwgP251bWJlcikg4oaSIG51bWJlclxuLy8gRmluZCB0aGUgZG9jdW1lbnQgcG9zaXRpb24gdGhhdCBjb3JyZXNwb25kcyB0byBhIGdpdmVuIERPTVxuLy8gcG9zaXRpb24uIChXaGVuZXZlciBwb3NzaWJsZSwgaXQgaXMgcHJlZmVyYWJsZSB0byBpbnNwZWN0IHRoZVxuLy8gZG9jdW1lbnQgc3RydWN0dXJlIGRpcmVjdGx5LCByYXRoZXIgdGhhbiBwb2tpbmcgYXJvdW5kIGluIHRoZVxuLy8gRE9NLCBidXQgc29tZXRpbWVz4oCUZm9yIGV4YW1wbGUgd2hlbiBpbnRlcnByZXRpbmcgYW4gZXZlbnRcbi8vIHRhcmdldOKAlHlvdSBkb24ndCBoYXZlIGEgY2hvaWNlLilcbi8vXG4vLyBUaGUgYGJpYXNgIHBhcmFtZXRlciBjYW4gYmUgdXNlZCB0byBpbmZsdWVuY2Ugd2hpY2ggc2lkZSBvZiBhIERPTVxuLy8gbm9kZSB0byB1c2Ugd2hlbiB0aGUgcG9zaXRpb24gaXMgaW5zaWRlIGEgbGVhZiBub2RlLlxuRWRpdG9yVmlldy5wcm90b3R5cGUucG9zQXRET00gPSBmdW5jdGlvbiBwb3NBdERPTSAobm9kZSwgb2Zmc2V0LCBiaWFzKSB7XG4gICAgaWYgKCBiaWFzID09PSB2b2lkIDAgKSBiaWFzID0gLTE7XG5cbiAgdmFyIHBvcyA9IHRoaXMuZG9jVmlldy5wb3NGcm9tRE9NKG5vZGUsIG9mZnNldCwgYmlhcyk7XG4gIGlmIChwb3MgPT0gbnVsbCkgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIkRPTSBwb3NpdGlvbiBub3QgaW5zaWRlIHRoZSBlZGl0b3JcIikgfVxuICByZXR1cm4gcG9zXG59O1xuXG4vLyA6OiAodW5pb248XCJ1cFwiLCBcImRvd25cIiwgXCJsZWZ0XCIsIFwicmlnaHRcIiwgXCJmb3J3YXJkXCIsIFwiYmFja3dhcmRcIj4sID9FZGl0b3JTdGF0ZSkg4oaSIGJvb2xcbi8vIEZpbmQgb3V0IHdoZXRoZXIgdGhlIHNlbGVjdGlvbiBpcyBhdCB0aGUgZW5kIG9mIGEgdGV4dGJsb2NrIHdoZW5cbi8vIG1vdmluZyBpbiBhIGdpdmVuIGRpcmVjdGlvbi4gV2hlbiwgZm9yIGV4YW1wbGUsIGdpdmVuIGBcImxlZnRcImAsXG4vLyBpdCB3aWxsIHJldHVybiB0cnVlIGlmIG1vdmluZyBsZWZ0IGZyb20gdGhlIGN1cnJlbnQgY3Vyc29yXG4vLyBwb3NpdGlvbiB3b3VsZCBsZWF2ZSB0aGF0IHBvc2l0aW9uJ3MgcGFyZW50IHRleHRibG9jay4gV2lsbCBhcHBseVxuLy8gdG8gdGhlIHZpZXcncyBjdXJyZW50IHN0YXRlIGJ5IGRlZmF1bHQsIGJ1dCBpdCBpcyBwb3NzaWJsZSB0b1xuLy8gcGFzcyBhIGRpZmZlcmVudCBzdGF0ZS5cbkVkaXRvclZpZXcucHJvdG90eXBlLmVuZE9mVGV4dGJsb2NrID0gZnVuY3Rpb24gZW5kT2ZUZXh0YmxvY2skMSAoZGlyLCBzdGF0ZSkge1xuICByZXR1cm4gZW5kT2ZUZXh0YmxvY2sodGhpcywgc3RhdGUgfHwgdGhpcy5zdGF0ZSwgZGlyKVxufTtcblxuLy8gOjogKClcbi8vIFJlbW92ZXMgdGhlIGVkaXRvciBmcm9tIHRoZSBET00gYW5kIGRlc3Ryb3lzIGFsbCBbbm9kZVxuLy8gdmlld3NdKCN2aWV3Lk5vZGVWaWV3KS5cbkVkaXRvclZpZXcucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgaWYgKCF0aGlzLmRvY1ZpZXcpIHsgcmV0dXJuIH1cbiAgZGVzdHJveUlucHV0KHRoaXMpO1xuICB0aGlzLmRlc3Ryb3lQbHVnaW5WaWV3cygpO1xuICBpZiAodGhpcy5tb3VudGVkKSB7XG4gICAgdGhpcy5kb2NWaWV3LnVwZGF0ZSh0aGlzLnN0YXRlLmRvYywgW10sIHZpZXdEZWNvcmF0aW9ucyh0aGlzKSwgdGhpcyk7XG4gICAgdGhpcy5kb20udGV4dENvbnRlbnQgPSBcIlwiO1xuICB9IGVsc2UgaWYgKHRoaXMuZG9tLnBhcmVudE5vZGUpIHtcbiAgICB0aGlzLmRvbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZG9tKTtcbiAgfVxuICB0aGlzLmRvY1ZpZXcuZGVzdHJveSgpO1xuICB0aGlzLmRvY1ZpZXcgPSBudWxsO1xufTtcblxuLy8gVXNlZCBmb3IgdGVzdGluZy5cbkVkaXRvclZpZXcucHJvdG90eXBlLmRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiBkaXNwYXRjaEV2ZW50JDEgKGV2ZW50KSB7XG4gIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIGV2ZW50KVxufTtcblxuLy8gOjogKFRyYW5zYWN0aW9uKVxuLy8gRGlzcGF0Y2ggYSB0cmFuc2FjdGlvbi4gV2lsbCBjYWxsXG4vLyBbYGRpc3BhdGNoVHJhbnNhY3Rpb25gXSgjdmlldy5EaXJlY3RFZGl0b3JQcm9wcy5kaXNwYXRjaFRyYW5zYWN0aW9uKVxuLy8gd2hlbiBnaXZlbiwgYW5kIG90aGVyd2lzZSBkZWZhdWx0cyB0byBhcHBseWluZyB0aGUgdHJhbnNhY3Rpb24gdG9cbi8vIHRoZSBjdXJyZW50IHN0YXRlIGFuZCBjYWxsaW5nXG4vLyBbYHVwZGF0ZVN0YXRlYF0oI3ZpZXcuRWRpdG9yVmlldy51cGRhdGVTdGF0ZSkgd2l0aCB0aGUgcmVzdWx0LlxuLy8gVGhpcyBtZXRob2QgaXMgYm91bmQgdG8gdGhlIHZpZXcgaW5zdGFuY2UsIHNvIHRoYXQgaXQgY2FuIGJlXG4vLyBlYXNpbHkgcGFzc2VkIGFyb3VuZC5cbkVkaXRvclZpZXcucHJvdG90eXBlLmRpc3BhdGNoID0gZnVuY3Rpb24gZGlzcGF0Y2ggKHRyKSB7XG4gIHZhciBkaXNwYXRjaFRyYW5zYWN0aW9uID0gdGhpcy5fcHJvcHMuZGlzcGF0Y2hUcmFuc2FjdGlvbjtcbiAgaWYgKGRpc3BhdGNoVHJhbnNhY3Rpb24pIHsgZGlzcGF0Y2hUcmFuc2FjdGlvbi5jYWxsKHRoaXMsIHRyKTsgfVxuICBlbHNlIHsgdGhpcy51cGRhdGVTdGF0ZSh0aGlzLnN0YXRlLmFwcGx5KHRyKSk7IH1cbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBFZGl0b3JWaWV3LnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzJDIgKTtcblxuZnVuY3Rpb24gY29tcHV0ZURvY0RlY28odmlldykge1xuICB2YXIgYXR0cnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBhdHRycy5jbGFzcyA9IFwiUHJvc2VNaXJyb3JcIjtcbiAgYXR0cnMuY29udGVudGVkaXRhYmxlID0gU3RyaW5nKHZpZXcuZWRpdGFibGUpO1xuICBhdHRycy50cmFuc2xhdGUgPSBcIm5vXCI7XG5cbiAgdmlldy5zb21lUHJvcChcImF0dHJpYnV0ZXNcIiwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcImZ1bmN0aW9uXCIpIHsgdmFsdWUgPSB2YWx1ZSh2aWV3LnN0YXRlKTsgfVxuICAgIGlmICh2YWx1ZSkgeyBmb3IgKHZhciBhdHRyIGluIHZhbHVlKSB7XG4gICAgICBpZiAoYXR0ciA9PSBcImNsYXNzXCIpXG4gICAgICAgIHsgYXR0cnMuY2xhc3MgKz0gXCIgXCIgKyB2YWx1ZVthdHRyXTsgfVxuICAgICAgZWxzZSBpZiAoIWF0dHJzW2F0dHJdICYmIGF0dHIgIT0gXCJjb250ZW50ZWRpdGFibGVcIiAmJiBhdHRyICE9IFwibm9kZU5hbWVcIilcbiAgICAgICAgeyBhdHRyc1thdHRyXSA9IFN0cmluZyh2YWx1ZVthdHRyXSk7IH1cbiAgICB9IH1cbiAgfSk7XG5cbiAgcmV0dXJuIFtEZWNvcmF0aW9uLm5vZGUoMCwgdmlldy5zdGF0ZS5kb2MuY29udGVudC5zaXplLCBhdHRycyldXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUN1cnNvcldyYXBwZXIodmlldykge1xuICBpZiAodmlldy5tYXJrQ3Vyc29yKSB7XG4gICAgdmFyIGRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gICAgZG9tLmNsYXNzTmFtZSA9IFwiUHJvc2VNaXJyb3Itc2VwYXJhdG9yXCI7XG4gICAgZG9tLnNldEF0dHJpYnV0ZShcIm1hcmstcGxhY2Vob2xkZXJcIiwgXCJ0cnVlXCIpO1xuICAgIHZpZXcuY3Vyc29yV3JhcHBlciA9IHtkb206IGRvbSwgZGVjbzogRGVjb3JhdGlvbi53aWRnZXQodmlldy5zdGF0ZS5zZWxlY3Rpb24uaGVhZCwgZG9tLCB7cmF3OiB0cnVlLCBtYXJrczogdmlldy5tYXJrQ3Vyc29yfSl9O1xuICB9IGVsc2Uge1xuICAgIHZpZXcuY3Vyc29yV3JhcHBlciA9IG51bGw7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RWRpdGFibGUodmlldykge1xuICByZXR1cm4gIXZpZXcuc29tZVByb3AoXCJlZGl0YWJsZVwiLCBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHZhbHVlKHZpZXcuc3RhdGUpID09PSBmYWxzZTsgfSlcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uQ29udGV4dENoYW5nZWQoc2VsMSwgc2VsMikge1xuICB2YXIgZGVwdGggPSBNYXRoLm1pbihzZWwxLiRhbmNob3Iuc2hhcmVkRGVwdGgoc2VsMS5oZWFkKSwgc2VsMi4kYW5jaG9yLnNoYXJlZERlcHRoKHNlbDIuaGVhZCkpO1xuICByZXR1cm4gc2VsMS4kYW5jaG9yLnN0YXJ0KGRlcHRoKSAhPSBzZWwyLiRhbmNob3Iuc3RhcnQoZGVwdGgpXG59XG5cbmZ1bmN0aW9uIGJ1aWxkTm9kZVZpZXdzKHZpZXcpIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICB2aWV3LnNvbWVQcm9wKFwibm9kZVZpZXdzXCIsIGZ1bmN0aW9uIChvYmopIHtcbiAgICBmb3IgKHZhciBwcm9wIGluIG9iaikgeyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIHByb3ApKVxuICAgICAgeyByZXN1bHRbcHJvcF0gPSBvYmpbcHJvcF07IH0gfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBjaGFuZ2VkTm9kZVZpZXdzKGEsIGIpIHtcbiAgdmFyIG5BID0gMCwgbkIgPSAwO1xuICBmb3IgKHZhciBwcm9wIGluIGEpIHtcbiAgICBpZiAoYVtwcm9wXSAhPSBiW3Byb3BdKSB7IHJldHVybiB0cnVlIH1cbiAgICBuQSsrO1xuICB9XG4gIGZvciAodmFyIF8gaW4gYikgeyBuQisrOyB9XG4gIHJldHVybiBuQSAhPSBuQlxufVxuXG5mdW5jdGlvbiBjaGVja1N0YXRlQ29tcG9uZW50KHBsdWdpbikge1xuICBpZiAocGx1Z2luLnNwZWMuc3RhdGUgfHwgcGx1Z2luLnNwZWMuZmlsdGVyVHJhbnNhY3Rpb24gfHwgcGx1Z2luLnNwZWMuYXBwZW5kVHJhbnNhY3Rpb24pXG4gICAgeyB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlBsdWdpbnMgcGFzc2VkIGRpcmVjdGx5IHRvIHRoZSB2aWV3IG11c3Qgbm90IGhhdmUgYSBzdGF0ZSBjb21wb25lbnRcIikgfVxufVxuXG4vLyBFZGl0b3JQcm9wczo6IGludGVyZmFjZVxuLy9cbi8vIFByb3BzIGFyZSBjb25maWd1cmF0aW9uIHZhbHVlcyB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gYW4gZWRpdG9yIHZpZXdcbi8vIG9yIGluY2x1ZGVkIGluIGEgcGx1Z2luLiBUaGlzIGludGVyZmFjZSBsaXN0cyB0aGUgc3VwcG9ydGVkIHByb3BzLlxuLy9cbi8vIFRoZSB2YXJpb3VzIGV2ZW50LWhhbmRsaW5nIGZ1bmN0aW9ucyBtYXkgYWxsIHJldHVybiBgdHJ1ZWAgdG9cbi8vIGluZGljYXRlIHRoYXQgdGhleSBoYW5kbGVkIHRoZSBnaXZlbiBldmVudC4gVGhlIHZpZXcgd2lsbCB0aGVuIHRha2Vcbi8vIGNhcmUgdG8gY2FsbCBgcHJldmVudERlZmF1bHRgIG9uIHRoZSBldmVudCwgZXhjZXB0IHdpdGhcbi8vIGBoYW5kbGVET01FdmVudHNgLCB3aGVyZSB0aGUgaGFuZGxlciBpdHNlbGYgaXMgcmVzcG9uc2libGUgZm9yIHRoYXQuXG4vL1xuLy8gSG93IGEgcHJvcCBpcyByZXNvbHZlZCBkZXBlbmRzIG9uIHRoZSBwcm9wLiBIYW5kbGVyIGZ1bmN0aW9ucyBhcmVcbi8vIGNhbGxlZCBvbmUgYXQgYSB0aW1lLCBzdGFydGluZyB3aXRoIHRoZSBiYXNlIHByb3BzIGFuZCB0aGVuXG4vLyBzZWFyY2hpbmcgdGhyb3VnaCB0aGUgcGx1Z2lucyAoaW4gb3JkZXIgb2YgYXBwZWFyYW5jZSkgdW50aWwgb25lIG9mXG4vLyB0aGVtIHJldHVybnMgdHJ1ZS4gRm9yIHNvbWUgcHJvcHMsIHRoZSBmaXJzdCBwbHVnaW4gdGhhdCB5aWVsZHMgYVxuLy8gdmFsdWUgZ2V0cyBwcmVjZWRlbmNlLlxuLy9cbi8vICAgaGFuZGxlRE9NRXZlbnRzOjogP09iamVjdDwodmlldzogRWRpdG9yVmlldywgZXZlbnQ6IGRvbS5FdmVudCkg4oaSIGJvb2w+XG4vLyAgIENhbiBiZSBhbiBvYmplY3QgbWFwcGluZyBET00gZXZlbnQgdHlwZSBuYW1lcyB0byBmdW5jdGlvbnMgdGhhdFxuLy8gICBoYW5kbGUgdGhlbS4gU3VjaCBmdW5jdGlvbnMgd2lsbCBiZSBjYWxsZWQgYmVmb3JlIGFueSBoYW5kbGluZ1xuLy8gICBQcm9zZU1pcnJvciBkb2VzIG9mIGV2ZW50cyBmaXJlZCBvbiB0aGUgZWRpdGFibGUgRE9NIGVsZW1lbnQuXG4vLyAgIENvbnRyYXJ5IHRvIHRoZSBvdGhlciBldmVudCBoYW5kbGluZyBwcm9wcywgd2hlbiByZXR1cm5pbmcgdHJ1ZVxuLy8gICBmcm9tIHN1Y2ggYSBmdW5jdGlvbiwgeW91IGFyZSByZXNwb25zaWJsZSBmb3IgY2FsbGluZ1xuLy8gICBgcHJldmVudERlZmF1bHRgIHlvdXJzZWxmIChvciBub3QsIGlmIHlvdSB3YW50IHRvIGFsbG93IHRoZVxuLy8gICBkZWZhdWx0IGJlaGF2aW9yKS5cbi8vXG4vLyAgIGhhbmRsZUtleURvd246OiA/KHZpZXc6IEVkaXRvclZpZXcsIGV2ZW50OiBkb20uS2V5Ym9hcmRFdmVudCkg4oaSIGJvb2xcbi8vICAgQ2FsbGVkIHdoZW4gdGhlIGVkaXRvciByZWNlaXZlcyBhIGBrZXlkb3duYCBldmVudC5cbi8vXG4vLyAgIGhhbmRsZUtleVByZXNzOjogPyh2aWV3OiBFZGl0b3JWaWV3LCBldmVudDogZG9tLktleWJvYXJkRXZlbnQpIOKGkiBib29sXG4vLyAgIEhhbmRsZXIgZm9yIGBrZXlwcmVzc2AgZXZlbnRzLlxuLy9cbi8vICAgaGFuZGxlVGV4dElucHV0OjogPyh2aWV3OiBFZGl0b3JWaWV3LCBmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIsIHRleHQ6IHN0cmluZykg4oaSIGJvb2xcbi8vICAgV2hlbmV2ZXIgdGhlIHVzZXIgZGlyZWN0bHkgaW5wdXQgdGV4dCwgdGhpcyBoYW5kbGVyIGlzIGNhbGxlZFxuLy8gICBiZWZvcmUgdGhlIGlucHV0IGlzIGFwcGxpZWQuIElmIGl0IHJldHVybnMgYHRydWVgLCB0aGUgZGVmYXVsdFxuLy8gICBiZWhhdmlvciBvZiBhY3R1YWxseSBpbnNlcnRpbmcgdGhlIHRleHQgaXMgc3VwcHJlc3NlZC5cbi8vXG4vLyAgIGhhbmRsZUNsaWNrT246OiA/KHZpZXc6IEVkaXRvclZpZXcsIHBvczogbnVtYmVyLCBub2RlOiBOb2RlLCBub2RlUG9zOiBudW1iZXIsIGV2ZW50OiBkb20uTW91c2VFdmVudCwgZGlyZWN0OiBib29sKSDihpIgYm9vbFxuLy8gICBDYWxsZWQgZm9yIGVhY2ggbm9kZSBhcm91bmQgYSBjbGljaywgZnJvbSB0aGUgaW5zaWRlIG91dC4gVGhlXG4vLyAgIGBkaXJlY3RgIGZsYWcgd2lsbCBiZSB0cnVlIGZvciB0aGUgaW5uZXIgbm9kZS5cbi8vXG4vLyAgIGhhbmRsZUNsaWNrOjogPyh2aWV3OiBFZGl0b3JWaWV3LCBwb3M6IG51bWJlciwgZXZlbnQ6IGRvbS5Nb3VzZUV2ZW50KSDihpIgYm9vbFxuLy8gICBDYWxsZWQgd2hlbiB0aGUgZWRpdG9yIGlzIGNsaWNrZWQsIGFmdGVyIGBoYW5kbGVDbGlja09uYCBoYW5kbGVyc1xuLy8gICBoYXZlIGJlZW4gY2FsbGVkLlxuLy9cbi8vICAgaGFuZGxlRG91YmxlQ2xpY2tPbjo6ID8odmlldzogRWRpdG9yVmlldywgcG9zOiBudW1iZXIsIG5vZGU6IE5vZGUsIG5vZGVQb3M6IG51bWJlciwgZXZlbnQ6IGRvbS5Nb3VzZUV2ZW50LCBkaXJlY3Q6IGJvb2wpIOKGkiBib29sXG4vLyAgIENhbGxlZCBmb3IgZWFjaCBub2RlIGFyb3VuZCBhIGRvdWJsZSBjbGljay5cbi8vXG4vLyAgIGhhbmRsZURvdWJsZUNsaWNrOjogPyh2aWV3OiBFZGl0b3JWaWV3LCBwb3M6IG51bWJlciwgZXZlbnQ6IGRvbS5Nb3VzZUV2ZW50KSDihpIgYm9vbFxuLy8gICBDYWxsZWQgd2hlbiB0aGUgZWRpdG9yIGlzIGRvdWJsZS1jbGlja2VkLCBhZnRlciBgaGFuZGxlRG91YmxlQ2xpY2tPbmAuXG4vL1xuLy8gICBoYW5kbGVUcmlwbGVDbGlja09uOjogPyh2aWV3OiBFZGl0b3JWaWV3LCBwb3M6IG51bWJlciwgbm9kZTogTm9kZSwgbm9kZVBvczogbnVtYmVyLCBldmVudDogZG9tLk1vdXNlRXZlbnQsIGRpcmVjdDogYm9vbCkg4oaSIGJvb2xcbi8vICAgQ2FsbGVkIGZvciBlYWNoIG5vZGUgYXJvdW5kIGEgdHJpcGxlIGNsaWNrLlxuLy9cbi8vICAgaGFuZGxlVHJpcGxlQ2xpY2s6OiA/KHZpZXc6IEVkaXRvclZpZXcsIHBvczogbnVtYmVyLCBldmVudDogZG9tLk1vdXNlRXZlbnQpIOKGkiBib29sXG4vLyAgIENhbGxlZCB3aGVuIHRoZSBlZGl0b3IgaXMgdHJpcGxlLWNsaWNrZWQsIGFmdGVyIGBoYW5kbGVUcmlwbGVDbGlja09uYC5cbi8vXG4vLyAgIGhhbmRsZVBhc3RlOjogPyh2aWV3OiBFZGl0b3JWaWV3LCBldmVudDogZG9tLkNsaXBib2FyZEV2ZW50LCBzbGljZTogU2xpY2UpIOKGkiBib29sXG4vLyAgIENhbiBiZSB1c2VkIHRvIG92ZXJyaWRlIHRoZSBiZWhhdmlvciBvZiBwYXN0aW5nLiBgc2xpY2VgIGlzIHRoZVxuLy8gICBwYXN0ZWQgY29udGVudCBwYXJzZWQgYnkgdGhlIGVkaXRvciwgYnV0IHlvdSBjYW4gZGlyZWN0bHkgYWNjZXNzXG4vLyAgIHRoZSBldmVudCB0byBnZXQgYXQgdGhlIHJhdyBjb250ZW50LlxuLy9cbi8vICAgaGFuZGxlRHJvcDo6ID8odmlldzogRWRpdG9yVmlldywgZXZlbnQ6IGRvbS5FdmVudCwgc2xpY2U6IFNsaWNlLCBtb3ZlZDogYm9vbCkg4oaSIGJvb2xcbi8vICAgQ2FsbGVkIHdoZW4gc29tZXRoaW5nIGlzIGRyb3BwZWQgb24gdGhlIGVkaXRvci4gYG1vdmVkYCB3aWxsIGJlXG4vLyAgIHRydWUgaWYgdGhpcyBkcm9wIG1vdmVzIGZyb20gdGhlIGN1cnJlbnQgc2VsZWN0aW9uICh3aGljaCBzaG91bGRcbi8vICAgdGh1cyBiZSBkZWxldGVkKS5cbi8vXG4vLyAgIGhhbmRsZVNjcm9sbFRvU2VsZWN0aW9uOjogPyh2aWV3OiBFZGl0b3JWaWV3KSDihpIgYm9vbFxuLy8gICBDYWxsZWQgd2hlbiB0aGUgdmlldywgYWZ0ZXIgdXBkYXRpbmcgaXRzIHN0YXRlLCB0cmllcyB0byBzY3JvbGxcbi8vICAgdGhlIHNlbGVjdGlvbiBpbnRvIHZpZXcuIEEgaGFuZGxlciBmdW5jdGlvbiBtYXkgcmV0dXJuIGZhbHNlIHRvXG4vLyAgIGluZGljYXRlIHRoYXQgaXQgZGlkIG5vdCBoYW5kbGUgdGhlIHNjcm9sbGluZyBhbmQgZnVydGhlclxuLy8gICBoYW5kbGVycyBvciB0aGUgZGVmYXVsdCBiZWhhdmlvciBzaG91bGQgYmUgdHJpZWQuXG4vL1xuLy8gICBjcmVhdGVTZWxlY3Rpb25CZXR3ZWVuOjogPyh2aWV3OiBFZGl0b3JWaWV3LCBhbmNob3I6IFJlc29sdmVkUG9zLCBoZWFkOiBSZXNvbHZlZFBvcykg4oaSID9TZWxlY3Rpb25cbi8vICAgQ2FuIGJlIHVzZWQgdG8gb3ZlcnJpZGUgdGhlIHdheSBhIHNlbGVjdGlvbiBpcyBjcmVhdGVkIHdoZW5cbi8vICAgcmVhZGluZyBhIERPTSBzZWxlY3Rpb24gYmV0d2VlbiB0aGUgZ2l2ZW4gYW5jaG9yIGFuZCBoZWFkLlxuLy9cbi8vICAgZG9tUGFyc2VyOjogP0RPTVBhcnNlclxuLy8gICBUaGUgW3BhcnNlcl0oI21vZGVsLkRPTVBhcnNlcikgdG8gdXNlIHdoZW4gcmVhZGluZyBlZGl0b3IgY2hhbmdlc1xuLy8gICBmcm9tIHRoZSBET00uIERlZmF1bHRzIHRvIGNhbGxpbmdcbi8vICAgW2BET01QYXJzZXIuZnJvbVNjaGVtYWBdKCNtb2RlbC5ET01QYXJzZXJeZnJvbVNjaGVtYSkgb24gdGhlXG4vLyAgIGVkaXRvcidzIHNjaGVtYS5cbi8vXG4vLyAgIHRyYW5zZm9ybVBhc3RlZEhUTUw6OiA/KGh0bWw6IHN0cmluZykg4oaSIHN0cmluZ1xuLy8gICBDYW4gYmUgdXNlZCB0byB0cmFuc2Zvcm0gcGFzdGVkIEhUTUwgdGV4dCwgX2JlZm9yZV8gaXQgaXMgcGFyc2VkLFxuLy8gICBmb3IgZXhhbXBsZSB0byBjbGVhbiBpdCB1cC5cbi8vXG4vLyAgIGNsaXBib2FyZFBhcnNlcjo6ID9ET01QYXJzZXJcbi8vICAgVGhlIFtwYXJzZXJdKCNtb2RlbC5ET01QYXJzZXIpIHRvIHVzZSB3aGVuIHJlYWRpbmcgY29udGVudCBmcm9tXG4vLyAgIHRoZSBjbGlwYm9hcmQuIFdoZW4gbm90IGdpdmVuLCB0aGUgdmFsdWUgb2YgdGhlXG4vLyAgIFtgZG9tUGFyc2VyYF0oI3ZpZXcuRWRpdG9yUHJvcHMuZG9tUGFyc2VyKSBwcm9wIGlzIHVzZWQuXG4vL1xuLy8gICB0cmFuc2Zvcm1QYXN0ZWRUZXh0OjogPyh0ZXh0OiBzdHJpbmcsIHBsYWluOiBib29sKSDihpIgc3RyaW5nXG4vLyAgIFRyYW5zZm9ybSBwYXN0ZWQgcGxhaW4gdGV4dC4gVGhlIGBwbGFpbmAgZmxhZyB3aWxsIGJlIHRydWUgd2hlblxuLy8gICB0aGUgdGV4dCBpcyBwYXN0ZWQgYXMgcGxhaW4gdGV4dC5cbi8vXG4vLyAgIGNsaXBib2FyZFRleHRQYXJzZXI6OiA/KHRleHQ6IHN0cmluZywgJGNvbnRleHQ6IFJlc29sdmVkUG9zLCBwbGFpbjogYm9vbCkg4oaSIFNsaWNlXG4vLyAgIEEgZnVuY3Rpb24gdG8gcGFyc2UgdGV4dCBmcm9tIHRoZSBjbGlwYm9hcmQgaW50byBhIGRvY3VtZW50XG4vLyAgIHNsaWNlLiBDYWxsZWQgYWZ0ZXJcbi8vICAgW2B0cmFuc2Zvcm1QYXN0ZWRUZXh0YF0oI3ZpZXcuRWRpdG9yUHJvcHMudHJhbnNmb3JtUGFzdGVkVGV4dCkuXG4vLyAgIFRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHRvIHNwbGl0IHRoZSB0ZXh0IGludG8gbGluZXMsIHdyYXAgdGhlbVxuLy8gICBpbiBgPHA+YCB0YWdzLCBhbmQgY2FsbFxuLy8gICBbYGNsaXBib2FyZFBhcnNlcmBdKCN2aWV3LkVkaXRvclByb3BzLmNsaXBib2FyZFBhcnNlcikgb24gaXQuXG4vLyAgIFRoZSBgcGxhaW5gIGZsYWcgd2lsbCBiZSB0cnVlIHdoZW4gdGhlIHRleHQgaXMgcGFzdGVkIGFzIHBsYWluIHRleHQuXG4vL1xuLy8gICB0cmFuc2Zvcm1QYXN0ZWQ6OiA/KFNsaWNlKSDihpIgU2xpY2Vcbi8vICAgQ2FuIGJlIHVzZWQgdG8gdHJhbnNmb3JtIHBhc3RlZCBjb250ZW50IGJlZm9yZSBpdCBpcyBhcHBsaWVkIHRvXG4vLyAgIHRoZSBkb2N1bWVudC5cbi8vXG4vLyAgIG5vZGVWaWV3czo6ID9PYmplY3Q8KG5vZGU6IE5vZGUsIHZpZXc6IEVkaXRvclZpZXcsIGdldFBvczogKCkg4oaSIG51bWJlciwgZGVjb3JhdGlvbnM6IFtEZWNvcmF0aW9uXSwgaW5uZXJEZWNvcmF0aW9uczogRGVjb3JhdGlvblNvdXJjZSkg4oaSIE5vZGVWaWV3PlxuLy8gICBBbGxvd3MgeW91IHRvIHBhc3MgY3VzdG9tIHJlbmRlcmluZyBhbmQgYmVoYXZpb3IgbG9naWMgZm9yIG5vZGVzXG4vLyAgIGFuZCBtYXJrcy4gU2hvdWxkIG1hcCBub2RlIGFuZCBtYXJrIG5hbWVzIHRvIGNvbnN0cnVjdG9yXG4vLyAgIGZ1bmN0aW9ucyB0aGF0IHByb2R1Y2UgYSBbYE5vZGVWaWV3YF0oI3ZpZXcuTm9kZVZpZXcpIG9iamVjdFxuLy8gICBpbXBsZW1lbnRpbmcgdGhlIG5vZGUncyBkaXNwbGF5IGJlaGF2aW9yLiBGb3Igbm9kZXMsIHRoZSB0aGlyZFxuLy8gICBhcmd1bWVudCBgZ2V0UG9zYCBpcyBhIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIGNhbGxlZCB0byBnZXQgdGhlXG4vLyAgIG5vZGUncyBjdXJyZW50IHBvc2l0aW9uLCB3aGljaCBjYW4gYmUgdXNlZnVsIHdoZW4gY3JlYXRpbmdcbi8vICAgdHJhbnNhY3Rpb25zIHRvIHVwZGF0ZSBpdC4gRm9yIG1hcmtzLCB0aGUgdGhpcmQgYXJndW1lbnQgaXMgYVxuLy8gICBib29sZWFuIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgdGhlIG1hcmsncyBjb250ZW50IGlzIGlubGluZS5cbi8vXG4vLyAgIGBkZWNvcmF0aW9uc2AgaXMgYW4gYXJyYXkgb2Ygbm9kZSBvciBpbmxpbmUgZGVjb3JhdGlvbnMgdGhhdCBhcmVcbi8vICAgYWN0aXZlIGFyb3VuZCB0aGUgbm9kZS4gVGhleSBhcmUgYXV0b21hdGljYWxseSBkcmF3biBpbiB0aGVcbi8vICAgbm9ybWFsIHdheSwgYW5kIHlvdSB3aWxsIHVzdWFsbHkganVzdCB3YW50IHRvIGlnbm9yZSB0aGlzLCBidXRcbi8vICAgdGhleSBjYW4gYWxzbyBiZSB1c2VkIGFzIGEgd2F5IHRvIHByb3ZpZGUgY29udGV4dCBpbmZvcm1hdGlvbiB0b1xuLy8gICB0aGUgbm9kZSB2aWV3IHdpdGhvdXQgYWRkaW5nIGl0IHRvIHRoZSBkb2N1bWVudCBpdHNlbGYuXG4vL1xuLy8gICBgaW5uZXJEZWNvcmF0aW9uc2AgaG9sZHMgdGhlIGRlY29yYXRpb25zIGZvciB0aGUgbm9kZSdzIGNvbnRlbnQuXG4vLyAgIFlvdSBjYW4gc2FmZWx5IGlnbm9yZSB0aGlzIGlmIHlvdXIgdmlldyBoYXMgbm8gY29udGVudCBvciBhXG4vLyAgIGBjb250ZW50RE9NYCBwcm9wZXJ0eSwgc2luY2UgdGhlIGVkaXRvciB3aWxsIGRyYXcgdGhlIGRlY29yYXRpb25zXG4vLyAgIG9uIHRoZSBjb250ZW50LiBCdXQgaWYgeW91LCBmb3IgZXhhbXBsZSwgd2FudCB0byBjcmVhdGUgYSBuZXN0ZWRcbi8vICAgZWRpdG9yIHdpdGggdGhlIGNvbnRlbnQsIGl0IG1heSBtYWtlIHNlbnNlIHRvIHByb3ZpZGUgaXQgd2l0aCB0aGVcbi8vICAgaW5uZXIgZGVjb3JhdGlvbnMuXG4vL1xuLy8gICBjbGlwYm9hcmRTZXJpYWxpemVyOjogP0RPTVNlcmlhbGl6ZXJcbi8vICAgVGhlIERPTSBzZXJpYWxpemVyIHRvIHVzZSB3aGVuIHB1dHRpbmcgY29udGVudCBvbnRvIHRoZVxuLy8gICBjbGlwYm9hcmQuIElmIG5vdCBnaXZlbiwgdGhlIHJlc3VsdCBvZlxuLy8gICBbYERPTVNlcmlhbGl6ZXIuZnJvbVNjaGVtYWBdKCNtb2RlbC5ET01TZXJpYWxpemVyXmZyb21TY2hlbWEpXG4vLyAgIHdpbGwgYmUgdXNlZC5cbi8vXG4vLyAgIGNsaXBib2FyZFRleHRTZXJpYWxpemVyOjogPyhTbGljZSkg4oaSIHN0cmluZ1xuLy8gICBBIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgdG8gZ2V0IHRoZSB0ZXh0IGZvciB0aGUgY3VycmVudFxuLy8gICBzZWxlY3Rpb24gd2hlbiBjb3B5aW5nIHRleHQgdG8gdGhlIGNsaXBib2FyZC4gQnkgZGVmYXVsdCwgdGhlXG4vLyAgIGVkaXRvciB3aWxsIHVzZSBbYHRleHRCZXR3ZWVuYF0oI21vZGVsLk5vZGUudGV4dEJldHdlZW4pIG9uIHRoZVxuLy8gICBzZWxlY3RlZCByYW5nZS5cbi8vXG4vLyAgIGRlY29yYXRpb25zOjogPyhzdGF0ZTogRWRpdG9yU3RhdGUpIOKGkiA/RGVjb3JhdGlvblNvdXJjZVxuLy8gICBBIHNldCBvZiBbZG9jdW1lbnQgZGVjb3JhdGlvbnNdKCN2aWV3LkRlY29yYXRpb24pIHRvIHNob3cgaW4gdGhlXG4vLyAgIHZpZXcuXG4vL1xuLy8gICBlZGl0YWJsZTo6ID8oc3RhdGU6IEVkaXRvclN0YXRlKSDihpIgYm9vbFxuLy8gICBXaGVuIHRoaXMgcmV0dXJucyBmYWxzZSwgdGhlIGNvbnRlbnQgb2YgdGhlIHZpZXcgaXMgbm90IGRpcmVjdGx5XG4vLyAgIGVkaXRhYmxlLlxuLy9cbi8vICAgYXR0cmlidXRlczo6ID91bmlvbjxPYmplY3Q8c3RyaW5nPiwgKEVkaXRvclN0YXRlKSDihpIgP09iamVjdDxzdHJpbmc+PlxuLy8gICBDb250cm9sIHRoZSBET00gYXR0cmlidXRlcyBvZiB0aGUgZWRpdGFibGUgZWxlbWVudC4gTWF5IGJlIGVpdGhlclxuLy8gICBhbiBvYmplY3Qgb3IgYSBmdW5jdGlvbiBnb2luZyBmcm9tIGFuIGVkaXRvciBzdGF0ZSB0byBhbiBvYmplY3QuXG4vLyAgIEJ5IGRlZmF1bHQsIHRoZSBlbGVtZW50IHdpbGwgZ2V0IGEgY2xhc3MgYFwiUHJvc2VNaXJyb3JcImAsIGFuZFxuLy8gICB3aWxsIGhhdmUgaXRzIGBjb250ZW50RWRpdGFibGVgIGF0dHJpYnV0ZSBkZXRlcm1pbmVkIGJ5IHRoZVxuLy8gICBbYGVkaXRhYmxlYCBwcm9wXSgjdmlldy5FZGl0b3JQcm9wcy5lZGl0YWJsZSkuIEFkZGl0aW9uYWwgY2xhc3Nlc1xuLy8gICBwcm92aWRlZCBoZXJlIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGNsYXNzLiBGb3Igb3RoZXIgYXR0cmlidXRlcyxcbi8vICAgdGhlIHZhbHVlIHByb3ZpZGVkIGZpcnN0IChhcyBpblxuLy8gICBbYHNvbWVQcm9wYF0oI3ZpZXcuRWRpdG9yVmlldy5zb21lUHJvcCkpIHdpbGwgYmUgdXNlZC5cbi8vXG4vLyAgIHNjcm9sbFRocmVzaG9sZDo6ID91bmlvbjxudW1iZXIsIHt0b3A6IG51bWJlciwgcmlnaHQ6IG51bWJlciwgYm90dG9tOiBudW1iZXIsIGxlZnQ6IG51bWJlcn0+XG4vLyAgIERldGVybWluZXMgdGhlIGRpc3RhbmNlIChpbiBwaXhlbHMpIGJldHdlZW4gdGhlIGN1cnNvciBhbmQgdGhlXG4vLyAgIGVuZCBvZiB0aGUgdmlzaWJsZSB2aWV3cG9ydCBhdCB3aGljaCBwb2ludCwgd2hlbiBzY3JvbGxpbmcgdGhlXG4vLyAgIGN1cnNvciBpbnRvIHZpZXcsIHNjcm9sbGluZyB0YWtlcyBwbGFjZS4gRGVmYXVsdHMgdG8gMC5cbi8vXG4vLyAgIHNjcm9sbE1hcmdpbjo6ID91bmlvbjxudW1iZXIsIHt0b3A6IG51bWJlciwgcmlnaHQ6IG51bWJlciwgYm90dG9tOiBudW1iZXIsIGxlZnQ6IG51bWJlcn0+XG4vLyAgIERldGVybWluZXMgdGhlIGV4dHJhIHNwYWNlIChpbiBwaXhlbHMpIHRoYXQgaXMgbGVmdCBhYm92ZSBvclxuLy8gICBiZWxvdyB0aGUgY3Vyc29yIHdoZW4gaXQgaXMgc2Nyb2xsZWQgaW50byB2aWV3LiBEZWZhdWx0cyB0byA1LlxuXG4vLyBEaXJlY3RFZGl0b3JQcm9wczo6IGludGVyZmFjZSBleHRlbmRzIEVkaXRvclByb3BzXG4vL1xuLy8gVGhlIHByb3BzIG9iamVjdCBnaXZlbiBkaXJlY3RseSB0byB0aGUgZWRpdG9yIHZpZXcgc3VwcG9ydHMgdHdvXG4vLyBmaWVsZHMgdGhhdCBjYW4ndCBiZSB1c2VkIGluIHBsdWdpbnM6XG4vL1xuLy8gICBzdGF0ZTo6IEVkaXRvclN0YXRlXG4vLyAgIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBlZGl0b3IuXG4vL1xuLy8gICBwbHVnaW5zOjogW1BsdWdpbl1cbi8vICAgQSBzZXQgb2YgcGx1Z2lucyB0byB1c2UgaW4gdGhlIHZpZXcsIGFwcGx5aW5nIHRoZWlyIFtwbHVnaW5cbi8vICAgdmlld10oI3N0YXRlLlBsdWdpblNwZWMudmlldykgYW5kXG4vLyAgIFtwcm9wc10oI3N0YXRlLlBsdWdpblNwZWMucHJvcHMpLiBQYXNzaW5nIHBsdWdpbnMgd2l0aCBhIHN0YXRlXG4vLyAgIGNvbXBvbmVudCAoYSBbc3RhdGUgZmllbGRdKCNzdGF0ZS5QbHVnaW5TcGVjLnN0YXRlKSBmaWVsZCBvciBhXG4vLyAgIFt0cmFuc2FjdGlvbilbI3N0YXRlLlBsdWdpblNwZWMuZmlsdGVyVHJhbnNhY3Rpb25dIGZpbHRlciBvclxuLy8gICBhcHBlbmRlcikgd2lsbCByZXN1bHQgaW4gYW4gZXJyb3IsIHNpbmNlIHN1Y2ggcGx1Z2lucyBtdXN0IGJlXG4vLyAgIHByZXNlbnQgaW4gdGhlIHN0YXRlIHRvIHdvcmsuXG4vL1xuLy8gICBkaXNwYXRjaFRyYW5zYWN0aW9uOjogPyh0cjogVHJhbnNhY3Rpb24pXG4vLyAgIFRoZSBjYWxsYmFjayBvdmVyIHdoaWNoIHRvIHNlbmQgdHJhbnNhY3Rpb25zIChzdGF0ZSB1cGRhdGVzKVxuLy8gICBwcm9kdWNlZCBieSB0aGUgdmlldy4gSWYgeW91IHNwZWNpZnkgdGhpcywgeW91IHByb2JhYmx5IHdhbnQgdG9cbi8vICAgbWFrZSBzdXJlIHRoaXMgZW5kcyB1cCBjYWxsaW5nIHRoZSB2aWV3J3Ncbi8vICAgW2B1cGRhdGVTdGF0ZWBdKCN2aWV3LkVkaXRvclZpZXcudXBkYXRlU3RhdGUpIG1ldGhvZCB3aXRoIGEgbmV3XG4vLyAgIHN0YXRlIHRoYXQgaGFzIHRoZSB0cmFuc2FjdGlvblxuLy8gICBbYXBwbGllZF0oI3N0YXRlLkVkaXRvclN0YXRlLmFwcGx5KS4gVGhlIGNhbGxiYWNrIHdpbGwgYmUgYm91bmQgdG8gaGF2ZVxuLy8gICB0aGUgdmlldyBpbnN0YW5jZSBhcyBpdHMgYHRoaXNgIGJpbmRpbmcuXG5cbmV4cG9ydCB7IERlY29yYXRpb24sIERlY29yYXRpb25TZXQsIEVkaXRvclZpZXcsIGVuZENvbXBvc2l0aW9uIGFzIF9fZW5kQ29tcG9zaXRpb24sIHBhcnNlRnJvbUNsaXBib2FyZCBhcyBfX3BhcnNlRnJvbUNsaXBib2FyZCwgc2VyaWFsaXplRm9yQ2xpcGJvYXJkIGFzIF9fc2VyaWFsaXplRm9yQ2xpcGJvYXJkIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lcy5qcy5tYXBcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4Myk7XG4iXSwibmFtZXMiOlsiY29tbW9uRXh0ZW5zaW9ucyIsInR5cGUiLCJub2RlIiwicGFyYWdyYXBoIiwiY29udGVudCIsImdyb3VwIiwicGFyc2VET00iLCJ0YWciLCJ0b0RPTSIsInByaW9yaXR5IiwiZG9jIiwidGV4dCIsImhhcmRfYnJlYWsiLCJpbmxpbmUiLCJzZWxlY3RhYmxlIiwic2hvcnRjdXRLZXkiLCJiYXNlS2V5bWFwIiwiRW50ZXIiLCJwY0Jhc2VLZXltYXAiLCJNb2RFbnRlciIsIkJhY2tzcGFjZSIsIk1vZEJhY2tzcGFjZSIsIkRlbGV0ZSIsIk1vZERlbGV0ZSIsIk1vZEEiLCJzY2hlbWEiLCJQbHVnaW4iLCJrZXkiLCJQbHVnaW5LZXkiLCJwcm9wcyIsImNsaXBib2FyZFRleHRTZXJpYWxpemVyIiwic2xpY2UiLCJzZXBhcmF0ZWQiLCJmcmFnbWVudCIsInRvIiwic2l6ZSIsIm5vZGVzQmV0d2VlbiIsInBvcyIsInNlcmlhbGl6ZWRUZXh0Iiwic2VyaWFsaXplciIsIm5vZGVzIiwibmFtZSIsInNwZWMiLCJ0b1RleHQiLCJzZXJpYWxpemVOb2RlIiwiaXNUZXh0IiwiTWF0aCIsIm1heCIsImlzTGVhZiIsImlzQmxvY2siLCJ2aWV3IiwidHIiLCJzdGF0ZSIsImRpc3BhdGNoIiwiaSIsImNvbW1hbmRzIiwibGVuZ3RoIiwicmVzdWx0Iiwib3B0aW9ucyIsImRvbSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImV4dGVuc2lvbnMiLCJBcnJheSIsIm9uQ3JlYXRlIiwib25VcGRhdGUiLCJvblNlbGVjdGlvblVwZGF0ZSIsIm9uRGVzdHJveSIsInNldE9wdGlvbnMiLCJjcmVhdGVWaWV3Iiwib24iLCJ0aGlzIiwic3BlbGxjaGVjayIsInNldEF0dHJpYnV0ZSIsInRhYkluZGV4Iiwib25mb2N1cyIsImZvY3VzIiwicmVzb2x2ZXIiLCJFeHRlbnNpb25SZXNvbHZlciIsImNvbnNvbGUiLCJsb2ciLCJlbGVtZW50RnJvbVN0cmluZyIsIkVkaXRvclZpZXciLCJFZGl0b3JTdGF0ZSIsImNyZWF0ZSIsIkRPTVBhcnNlciIsImZyb21TY2hlbWEiLCJwYXJzZSIsImRpc3BhdGNoVHJhbnNhY3Rpb24iLCJkaXNwYXRjaElubmVyIiwiYmluZCIsIm5ld1N0YXRlIiwicmVjb25maWd1cmUiLCJwbHVnaW5zIiwiY29uY2F0IiwiZ2V0Q2xpcGJvYXJkVGV4dFNlcmlhbGl6ZXIiLCJ1cGRhdGVTdGF0ZSIsImVtaXQiLCJlZGl0b3IiLCJhcHBseSIsInNlbENoYW5nZSIsInNlbGVjdGlvbiIsImVxIiwiZGVzdHJveSIsImRlc3RvcnlBbGxMaXN0ZW5lcnMiLCJFdmVudEVtaXR0ZXIiLCJFZGl0b3IiLCJoYW5kbGVycyIsImV2ZW50IiwiZm4iLCJwdXNoIiwiZW1pdEFzeW5jIiwiYXdhaXRGdW5jIiwiZm9yRWFjaCIsImhhbmRsZXIiLCJQcm9taXNlIiwicmVzIiwiYXJncyIsImFsbCIsIm9mZiIsImZpbHRlciIsIk1hcmtzIiwiTm9kZXMiLCJtYXAiLCJleHRlbnNpb24iLCJzb3J0IiwiYSIsImIiLCJtYXJrIiwiU2NoZW1hIiwibWFya3MiLCJiaW5kRnVuYyIsImdldFR5cGUiLCJmbGF0IiwicGx1Z2luIiwidW5kZWZpbmVkIiwiY29udGV4dCIsImlucHV0UnVsZXMiLCJydWxlcyIsImtleW1hcCIsIndyYXBwaW5nIiwiaHRtbCIsIndpbmRvdyIsInBhcnNlRnJvbVN0cmluZyIsImJvZHkiLCJvYmoiLCJPYmplY3QiLCJrZXlzIiwiaW5kZW50IiwicHJlZml4Iiwic3VmZml4IiwiRnVuY3Rpb24iLCJ0ZXh0Q29udGVudCIsIlN0cmluZyIsInJhdyIsImNzcyIsInF1ZXJ5U2VsZWN0b3IiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInByZXZlbnREZWZhdWx0IiwiaGVhZGluZ0V4dGVuc2lvbiIsImhlYWRpbmciLCJkZWZpbmluZyIsImF0dHJzIiwibGV2ZWwiLCJkZWZhdWx0Iiwic3RyIiwiZ2V0U2hhcnAiLCJpbnB1dHJ1bGVBcnIiLCJ0ZXh0YmxvY2tUeXBlSW5wdXRSdWxlIiwiUmVnRXhwIiwibWF0Y2giLCJtYXRoRXh0ZW5zaW9ucyIsImxpc3RFeHRlbnNpb25zIiwiaXRlbVR5cGUiLCIkZnJvbSIsIiR0byIsImdyYW5kUGFyZW50IiwiZGVwdGgiLCJwYXJlbnQiLCJpbmRleCIsInNhbWVQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJjaGlsZENvdW50IiwiZmlyc3RDaGlsZCIsImxpZnRMaXN0SXRlbSIsInNlcmlhbENvbW1hbmRzIiwicmFuZ2UiLCJibG9ja1JhbmdlIiwiZW5kIiwiZW5kT2ZMaXN0Iiwic3RlcCIsIlJlcGxhY2VBcm91bmRTdGVwIiwiU2xpY2UiLCJGcmFnbWVudCIsImZyb20iLCJjb3B5IiwiTm9kZVJhbmdlIiwicmVzb2x2ZSIsImxpZnQiLCJsaWZ0VGFyZ2V0Iiwic2Nyb2xsSW50b1ZpZXciLCJsaWZ0VG9PdXRlckxpc3QiLCJsaXN0IiwiZW5kSW5kZXgiLCJzdGFydEluZGV4IiwiY2hpbGQiLCJub2RlU2l6ZSIsImRlbGV0ZSIsIiRzdGFydCIsInN0YXJ0IiwiaXRlbSIsIm5vZGVBZnRlciIsIm1hcHBpbmciLCJhdFN0YXJ0IiwiYXRFbmQiLCJpbmRleEJlZm9yZSIsImNhblJlcGxhY2UiLCJhcHBlbmQiLCJlbXB0eSIsImxpZnRPdXRPZkxpc3QiLCJub2RlQmVmb3JlIiwiZ2V0TmV4dEF0dHIiLCJpc0xhc3ROZXN0ZWQiLCJsYXN0Q2hpbGQiLCJpbm5lciIsImJlZm9yZSIsImFmdGVyIiwiaW5kZXhBZnRlciIsIndyYXAiLCJkZXB0aEJlZm9yZSIsImRlcHRoQWZ0ZXIiLCJkIiwiY3JlYXRlQW5kRmlsbCIsInJlcGxhY2UiLCJpc1RleHRibG9jayIsInNldFNlbGVjdGlvbiIsIlNlbGVjdGlvbiIsIm5lYXIiLCJuZXh0SXRlbVR5cGUiLCJjb250ZW50TWF0Y2hBdCIsImRlZmF1bHRUeXBlIiwidHlwZXMiLCJjYW5TcGxpdCIsInNwbGl0IiwiYWZ0ZXJTcGxpdCR0byIsImxpc3RUeXBlIiwiZG9Kb2luIiwib3V0ZXJSYW5nZSIsImNvbXBhdGlibGVDb250ZW50IiwiJGluc2VydCIsImZpbmRXcmFwcGluZyIsIndyYXBwZXJzIiwiam9pbkJlZm9yZSIsImZvdW5kIiwic3BsaXREZXB0aCIsInNwbGl0UG9zIiwiZmlyc3QiLCJjYW5Kb2luIiwiam9pbiIsImRvV3JhcEluTGlzdCIsImdldEF0dHJzIiwiaGFzQXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwib3JkZXJUYWJsZSIsImdldFRhYmxlIiwicmVjdXJzaXZlVGV4dFNlcmlhbGl6ZXIiLCJyZXBlYXQiLCJ3cmFwSW5MaXN0Iiwid3JhcHBpbmdJbnB1dFJ1bGUiLCJOdW1iZXIiLCJwYXJzZUludCIsInN0eWxlIiwibGlzdF9pdGVtIiwic3BsaXRMaXN0SXRlbSIsInNpbmtMaXN0SXRlbSIsIm5ld0xpbmVJbkxpc3QiLCJkZWxldGVMaXN0SXRlbSIsIk9yZGVyZWRMaXN0T3B0aW9ucyIsIkJ1bGxldExpc3RPcHRpb25zIiwiZmluZEluZGV4IiwidmFsIiwiUm9tZUFyYWIiLCJSb21lTnVtIiwibnVtIiwiZnJvbUNoYXJDb2RlIiwib3V0ZXJWaWV3IiwiZGlyIiwicmVxdWlyZU9uQm9yZGVyIiwibW9kZSIsInJlcXVpcmVFbXB0eVNlbGVjdGlvbiIsImlubmVyU3RhdGUiLCJvdXRlclN0YXRlIiwib3V0ZXJUbyIsIm91dGVyRnJvbSIsImlubmVyVG8iLCJpbm5lckZyb20iLCJjdXJyZW50UG9zIiwidGFyZ2V0UG9zIiwibm9kZUF0IiwiZGlzcGxheU1vZGUiLCJkaXNwbGF5IiwiZmxhZyIsImNyZWF0ZVBhcmFncmFwaE5lYXIiLCJtYXRoX2lubGluZSIsImF0b20iLCJjbGFzcyIsIm1ha2VJbmxpbmVNYXRoSW5wdXRSdWxlIiwiUkVHRVhfSU5MSU5FX01BVEhfRE9MTEFSU19FU0NBUEVEIiwiUkVHRVhfSU5MSU5FX01BVEhfRE9MTEFSU19MSVRFIiwibWF0aF9kaXNwbGF5IiwiY29kZSIsIm1ha2VCbG9ja01hdGhJbnB1dHJ1bGUiLCJSRUdFWF9CTE9DS19NQVRIX0RPTExBUlMiLCJtYXRoUHJldmlld1BsdWdpbiIsIm1hdGhTZWxlY3RQbHVnaW4iLCJtYXRoUGx1Z2luIiwiZ2V0UG9zIiwibWF0aFBsdWdpbktleSIsImN1cnNvclNpZGUiLCJpc0VkaXRpbmciLCJrYXRleE9wdGlvbnMiLCJhc3NpZ24iLCJnbG9iYWxHcm91cCIsInRocm93T25FcnJvciIsInRhZ25hbWUiLCJ0YWdOYW1lIiwiY2xhc3NMaXN0IiwiYWRkIiwibWF0aFJlbmRlckVsdCIsImFwcGVuZENoaWxkIiwibWF0aFNyY0VsdCIsImVuc3VyZUZvY3VzIiwicmVuZGVyTWF0aCIsImlubmVyVmlldyIsImhhc0ZvY3VzIiwicmVuZGVyS2F0ZXgiLCJodG1sRE9NIiwiZnJvbUlubmVyIiwic3luY0RvYyIsInRleHRTdHJpbmciLCJ0cmltIiwicmVtb3ZlIiwicmVuZGVyIiwiUGFyc2VFcnJvciIsImVycm9yIiwidG9TdHJpbmciLCJ1cGRhdGUiLCJkZWNvcmF0aW9ucyIsInNhbWVNYXJrdXAiLCJmaW5kRGlmZlN0YXJ0IiwiZGlmZiIsImZpbmREaWZmRW5kIiwiZW5kQSIsImVuZEIiLCJvdmVybGFwIiwibWluIiwic2V0TWV0YSIsIk1BVEhfUExVR0lOX0tFWSIsImNsb3NlRWRpdG9yIiwidXBkYXRlQ3Vyc29yUG9zIiwic2VsZWN0Tm9kZSIsImVkaXRhYmxlIiwib3BlbkVkaXRvciIsImthdGV4RGl2IiwiY2xhc3NOYW1lIiwiZ2V0SW1tVHJhbnNhY3Rpb24iLCJvdXRlclRyIiwib3V0ZXJEaXNwYXRjaCIsImlubmVyVHIiLCJNQVRIX1BSRVZJRVdfS0VZIiwia2F0ZXhET00iLCJkZXNlbGVjdE5vZGUiLCJzdG9wRXZlbnQiLCJ0YXJnZXQiLCJjb250YWlucyIsImlnbm9yZU11dGF0aW9uIiwiRXJyb3IiLCJpbnNlcnRUZXh0IiwiY2hhaW5Db21tYW5kcyIsImRlbGV0ZVNlbGVjdGlvbiIsIm5ld2xpbmVJbkNvZGUiLCJjb2xsYXNwZU1hdGhDbWQiLCJtYWJ5UG9zIiwiZ2V0U3RhdGUiLCJwcmV2Q3Vyc29yUG9zIiwiaW5uZXJQb3MiLCJUZXh0U2VsZWN0aW9uIiwiZG9jQ2hhbmdlZCIsImFwcGx5VHJhbnNhY3Rpb24iLCJ0cmFuc2FjdGlvbnMiLCJnZXRNZXRhIiwib2Zmc2V0TWFwIiwiU3RlcE1hcCIsIm9mZnNldCIsInN0ZXBzIiwiaiIsIm1hcHBlZCIsIk1hdGhWaWV3IiwiY3JlYXRlTWF0aFZpZXciLCJwbHVnaW5TdGF0ZSIsIm5vZGVWaWV3cyIsImFjdGl2ZU5vZGVWaWV3cyIsIm5vZGVWaWV3IiwibWFjcm9zIiwic3BsaWNlIiwiaW5kZXhPZiIsImluaXQiLCJjb25maWciLCJpbnN0YW5zZSIsInZhbHVlIiwib2xiU3RhdGUiLCJSRUdFWF9JTkxJTkVfTUFUSF9ET0xMQVJTIiwicGF0dGVybiIsIm5vZGVUeXBlIiwiSW5wdXRSdWxlIiwiY2FuUmVwbGFjZVdpdGgiLCJzZXRCbG9ja1R5cGUiLCJOb2RlU2VsZWN0aW9uIiwiJGVuZCIsIm1hdGNoTGl0ZSIsInRlc3QiLCJyZXBsYWNlUmFuZ2VXaXRoIiwiUFJFVklFV19XSURHRVRfS0VZIiwiXyIsIkRlY29yYXRpb25TZXQiLCJkZWNvU2V0IiwiYWN0aW9uIiwiRGVjb3JhdGlvbiIsIndpZGdldCIsInJlbW92ZURlY28iLCJmaW5kIiwiZGVjbyIsImNoZWNrU2VsZWN0aW9uIiwiYXJnIiwiZGVzY2VuZGFudHMiLCJzdGFydHNXaXRoIiwib2xkRGVjb1NldCIsInNlbGVjdGlvblNldCIsImZhY3RvcnkiLCJzZWxmIiwiZXhwb3J0cyIsImRlZmluaXRpb24iLCJvIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9fd2VicGFja19leHBvcnRzX18iLCJrYXRleF93ZWJwYWNrIiwibWVzc2FnZSIsInRva2VuIiwicG9zaXRpb24iLCJsb2MiLCJpbnB1dCIsImxleGVyIiwidW5kZXJsaW5lZCIsIl9fcHJvdG9fXyIsInNyY19QYXJzZUVycm9yIiwidXBwZXJjYXNlIiwiRVNDQVBFX0xPT0tVUCIsIkVTQ0FQRV9SRUdFWCIsImdldEJhc2VFbGVtIiwidXRpbHMiLCJlbGVtIiwic2V0dGluZyIsImRlZmF1bHRJZlVuZGVmaW5lZCIsInRvTG93ZXJDYXNlIiwiYmFzZUVsZW0iLCJ1cmwiLCJwcm90b2NvbCIsImV4ZWMiLCJTZXR0aW5ncyIsIm91dHB1dCIsImxlcW5vIiwiZmxlcW4iLCJlcnJvckNvbG9yIiwibWluUnVsZVRoaWNrbmVzcyIsImNvbG9ySXNUZXh0Q29sb3IiLCJzdHJpY3QiLCJ0cnVzdCIsIm1heFNpemUiLCJtYXhFeHBhbmQiLCJJbmZpbml0eSIsIl9wcm90byIsInJlcG9ydE5vbnN0cmljdCIsImVycm9yQ29kZSIsImVycm9yTXNnIiwid2FybiIsInVzZVN0cmljdEJlaGF2aW9yIiwiaXNUcnVzdGVkIiwiQm9vbGVhbiIsIlN0eWxlIiwiaWQiLCJjcmFtcGVkIiwic3VwIiwic3R5bGVzIiwiX3N1cCIsInN1YiIsIl9zdWIiLCJmcmFjTnVtIiwiX2ZyYWNOdW0iLCJmcmFjRGVuIiwiX2ZyYWNEZW4iLCJjcmFtcCIsIl9jcmFtcCIsIl90ZXh0IiwiaXNUaWdodCIsInNyY19TdHlsZSIsIkRJU1BMQVkiLCJURVhUIiwiU0NSSVBUIiwiU0NSSVBUU0NSSVBUIiwic2NyaXB0RGF0YSIsImJsb2NrcyIsImFsbEJsb2NrcyIsInN1cHBvcnRlZENvZGVwb2ludCIsImNvZGVwb2ludCIsInMiLCJwYXRoIiwiZG91YmxlbGVmdGFycm93IiwiZG91YmxlcmlnaHRhcnJvdyIsImxlZnRhcnJvdyIsImxlZnRicmFjZSIsImxlZnRicmFjZXVuZGVyIiwibGVmdGdyb3VwIiwibGVmdGdyb3VwdW5kZXIiLCJsZWZ0aGFycG9vbiIsImxlZnRoYXJwb29ucGx1cyIsImxlZnRoYXJwb29uZG93biIsImxlZnRoYXJwb29uZG93bnBsdXMiLCJsZWZ0aG9vayIsImxlZnRsaW5lc2VnbWVudCIsImxlZnRtYXBzdG8iLCJsZWZ0VG9Gcm9tIiwibG9uZ2VxdWFsIiwibWlkYnJhY2UiLCJtaWRicmFjZXVuZGVyIiwib2lpbnRTaXplMSIsIm9paW50U2l6ZTIiLCJvaWlpbnRTaXplMSIsIm9paWludFNpemUyIiwicmlnaHRhcnJvdyIsInJpZ2h0YnJhY2UiLCJyaWdodGJyYWNldW5kZXIiLCJyaWdodGdyb3VwIiwicmlnaHRncm91cHVuZGVyIiwicmlnaHRoYXJwb29uIiwicmlnaHRoYXJwb29ucGx1cyIsInJpZ2h0aGFycG9vbmRvd24iLCJyaWdodGhhcnBvb25kb3ducGx1cyIsInJpZ2h0aG9vayIsInJpZ2h0bGluZXNlZ21lbnQiLCJyaWdodFRvRnJvbSIsInR3b2hlYWRsZWZ0YXJyb3ciLCJ0d29oZWFkcmlnaHRhcnJvdyIsInRpbGRlMSIsInRpbGRlMiIsInRpbGRlMyIsInRpbGRlNCIsInZlYyIsIndpZGVoYXQxIiwid2lkZWhhdDIiLCJ3aWRlaGF0MyIsIndpZGVoYXQ0Iiwid2lkZWNoZWNrMSIsIndpZGVjaGVjazIiLCJ3aWRlY2hlY2szIiwid2lkZWNoZWNrNCIsImJhcmFib3ZlbGVmdGFycm93IiwicmlnaHRhcnJvd2Fib3ZlYmFyIiwiYmFyYWJvdmVzaG9ydGxlZnRoYXJwb29uIiwicmlnaHRoYXJwb29uYWJvdmVzaG9ydGJhciIsInNob3J0YmFyYWJvdmVsZWZ0aGFycG9vbiIsInNob3J0cmlnaHRoYXJwb29uYWJvdmViYXIiLCJEb2N1bWVudEZyYWdtZW50IiwiY2hpbGRyZW4iLCJjbGFzc2VzIiwiaGVpZ2h0IiwibWF4Rm9udFNpemUiLCJoYXNDbGFzcyIsInRvTm9kZSIsImZyYWciLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwidG9NYXJrdXAiLCJtYXJrdXAiLCJjcmVhdGVDbGFzcyIsImNscyIsImluaXROb2RlIiwiYXR0cmlidXRlcyIsImNvbG9yIiwiZ2V0Q29sb3IiLCJfdG9Ob2RlIiwiYXR0ciIsIl90b01hcmt1cCIsIlNwYW4iLCJ3aWR0aCIsImF0dHJpYnV0ZSIsIkFuY2hvciIsImhyZWYiLCJfcHJvdG8yIiwiSW1nIiwic3JjIiwiYWx0IiwiX3Byb3RvMyIsImlDb21iaW5hdGlvbnMiLCJTeW1ib2xOb2RlIiwiaXRhbGljIiwic2tldyIsInNjcmlwdCIsIl9pIiwiYmxvY2siLCJzY3JpcHRGcm9tQ29kZXBvaW50IiwiY2hhckNvZGVBdCIsIl9wcm90bzQiLCJjcmVhdGVUZXh0Tm9kZSIsInNwYW4iLCJtYXJnaW5SaWdodCIsIm5lZWRzU3BhbiIsImVzY2FwZWQiLCJTdmdOb2RlIiwiX3Byb3RvNSIsImNyZWF0ZUVsZW1lbnROUyIsIlBhdGhOb2RlIiwicGF0aE5hbWUiLCJhbHRlcm5hdGUiLCJfcHJvdG82IiwiTGluZU5vZGUiLCJfcHJvdG83IiwiYXNzZXJ0U3ltYm9sRG9tTm9kZSIsImZvbnRNZXRyaWNzRGF0YSIsInNpZ21hc0FuZFhpcyIsInNsYW50Iiwic3BhY2UiLCJzdHJldGNoIiwic2hyaW5rIiwieEhlaWdodCIsInF1YWQiLCJleHRyYVNwYWNlIiwibnVtMSIsIm51bTIiLCJudW0zIiwiZGVub20xIiwiZGVub20yIiwic3VwMSIsInN1cDIiLCJzdXAzIiwic3ViMSIsInN1YjIiLCJzdXBEcm9wIiwic3ViRHJvcCIsImRlbGltMSIsImRlbGltMiIsImF4aXNIZWlnaHQiLCJkZWZhdWx0UnVsZVRoaWNrbmVzcyIsImJpZ09wU3BhY2luZzEiLCJiaWdPcFNwYWNpbmcyIiwiYmlnT3BTcGFjaW5nMyIsImJpZ09wU3BhY2luZzQiLCJiaWdPcFNwYWNpbmc1Iiwic3FydFJ1bGVUaGlja25lc3MiLCJwdFBlckVtIiwiZG91YmxlUnVsZVNlcCIsImFycmF5UnVsZVdpZHRoIiwiZmJveHNlcCIsImZib3hydWxlIiwiZXh0cmFDaGFyYWN0ZXJNYXAiLCJnZXRDaGFyYWN0ZXJNZXRyaWNzIiwiY2hhcmFjdGVyIiwiZm9udCIsImNoIiwibWV0cmljcyIsImZvbnRNZXRyaWNzQnlTaXplSW5kZXgiLCJBVE9NUyIsIk5PTl9BVE9NUyIsInN5bWJvbHMiLCJzcmNfc3ltYm9scyIsImRlZmluZVN5bWJvbCIsImFjY2VwdFVuaWNvZGVDaGFyIiwibWF0aCIsInN5bWJvbHNfdGV4dCIsIm1haW4iLCJhbXMiLCJhY2NlbnQiLCJiaW4iLCJzeW1ib2xzX2Nsb3NlIiwibWF0aG9yZCIsIm9wIiwic3ltYm9sc19vcGVuIiwicHVuY3QiLCJyZWwiLCJzcGFjaW5nIiwidGV4dG9yZCIsImxpZ2F0dXJlcyIsIm1hdGhUZXh0U3ltYm9scyIsImNoYXJBdCIsInRleHRTeW1ib2xzIiwiX2NoIiwibGV0dGVycyIsIl9pMiIsIl9jaDIiLCJ3aWRlQ2hhciIsIl9pMyIsIl9jaDMiLCJfaTQiLCJfY2g0IiwiZXh0cmFMYXRpbiIsIl9pNSIsIl9jaDUiLCJ3aWRlTGF0aW5MZXR0ZXJEYXRhIiwid2lkZU51bWVyYWxEYXRhIiwic2l6ZVN0eWxlTWFwIiwic2l6ZU11bHRpcGxpZXJzIiwic2l6ZUF0U3R5bGUiLCJPcHRpb25zIiwiZGF0YSIsInRleHRTaXplIiwicGhhbnRvbSIsImZvbnRGYW1pbHkiLCJmb250V2VpZ2h0IiwiZm9udFNoYXBlIiwic2l6ZU11bHRpcGxpZXIiLCJfZm9udE1ldHJpY3MiLCJCQVNFU0laRSIsImV4dGVuZCIsImhhdmluZ1N0eWxlIiwiaGF2aW5nQ3JhbXBlZFN0eWxlIiwiaGF2aW5nU2l6ZSIsImhhdmluZ0Jhc2VTdHlsZSIsIndhbnRTaXplIiwiaGF2aW5nQmFzZVNpemluZyIsIndpdGhDb2xvciIsIndpdGhQaGFudG9tIiwid2l0aEZvbnQiLCJ3aXRoVGV4dEZvbnRGYW1pbHkiLCJ3aXRoVGV4dEZvbnRXZWlnaHQiLCJ3aXRoVGV4dEZvbnRTaGFwZSIsInNpemluZ0NsYXNzZXMiLCJvbGRPcHRpb25zIiwiYmFzZVNpemluZ0NsYXNzZXMiLCJmb250TWV0cmljcyIsInNpemVJbmRleCIsImNzc0VtUGVyTXUiLCJnZXRHbG9iYWxNZXRyaWNzIiwic3JjX09wdGlvbnMiLCJwdFBlclVuaXQiLCJyZWxhdGl2ZVVuaXQiLCJ2YWxpZFVuaXQiLCJ1bml0IiwiY2FsY3VsYXRlU2l6ZSIsInNpemVWYWx1ZSIsInNjYWxlIiwidW5pdE9wdGlvbnMiLCJudW1iZXIiLCJsb29rdXBTeW1ib2wiLCJmb250TmFtZSIsIm1ha2VTeW1ib2wiLCJzeW1ib2xOb2RlIiwibG9va3VwIiwiY2FuQ29tYmluZSIsInByZXYiLCJuZXh0IiwiX3N0eWxlIiwic2l6ZUVsZW1lbnRGcm9tQ2hpbGRyZW4iLCJtYWtlU3BhbiIsIm1ha2VTdmdTcGFuIiwibWFrZUZyYWdtZW50IiwicmV0cmlldmVUZXh0Rm9udE5hbWUiLCJiYXNlRm9udE5hbWUiLCJmb250TWFwIiwidmFyaWFudCIsInN2Z0RhdGEiLCJidWlsZENvbW1vbiIsIm1hdGhzeW0iLCJtYWtlTGluZVNwYW4iLCJ0aGlja25lc3MiLCJsaW5lIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJtYWtlQW5jaG9yIiwiYW5jaG9yIiwid3JhcEZyYWdtZW50IiwibWFrZVZMaXN0IiwicGFyYW1zIiwiX2dldFZMaXN0Q2hpbGRyZW5BbmREIiwicG9zaXRpb25UeXBlIiwib2xkQ2hpbGRyZW4iLCJfZGVwdGgiLCJzaGlmdCIsImN1cnJQb3MiLCJib3R0b20iLCJwb3NpdGlvbkRhdGEiLCJnZXRWTGlzdENoaWxkcmVuQW5kRGVwdGgiLCJwc3RydXRTaXplIiwicHN0cnV0IiwicmVhbENoaWxkcmVuIiwibWluUG9zIiwibWF4UG9zIiwiX2NoaWxkIiwiX2VsZW0iLCJ3cmFwcGVyQ2xhc3NlcyIsIndyYXBwZXJTdHlsZSIsImNoaWxkV3JhcCIsInRvcCIsIm1hcmdpbkxlZnQiLCJyb3dzIiwidmxpc3QiLCJlbXB0eVNwYW4iLCJkZXB0aFN0cnV0IiwidG9wU3RydXQiLCJ2dGFibGUiLCJtYWtlT3JkIiwiaXNGb250IiwiZm9udE9yRmFtaWx5IiwiX3dpZGVDaGFyYWN0ZXJGb250IiwiY29kZVBvaW50IiwiZmxvb3IiLCJ3aWRlQ2hhcmFjdGVyRm9udCIsIndpZGVGb250TmFtZSIsIndpZGVGb250Q2xhc3MiLCJmb250Q2xhc3NlcyIsImZvbnREYXRhIiwiZm9udENsYXNzIiwiYm9sZHN5bWJvbCIsInN1YnN0ciIsInBhcnRzIiwiX2ZvbnROYW1lIiwiX2ZvbnROYW1lMyIsIl9mb250TmFtZTIiLCJtYWtlR2x1ZSIsIm1lYXN1cmVtZW50IiwicnVsZSIsInN0YXRpY1N2ZyIsIl9zdmdEYXRhJHZhbHVlIiwic3ZnTm9kZSIsInRyeUNvbWJpbmVDaGFycyIsImNoYXJzIiwidGhpbnNwYWNlIiwibWVkaXVtc3BhY2UiLCJ0aGlja3NwYWNlIiwic3BhY2luZ3MiLCJtb3JkIiwibW9wIiwibWJpbiIsIm1yZWwiLCJtaW5uZXIiLCJtb3BlbiIsIm1jbG9zZSIsIm1wdW5jdCIsInRpZ2h0U3BhY2luZ3MiLCJfZnVuY3Rpb25zIiwiX2h0bWxHcm91cEJ1aWxkZXJzIiwiX21hdGhtbEdyb3VwQnVpbGRlcnMiLCJkZWZpbmVGdW5jdGlvbiIsIl9yZWYiLCJuYW1lcyIsImh0bWxCdWlsZGVyIiwibWF0aG1sQnVpbGRlciIsIm51bUFyZ3MiLCJhcmdUeXBlcyIsImFsbG93ZWRJbkFyZ3VtZW50IiwiYWxsb3dlZEluVGV4dCIsImFsbG93ZWRJbk1hdGgiLCJudW1PcHRpb25hbEFyZ3MiLCJpbmZpeCIsInByaW1pdGl2ZSIsImRlZmluZUZ1bmN0aW9uQnVpbGRlcnMiLCJfcmVmMiIsIm5vcm1hbGl6ZUFyZ3VtZW50Iiwib3JkYXJndW1lbnQiLCJidWlsZEhUTUxfbWFrZVNwYW4iLCJiaW5MZWZ0Q2FuY2VsbGVyIiwiYmluUmlnaHRDYW5jZWxsZXIiLCJzdHlsZU1hcCIsIkRvbUVudW0iLCJidWlsZEV4cHJlc3Npb24iLCJleHByZXNzaW9uIiwiaXNSZWFsR3JvdXAiLCJzdXJyb3VuZGluZyIsImdyb3VwcyIsImJ1aWxkR3JvdXAiLCJnbHVlT3B0aW9ucyIsImR1bW15UHJldiIsImR1bW15TmV4dCIsImlzUm9vdCIsInRyYXZlcnNlTm9uU3BhY2VOb2RlcyIsInByZXZUeXBlIiwiZ2V0VHlwZU9mRG9tVHJlZSIsImNhbGxiYWNrIiwicGFydGlhbEdyb3VwIiwiY2hlY2tQYXJ0aWFsR3JvdXAiLCJub25zcGFjZSIsImluc2VydEFmdGVyIiwidW5zaGlmdCIsIm4iLCJwb3AiLCJnZXRPdXRlcm1vc3ROb2RlIiwic2lkZSIsIm1ha2VOdWxsRGVsaW1pdGVyIiwibW9yZUNsYXNzZXMiLCJiYXNlT3B0aW9ucyIsImdyb3VwTm9kZSIsIm11bHRpcGxpZXIiLCJidWlsZEhUTUxVbmJyZWFrYWJsZSIsInN0cnV0IiwidmVydGljYWxBbGlnbiIsImJ1aWxkSFRNTCIsInRyZWUiLCJlcW5OdW0iLCJ0YWdDaGlsZCIsIm5vYnJlYWsiLCJodG1sTm9kZSIsIm5ld0RvY3VtZW50RnJhZ21lbnQiLCJNYXRoTm9kZSIsIlRleHROb2RlIiwibWF0aE1MVHJlZSIsIlNwYWNlTm9kZSIsIm1ha2VUZXh0IiwibWFrZVJvdyIsImdldFZhcmlhbnQiLCJidWlsZE1hdGhNTF9idWlsZEV4cHJlc3Npb24iLCJpc09yZGdyb3VwIiwiYnVpbGRNYXRoTUxfYnVpbGRHcm91cCIsImxhc3RHcm91cCIsIl9ncm91cCIsIl9sYXN0R3JvdXAkY2hpbGRyZW4iLCJfbGFzdEdyb3VwJGNoaWxkcmVuMiIsIl9sYXN0R3JvdXAkY2hpbGRyZW4zIiwiYnVpbGRFeHByZXNzaW9uUm93IiwiYnVpbGRNYXRoTUwiLCJ0ZXhFeHByZXNzaW9uIiwiaXNEaXNwbGF5TW9kZSIsImZvck1hdGhtbE9ubHkiLCJ3cmFwcGVyIiwiYW5ub3RhdGlvbiIsInNlbWFudGljcyIsIm9wdGlvbnNGcm9tU2V0dGluZ3MiLCJzZXR0aW5ncyIsImRpc3BsYXlXcmFwIiwic3RyZXRjaHlDb2RlUG9pbnQiLCJ3aWRlaGF0Iiwid2lkZWNoZWNrIiwid2lkZXRpbGRlIiwidXRpbGRlIiwib3ZlcmxlZnRhcnJvdyIsInVuZGVybGVmdGFycm93IiwieGxlZnRhcnJvdyIsIm92ZXJyaWdodGFycm93IiwidW5kZXJyaWdodGFycm93IiwieHJpZ2h0YXJyb3ciLCJ1bmRlcmJyYWNlIiwib3ZlcmJyYWNlIiwib3Zlcmdyb3VwIiwidW5kZXJncm91cCIsIm92ZXJsZWZ0cmlnaHRhcnJvdyIsInVuZGVybGVmdHJpZ2h0YXJyb3ciLCJ4bGVmdHJpZ2h0YXJyb3ciLCJPdmVycmlnaHRhcnJvdyIsInhSaWdodGFycm93Iiwib3ZlcmxlZnRoYXJwb29uIiwieGxlZnRoYXJwb29udXAiLCJvdmVycmlnaHRoYXJwb29uIiwieHJpZ2h0aGFycG9vbnVwIiwieExlZnRhcnJvdyIsInhMZWZ0cmlnaHRhcnJvdyIsInhob29rbGVmdGFycm93IiwieGhvb2tyaWdodGFycm93IiwieG1hcHN0byIsInhyaWdodGhhcnBvb25kb3duIiwieGxlZnRoYXJwb29uZG93biIsInhyaWdodGxlZnRoYXJwb29ucyIsInhsZWZ0cmlnaHRoYXJwb29ucyIsInh0d29oZWFkbGVmdGFycm93IiwieHR3b2hlYWRyaWdodGFycm93IiwieGxvbmdlcXVhbCIsInh0b2Zyb20iLCJ4cmlnaHRsZWZ0YXJyb3dzIiwieHJpZ2h0ZXF1aWxpYnJpdW0iLCJ4bGVmdGVxdWlsaWJyaXVtIiwia2F0ZXhJbWFnZXNEYXRhIiwib3ZlcmxpbmVzZWdtZW50IiwidW5kZXJsaW5lc2VnbWVudCIsInN0cmV0Y2h5IiwibGFiZWwiLCJfYnVpbGRTdmdTcGFuXyIsInZpZXdCb3hXaWR0aCIsInZpZXdCb3hIZWlnaHQiLCJfaGVpZ2h0IiwibnVtQ2hhcnMiLCJiYXNlIiwiaW1nSW5kZXgiLCJtaW5XaWR0aCIsIndpZHRoQ2xhc3NlcyIsImFsaWducyIsInNwYW5zIiwicGF0aHMiLCJfbWluV2lkdGgiLCJfdmlld0JveEhlaWdodCIsIl9oZWlnaHQyIiwibnVtU3ZnQ2hpbGRyZW4iLCJfcGF0aCIsIl9zdmdOb2RlIiwiX3NwYW4iLCJidWlsZFN2Z1NwYW5fIiwiYXNzZXJ0Tm9kZVR5cGUiLCJhc3NlcnRTeW1ib2xOb2RlVHlwZSIsInR5cGVkTm9kZSIsImNoZWNrU3ltYm9sTm9kZVR5cGUiLCJncnAiLCJzdXBTdWJHcm91cCIsImFzc2VydFNwYW4iLCJpc1NoaWZ0eSIsImJhc2VDaGFyIiwiYWNjZW50Qm9keSIsImFjY2VudEJlbG93IiwiY2xlYXJhbmNlIiwiaXNTdHJldGNoeSIsImFjY2VudEZ1bGwiLCJsZWZ0IiwiYWNjZW50V3JhcCIsImFjY2VudE5vZGUiLCJOT05fU1RSRVRDSFlfQUNDRU5UX1JFR0VYIiwiZnVuY05hbWUiLCJwYXJzZXIiLCJpbm5lckdyb3VwIiwia2VybiIsInBhZGRlZE5vZGUiLCJvcHRBcmdzIiwiYmVsb3ciLCJsb3dlckdyb3VwIiwibmV3T3B0aW9ucyIsInVwcGVyR3JvdXAiLCJhcnJvd1ByZWZpeCIsImFycm93Qm9keSIsImFycm93U2hpZnQiLCJ1cHBlclNoaWZ0IiwibG93ZXJTaGlmdCIsImFycm93Tm9kZSIsInVwcGVyTm9kZSIsImxvd2VyTm9kZSIsIl9sb3dlck5vZGUiLCJjZEFycm93RnVuY3Rpb25OYW1lIiwiaXNTdGFydE9mQXJyb3ciLCJjZEFycm93IiwiYXJyb3dDaGFyIiwibGFiZWxzIiwiY2FsbEZ1bmN0aW9uIiwiYmFyZUFycm93IiwiZmFtaWx5IiwiYXJyb3dHcm91cCIsImlzTmFOIiwiY29sb3JfaHRtbEJ1aWxkZXIiLCJlbGVtZW50cyIsImNvbG9yX21hdGhtbEJ1aWxkZXIiLCJicmVha09uVG9rZW5UZXh0IiwiZ3VsbGV0Iiwic2V0IiwicGFyc2VFeHByZXNzaW9uIiwibmV3TGluZSIsIm1hcmdpblRvcCIsImdsb2JhbE1hcCIsImNoZWNrQ29udHJvbFNlcXVlbmNlIiwidG9rIiwibGV0Q29tbWFuZCIsImdsb2JhbCIsIm1hY3JvIiwibm9leHBhbmQiLCJ0b2tlbnMiLCJ1bmV4cGFuZGFibGUiLCJpc0V4cGFuZGFibGUiLCJjb25zdW1lU3BhY2VzIiwiZmV0Y2giLCJwYXJzZUZ1bmN0aW9uIiwicG9wVG9rZW4iLCJpbnNlcnQiLCJkZWxpbWl0ZXJzIiwiZnV0dXJlIiwiY29uc3VtZUFyZyIsImV4cGFuZFRva2VucyIsInJldmVyc2UiLCJfcmVmMyIsImdldFJIUyIsIl9yZWY0IiwibWlkZGxlIiwicHVzaFRva2VuIiwiZ2V0TWV0cmljcyIsInN5bWJvbCIsInN0eWxlV3JhcCIsImRlbGltIiwidG9TdHlsZSIsImRlbGltU2l6ZU11bHRpcGxpZXIiLCJjZW50ZXJTcGFuIiwibWFrZUxhcmdlRGVsaW0iLCJjZW50ZXIiLCJtYXRocm1TaXplIiwibWFrZUdseXBoU3BhbiIsIm1ha2VJbm5lciIsInRvRml4ZWQiLCJpbm5lclBhdGgiLCJyb3VuZCIsImxhcCIsInZlcnRzIiwiZG91YmxlVmVydHMiLCJtYWtlU3RhY2tlZERlbGltIiwiaGVpZ2h0VG90YWwiLCJ0b3BNZXRyaWNzIiwidG9wSGVpZ2h0VG90YWwiLCJyZXBlYXRNZXRyaWNzIiwicmVwZWF0SGVpZ2h0VG90YWwiLCJib3R0b21NZXRyaWNzIiwiYm90dG9tSGVpZ2h0VG90YWwiLCJtaWRkbGVIZWlnaHRUb3RhbCIsIm1pZGRsZUZhY3RvciIsIm1pZGRsZU1ldHJpY3MiLCJtaW5IZWlnaHQiLCJyZWFsSGVpZ2h0VG90YWwiLCJjZWlsIiwic3RhY2siLCJpbm5lckhlaWdodCIsIl9pbm5lckhlaWdodCIsImVtUGFkIiwic3FydFN2ZyIsInNxcnROYW1lIiwiZXh0cmFWaW5pY3VsdW0iLCJoTGluZVBhZCIsInNxcnRNYWluIiwic3FydFNpemUxIiwic3FydFNpemUyIiwic3FydFNpemUzIiwic3FydFNpemU0Iiwic3FydFRhbGwiLCJzcXJ0UGF0aCIsInBhdGhOb2RlIiwic3ZnIiwic3RhY2tMYXJnZURlbGltaXRlcnMiLCJzdGFja0Fsd2F5c0RlbGltaXRlcnMiLCJzdGFja05ldmVyRGVsaW1pdGVycyIsInNpemVUb01heEhlaWdodCIsInN0YWNrTmV2ZXJEZWxpbWl0ZXJTZXF1ZW5jZSIsInN0YWNrQWx3YXlzRGVsaW1pdGVyU2VxdWVuY2UiLCJzdGFja0xhcmdlRGVsaW1pdGVyU2VxdWVuY2UiLCJkZWxpbVR5cGVUb0ZvbnQiLCJ0cmF2ZXJzZVNlcXVlbmNlIiwic2VxdWVuY2UiLCJoZWlnaHREZXB0aCIsIm1ha2VDdXN0b21TaXplZERlbGltIiwiZGVsaW1UeXBlIiwibWFrZVNtYWxsRGVsaW0iLCJkZWxpbWl0ZXIiLCJkZWxpbWl0ZXJFeHRlbmQiLCJtYXhEaXN0RnJvbUF4aXMiLCJ0b3RhbEhlaWdodCIsImRlbGltaXRlclNpemVzIiwibWNsYXNzIiwiY2hlY2tEZWxpbWl0ZXIiLCJzeW1EZWxpbSIsImFzc2VydFBhcnNlZCIsImxlZnRyaWdodERlcHRoIiwiZXhwZWN0IiwicmlnaHQiLCJyaWdodENvbG9yIiwibGVmdERlbGltIiwicmlnaHREZWxpbSIsImlubmVyRGVwdGgiLCJoYWRNaWRkbGUiLCJpc01pZGRsZSIsImNvbG9yT3B0aW9ucyIsImxlZnROb2RlIiwicmlnaHROb2RlIiwibWlkZGxlRGVsaW0iLCJ0ZXh0Tm9kZSIsIm1pZGRsZU5vZGUiLCJlbmNsb3NlX2h0bWxCdWlsZGVyIiwiaW1nIiwieSIsImltZ1NoaWZ0IiwiaXNTaW5nbGVDaGFyIiwibGluZVdlaWdodCIsImFuZ2xlSGVpZ2h0IiwicGFkZGluZ0xlZnQiLCJ0b3BQYWQiLCJib3R0b21QYWQiLCJydWxlVGhpY2tuZXNzIiwiYm9yZGVyQ29sb3IiLCJsaW5lcyIsImJvcmRlclN0eWxlIiwiYm9yZGVyV2lkdGgiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJiYWNrZ3JvdW5kQ29sb3IiLCJlbmNsb3NlX21hdGhtbEJ1aWxkZXIiLCJ0aGsiLCJfcmVmNSIsIl9lbnZpcm9ubWVudHMiLCJkZWZpbmVFbnZpcm9ubWVudCIsImdldEhMaW5lcyIsImhsaW5lSW5mbyIsIm54dCIsImNvbnN1bWUiLCJ2YWxpZGF0ZUFtc0Vudmlyb25tZW50Q29udGV4dCIsImVudk5hbWUiLCJwYXJzZUFycmF5IiwiaHNraXBCZWZvcmVBbmRBZnRlciIsImFkZEpvdCIsImNvbHMiLCJhcnJheXN0cmV0Y2giLCJjb2xTZXBhcmF0aW9uVHlwZSIsImFkZEVxbk51bSIsInNpbmdsZVJvdyIsImVtcHR5U2luZ2xlUm93IiwibWF4TnVtQ29scyIsImJlZ2luR3JvdXAiLCJleHBhbmRNYWNyb0FzVGV4dCIsInBhcnNlRmxvYXQiLCJyb3ciLCJyb3dHYXBzIiwiaExpbmVzQmVmb3JlUm93IiwiY2VsbCIsImVuZEdyb3VwIiwibmV4dFRva2VuIiwicGFyc2VTaXplR3JvdXAiLCJkQ2VsbFN0eWxlIiwiYXJyYXlfaHRtbEJ1aWxkZXIiLCJyIiwiYyIsIm5yIiwibmMiLCJobGluZXMiLCJwdCIsImFycmF5Y29sc2VwIiwiYmFzZWxpbmVza2lwIiwiam90IiwiYXJyYXlza2lwIiwiYXJzdHJ1dEhlaWdodCIsImFyc3RydXREZXB0aCIsInNldEhMaW5lUG9zIiwiaGxpbmVzSW5HYXAiLCJpc0Rhc2hlZCIsImlucm93Iiwib3V0cm93IiwiZWx0Iiwicm93R2FwIiwiZ2FwIiwiY29sU2VwIiwiY29sRGVzY3JOdW0iLCJjb2xEZXNjcmlwdGlvbnMiLCJlcW5OdW1TcGFucyIsInJ3IiwiZXFuVGFnIiwiY29sRGVzY3IiLCJmaXJzdFNlcGFyYXRvciIsInNlcGFyYXRvciIsImxpbmVUeXBlIiwiYm9yZGVyUmlnaHRTdHlsZSIsIm1hcmdpbiIsInNlcHdpZHRoIiwicHJlZ2FwIiwiY29sIiwiX3NoaWZ0IiwiYWxpZ24iLCJwb3N0Z2FwIiwiZGFzaGVzIiwidkxpc3RFbGVtcyIsImhsaW5lIiwibGluZVNoaWZ0IiwiZXFuTnVtQ29sIiwiYWxpZ25NYXAiLCJsIiwiYXJyYXlfbWF0aG1sQnVpbGRlciIsInRibCIsImdsdWUiLCJ0YWJsZSIsIm1lbmNsb3NlIiwiY29sdW1uTGluZXMiLCJwcmV2VHlwZVdhc0FsaWduIiwiaVN0YXJ0IiwiaUVuZCIsIl9jb2xzIiwicm93TGluZXMiLCJhbGlnbmVkSGFuZGxlciIsIm51bU1hdGhzIiwic2VwYXJhdGlvblR5cGUiLCJudW1Db2xzIiwiZW1wdHlHcm91cCIsImFyZzAiLCJpc0FsaWduZWQiLCJzdHlsaW5nIiwiY3VyTWF0aHMiLCJuZGUiLCJjYSIsImNvbEFsaWduIiwicGF5bG9hZCIsImZpbGwiLCJwYXJzZWRSb3dzIiwiZW5kQ2hhciIsInJvd05vZGVzIiwibGFiZWxOdW0iLCJpbkxhYmVsIiwiayIsIndyYXBwZWRBcnJvdyIsInBhcnNlQ0QiLCJzcmNfZW52aXJvbm1lbnRzIiwibmFtZUdyb3VwIiwiZW52IiwiX3BhcnNlciRwYXJzZUFyZ3VtZW50IiwicGFyc2VBcmd1bWVudHMiLCJfYXJncyIsImVuZE5hbWVUb2tlbiIsIm1jbGFzc19tYWtlU3BhbiIsIm1jbGFzc19odG1sQnVpbGRlciIsIm1jbGFzc19tYXRobWxCdWlsZGVyIiwiaXNDaGFyYWN0ZXJCb3giLCJsc3BhY2UiLCJyc3BhY2UiLCJiaW5yZWxDbGFzcyIsImJhc2VBcmciLCJzaGlmdGVkQXJnIiwiYmFzZU9wIiwibGltaXRzIiwiYWx3YXlzSGFuZGxlU3VwU3ViIiwicGFyZW50SXNTdXBTdWIiLCJzdXBwcmVzc0Jhc2VTaGlmdCIsInN1cHN1YiIsImZvbnRfaHRtbEJ1aWxkZXIiLCJmb250X21hdGhtbEJ1aWxkZXIiLCJmb250QWxpYXNlcyIsImZ1bmMiLCJhZGp1c3RTdHlsZSIsIm9yaWdpbmFsU3R5bGUiLCJnZW5mcmFjX2h0bWxCdWlsZGVyIiwibnN0eWxlIiwiZHN0eWxlIiwibnVtZXJtIiwibnVtZXIiLCJjb250aW51ZWQiLCJoU3RydXQiLCJkU3RydXQiLCJydWxlV2lkdGgiLCJydWxlU3BhY2luZyIsIm51bVNoaWZ0IiwiZGVub21TaGlmdCIsImZyYWMiLCJkZWxpbVNpemUiLCJkZW5vbW0iLCJkZW5vbSIsImhhc0JhckxpbmUiLCJiYXJTaXplIiwiY2FuZGlkYXRlQ2xlYXJhbmNlIiwiZ2VuZnJhY19tYXRobWxCdWlsZGVyIiwiaXNEaXNwbGF5Iiwid2l0aERlbGltcyIsImxlZnRPcCIsInJpZ2h0T3AiLCJyZXBsYWNlV2l0aCIsInN0eWxBcnJheSIsImRlbGltRnJvbVZhbHVlIiwiZGVsaW1TdHJpbmciLCJiYXJOb2RlIiwiaXNCbGFuayIsInN0eWwiLCJ0ZXh0T3JkIiwiX3JlZjYiLCJhc3NlcnQiLCJob3JpekJyYWNlX2h0bWxCdWlsZGVyIiwiYnJhY2VCb2R5IiwiaXNPdmVyIiwidlNwYW4iLCJjb21tYW5kIiwiZm9ybWF0VW5zdXBwb3J0ZWRDbWQiLCJ0cnVzdENvbnRleHQiLCJzdHJpbmciLCJrZXlWYWwiLCJtYXRobWwiLCJzaXplRGF0YSIsInRvdGFsaGVpZ2h0Iiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJtYXRoRnVuY3Rpb24iLCJtdVVuaXQiLCJkaW1lbnNpb24iLCJhbGlnbm1lbnQiLCJmaXgiLCJvdXRlck1vZGUiLCJzd2l0Y2hNb2RlIiwiY2xvc2UiLCJjaG9vc2VNYXRoU3R5bGUiLCJzY3JpcHRzY3JpcHQiLCJhc3NlbWJsZVN1cFN1YiIsInN1cEdyb3VwIiwic3ViR3JvdXAiLCJiYXNlU2hpZnQiLCJmaW5hbEdyb3VwIiwic3ViSXNTaW5nbGVDaGFyYWN0ZXIiLCJfYm90dG9tIiwic3BhY2VyIiwibm9TdWNjZXNzb3IiLCJvcF9odG1sQnVpbGRlciIsImhhc0xpbWl0cyIsImxhcmdlIiwic3Rhc2giLCJvdmFsIiwib3BfbWF0aG1sQnVpbGRlciIsIm9wZXJhdG9yIiwic2luZ2xlQ2hhckJpZ09wcyIsImZOYW1lIiwic2luZ2xlQ2hhckludGVncmFscyIsIl9tYWNyb3MiLCJkZWZpbmVNYWNybyIsIm9wZXJhdG9ybmFtZV9odG1sQnVpbGRlciIsImNoaWxkVGV4dCIsInNpemluZ0dyb3VwIiwiaXNBbGxTdHJpbmciLCJ3b3JkIiwiaWRlbnRpZmllciIsInNlbWlzaW1wbGUiLCJhbW91bnQiLCJkeSIsInNpemVGdW5jcyIsInNtYXNoSGVpZ2h0Iiwic21hc2hEZXB0aCIsInRiQXJnIiwibGV0dGVyIiwic21hc2hlZE5vZGUiLCJ0aGV0YSIsInBoaSIsImxpbmVDbGVhcmFuY2UiLCJfZGVsaW1pdGVyJHNxcnRJbWFnZSIsImFkdmFuY2VXaWR0aCIsInNwYW5IZWlnaHQiLCJ0ZXhIZWlnaHQiLCJkZWxpbURlcHRoIiwicm9vdG0iLCJ0b1NoaWZ0Iiwicm9vdFZMaXN0Iiwicm9vdFZMaXN0V3JhcCIsInN0eWxpbmdfc3R5bGVNYXAiLCJuZXdTdHlsZSIsImJ1aWxkZXJEZWxlZ2F0ZSIsImh0bWxCdWlsZGVyRGVsZWdhdGUiLCJzdXBtIiwic3VibSIsIm1pblN1cFNoaWZ0IiwidmFsdWVCYXNlIiwidmFsdWVTdXAiLCJ2YWx1ZVN1YiIsInN1cFNoaWZ0Iiwic3ViU2hpZnQiLCJfbmV3T3B0aW9ucyIsImlzT2lpbnQiLCJtYXhXaWR0aCIsInBzaSIsImlzQnJhY2UiLCJfYmFzZTIiLCJfYmFzZSIsImRlZmF1bHRWYXJpYW50IiwiY3NzU3BhY2UiLCJyZWd1bGFyU3BhY2UiLCJvcmQiLCJwYWQiLCJwYWROb2RlIiwidGV4dEZvbnRGYW1pbGllcyIsInRleHRGb250V2VpZ2h0cyIsInRleHRGb250U2hhcGVzIiwib3B0aW9uc1dpdGhGb250IiwibWFrZVZlcmIiLCJzdGFyIiwic3JjX2Z1bmN0aW9ucyIsIlNvdXJjZUxvY2F0aW9uIiwic2Vjb25kIiwiVG9rZW4iLCJ0cmVhdEFzUmVsYXgiLCJlbmRUb2tlbiIsImNvbWJpbmluZ0RpYWNyaXRpY2FsTWFya3NFbmRSZWdleCIsImNvbWJpbmluZ0RpYWNyaXRpY2FsTWFya1N0cmluZyIsIkxleGVyIiwidG9rZW5SZWdleCIsImNhdGNvZGVzIiwic2V0Q2F0Y29kZSIsImNoYXIiLCJsZXgiLCJsYXN0SW5kZXgiLCJubEluZGV4IiwiTmFtZXNwYWNlIiwiYnVpbHRpbnMiLCJnbG9iYWxNYWNyb3MiLCJjdXJyZW50IiwidW5kZWZTdGFjayIsInVuZGVmcyIsInVuZGVmIiwiZW5kR3JvdXBzIiwiaGFzIiwic3JjX21hY3JvcyIsInQiLCJleHBhbmRPbmNlIiwiY29uc3VtZUFyZ3MiLCJkaWdpdFRvTnVtYmVyIiwiZGlnaXQiLCJuZXdjb21tYW5kIiwiZXhpc3RzT0siLCJub25leGlzdHNPSyIsImV4aXN0cyIsImlzRGVmaW5lZCIsImFyZ1RleHQiLCJleHBhbmROZXh0VG9rZW4iLCJkb3RzQnlUb2tlbiIsInRoZWRvdHMiLCJleHBhbmRBZnRlckZ1dHVyZSIsInNwYWNlQWZ0ZXJEb3RzIiwibGF0ZXhSYWlzZUEiLCJpbXBsaWNpdENvbW1hbmRzIiwiTWFjcm9FeHBhbmRlciIsImV4cGFuc2lvbkNvdW50IiwiZmVlZCIsIm5ld01vZGUiLCJwdXNoVG9rZW5zIiwiX3RoaXMkc3RhY2siLCJzY2FuQXJndW1lbnQiLCJpc09wdGlvbmFsIiwiX3RoaXMkY29uc3VtZUFyZyIsIl90aGlzJGNvbnN1bWVBcmcyIiwiZGVsaW1zIiwiaXNEZWxpbWl0ZWQiLCJleHBhbmRhYmxlT25seSIsInRvcFRva2VuIiwiZXhwYW5zaW9uIiwiX2dldEV4cGFuc2lvbiIsIl90b2tlbnMiLCJleHBhbmRlZCIsImV4cGFuZE1hY3JvIiwib2xkU3RhY2tMZW5ndGgiLCJjYXRjb2RlIiwic3RyaXBwZWQiLCJib2R5TGV4ZXIiLCJ1bmljb2RlQWNjZW50cyIsInVuaWNvZGVTeW1ib2xzIiwiUGFyc2VyIiwiYnJlYWtPbkluZml4IiwiZW5kT2ZFeHByZXNzaW9uIiwicGFyc2VBdG9tIiwiZm9ybUxpZ2F0dXJlcyIsImhhbmRsZUluZml4Tm9kZXMiLCJvdmVySW5kZXgiLCJudW1lck5vZGUiLCJkZW5vbU5vZGUiLCJudW1lckJvZHkiLCJkZW5vbUJvZHkiLCJoYW5kbGVTdXBTdWJzY3JpcHQiLCJzeW1ib2xUb2tlbiIsInBhcnNlR3JvdXAiLCJ0ZXh0b3JkQXJyYXkiLCJzdXBlcnNjcmlwdCIsInN1YnNjcmlwdCIsInByaW1lIiwicHJpbWVzIiwiZnVuY0RhdGEiLCJfdGhpcyRwYXJzZUFyZ3VtZW50cyIsInRvdGFsQXJncyIsImFyZ1R5cGUiLCJwYXJzZUdyb3VwT2ZUeXBlIiwib3B0aW9uYWwiLCJwYXJzZUNvbG9yR3JvdXAiLCJwYXJzZVVybEdyb3VwIiwicGFyc2VBcmd1bWVudEdyb3VwIiwicGFyc2VTdHJpbmdHcm91cCIsIm1vZGVOYW1lIiwiYXJnVG9rZW4iLCJwYXJzZVJlZ2V4R3JvdXAiLCJyZWdleCIsImZpcnN0VG9rZW4iLCJsYXN0VG9rZW4iLCJncm91cEVuZCIsInBhcnNlU3ltYm9sIiwidiIsIm51Y2xldXMiLCJzcmNfcGFyc2VUcmVlIiwidG9QYXJzZSIsIlR5cGVFcnJvciIsImJhc2VOb2RlIiwicmVuZGVyVG9Eb21UcmVlIiwiY29tcGF0TW9kZSIsInJlbmRlckVycm9yIiwia2F0ZXhOb2RlIiwibWF0aE1MTm9kZSIsIl9odG1sTm9kZSIsImJ1aWxkVHJlZSIsInZlcnNpb24iLCJyZW5kZXJUb1N0cmluZyIsIl9fcGFyc2UiLCJfX3JlbmRlclRvRG9tVHJlZSIsIl9fcmVuZGVyVG9IVE1MVHJlZSIsImJ1aWxkSFRNTFRyZWUiLCJfX3NldEZvbnRNZXRyaWNzIiwiX19kZWZpbmVTeW1ib2wiLCJfX2RlZmluZU1hY3JvIiwiX19kb21UcmVlIiwibW9kdWxlIiwiam9pbkJhY2t3YXJkIiwiJGN1cnNvciIsImVuZE9mVGV4dGJsb2NrIiwiJGN1dCIsImZpbmRDdXRCZWZvcmUiLCJpc29sYXRpbmciLCJkZWxldGVCYXJyaWVyIiwidGV4dGJsb2NrQXQiLCJkZWxldGVSYW5nZSIsImlzQXRvbSIsIm9ubHkiLCJzZWxlY3ROb2RlQmFja3dhcmQiLCJyZWYiLCIkaGVhZCIsIiRwb3MiLCJqb2luRm9yd2FyZCIsImZpbmRDdXRBZnRlciIsInNlbGVjdE5vZGVGb3J3YXJkIiwiam9pblVwIiwicG9pbnQiLCJzZWwiLCJub2RlU2VsIiwiam9pblBvaW50Iiwiam9pbkRvd24iLCIkYW5jaG9yIiwiZGVmYXVsdEJsb2NrQXQiLCJlZGdlQ291bnQiLCJlZGdlIiwiaGFzUmVxdWlyZWRBdHRycyIsImV4aXRDb2RlIiwiYWJvdmUiLCJBbGxTZWxlY3Rpb24iLCJpbmxpbmVDb250ZW50IiwibGlmdEVtcHR5QmxvY2siLCJzcGxpdEJsb2NrIiwiZGVmbHQiLCJjYW4iLCIkZmlyc3QiLCJzZXROb2RlTWFya3VwIiwic3BsaXRCbG9ja0tlZXBNYXJrcyIsInN0b3JlZE1hcmtzIiwiZW5zdXJlTWFya3MiLCJzZWxlY3RQYXJlbnROb2RlIiwic2FtZSIsInNoYXJlZERlcHRoIiwic2VsZWN0QWxsIiwiY29ubiIsImNsZWFySW5jb21wYXRpYmxlIiwiam9pbk1heWJlQ2xlYXIiLCJjYW5EZWxBZnRlciIsIm1hdGNoVHlwZSIsInZhbGlkRW5kIiwiam9pbkF0Iiwic2VsQWZ0ZXIiLCJhdCIsIndyYXAkMSIsImFmdGVyVGV4dCIsImFmdGVyRGVwdGgiLCJlbmQkMSIsImkkMSIsIndyYXBJbiIsImFwcGxpY2FibGUiLCJoYXNNYXJrdXAiLCJ0b2dnbGVNYXJrIiwibWFya1R5cGUiLCJyYW5nZXMiLCJsb29wIiwiYWxsb3dzTWFya1R5cGUiLCJyZXR1cm5lZCIsIm1hcmtBcHBsaWVzIiwiaXNJblNldCIsInJlbW92ZVN0b3JlZE1hcmsiLCJhZGRTdG9yZWRNYXJrIiwicmVmJDEiLCJyYW5nZUhhc01hcmsiLCJyZWYkMiIsIiRmcm9tJDEiLCIkdG8kMSIsInJlbW92ZU1hcmsiLCJzcGFjZVN0YXJ0Iiwic3BhY2VFbmQiLCJhZGRNYXJrIiwiYXV0b0pvaW4iLCJpc0pvaW5hYmxlIiwiaXNBcnJheSIsImlzR2VuZXJpYyIsIm1hcHMiLCJfcyIsIl9lIiwiam9pbmFibGUiLCJtYXliZUNoaWxkIiwiaSQyIiwid3JhcERpc3BhdGNoRm9ySm9pbiIsImxlbiIsImFyZ3VtZW50cyIsImJhY2tzcGFjZSIsImRlbCIsIm1hY0Jhc2VLZXltYXAiLCJuYXZpZ2F0b3IiLCJwbGF0Zm9ybSIsIm9zIiwiY3V0T2ZmIiwiaGFuZGxlVGV4dElucHV0IiwicnVuIiwiaGFuZGxlRE9NRXZlbnRzIiwiY29tcG9zaXRpb25lbmQiLCJzZXRUaW1lb3V0IiwiaXNJbnB1dFJ1bGVzIiwiY29tcG9zaW5nIiwidGV4dEJlZm9yZSIsInRleHRCZXR3ZWVuIiwidHJhbnNmb3JtIiwidW5kb0lucHV0UnVsZSIsInVuZG9hYmxlIiwidG9VbmRvIiwiaW52ZXJ0IiwiZG9jcyIsImVtRGFzaCIsImVsbGlwc2lzIiwib3BlbkRvdWJsZVF1b3RlIiwiY2xvc2VEb3VibGVRdW90ZSIsIm9wZW5TaW5nbGVRdW90ZSIsImNsb3NlU2luZ2xlUXVvdGUiLCJzbWFydFF1b3RlcyIsInJlZ2V4cCIsImpvaW5QcmVkaWNhdGUiLCJjaHJvbWUiLCJ1c2VyQWdlbnQiLCJzYWZhcmkiLCJ2ZW5kb3IiLCJnZWNrbyIsIm1hYyIsImllIiwiYnJva2VuTW9kaWZpZXJOYW1lcyIsIm5vcm1hbGl6ZUtleU5hbWUiLCJjdHJsIiwibWV0YSIsIm1vZCIsIm1vZGlmaWVycyIsImFsdEtleSIsImN0cmxLZXkiLCJtZXRhS2V5Iiwic2hpZnRLZXkiLCJiaW5kaW5ncyIsImhhbmRsZUtleURvd24iLCJrZXlkb3duSGFuZGxlciIsIm5vcm1hbGl6ZSIsImJhc2VOYW1lIiwia2V5Q29kZSIsImtleU5hbWUiLCJpc0NoYXIiLCJkaXJlY3QiLCJmcm9tQ29kZSIsIndpdGhTaGlmdCIsIk9yZGVyZWRNYXAiLCJjb25zdHJ1Y3RvciIsIm5ld0tleSIsImFkZFRvU3RhcnQiLCJhZGRUb0VuZCIsImFkZEJlZm9yZSIsInBsYWNlIiwid2l0aG91dCIsImYiLCJwcmVwZW5kIiwic3VidHJhY3QiLCJjaGlsZEEiLCJjaGlsZEIiLCJwb3NBIiwicG9zQiIsImlBIiwiaUIiLCJtaW5TaXplIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiY29uZmlndXJhYmxlIiwibm9kZVN0YXJ0IiwiYmxvY2tTZXBhcmF0b3IiLCJsZWFmVGV4dCIsIm90aGVyIiwibGFzdCIsIndpdGhUZXh0IiwiY3V0IiwiY3V0QnlJbmRleCIsInJlcGxhY2VDaGlsZCIsIlJhbmdlRXJyb3IiLCJwIiwib3RoZXJQb3MiLCJyZXRJbmRleCIsImN1clBvcyIsInRvU3RyaW5nSW5uZXIiLCJ0b0pTT04iLCJmcm9tSlNPTiIsIm5vZGVGcm9tSlNPTiIsImZyb21BcnJheSIsImFycmF5Iiwiam9pbmVkIiwiZGVmaW5lUHJvcGVydGllcyIsImNvbXBhcmVEZWVwIiwicCQxIiwiTWFyayIsIlJlcGxhY2VFcnJvciIsImVyciIsImFkZFRvU2V0IiwicGxhY2VkIiwiZXhjbHVkZXMiLCJyYW5rIiwicmVtb3ZlRnJvbVNldCIsImpzb24iLCJzYW1lU2V0Iiwic2V0RnJvbSIsIm5vbmUiLCJvcGVuU3RhcnQiLCJvcGVuRW5kIiwicHJvdG90eXBlQWNjZXNzb3JzJDEiLCJyZW1vdmVSYW5nZSIsImluZGV4VG8iLCJvZmZzZXRUbyIsImluc2VydEludG8iLCJkaXN0IiwicmVwbGFjZU91dGVyIiwiJGFsb25nIiwiZXh0cmEiLCJyZXNvbHZlTm9DYWNoZSIsInByZXBhcmVTbGljZUZvclJlcGxhY2UiLCJyZXBsYWNlVGhyZWVXYXkiLCJyZXBsYWNlVHdvV2F5IiwiY2hlY2tKb2luIiwiJGJlZm9yZSIsIiRhZnRlciIsImFkZE5vZGUiLCJhZGRSYW5nZSIsInRleHRPZmZzZXQiLCJ2YWxpZENvbnRlbnQiLCJpbnNlcnRBdCIsInJlbW92ZUJldHdlZW4iLCJtYXhPcGVuIiwib3Blbklzb2xhdGluZyIsIm4kMSIsIlJlc29sdmVkUG9zIiwicHJvdG90eXBlQWNjZXNzb3JzJDIiLCJyZXNvbHZlRGVwdGgiLCJkT2ZmIiwicG9zQXRJbmRleCIsInRtcCIsImluY2x1c2l2ZSIsIm1hcmtzQWNyb3NzIiwiaXNJbmxpbmUiLCJwcmVkIiwicmVtIiwicmVzb2x2ZUNhY2hlZCIsInJlc29sdmVDYWNoZSIsImNhY2hlZCIsInJlc29sdmVDYWNoZVBvcyIsInJlc29sdmVDYWNoZVNpemUiLCJwcm90b3R5cGVBY2Nlc3NvcnMkMSQxIiwiZW1wdHlBdHRycyIsIk5vZGUiLCJwcm90b3R5cGVBY2Nlc3NvcnMkMyIsInN0YXJ0UG9zIiwiZGVmYXVsdEF0dHJzIiwiaW5jbHVkZVBhcmVudHMiLCJjaGlsZEFmdGVyIiwiY2hpbGRCZWZvcmUiLCJ0b0RlYnVnU3RyaW5nIiwid3JhcE1hcmtzIiwiY29udGVudE1hdGNoIiwibWF0Y2hGcmFnbWVudCIsInJlcGxhY2VtZW50Iiwib25lIiwidHdvIiwiYWxsb3dzTWFya3MiLCJjYW5BcHBlbmQiLCJjaGVjayIsIm0iLCJtYXJrRnJvbUpTT04iLCJKU09OIiwic3RyaW5naWZ5IiwiQ29udGVudE1hdGNoIiwid3JhcENhY2hlIiwicHJvdG90eXBlQWNjZXNzb3JzJDQiLCJub2RlVHlwZXMiLCJzdHJlYW0iLCJUb2tlblN0cmVhbSIsImV4cHIiLCJwYXJzZUV4cHIiLCJuZmEiLCJsYWJlbGVkIiwiY29ubmVjdCIsImNvbXBpbGUiLCJleHBycyIsInJlZHVjZSIsIm91dCIsImxvb3AkMSIsImN1ciIsIm5leHQkMSIsIm5leHQkMiIsInRlcm0iLCJlZGdlcyIsImV4cGxvcmUiLCJzdGF0ZXMiLCJrbm93biIsIm51bGxGcm9tIiwic3RhdGVzJDEiLCJjbXAiLCJ3b3JrIiwiZGVhZCIsImNoZWNrRm9yRGVhZEVuZHMiLCJjb21wYXRpYmxlIiwiZmlsbEJlZm9yZSIsInRvRW5kIiwic2VlbiIsInNlYXJjaCIsImZpbmlzaGVkIiwidHAiLCJjb21wdXRlZCIsImNvbXB1dGVXcmFwcGluZyIsImFjdGl2ZSIsInZpYSIsInNjYW4iLCJwcm90b3R5cGVBY2Nlc3NvcnMkMSQyIiwicGFyc2VFeHByU2VxIiwiZWF0IiwicGFyc2VFeHByU3Vic2NyaXB0IiwidHlwZU5hbWUiLCJ0eXBlJDEiLCJyZXNvbHZlTmFtZSIsInBhcnNlRXhwckF0b20iLCJwYXJzZUV4cHJSYW5nZSIsInBhcnNlTnVtIiwiZGVmYXVsdHMiLCJhdHRyTmFtZSIsImhhc0RlZmF1bHQiLCJjb21wdXRlQXR0cnMiLCJidWlsdCIsImdpdmVuIiwiaW5pdEF0dHJzIiwiQXR0cmlidXRlIiwiU3ludGF4RXJyb3IiLCJOb2RlVHlwZSIsIm1hcmtTZXQiLCJwcm90b3R5cGVBY2Nlc3NvcnMkNSIsImlzUmVxdWlyZWQiLCJjcmVhdGVDaGVja2VkIiwiYWxsb3dlZE1hcmtzIiwidG9wVHlwZSIsInRvcE5vZGUiLCJwcm90b3R5cGVBY2Nlc3NvcnMkMSQzIiwiTWFya1R5cGUiLCJleGNsdWRlZCIsImluc3RhbmNlIiwiY29udGVudEV4cHJDYWNoZSIsInByb3AkMSIsImNvbnRlbnRFeHByIiwibWFya0V4cHIiLCJnYXRoZXJNYXJrcyIsInByb3AkMiIsImV4Y2wiLCJ0b3BOb2RlVHlwZSIsIndyYXBwaW5ncyIsIm9rIiwibWFyayQxIiwidGV4dCQxIiwidGhpcyQxIiwidGFncyIsIm5vcm1hbGl6ZUxpc3RzIiwic29tZSIsIlBhcnNlQ29udGV4dCIsImFkZEFsbCIsImZpbmlzaCIsInBhcnNlU2xpY2UiLCJtYXRjaFRhZyIsIm1hdGNoZXMiLCJuYW1lc3BhY2UiLCJuYW1lc3BhY2VVUkkiLCJtYXRjaGVzQ29udGV4dCIsIm1hdGNoU3R5bGUiLCJzY2hlbWFSdWxlcyIsInJ1bGVzJDEiLCJuYW1lJDEiLCJkb21QYXJzZXIiLCJibG9ja1RhZ3MiLCJhZGRyZXNzIiwiYXJ0aWNsZSIsImFzaWRlIiwiYmxvY2txdW90ZSIsImNhbnZhcyIsImRkIiwiZGl2IiwiZGwiLCJmaWVsZHNldCIsImZpZ2NhcHRpb24iLCJmaWd1cmUiLCJmb290ZXIiLCJmb3JtIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2IiwiaGVhZGVyIiwiaGdyb3VwIiwiaHIiLCJsaSIsIm5vc2NyaXB0Iiwib2wiLCJwcmUiLCJzZWN0aW9uIiwidGZvb3QiLCJ1bCIsImlnbm9yZVRhZ3MiLCJoZWFkIiwib2JqZWN0IiwidGl0bGUiLCJsaXN0VGFncyIsIndzT3B0aW9uc0ZvciIsInByZXNlcnZlV2hpdGVzcGFjZSIsIk5vZGVDb250ZXh0IiwicGVuZGluZ01hcmtzIiwic29saWQiLCJhY3RpdmVNYXJrcyIsInN0YXNoTWFya3MiLCJwb3BGcm9tU3Rhc2hNYXJrIiwiYXBwbHlQZW5kaW5nIiwibmV4dFR5cGUiLCJwZW5kaW5nIiwibWFya01heUFwcGx5IiwiaW5saW5lQ29udGV4dCIsInBhcmVudE5vZGUiLCJub2RlTmFtZSIsIm9wZW4iLCJpc09wZW4iLCJ0b3BDb250ZXh0IiwidG9wT3B0aW9ucyIsInRvcE1hdGNoIiwiZmluZFBvc2l0aW9ucyIsIm5lZWRzQmxvY2siLCJwcm90b3R5cGVBY2Nlc3NvcnMkNiIsInNlbGVjdG9yIiwibXNNYXRjaGVzU2VsZWN0b3IiLCJ3ZWJraXRNYXRjaGVzU2VsZWN0b3IiLCJtb3pNYXRjaGVzU2VsZWN0b3IiLCJhZGRET00iLCJhZGRUZXh0Tm9kZSIsInJlYWRTdHlsZXMiLCJyZSIsInBhcnNlU3R5bGVzIiwiYWRkUGVuZGluZ01hcmsiLCJhZGRFbGVtZW50IiwicmVtb3ZlUGVuZGluZ01hcmsiLCJub2RlVmFsdWUiLCJkb21Ob2RlQmVmb3JlIiwicHJldmlvdXNTaWJsaW5nIiwiaW5zZXJ0Tm9kZSIsImZpbmRJblRleHQiLCJmaW5kSW5zaWRlIiwibWF0Y2hBZnRlciIsInJ1bGVJRCIsInByZXZJdGVtIiwibmV4dFNpYmxpbmciLCJub3JtYWxpemVMaXN0IiwicnVsZUZyb21Ob2RlIiwiaWdub3JlIiwiaWdub3JlRmFsbGJhY2siLCJza2lwIiwiY2xvc2VQYXJlbnQiLCJzeW5jIiwib2xkTmVlZHNCbG9jayIsImxlYWZGYWxsYmFjayIsImFkZEVsZW1lbnRCeVJ1bGUiLCJjb25zdW1pbmciLCJvd25lckRvY3VtZW50IiwiZmluZFBsYWNlIiwiY29udGludWVBZnRlciIsImVudGVyIiwic3RhcnRJbiIsImdldENvbnRlbnQiLCJjb250ZW50RE9NIiwiY29udGVudEVsZW1lbnQiLCJmaW5kQXJvdW5kIiwiY2hpbGROb2RlcyIsImZpbmRBdFBvaW50Iiwicm91dGUiLCJjeCIsImVudGVySW5uZXIiLCJ0ZXh0YmxvY2tGcm9tQ29udGV4dCIsImNsb3NlRXh0cmEiLCJwcmVzZXJ2ZVdTIiwidG9wT3BlbiIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwib3B0aW9uIiwidXNlUm9vdCIsIm1pbkRlcHRoIiwicGFydCIsIiRjb250ZXh0IiwiZmluZFNhbWVNYXJrSW5TZXQiLCJ1cHRvIiwic3Rhc2hNYXJrIiwiRE9NU2VyaWFsaXplciIsImdhdGhlclRvRE9NIiwic2VyaWFsaXplRnJhZ21lbnQiLCJrZWVwIiwicmVuZGVyZWQiLCJzcGFubmluZyIsIm1hcmtET00iLCJzZXJpYWxpemVNYXJrIiwic2VyaWFsaXplTm9kZUlubmVyIiwicmVuZGVyU3BlYyIsIm9uQ29udGVudCIsInN0cnVjdHVyZSIsInhtbE5TIiwic3BhY2UkMSIsInNldEF0dHJpYnV0ZU5TIiwiaW5uZXJDb250ZW50IiwiZG9tU2VyaWFsaXplciIsIm5vZGVzRnJvbVNjaGVtYSIsIm1hcmtzRnJvbVNjaGVtYSIsImNsYXNzZXNCeUlkIiwiU2VsZWN0aW9uUmFuZ2UiLCJsYXN0Tm9kZSIsImxhc3RQYXJlbnQiLCJtYXBGcm9tIiwicmVwbGFjZVJhbmdlIiwic2VsZWN0aW9uVG9JbnNlcnRpb25FbmQiLCJmaW5kRnJvbSIsInRleHRPbmx5IiwiZmluZFNlbGVjdGlvbkluIiwiYmlhcyIsImpzb25JRCIsInNlbGVjdGlvbkNsYXNzIiwiZ2V0Qm9va21hcmsiLCJiZXR3ZWVuIiwidmlzaWJsZSIsIlRleHRCb29rbWFyayIsImRQb3MiLCJtYXBSZXN1bHQiLCJkZWxldGVkIiwiTm9kZUJvb2ttYXJrIiwiaXNTZWxlY3RhYmxlIiwiQWxsQm9va21hcmsiLCJzdGFydExlbiIsIlJlcGxhY2VTdGVwIiwiX2Zyb20iLCJfdG8iLCJfbmV3RnJvbSIsIm5ld1RvIiwiVHJhbnNhY3Rpb24iLCJUcmFuc2Zvcm0iLCJ0aW1lIiwiRGF0ZSIsIm5vdyIsImN1clNlbGVjdGlvbiIsImN1clNlbGVjdGlvbkZvciIsInVwZGF0ZWQiLCJzdG9yZWRNYXJrc1NldCIsInNjcm9sbGVkSW50b1ZpZXciLCJzZXRTdG9yZWRNYXJrcyIsImFkZFN0ZXAiLCJzZXRUaW1lIiwicmVwbGFjZVNlbGVjdGlvbiIsInJlcGxhY2VTZWxlY3Rpb25XaXRoIiwiaW5oZXJpdE1hcmtzIiwiRmllbGREZXNjIiwiZGVzYyIsImJhc2VGaWVsZHMiLCJfbWFya3MiLCJfb2xkIiwiQ29uZmlndXJhdGlvbiIsImZpZWxkcyIsInBsdWdpbnNCeUtleSIsImZpbHRlclRyYW5zYWN0aW9uIiwicm9vdFRyIiwidHJzIiwiYXBwbHlJbm5lciIsImhhdmVOZXciLCJhcHBlbmRUcmFuc2FjdGlvbiIsIm9sZFN0YXRlIiwibmV3SW5zdGFuY2UiLCJmaWVsZCIsImFwcGx5TGlzdGVuZXJzIiwiJGNvbmZpZyIsInBsdWdpbkZpZWxkcyIsImFkZEFwcGx5TGlzdGVuZXIiLCJyZW1vdmVBcHBseUxpc3RlbmVyIiwiYmluZFByb3BzIiwiY3JlYXRlS2V5IiwiZmFjdG9yMTYiLCJwb3ciLCJyZWNvdmVySW5kZXgiLCJNYXBSZXN1bHQiLCJyZWNvdmVyIiwiaW52ZXJ0ZWQiLCJyZWNvdmVyT2Zmc2V0IiwiYXNzb2MiLCJfbWFwIiwic2ltcGxlIiwib2xkSW5kZXgiLCJuZXdJbmRleCIsIm9sZFNpemUiLCJuZXdTaXplIiwidG91Y2hlcyIsIm9sZFN0YXJ0IiwibmV3U3RhcnQiLCJNYXBwaW5nIiwibWlycm9yIiwiVHJhbnNmb3JtRXJyb3IiLCJhcHBlbmRNYXAiLCJtaXJyb3JzIiwic2V0TWlycm9yIiwiYXBwZW5kTWFwcGluZyIsInN0YXJ0U2l6ZSIsIm1pcnIiLCJnZXRNaXJyb3IiLCJhcHBlbmRNYXBwaW5nSW52ZXJ0ZWQiLCJ0b3RhbFNpemUiLCJpbnZlcnNlIiwiY29yciIsIm11c3RPdmVycmlkZSIsIm1heWJlU3RlcCIsImZhaWxlZCIsImdldE1hcCIsInN0ZXBzQnlJRCIsIlN0ZXAiLCJfZG9jIiwiX21hcHBpbmciLCJtZXJnZSIsIl9vdGhlciIsInN0ZXBUeXBlIiwic3RlcENsYXNzIiwiU3RlcFJlc3VsdCIsImZhaWwiLCJmcm9tUmVwbGFjZSIsImNvbnRlbnRCZXR3ZWVuIiwic2xpY2UkMSIsImdhcEZyb20iLCJnYXBUbyIsImluc2VydGVkIiwiY2FuQ3V0IiwiaW5uZXJSYW5nZSIsImFyb3VuZCIsIm91dGVyIiwiZmluZFdyYXBwaW5nT3V0c2lkZSIsImluc2lkZSIsImlubmVyTWF0Y2giLCJmaW5kV3JhcHBpbmdJbnNpZGUiLCJ3aXRoQXR0cnMiLCJ0eXBlc0FmdGVyIiwiaW5uZXJUeXBlIiwiaW5kZXgkMSIsInJlc3QiLCJiYXNlVHlwZSIsImluc2VydFBvaW50IiwiZCQxIiwiZHJvcFBvaW50IiwicGFzcyIsImluc2VydFBvcyIsImZpdHMiLCJtYXBGcmFnbWVudCIsImdhcFN0YXJ0IiwiZ2FwRW5kIiwic3BsaXR0aW5nIiwic3BsaXR0aW5nJDEiLCJjYW5DaGFuZ2VUeXBlIiwic3RhcnRNIiwiZW5kTSIsIm5ld05vZGUiLCJ0eXBlQWZ0ZXIiLCJBZGRNYXJrU3RlcCIsIm9sZFNsaWNlIiwiUmVtb3ZlTWFya1N0ZXAiLCJyZXBsYWNlU3RlcCIsImZpdHNUcml2aWFsbHkiLCJGaXR0ZXIiLCJmaXQiLCJyZW1vdmVkIiwiYWRkZWQiLCJyZW1vdmluZyIsImFkZGluZyIsIm5ld1NldCIsIm1hdGNoZWQiLCJ0b1JlbW92ZSIsImZvdW5kJDEiLCJwYXJlbnRUeXBlIiwiZGVsU3RlcHMiLCJhbGxvd2VkIiwidW5wbGFjZWQiLCJmcm9udGllciIsImRyb3BGcm9tRnJhZ21lbnQiLCJjb3VudCIsImFkZFRvRnJhZ21lbnQiLCJjb250ZW50QXQiLCJjbG9zZU5vZGVTdGFydCIsImNvbnRlbnRBZnRlckZpdHMiLCJpbnZhbGlkTWFya3MiLCJjbG9zZUZyYWdtZW50Iiwib2xkT3BlbiIsIm5ld09wZW4iLCJjb3ZlcmVkRGVwdGhzIiwiZmluZEZpdHRhYmxlIiwicGxhY2VOb2RlcyIsIm9wZW5Nb3JlIiwiZHJvcE5vZGUiLCJtb3ZlSW5saW5lIiwibXVzdE1vdmVJbmxpbmUiLCJwbGFjZWRTaXplIiwic2xpY2VEZXB0aCIsImZyb250aWVyRGVwdGgiLCJpbmplY3QiLCJvcGVuQXRFbmQiLCJjbG9zZUZyb250aWVyTm9kZSIsIm9wZW5Gcm9udGllck5vZGUiLCJ0YWtlbiIsIm9wZW5FbmRDb3VudCIsImZpbmRDbG9zZUxldmVsIiwiZHJvcElubmVyIiwibWF0Y2gkMSIsIm1vdmUiLCJ0YXJnZXREZXB0aHMiLCJwcmVmZXJyZWRUYXJnZXQiLCJwcmVmZXJyZWRUYXJnZXRJbmRleCIsImxlZnROb2RlcyIsInByZWZlcnJlZERlcHRoIiwib3BlbkRlcHRoIiwidGFyZ2V0RGVwdGgiLCJleHBhbmQiLCJzdGFydFN0ZXBzIiwiY292ZXJlZCIsImllX2VkZ2UiLCJpZV91cHRvMTAiLCJpZV8xMXVwIiwiaWVfdmVyc2lvbiIsImRvY3VtZW50TW9kZSIsImdlY2tvX3ZlcnNpb24iLCJjaHJvbWVfdmVyc2lvbiIsImlvcyIsIm1heFRvdWNoUG9pbnRzIiwiYW5kcm9pZCIsIndlYmtpdCIsImRvY3VtZW50RWxlbWVudCIsIndlYmtpdF92ZXJzaW9uIiwiZG9tSW5kZXgiLCJhc3NpZ25lZFNsb3QiLCJob3N0IiwicmV1c2VkUmFuZ2UiLCJ0ZXh0UmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldEVuZCIsInNldFN0YXJ0IiwiaXNFcXVpdmFsZW50UG9zaXRpb24iLCJ0YXJnZXROb2RlIiwidGFyZ2V0T2ZmIiwic2NhbkZvciIsImF0b21FbGVtZW50cyIsImhhc0Jsb2NrRGVzYyIsImNvbnRlbnRFZGl0YWJsZSIsInBtVmlld0Rlc2MiLCJzZWxlY3Rpb25Db2xsYXBzZWQiLCJkb21TZWwiLCJjb2xsYXBzZWQiLCJpc0NvbGxhcHNlZCIsInJhbmdlQ291bnQiLCJnZXRSYW5nZUF0Iiwia2V5RXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsIndpbmRvd1JlY3QiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImdldFNpZGUiLCJjbGllbnRSZWN0IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjYWxlWCIsIm9mZnNldFdpZHRoIiwic2NhbGVZIiwib2Zmc2V0SGVpZ2h0Iiwic2Nyb2xsUmVjdEludG9WaWV3Iiwic3RhcnRET00iLCJzY3JvbGxUaHJlc2hvbGQiLCJzb21lUHJvcCIsInNjcm9sbE1hcmdpbiIsImF0VG9wIiwiYm91bmRpbmciLCJtb3ZlWCIsIm1vdmVZIiwiZGVmYXVsdFZpZXciLCJzY3JvbGxCeSIsInN0YXJ0WCIsInNjcm9sbExlZnQiLCJzdGFydFkiLCJzY3JvbGxUb3AiLCJkWCIsImRZIiwic2Nyb2xsU3RhY2siLCJyZXN0b3JlU2Nyb2xsU3RhY2siLCJkVG9wIiwicHJldmVudFNjcm9sbFN1cHBvcnRlZCIsImZpbmRPZmZzZXRJbk5vZGUiLCJjb29yZHMiLCJjbG9zZXN0IiwiY29vcmRzQ2xvc2VzdCIsImR4Q2xvc2VzdCIsInJvd0JvdCIsInJvd1RvcCIsImNoaWxkSW5kZXgiLCJyZWN0cyIsImdldENsaWVudFJlY3RzIiwiZHgiLCJzaW5nbGVSZWN0IiwiaW5SZWN0IiwiZmluZE9mZnNldEluVGV4dCIsImVsZW1lbnRGcm9tUG9pbnQiLCJlbGVtZW50IiwiYm94Iiwic3RhcnRJIiwicG9zQXRDb29yZHMiLCJhc3NpZ24kMSIsInJvb3QiLCJjYXJldFBvc2l0aW9uRnJvbVBvaW50IiwicG9zJDEiLCJvZmZzZXROb2RlIiwiY2FyZXRSYW5nZUZyb21Qb2ludCIsInN0YXJ0Q29udGFpbmVyIiwic3RhcnRPZmZzZXQiLCJkcmFnZ2FibGUiLCJ0YXJnZXRLbHVkZ2UiLCJib3gkMSIsIm91dHNpZGUiLCJkb2NWaWV3IiwibmVhcmVzdERlc2MiLCJwb3NCZWZvcmUiLCJwb3NBZnRlciIsInBvc0Zyb21ET00iLCJwb3NGcm9tQ2FyZXQiLCJwb3NGcm9tRWxlbWVudCIsInBvc0F0U3RhcnQiLCJib3JkZXIiLCJCSURJIiwiY29vcmRzQXRQb3MiLCJkb21Gcm9tUG9zIiwic3VwcG9ydEVtcHR5UmFuZ2UiLCJ0YWtlU2lkZSIsImZsYXR0ZW5WIiwicmVjdEJlZm9yZSIsInJlY3RBZnRlciIsImZsYXR0ZW5IIiwiYmVmb3JlJDEiLCJhZnRlciQxIiwiaWdub3JlRm9yQ29vcmRzIiwidGFyZ2V0JDEiLCJ4Iiwid2l0aEZsdXNoZWRTdGF0ZSIsInZpZXdTdGF0ZSIsImFjdGl2ZUVsZW1lbnQiLCJtYXliZVJUTCIsImNhY2hlZFN0YXRlIiwiY2FjaGVkRGlyIiwiY2FjaGVkUmVzdWx0IiwiVmlld0Rlc2MiLCJkaXJ0eSIsInBvc0F0RW5kIiwiY29udGVudExvc3QiLCJkb21BdG9tIiwibWF0Y2hlc1dpZGdldCIsIm1hdGNoZXNNYXJrIiwibWF0Y2hlc05vZGUiLCJtYXRjaGVzSGFjayIsIl9ub2RlTmFtZSIsInBhcnNlUnVsZSIsInBvc0JlZm9yZUNoaWxkIiwibG9jYWxQb3NGcm9tRE9NIiwiZG9tQmVmb3JlIiwiZG9tQWZ0ZXIiLCJkZXNjJDEiLCJzZWFyY2gkMSIsIm9ubHlOb2RlcyIsImdldERlc2MiLCJub2RlRE9NIiwiZGVzY0F0IiwiVHJhaWxpbmdIYWNrVmlld0Rlc2MiLCJXaWRnZXRWaWV3RGVzYyIsInByZXYkMSIsImVudGVyJDEiLCJwYXJzZVJhbmdlIiwiZnJvbU9mZnNldCIsInRvT2Zmc2V0IiwiY2hpbGRCYXNlIiwiZW1wdHlDaGlsZEF0IiwiaiQxIiwiZG9tQWZ0ZXJQb3MiLCJmb3JjZSIsImFuY2hvckRPTSIsImhlYWRET00iLCJnZXRTZWxlY3Rpb24iLCJicktsdWRnZSIsIm9mZnNldCQxIiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJhbmNob3JOb2RlIiwiYW5jaG9yT2Zmc2V0IiwiZG9tU2VsRXh0ZW5kZWQiLCJjb2xsYXBzZSIsIkRPTUV4Y2VwdGlvbiIsInJlbW92ZUFsbFJhbmdlcyIsIm11dGF0aW9uIiwibWFya0RpcnR5Iiwic3RhcnRJbnNpZGUiLCJlbmRJbnNpZGUiLCJtYXJrUGFyZW50c0RpcnR5Iiwibm90aGluZyIsInN0b3AiLCJpZ25vcmVTZWxlY3Rpb24iLCJDb21wb3NpdGlvblZpZXdEZXNjIiwidGV4dERPTSIsIm11dCIsIm9sZFZhbHVlIiwiTWFya1ZpZXdEZXNjIiwiY3VzdG9tIiwicmVwbGFjZU5vZGVzIiwiTm9kZVZpZXdEZXNjIiwib3V0ZXJEZWNvIiwiaW5uZXJEZWNvIiwidXBkYXRlQ2hpbGRyZW4iLCJkZXNjT2JqIiwiYXBwbHlPdXRlckRlY28iLCJDdXN0b21Ob2RlVmlld0Rlc2MiLCJUZXh0Vmlld0Rlc2MiLCJyZXBhcnNlSW5WaWV3Iiwic2FtZU91dGVyRGVjbyIsImNvbXBvc2l0aW9uIiwibG9jYWxDb21wb3NpdGlvbkluZm8iLCJsb2NhbENvbXBvc2l0aW9uIiwiY29tcG9zaXRpb25JbkNoaWxkIiwidXBkYXRlciIsIlZpZXdUcmVlVXBkYXRlciIsIm9uV2lkZ2V0Iiwib25Ob2RlIiwibG9jYWxzIiwiZGVjb0luZGV4IiwicmVzdE5vZGUiLCJwYXJlbnRJbmRleCIsIndpZGdldHMiLCJjb21wYXJlU2lkZSIsImNoaWxkJDEiLCJjdXRBdCIsImkkMyIsImZvckNoaWxkIiwiaXRlckRlY28iLCJpbnNpZGVOb2RlIiwic3luY1RvTWFya3MiLCJwbGFjZVdpZGdldCIsImNvbXBJbmRleCIsImZpbmROb2RlTWF0Y2giLCJmaW5kSW5kZXhXaXRoQ2hpbGQiLCJ1cGRhdGVOb2RlQXQiLCJ1cGRhdGVOZXh0Tm9kZSIsImFkZFRleHRibG9ja0hhY2tzIiwiZGVzdHJveVJlc3QiLCJjaGFuZ2VkIiwicHJvdGVjdExvY2FsQ29tcG9zaXRpb24iLCJyZW5kZXJEZXNjcyIsIm9sZENTUyIsImNzc1RleHQiLCJnZXRDb21wdXRlZFN0eWxlIiwibGlzdFN0eWxlIiwiaW9zSGFja3MiLCJuZWFyYnlUZXh0Tm9kZSIsInRleHRQb3MiLCJjaGlsZFN0YXJ0IiwiZmluZFRleHRJbkZyYWdtZW50IiwicmVtb3ZlQ2hpbGQiLCJjb21wb3NpdGlvbk5vZGVzIiwidXBkYXRlSW5uZXIiLCJ1cGRhdGVPdXRlckRlY28iLCJuZWVkc1dyYXAiLCJvbGRET00iLCJwYXRjaE91dGVyRGVjbyIsImNvbXB1dGVPdXRlckRlY28iLCJyZW1vdmVBdHRyaWJ1dGUiLCJkb2NWaWV3RGVzYyIsInBtSXNEZWNvIiwiaW5QYXJlbnQiLCJ0cmFja1dyaXRlcyIsInBhcmVudERPTSIsImRlc2NzIiwid3JpdHRlbiIsImNoaWxkRE9NIiwicm0iLCJpbnNlcnRCZWZvcmUiLCJPdXRlckRlY29MZXZlbCIsIm5vRGVjbyIsIm91dGVyRE9NIiwicHJldkNvbXB1dGVkIiwiY3VyQ29tcHV0ZWQiLCJjdXJET00iLCJwYXRjaEF0dHJpYnV0ZXMiLCJwcmV2TGlzdCIsImN1ckxpc3QiLCJyZW1vdmVQcm9wZXJ0eSIsImxvY2tlZE5vZGUiLCJsb2NrIiwicHJlTWF0Y2giLCJmSSIsImRJIiwiTWFwIiwic2VsZWN0aW9uRnJvbURPTSIsIm9yaWdpbiIsImluV2lkZ2V0IiwiaXNPbkVkZ2UiLCJzZWxlY3Rpb25CZXR3ZWVuIiwiZWRpdG9yT3duc1NlbGVjdGlvbiIsImhhc1NlbGVjdGlvbiIsInNlbGVjdGlvblRvRE9NIiwic3luY05vZGVTZWxlY3Rpb24iLCJtb3VzZURvd24iLCJhbGxvd0RlZmF1bHQiLCJkZWxheWVkU2VsZWN0aW9uU3luYyIsImRvbU9ic2VydmVyIiwic2V0Q3VyU2VsZWN0aW9uIiwiZGlzY29ubmVjdFNlbGVjdGlvbiIsImN1cnNvcldyYXBwZXIiLCJkaXNhYmxlZCIsInNlbGVjdEN1cnNvcldyYXBwZXIiLCJyZXNldEVkaXRhYmxlRnJvbSIsInJlc2V0RWRpdGFibGVUbyIsImJyb2tlblNlbGVjdEJldHdlZW5VbmVkaXRhYmxlIiwidGVtcG9yYXJpbHlFZGl0YWJsZU5lYXIiLCJyZXNldEVkaXRhYmxlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImhpZGVTZWxlY3Rpb25HdWFyZCIsInJlbW92ZUNsYXNzT25TZWxlY3Rpb25DaGFuZ2UiLCJjb25uZWN0U2VsZWN0aW9uIiwiZGVzdHJveUJldHdlZW4iLCJtYXhLZWVwIiwibWFya0Rlc2MiLCJkb21Ob2RlIiwibmV4dERPTSIsImFkZEhhY2tOb2RlIiwic2V0RWRpdGFibGUiLCJ3YXNEcmFnZ2FibGUiLCJsYXN0U2VsZWN0ZWRWaWV3RGVzYyIsImNsZWFyTm9kZVNlbGVjdGlvbiIsIm1vdmVTZWxlY3Rpb25CbG9jayIsIiRzaWRlIiwic2VsZWN0SG9yaXpvbnRhbGx5IiwibW9kcyIsIm5vZGVQb3MiLCJub2RlTGVuIiwiaXNJZ25vcmFibGUiLCJza2lwSWdub3JlZE5vZGVzTGVmdCIsIm1vdmVOb2RlIiwibW92ZU9mZnNldCIsImlzQmxvY2tOb2RlIiwic2V0U2VsRm9jdXMiLCJza2lwSWdub3JlZE5vZGVzUmlnaHQiLCJzZWxlY3RWZXJ0aWNhbGx5IiwiYmV5b25kIiwic3RvcE5hdGl2ZUhvcml6b250YWxEZWxldGUiLCJuZXh0Tm9kZSIsInN3aXRjaEVkaXRhYmxlIiwicmVzb2x2ZVNlbGVjdGlvbiIsInBhcnNlZFNlbCIsInNraXBDbG9zaW5nQW5kT3BlbmluZyIsImZyb21FbmQiLCJtYXlPcGVuIiwic2VyaWFsaXplRm9yQ2xpcGJvYXJkIiwiZGV0YWNoZWREb2MiLCJ3cmFwTWFwIiwicGFyc2VGcm9tQ2xpcGJvYXJkIiwicGxhaW5UZXh0IiwiaW5Db2RlIiwiYXNUZXh0IiwicGFyc2VkIiwibWV0YXMiLCJmaXJzdFRhZyIsImlubmVySFRNTCIsInJlYWRIVE1MIiwicXVlcnlTZWxlY3RvckFsbCIsInJlc3RvcmVSZXBsYWNlZFNwYWNlcyIsImNvbnRleHROb2RlIiwic2xpY2VEYXRhIiwiYWRkQ29udGV4dCIsImNsb3NlUmFuZ2UiLCJjbG9zZVNsaWNlIiwibGFzdFdyYXAiLCJpbkxhc3QiLCJhZGRUb1NpYmxpbmciLCJjbG9zZVJpZ2h0Iiwid3JhcHBlZCIsIndpdGhXcmFwcGVycyIsIm5vcm1hbGl6ZVNpYmxpbmdzIiwic2libGluZyIsInRoZWFkIiwidGJvZHkiLCJjYXB0aW9uIiwiY29sZ3JvdXAiLCJ0ZCIsInRoIiwiX2RldGFjaGVkRG9jIiwiaW1wbGVtZW50YXRpb24iLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJvYnNlcnZlT3B0aW9ucyIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJjaGFyYWN0ZXJEYXRhT2xkVmFsdWUiLCJhdHRyaWJ1dGVPbGRWYWx1ZSIsInN1YnRyZWUiLCJ1c2VDaGFyRGF0YSIsIlNlbGVjdGlvblN0YXRlIiwiRE9NT2JzZXJ2ZXIiLCJoYW5kbGVET01DaGFuZ2UiLCJxdWV1ZSIsImZsdXNoaW5nU29vbiIsIm9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9ucyIsInJlbW92ZWROb2RlcyIsImZsdXNoU29vbiIsImZsdXNoIiwiY3VycmVudFNlbGVjdGlvbiIsIm9uQ2hhckRhdGEiLCJwcmV2VmFsdWUiLCJvblNlbGVjdGlvbkNoYW5nZSIsInN1cHByZXNzaW5nU2VsZWN0aW9uVXBkYXRlcyIsImZvcmNlRmx1c2giLCJjbGVhclRpbWVvdXQiLCJvYnNlcnZlIiwidGFrZSIsInRha2VSZWNvcmRzIiwiZGlzY29ubmVjdCIsInN1cHByZXNzU2VsZWN0aW9uVXBkYXRlcyIsImlnbm9yZVNlbGVjdGlvbkNoYW5nZSIsImNvbnRhaW5lciIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwibmV3U2VsIiwidHlwZU92ZXIiLCJyZXN1bHQkMSIsInJlZ2lzdGVyTXV0YXRpb24iLCJicnMiLCJjc3NDaGVja2VkIiwid2hpdGVTcGFjZSIsImF0dHJpYnV0ZU5hbWUiLCJhZGRlZE5vZGVzIiwiZWRpdEhhbmRsZXJzIiwic2V0U2VsZWN0aW9uT3JpZ2luIiwibGFzdFNlbGVjdGlvbk9yaWdpbiIsImxhc3RTZWxlY3Rpb25UaW1lIiwiZW5zdXJlTGlzdGVuZXJzIiwiY3VycmVudEhhbmRsZXJzIiwiZXZlbnRIYW5kbGVycyIsInJ1bkN1c3RvbUhhbmRsZXIiLCJkZWZhdWx0UHJldmVudGVkIiwiZXZlbnRDb29yZHMiLCJjbGllbnRYIiwiY2xpZW50WSIsInJ1bkhhbmRsZXJPbkNvbnRleHQiLCJwcm9wTmFtZSIsInVwZGF0ZVNlbGVjdGlvbiIsImZvY3VzZWQiLCJoYW5kbGVEb3VibGVDbGljayIsImhhbmRsZVRyaXBsZUNsaWNrIiwiYnV0dG9uIiwiZGVmYXVsdFRyaXBsZUNsaWNrIiwiZm9yY2VET01GbHVzaCIsImVuZENvbXBvc2l0aW9uIiwia2V5ZG93biIsImluT3JOZWFyQ29tcG9zaXRpb24iLCJsYXN0S2V5Q29kZSIsImxhc3RLZXlDb2RlVGltZSIsImdldE1vZHMiLCJzYWZhcmlEb3duQXJyb3dCdWciLCJjYXB0dXJlS2V5RG93biIsImxhc3RJT1NFbnRlciIsImxhc3RJT1NFbnRlckZhbGxiYWNrVGltZW91dCIsImtleXVwIiwia2V5cHJlc3MiLCJjaGFyQ29kZSIsInNlbGVjdE5vZGVNb2RpZmllciIsIm1vdXNlZG93biIsImZsdXNoZWQiLCJsYXN0Q2xpY2siLCJjbGljayIsImlzTmVhciIsImRvbmUiLCJNb3VzZURvd24iLCJzdGFydERvYyIsIm1pZ2h0RHJhZyIsInRhcmdldERlc2MiLCJhZGRBdHRyIiwic2V0VW5lZGl0YWJsZSIsInVwIiwiYWJzIiwidGltZVN0YW1wIiwiY29tcG9zaXRpb25FbmRlZEF0Iiwic2VsZWN0ZWROb2RlIiwic2VsZWN0QXQiLCJzZWxlY3RDbGlja2VkTm9kZSIsInNlbGVjdENsaWNrZWRMZWFmIiwiaGFuZGxlU2luZ2xlQ2xpY2siLCJidXR0b25zIiwidG91Y2hkb3duIiwiY29udGV4dG1lbnUiLCJ0aW1lb3V0Q29tcG9zaXRpb24iLCJzY2hlZHVsZUNvbXBvc2VFbmQiLCJkZWxheSIsImNvbXBvc2luZ1RpbWVvdXQiLCJjbGVhckNvbXBvc2l0aW9uIiwiZm9yY2VVcGRhdGUiLCJjb21wb3NpdGlvbnN0YXJ0IiwiY29tcG9zaXRpb251cGRhdGUiLCJtYXJrQ3Vyc29yIiwiYnJva2VuQ2xpcGJvYXJkQVBJIiwiZG9QYXN0ZSIsInNpbmdsZU5vZGUiLCJzbGljZVNpbmdsZU5vZGUiLCJjbGlwYm9hcmREYXRhIiwiY2xlYXJEYXRhIiwic2V0RGF0YSIsInNlbGVjdE5vZGVDb250ZW50cyIsImJsdXIiLCJjYXB0dXJlQ29weSIsInBhc3RlIiwiZ2V0RGF0YSIsImNhcHR1cmVQYXN0ZSIsIkRyYWdnaW5nIiwiZHJhZ0NvcHlNb2RpZmllciIsImRyYWdzdGFydCIsImRhdGFUcmFuc2ZlciIsImVmZmVjdEFsbG93ZWQiLCJkcmFnZ2luZyIsImRyYWdlbmQiLCJkcmFnb3ZlciIsImRyYWdlbnRlciIsImRyb3AiLCJldmVudFBvcyIsIiRtb3VzZSIsImlzTm9kZSIsImJlZm9yZUluc2VydCIsInJlbGF0ZWRUYXJnZXQiLCJiZWZvcmVpbnB1dCIsImlucHV0VHlwZSIsImRvbUNoYW5nZUNvdW50IiwiY29tcGFyZU9ianMiLCJXaWRnZXRUeXBlIiwibm9TcGVjIiwib2xkT2Zmc2V0IiwidmFsaWQiLCJJbmxpbmVUeXBlIiwiaW5jbHVzaXZlU3RhcnQiLCJpbmNsdXNpdmVFbmQiLCJpcyIsImxvY2FsIiwicHJlZGljYXRlIiwiZmluZElubmVyIiwiY2hpbGRPZmYiLCJtYXBJbm5lciIsIm5ld0xvY2FsIiwib25SZW1vdmUiLCJvbGRFbmQiLCJuZXdFbmQiLCJkU2l6ZSIsIm11c3RSZWJ1aWxkIiwiZnJvbUxvY2FsIiwidG9Mb2NhbCIsImNoaWxkT2Zmc2V0IiwiY2hpbGROb2RlIiwiZ2F0aGVyIiwibWFwQW5kR2F0aGVyUmVtYWluaW5nRGVjb3JhdGlvbnMiLCJmcm9tJDEiLCJieVBvcyIsIm1hcENoaWxkcmVuIiwiYWRkSW5uZXIiLCJiYXNlT2Zmc2V0IiwidGFrZVNwYW5zRm9yTm9kZSIsIm1vdmVTcGFucyIsIndpdGhvdXROdWxscyIsInJlbW92ZUlubmVyIiwic3BhbiQxIiwiZGVjIiwibG9jYWxTZXQiLCJEZWNvcmF0aW9uR3JvdXAiLCJyZW1vdmVPdmVybGFwIiwibG9jYWxzSW5uZXIiLCJtZW1iZXJzIiwiaGFzTnVsbHMiLCJsb2NhbFN0YXJ0Iiwid29ya2luZyIsImluc2VydEFoZWFkIiwidmlld0RlY29yYXRpb25zIiwibWFwcGVkRGVjb3MiLCJtZW1iZXIiLCJzb3J0ZWQiLCJfcHJvcHMiLCJkaXJlY3RQbHVnaW5zIiwiY2hlY2tTdGF0ZUNvbXBvbmVudCIsIl9yb290IiwibW91bnQiLCJtb3VudGVkIiwiZ2V0RWRpdGFibGUiLCJ1cGRhdGVDdXJzb3JXcmFwcGVyIiwiYnVpbGROb2RlVmlld3MiLCJjb21wdXRlRG9jRGVjbyIsImxhc3RBbmRyb2lkRGVsZXRlIiwidHIkMSIsInNoYXJlZCIsImZyb21fIiwidG9fIiwiZWRpdGFibGVDb250ZW50IiwiYW5jaG9yJDEiLCJwYXJzZUJldHdlZW4iLCJwcmVmZXJyZWRQb3MiLCJwcmVmZXJyZWRTaWRlIiwiY29tcGFyZSIsImNoYW5nZSIsImZpbmREaWZmIiwic2VsJDEiLCJuZXh0U2VsIiwiaW5saW5lQ2hhbmdlIiwib2xkIiwiJG5ld1N0YXJ0IiwiJG5ld0VuZCIsIiRuZXh0IiwibG9va3NMaWtlSm9pbiIsInRvQiIsIm1hcmtDaGFuZ2UiLCIkZnJvbTEiLCJjaEZyb20iLCJjaFRvIiwiY3VyTWFya3MiLCJwcmV2TWFya3MiLCJpc01hcmtDaGFuZ2UiLCJzZWwkMiIsInJlYWRET01DaGFuZ2UiLCJidWJibGVzIiwiZXZlbnRCZWxvbmdzVG9WaWV3IiwiaW5pdElucHV0IiwicHJldkRpcmVjdFBsdWdpbnMiLCJwbHVnaW5WaWV3cyIsInVwZGF0ZVBsdWdpblZpZXdzIiwiY29udGVudGVkaXRhYmxlIiwidHJhbnNsYXRlIiwidXBkYXRlU3RhdGVJbm5lciIsInNldFByb3BzIiwicmVjb25maWd1cmVkIiwicmVkcmF3IiwidXBkYXRlU2VsIiwibkEiLCJuQiIsImNoYW5nZWROb2RlVmlld3MiLCJzY3JvbGwiLCJzY3JvbGxUb1NlbGVjdGlvbiIsInVwZGF0ZURvYyIsInNlbDEiLCJzZWwyIiwicmVmRE9NIiwicmVmVG9wIiwibmV3UmVmVG9wIiwib2xkU2Nyb2xsUG9zIiwib3ZlcmZsb3dBbmNob3IiLCJsb2NhbFJlY3QiLCJzdG9yZVNjcm9sbFBvcyIsImZvcmNlU2VsVXBkYXRlIiwiY2hyb21lS2x1ZGdlIiwiZGVzdHJveVBsdWdpblZpZXdzIiwicHJldlN0YXRlIiwicGx1Z2luVmlldyIsInBsdWdpbiQxIiwic2V0QWN0aXZlIiwic3RvcmVkIiwicHJldmVudFNjcm9sbCIsImZvY3VzUHJldmVudFNjcm9sbCIsImdldFByb3RvdHlwZU9mIiwiZG9tQXRQb3MiLCJwb3NBdERPTSIsIm5lYXJlc3QiLCJib3hlcyIsImVuZE9mVGV4dGJsb2NrVmVydGljYWwiLCJtb2RpZnkiLCJvbGRSYW5nZSIsIm9sZE5vZGUiLCJvbGRPZmYiLCJvbGRCaWRpTGV2ZWwiLCJjYXJldEJpZGlMZXZlbCIsImVuZE9mVGV4dGJsb2NrSG9yaXpvbnRhbCIsImRlc3Ryb3lJbnB1dCIsImRpc3BhdGNoRXZlbnQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciXSwic291cmNlUm9vdCI6IiJ9